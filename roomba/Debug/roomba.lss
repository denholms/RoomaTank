
roomba.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  000021a2  00002236  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001312  00800210  00800210  00002246  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002246  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002278  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000410  00000000  00000000  000022b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000519c  00000000  00000000  000026c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001366  00000000  00000000  00007864  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000264a  00000000  00000000  00008bca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a94  00000000  00000000  0000b214  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001209  00000000  00000000  0000bca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002a0b  00000000  00000000  0000ceb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000428  00000000  00000000  0000f8bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c0       	rjmp	.+252    	; 0xfe <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <__vector_1>
       8:	9b c0       	rjmp	.+310    	; 0x140 <__bad_interrupt>
       a:	00 00       	nop
       c:	99 c0       	rjmp	.+306    	; 0x140 <__bad_interrupt>
       e:	00 00       	nop
      10:	97 c0       	rjmp	.+302    	; 0x140 <__bad_interrupt>
      12:	00 00       	nop
      14:	95 c0       	rjmp	.+298    	; 0x140 <__bad_interrupt>
      16:	00 00       	nop
      18:	93 c0       	rjmp	.+294    	; 0x140 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	91 c0       	rjmp	.+290    	; 0x140 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8f c0       	rjmp	.+286    	; 0x140 <__bad_interrupt>
      22:	00 00       	nop
      24:	8d c0       	rjmp	.+282    	; 0x140 <__bad_interrupt>
      26:	00 00       	nop
      28:	8b c0       	rjmp	.+278    	; 0x140 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	89 c0       	rjmp	.+274    	; 0x140 <__bad_interrupt>
      2e:	00 00       	nop
      30:	87 c0       	rjmp	.+270    	; 0x140 <__bad_interrupt>
      32:	00 00       	nop
      34:	85 c0       	rjmp	.+266    	; 0x140 <__bad_interrupt>
      36:	00 00       	nop
      38:	83 c0       	rjmp	.+262    	; 0x140 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	81 c0       	rjmp	.+258    	; 0x140 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7f c0       	rjmp	.+254    	; 0x140 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 71 0a 	jmp	0x14e2	; 0x14e2 <__vector_17>
      48:	7b c0       	rjmp	.+246    	; 0x140 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	79 c0       	rjmp	.+242    	; 0x140 <__bad_interrupt>
      4e:	00 00       	nop
      50:	77 c0       	rjmp	.+238    	; 0x140 <__bad_interrupt>
      52:	00 00       	nop
      54:	75 c0       	rjmp	.+234    	; 0x140 <__bad_interrupt>
      56:	00 00       	nop
      58:	73 c0       	rjmp	.+230    	; 0x140 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	71 c0       	rjmp	.+226    	; 0x140 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6f c0       	rjmp	.+222    	; 0x140 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 1c 0f 	jmp	0x1e38	; 0x1e38 <__vector_25>
      68:	6b c0       	rjmp	.+214    	; 0x140 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	69 c0       	rjmp	.+210    	; 0x140 <__bad_interrupt>
      6e:	00 00       	nop
      70:	67 c0       	rjmp	.+206    	; 0x140 <__bad_interrupt>
      72:	00 00       	nop
      74:	65 c0       	rjmp	.+202    	; 0x140 <__bad_interrupt>
      76:	00 00       	nop
      78:	63 c0       	rjmp	.+198    	; 0x140 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	61 c0       	rjmp	.+194    	; 0x140 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 48 0b 	jmp	0x1690	; 0x1690 <__vector_32>
      84:	5d c0       	rjmp	.+186    	; 0x140 <__bad_interrupt>
      86:	00 00       	nop
      88:	5b c0       	rjmp	.+182    	; 0x140 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	59 c0       	rjmp	.+178    	; 0x140 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 4d 0f 	jmp	0x1e9a	; 0x1e9a <__vector_36>
      94:	55 c0       	rjmp	.+170    	; 0x140 <__bad_interrupt>
      96:	00 00       	nop
      98:	53 c0       	rjmp	.+166    	; 0x140 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	51 c0       	rjmp	.+162    	; 0x140 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4f c0       	rjmp	.+158    	; 0x140 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4d c0       	rjmp	.+154    	; 0x140 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4b c0       	rjmp	.+150    	; 0x140 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	49 c0       	rjmp	.+146    	; 0x140 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	47 c0       	rjmp	.+142    	; 0x140 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	45 c0       	rjmp	.+138    	; 0x140 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	43 c0       	rjmp	.+134    	; 0x140 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	41 c0       	rjmp	.+130    	; 0x140 <__bad_interrupt>
      be:	00 00       	nop
      c0:	3f c0       	rjmp	.+126    	; 0x140 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3d c0       	rjmp	.+122    	; 0x140 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3b c0       	rjmp	.+118    	; 0x140 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	39 c0       	rjmp	.+114    	; 0x140 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	37 c0       	rjmp	.+110    	; 0x140 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	35 c0       	rjmp	.+106    	; 0x140 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	33 c0       	rjmp	.+102    	; 0x140 <__bad_interrupt>
      da:	00 00       	nop
      dc:	31 c0       	rjmp	.+98     	; 0x140 <__bad_interrupt>
      de:	00 00       	nop
      e0:	2f c0       	rjmp	.+94     	; 0x140 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	36 06       	cpc	r3, r22
      e6:	1c 06       	cpc	r1, r28
      e8:	36 06       	cpc	r3, r22
      ea:	45 06       	cpc	r4, r21
      ec:	ea 06       	cpc	r14, r26
      ee:	54 06       	cpc	r5, r20
      f0:	0d 06       	cpc	r0, r29
      f2:	3d 07       	cpc	r19, r29
      f4:	72 07       	cpc	r23, r18
      f6:	14 08       	sbc	r1, r4
      f8:	16 08       	sbc	r1, r6
      fa:	4c 08       	sbc	r4, r12
      fc:	c3 08       	sbc	r12, r3

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d1 e2       	ldi	r29, 0x21	; 33
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0c bf       	out	0x3c, r16	; 60

0000010e <__do_copy_data>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a0 e0       	ldi	r26, 0x00	; 0
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	e2 ea       	ldi	r30, 0xA2	; 162
     116:	f1 e2       	ldi	r31, 0x21	; 33
     118:	00 e0       	ldi	r16, 0x00	; 0
     11a:	0b bf       	out	0x3b, r16	; 59
     11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x14>
     11e:	07 90       	elpm	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	a0 31       	cpi	r26, 0x10	; 16
     124:	b1 07       	cpc	r27, r17
     126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0x10>

00000128 <__do_clear_bss>:
     128:	25 e1       	ldi	r18, 0x15	; 21
     12a:	a0 e1       	ldi	r26, 0x10	; 16
     12c:	b2 e0       	ldi	r27, 0x02	; 2
     12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
     130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
     132:	a2 32       	cpi	r26, 0x22	; 34
     134:	b2 07       	cpc	r27, r18
     136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>
     138:	0e 94 5f 0b 	call	0x16be	; 0x16be <main>
     13c:	0c 94 cf 10 	jmp	0x219e	; 0x219e <_exit>

00000140 <__bad_interrupt>:
     140:	5f cf       	rjmp	.-322    	; 0x0 <__vectors>

00000142 <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
     142:	0f 92       	push	r0
     144:	1f 92       	push	r1
     146:	2f 92       	push	r2
     148:	3f 92       	push	r3
     14a:	4f 92       	push	r4
     14c:	5f 92       	push	r5
     14e:	6f 92       	push	r6
     150:	7f 92       	push	r7
     152:	8f 92       	push	r8
     154:	9f 92       	push	r9
     156:	af 92       	push	r10
     158:	bf 92       	push	r11
     15a:	cf 92       	push	r12
     15c:	df 92       	push	r13
     15e:	ef 92       	push	r14
     160:	ff 92       	push	r15
     162:	0f 93       	push	r16
     164:	1f 93       	push	r17
     166:	2f 93       	push	r18
     168:	3f 93       	push	r19
     16a:	4f 93       	push	r20
     16c:	5f 93       	push	r21
     16e:	6f 93       	push	r22
     170:	7f 93       	push	r23
     172:	8f 93       	push	r24
     174:	9f 93       	push	r25
     176:	af 93       	push	r26
     178:	bf 93       	push	r27
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	ef 93       	push	r30
     180:	ff 93       	push	r31
     182:	0f b7       	in	r16, 0x3f	; 63
     184:	0f 93       	push	r16
     186:	fc b7       	in	r31, 0x3c	; 60
     188:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
     18a:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     18c:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
     18e:	e0 93 1f 15 	sts	0x151F, r30
        sts  KernelSp+1, r31
     192:	f0 93 20 15 	sts	0x1520, r31
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
     196:	e0 91 fd 14 	lds	r30, 0x14FD
        lds  r31, CurrentSp+1
     19a:	f0 91 fe 14 	lds	r31, 0x14FE
        out  SPL, r30
     19e:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     1a0:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
     1a2:	ff 91       	pop	r31
     1a4:	fc bf       	out	0x3c, r31	; 60
     1a6:	0f 91       	pop	r16
     1a8:	0f bf       	out	0x3f, r16	; 63
     1aa:	ff 91       	pop	r31
     1ac:	ef 91       	pop	r30
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	bf 91       	pop	r27
     1b4:	af 91       	pop	r26
     1b6:	9f 91       	pop	r25
     1b8:	8f 91       	pop	r24
     1ba:	7f 91       	pop	r23
     1bc:	6f 91       	pop	r22
     1be:	5f 91       	pop	r21
     1c0:	4f 91       	pop	r20
     1c2:	3f 91       	pop	r19
     1c4:	2f 91       	pop	r18
     1c6:	1f 91       	pop	r17
     1c8:	0f 91       	pop	r16
     1ca:	ff 90       	pop	r15
     1cc:	ef 90       	pop	r14
     1ce:	df 90       	pop	r13
     1d0:	cf 90       	pop	r12
     1d2:	bf 90       	pop	r11
     1d4:	af 90       	pop	r10
     1d6:	9f 90       	pop	r9
     1d8:	8f 90       	pop	r8
     1da:	7f 90       	pop	r7
     1dc:	6f 90       	pop	r6
     1de:	5f 90       	pop	r5
     1e0:	4f 90       	pop	r4
     1e2:	3f 90       	pop	r3
     1e4:	2f 90       	pop	r2
     1e6:	1f 90       	pop	r1
     1e8:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
     1ea:	18 95       	reti

000001ec <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
     1ec:	0f 92       	push	r0
     1ee:	1f 92       	push	r1
     1f0:	2f 92       	push	r2
     1f2:	3f 92       	push	r3
     1f4:	4f 92       	push	r4
     1f6:	5f 92       	push	r5
     1f8:	6f 92       	push	r6
     1fa:	7f 92       	push	r7
     1fc:	8f 92       	push	r8
     1fe:	9f 92       	push	r9
     200:	af 92       	push	r10
     202:	bf 92       	push	r11
     204:	cf 92       	push	r12
     206:	df 92       	push	r13
     208:	ef 92       	push	r14
     20a:	ff 92       	push	r15
     20c:	0f 93       	push	r16
     20e:	1f 93       	push	r17
     210:	2f 93       	push	r18
     212:	3f 93       	push	r19
     214:	4f 93       	push	r20
     216:	5f 93       	push	r21
     218:	6f 93       	push	r22
     21a:	7f 93       	push	r23
     21c:	8f 93       	push	r24
     21e:	9f 93       	push	r25
     220:	af 93       	push	r26
     222:	bf 93       	push	r27
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	ef 93       	push	r30
     22a:	ff 93       	push	r31
     22c:	0f b7       	in	r16, 0x3f	; 63
     22e:	0f 93       	push	r16
     230:	fc b7       	in	r31, 0x3c	; 60
     232:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
     234:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     236:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
     238:	e0 93 fd 14 	sts	0x14FD, r30
        sts  CurrentSp+1, r31
     23c:	f0 93 fe 14 	sts	0x14FE, r31
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
     240:	e0 91 1f 15 	lds	r30, 0x151F
        lds  r31, KernelSp+1
     244:	f0 91 20 15 	lds	r31, 0x1520
        out  SPL, r30
     248:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     24a:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
     24c:	ff 91       	pop	r31
     24e:	fc bf       	out	0x3c, r31	; 60
     250:	0f 91       	pop	r16
     252:	0f bf       	out	0x3f, r16	; 63
     254:	ff 91       	pop	r31
     256:	ef 91       	pop	r30
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	bf 91       	pop	r27
     25e:	af 91       	pop	r26
     260:	9f 91       	pop	r25
     262:	8f 91       	pop	r24
     264:	7f 91       	pop	r23
     266:	6f 91       	pop	r22
     268:	5f 91       	pop	r21
     26a:	4f 91       	pop	r20
     26c:	3f 91       	pop	r19
     26e:	2f 91       	pop	r18
     270:	1f 91       	pop	r17
     272:	0f 91       	pop	r16
     274:	ff 90       	pop	r15
     276:	ef 90       	pop	r14
     278:	df 90       	pop	r13
     27a:	cf 90       	pop	r12
     27c:	bf 90       	pop	r11
     27e:	af 90       	pop	r10
     280:	9f 90       	pop	r9
     282:	8f 90       	pop	r8
     284:	7f 90       	pop	r7
     286:	6f 90       	pop	r6
     288:	5f 90       	pop	r5
     28a:	4f 90       	pop	r4
     28c:	3f 90       	pop	r3
     28e:	2f 90       	pop	r2
     290:	1f 90       	pop	r1
     292:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
     294:	08 95       	ret

00000296 <adc_init>:

// initialize adc
void adc_init()
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
     296:	80 e4       	ldi	r24, 0x40	; 64
     298:	80 93 7c 00 	sts	0x007C, r24
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     29c:	87 e8       	ldi	r24, 0x87	; 135
     29e:	80 93 7a 00 	sts	0x007A, r24
     2a2:	08 95       	ret

000002a4 <adc_read>:
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     2a4:	ec e7       	ldi	r30, 0x7C	; 124
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	90 81       	ld	r25, Z
uint16_t adc_read(uint8_t ch)
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
     2aa:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     2ac:	98 7f       	andi	r25, 0xF8	; 248
     2ae:	89 2b       	or	r24, r25
     2b0:	80 83       	st	Z, r24
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
     2b2:	ea e7       	ldi	r30, 0x7A	; 122
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	80 81       	ld	r24, Z
     2b8:	80 64       	ori	r24, 0x40	; 64
     2ba:	80 83       	st	Z, r24
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
     2bc:	80 81       	ld	r24, Z
     2be:	86 fd       	sbrc	r24, 6
     2c0:	fd cf       	rjmp	.-6      	; 0x2bc <adc_read+0x18>
	
	return (ADC);
     2c2:	80 91 78 00 	lds	r24, 0x0078
     2c6:	90 91 79 00 	lds	r25, 0x0079
}
     2ca:	08 95       	ret

000002cc <radio_rxhandler>:
	return 0;
}

void radio_rxhandler(uint8_t pipenumber)
{
	rxflag = 1;
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	80 93 10 02 	sts	0x0210, r24
	PORTL ^= _BV(PL7);
     2d2:	eb e0       	ldi	r30, 0x0B	; 11
     2d4:	f1 e0       	ldi	r31, 0x01	; 1
     2d6:	80 81       	ld	r24, Z
     2d8:	80 58       	subi	r24, 0x80	; 128
     2da:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2dc:	83 ed       	ldi	r24, 0xD3	; 211
     2de:	90 e3       	ldi	r25, 0x30	; 48
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <radio_rxhandler+0x14>
     2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <radio_rxhandler+0x1a>
     2e6:	00 00       	nop
	_delay_ms(50);
	PORTL ^= _BV(PL7);
     2e8:	80 81       	ld	r24, Z
     2ea:	80 58       	subi	r24, 0x80	; 128
     2ec:	80 83       	st	Z, r24
     2ee:	08 95       	ret

000002f0 <init_LED_PORTL_pin0>:
void init_LED_PORTL_pin6(void) {
    DDRL |= _BV(DDL6);
}

void init_LED_PORTL_pin7(void) {
    DDRL |= _BV(DDL7);
     2f0:	ea e0       	ldi	r30, 0x0A	; 10
     2f2:	f1 e0       	ldi	r31, 0x01	; 1
     2f4:	80 81       	ld	r24, Z
     2f6:	81 60       	ori	r24, 0x01	; 1
     2f8:	80 83       	st	Z, r24
     2fa:	08 95       	ret

000002fc <init_LED_PORTL_pin1>:
     2fc:	ea e0       	ldi	r30, 0x0A	; 10
     2fe:	f1 e0       	ldi	r31, 0x01	; 1
     300:	80 81       	ld	r24, Z
     302:	82 60       	ori	r24, 0x02	; 2
     304:	80 83       	st	Z, r24
     306:	08 95       	ret

00000308 <init_LED_PORTL_pin2>:
     308:	ea e0       	ldi	r30, 0x0A	; 10
     30a:	f1 e0       	ldi	r31, 0x01	; 1
     30c:	80 81       	ld	r24, Z
     30e:	84 60       	ori	r24, 0x04	; 4
     310:	80 83       	st	Z, r24
     312:	08 95       	ret

00000314 <init_LED_PORTL_pin5>:
     314:	ea e0       	ldi	r30, 0x0A	; 10
     316:	f1 e0       	ldi	r31, 0x01	; 1
     318:	80 81       	ld	r24, Z
     31a:	80 62       	ori	r24, 0x20	; 32
     31c:	80 83       	st	Z, r24
     31e:	08 95       	ret

00000320 <init_LED_PORTL_pin6>:
     320:	ea e0       	ldi	r30, 0x0A	; 10
     322:	f1 e0       	ldi	r31, 0x01	; 1
     324:	80 81       	ld	r24, Z
     326:	80 64       	ori	r24, 0x40	; 64
     328:	80 83       	st	Z, r24
     32a:	08 95       	ret

0000032c <enable_LED>:
}

void enable_LED(unsigned int mask) {
    PORTL |= _BV(mask);
     32c:	eb e0       	ldi	r30, 0x0B	; 11
     32e:	f1 e0       	ldi	r31, 0x01	; 1
     330:	90 81       	ld	r25, Z
     332:	21 e0       	ldi	r18, 0x01	; 1
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	02 c0       	rjmp	.+4      	; 0x33c <enable_LED+0x10>
     338:	22 0f       	add	r18, r18
     33a:	33 1f       	adc	r19, r19
     33c:	8a 95       	dec	r24
     33e:	e2 f7       	brpl	.-8      	; 0x338 <enable_LED+0xc>
     340:	29 2b       	or	r18, r25
     342:	20 83       	st	Z, r18
     344:	08 95       	ret

00000346 <disable_LED>:
}

void disable_LED(unsigned int mask) {
    PORTL &= ~_BV(mask);
     346:	eb e0       	ldi	r30, 0x0B	; 11
     348:	f1 e0       	ldi	r31, 0x01	; 1
     34a:	90 81       	ld	r25, Z
     34c:	21 e0       	ldi	r18, 0x01	; 1
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	02 c0       	rjmp	.+4      	; 0x356 <disable_LED+0x10>
     352:	22 0f       	add	r18, r18
     354:	33 1f       	adc	r19, r19
     356:	8a 95       	dec	r24
     358:	e2 f7       	brpl	.-8      	; 0x352 <disable_LED+0xc>
     35a:	20 95       	com	r18
     35c:	29 23       	and	r18, r25
     35e:	20 83       	st	Z, r18
     360:	08 95       	ret

00000362 <Idle>:

		Task_Sleep(100);
	}*/
	
	Roomba_Drive(100, 0x8000);
	Task_Terminate();
     362:	ff cf       	rjmp	.-2      	; 0x362 <Idle>

00000364 <Init_Task>:
     364:	0f 93       	push	r16
     366:	1f 93       	push	r17
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	0e 94 57 0e 	call	0x1cae	; 0x1cae <Roomba_Init>
     370:	92 df       	rcall	.-220    	; 0x296 <adc_init>
     372:	0e 94 c4 09 	call	0x1388	; 0x1388 <Mutex_Init>
     376:	90 93 b0 14 	sts	0x14B0, r25
     37a:	80 93 af 14 	sts	0x14AF, r24
     37e:	0e 94 c4 09 	call	0x1388	; 0x1388 <Mutex_Init>
     382:	90 93 b6 14 	sts	0x14B6, r25
     386:	80 93 b5 14 	sts	0x14B5, r24
     38a:	0e 94 df 09 	call	0x13be	; 0x13be <Event_Init>
     38e:	90 93 bc 14 	sts	0x14BC, r25
     392:	80 93 bb 14 	sts	0x14BB, r24
     396:	0e 94 df 09 	call	0x13be	; 0x13be <Event_Init>
     39a:	90 93 b4 14 	sts	0x14B4, r25
     39e:	80 93 b3 14 	sts	0x14B3, r24
     3a2:	57 9a       	sbi	0x0a, 7	; 10
     3a4:	9a 9a       	sbi	0x13, 2	; 19
     3a6:	5f 98       	cbi	0x0b, 7	; 11
     3a8:	a2 98       	cbi	0x14, 2	; 20
     3aa:	ca e0       	ldi	r28, 0x0A	; 10
     3ac:	d0 e0       	ldi	r29, 0x00	; 0
     3ae:	00 e0       	ldi	r16, 0x00	; 0
     3b0:	10 e0       	ldi	r17, 0x00	; 0
     3b2:	87 e0       	ldi	r24, 0x07	; 7
     3b4:	77 df       	rcall	.-274    	; 0x2a4 <adc_read>
     3b6:	08 0f       	add	r16, r24
     3b8:	19 1f       	adc	r17, r25
     3ba:	21 97       	sbiw	r28, 0x01	; 1
     3bc:	d1 f7       	brne	.-12     	; 0x3b2 <Init_Task+0x4e>
     3be:	c8 01       	movw	r24, r16
     3c0:	6a e0       	ldi	r22, 0x0A	; 10
     3c2:	70 e0       	ldi	r23, 0x00	; 0
     3c4:	0e 94 b4 10 	call	0x2168	; 0x2168 <__divmodhi4>
     3c8:	07 2e       	mov	r0, r23
     3ca:	00 0c       	add	r0, r0
     3cc:	88 0b       	sbc	r24, r24
     3ce:	99 0b       	sbc	r25, r25
     3d0:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__floatsisf>
     3d4:	23 e3       	ldi	r18, 0x33	; 51
     3d6:	33 e3       	ldi	r19, 0x33	; 51
     3d8:	43 eb       	ldi	r20, 0xB3	; 179
     3da:	5f e3       	ldi	r21, 0x3F	; 63
     3dc:	0e 94 15 10 	call	0x202a	; 0x202a <__mulsf3>
     3e0:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__fixsfsi>
     3e4:	70 93 ac 14 	sts	0x14AC, r23
     3e8:	60 93 ab 14 	sts	0x14AB, r22
     3ec:	f8 d0       	rcall	.+496    	; 0x5de <Task_Terminate>
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	1f 91       	pop	r17
     3f4:	0f 91       	pop	r16
     3f6:	08 95       	ret

000003f8 <Man_Drive>:
}

void Man_Drive(uint8_t dir){
	switch ((int)dir){
     3f8:	82 33       	cpi	r24, 0x32	; 50
     3fa:	11 f1       	breq	.+68     	; 0x440 <Man_Drive+0x48>
     3fc:	28 f4       	brcc	.+10     	; 0x408 <Man_Drive+0x10>
     3fe:	80 33       	cpi	r24, 0x30	; 48
     400:	41 f0       	breq	.+16     	; 0x412 <Man_Drive+0x1a>
     402:	81 33       	cpi	r24, 0x31	; 49
     404:	69 f0       	breq	.+26     	; 0x420 <Man_Drive+0x28>
     406:	4c c0       	rjmp	.+152    	; 0x4a0 <Man_Drive+0xa8>
     408:	83 33       	cpi	r24, 0x33	; 51
     40a:	51 f1       	breq	.+84     	; 0x460 <Man_Drive+0x68>
     40c:	84 33       	cpi	r24, 0x34	; 52
     40e:	c9 f1       	breq	.+114    	; 0x482 <Man_Drive+0x8a>
     410:	47 c0       	rjmp	.+142    	; 0x4a0 <Man_Drive+0xa8>
		case 48:
			//No movement
			radius = 0x8000;
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	90 e8       	ldi	r25, 0x80	; 128
     416:	90 93 01 02 	sts	0x0201, r25
     41a:	80 93 00 02 	sts	0x0200, r24
			break;
     41e:	40 c0       	rjmp	.+128    	; 0x4a0 <Man_Drive+0xa8>
		case 49:
			//Left
			radius = (velocity == 0) ? -1 : -200;
     420:	80 91 11 02 	lds	r24, 0x0211
     424:	90 91 12 02 	lds	r25, 0x0212
     428:	89 2b       	or	r24, r25
     42a:	19 f0       	breq	.+6      	; 0x432 <Man_Drive+0x3a>
     42c:	88 e3       	ldi	r24, 0x38	; 56
     42e:	9f ef       	ldi	r25, 0xFF	; 255
     430:	02 c0       	rjmp	.+4      	; 0x436 <Man_Drive+0x3e>
     432:	8f ef       	ldi	r24, 0xFF	; 255
     434:	9f ef       	ldi	r25, 0xFF	; 255
     436:	90 93 01 02 	sts	0x0201, r25
     43a:	80 93 00 02 	sts	0x0200, r24
			break;
     43e:	30 c0       	rjmp	.+96     	; 0x4a0 <Man_Drive+0xa8>
		case 50:
			//Right
			radius = (velocity == 0) ? 1 : 200;
     440:	80 91 11 02 	lds	r24, 0x0211
     444:	90 91 12 02 	lds	r25, 0x0212
     448:	89 2b       	or	r24, r25
     44a:	19 f0       	breq	.+6      	; 0x452 <Man_Drive+0x5a>
     44c:	88 ec       	ldi	r24, 0xC8	; 200
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	02 c0       	rjmp	.+4      	; 0x456 <Man_Drive+0x5e>
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	90 93 01 02 	sts	0x0201, r25
     45a:	80 93 00 02 	sts	0x0200, r24
			break;
     45e:	20 c0       	rjmp	.+64     	; 0x4a0 <Man_Drive+0xa8>
		case 51:
			//Down
			velocity = (velocity > 0) ? 0 : -200;
     460:	80 91 11 02 	lds	r24, 0x0211
     464:	90 91 12 02 	lds	r25, 0x0212
     468:	18 16       	cp	r1, r24
     46a:	19 06       	cpc	r1, r25
     46c:	1c f0       	brlt	.+6      	; 0x474 <Man_Drive+0x7c>
     46e:	88 e3       	ldi	r24, 0x38	; 56
     470:	9f ef       	ldi	r25, 0xFF	; 255
     472:	02 c0       	rjmp	.+4      	; 0x478 <Man_Drive+0x80>
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	90 93 12 02 	sts	0x0212, r25
     47c:	80 93 11 02 	sts	0x0211, r24
			break;
     480:	0f c0       	rjmp	.+30     	; 0x4a0 <Man_Drive+0xa8>
		case 52:
			//Up
			velocity = (velocity < 0) ? 0 : 200;
     482:	80 91 11 02 	lds	r24, 0x0211
     486:	90 91 12 02 	lds	r25, 0x0212
     48a:	99 23       	and	r25, r25
     48c:	1c f0       	brlt	.+6      	; 0x494 <Man_Drive+0x9c>
     48e:	88 ec       	ldi	r24, 0xC8	; 200
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	02 c0       	rjmp	.+4      	; 0x498 <Man_Drive+0xa0>
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	90 93 12 02 	sts	0x0212, r25
     49c:	80 93 11 02 	sts	0x0211, r24
			break;
		default:
			break;
			
	}
	Roomba_Drive(velocity, radius);
     4a0:	60 91 00 02 	lds	r22, 0x0200
     4a4:	70 91 01 02 	lds	r23, 0x0201
     4a8:	80 91 11 02 	lds	r24, 0x0211
     4ac:	90 91 12 02 	lds	r25, 0x0212
     4b0:	0c 94 a8 0e 	jmp	0x1d50	; 0x1d50 <Roomba_Drive>
     4b4:	08 95       	ret

000004b6 <Auto_Drive>:
	return;
}

void Auto_Drive() {
	uart_putchar(CLEAN, ROOMBA_UART);
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	87 e8       	ldi	r24, 0x87	; 135
     4bc:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <uart_putchar>
     4c0:	2f ef       	ldi	r18, 0xFF	; 255
     4c2:	89 ef       	ldi	r24, 0xF9	; 249
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	21 50       	subi	r18, 0x01	; 1
     4c8:	80 40       	sbci	r24, 0x00	; 0
     4ca:	90 40       	sbci	r25, 0x00	; 0
     4cc:	e1 f7       	brne	.-8      	; 0x4c6 <Auto_Drive+0x10>
     4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <Auto_Drive+0x1a>
     4d0:	00 00       	nop
     4d2:	08 95       	ret

000004d4 <Sense>:
	
	for (;;) {
		photo_resist = 0;
		
		// Read photo-resistor
		photo_resist = adc_read(7);
     4d4:	87 e0       	ldi	r24, 0x07	; 7
     4d6:	e6 de       	rcall	.-564    	; 0x2a4 <adc_read>

		// Hit by laser
		if (photo_resist > light_threshold){
     4d8:	20 91 ab 14 	lds	r18, 0x14AB
     4dc:	30 91 ac 14 	lds	r19, 0x14AC
     4e0:	28 17       	cp	r18, r24
     4e2:	39 07       	cpc	r19, r25
     4e4:	10 f4       	brcc	.+4      	; 0x4ea <Sense+0x16>

			//Light up LED
			PORTG |= (1<<PG2);
     4e6:	a2 9a       	sbi	0x14, 2	; 20
     4e8:	ff cf       	rjmp	.-2      	; 0x4e8 <Sense+0x14>
			Idle();
		}
		
		// If enough data received
		if (uart_bytes_received(BT_UART) >= 5) {
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <uart_bytes_received>
     4f2:	85 30       	cpi	r24, 0x05	; 5
     4f4:	08 f4       	brcc	.+2      	; 0x4f8 <Sense+0x24>
     4f6:	4e c0       	rjmp	.+156    	; 0x594 <Sense+0xc0>
			//uart_reset_receive(BT_UART);
			
			start = uart_get_byte(1, BT_UART);
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	70 e0       	ldi	r23, 0x00	; 0
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <uart_get_byte>
     504:	d8 2f       	mov	r29, r24
			end = uart_get_byte(4, BT_UART);
     506:	61 e0       	ldi	r22, 0x01	; 1
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	84 e0       	ldi	r24, 0x04	; 4
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <uart_get_byte>
     512:	c8 2f       	mov	r28, r24
			uart_putchar(uart_bytes_received(BT_UART), BT_UART);
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <uart_bytes_received>
     51c:	61 e0       	ldi	r22, 0x01	; 1
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <uart_putchar>
			uart_putchar(start, BT_UART);
     524:	61 e0       	ldi	r22, 0x01	; 1
     526:	70 e0       	ldi	r23, 0x00	; 0
     528:	8d 2f       	mov	r24, r29
     52a:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <uart_putchar>
			uart_putchar(end, BT_UART);
     52e:	61 e0       	ldi	r22, 0x01	; 1
     530:	70 e0       	ldi	r23, 0x00	; 0
     532:	8c 2f       	mov	r24, r28
     534:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <uart_putchar>
			// Validate framing
			if (start == (uint8_t)'s' && end == (uint8_t)'e'){
     538:	d3 37       	cpi	r29, 0x73	; 115
     53a:	41 f5       	brne	.+80     	; 0x58c <Sense+0xb8>
     53c:	c5 36       	cpi	r28, 0x65	; 101
     53e:	31 f5       	brne	.+76     	; 0x58c <Sense+0xb8>
				dir = uart_get_byte(2, BT_UART);
     540:	61 e0       	ldi	r22, 0x01	; 1
     542:	70 e0       	ldi	r23, 0x00	; 0
     544:	82 e0       	ldi	r24, 0x02	; 2
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <uart_get_byte>
     54c:	c8 2f       	mov	r28, r24
				laser_btn = uart_get_byte(3, BT_UART);
     54e:	61 e0       	ldi	r22, 0x01	; 1
     550:	70 e0       	ldi	r23, 0x00	; 0
     552:	83 e0       	ldi	r24, 0x03	; 3
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <uart_get_byte>
     55a:	d8 2f       	mov	r29, r24
				uart_putchar(dir, BT_UART);
     55c:	61 e0       	ldi	r22, 0x01	; 1
     55e:	70 e0       	ldi	r23, 0x00	; 0
     560:	8c 2f       	mov	r24, r28
     562:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <uart_putchar>
				uart_putchar(laser_btn, BT_UART);
     566:	61 e0       	ldi	r22, 0x01	; 1
     568:	70 e0       	ldi	r23, 0x00	; 0
     56a:	8d 2f       	mov	r24, r29
     56c:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <uart_putchar>
				//_delay_ms(100);
				//PORTD &= ~(1<<PD7);
				//_delay_ms(500);
				
				// On == 'o'
				if (laser_btn == 111){
     570:	df 36       	cpi	r29, 0x6F	; 111
     572:	31 f4       	brne	.+12     	; 0x580 <Sense+0xac>
					uart_putchar('o', BT_UART);
     574:	61 e0       	ldi	r22, 0x01	; 1
     576:	70 e0       	ldi	r23, 0x00	; 0
     578:	8f e6       	ldi	r24, 0x6F	; 111
     57a:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <uart_putchar>
					//FIRE LASER
					PORTD |= (1<<PD7);
     57e:	5f 9a       	sbi	0x0b, 7	; 11
				}
				// Direction input (joystick) results in manual drive
				if (dir != 48){
     580:	c0 33       	cpi	r28, 0x30	; 48
     582:	19 f0       	breq	.+6      	; 0x58a <Sense+0xb6>
					Man_Drive(dir);
     584:	8c 2f       	mov	r24, r28
     586:	38 df       	rcall	.-400    	; 0x3f8 <Man_Drive>
     588:	01 c0       	rjmp	.+2      	; 0x58c <Sense+0xb8>
				} else {
					Auto_Drive();
     58a:	95 df       	rcall	.-214    	; 0x4b6 <Auto_Drive>
				}
			}
			uart_reset_receive(BT_UART);
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <uart_reset_receive>
		}
		
		//Turn laser off
		PORTD &= ~(1<<PD7);
     594:	5f 98       	cbi	0x0b, 7	; 11
	}
     596:	9e cf       	rjmp	.-196    	; 0x4d4 <Sense>

00000598 <a_main>:

// Application level main function
// Creates the required tasks and then terminates
void a_main() {
	//Init_Task();
	InitPID		= Task_Create(Init_Task,0,1);
     598:	41 e0       	ldi	r20, 0x01	; 1
     59a:	50 e0       	ldi	r21, 0x00	; 0
     59c:	60 e0       	ldi	r22, 0x00	; 0
     59e:	70 e0       	ldi	r23, 0x00	; 0
     5a0:	82 eb       	ldi	r24, 0xB2	; 178
     5a2:	91 e0       	ldi	r25, 0x01	; 1
     5a4:	27 d7       	rcall	.+3662   	; 0x13f4 <Task_Create>
     5a6:	90 93 ba 14 	sts	0x14BA, r25
     5aa:	80 93 b9 14 	sts	0x14B9, r24
	SensePID	= Task_Create(Sense, 1, 1);
     5ae:	41 e0       	ldi	r20, 0x01	; 1
     5b0:	50 e0       	ldi	r21, 0x00	; 0
     5b2:	61 e0       	ldi	r22, 0x01	; 1
     5b4:	70 e0       	ldi	r23, 0x00	; 0
     5b6:	8a e6       	ldi	r24, 0x6A	; 106
     5b8:	92 e0       	ldi	r25, 0x02	; 2
     5ba:	1c d7       	rcall	.+3640   	; 0x13f4 <Task_Create>
     5bc:	90 93 b2 14 	sts	0x14B2, r25
     5c0:	80 93 b1 14 	sts	0x14B1, r24
	IdlePID		= Task_Create(Idle, 8, 1);
     5c4:	41 e0       	ldi	r20, 0x01	; 1
     5c6:	50 e0       	ldi	r21, 0x00	; 0
     5c8:	68 e0       	ldi	r22, 0x08	; 8
     5ca:	70 e0       	ldi	r23, 0x00	; 0
     5cc:	81 eb       	ldi	r24, 0xB1	; 177
     5ce:	91 e0       	ldi	r25, 0x01	; 1
     5d0:	11 d7       	rcall	.+3618   	; 0x13f4 <Task_Create>
     5d2:	90 93 aa 14 	sts	0x14AA, r25
     5d6:	80 93 a9 14 	sts	0x14A9, r24
	adc_test = adc_read(7);
	sprintf(line, "%04d\0", adc_test);
	uart_send_string(line, BT_UART);
	_delay_ms(50);*/
	
	Task_Terminate();
     5da:	01 c0       	rjmp	.+2      	; 0x5de <Task_Terminate>
     5dc:	08 95       	ret

000005de <Task_Terminate>:
/**
  * Application level task getarg to return intiial arg value
  */
int Task_GetArg(PID p) {
	return (Cp->arg);
}
     5de:	80 91 23 02 	lds	r24, 0x0223
     5e2:	90 91 24 02 	lds	r25, 0x0224
     5e6:	89 2b       	or	r24, r25
     5e8:	51 f0       	breq	.+20     	; 0x5fe <Task_Terminate+0x20>
     5ea:	f8 94       	cli
     5ec:	e0 91 25 02 	lds	r30, 0x0225
     5f0:	f0 91 26 02 	lds	r31, 0x0226
     5f4:	e3 5f       	subi	r30, 0xF3	; 243
     5f6:	fe 4f       	sbci	r31, 0xFE	; 254
     5f8:	84 e0       	ldi	r24, 0x04	; 4
     5fa:	80 83       	st	Z, r24
     5fc:	f7 cd       	rjmp	.-1042   	; 0x1ec <Enter_Kernel>
     5fe:	08 95       	ret

00000600 <Kernel_Create_Task_At>:
     600:	ef 92       	push	r14
     602:	ff 92       	push	r15
     604:	0f 93       	push	r16
     606:	1f 93       	push	r17
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	1f 92       	push	r1
     60e:	1f 92       	push	r1
     610:	cd b7       	in	r28, 0x3d	; 61
     612:	de b7       	in	r29, 0x3e	; 62
     614:	9a 83       	std	Y+2, r25	; 0x02
     616:	89 83       	std	Y+1, r24	; 0x01
     618:	dc 01       	movw	r26, r24
     61a:	7c 01       	movw	r14, r24
     61c:	04 e0       	ldi	r16, 0x04	; 4
     61e:	e0 0e       	add	r14, r16
     620:	f1 1c       	adc	r15, r1
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	91 e0       	ldi	r25, 0x01	; 1
     626:	f7 01       	movw	r30, r14
     628:	8c 01       	movw	r16, r24
     62a:	11 92       	st	Z+, r1
     62c:	01 50       	subi	r16, 0x01	; 1
     62e:	10 40       	sbci	r17, 0x00	; 0
     630:	e1 f7       	brne	.-8      	; 0x62a <Kernel_Create_Task_At+0x2a>
     632:	fd 01       	movw	r30, r26
     634:	ed 5f       	subi	r30, 0xFD	; 253
     636:	fe 4f       	sbci	r31, 0xFE	; 254
     638:	8f ee       	ldi	r24, 0xEF	; 239
     63a:	92 e0       	ldi	r25, 0x02	; 2
     63c:	80 83       	st	Z, r24
     63e:	31 97       	sbiw	r30, 0x01	; 1
     640:	90 83       	st	Z, r25
     642:	31 97       	sbiw	r30, 0x01	; 1
     644:	60 83       	st	Z, r22
     646:	31 97       	sbiw	r30, 0x01	; 1
     648:	70 83       	st	Z, r23
     64a:	31 97       	sbiw	r30, 0x01	; 1
     64c:	10 82       	st	Z, r1
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	92 93       	st	-Z, r25
     652:	9f 5f       	subi	r25, 0xFF	; 255
     654:	92 32       	cpi	r25, 0x22	; 34
     656:	e1 f7       	brne	.-8      	; 0x650 <Kernel_Create_Task_At+0x50>
     658:	a4 52       	subi	r26, 0x24	; 36
     65a:	bf 4f       	sbci	r27, 0xFF	; 255
     65c:	e9 81       	ldd	r30, Y+1	; 0x01
     65e:	fa 81       	ldd	r31, Y+2	; 0x02
     660:	b3 83       	std	Z+3, r27	; 0x03
     662:	a2 83       	std	Z+2, r26	; 0x02
     664:	df 01       	movw	r26, r30
     666:	a5 5f       	subi	r26, 0xF5	; 245
     668:	be 4f       	sbci	r27, 0xFE	; 254
     66a:	11 96       	adiw	r26, 0x01	; 1
     66c:	7c 93       	st	X, r23
     66e:	6e 93       	st	-X, r22
     670:	12 96       	adiw	r26, 0x02	; 2
     672:	1c 92       	st	X, r1
     674:	80 91 1f 02 	lds	r24, 0x021F
     678:	90 91 20 02 	lds	r25, 0x0220
     67c:	91 83       	std	Z+1, r25	; 0x01
     67e:	80 83       	st	Z, r24
     680:	89 81       	ldd	r24, Y+1	; 0x01
     682:	9a 81       	ldd	r25, Y+2	; 0x02
     684:	fc 01       	movw	r30, r24
     686:	eb 5f       	subi	r30, 0xFB	; 251
     688:	fe 4f       	sbci	r31, 0xFE	; 254
     68a:	51 83       	std	Z+1, r21	; 0x01
     68c:	40 83       	st	Z, r20
     68e:	32 96       	adiw	r30, 0x02	; 2
     690:	51 83       	std	Z+1, r21	; 0x01
     692:	40 83       	st	Z, r20
     694:	32 96       	adiw	r30, 0x02	; 2
     696:	31 83       	std	Z+1, r19	; 0x01
     698:	20 83       	st	Z, r18
     69a:	71 96       	adiw	r30, 0x11	; 17
     69c:	11 82       	std	Z+1, r1	; 0x01
     69e:	10 82       	st	Z, r1
     6a0:	34 97       	sbiw	r30, 0x04	; 4
     6a2:	23 e6       	ldi	r18, 0x63	; 99
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	31 83       	std	Z+1, r19	; 0x01
     6a8:	20 83       	st	Z, r18
     6aa:	20 91 21 02 	lds	r18, 0x0221
     6ae:	30 91 22 02 	lds	r19, 0x0222
     6b2:	2f 5f       	subi	r18, 0xFF	; 255
     6b4:	3f 4f       	sbci	r19, 0xFF	; 255
     6b6:	30 93 22 02 	sts	0x0222, r19
     6ba:	20 93 21 02 	sts	0x0221, r18
     6be:	20 91 1f 02 	lds	r18, 0x021F
     6c2:	30 91 20 02 	lds	r19, 0x0220
     6c6:	2f 5f       	subi	r18, 0xFF	; 255
     6c8:	3f 4f       	sbci	r19, 0xFF	; 255
     6ca:	30 93 20 02 	sts	0x0220, r19
     6ce:	20 93 1f 02 	sts	0x021F, r18
     6d2:	72 97       	sbiw	r30, 0x12	; 18
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	80 83       	st	Z, r24
     6d8:	47 e1       	ldi	r20, 0x17	; 23
     6da:	52 e0       	ldi	r21, 0x02	; 2
     6dc:	6d ed       	ldi	r22, 0xDD	; 221
     6de:	74 e1       	ldi	r23, 0x14	; 20
     6e0:	ce 01       	movw	r24, r28
     6e2:	01 96       	adiw	r24, 0x01	; 1
     6e4:	0e 94 0b 0c 	call	0x1816	; 0x1816 <enqueueRQ>
     6e8:	e9 81       	ldd	r30, Y+1	; 0x01
     6ea:	fa 81       	ldd	r31, Y+2	; 0x02
     6ec:	80 81       	ld	r24, Z
     6ee:	91 81       	ldd	r25, Z+1	; 0x01
     6f0:	0f 90       	pop	r0
     6f2:	0f 90       	pop	r0
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	1f 91       	pop	r17
     6fa:	0f 91       	pop	r16
     6fc:	ff 90       	pop	r15
     6fe:	ef 90       	pop	r14
     700:	08 95       	ret

00000702 <Kernel_Create_Task>:
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	ec 01       	movw	r28, r24
     708:	80 91 21 02 	lds	r24, 0x0221
     70c:	90 91 22 02 	lds	r25, 0x0222
     710:	40 97       	sbiw	r24, 0x10	; 16
     712:	21 f1       	breq	.+72     	; 0x75c <Kernel_Create_Task+0x5a>
     714:	80 91 8b 03 	lds	r24, 0x038B
     718:	88 23       	and	r24, r24
     71a:	71 f0       	breq	.+28     	; 0x738 <Kernel_Create_Task+0x36>
     71c:	a9 ea       	ldi	r26, 0xA9	; 169
     71e:	b4 e0       	ldi	r27, 0x04	; 4
     720:	e1 e0       	ldi	r30, 0x01	; 1
     722:	f0 e0       	ldi	r31, 0x00	; 0
     724:	9c 91       	ld	r25, X
     726:	99 23       	and	r25, r25
     728:	49 f0       	breq	.+18     	; 0x73c <Kernel_Create_Task+0x3a>
     72a:	31 96       	adiw	r30, 0x01	; 1
     72c:	a2 5e       	subi	r26, 0xE2	; 226
     72e:	be 4f       	sbci	r27, 0xFE	; 254
     730:	e0 31       	cpi	r30, 0x10	; 16
     732:	f1 05       	cpc	r31, r1
     734:	b9 f7       	brne	.-18     	; 0x724 <Kernel_Create_Task+0x22>
     736:	02 c0       	rjmp	.+4      	; 0x73c <Kernel_Create_Task+0x3a>
     738:	e0 e0       	ldi	r30, 0x00	; 0
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	9a 01       	movw	r18, r20
     73e:	ab 01       	movw	r20, r22
     740:	be 01       	movw	r22, r28
     742:	ae e1       	ldi	r26, 0x1E	; 30
     744:	b1 e0       	ldi	r27, 0x01	; 1
     746:	ea 9f       	mul	r30, r26
     748:	c0 01       	movw	r24, r0
     74a:	eb 9f       	mul	r30, r27
     74c:	90 0d       	add	r25, r0
     74e:	fa 9f       	mul	r31, r26
     750:	90 0d       	add	r25, r0
     752:	11 24       	eor	r1, r1
     754:	89 57       	subi	r24, 0x79	; 121
     756:	9d 4f       	sbci	r25, 0xFD	; 253
     758:	53 df       	rcall	.-346    	; 0x600 <Kernel_Create_Task_At>
     75a:	00 c0       	rjmp	.+0      	; 0x75c <Kernel_Create_Task+0x5a>
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	08 95       	ret

00000762 <Kernel_Init_Mutex_At>:
     762:	fc 01       	movw	r30, r24
     764:	80 91 1d 02 	lds	r24, 0x021D
     768:	90 91 1e 02 	lds	r25, 0x021E
     76c:	91 83       	std	Z+1, r25	; 0x01
     76e:	80 83       	st	Z, r24
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	82 83       	std	Z+2, r24	; 0x02
     774:	80 91 1d 02 	lds	r24, 0x021D
     778:	90 91 1e 02 	lds	r25, 0x021E
     77c:	01 96       	adiw	r24, 0x01	; 1
     77e:	90 93 1e 02 	sts	0x021E, r25
     782:	80 93 1d 02 	sts	0x021D, r24
     786:	80 81       	ld	r24, Z
     788:	91 81       	ldd	r25, Z+1	; 0x01
     78a:	08 95       	ret

0000078c <Kernel_Init_Event_At>:
     78c:	fc 01       	movw	r30, r24
     78e:	80 91 1b 02 	lds	r24, 0x021B
     792:	90 91 1c 02 	lds	r25, 0x021C
     796:	91 83       	std	Z+1, r25	; 0x01
     798:	80 83       	st	Z, r24
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	82 83       	std	Z+2, r24	; 0x02
     79e:	14 82       	std	Z+4, r1	; 0x04
     7a0:	13 82       	std	Z+3, r1	; 0x03
     7a2:	80 91 1b 02 	lds	r24, 0x021B
     7a6:	90 91 1c 02 	lds	r25, 0x021C
     7aa:	01 96       	adiw	r24, 0x01	; 1
     7ac:	90 93 1c 02 	sts	0x021C, r25
     7b0:	80 93 1b 02 	sts	0x021B, r24
     7b4:	80 81       	ld	r24, Z
     7b6:	91 81       	ldd	r25, Z+1	; 0x01
     7b8:	08 95       	ret

000007ba <OS_Init>:
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	10 92 22 02 	sts	0x0222, r1
     7c2:	10 92 21 02 	sts	0x0221, r1
     7c6:	10 92 24 02 	sts	0x0224, r1
     7ca:	10 92 23 02 	sts	0x0223, r1
     7ce:	10 92 1e 02 	sts	0x021E, r1
     7d2:	10 92 1d 02 	sts	0x021D, r1
     7d6:	10 92 1c 02 	sts	0x021C, r1
     7da:	10 92 1b 02 	sts	0x021B, r1
     7de:	10 92 20 02 	sts	0x0220, r1
     7e2:	10 92 1f 02 	sts	0x021F, r1
     7e6:	e7 e8       	ldi	r30, 0x87	; 135
     7e8:	f2 e0       	ldi	r31, 0x02	; 2
     7ea:	ab e8       	ldi	r26, 0x8B	; 139
     7ec:	b3 e0       	ldi	r27, 0x03	; 3
     7ee:	47 e6       	ldi	r20, 0x67	; 103
     7f0:	54 e1       	ldi	r21, 0x14	; 20
     7f2:	2e e1       	ldi	r18, 0x1E	; 30
     7f4:	31 e0       	ldi	r19, 0x01	; 1
     7f6:	83 e6       	ldi	r24, 0x63	; 99
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	ef 01       	movw	r28, r30
     7fc:	b9 01       	movw	r22, r18
     7fe:	19 92       	st	Y+, r1
     800:	61 50       	subi	r22, 0x01	; 1
     802:	70 40       	sbci	r23, 0x00	; 0
     804:	e1 f7       	brne	.-8      	; 0x7fe <OS_Init+0x44>
     806:	1c 92       	st	X, r1
     808:	53 96       	adiw	r26, 0x13	; 19
     80a:	9c 93       	st	X, r25
     80c:	8e 93       	st	-X, r24
     80e:	52 97       	sbiw	r26, 0x12	; 18
     810:	11 82       	std	Z+1, r1	; 0x01
     812:	10 82       	st	Z, r1
     814:	e2 5e       	subi	r30, 0xE2	; 226
     816:	fe 4f       	sbci	r31, 0xFE	; 254
     818:	a2 5e       	subi	r26, 0xE2	; 226
     81a:	be 4f       	sbci	r27, 0xFE	; 254
     81c:	e4 17       	cp	r30, r20
     81e:	f5 07       	cpc	r31, r21
     820:	61 f7       	brne	.-40     	; 0x7fa <OS_Init+0x40>
     822:	e1 e5       	ldi	r30, 0x51	; 81
     824:	f2 e0       	ldi	r31, 0x02	; 2
     826:	29 e8       	ldi	r18, 0x89	; 137
     828:	32 e0       	ldi	r19, 0x02	; 2
     82a:	87 e0       	ldi	r24, 0x07	; 7
     82c:	df 01       	movw	r26, r30
     82e:	12 97       	sbiw	r26, 0x02	; 2
     830:	ed 01       	movw	r28, r26
     832:	68 2f       	mov	r22, r24
     834:	19 92       	st	Y+, r1
     836:	6a 95       	dec	r22
     838:	e9 f7       	brne	.-6      	; 0x834 <OS_Init+0x7a>
     83a:	10 82       	st	Z, r1
     83c:	37 96       	adiw	r30, 0x07	; 7
     83e:	e2 17       	cp	r30, r18
     840:	f3 07       	cpc	r31, r19
     842:	a1 f7       	brne	.-24     	; 0x82c <OS_Init+0x72>
     844:	e9 e2       	ldi	r30, 0x29	; 41
     846:	f2 e0       	ldi	r31, 0x02	; 2
     848:	21 e5       	ldi	r18, 0x51	; 81
     84a:	32 e0       	ldi	r19, 0x02	; 2
     84c:	85 e0       	ldi	r24, 0x05	; 5
     84e:	df 01       	movw	r26, r30
     850:	12 97       	sbiw	r26, 0x02	; 2
     852:	ed 01       	movw	r28, r26
     854:	68 2f       	mov	r22, r24
     856:	19 92       	st	Y+, r1
     858:	6a 95       	dec	r22
     85a:	e9 f7       	brne	.-6      	; 0x856 <OS_Init+0x9c>
     85c:	10 82       	st	Z, r1
     85e:	35 96       	adiw	r30, 0x05	; 5
     860:	e2 17       	cp	r30, r18
     862:	f3 07       	cpc	r31, r19
     864:	a1 f7       	brne	.-24     	; 0x84e <OS_Init+0x94>
     866:	df 91       	pop	r29
     868:	cf 91       	pop	r28
     86a:	08 95       	ret

0000086c <OS_Abort>:
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	0e 94 cf 10 	call	0x219e	; 0x219e <_exit>

00000874 <Dispatch>:
     874:	67 e1       	ldi	r22, 0x17	; 23
     876:	72 e0       	ldi	r23, 0x02	; 2
     878:	8d ed       	ldi	r24, 0xDD	; 221
     87a:	94 e1       	ldi	r25, 0x14	; 20
     87c:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <dequeueRQ>
     880:	fc 01       	movw	r30, r24
     882:	90 93 26 02 	sts	0x0226, r25
     886:	80 93 25 02 	sts	0x0225, r24
     88a:	89 2b       	or	r24, r25
     88c:	09 f4       	brne	.+2      	; 0x890 <Dispatch+0x1c>
     88e:	ee df       	rcall	.-36     	; 0x86c <OS_Abort>
     890:	82 81       	ldd	r24, Z+2	; 0x02
     892:	93 81       	ldd	r25, Z+3	; 0x03
     894:	90 93 fe 14 	sts	0x14FE, r25
     898:	80 93 fd 14 	sts	0x14FD, r24
     89c:	82 e0       	ldi	r24, 0x02	; 2
     89e:	df 01       	movw	r26, r30
     8a0:	ac 5f       	subi	r26, 0xFC	; 252
     8a2:	be 4f       	sbci	r27, 0xFE	; 254
     8a4:	8c 93       	st	X, r24
     8a6:	80 81       	ld	r24, Z
     8a8:	91 81       	ldd	r25, Z+1	; 0x01
     8aa:	02 97       	sbiw	r24, 0x02	; 2
     8ac:	20 f4       	brcc	.+8      	; 0x8b6 <Dispatch+0x42>
     8ae:	82 e0       	ldi	r24, 0x02	; 2
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	3c cd       	rjmp	.-1416   	; 0x32c <enable_LED>
     8b4:	08 95       	ret
     8b6:	80 81       	ld	r24, Z
     8b8:	91 81       	ldd	r25, Z+1	; 0x01
     8ba:	02 97       	sbiw	r24, 0x02	; 2
     8bc:	21 f4       	brne	.+8      	; 0x8c6 <Dispatch+0x52>
     8be:	85 e0       	ldi	r24, 0x05	; 5
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	34 cd       	rjmp	.-1432   	; 0x32c <enable_LED>
     8c4:	08 95       	ret
     8c6:	80 81       	ld	r24, Z
     8c8:	91 81       	ldd	r25, Z+1	; 0x01
     8ca:	03 97       	sbiw	r24, 0x03	; 3
     8cc:	19 f4       	brne	.+6      	; 0x8d4 <Dispatch+0x60>
     8ce:	86 e0       	ldi	r24, 0x06	; 6
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	2c cd       	rjmp	.-1448   	; 0x32c <enable_LED>
     8d4:	08 95       	ret

000008d6 <Kernel_Unlock_Mutex>:
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	1f 92       	push	r1
     8e0:	1f 92       	push	r1
     8e2:	cd b7       	in	r28, 0x3d	; 61
     8e4:	de b7       	in	r29, 0x3e	; 62
     8e6:	a0 91 25 02 	lds	r26, 0x0225
     8ea:	b0 91 26 02 	lds	r27, 0x0226
     8ee:	fd 01       	movw	r30, r26
     8f0:	ec 5e       	subi	r30, 0xEC	; 236
     8f2:	fe 4f       	sbci	r31, 0xFE	; 254
     8f4:	40 81       	ld	r20, Z
     8f6:	51 81       	ldd	r21, Z+1	; 0x01
     8f8:	ef e4       	ldi	r30, 0x4F	; 79
     8fa:	f2 e0       	ldi	r31, 0x02	; 2
     8fc:	00 e0       	ldi	r16, 0x00	; 0
     8fe:	10 e0       	ldi	r17, 0x00	; 0
     900:	80 81       	ld	r24, Z
     902:	91 81       	ldd	r25, Z+1	; 0x01
     904:	84 17       	cp	r24, r20
     906:	95 07       	cpc	r25, r21
     908:	39 f0       	breq	.+14     	; 0x918 <Kernel_Unlock_Mutex+0x42>
     90a:	0f 5f       	subi	r16, 0xFF	; 255
     90c:	1f 4f       	sbci	r17, 0xFF	; 255
     90e:	37 96       	adiw	r30, 0x07	; 7
     910:	08 30       	cpi	r16, 0x08	; 8
     912:	11 05       	cpc	r17, r1
     914:	a9 f7       	brne	.-22     	; 0x900 <Kernel_Unlock_Mutex+0x2a>
     916:	f7 c0       	rjmp	.+494    	; 0xb06 <Kernel_Unlock_Mutex+0x230>
     918:	8d 91       	ld	r24, X+
     91a:	9c 91       	ld	r25, X
     91c:	11 97       	sbiw	r26, 0x01	; 1
     91e:	27 e0       	ldi	r18, 0x07	; 7
     920:	20 9f       	mul	r18, r16
     922:	f0 01       	movw	r30, r0
     924:	21 9f       	mul	r18, r17
     926:	f0 0d       	add	r31, r0
     928:	11 24       	eor	r1, r1
     92a:	e1 5b       	subi	r30, 0xB1	; 177
     92c:	fd 4f       	sbci	r31, 0xFD	; 253
     92e:	23 81       	ldd	r18, Z+3	; 0x03
     930:	34 81       	ldd	r19, Z+4	; 0x04
     932:	28 17       	cp	r18, r24
     934:	39 07       	cpc	r19, r25
     936:	09 f0       	breq	.+2      	; 0x93a <Kernel_Unlock_Mutex+0x64>
     938:	e6 c0       	rjmp	.+460    	; 0xb06 <Kernel_Unlock_Mutex+0x230>
     93a:	ac 5f       	subi	r26, 0xFC	; 252
     93c:	be 4f       	sbci	r27, 0xFE	; 254
     93e:	8c 91       	ld	r24, X
     940:	86 30       	cpi	r24, 0x06	; 6
     942:	09 f0       	breq	.+2      	; 0x946 <Kernel_Unlock_Mutex+0x70>
     944:	4d c0       	rjmp	.+154    	; 0x9e0 <Kernel_Unlock_Mutex+0x10a>
     946:	63 e1       	ldi	r22, 0x13	; 19
     948:	72 e0       	ldi	r23, 0x02	; 2
     94a:	8f ef       	ldi	r24, 0xFF	; 255
     94c:	94 e1       	ldi	r25, 0x14	; 20
     94e:	c6 d7       	rcall	.+3980   	; 0x18dc <dequeueWQ>
     950:	9a 83       	std	Y+2, r25	; 0x02
     952:	89 83       	std	Y+1, r24	; 0x01
     954:	00 97       	sbiw	r24, 0x00	; 0
     956:	79 f4       	brne	.+30     	; 0x976 <Kernel_Unlock_Mutex+0xa0>
     958:	87 e0       	ldi	r24, 0x07	; 7
     95a:	80 9f       	mul	r24, r16
     95c:	f0 01       	movw	r30, r0
     95e:	81 9f       	mul	r24, r17
     960:	f0 0d       	add	r31, r0
     962:	11 24       	eor	r1, r1
     964:	e1 5b       	subi	r30, 0xB1	; 177
     966:	fd 4f       	sbci	r31, 0xFD	; 253
     968:	16 82       	std	Z+6, r1	; 0x06
     96a:	15 82       	std	Z+5, r1	; 0x05
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	82 83       	std	Z+2, r24	; 0x02
     970:	14 82       	std	Z+4, r1	; 0x04
     972:	13 82       	std	Z+3, r1	; 0x03
     974:	c8 c0       	rjmp	.+400    	; 0xb06 <Kernel_Unlock_Mutex+0x230>
     976:	27 e0       	ldi	r18, 0x07	; 7
     978:	20 9f       	mul	r18, r16
     97a:	f0 01       	movw	r30, r0
     97c:	21 9f       	mul	r18, r17
     97e:	f0 0d       	add	r31, r0
     980:	11 24       	eor	r1, r1
     982:	e1 5b       	subi	r30, 0xB1	; 177
     984:	fd 4f       	sbci	r31, 0xFD	; 253
     986:	21 e0       	ldi	r18, 0x01	; 1
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	36 83       	std	Z+6, r19	; 0x06
     98c:	25 83       	std	Z+5, r18	; 0x05
     98e:	dc 01       	movw	r26, r24
     990:	2d 91       	ld	r18, X+
     992:	3c 91       	ld	r19, X
     994:	34 83       	std	Z+4, r19	; 0x04
     996:	23 83       	std	Z+3, r18	; 0x03
     998:	20 91 25 02 	lds	r18, 0x0225
     99c:	30 91 26 02 	lds	r19, 0x0226
     9a0:	d9 01       	movw	r26, r18
     9a2:	a9 5f       	subi	r26, 0xF9	; 249
     9a4:	be 4f       	sbci	r27, 0xFE	; 254
     9a6:	4d 91       	ld	r20, X+
     9a8:	5c 91       	ld	r21, X
     9aa:	11 97       	sbiw	r26, 0x01	; 1
     9ac:	fc 01       	movw	r30, r24
     9ae:	e9 5f       	subi	r30, 0xF9	; 249
     9b0:	fe 4f       	sbci	r31, 0xFE	; 254
     9b2:	51 83       	std	Z+1, r21	; 0x01
     9b4:	40 83       	st	Z, r20
     9b6:	33 97       	sbiw	r30, 0x03	; 3
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	80 83       	st	Z, r24
     9bc:	f9 01       	movw	r30, r18
     9be:	eb 5f       	subi	r30, 0xFB	; 251
     9c0:	fe 4f       	sbci	r31, 0xFE	; 254
     9c2:	40 81       	ld	r20, Z
     9c4:	51 81       	ldd	r21, Z+1	; 0x01
     9c6:	11 96       	adiw	r26, 0x01	; 1
     9c8:	5c 93       	st	X, r21
     9ca:	4e 93       	st	-X, r20
     9cc:	31 97       	sbiw	r30, 0x01	; 1
     9ce:	80 83       	st	Z, r24
     9d0:	47 e1       	ldi	r20, 0x17	; 23
     9d2:	52 e0       	ldi	r21, 0x02	; 2
     9d4:	6d ed       	ldi	r22, 0xDD	; 221
     9d6:	74 e1       	ldi	r23, 0x14	; 20
     9d8:	ce 01       	movw	r24, r28
     9da:	01 96       	adiw	r24, 0x01	; 1
     9dc:	1c d7       	rcall	.+3640   	; 0x1816 <enqueueRQ>
     9de:	93 c0       	rjmp	.+294    	; 0xb06 <Kernel_Unlock_Mutex+0x230>
     9e0:	87 e0       	ldi	r24, 0x07	; 7
     9e2:	80 9f       	mul	r24, r16
     9e4:	f0 01       	movw	r30, r0
     9e6:	81 9f       	mul	r24, r17
     9e8:	f0 0d       	add	r31, r0
     9ea:	11 24       	eor	r1, r1
     9ec:	e1 5b       	subi	r30, 0xB1	; 177
     9ee:	fd 4f       	sbci	r31, 0xFD	; 253
     9f0:	85 81       	ldd	r24, Z+5	; 0x05
     9f2:	96 81       	ldd	r25, Z+6	; 0x06
     9f4:	82 30       	cpi	r24, 0x02	; 2
     9f6:	91 05       	cpc	r25, r1
     9f8:	60 f0       	brcs	.+24     	; 0xa12 <Kernel_Unlock_Mutex+0x13c>
     9fa:	27 e0       	ldi	r18, 0x07	; 7
     9fc:	20 9f       	mul	r18, r16
     9fe:	f0 01       	movw	r30, r0
     a00:	21 9f       	mul	r18, r17
     a02:	f0 0d       	add	r31, r0
     a04:	11 24       	eor	r1, r1
     a06:	e1 5b       	subi	r30, 0xB1	; 177
     a08:	fd 4f       	sbci	r31, 0xFD	; 253
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	96 83       	std	Z+6, r25	; 0x06
     a0e:	85 83       	std	Z+5, r24	; 0x05
     a10:	7a c0       	rjmp	.+244    	; 0xb06 <Kernel_Unlock_Mutex+0x230>
     a12:	63 e1       	ldi	r22, 0x13	; 19
     a14:	72 e0       	ldi	r23, 0x02	; 2
     a16:	8f ef       	ldi	r24, 0xFF	; 255
     a18:	94 e1       	ldi	r25, 0x14	; 20
     a1a:	60 d7       	rcall	.+3776   	; 0x18dc <dequeueWQ>
     a1c:	9a 83       	std	Y+2, r25	; 0x02
     a1e:	89 83       	std	Y+1, r24	; 0x01
     a20:	00 97       	sbiw	r24, 0x00	; 0
     a22:	a9 f5       	brne	.+106    	; 0xa8e <Kernel_Unlock_Mutex+0x1b8>
     a24:	87 e0       	ldi	r24, 0x07	; 7
     a26:	80 9f       	mul	r24, r16
     a28:	f0 01       	movw	r30, r0
     a2a:	81 9f       	mul	r24, r17
     a2c:	f0 0d       	add	r31, r0
     a2e:	11 24       	eor	r1, r1
     a30:	e1 5b       	subi	r30, 0xB1	; 177
     a32:	fd 4f       	sbci	r31, 0xFD	; 253
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	82 83       	std	Z+2, r24	; 0x02
     a38:	16 82       	std	Z+6, r1	; 0x06
     a3a:	15 82       	std	Z+5, r1	; 0x05
     a3c:	14 82       	std	Z+4, r1	; 0x04
     a3e:	13 82       	std	Z+3, r1	; 0x03
     a40:	e0 91 25 02 	lds	r30, 0x0225
     a44:	f0 91 26 02 	lds	r31, 0x0226
     a48:	df 01       	movw	r26, r30
     a4a:	ab 5f       	subi	r26, 0xFB	; 251
     a4c:	be 4f       	sbci	r27, 0xFE	; 254
     a4e:	8d 91       	ld	r24, X+
     a50:	9c 91       	ld	r25, X
     a52:	11 97       	sbiw	r26, 0x01	; 1
     a54:	12 96       	adiw	r26, 0x02	; 2
     a56:	11 96       	adiw	r26, 0x01	; 1
     a58:	9c 93       	st	X, r25
     a5a:	8e 93       	st	-X, r24
     a5c:	80 81       	ld	r24, Z
     a5e:	91 81       	ldd	r25, Z+1	; 0x01
     a60:	02 97       	sbiw	r24, 0x02	; 2
     a62:	20 f4       	brcc	.+8      	; 0xa6c <Kernel_Unlock_Mutex+0x196>
     a64:	82 e0       	ldi	r24, 0x02	; 2
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	61 dc       	rcall	.-1854   	; 0x32c <enable_LED>
     a6a:	4d c0       	rjmp	.+154    	; 0xb06 <Kernel_Unlock_Mutex+0x230>
     a6c:	80 81       	ld	r24, Z
     a6e:	91 81       	ldd	r25, Z+1	; 0x01
     a70:	02 97       	sbiw	r24, 0x02	; 2
     a72:	21 f4       	brne	.+8      	; 0xa7c <Kernel_Unlock_Mutex+0x1a6>
     a74:	85 e0       	ldi	r24, 0x05	; 5
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	59 dc       	rcall	.-1870   	; 0x32c <enable_LED>
     a7a:	45 c0       	rjmp	.+138    	; 0xb06 <Kernel_Unlock_Mutex+0x230>
     a7c:	80 81       	ld	r24, Z
     a7e:	91 81       	ldd	r25, Z+1	; 0x01
     a80:	03 97       	sbiw	r24, 0x03	; 3
     a82:	09 f0       	breq	.+2      	; 0xa86 <Kernel_Unlock_Mutex+0x1b0>
     a84:	40 c0       	rjmp	.+128    	; 0xb06 <Kernel_Unlock_Mutex+0x230>
     a86:	86 e0       	ldi	r24, 0x06	; 6
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	50 dc       	rcall	.-1888   	; 0x32c <enable_LED>
     a8c:	3c c0       	rjmp	.+120    	; 0xb06 <Kernel_Unlock_Mutex+0x230>
     a8e:	27 e0       	ldi	r18, 0x07	; 7
     a90:	20 9f       	mul	r18, r16
     a92:	f0 01       	movw	r30, r0
     a94:	21 9f       	mul	r18, r17
     a96:	f0 0d       	add	r31, r0
     a98:	11 24       	eor	r1, r1
     a9a:	e1 5b       	subi	r30, 0xB1	; 177
     a9c:	fd 4f       	sbci	r31, 0xFD	; 253
     a9e:	21 e0       	ldi	r18, 0x01	; 1
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	36 83       	std	Z+6, r19	; 0x06
     aa4:	25 83       	std	Z+5, r18	; 0x05
     aa6:	dc 01       	movw	r26, r24
     aa8:	2d 91       	ld	r18, X+
     aaa:	3c 91       	ld	r19, X
     aac:	34 83       	std	Z+4, r19	; 0x04
     aae:	23 83       	std	Z+3, r18	; 0x03
     ab0:	20 91 25 02 	lds	r18, 0x0225
     ab4:	30 91 26 02 	lds	r19, 0x0226
     ab8:	d9 01       	movw	r26, r18
     aba:	a9 5f       	subi	r26, 0xF9	; 249
     abc:	be 4f       	sbci	r27, 0xFE	; 254
     abe:	4d 91       	ld	r20, X+
     ac0:	5c 91       	ld	r21, X
     ac2:	11 97       	sbiw	r26, 0x01	; 1
     ac4:	fc 01       	movw	r30, r24
     ac6:	e9 5f       	subi	r30, 0xF9	; 249
     ac8:	fe 4f       	sbci	r31, 0xFE	; 254
     aca:	51 83       	std	Z+1, r21	; 0x01
     acc:	40 83       	st	Z, r20
     ace:	33 97       	sbiw	r30, 0x03	; 3
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	80 83       	st	Z, r24
     ad4:	f9 01       	movw	r30, r18
     ad6:	eb 5f       	subi	r30, 0xFB	; 251
     ad8:	fe 4f       	sbci	r31, 0xFE	; 254
     ada:	40 81       	ld	r20, Z
     adc:	51 81       	ldd	r21, Z+1	; 0x01
     ade:	11 96       	adiw	r26, 0x01	; 1
     ae0:	5c 93       	st	X, r21
     ae2:	4e 93       	st	-X, r20
     ae4:	31 97       	sbiw	r30, 0x01	; 1
     ae6:	80 83       	st	Z, r24
     ae8:	47 e1       	ldi	r20, 0x17	; 23
     aea:	52 e0       	ldi	r21, 0x02	; 2
     aec:	6d ed       	ldi	r22, 0xDD	; 221
     aee:	74 e1       	ldi	r23, 0x14	; 20
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	90 d6       	rcall	.+3360   	; 0x1816 <enqueueRQ>
     af6:	47 e1       	ldi	r20, 0x17	; 23
     af8:	52 e0       	ldi	r21, 0x02	; 2
     afa:	6d ed       	ldi	r22, 0xDD	; 221
     afc:	74 e1       	ldi	r23, 0x14	; 20
     afe:	85 e2       	ldi	r24, 0x25	; 37
     b00:	92 e0       	ldi	r25, 0x02	; 2
     b02:	89 d6       	rcall	.+3346   	; 0x1816 <enqueueRQ>
     b04:	b7 de       	rcall	.-658    	; 0x874 <Dispatch>
     b06:	0f 90       	pop	r0
     b08:	0f 90       	pop	r0
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	1f 91       	pop	r17
     b10:	0f 91       	pop	r16
     b12:	08 95       	ret

00000b14 <OS_Start>:
     b14:	2f 92       	push	r2
     b16:	3f 92       	push	r3
     b18:	4f 92       	push	r4
     b1a:	5f 92       	push	r5
     b1c:	6f 92       	push	r6
     b1e:	7f 92       	push	r7
     b20:	8f 92       	push	r8
     b22:	9f 92       	push	r9
     b24:	af 92       	push	r10
     b26:	bf 92       	push	r11
     b28:	cf 92       	push	r12
     b2a:	df 92       	push	r13
     b2c:	ef 92       	push	r14
     b2e:	ff 92       	push	r15
     b30:	0f 93       	push	r16
     b32:	1f 93       	push	r17
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	00 d0       	rcall	.+0      	; 0xb3a <OS_Start+0x26>
     b3a:	1f 92       	push	r1
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     b40:	80 91 23 02 	lds	r24, 0x0223
     b44:	90 91 24 02 	lds	r25, 0x0224
     b48:	89 2b       	or	r24, r25
     b4a:	09 f0       	breq	.+2      	; 0xb4e <OS_Start+0x3a>
     b4c:	06 c4       	rjmp	.+2060   	; 0x135a <OS_Start+0x846>
     b4e:	80 91 21 02 	lds	r24, 0x0221
     b52:	90 91 22 02 	lds	r25, 0x0222
     b56:	89 2b       	or	r24, r25
     b58:	09 f4       	brne	.+2      	; 0xb5c <OS_Start+0x48>
     b5a:	ff c3       	rjmp	.+2046   	; 0x135a <OS_Start+0x846>
     b5c:	f8 94       	cli
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	90 93 24 02 	sts	0x0224, r25
     b66:	80 93 23 02 	sts	0x0223, r24
     b6a:	84 de       	rcall	.-760    	; 0x874 <Dispatch>
     b6c:	0f 2e       	mov	r0, r31
     b6e:	f7 e2       	ldi	r31, 0x27	; 39
     b70:	ef 2e       	mov	r14, r31
     b72:	f2 e0       	ldi	r31, 0x02	; 2
     b74:	ff 2e       	mov	r15, r31
     b76:	f0 2d       	mov	r31, r0
     b78:	0f 2e       	mov	r0, r31
     b7a:	fe e1       	ldi	r31, 0x1E	; 30
     b7c:	af 2e       	mov	r10, r31
     b7e:	bb 24       	eor	r11, r11
     b80:	b3 94       	inc	r11
     b82:	f0 2d       	mov	r31, r0
     b84:	0f 2e       	mov	r0, r31
     b86:	f3 e6       	ldi	r31, 0x63	; 99
     b88:	2f 2e       	mov	r2, r31
     b8a:	31 2c       	mov	r3, r1
     b8c:	f0 2d       	mov	r31, r0
     b8e:	88 24       	eor	r8, r8
     b90:	83 94       	inc	r8
     b92:	91 2c       	mov	r9, r1
     b94:	0f 2e       	mov	r0, r31
     b96:	ff e4       	ldi	r31, 0x4F	; 79
     b98:	cf 2e       	mov	r12, r31
     b9a:	f2 e0       	ldi	r31, 0x02	; 2
     b9c:	df 2e       	mov	r13, r31
     b9e:	f0 2d       	mov	r31, r0
     ba0:	07 e8       	ldi	r16, 0x87	; 135
     ba2:	12 e0       	ldi	r17, 0x02	; 2
     ba4:	0f 2e       	mov	r0, r31
     ba6:	fa e0       	ldi	r31, 0x0A	; 10
     ba8:	6f 2e       	mov	r6, r31
     baa:	71 2c       	mov	r7, r1
     bac:	f0 2d       	mov	r31, r0
     bae:	e0 91 25 02 	lds	r30, 0x0225
     bb2:	f0 91 26 02 	lds	r31, 0x0226
     bb6:	df 01       	movw	r26, r30
     bb8:	a3 5f       	subi	r26, 0xF3	; 243
     bba:	be 4f       	sbci	r27, 0xFE	; 254
     bbc:	1c 92       	st	X, r1
     bbe:	82 81       	ldd	r24, Z+2	; 0x02
     bc0:	93 81       	ldd	r25, Z+3	; 0x03
     bc2:	90 93 fe 14 	sts	0x14FE, r25
     bc6:	80 93 fd 14 	sts	0x14FD, r24
     bca:	bb da       	rcall	.-2698   	; 0x142 <CSwitch>
     bcc:	82 e0       	ldi	r24, 0x02	; 2
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	ba db       	rcall	.-2188   	; 0x346 <disable_LED>
     bd2:	85 e0       	ldi	r24, 0x05	; 5
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	b7 db       	rcall	.-2194   	; 0x346 <disable_LED>
     bd8:	86 e0       	ldi	r24, 0x06	; 6
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	b4 db       	rcall	.-2200   	; 0x346 <disable_LED>
     bde:	80 91 25 02 	lds	r24, 0x0225
     be2:	90 91 26 02 	lds	r25, 0x0226
     be6:	9c 83       	std	Y+4, r25	; 0x04
     be8:	8b 83       	std	Y+3, r24	; 0x03
     bea:	80 91 fd 14 	lds	r24, 0x14FD
     bee:	90 91 fe 14 	lds	r25, 0x14FE
     bf2:	ab 81       	ldd	r26, Y+3	; 0x03
     bf4:	bc 81       	ldd	r27, Y+4	; 0x04
     bf6:	13 96       	adiw	r26, 0x03	; 3
     bf8:	9c 93       	st	X, r25
     bfa:	8e 93       	st	-X, r24
     bfc:	12 97       	sbiw	r26, 0x02	; 2
     bfe:	fd 01       	movw	r30, r26
     c00:	e3 5f       	subi	r30, 0xF3	; 243
     c02:	fe 4f       	sbci	r31, 0xFE	; 254
     c04:	e0 81       	ld	r30, Z
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	ed 30       	cpi	r30, 0x0D	; 13
     c0a:	f1 05       	cpc	r31, r1
     c0c:	80 f6       	brcc	.-96     	; 0xbae <OS_Start+0x9a>
     c0e:	88 27       	eor	r24, r24
     c10:	ee 58       	subi	r30, 0x8E	; 142
     c12:	ff 4f       	sbci	r31, 0xFF	; 255
     c14:	8f 4f       	sbci	r24, 0xFF	; 255
     c16:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__tablejump2__>
     c1a:	eb 81       	ldd	r30, Y+3	; 0x03
     c1c:	fc 81       	ldd	r31, Y+4	; 0x04
     c1e:	e4 5e       	subi	r30, 0xE4	; 228
     c20:	fe 4f       	sbci	r31, 0xFE	; 254
     c22:	80 81       	ld	r24, Z
     c24:	91 81       	ldd	r25, Z+1	; 0x01
     c26:	e7 e8       	ldi	r30, 0x87	; 135
     c28:	f2 e0       	ldi	r31, 0x02	; 2
     c2a:	20 81       	ld	r18, Z
     c2c:	31 81       	ldd	r19, Z+1	; 0x01
     c2e:	28 17       	cp	r18, r24
     c30:	39 07       	cpc	r19, r25
     c32:	09 f0       	breq	.+2      	; 0xc36 <OS_Start+0x122>
     c34:	89 c0       	rjmp	.+274    	; 0xd48 <OS_Start+0x234>
     c36:	0d c3       	rjmp	.+1562   	; 0x1252 <OS_Start+0x73e>
     c38:	eb 81       	ldd	r30, Y+3	; 0x03
     c3a:	fc 81       	ldd	r31, Y+4	; 0x04
     c3c:	e7 5f       	subi	r30, 0xF7	; 247
     c3e:	fe 4f       	sbci	r31, 0xFE	; 254
     c40:	40 81       	ld	r20, Z
     c42:	51 81       	ldd	r21, Z+1	; 0x01
     c44:	eb 81       	ldd	r30, Y+3	; 0x03
     c46:	fc 81       	ldd	r31, Y+4	; 0x04
     c48:	eb 5f       	subi	r30, 0xFB	; 251
     c4a:	fe 4f       	sbci	r31, 0xFE	; 254
     c4c:	60 81       	ld	r22, Z
     c4e:	71 81       	ldd	r23, Z+1	; 0x01
     c50:	eb 81       	ldd	r30, Y+3	; 0x03
     c52:	fc 81       	ldd	r31, Y+4	; 0x04
     c54:	e5 5f       	subi	r30, 0xF5	; 245
     c56:	fe 4f       	sbci	r31, 0xFE	; 254
     c58:	80 81       	ld	r24, Z
     c5a:	91 81       	ldd	r25, Z+1	; 0x01
     c5c:	52 dd       	rcall	.-1372   	; 0x702 <Kernel_Create_Task>
     c5e:	eb 81       	ldd	r30, Y+3	; 0x03
     c60:	fc 81       	ldd	r31, Y+4	; 0x04
     c62:	e2 5f       	subi	r30, 0xF2	; 242
     c64:	fe 4f       	sbci	r31, 0xFE	; 254
     c66:	91 83       	std	Z+1, r25	; 0x01
     c68:	80 83       	st	Z, r24
     c6a:	a1 cf       	rjmp	.-190    	; 0xbae <OS_Start+0x9a>
     c6c:	eb 81       	ldd	r30, Y+3	; 0x03
     c6e:	fc 81       	ldd	r31, Y+4	; 0x04
     c70:	ec 5f       	subi	r30, 0xFC	; 252
     c72:	fe 4f       	sbci	r31, 0xFE	; 254
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	80 83       	st	Z, r24
     c78:	47 e1       	ldi	r20, 0x17	; 23
     c7a:	52 e0       	ldi	r21, 0x02	; 2
     c7c:	6d ed       	ldi	r22, 0xDD	; 221
     c7e:	74 e1       	ldi	r23, 0x14	; 20
     c80:	85 e2       	ldi	r24, 0x25	; 37
     c82:	92 e0       	ldi	r25, 0x02	; 2
     c84:	c8 d5       	rcall	.+2960   	; 0x1816 <enqueueRQ>
     c86:	f6 dd       	rcall	.-1044   	; 0x874 <Dispatch>
     c88:	92 cf       	rjmp	.-220    	; 0xbae <OS_Start+0x9a>
     c8a:	eb 81       	ldd	r30, Y+3	; 0x03
     c8c:	fc 81       	ldd	r31, Y+4	; 0x04
     c8e:	ec 5f       	subi	r30, 0xFC	; 252
     c90:	fe 4f       	sbci	r31, 0xFE	; 254
     c92:	83 e0       	ldi	r24, 0x03	; 3
     c94:	80 83       	st	Z, r24
     c96:	45 e1       	ldi	r20, 0x15	; 21
     c98:	52 e0       	ldi	r21, 0x02	; 2
     c9a:	6d eb       	ldi	r22, 0xBD	; 189
     c9c:	74 e1       	ldi	r23, 0x14	; 20
     c9e:	85 e2       	ldi	r24, 0x25	; 37
     ca0:	92 e0       	ldi	r25, 0x02	; 2
     ca2:	48 d5       	rcall	.+2704   	; 0x1734 <enqueueSQ>
     ca4:	e7 dd       	rcall	.-1074   	; 0x874 <Dispatch>
     ca6:	83 cf       	rjmp	.-250    	; 0xbae <OS_Start+0x9a>
     ca8:	ab 81       	ldd	r26, Y+3	; 0x03
     caa:	bc 81       	ldd	r27, Y+4	; 0x04
     cac:	2d 91       	ld	r18, X+
     cae:	3c 91       	ld	r19, X
     cb0:	11 97       	sbiw	r26, 0x01	; 1
     cb2:	fd 01       	movw	r30, r26
     cb4:	e4 5e       	subi	r30, 0xE4	; 228
     cb6:	fe 4f       	sbci	r31, 0xFE	; 254
     cb8:	80 81       	ld	r24, Z
     cba:	91 81       	ldd	r25, Z+1	; 0x01
     cbc:	28 17       	cp	r18, r24
     cbe:	39 07       	cpc	r19, r25
     cc0:	51 f0       	breq	.+20     	; 0xcd6 <OS_Start+0x1c2>
     cc2:	80 81       	ld	r24, Z
     cc4:	91 81       	ldd	r25, Z+1	; 0x01
     cc6:	e7 e8       	ldi	r30, 0x87	; 135
     cc8:	f2 e0       	ldi	r31, 0x02	; 2
     cca:	20 81       	ld	r18, Z
     ccc:	31 81       	ldd	r19, Z+1	; 0x01
     cce:	28 17       	cp	r18, r24
     cd0:	39 07       	cpc	r19, r25
     cd2:	41 f4       	brne	.+16     	; 0xce4 <OS_Start+0x1d0>
     cd4:	ad c2       	rjmp	.+1370   	; 0x1230 <OS_Start+0x71c>
     cd6:	eb 81       	ldd	r30, Y+3	; 0x03
     cd8:	fc 81       	ldd	r31, Y+4	; 0x04
     cda:	e6 5e       	subi	r30, 0xE6	; 230
     cdc:	fe 4f       	sbci	r31, 0xFE	; 254
     cde:	91 82       	std	Z+1, r9	; 0x01
     ce0:	80 82       	st	Z, r8
     ce2:	1a c0       	rjmp	.+52     	; 0xd18 <OS_Start+0x204>
     ce4:	e5 ea       	ldi	r30, 0xA5	; 165
     ce6:	f3 e0       	ldi	r31, 0x03	; 3
     ce8:	c4 01       	movw	r24, r8
     cea:	ab 81       	ldd	r26, Y+3	; 0x03
     cec:	bc 81       	ldd	r27, Y+4	; 0x04
     cee:	a4 5e       	subi	r26, 0xE4	; 228
     cf0:	be 4f       	sbci	r27, 0xFE	; 254
     cf2:	6b 81       	ldd	r22, Y+3	; 0x03
     cf4:	7c 81       	ldd	r23, Y+4	; 0x04
     cf6:	2d 91       	ld	r18, X+
     cf8:	3c 91       	ld	r19, X
     cfa:	11 97       	sbiw	r26, 0x01	; 1
     cfc:	40 81       	ld	r20, Z
     cfe:	51 81       	ldd	r21, Z+1	; 0x01
     d00:	42 17       	cp	r20, r18
     d02:	53 07       	cpc	r21, r19
     d04:	09 f4       	brne	.+2      	; 0xd08 <OS_Start+0x1f4>
     d06:	97 c2       	rjmp	.+1326   	; 0x1236 <OS_Start+0x722>
     d08:	01 96       	adiw	r24, 0x01	; 1
     d0a:	e2 5e       	subi	r30, 0xE2	; 226
     d0c:	fe 4f       	sbci	r31, 0xFE	; 254
     d0e:	80 31       	cpi	r24, 0x10	; 16
     d10:	91 05       	cpc	r25, r1
     d12:	89 f7       	brne	.-30     	; 0xcf6 <OS_Start+0x1e2>
     d14:	7c 83       	std	Y+4, r23	; 0x04
     d16:	6b 83       	std	Y+3, r22	; 0x03
     d18:	eb 81       	ldd	r30, Y+3	; 0x03
     d1a:	fc 81       	ldd	r31, Y+4	; 0x04
     d1c:	e6 5e       	subi	r30, 0xE6	; 230
     d1e:	fe 4f       	sbci	r31, 0xFE	; 254
     d20:	80 81       	ld	r24, Z
     d22:	91 81       	ldd	r25, Z+1	; 0x01
     d24:	89 2b       	or	r24, r25
     d26:	09 f4       	brne	.+2      	; 0xd2a <OS_Start+0x216>
     d28:	42 cf       	rjmp	.-380    	; 0xbae <OS_Start+0x9a>
     d2a:	eb 81       	ldd	r30, Y+3	; 0x03
     d2c:	fc 81       	ldd	r31, Y+4	; 0x04
     d2e:	ec 5f       	subi	r30, 0xFC	; 252
     d30:	fe 4f       	sbci	r31, 0xFE	; 254
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	80 83       	st	Z, r24
     d36:	47 e1       	ldi	r20, 0x17	; 23
     d38:	52 e0       	ldi	r21, 0x02	; 2
     d3a:	6d ed       	ldi	r22, 0xDD	; 221
     d3c:	74 e1       	ldi	r23, 0x14	; 20
     d3e:	85 e2       	ldi	r24, 0x25	; 37
     d40:	92 e0       	ldi	r25, 0x02	; 2
     d42:	69 d5       	rcall	.+2770   	; 0x1816 <enqueueRQ>
     d44:	97 dd       	rcall	.-1234   	; 0x874 <Dispatch>
     d46:	33 cf       	rjmp	.-410    	; 0xbae <OS_Start+0x9a>
     d48:	e5 ea       	ldi	r30, 0xA5	; 165
     d4a:	f3 e0       	ldi	r31, 0x03	; 3
     d4c:	c4 01       	movw	r24, r8
     d4e:	ab 81       	ldd	r26, Y+3	; 0x03
     d50:	bc 81       	ldd	r27, Y+4	; 0x04
     d52:	a4 5e       	subi	r26, 0xE4	; 228
     d54:	be 4f       	sbci	r27, 0xFE	; 254
     d56:	6b 81       	ldd	r22, Y+3	; 0x03
     d58:	7c 81       	ldd	r23, Y+4	; 0x04
     d5a:	2d 91       	ld	r18, X+
     d5c:	3c 91       	ld	r19, X
     d5e:	11 97       	sbiw	r26, 0x01	; 1
     d60:	40 81       	ld	r20, Z
     d62:	51 81       	ldd	r21, Z+1	; 0x01
     d64:	42 17       	cp	r20, r18
     d66:	53 07       	cpc	r21, r19
     d68:	09 f4       	brne	.+2      	; 0xd6c <OS_Start+0x258>
     d6a:	76 c2       	rjmp	.+1260   	; 0x1258 <OS_Start+0x744>
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	e2 5e       	subi	r30, 0xE2	; 226
     d70:	fe 4f       	sbci	r31, 0xFE	; 254
     d72:	80 31       	cpi	r24, 0x10	; 16
     d74:	91 05       	cpc	r25, r1
     d76:	89 f7       	brne	.-30     	; 0xd5a <OS_Start+0x246>
     d78:	1a cf       	rjmp	.-460    	; 0xbae <OS_Start+0x9a>
     d7a:	8a 9d       	mul	r24, r10
     d7c:	90 01       	movw	r18, r0
     d7e:	8b 9d       	mul	r24, r11
     d80:	30 0d       	add	r19, r0
     d82:	9a 9d       	mul	r25, r10
     d84:	30 0d       	add	r19, r0
     d86:	11 24       	eor	r1, r1
     d88:	c9 01       	movw	r24, r18
     d8a:	89 57       	subi	r24, 0x79	; 121
     d8c:	9d 4f       	sbci	r25, 0xFD	; 253
     d8e:	fc 01       	movw	r30, r24
     d90:	e6 5e       	subi	r30, 0xE6	; 230
     d92:	fe 4f       	sbci	r31, 0xFE	; 254
     d94:	11 82       	std	Z+1, r1	; 0x01
     d96:	10 82       	st	Z, r1
     d98:	eb 81       	ldd	r30, Y+3	; 0x03
     d9a:	fc 81       	ldd	r31, Y+4	; 0x04
     d9c:	e9 5f       	subi	r30, 0xF9	; 249
     d9e:	fe 4f       	sbci	r31, 0xFE	; 254
     da0:	20 81       	ld	r18, Z
     da2:	31 81       	ldd	r19, Z+1	; 0x01
     da4:	fc 01       	movw	r30, r24
     da6:	e9 5f       	subi	r30, 0xF9	; 249
     da8:	fe 4f       	sbci	r31, 0xFE	; 254
     daa:	80 81       	ld	r24, Z
     dac:	91 81       	ldd	r25, Z+1	; 0x01
     dae:	82 17       	cp	r24, r18
     db0:	93 07       	cpc	r25, r19
     db2:	08 f0       	brcs	.+2      	; 0xdb6 <OS_Start+0x2a2>
     db4:	fc ce       	rjmp	.-520    	; 0xbae <OS_Start+0x9a>
     db6:	eb 81       	ldd	r30, Y+3	; 0x03
     db8:	fc 81       	ldd	r31, Y+4	; 0x04
     dba:	ec 5f       	subi	r30, 0xFC	; 252
     dbc:	fe 4f       	sbci	r31, 0xFE	; 254
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	80 83       	st	Z, r24
     dc2:	47 e1       	ldi	r20, 0x17	; 23
     dc4:	52 e0       	ldi	r21, 0x02	; 2
     dc6:	6d ed       	ldi	r22, 0xDD	; 221
     dc8:	74 e1       	ldi	r23, 0x14	; 20
     dca:	85 e2       	ldi	r24, 0x25	; 37
     dcc:	92 e0       	ldi	r25, 0x02	; 2
     dce:	23 d5       	rcall	.+2630   	; 0x1816 <enqueueRQ>
     dd0:	51 dd       	rcall	.-1374   	; 0x874 <Dispatch>
     dd2:	ed ce       	rjmp	.-550    	; 0xbae <OS_Start+0x9a>
     dd4:	eb 81       	ldd	r30, Y+3	; 0x03
     dd6:	fc 81       	ldd	r31, Y+4	; 0x04
     dd8:	e9 5f       	subi	r30, 0xF9	; 249
     dda:	fe 4f       	sbci	r31, 0xFE	; 254
     ddc:	11 82       	std	Z+1, r1	; 0x01
     dde:	10 82       	st	Z, r1
     de0:	eb 81       	ldd	r30, Y+3	; 0x03
     de2:	fc 81       	ldd	r31, Y+4	; 0x04
     de4:	eb 5f       	subi	r30, 0xFB	; 251
     de6:	fe 4f       	sbci	r31, 0xFE	; 254
     de8:	11 82       	std	Z+1, r1	; 0x01
     dea:	10 82       	st	Z, r1
     dec:	eb 81       	ldd	r30, Y+3	; 0x03
     dee:	fc 81       	ldd	r31, Y+4	; 0x04
     df0:	ec 5f       	subi	r30, 0xFC	; 252
     df2:	fe 4f       	sbci	r31, 0xFE	; 254
     df4:	86 e0       	ldi	r24, 0x06	; 6
     df6:	80 83       	st	Z, r24
     df8:	dc 82       	std	Y+4, r13	; 0x04
     dfa:	cb 82       	std	Y+3, r12	; 0x03
     dfc:	e0 91 25 02 	lds	r30, 0x0225
     e00:	f0 91 26 02 	lds	r31, 0x0226
     e04:	80 81       	ld	r24, Z
     e06:	91 81       	ldd	r25, Z+1	; 0x01
     e08:	ab 81       	ldd	r26, Y+3	; 0x03
     e0a:	bc 81       	ldd	r27, Y+4	; 0x04
     e0c:	13 96       	adiw	r26, 0x03	; 3
     e0e:	2d 91       	ld	r18, X+
     e10:	3c 91       	ld	r19, X
     e12:	14 97       	sbiw	r26, 0x04	; 4
     e14:	28 17       	cp	r18, r24
     e16:	39 07       	cpc	r19, r25
     e18:	39 f4       	brne	.+14     	; 0xe28 <OS_Start+0x314>
     e1a:	8d 91       	ld	r24, X+
     e1c:	9c 91       	ld	r25, X
     e1e:	ec 5e       	subi	r30, 0xEC	; 236
     e20:	fe 4f       	sbci	r31, 0xFE	; 254
     e22:	91 83       	std	Z+1, r25	; 0x01
     e24:	80 83       	st	Z, r24
     e26:	57 dd       	rcall	.-1362   	; 0x8d6 <Kernel_Unlock_Mutex>
     e28:	eb 81       	ldd	r30, Y+3	; 0x03
     e2a:	fc 81       	ldd	r31, Y+4	; 0x04
     e2c:	37 96       	adiw	r30, 0x07	; 7
     e2e:	fc 83       	std	Y+4, r31	; 0x04
     e30:	eb 83       	std	Y+3, r30	; 0x03
     e32:	e0 17       	cp	r30, r16
     e34:	f1 07       	cpc	r31, r17
     e36:	11 f7       	brne	.-60     	; 0xdfc <OS_Start+0x2e8>
     e38:	e0 91 25 02 	lds	r30, 0x0225
     e3c:	f0 91 26 02 	lds	r31, 0x0226
     e40:	df 01       	movw	r26, r30
     e42:	ac 5f       	subi	r26, 0xFC	; 252
     e44:	be 4f       	sbci	r27, 0xFE	; 254
     e46:	1c 92       	st	X, r1
     e48:	52 96       	adiw	r26, 0x12	; 18
     e4a:	11 96       	adiw	r26, 0x01	; 1
     e4c:	3c 92       	st	X, r3
     e4e:	2e 92       	st	-X, r2
     e50:	1f 97       	sbiw	r26, 0x0f	; 15
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	7c 92       	st	X, r7
     e56:	6e 92       	st	-X, r6
     e58:	12 97       	sbiw	r26, 0x02	; 2
     e5a:	11 96       	adiw	r26, 0x01	; 1
     e5c:	7c 92       	st	X, r7
     e5e:	6e 92       	st	-X, r6
     e60:	11 82       	std	Z+1, r1	; 0x01
     e62:	10 82       	st	Z, r1
     e64:	80 91 21 02 	lds	r24, 0x0221
     e68:	90 91 22 02 	lds	r25, 0x0222
     e6c:	01 97       	sbiw	r24, 0x01	; 1
     e6e:	90 93 22 02 	sts	0x0222, r25
     e72:	80 93 21 02 	sts	0x0221, r24
     e76:	fe dc       	rcall	.-1540   	; 0x874 <Dispatch>
     e78:	9a ce       	rjmp	.-716    	; 0xbae <OS_Start+0x9a>
     e7a:	80 91 1d 02 	lds	r24, 0x021D
     e7e:	90 91 1e 02 	lds	r25, 0x021E
     e82:	08 97       	sbiw	r24, 0x08	; 8
     e84:	41 f1       	breq	.+80     	; 0xed6 <OS_Start+0x3c2>
     e86:	d6 01       	movw	r26, r12
     e88:	12 96       	adiw	r26, 0x02	; 2
     e8a:	8c 91       	ld	r24, X
     e8c:	88 23       	and	r24, r24
     e8e:	89 f0       	breq	.+34     	; 0xeb2 <OS_Start+0x39e>
     e90:	e8 e5       	ldi	r30, 0x58	; 88
     e92:	f2 e0       	ldi	r31, 0x02	; 2
     e94:	94 01       	movw	r18, r8
     e96:	4b 81       	ldd	r20, Y+3	; 0x03
     e98:	5c 81       	ldd	r21, Y+4	; 0x04
     e9a:	80 81       	ld	r24, Z
     e9c:	88 23       	and	r24, r24
     e9e:	61 f0       	breq	.+24     	; 0xeb8 <OS_Start+0x3a4>
     ea0:	2f 5f       	subi	r18, 0xFF	; 255
     ea2:	3f 4f       	sbci	r19, 0xFF	; 255
     ea4:	37 96       	adiw	r30, 0x07	; 7
     ea6:	28 30       	cpi	r18, 0x08	; 8
     ea8:	31 05       	cpc	r19, r1
     eaa:	b9 f7       	brne	.-18     	; 0xe9a <OS_Start+0x386>
     eac:	5c 83       	std	Y+4, r21	; 0x04
     eae:	4b 83       	std	Y+3, r20	; 0x03
     eb0:	05 c0       	rjmp	.+10     	; 0xebc <OS_Start+0x3a8>
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <OS_Start+0x3a8>
     eb8:	5c 83       	std	Y+4, r21	; 0x04
     eba:	4b 83       	std	Y+3, r20	; 0x03
     ebc:	c9 01       	movw	r24, r18
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	82 1b       	sub	r24, r18
     ecc:	93 0b       	sbc	r25, r19
     ece:	81 5b       	subi	r24, 0xB1	; 177
     ed0:	9d 4f       	sbci	r25, 0xFD	; 253
     ed2:	47 dc       	rcall	.-1906   	; 0x762 <Kernel_Init_Mutex_At>
     ed4:	2c 01       	movw	r4, r24
     ed6:	eb 81       	ldd	r30, Y+3	; 0x03
     ed8:	fc 81       	ldd	r31, Y+4	; 0x04
     eda:	e2 5f       	subi	r30, 0xF2	; 242
     edc:	fe 4f       	sbci	r31, 0xFE	; 254
     ede:	51 82       	std	Z+1, r5	; 0x01
     ee0:	40 82       	st	Z, r4
     ee2:	65 ce       	rjmp	.-822    	; 0xbae <OS_Start+0x9a>
     ee4:	eb 81       	ldd	r30, Y+3	; 0x03
     ee6:	fc 81       	ldd	r31, Y+4	; 0x04
     ee8:	ec 5e       	subi	r30, 0xEC	; 236
     eea:	fe 4f       	sbci	r31, 0xFE	; 254
     eec:	40 81       	ld	r20, Z
     eee:	51 81       	ldd	r21, Z+1	; 0x01
     ef0:	f6 01       	movw	r30, r12
     ef2:	80 81       	ld	r24, Z
     ef4:	91 81       	ldd	r25, Z+1	; 0x01
     ef6:	48 17       	cp	r20, r24
     ef8:	59 07       	cpc	r21, r25
     efa:	09 f4       	brne	.+2      	; 0xefe <OS_Start+0x3ea>
     efc:	bf c1       	rjmp	.+894    	; 0x127c <OS_Start+0x768>
     efe:	c4 01       	movw	r24, r8
     f00:	6b 81       	ldd	r22, Y+3	; 0x03
     f02:	7c 81       	ldd	r23, Y+4	; 0x04
     f04:	27 81       	ldd	r18, Z+7	; 0x07
     f06:	30 85       	ldd	r19, Z+8	; 0x08
     f08:	42 17       	cp	r20, r18
     f0a:	53 07       	cpc	r21, r19
     f0c:	09 f4       	brne	.+2      	; 0xf10 <OS_Start+0x3fc>
     f0e:	b9 c1       	rjmp	.+882    	; 0x1282 <OS_Start+0x76e>
     f10:	01 96       	adiw	r24, 0x01	; 1
     f12:	37 96       	adiw	r30, 0x07	; 7
     f14:	88 30       	cpi	r24, 0x08	; 8
     f16:	91 05       	cpc	r25, r1
     f18:	a9 f7       	brne	.-22     	; 0xf04 <OS_Start+0x3f0>
     f1a:	49 ce       	rjmp	.-878    	; 0xbae <OS_Start+0x9a>
     f1c:	fc 01       	movw	r30, r24
     f1e:	ee 0f       	add	r30, r30
     f20:	ff 1f       	adc	r31, r31
     f22:	ee 0f       	add	r30, r30
     f24:	ff 1f       	adc	r31, r31
     f26:	ee 0f       	add	r30, r30
     f28:	ff 1f       	adc	r31, r31
     f2a:	e8 1b       	sub	r30, r24
     f2c:	f9 0b       	sbc	r31, r25
     f2e:	e1 5b       	subi	r30, 0xB1	; 177
     f30:	fd 4f       	sbci	r31, 0xFD	; 253
     f32:	82 e0       	ldi	r24, 0x02	; 2
     f34:	82 83       	std	Z+2, r24	; 0x02
     f36:	ab 81       	ldd	r26, Y+3	; 0x03
     f38:	bc 81       	ldd	r27, Y+4	; 0x04
     f3a:	8d 91       	ld	r24, X+
     f3c:	9c 91       	ld	r25, X
     f3e:	94 83       	std	Z+4, r25	; 0x04
     f40:	83 83       	std	Z+3, r24	; 0x03
     f42:	85 81       	ldd	r24, Z+5	; 0x05
     f44:	96 81       	ldd	r25, Z+6	; 0x06
     f46:	01 96       	adiw	r24, 0x01	; 1
     f48:	96 83       	std	Z+6, r25	; 0x06
     f4a:	85 83       	std	Z+5, r24	; 0x05
     f4c:	30 ce       	rjmp	.-928    	; 0xbae <OS_Start+0x9a>
     f4e:	fc 01       	movw	r30, r24
     f50:	ee 0f       	add	r30, r30
     f52:	ff 1f       	adc	r31, r31
     f54:	ee 0f       	add	r30, r30
     f56:	ff 1f       	adc	r31, r31
     f58:	ee 0f       	add	r30, r30
     f5a:	ff 1f       	adc	r31, r31
     f5c:	e8 1b       	sub	r30, r24
     f5e:	f9 0b       	sbc	r31, r25
     f60:	e1 5b       	subi	r30, 0xB1	; 177
     f62:	fd 4f       	sbci	r31, 0xFD	; 253
     f64:	23 81       	ldd	r18, Z+3	; 0x03
     f66:	34 81       	ldd	r19, Z+4	; 0x04
     f68:	eb 81       	ldd	r30, Y+3	; 0x03
     f6a:	fc 81       	ldd	r31, Y+4	; 0x04
     f6c:	40 81       	ld	r20, Z
     f6e:	51 81       	ldd	r21, Z+1	; 0x01
     f70:	24 17       	cp	r18, r20
     f72:	35 07       	cpc	r19, r21
     f74:	89 f4       	brne	.+34     	; 0xf98 <OS_Start+0x484>
     f76:	fc 01       	movw	r30, r24
     f78:	ee 0f       	add	r30, r30
     f7a:	ff 1f       	adc	r31, r31
     f7c:	ee 0f       	add	r30, r30
     f7e:	ff 1f       	adc	r31, r31
     f80:	ee 0f       	add	r30, r30
     f82:	ff 1f       	adc	r31, r31
     f84:	e8 1b       	sub	r30, r24
     f86:	f9 0b       	sbc	r31, r25
     f88:	e1 5b       	subi	r30, 0xB1	; 177
     f8a:	fd 4f       	sbci	r31, 0xFD	; 253
     f8c:	85 81       	ldd	r24, Z+5	; 0x05
     f8e:	96 81       	ldd	r25, Z+6	; 0x06
     f90:	01 96       	adiw	r24, 0x01	; 1
     f92:	96 83       	std	Z+6, r25	; 0x06
     f94:	85 83       	std	Z+5, r24	; 0x05
     f96:	0b ce       	rjmp	.-1002   	; 0xbae <OS_Start+0x9a>
     f98:	e7 e8       	ldi	r30, 0x87	; 135
     f9a:	f2 e0       	ldi	r31, 0x02	; 2
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	6b 81       	ldd	r22, Y+3	; 0x03
     fa2:	7c 81       	ldd	r23, Y+4	; 0x04
     fa4:	40 81       	ld	r20, Z
     fa6:	51 81       	ldd	r21, Z+1	; 0x01
     fa8:	24 17       	cp	r18, r20
     faa:	35 07       	cpc	r19, r21
     fac:	19 f4       	brne	.+6      	; 0xfb4 <OS_Start+0x4a0>
     fae:	21 15       	cp	r18, r1
     fb0:	31 05       	cpc	r19, r1
     fb2:	31 f4       	brne	.+12     	; 0xfc0 <OS_Start+0x4ac>
     fb4:	01 96       	adiw	r24, 0x01	; 1
     fb6:	e2 5e       	subi	r30, 0xE2	; 226
     fb8:	fe 4f       	sbci	r31, 0xFE	; 254
     fba:	80 31       	cpi	r24, 0x10	; 16
     fbc:	91 05       	cpc	r25, r1
     fbe:	91 f7       	brne	.-28     	; 0xfa4 <OS_Start+0x490>
     fc0:	7c 83       	std	Y+4, r23	; 0x04
     fc2:	6b 83       	std	Y+3, r22	; 0x03
     fc4:	fb 01       	movw	r30, r22
     fc6:	e9 5f       	subi	r30, 0xF9	; 249
     fc8:	fe 4f       	sbci	r31, 0xFE	; 254
     fca:	20 81       	ld	r18, Z
     fcc:	31 81       	ldd	r19, Z+1	; 0x01
     fce:	8a 9d       	mul	r24, r10
     fd0:	f0 01       	movw	r30, r0
     fd2:	8b 9d       	mul	r24, r11
     fd4:	f0 0d       	add	r31, r0
     fd6:	9a 9d       	mul	r25, r10
     fd8:	f0 0d       	add	r31, r0
     fda:	11 24       	eor	r1, r1
     fdc:	e2 57       	subi	r30, 0x72	; 114
     fde:	fc 4f       	sbci	r31, 0xFC	; 252
     fe0:	40 81       	ld	r20, Z
     fe2:	51 81       	ldd	r21, Z+1	; 0x01
     fe4:	24 17       	cp	r18, r20
     fe6:	35 07       	cpc	r19, r21
     fe8:	80 f4       	brcc	.+32     	; 0x100a <OS_Start+0x4f6>
     fea:	fb 01       	movw	r30, r22
     fec:	e9 5f       	subi	r30, 0xF9	; 249
     fee:	fe 4f       	sbci	r31, 0xFE	; 254
     ff0:	20 81       	ld	r18, Z
     ff2:	31 81       	ldd	r19, Z+1	; 0x01
     ff4:	8a 9d       	mul	r24, r10
     ff6:	f0 01       	movw	r30, r0
     ff8:	8b 9d       	mul	r24, r11
     ffa:	f0 0d       	add	r31, r0
     ffc:	9a 9d       	mul	r25, r10
     ffe:	f0 0d       	add	r31, r0
    1000:	11 24       	eor	r1, r1
    1002:	e2 57       	subi	r30, 0x72	; 114
    1004:	fc 4f       	sbci	r31, 0xFC	; 252
    1006:	31 83       	std	Z+1, r19	; 0x01
    1008:	20 83       	st	Z, r18
    100a:	eb 81       	ldd	r30, Y+3	; 0x03
    100c:	fc 81       	ldd	r31, Y+4	; 0x04
    100e:	ec 5f       	subi	r30, 0xFC	; 252
    1010:	fe 4f       	sbci	r31, 0xFE	; 254
    1012:	84 e0       	ldi	r24, 0x04	; 4
    1014:	80 83       	st	Z, r24
    1016:	43 e1       	ldi	r20, 0x13	; 19
    1018:	52 e0       	ldi	r21, 0x02	; 2
    101a:	6f ef       	ldi	r22, 0xFF	; 255
    101c:	74 e1       	ldi	r23, 0x14	; 20
    101e:	85 e2       	ldi	r24, 0x25	; 37
    1020:	92 e0       	ldi	r25, 0x02	; 2
    1022:	58 d3       	rcall	.+1712   	; 0x16d4 <enqueueWQ>
    1024:	27 dc       	rcall	.-1970   	; 0x874 <Dispatch>
    1026:	c3 cd       	rjmp	.-1146   	; 0xbae <OS_Start+0x9a>
    1028:	56 dc       	rcall	.-1876   	; 0x8d6 <Kernel_Unlock_Mutex>
    102a:	c1 cd       	rjmp	.-1150   	; 0xbae <OS_Start+0x9a>
    102c:	80 91 1b 02 	lds	r24, 0x021B
    1030:	90 91 1c 02 	lds	r25, 0x021C
    1034:	08 97       	sbiw	r24, 0x08	; 8
    1036:	31 f1       	breq	.+76     	; 0x1084 <OS_Start+0x570>
    1038:	d7 01       	movw	r26, r14
    103a:	12 96       	adiw	r26, 0x02	; 2
    103c:	8c 91       	ld	r24, X
    103e:	88 23       	and	r24, r24
    1040:	81 f0       	breq	.+32     	; 0x1062 <OS_Start+0x54e>
    1042:	ee e2       	ldi	r30, 0x2E	; 46
    1044:	f2 e0       	ldi	r31, 0x02	; 2
    1046:	c4 01       	movw	r24, r8
    1048:	4b 81       	ldd	r20, Y+3	; 0x03
    104a:	5c 81       	ldd	r21, Y+4	; 0x04
    104c:	20 81       	ld	r18, Z
    104e:	22 23       	and	r18, r18
    1050:	59 f0       	breq	.+22     	; 0x1068 <OS_Start+0x554>
    1052:	01 96       	adiw	r24, 0x01	; 1
    1054:	35 96       	adiw	r30, 0x05	; 5
    1056:	88 30       	cpi	r24, 0x08	; 8
    1058:	91 05       	cpc	r25, r1
    105a:	c1 f7       	brne	.-16     	; 0x104c <OS_Start+0x538>
    105c:	5c 83       	std	Y+4, r21	; 0x04
    105e:	4b 83       	std	Y+3, r20	; 0x03
    1060:	05 c0       	rjmp	.+10     	; 0x106c <OS_Start+0x558>
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	02 c0       	rjmp	.+4      	; 0x106c <OS_Start+0x558>
    1068:	5c 83       	std	Y+4, r21	; 0x04
    106a:	4b 83       	std	Y+3, r20	; 0x03
    106c:	9c 01       	movw	r18, r24
    106e:	22 0f       	add	r18, r18
    1070:	33 1f       	adc	r19, r19
    1072:	22 0f       	add	r18, r18
    1074:	33 1f       	adc	r19, r19
    1076:	82 0f       	add	r24, r18
    1078:	93 1f       	adc	r25, r19
    107a:	89 5d       	subi	r24, 0xD9	; 217
    107c:	9d 4f       	sbci	r25, 0xFD	; 253
    107e:	86 db       	rcall	.-2292   	; 0x78c <Kernel_Init_Event_At>
    1080:	9a 83       	std	Y+2, r25	; 0x02
    1082:	89 83       	std	Y+1, r24	; 0x01
    1084:	ab 81       	ldd	r26, Y+3	; 0x03
    1086:	bc 81       	ldd	r27, Y+4	; 0x04
    1088:	a2 5f       	subi	r26, 0xF2	; 242
    108a:	be 4f       	sbci	r27, 0xFE	; 254
    108c:	e9 81       	ldd	r30, Y+1	; 0x01
    108e:	fa 81       	ldd	r31, Y+2	; 0x02
    1090:	11 96       	adiw	r26, 0x01	; 1
    1092:	fc 93       	st	X, r31
    1094:	ee 93       	st	-X, r30
    1096:	8b cd       	rjmp	.-1258   	; 0xbae <OS_Start+0x9a>
    1098:	eb 81       	ldd	r30, Y+3	; 0x03
    109a:	fc 81       	ldd	r31, Y+4	; 0x04
    109c:	e8 5e       	subi	r30, 0xE8	; 232
    109e:	fe 4f       	sbci	r31, 0xFE	; 254
    10a0:	40 81       	ld	r20, Z
    10a2:	51 81       	ldd	r21, Z+1	; 0x01
    10a4:	d7 01       	movw	r26, r14
    10a6:	8d 91       	ld	r24, X+
    10a8:	9c 91       	ld	r25, X
    10aa:	48 17       	cp	r20, r24
    10ac:	59 07       	cpc	r21, r25
    10ae:	09 f4       	brne	.+2      	; 0x10b2 <OS_Start+0x59e>
    10b0:	fa c0       	rjmp	.+500    	; 0x12a6 <OS_Start+0x792>
    10b2:	f7 01       	movw	r30, r14
    10b4:	c4 01       	movw	r24, r8
    10b6:	6b 81       	ldd	r22, Y+3	; 0x03
    10b8:	7c 81       	ldd	r23, Y+4	; 0x04
    10ba:	25 81       	ldd	r18, Z+5	; 0x05
    10bc:	36 81       	ldd	r19, Z+6	; 0x06
    10be:	42 17       	cp	r20, r18
    10c0:	53 07       	cpc	r21, r19
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <OS_Start+0x5b2>
    10c4:	f3 c0       	rjmp	.+486    	; 0x12ac <OS_Start+0x798>
    10c6:	01 96       	adiw	r24, 0x01	; 1
    10c8:	35 96       	adiw	r30, 0x05	; 5
    10ca:	88 30       	cpi	r24, 0x08	; 8
    10cc:	91 05       	cpc	r25, r1
    10ce:	a9 f7       	brne	.-22     	; 0x10ba <OS_Start+0x5a6>
    10d0:	3d c0       	rjmp	.+122    	; 0x114c <OS_Start+0x638>
    10d2:	fc 01       	movw	r30, r24
    10d4:	ee 0f       	add	r30, r30
    10d6:	ff 1f       	adc	r31, r31
    10d8:	ee 0f       	add	r30, r30
    10da:	ff 1f       	adc	r31, r31
    10dc:	e8 0f       	add	r30, r24
    10de:	f9 1f       	adc	r31, r25
    10e0:	e9 5d       	subi	r30, 0xD9	; 217
    10e2:	fd 4f       	sbci	r31, 0xFD	; 253
    10e4:	22 81       	ldd	r18, Z+2	; 0x02
    10e6:	22 30       	cpi	r18, 0x02	; 2
    10e8:	69 f4       	brne	.+26     	; 0x1104 <OS_Start+0x5f0>
    10ea:	fc 01       	movw	r30, r24
    10ec:	ee 0f       	add	r30, r30
    10ee:	ff 1f       	adc	r31, r31
    10f0:	ee 0f       	add	r30, r30
    10f2:	ff 1f       	adc	r31, r31
    10f4:	8e 0f       	add	r24, r30
    10f6:	9f 1f       	adc	r25, r31
    10f8:	fc 01       	movw	r30, r24
    10fa:	e9 5d       	subi	r30, 0xD9	; 217
    10fc:	fd 4f       	sbci	r31, 0xFD	; 253
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	82 83       	std	Z+2, r24	; 0x02
    1102:	24 c0       	rjmp	.+72     	; 0x114c <OS_Start+0x638>
    1104:	eb 81       	ldd	r30, Y+3	; 0x03
    1106:	fc 81       	ldd	r31, Y+4	; 0x04
    1108:	ea 5e       	subi	r30, 0xEA	; 234
    110a:	fe 4f       	sbci	r31, 0xFE	; 254
    110c:	51 83       	std	Z+1, r21	; 0x01
    110e:	40 83       	st	Z, r20
    1110:	eb 81       	ldd	r30, Y+3	; 0x03
    1112:	fc 81       	ldd	r31, Y+4	; 0x04
    1114:	20 81       	ld	r18, Z
    1116:	31 81       	ldd	r19, Z+1	; 0x01
    1118:	fc 01       	movw	r30, r24
    111a:	ee 0f       	add	r30, r30
    111c:	ff 1f       	adc	r31, r31
    111e:	ee 0f       	add	r30, r30
    1120:	ff 1f       	adc	r31, r31
    1122:	8e 0f       	add	r24, r30
    1124:	9f 1f       	adc	r25, r31
    1126:	fc 01       	movw	r30, r24
    1128:	e9 5d       	subi	r30, 0xD9	; 217
    112a:	fd 4f       	sbci	r31, 0xFD	; 253
    112c:	34 83       	std	Z+4, r19	; 0x04
    112e:	23 83       	std	Z+3, r18	; 0x03
    1130:	eb 81       	ldd	r30, Y+3	; 0x03
    1132:	fc 81       	ldd	r31, Y+4	; 0x04
    1134:	ec 5f       	subi	r30, 0xFC	; 252
    1136:	fe 4f       	sbci	r31, 0xFE	; 254
    1138:	85 e0       	ldi	r24, 0x05	; 5
    113a:	80 83       	st	Z, r24
    113c:	47 e1       	ldi	r20, 0x17	; 23
    113e:	52 e0       	ldi	r21, 0x02	; 2
    1140:	6d ed       	ldi	r22, 0xDD	; 221
    1142:	74 e1       	ldi	r23, 0x14	; 20
    1144:	85 e2       	ldi	r24, 0x25	; 37
    1146:	92 e0       	ldi	r25, 0x02	; 2
    1148:	66 d3       	rcall	.+1740   	; 0x1816 <enqueueRQ>
    114a:	94 db       	rcall	.-2264   	; 0x874 <Dispatch>
    114c:	e0 91 25 02 	lds	r30, 0x0225
    1150:	f0 91 26 02 	lds	r31, 0x0226
    1154:	80 81       	ld	r24, Z
    1156:	91 81       	ldd	r25, Z+1	; 0x01
    1158:	02 97       	sbiw	r24, 0x02	; 2
    115a:	20 f4       	brcc	.+8      	; 0x1164 <OS_Start+0x650>
    115c:	82 e0       	ldi	r24, 0x02	; 2
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	e5 d8       	rcall	.-3638   	; 0x32c <enable_LED>
    1162:	25 cd       	rjmp	.-1462   	; 0xbae <OS_Start+0x9a>
    1164:	80 81       	ld	r24, Z
    1166:	91 81       	ldd	r25, Z+1	; 0x01
    1168:	02 97       	sbiw	r24, 0x02	; 2
    116a:	21 f4       	brne	.+8      	; 0x1174 <OS_Start+0x660>
    116c:	85 e0       	ldi	r24, 0x05	; 5
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	dd d8       	rcall	.-3654   	; 0x32c <enable_LED>
    1172:	1d cd       	rjmp	.-1478   	; 0xbae <OS_Start+0x9a>
    1174:	80 81       	ld	r24, Z
    1176:	91 81       	ldd	r25, Z+1	; 0x01
    1178:	03 97       	sbiw	r24, 0x03	; 3
    117a:	09 f0       	breq	.+2      	; 0x117e <OS_Start+0x66a>
    117c:	18 cd       	rjmp	.-1488   	; 0xbae <OS_Start+0x9a>
    117e:	86 e0       	ldi	r24, 0x06	; 6
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	d4 d8       	rcall	.-3672   	; 0x32c <enable_LED>
    1184:	14 cd       	rjmp	.-1496   	; 0xbae <OS_Start+0x9a>
    1186:	eb 81       	ldd	r30, Y+3	; 0x03
    1188:	fc 81       	ldd	r31, Y+4	; 0x04
    118a:	e8 5e       	subi	r30, 0xE8	; 232
    118c:	fe 4f       	sbci	r31, 0xFE	; 254
    118e:	40 81       	ld	r20, Z
    1190:	51 81       	ldd	r21, Z+1	; 0x01
    1192:	d7 01       	movw	r26, r14
    1194:	8d 91       	ld	r24, X+
    1196:	9c 91       	ld	r25, X
    1198:	48 17       	cp	r20, r24
    119a:	59 07       	cpc	r21, r25
    119c:	09 f4       	brne	.+2      	; 0x11a0 <OS_Start+0x68c>
    119e:	97 c0       	rjmp	.+302    	; 0x12ce <OS_Start+0x7ba>
    11a0:	f7 01       	movw	r30, r14
    11a2:	c4 01       	movw	r24, r8
    11a4:	6b 81       	ldd	r22, Y+3	; 0x03
    11a6:	7c 81       	ldd	r23, Y+4	; 0x04
    11a8:	25 81       	ldd	r18, Z+5	; 0x05
    11aa:	36 81       	ldd	r19, Z+6	; 0x06
    11ac:	42 17       	cp	r20, r18
    11ae:	53 07       	cpc	r21, r19
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <OS_Start+0x6a0>
    11b2:	90 c0       	rjmp	.+288    	; 0x12d4 <OS_Start+0x7c0>
    11b4:	01 96       	adiw	r24, 0x01	; 1
    11b6:	35 96       	adiw	r30, 0x05	; 5
    11b8:	88 30       	cpi	r24, 0x08	; 8
    11ba:	91 05       	cpc	r25, r1
    11bc:	a9 f7       	brne	.-22     	; 0x11a8 <OS_Start+0x694>
    11be:	f7 cc       	rjmp	.-1554   	; 0xbae <OS_Start+0x9a>
    11c0:	80 81       	ld	r24, Z
    11c2:	91 81       	ldd	r25, Z+1	; 0x01
    11c4:	48 17       	cp	r20, r24
    11c6:	59 07       	cpc	r21, r25
    11c8:	09 f4       	brne	.+2      	; 0x11cc <OS_Start+0x6b8>
    11ca:	97 c0       	rjmp	.+302    	; 0x12fa <OS_Start+0x7e6>
    11cc:	2f 5f       	subi	r18, 0xFF	; 255
    11ce:	3f 4f       	sbci	r19, 0xFF	; 255
    11d0:	e2 5e       	subi	r30, 0xE2	; 226
    11d2:	fe 4f       	sbci	r31, 0xFE	; 254
    11d4:	20 31       	cpi	r18, 0x10	; 16
    11d6:	31 05       	cpc	r19, r1
    11d8:	99 f7       	brne	.-26     	; 0x11c0 <OS_Start+0x6ac>
    11da:	cb 01       	movw	r24, r22
    11dc:	fb 01       	movw	r30, r22
    11de:	ee 0f       	add	r30, r30
    11e0:	ff 1f       	adc	r31, r31
    11e2:	ee 0f       	add	r30, r30
    11e4:	ff 1f       	adc	r31, r31
    11e6:	8e 0f       	add	r24, r30
    11e8:	9f 1f       	adc	r25, r31
    11ea:	fc 01       	movw	r30, r24
    11ec:	e9 5d       	subi	r30, 0xD9	; 217
    11ee:	fd 4f       	sbci	r31, 0xFD	; 253
    11f0:	82 e0       	ldi	r24, 0x02	; 2
    11f2:	82 83       	std	Z+2, r24	; 0x02
    11f4:	dc cc       	rjmp	.-1608   	; 0xbae <OS_Start+0x9a>
    11f6:	2a 9d       	mul	r18, r10
    11f8:	f0 01       	movw	r30, r0
    11fa:	2b 9d       	mul	r18, r11
    11fc:	f0 0d       	add	r31, r0
    11fe:	3a 9d       	mul	r19, r10
    1200:	f0 0d       	add	r31, r0
    1202:	11 24       	eor	r1, r1
    1204:	ef 55       	subi	r30, 0x5F	; 95
    1206:	fc 4f       	sbci	r31, 0xFC	; 252
    1208:	80 81       	ld	r24, Z
    120a:	91 81       	ldd	r25, Z+1	; 0x01
    120c:	89 2b       	or	r24, r25
    120e:	09 f0       	breq	.+2      	; 0x1212 <OS_Start+0x6fe>
    1210:	ce cc       	rjmp	.-1636   	; 0xbae <OS_Start+0x9a>
    1212:	eb 81       	ldd	r30, Y+3	; 0x03
    1214:	fc 81       	ldd	r31, Y+4	; 0x04
    1216:	ec 5f       	subi	r30, 0xFC	; 252
    1218:	fe 4f       	sbci	r31, 0xFE	; 254
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	80 83       	st	Z, r24
    121e:	47 e1       	ldi	r20, 0x17	; 23
    1220:	52 e0       	ldi	r21, 0x02	; 2
    1222:	6d ed       	ldi	r22, 0xDD	; 221
    1224:	74 e1       	ldi	r23, 0x14	; 20
    1226:	85 e2       	ldi	r24, 0x25	; 37
    1228:	92 e0       	ldi	r25, 0x02	; 2
    122a:	f5 d2       	rcall	.+1514   	; 0x1816 <enqueueRQ>
    122c:	23 db       	rcall	.-2490   	; 0x874 <Dispatch>
    122e:	bf cc       	rjmp	.-1666   	; 0xbae <OS_Start+0x9a>
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	02 c0       	rjmp	.+4      	; 0x123a <OS_Start+0x726>
    1236:	7c 83       	std	Y+4, r23	; 0x04
    1238:	6b 83       	std	Y+3, r22	; 0x03
    123a:	8a 9d       	mul	r24, r10
    123c:	f0 01       	movw	r30, r0
    123e:	8b 9d       	mul	r24, r11
    1240:	f0 0d       	add	r31, r0
    1242:	9a 9d       	mul	r25, r10
    1244:	f0 0d       	add	r31, r0
    1246:	11 24       	eor	r1, r1
    1248:	ef 55       	subi	r30, 0x5F	; 95
    124a:	fc 4f       	sbci	r31, 0xFC	; 252
    124c:	91 82       	std	Z+1, r9	; 0x01
    124e:	80 82       	st	Z, r8
    1250:	63 cd       	rjmp	.-1338   	; 0xd18 <OS_Start+0x204>
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	02 c0       	rjmp	.+4      	; 0x125c <OS_Start+0x748>
    1258:	7c 83       	std	Y+4, r23	; 0x04
    125a:	6b 83       	std	Y+3, r22	; 0x03
    125c:	8a 9d       	mul	r24, r10
    125e:	f0 01       	movw	r30, r0
    1260:	8b 9d       	mul	r24, r11
    1262:	f0 0d       	add	r31, r0
    1264:	9a 9d       	mul	r25, r10
    1266:	f0 0d       	add	r31, r0
    1268:	11 24       	eor	r1, r1
    126a:	ef 55       	subi	r30, 0x5F	; 95
    126c:	fc 4f       	sbci	r31, 0xFC	; 252
    126e:	20 81       	ld	r18, Z
    1270:	31 81       	ldd	r19, Z+1	; 0x01
    1272:	21 30       	cpi	r18, 0x01	; 1
    1274:	31 05       	cpc	r19, r1
    1276:	09 f0       	breq	.+2      	; 0x127a <OS_Start+0x766>
    1278:	9a cc       	rjmp	.-1740   	; 0xbae <OS_Start+0x9a>
    127a:	7f cd       	rjmp	.-1282   	; 0xd7a <OS_Start+0x266>
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <OS_Start+0x772>
    1282:	7c 83       	std	Y+4, r23	; 0x04
    1284:	6b 83       	std	Y+3, r22	; 0x03
    1286:	fc 01       	movw	r30, r24
    1288:	ee 0f       	add	r30, r30
    128a:	ff 1f       	adc	r31, r31
    128c:	ee 0f       	add	r30, r30
    128e:	ff 1f       	adc	r31, r31
    1290:	ee 0f       	add	r30, r30
    1292:	ff 1f       	adc	r31, r31
    1294:	e8 1b       	sub	r30, r24
    1296:	f9 0b       	sbc	r31, r25
    1298:	e1 5b       	subi	r30, 0xB1	; 177
    129a:	fd 4f       	sbci	r31, 0xFD	; 253
    129c:	22 81       	ldd	r18, Z+2	; 0x02
    129e:	21 30       	cpi	r18, 0x01	; 1
    12a0:	09 f0       	breq	.+2      	; 0x12a4 <OS_Start+0x790>
    12a2:	55 ce       	rjmp	.-854    	; 0xf4e <OS_Start+0x43a>
    12a4:	3b ce       	rjmp	.-906    	; 0xf1c <OS_Start+0x408>
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <OS_Start+0x79c>
    12ac:	7c 83       	std	Y+4, r23	; 0x04
    12ae:	6b 83       	std	Y+3, r22	; 0x03
    12b0:	fc 01       	movw	r30, r24
    12b2:	ee 0f       	add	r30, r30
    12b4:	ff 1f       	adc	r31, r31
    12b6:	ee 0f       	add	r30, r30
    12b8:	ff 1f       	adc	r31, r31
    12ba:	e8 0f       	add	r30, r24
    12bc:	f9 1f       	adc	r31, r25
    12be:	e9 5d       	subi	r30, 0xD9	; 217
    12c0:	fd 4f       	sbci	r31, 0xFD	; 253
    12c2:	23 81       	ldd	r18, Z+3	; 0x03
    12c4:	34 81       	ldd	r19, Z+4	; 0x04
    12c6:	23 2b       	or	r18, r19
    12c8:	09 f0       	breq	.+2      	; 0x12cc <OS_Start+0x7b8>
    12ca:	40 cf       	rjmp	.-384    	; 0x114c <OS_Start+0x638>
    12cc:	02 cf       	rjmp	.-508    	; 0x10d2 <OS_Start+0x5be>
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <OS_Start+0x7c4>
    12d4:	7c 83       	std	Y+4, r23	; 0x04
    12d6:	6b 83       	std	Y+3, r22	; 0x03
    12d8:	ed e9       	ldi	r30, 0x9D	; 157
    12da:	f3 e0       	ldi	r31, 0x03	; 3
    12dc:	20 81       	ld	r18, Z
    12de:	31 81       	ldd	r19, Z+1	; 0x01
    12e0:	42 17       	cp	r20, r18
    12e2:	53 07       	cpc	r21, r19
    12e4:	39 f0       	breq	.+14     	; 0x12f4 <OS_Start+0x7e0>
    12e6:	eb eb       	ldi	r30, 0xBB	; 187
    12e8:	f4 e0       	ldi	r31, 0x04	; 4
    12ea:	94 01       	movw	r18, r8
    12ec:	ab 81       	ldd	r26, Y+3	; 0x03
    12ee:	bc 81       	ldd	r27, Y+4	; 0x04
    12f0:	bc 01       	movw	r22, r24
    12f2:	66 cf       	rjmp	.-308    	; 0x11c0 <OS_Start+0x6ac>
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	03 c0       	rjmp	.+6      	; 0x1300 <OS_Start+0x7ec>
    12fa:	bc 83       	std	Y+4, r27	; 0x04
    12fc:	ab 83       	std	Y+3, r26	; 0x03
    12fe:	cb 01       	movw	r24, r22
    1300:	2a 9d       	mul	r18, r10
    1302:	a0 01       	movw	r20, r0
    1304:	2b 9d       	mul	r18, r11
    1306:	50 0d       	add	r21, r0
    1308:	3a 9d       	mul	r19, r10
    130a:	50 0d       	add	r21, r0
    130c:	11 24       	eor	r1, r1
    130e:	49 57       	subi	r20, 0x79	; 121
    1310:	5d 4f       	sbci	r21, 0xFD	; 253
    1312:	fa 01       	movw	r30, r20
    1314:	ec 5f       	subi	r30, 0xFC	; 252
    1316:	fe 4f       	sbci	r31, 0xFE	; 254
    1318:	61 e0       	ldi	r22, 0x01	; 1
    131a:	60 83       	st	Z, r22
    131c:	72 96       	adiw	r30, 0x12	; 18
    131e:	31 82       	std	Z+1, r3	; 0x01
    1320:	20 82       	st	Z, r2
    1322:	fc 01       	movw	r30, r24
    1324:	ee 0f       	add	r30, r30
    1326:	ff 1f       	adc	r31, r31
    1328:	ee 0f       	add	r30, r30
    132a:	ff 1f       	adc	r31, r31
    132c:	8e 0f       	add	r24, r30
    132e:	9f 1f       	adc	r25, r31
    1330:	fc 01       	movw	r30, r24
    1332:	e9 5d       	subi	r30, 0xD9	; 217
    1334:	fd 4f       	sbci	r31, 0xFD	; 253
    1336:	14 82       	std	Z+4, r1	; 0x04
    1338:	13 82       	std	Z+3, r1	; 0x03
    133a:	eb 81       	ldd	r30, Y+3	; 0x03
    133c:	fc 81       	ldd	r31, Y+4	; 0x04
    133e:	e9 5f       	subi	r30, 0xF9	; 249
    1340:	fe 4f       	sbci	r31, 0xFE	; 254
    1342:	80 81       	ld	r24, Z
    1344:	91 81       	ldd	r25, Z+1	; 0x01
    1346:	fa 01       	movw	r30, r20
    1348:	e9 5f       	subi	r30, 0xF9	; 249
    134a:	fe 4f       	sbci	r31, 0xFE	; 254
    134c:	40 81       	ld	r20, Z
    134e:	51 81       	ldd	r21, Z+1	; 0x01
    1350:	48 17       	cp	r20, r24
    1352:	59 07       	cpc	r21, r25
    1354:	08 f4       	brcc	.+2      	; 0x1358 <OS_Start+0x844>
    1356:	4f cf       	rjmp	.-354    	; 0x11f6 <OS_Start+0x6e2>
    1358:	2a cc       	rjmp	.-1964   	; 0xbae <OS_Start+0x9a>
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	df 91       	pop	r29
    1364:	cf 91       	pop	r28
    1366:	1f 91       	pop	r17
    1368:	0f 91       	pop	r16
    136a:	ff 90       	pop	r15
    136c:	ef 90       	pop	r14
    136e:	df 90       	pop	r13
    1370:	cf 90       	pop	r12
    1372:	bf 90       	pop	r11
    1374:	af 90       	pop	r10
    1376:	9f 90       	pop	r9
    1378:	8f 90       	pop	r8
    137a:	7f 90       	pop	r7
    137c:	6f 90       	pop	r6
    137e:	5f 90       	pop	r5
    1380:	4f 90       	pop	r4
    1382:	3f 90       	pop	r3
    1384:	2f 90       	pop	r2
    1386:	08 95       	ret

00001388 <Mutex_Init>:
    1388:	80 91 23 02 	lds	r24, 0x0223
    138c:	90 91 24 02 	lds	r25, 0x0224
    1390:	89 2b       	or	r24, r25
    1392:	a1 f0       	breq	.+40     	; 0x13bc <Mutex_Init+0x34>
    1394:	f8 94       	cli
    1396:	e0 91 25 02 	lds	r30, 0x0225
    139a:	f0 91 26 02 	lds	r31, 0x0226
    139e:	e3 5f       	subi	r30, 0xF3	; 243
    13a0:	fe 4f       	sbci	r31, 0xFE	; 254
    13a2:	87 e0       	ldi	r24, 0x07	; 7
    13a4:	80 83       	st	Z, r24
    13a6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    13aa:	e0 91 25 02 	lds	r30, 0x0225
    13ae:	f0 91 26 02 	lds	r31, 0x0226
    13b2:	e2 5f       	subi	r30, 0xF2	; 242
    13b4:	fe 4f       	sbci	r31, 0xFE	; 254
    13b6:	80 81       	ld	r24, Z
    13b8:	91 81       	ldd	r25, Z+1	; 0x01
    13ba:	08 95       	ret
    13bc:	08 95       	ret

000013be <Event_Init>:
    13be:	80 91 23 02 	lds	r24, 0x0223
    13c2:	90 91 24 02 	lds	r25, 0x0224
    13c6:	89 2b       	or	r24, r25
    13c8:	a1 f0       	breq	.+40     	; 0x13f2 <Event_Init+0x34>
    13ca:	f8 94       	cli
    13cc:	e0 91 25 02 	lds	r30, 0x0225
    13d0:	f0 91 26 02 	lds	r31, 0x0226
    13d4:	e3 5f       	subi	r30, 0xF3	; 243
    13d6:	fe 4f       	sbci	r31, 0xFE	; 254
    13d8:	8a e0       	ldi	r24, 0x0A	; 10
    13da:	80 83       	st	Z, r24
    13dc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    13e0:	e0 91 25 02 	lds	r30, 0x0225
    13e4:	f0 91 26 02 	lds	r31, 0x0226
    13e8:	e2 5f       	subi	r30, 0xF2	; 242
    13ea:	fe 4f       	sbci	r31, 0xFE	; 254
    13ec:	80 81       	ld	r24, Z
    13ee:	91 81       	ldd	r25, Z+1	; 0x01
    13f0:	08 95       	ret
    13f2:	08 95       	ret

000013f4 <Task_Create>:
    13f4:	20 91 23 02 	lds	r18, 0x0223
    13f8:	30 91 24 02 	lds	r19, 0x0224
    13fc:	23 2b       	or	r18, r19
    13fe:	f1 f0       	breq	.+60     	; 0x143c <Task_Create+0x48>
    1400:	f8 94       	cli
    1402:	20 91 25 02 	lds	r18, 0x0225
    1406:	30 91 26 02 	lds	r19, 0x0226
    140a:	f9 01       	movw	r30, r18
    140c:	e3 5f       	subi	r30, 0xF3	; 243
    140e:	fe 4f       	sbci	r31, 0xFE	; 254
    1410:	a1 e0       	ldi	r26, 0x01	; 1
    1412:	a0 83       	st	Z, r26
    1414:	32 97       	sbiw	r30, 0x02	; 2
    1416:	91 83       	std	Z+1, r25	; 0x01
    1418:	80 83       	st	Z, r24
    141a:	36 97       	sbiw	r30, 0x06	; 6
    141c:	71 83       	std	Z+1, r23	; 0x01
    141e:	60 83       	st	Z, r22
    1420:	34 96       	adiw	r30, 0x04	; 4
    1422:	51 83       	std	Z+1, r21	; 0x01
    1424:	40 83       	st	Z, r20
    1426:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    142a:	e0 91 25 02 	lds	r30, 0x0225
    142e:	f0 91 26 02 	lds	r31, 0x0226
    1432:	e2 5f       	subi	r30, 0xF2	; 242
    1434:	fe 4f       	sbci	r31, 0xFE	; 254
    1436:	80 81       	ld	r24, Z
    1438:	91 81       	ldd	r25, Z+1	; 0x01
    143a:	08 95       	ret
    143c:	62 c9       	rjmp	.-3388   	; 0x702 <Kernel_Create_Task>
    143e:	08 95       	ret

00001440 <Task_Next>:
    1440:	80 91 23 02 	lds	r24, 0x0223
    1444:	90 91 24 02 	lds	r25, 0x0224
    1448:	89 2b       	or	r24, r25
    144a:	59 f0       	breq	.+22     	; 0x1462 <Task_Next+0x22>
    144c:	f8 94       	cli
    144e:	e0 91 25 02 	lds	r30, 0x0225
    1452:	f0 91 26 02 	lds	r31, 0x0226
    1456:	e3 5f       	subi	r30, 0xF3	; 243
    1458:	fe 4f       	sbci	r31, 0xFE	; 254
    145a:	82 e0       	ldi	r24, 0x02	; 2
    145c:	80 83       	st	Z, r24
    145e:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <Enter_Kernel>
    1462:	08 95       	ret

00001464 <setup>:
  * Setup pins and timers
  */
void setup() {
	/** For testing */
	/** pin 47 */
	init_LED_PORTL_pin2();
    1464:	0e 94 84 01 	call	0x308	; 0x308 <init_LED_PORTL_pin2>

	/** pin 43 */
	init_LED_PORTL_pin6();
    1468:	0e 94 90 01 	call	0x320	; 0x320 <init_LED_PORTL_pin6>

	/** pin 44 */
	init_LED_PORTL_pin5();
    146c:	0e 94 8a 01 	call	0x314	; 0x314 <init_LED_PORTL_pin5>

	/** pin 49 */
	init_LED_PORTL_pin0();
    1470:	0e 94 78 01 	call	0x2f0	; 0x2f0 <init_LED_PORTL_pin0>

	/** pin 48 */
	init_LED_PORTL_pin1();
    1474:	0e 94 7e 01 	call	0x2fc	; 0x2fc <init_LED_PORTL_pin1>

	/** initialize Timer1 16 bit timer */
	Disable_Interrupt();
    1478:	f8 94       	cli

	/** Timer 1 */
	TCCR1A = 0;                 /** Set TCCR1A register to 0 */
    147a:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;                 /** Set TCCR1B register to 0 */
    147e:	e1 e8       	ldi	r30, 0x81	; 129
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	10 82       	st	Z, r1

	TCNT1 = 0;                  /** Initialize counter to 0 */
    1484:	10 92 85 00 	sts	0x0085, r1
    1488:	10 92 84 00 	sts	0x0084, r1

	OCR1A = 624;                /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
    148c:	80 e7       	ldi	r24, 0x70	; 112
    148e:	92 e0       	ldi	r25, 0x02	; 2
    1490:	90 93 89 00 	sts	0x0089, r25
    1494:	80 93 88 00 	sts	0x0088, r24

	TCCR1B |= (1 << WGM12);     /** Turns on CTC mode (TOP is now OCR1A) */
    1498:	80 81       	ld	r24, Z
    149a:	88 60       	ori	r24, 0x08	; 8
    149c:	80 83       	st	Z, r24

	TCCR1B |= (1 << CS12);      /** Prescaler 256 */
    149e:	80 81       	ld	r24, Z
    14a0:	84 60       	ori	r24, 0x04	; 4
    14a2:	80 83       	st	Z, r24

	TIMSK1 |= (1 << OCIE1A);    /** Enable timer compare interrupt */
    14a4:	ef e6       	ldi	r30, 0x6F	; 111
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	82 60       	ori	r24, 0x02	; 2
    14ac:	80 83       	st	Z, r24

	/** Timer 3 */
	TCCR3A = 0;                 /** Set TCCR0A register to 0 */
    14ae:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0;                 /** Set TCCR0B register to 0 */
    14b2:	e1 e9       	ldi	r30, 0x91	; 145
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	10 82       	st	Z, r1

	TCNT3 = 0;                  /** Initialize counter to 0 */
    14b8:	10 92 95 00 	sts	0x0095, r1
    14bc:	10 92 94 00 	sts	0x0094, r1

	OCR3A = 62499;              /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
    14c0:	83 e2       	ldi	r24, 0x23	; 35
    14c2:	94 ef       	ldi	r25, 0xF4	; 244
    14c4:	90 93 99 00 	sts	0x0099, r25
    14c8:	80 93 98 00 	sts	0x0098, r24

	TCCR3B |= (1 << WGM32);     /** Turns on CTC mode (TOP is now OCR1A) */
    14cc:	80 81       	ld	r24, Z
    14ce:	88 60       	ori	r24, 0x08	; 8
    14d0:	80 83       	st	Z, r24

	TCCR3B |= (1 << CS32);      /** Prescaler 1024 */
    14d2:	80 81       	ld	r24, Z
    14d4:	84 60       	ori	r24, 0x04	; 4
    14d6:	80 83       	st	Z, r24

	TIMSK3 = (1 << OCIE3A);
    14d8:	82 e0       	ldi	r24, 0x02	; 2
    14da:	80 93 71 00 	sts	0x0071, r24

	Enable_Interrupt();
    14de:	78 94       	sei
    14e0:	08 95       	ret

000014e2 <__vector_17>:
}

/**
  * ISR for timer1
  */
ISR(TIMER1_COMPA_vect) {
    14e2:	1f 92       	push	r1
    14e4:	0f 92       	push	r0
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	0f 92       	push	r0
    14ea:	11 24       	eor	r1, r1
    14ec:	0b b6       	in	r0, 0x3b	; 59
    14ee:	0f 92       	push	r0
    14f0:	df 92       	push	r13
    14f2:	ef 92       	push	r14
    14f4:	ff 92       	push	r15
    14f6:	0f 93       	push	r16
    14f8:	1f 93       	push	r17
    14fa:	2f 93       	push	r18
    14fc:	3f 93       	push	r19
    14fe:	4f 93       	push	r20
    1500:	5f 93       	push	r21
    1502:	6f 93       	push	r22
    1504:	7f 93       	push	r23
    1506:	8f 93       	push	r24
    1508:	9f 93       	push	r25
    150a:	af 93       	push	r26
    150c:	bf 93       	push	r27
    150e:	ef 93       	push	r30
    1510:	ff 93       	push	r31
    1512:	cf 93       	push	r28
    1514:	df 93       	push	r29
    1516:	00 d0       	rcall	.+0      	; 0x1518 <__vector_17+0x36>
    1518:	1f 92       	push	r1
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
    151e:	80 91 15 02 	lds	r24, 0x0215
    1522:	90 91 16 02 	lds	r25, 0x0216
    1526:	01 97       	sbiw	r24, 0x01	; 1
    1528:	9a 83       	std	Y+2, r25	; 0x02
    152a:	89 83       	std	Y+1, r24	; 0x01
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	9a 81       	ldd	r25, Y+2	; 0x02
    1530:	99 23       	and	r25, r25
    1532:	0c f4       	brge	.+2      	; 0x1536 <__vector_17+0x54>
    1534:	8f c0       	rjmp	.+286    	; 0x1654 <__vector_17+0x172>
		if ((SleepQueue[i]->wakeTickOverflow <= tickOverflowCount) && (SleepQueue[i]->wakeTick <= (TCNT3/625))) {
    1536:	e9 81       	ldd	r30, Y+1	; 0x01
    1538:	fa 81       	ldd	r31, Y+2	; 0x02
    153a:	ee 0f       	add	r30, r30
    153c:	ff 1f       	adc	r31, r31
    153e:	e3 54       	subi	r30, 0x43	; 67
    1540:	fb 4e       	sbci	r31, 0xEB	; 235
    1542:	01 90       	ld	r0, Z+
    1544:	f0 81       	ld	r31, Z
    1546:	e0 2d       	mov	r30, r0
    1548:	e0 5f       	subi	r30, 0xF0	; 240
    154a:	fe 4f       	sbci	r31, 0xFE	; 254
    154c:	20 81       	ld	r18, Z
    154e:	31 81       	ldd	r19, Z+1	; 0x01
    1550:	80 91 19 02 	lds	r24, 0x0219
    1554:	90 91 1a 02 	lds	r25, 0x021A
    1558:	82 17       	cp	r24, r18
    155a:	93 07       	cpc	r25, r19
    155c:	08 f4       	brcc	.+2      	; 0x1560 <__vector_17+0x7e>
    155e:	7a c0       	rjmp	.+244    	; 0x1654 <__vector_17+0x172>
    1560:	e9 81       	ldd	r30, Y+1	; 0x01
    1562:	fa 81       	ldd	r31, Y+2	; 0x02
    1564:	ee 0f       	add	r30, r30
    1566:	ff 1f       	adc	r31, r31
    1568:	e3 54       	subi	r30, 0x43	; 67
    156a:	fb 4e       	sbci	r31, 0xEB	; 235
    156c:	01 90       	ld	r0, Z+
    156e:	f0 81       	ld	r31, Z
    1570:	e0 2d       	mov	r30, r0
    1572:	ee 5e       	subi	r30, 0xEE	; 238
    1574:	fe 4f       	sbci	r31, 0xFE	; 254
    1576:	20 81       	ld	r18, Z
    1578:	31 81       	ldd	r19, Z+1	; 0x01
    157a:	80 91 94 00 	lds	r24, 0x0094
    157e:	90 91 95 00 	lds	r25, 0x0095
    1582:	61 e7       	ldi	r22, 0x71	; 113
    1584:	72 e0       	ldi	r23, 0x02	; 2
    1586:	dc d5       	rcall	.+3000   	; 0x2140 <__udivmodhi4>
    1588:	62 17       	cp	r22, r18
    158a:	73 07       	cpc	r23, r19
    158c:	60 f5       	brcc	.+88     	; 0x15e6 <__vector_17+0x104>
    158e:	62 c0       	rjmp	.+196    	; 0x1654 <__vector_17+0x172>
    1590:	e9 81       	ldd	r30, Y+1	; 0x01
    1592:	fa 81       	ldd	r31, Y+2	; 0x02
    1594:	ee 0f       	add	r30, r30
    1596:	ff 1f       	adc	r31, r31
    1598:	e3 54       	subi	r30, 0x43	; 67
    159a:	fb 4e       	sbci	r31, 0xEB	; 235
    159c:	01 90       	ld	r0, Z+
    159e:	f0 81       	ld	r31, Z
    15a0:	e0 2d       	mov	r30, r0
    15a2:	e0 5f       	subi	r30, 0xF0	; 240
    15a4:	fe 4f       	sbci	r31, 0xFE	; 254
    15a6:	20 81       	ld	r18, Z
    15a8:	31 81       	ldd	r19, Z+1	; 0x01
    15aa:	80 91 19 02 	lds	r24, 0x0219
    15ae:	90 91 1a 02 	lds	r25, 0x021A
    15b2:	82 17       	cp	r24, r18
    15b4:	93 07       	cpc	r25, r19
    15b6:	08 f4       	brcc	.+2      	; 0x15ba <__vector_17+0xd8>
    15b8:	4d c0       	rjmp	.+154    	; 0x1654 <__vector_17+0x172>
    15ba:	e9 81       	ldd	r30, Y+1	; 0x01
    15bc:	fa 81       	ldd	r31, Y+2	; 0x02
    15be:	ee 0f       	add	r30, r30
    15c0:	ff 1f       	adc	r31, r31
    15c2:	e3 54       	subi	r30, 0x43	; 67
    15c4:	fb 4e       	sbci	r31, 0xEB	; 235
    15c6:	01 90       	ld	r0, Z+
    15c8:	f0 81       	ld	r31, Z
    15ca:	e0 2d       	mov	r30, r0
    15cc:	ee 5e       	subi	r30, 0xEE	; 238
    15ce:	fe 4f       	sbci	r31, 0xFE	; 254
    15d0:	20 81       	ld	r18, Z
    15d2:	31 81       	ldd	r19, Z+1	; 0x01
    15d4:	f7 01       	movw	r30, r14
    15d6:	80 81       	ld	r24, Z
    15d8:	91 81       	ldd	r25, Z+1	; 0x01
    15da:	b8 01       	movw	r22, r16
    15dc:	b1 d5       	rcall	.+2914   	; 0x2140 <__udivmodhi4>
    15de:	62 17       	cp	r22, r18
    15e0:	73 07       	cpc	r23, r19
    15e2:	50 f4       	brcc	.+20     	; 0x15f8 <__vector_17+0x116>
    15e4:	37 c0       	rjmp	.+110    	; 0x1654 <__vector_17+0x172>
			volatile PD *p = dequeue(&SleepQueue, &SQCount);
			p->state = READY;
    15e6:	dd 24       	eor	r13, r13
    15e8:	d3 94       	inc	r13
ISR(TIMER1_COMPA_vect) {

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
		if ((SleepQueue[i]->wakeTickOverflow <= tickOverflowCount) && (SleepQueue[i]->wakeTick <= (TCNT3/625))) {
    15ea:	0f 2e       	mov	r0, r31
    15ec:	f4 e9       	ldi	r31, 0x94	; 148
    15ee:	ef 2e       	mov	r14, r31
    15f0:	f1 2c       	mov	r15, r1
    15f2:	f0 2d       	mov	r31, r0
    15f4:	01 e7       	ldi	r16, 0x71	; 113
    15f6:	12 e0       	ldi	r17, 0x02	; 2
			volatile PD *p = dequeue(&SleepQueue, &SQCount);
    15f8:	65 e1       	ldi	r22, 0x15	; 21
    15fa:	72 e0       	ldi	r23, 0x02	; 2
    15fc:	8d eb       	ldi	r24, 0xBD	; 189
    15fe:	94 e1       	ldi	r25, 0x14	; 20
    1600:	2d d2       	rcall	.+1114   	; 0x1a5c <dequeue>
    1602:	9c 83       	std	Y+4, r25	; 0x04
    1604:	8b 83       	std	Y+3, r24	; 0x03
			p->state = READY;
    1606:	fc 01       	movw	r30, r24
    1608:	ec 5f       	subi	r30, 0xFC	; 252
    160a:	fe 4f       	sbci	r31, 0xFE	; 254
    160c:	d0 82       	st	Z, r13
			enqueueRQ(&p, &ReadyQueue, &RQCount);
    160e:	47 e1       	ldi	r20, 0x17	; 23
    1610:	52 e0       	ldi	r21, 0x02	; 2
    1612:	6d ed       	ldi	r22, 0xDD	; 221
    1614:	74 e1       	ldi	r23, 0x14	; 20
    1616:	ce 01       	movw	r24, r28
    1618:	03 96       	adiw	r24, 0x03	; 3
    161a:	fd d0       	rcall	.+506    	; 0x1816 <enqueueRQ>
			if (p->inheritedPy < Cp->inheritedPy) {
    161c:	eb 81       	ldd	r30, Y+3	; 0x03
    161e:	fc 81       	ldd	r31, Y+4	; 0x04
    1620:	e9 5f       	subi	r30, 0xF9	; 249
    1622:	fe 4f       	sbci	r31, 0xFE	; 254
    1624:	20 81       	ld	r18, Z
    1626:	31 81       	ldd	r19, Z+1	; 0x01
    1628:	e0 91 25 02 	lds	r30, 0x0225
    162c:	f0 91 26 02 	lds	r31, 0x0226
    1630:	e9 5f       	subi	r30, 0xF9	; 249
    1632:	fe 4f       	sbci	r31, 0xFE	; 254
    1634:	80 81       	ld	r24, Z
    1636:	91 81       	ldd	r25, Z+1	; 0x01
    1638:	28 17       	cp	r18, r24
    163a:	39 07       	cpc	r19, r25
    163c:	08 f4       	brcc	.+2      	; 0x1640 <__vector_17+0x15e>
				Task_Next();
    163e:	00 df       	rcall	.-512    	; 0x1440 <Task_Next>
  */
ISR(TIMER1_COMPA_vect) {

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	9a 81       	ldd	r25, Y+2	; 0x02
    1644:	01 97       	sbiw	r24, 0x01	; 1
    1646:	9a 83       	std	Y+2, r25	; 0x02
    1648:	89 83       	std	Y+1, r24	; 0x01
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	9a 81       	ldd	r25, Y+2	; 0x02
    164e:	99 23       	and	r25, r25
    1650:	0c f0       	brlt	.+2      	; 0x1654 <__vector_17+0x172>
    1652:	9e cf       	rjmp	.-196    	; 0x1590 <__vector_17+0xae>
			break;
		}
	}

	//Task_Next();
}
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	df 91       	pop	r29
    165e:	cf 91       	pop	r28
    1660:	ff 91       	pop	r31
    1662:	ef 91       	pop	r30
    1664:	bf 91       	pop	r27
    1666:	af 91       	pop	r26
    1668:	9f 91       	pop	r25
    166a:	8f 91       	pop	r24
    166c:	7f 91       	pop	r23
    166e:	6f 91       	pop	r22
    1670:	5f 91       	pop	r21
    1672:	4f 91       	pop	r20
    1674:	3f 91       	pop	r19
    1676:	2f 91       	pop	r18
    1678:	1f 91       	pop	r17
    167a:	0f 91       	pop	r16
    167c:	ff 90       	pop	r15
    167e:	ef 90       	pop	r14
    1680:	df 90       	pop	r13
    1682:	0f 90       	pop	r0
    1684:	0b be       	out	0x3b, r0	; 59
    1686:	0f 90       	pop	r0
    1688:	0f be       	out	0x3f, r0	; 63
    168a:	0f 90       	pop	r0
    168c:	1f 90       	pop	r1
    168e:	18 95       	reti

00001690 <__vector_32>:

/**
  * ISR for timer3
  */
ISR(TIMER3_COMPA_vect) {
    1690:	1f 92       	push	r1
    1692:	0f 92       	push	r0
    1694:	0f b6       	in	r0, 0x3f	; 63
    1696:	0f 92       	push	r0
    1698:	11 24       	eor	r1, r1
    169a:	8f 93       	push	r24
    169c:	9f 93       	push	r25
	tickOverflowCount += 1;
    169e:	80 91 19 02 	lds	r24, 0x0219
    16a2:	90 91 1a 02 	lds	r25, 0x021A
    16a6:	01 96       	adiw	r24, 0x01	; 1
    16a8:	90 93 1a 02 	sts	0x021A, r25
    16ac:	80 93 19 02 	sts	0x0219, r24
}
    16b0:	9f 91       	pop	r25
    16b2:	8f 91       	pop	r24
    16b4:	0f 90       	pop	r0
    16b6:	0f be       	out	0x3f, r0	; 63
    16b8:	0f 90       	pop	r0
    16ba:	1f 90       	pop	r1
    16bc:	18 95       	reti

000016be <main>:

/**
  * This function boots the OS and creates the first task: a_main
  */
void main() {
	setup();
    16be:	d2 de       	rcall	.-604    	; 0x1464 <setup>
	
	OS_Init();
    16c0:	7c d8       	rcall	.-3848   	; 0x7ba <OS_Init>
	Task_Create(a_main, 0, 1);
    16c2:	41 e0       	ldi	r20, 0x01	; 1
    16c4:	50 e0       	ldi	r21, 0x00	; 0
    16c6:	60 e0       	ldi	r22, 0x00	; 0
    16c8:	70 e0       	ldi	r23, 0x00	; 0
    16ca:	8c ec       	ldi	r24, 0xCC	; 204
    16cc:	92 e0       	ldi	r25, 0x02	; 2
    16ce:	92 de       	rcall	.-732    	; 0x13f4 <Task_Create>
	OS_Start();
    16d0:	21 ca       	rjmp	.-3006   	; 0xb14 <OS_Start>
    16d2:	08 95       	ret

000016d4 <enqueueWQ>:
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
}

void enqueueWQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    16d4:	cf 93       	push	r28
    16d6:	df 93       	push	r29
    16d8:	ea 01       	movw	r28, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    16da:	28 81       	ld	r18, Y
    16dc:	39 81       	ldd	r19, Y+1	; 0x01
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
}

void enqueueWQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    16de:	2f 30       	cpi	r18, 0x0F	; 15
    16e0:	31 05       	cpc	r19, r1
    16e2:	29 f1       	breq	.+74     	; 0x172e <enqueueWQ+0x5a>
        return;
    }

    int i = (*QCount) - 1;
    16e4:	e8 81       	ld	r30, Y
    16e6:	f9 81       	ldd	r31, Y+1	; 0x01
    16e8:	9f 01       	movw	r18, r30
    16ea:	21 50       	subi	r18, 0x01	; 1
    16ec:	31 09       	sbc	r19, r1

    while(i >= 0) {
    16ee:	72 f0       	brmi	.+28     	; 0x170c <enqueueWQ+0x38>
    16f0:	ee 0f       	add	r30, r30
    16f2:	ff 1f       	adc	r31, r31
    16f4:	e6 0f       	add	r30, r22
    16f6:	f7 1f       	adc	r31, r23
    16f8:	db 01       	movw	r26, r22
        Queue[i+1] = Queue[i];
    16fa:	32 91       	ld	r19, -Z
    16fc:	22 91       	ld	r18, -Z
    16fe:	33 83       	std	Z+3, r19	; 0x03
    1700:	22 83       	std	Z+2, r18	; 0x02
        return;
    }

    int i = (*QCount) - 1;

    while(i >= 0) {
    1702:	ea 17       	cp	r30, r26
    1704:	fb 07       	cpc	r31, r27
    1706:	c9 f7       	brne	.-14     	; 0x16fa <enqueueWQ+0x26>
        Queue[i+1] = Queue[i];
        i--;
    1708:	2f ef       	ldi	r18, 0xFF	; 255
    170a:	3f ef       	ldi	r19, 0xFF	; 255
    }

    Queue[i+1] = *p;
    170c:	fc 01       	movw	r30, r24
    170e:	80 81       	ld	r24, Z
    1710:	91 81       	ldd	r25, Z+1	; 0x01
    1712:	2f 5f       	subi	r18, 0xFF	; 255
    1714:	3f 4f       	sbci	r19, 0xFF	; 255
    1716:	22 0f       	add	r18, r18
    1718:	33 1f       	adc	r19, r19
    171a:	fb 01       	movw	r30, r22
    171c:	e2 0f       	add	r30, r18
    171e:	f3 1f       	adc	r31, r19
    1720:	91 83       	std	Z+1, r25	; 0x01
    1722:	80 83       	st	Z, r24
    (*QCount)++;
    1724:	88 81       	ld	r24, Y
    1726:	99 81       	ldd	r25, Y+1	; 0x01
    1728:	01 96       	adiw	r24, 0x01	; 1
    172a:	99 83       	std	Y+1, r25	; 0x01
    172c:	88 83       	st	Y, r24
}
    172e:	df 91       	pop	r29
    1730:	cf 91       	pop	r28
    1732:	08 95       	ret

00001734 <enqueueSQ>:

void enqueueSQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    1734:	cf 92       	push	r12
    1736:	df 92       	push	r13
    1738:	ef 92       	push	r14
    173a:	ff 92       	push	r15
    173c:	0f 93       	push	r16
    173e:	1f 93       	push	r17
    1740:	cf 93       	push	r28
    1742:	df 93       	push	r29

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    1744:	ea 01       	movw	r28, r20
    1746:	28 81       	ld	r18, Y
    1748:	39 81       	ldd	r19, Y+1	; 0x01
    Queue[i+1] = *p;
    (*QCount)++;
}

void enqueueSQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    174a:	2f 30       	cpi	r18, 0x0F	; 15
    174c:	31 05       	cpc	r19, r1
    174e:	09 f4       	brne	.+2      	; 0x1752 <enqueueSQ+0x1e>
    1750:	59 c0       	rjmp	.+178    	; 0x1804 <enqueueSQ+0xd0>
        return;
    }

    int i = (*QCount) - 1;
    1752:	a8 81       	ld	r26, Y
    1754:	b9 81       	ldd	r27, Y+1	; 0x01
    1756:	11 97       	sbiw	r26, 0x01	; 1

    volatile PD *new = *p;
    1758:	fc 01       	movw	r30, r24
    175a:	c0 80       	ld	r12, Z
    175c:	d1 80       	ldd	r13, Z+1	; 0x01

    volatile PD *temp = Queue[i];
    175e:	fd 01       	movw	r30, r26
    1760:	ee 0f       	add	r30, r30
    1762:	ff 1f       	adc	r31, r31
    1764:	eb 01       	movw	r28, r22
    1766:	ce 0f       	add	r28, r30
    1768:	df 1f       	adc	r29, r31
    176a:	28 81       	ld	r18, Y
    176c:	39 81       	ldd	r19, Y+1	; 0x01

    while(i >= 0 && ((new->wakeTickOverflow > temp->wakeTickOverflow) || ((new->wakeTickOverflow >= temp->wakeTickOverflow) && (new->wakeTick >= temp->wakeTick)))) {
    176e:	bb 23       	and	r27, r27
    1770:	cc f1       	brlt	.+114    	; 0x17e4 <enqueueSQ+0xb0>
    1772:	fe 01       	movw	r30, r28
    1774:	76 01       	movw	r14, r12
    1776:	c0 ef       	ldi	r28, 0xF0	; 240
    1778:	ec 1a       	sub	r14, r28
    177a:	ce ef       	ldi	r28, 0xFE	; 254
    177c:	fc 0a       	sbc	r15, r28
    177e:	de ee       	ldi	r29, 0xEE	; 238
    1780:	cd 1a       	sub	r12, r29
    1782:	de ef       	ldi	r29, 0xFE	; 254
    1784:	dd 0a       	sbc	r13, r29
    1786:	0b c0       	rjmp	.+22     	; 0x179e <enqueueSQ+0x6a>
        Queue[i+1] = Queue[i];
    1788:	20 81       	ld	r18, Z
    178a:	31 81       	ldd	r19, Z+1	; 0x01
    178c:	33 83       	std	Z+3, r19	; 0x03
    178e:	22 83       	std	Z+2, r18	; 0x02
        i--;
    1790:	11 97       	sbiw	r26, 0x01	; 1
        temp = Queue[i];
    1792:	32 91       	ld	r19, -Z
    1794:	22 91       	ld	r18, -Z

    volatile PD *new = *p;

    volatile PD *temp = Queue[i];

    while(i >= 0 && ((new->wakeTickOverflow > temp->wakeTickOverflow) || ((new->wakeTickOverflow >= temp->wakeTickOverflow) && (new->wakeTick >= temp->wakeTick)))) {
    1796:	af 3f       	cpi	r26, 0xFF	; 255
    1798:	cf ef       	ldi	r28, 0xFF	; 255
    179a:	bc 07       	cpc	r27, r28
    179c:	19 f1       	breq	.+70     	; 0x17e4 <enqueueSQ+0xb0>
    179e:	e7 01       	movw	r28, r14
    17a0:	08 81       	ld	r16, Y
    17a2:	19 81       	ldd	r17, Y+1	; 0x01
    17a4:	e9 01       	movw	r28, r18
    17a6:	c0 5f       	subi	r28, 0xF0	; 240
    17a8:	de 4f       	sbci	r29, 0xFE	; 254
    17aa:	09 90       	ld	r0, Y+
    17ac:	d8 81       	ld	r29, Y
    17ae:	c0 2d       	mov	r28, r0
    17b0:	c0 17       	cp	r28, r16
    17b2:	d1 07       	cpc	r29, r17
    17b4:	48 f3       	brcs	.-46     	; 0x1788 <enqueueSQ+0x54>
    17b6:	e7 01       	movw	r28, r14
    17b8:	08 81       	ld	r16, Y
    17ba:	19 81       	ldd	r17, Y+1	; 0x01
    17bc:	e9 01       	movw	r28, r18
    17be:	c0 5f       	subi	r28, 0xF0	; 240
    17c0:	de 4f       	sbci	r29, 0xFE	; 254
    17c2:	09 90       	ld	r0, Y+
    17c4:	d8 81       	ld	r29, Y
    17c6:	c0 2d       	mov	r28, r0
    17c8:	0c 17       	cp	r16, r28
    17ca:	1d 07       	cpc	r17, r29
    17cc:	58 f0       	brcs	.+22     	; 0x17e4 <enqueueSQ+0xb0>
    17ce:	e6 01       	movw	r28, r12
    17d0:	08 81       	ld	r16, Y
    17d2:	19 81       	ldd	r17, Y+1	; 0x01
    17d4:	2e 5e       	subi	r18, 0xEE	; 238
    17d6:	3e 4f       	sbci	r19, 0xFE	; 254
    17d8:	e9 01       	movw	r28, r18
    17da:	28 81       	ld	r18, Y
    17dc:	39 81       	ldd	r19, Y+1	; 0x01
    17de:	02 17       	cp	r16, r18
    17e0:	13 07       	cpc	r17, r19
    17e2:	90 f6       	brcc	.-92     	; 0x1788 <enqueueSQ+0x54>
        Queue[i+1] = Queue[i];
        i--;
        temp = Queue[i];
    }

    Queue[i+1] = *p;
    17e4:	fc 01       	movw	r30, r24
    17e6:	80 81       	ld	r24, Z
    17e8:	91 81       	ldd	r25, Z+1	; 0x01
    17ea:	11 96       	adiw	r26, 0x01	; 1
    17ec:	aa 0f       	add	r26, r26
    17ee:	bb 1f       	adc	r27, r27
    17f0:	a6 0f       	add	r26, r22
    17f2:	b7 1f       	adc	r27, r23
    17f4:	8d 93       	st	X+, r24
    17f6:	9c 93       	st	X, r25
    (*QCount)++;
    17f8:	ea 01       	movw	r28, r20
    17fa:	88 81       	ld	r24, Y
    17fc:	99 81       	ldd	r25, Y+1	; 0x01
    17fe:	01 96       	adiw	r24, 0x01	; 1
    1800:	99 83       	std	Y+1, r25	; 0x01
    1802:	88 83       	st	Y, r24
}
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	1f 91       	pop	r17
    180a:	0f 91       	pop	r16
    180c:	ff 90       	pop	r15
    180e:	ef 90       	pop	r14
    1810:	df 90       	pop	r13
    1812:	cf 90       	pop	r12
    1814:	08 95       	ret

00001816 <enqueueRQ>:

/*
 *  Insert into the queue sorted by priority
 */
void enqueueRQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    1816:	cf 92       	push	r12
    1818:	df 92       	push	r13
    181a:	ef 92       	push	r14
    181c:	ff 92       	push	r15
    181e:	0f 93       	push	r16
    1820:	1f 93       	push	r17
    1822:	cf 93       	push	r28
    1824:	df 93       	push	r29
    1826:	6a 01       	movw	r12, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    1828:	ea 01       	movw	r28, r20
    182a:	28 81       	ld	r18, Y
    182c:	39 81       	ldd	r19, Y+1	; 0x01

/*
 *  Insert into the queue sorted by priority
 */
void enqueueRQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    182e:	2f 30       	cpi	r18, 0x0F	; 15
    1830:	31 05       	cpc	r19, r1
    1832:	09 f4       	brne	.+2      	; 0x1836 <enqueueRQ+0x20>
    1834:	4a c0       	rjmp	.+148    	; 0x18ca <enqueueRQ+0xb4>
        return;
    }

    int i = (*QCount) - 1;
    1836:	28 81       	ld	r18, Y
    1838:	39 81       	ldd	r19, Y+1	; 0x01
    183a:	21 50       	subi	r18, 0x01	; 1
    183c:	31 09       	sbc	r19, r1

    volatile PD *new = *p;
    183e:	fc 01       	movw	r30, r24
    1840:	00 81       	ld	r16, Z
    1842:	11 81       	ldd	r17, Z+1	; 0x01

    volatile PD *temp = Queue[i];
    1844:	f9 01       	movw	r30, r18
    1846:	ee 0f       	add	r30, r30
    1848:	ff 1f       	adc	r31, r31
    184a:	db 01       	movw	r26, r22
    184c:	ae 0f       	add	r26, r30
    184e:	bf 1f       	adc	r27, r31
    1850:	4d 91       	ld	r20, X+
    1852:	5c 91       	ld	r21, X

    while(i >= 0 && (new->inheritedPy >= temp->inheritedPy)) {
    1854:	33 23       	and	r19, r19
    1856:	3c f1       	brlt	.+78     	; 0x18a6 <enqueueRQ+0x90>
    1858:	d8 01       	movw	r26, r16
    185a:	a9 5f       	subi	r26, 0xF9	; 249
    185c:	be 4f       	sbci	r27, 0xFE	; 254
    185e:	ed 90       	ld	r14, X+
    1860:	fc 90       	ld	r15, X
    1862:	da 01       	movw	r26, r20
    1864:	a9 5f       	subi	r26, 0xF9	; 249
    1866:	be 4f       	sbci	r27, 0xFE	; 254
    1868:	4d 91       	ld	r20, X+
    186a:	5c 91       	ld	r21, X
    186c:	e4 16       	cp	r14, r20
    186e:	f5 06       	cpc	r15, r21
    1870:	d0 f0       	brcs	.+52     	; 0x18a6 <enqueueRQ+0x90>
    1872:	e6 0f       	add	r30, r22
    1874:	f7 1f       	adc	r31, r23
    1876:	09 5f       	subi	r16, 0xF9	; 249
    1878:	1e 4f       	sbci	r17, 0xFE	; 254
        Queue[i+1] = Queue[i];
    187a:	a0 81       	ld	r26, Z
    187c:	b1 81       	ldd	r27, Z+1	; 0x01
    187e:	b3 83       	std	Z+3, r27	; 0x03
    1880:	a2 83       	std	Z+2, r26	; 0x02
        i--;
    1882:	21 50       	subi	r18, 0x01	; 1
    1884:	31 09       	sbc	r19, r1
        temp = Queue[i];
    1886:	b2 91       	ld	r27, -Z
    1888:	a2 91       	ld	r26, -Z

    volatile PD *new = *p;

    volatile PD *temp = Queue[i];

    while(i >= 0 && (new->inheritedPy >= temp->inheritedPy)) {
    188a:	2f 3f       	cpi	r18, 0xFF	; 255
    188c:	4f ef       	ldi	r20, 0xFF	; 255
    188e:	34 07       	cpc	r19, r20
    1890:	51 f0       	breq	.+20     	; 0x18a6 <enqueueRQ+0x90>
    1892:	e8 01       	movw	r28, r16
    1894:	e8 80       	ld	r14, Y
    1896:	f9 80       	ldd	r15, Y+1	; 0x01
    1898:	a9 5f       	subi	r26, 0xF9	; 249
    189a:	be 4f       	sbci	r27, 0xFE	; 254
    189c:	4d 91       	ld	r20, X+
    189e:	5c 91       	ld	r21, X
    18a0:	e4 16       	cp	r14, r20
    18a2:	f5 06       	cpc	r15, r21
    18a4:	50 f7       	brcc	.-44     	; 0x187a <enqueueRQ+0x64>
        Queue[i+1] = Queue[i];
        i--;
        temp = Queue[i];
    }

    Queue[i+1] = *p;
    18a6:	fc 01       	movw	r30, r24
    18a8:	80 81       	ld	r24, Z
    18aa:	91 81       	ldd	r25, Z+1	; 0x01
    18ac:	2f 5f       	subi	r18, 0xFF	; 255
    18ae:	3f 4f       	sbci	r19, 0xFF	; 255
    18b0:	22 0f       	add	r18, r18
    18b2:	33 1f       	adc	r19, r19
    18b4:	fb 01       	movw	r30, r22
    18b6:	e2 0f       	add	r30, r18
    18b8:	f3 1f       	adc	r31, r19
    18ba:	91 83       	std	Z+1, r25	; 0x01
    18bc:	80 83       	st	Z, r24
    (*QCount)++;
    18be:	e6 01       	movw	r28, r12
    18c0:	88 81       	ld	r24, Y
    18c2:	99 81       	ldd	r25, Y+1	; 0x01
    18c4:	01 96       	adiw	r24, 0x01	; 1
    18c6:	99 83       	std	Y+1, r25	; 0x01
    18c8:	88 83       	st	Y, r24
}
    18ca:	df 91       	pop	r29
    18cc:	cf 91       	pop	r28
    18ce:	1f 91       	pop	r17
    18d0:	0f 91       	pop	r16
    18d2:	ff 90       	pop	r15
    18d4:	ef 90       	pop	r14
    18d6:	df 90       	pop	r13
    18d8:	cf 90       	pop	r12
    18da:	08 95       	ret

000018dc <dequeueWQ>:

/*
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {
    18dc:	0f 93       	push	r16
    18de:	1f 93       	push	r17
    18e0:	cf 93       	push	r28
    18e2:	df 93       	push	r29

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    18e4:	eb 01       	movw	r28, r22
    18e6:	28 81       	ld	r18, Y
    18e8:	39 81       	ldd	r19, Y+1	; 0x01
/*
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {

    if(isEmpty(QCount)) {
    18ea:	23 2b       	or	r18, r19
    18ec:	09 f4       	brne	.+2      	; 0x18f0 <dequeueWQ+0x14>
    18ee:	54 c0       	rjmp	.+168    	; 0x1998 <dequeueWQ+0xbc>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
    18f0:	28 81       	ld	r18, Y
    18f2:	39 81       	ldd	r19, Y+1	; 0x01
    18f4:	21 50       	subi	r18, 0x01	; 1
    18f6:	31 09       	sbc	r19, r1
    18f8:	0a f4       	brpl	.+2      	; 0x18fc <dequeueWQ+0x20>
    18fa:	51 c0       	rjmp	.+162    	; 0x199e <dequeueWQ+0xc2>
        if(Queue[i]->m == m){
    18fc:	e9 01       	movw	r28, r18
    18fe:	cc 0f       	add	r28, r28
    1900:	dd 1f       	adc	r29, r29
    1902:	fc 01       	movw	r30, r24
    1904:	ec 0f       	add	r30, r28
    1906:	fd 1f       	adc	r31, r29
    1908:	a0 81       	ld	r26, Z
    190a:	b1 81       	ldd	r27, Z+1	; 0x01
    190c:	fd 01       	movw	r30, r26
    190e:	ec 5e       	subi	r30, 0xEC	; 236
    1910:	fe 4f       	sbci	r31, 0xFE	; 254
    1912:	01 90       	ld	r0, Z+
    1914:	f0 81       	ld	r31, Z
    1916:	e0 2d       	mov	r30, r0
    1918:	e4 17       	cp	r30, r20
    191a:	f5 07       	cpc	r31, r21
    191c:	81 f4       	brne	.+32     	; 0x193e <dequeueWQ+0x62>
    191e:	0a c0       	rjmp	.+20     	; 0x1934 <dequeueWQ+0x58>
    1920:	ba 91       	ld	r27, -Y
    1922:	aa 91       	ld	r26, -Y
    1924:	fd 01       	movw	r30, r26
    1926:	ec 5e       	subi	r30, 0xEC	; 236
    1928:	fe 4f       	sbci	r31, 0xFE	; 254
    192a:	00 81       	ld	r16, Z
    192c:	11 81       	ldd	r17, Z+1	; 0x01
    192e:	04 17       	cp	r16, r20
    1930:	15 07       	cpc	r17, r21
    1932:	39 f4       	brne	.+14     	; 0x1942 <dequeueWQ+0x66>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
    1934:	10 97       	sbiw	r26, 0x00	; 0
    1936:	59 f4       	brne	.+22     	; 0x194e <dequeueWQ+0x72>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	32 c0       	rjmp	.+100    	; 0x19a2 <dequeueWQ+0xc6>
    193e:	c8 0f       	add	r28, r24
    1940:	d9 1f       	adc	r29, r25
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
    1942:	21 50       	subi	r18, 0x01	; 1
    1944:	31 09       	sbc	r19, r1
    1946:	60 f7       	brcc	.-40     	; 0x1920 <dequeueWQ+0x44>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	2a c0       	rjmp	.+84     	; 0x19a2 <dequeueWQ+0xc6>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i<(*QCount)-1) {
    194e:	eb 01       	movw	r28, r22
    1950:	48 81       	ld	r20, Y
    1952:	59 81       	ldd	r21, Y+1	; 0x01
    1954:	41 50       	subi	r20, 0x01	; 1
    1956:	51 09       	sbc	r21, r1
    1958:	24 17       	cp	r18, r20
    195a:	35 07       	cpc	r19, r21
    195c:	a4 f4       	brge	.+40     	; 0x1986 <dequeueWQ+0xaa>
    195e:	a9 01       	movw	r20, r18
    1960:	44 0f       	add	r20, r20
    1962:	55 1f       	adc	r21, r21
    1964:	fc 01       	movw	r30, r24
    1966:	e4 0f       	add	r30, r20
    1968:	f5 1f       	adc	r31, r21
            Queue[i] = Queue[i+1];
    196a:	82 81       	ldd	r24, Z+2	; 0x02
    196c:	93 81       	ldd	r25, Z+3	; 0x03
    196e:	81 93       	st	Z+, r24
    1970:	91 93       	st	Z+, r25
            i++;
    1972:	2f 5f       	subi	r18, 0xFF	; 255
    1974:	3f 4f       	sbci	r19, 0xFF	; 255
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i<(*QCount)-1) {
    1976:	eb 01       	movw	r28, r22
    1978:	48 81       	ld	r20, Y
    197a:	59 81       	ldd	r21, Y+1	; 0x01
    197c:	41 50       	subi	r20, 0x01	; 1
    197e:	51 09       	sbc	r21, r1
    1980:	24 17       	cp	r18, r20
    1982:	35 07       	cpc	r19, r21
    1984:	94 f3       	brlt	.-28     	; 0x196a <dequeueWQ+0x8e>
            Queue[i] = Queue[i+1];
            i++;
        }
        (*QCount)--;
    1986:	fb 01       	movw	r30, r22
    1988:	80 81       	ld	r24, Z
    198a:	91 81       	ldd	r25, Z+1	; 0x01
    198c:	01 97       	sbiw	r24, 0x01	; 1
    198e:	91 83       	std	Z+1, r25	; 0x01
    1990:	80 83       	st	Z, r24

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
        if(Queue[i]->m == m){
            result = Queue[i];
    1992:	8a 2f       	mov	r24, r26
    1994:	9b 2f       	mov	r25, r27
    1996:	05 c0       	rjmp	.+10     	; 0x19a2 <dequeueWQ+0xc6>
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {

    if(isEmpty(QCount)) {
        return NULL;
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <dequeueWQ+0xc6>
            i++;
        }
        (*QCount)--;
    }

    return result;
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	90 e0       	ldi	r25, 0x00	; 0
}
    19a2:	df 91       	pop	r29
    19a4:	cf 91       	pop	r28
    19a6:	1f 91       	pop	r17
    19a8:	0f 91       	pop	r16
    19aa:	08 95       	ret

000019ac <dequeueRQ>:

/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {
    19ac:	cf 93       	push	r28
    19ae:	df 93       	push	r29
    19b0:	eb 01       	movw	r28, r22

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    19b2:	28 81       	ld	r18, Y
    19b4:	39 81       	ldd	r19, Y+1	; 0x01
/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
    19b6:	23 2b       	or	r18, r19
    19b8:	09 f4       	brne	.+2      	; 0x19bc <dequeueRQ+0x10>
    19ba:	48 c0       	rjmp	.+144    	; 0x1a4c <dequeueRQ+0xa0>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
    19bc:	e8 81       	ld	r30, Y
    19be:	f9 81       	ldd	r31, Y+1	; 0x01
    19c0:	9f 01       	movw	r18, r30
    19c2:	21 50       	subi	r18, 0x01	; 1
    19c4:	31 09       	sbc	r19, r1
    19c6:	0a f4       	brpl	.+2      	; 0x19ca <dequeueRQ+0x1e>
    19c8:	44 c0       	rjmp	.+136    	; 0x1a52 <dequeueRQ+0xa6>
    19ca:	ee 0f       	add	r30, r30
    19cc:	ff 1f       	adc	r31, r31
    19ce:	e8 0f       	add	r30, r24
    19d0:	f9 1f       	adc	r31, r25
        if((Queue[i]->suspended == 0) && (Queue[i]->state == READY)) {
    19d2:	52 91       	ld	r21, -Z
    19d4:	42 91       	ld	r20, -Z
    19d6:	da 01       	movw	r26, r20
    19d8:	a6 5e       	subi	r26, 0xE6	; 230
    19da:	be 4f       	sbci	r27, 0xFE	; 254
    19dc:	6d 91       	ld	r22, X+
    19de:	7c 91       	ld	r23, X
    19e0:	11 97       	sbiw	r26, 0x01	; 1
    19e2:	67 2b       	or	r22, r23
    19e4:	59 f4       	brne	.+22     	; 0x19fc <dequeueRQ+0x50>
    19e6:	56 97       	sbiw	r26, 0x16	; 22
    19e8:	6c 91       	ld	r22, X
    19ea:	61 30       	cpi	r22, 0x01	; 1
    19ec:	39 f4       	brne	.+14     	; 0x19fc <dequeueRQ+0x50>
    19ee:	f9 01       	movw	r30, r18
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
    19f0:	41 15       	cp	r20, r1
    19f2:	51 05       	cpc	r21, r1
    19f4:	49 f4       	brne	.+18     	; 0x1a08 <dequeueRQ+0x5c>
            i++;
        }
        (*QCount)--;
    }

    return result;
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	2d c0       	rjmp	.+90     	; 0x1a56 <dequeueRQ+0xaa>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
    19fc:	21 50       	subi	r18, 0x01	; 1
    19fe:	31 09       	sbc	r19, r1
    1a00:	40 f7       	brcc	.-48     	; 0x19d2 <dequeueRQ+0x26>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	27 c0       	rjmp	.+78     	; 0x1a56 <dequeueRQ+0xaa>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i < (*QCount)-1) {
    1a08:	68 81       	ld	r22, Y
    1a0a:	79 81       	ldd	r23, Y+1	; 0x01
    1a0c:	61 50       	subi	r22, 0x01	; 1
    1a0e:	71 09       	sbc	r23, r1
    1a10:	26 17       	cp	r18, r22
    1a12:	37 07       	cpc	r19, r23
    1a14:	9c f4       	brge	.+38     	; 0x1a3c <dequeueRQ+0x90>
    1a16:	ee 0f       	add	r30, r30
    1a18:	ff 1f       	adc	r31, r31
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	ae 0f       	add	r26, r30
    1a1e:	bf 1f       	adc	r27, r31
            Queue[i] = Queue[i+1];
    1a20:	12 96       	adiw	r26, 0x02	; 2
    1a22:	8d 91       	ld	r24, X+
    1a24:	9c 91       	ld	r25, X
    1a26:	13 97       	sbiw	r26, 0x03	; 3
    1a28:	8d 93       	st	X+, r24
    1a2a:	9d 93       	st	X+, r25
            i++;
    1a2c:	2f 5f       	subi	r18, 0xFF	; 255
    1a2e:	3f 4f       	sbci	r19, 0xFF	; 255
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i < (*QCount)-1) {
    1a30:	e8 81       	ld	r30, Y
    1a32:	f9 81       	ldd	r31, Y+1	; 0x01
    1a34:	31 97       	sbiw	r30, 0x01	; 1
    1a36:	2e 17       	cp	r18, r30
    1a38:	3f 07       	cpc	r19, r31
    1a3a:	94 f3       	brlt	.-28     	; 0x1a20 <dequeueRQ+0x74>
            Queue[i] = Queue[i+1];
            i++;
        }
        (*QCount)--;
    1a3c:	88 81       	ld	r24, Y
    1a3e:	99 81       	ldd	r25, Y+1	; 0x01
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	99 83       	std	Y+1, r25	; 0x01
    1a44:	88 83       	st	Y, r24
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
        if((Queue[i]->suspended == 0) && (Queue[i]->state == READY)) {
    1a46:	84 2f       	mov	r24, r20
    1a48:	95 2f       	mov	r25, r21
    1a4a:	05 c0       	rjmp	.+10     	; 0x1a56 <dequeueRQ+0xaa>
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
        return NULL;
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <dequeueRQ+0xaa>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	90 e0       	ldi	r25, 0x00	; 0
}
    1a56:	df 91       	pop	r29
    1a58:	cf 91       	pop	r28
    1a5a:	08 95       	ret

00001a5c <dequeue>:

/*
 *  Return the first element of the queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
    1a5c:	db 01       	movw	r26, r22

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    1a5e:	2d 91       	ld	r18, X+
    1a60:	3c 91       	ld	r19, X
    1a62:	11 97       	sbiw	r26, 0x01	; 1
/*
 *  Return the first element of the queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
    1a64:	23 2b       	or	r18, r19
    1a66:	a9 f0       	breq	.+42     	; 0x1a92 <dequeue+0x36>
        return;
    }

    volatile PD *result = (Queue[(*QCount)-1]);
    1a68:	2d 91       	ld	r18, X+
    1a6a:	3c 91       	ld	r19, X
    1a6c:	11 97       	sbiw	r26, 0x01	; 1
    1a6e:	f9 01       	movw	r30, r18
    1a70:	e1 50       	subi	r30, 0x01	; 1
    1a72:	f0 48       	sbci	r31, 0x80	; 128
    1a74:	ee 0f       	add	r30, r30
    1a76:	ff 1f       	adc	r31, r31
    1a78:	e8 0f       	add	r30, r24
    1a7a:	f9 1f       	adc	r31, r25
    1a7c:	80 81       	ld	r24, Z
    1a7e:	91 81       	ldd	r25, Z+1	; 0x01
    (*QCount)--;
    1a80:	2d 91       	ld	r18, X+
    1a82:	3c 91       	ld	r19, X
    1a84:	11 97       	sbiw	r26, 0x01	; 1
    1a86:	21 50       	subi	r18, 0x01	; 1
    1a88:	31 09       	sbc	r19, r1
    1a8a:	11 96       	adiw	r26, 0x01	; 1
    1a8c:	3c 93       	st	X, r19
    1a8e:	2e 93       	st	-X, r18
    1a90:	08 95       	ret

    return result;
}
    1a92:	08 95       	ret

00001a94 <_get_status>:
	}

	wh = (16 - weight) * 100;
	wh /= 16;
	return wh;
}
    1a94:	2d 98       	cbi	0x05, 5	; 5
    1a96:	8f ef       	ldi	r24, 0xFF	; 255
    1a98:	04 d1       	rcall	.+520    	; 0x1ca2 <SPI_Write_Byte>
    1a9a:	2d 9a       	sbi	0x05, 5	; 5
    1a9c:	08 95       	ret

00001a9e <_set_register>:
    1a9e:	0f 93       	push	r16
    1aa0:	1f 93       	push	r17
    1aa2:	cf 93       	push	r28
    1aa4:	df 93       	push	r29
    1aa6:	8b 01       	movw	r16, r22
    1aa8:	d4 2f       	mov	r29, r20
    1aaa:	2d 98       	cbi	0x05, 5	; 5
    1aac:	8f 71       	andi	r24, 0x1F	; 31
    1aae:	80 62       	ori	r24, 0x20	; 32
    1ab0:	f8 d0       	rcall	.+496    	; 0x1ca2 <SPI_Write_Byte>
    1ab2:	c8 2f       	mov	r28, r24
    1ab4:	6d 2f       	mov	r22, r29
    1ab6:	c8 01       	movw	r24, r16
    1ab8:	e1 d0       	rcall	.+450    	; 0x1c7c <SPI_Write_Block>
    1aba:	2d 9a       	sbi	0x05, 5	; 5
    1abc:	8c 2f       	mov	r24, r28
    1abe:	df 91       	pop	r29
    1ac0:	cf 91       	pop	r28
    1ac2:	1f 91       	pop	r17
    1ac4:	0f 91       	pop	r16
    1ac6:	08 95       	ret

00001ac8 <_get_register>:
    1ac8:	0f 93       	push	r16
    1aca:	1f 93       	push	r17
    1acc:	cf 93       	push	r28
    1ace:	df 93       	push	r29
    1ad0:	eb 01       	movw	r28, r22
    1ad2:	14 2f       	mov	r17, r20
    1ad4:	44 23       	and	r20, r20
    1ad6:	69 f0       	breq	.+26     	; 0x1af2 <_get_register+0x2a>
    1ad8:	fb 01       	movw	r30, r22
    1ada:	2f ef       	ldi	r18, 0xFF	; 255
    1adc:	24 0f       	add	r18, r20
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	2f 5f       	subi	r18, 0xFF	; 255
    1ae2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae4:	26 0f       	add	r18, r22
    1ae6:	37 1f       	adc	r19, r23
    1ae8:	9f ef       	ldi	r25, 0xFF	; 255
    1aea:	91 93       	st	Z+, r25
    1aec:	e2 17       	cp	r30, r18
    1aee:	f3 07       	cpc	r31, r19
    1af0:	e1 f7       	brne	.-8      	; 0x1aea <_get_register+0x22>
    1af2:	2d 98       	cbi	0x05, 5	; 5
    1af4:	8f 71       	andi	r24, 0x1F	; 31
    1af6:	d5 d0       	rcall	.+426    	; 0x1ca2 <SPI_Write_Byte>
    1af8:	08 2f       	mov	r16, r24
    1afa:	41 2f       	mov	r20, r17
    1afc:	be 01       	movw	r22, r28
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	a5 d0       	rcall	.+330    	; 0x1c4e <SPI_ReadWrite_Block>
    1b04:	2d 9a       	sbi	0x05, 5	; 5
    1b06:	80 2f       	mov	r24, r16
    1b08:	df 91       	pop	r29
    1b0a:	cf 91       	pop	r28
    1b0c:	1f 91       	pop	r17
    1b0e:	0f 91       	pop	r16
    1b10:	08 95       	ret

00001b12 <_set_rx_mode>:
    1b12:	cf 93       	push	r28
    1b14:	df 93       	push	r29
    1b16:	1f 92       	push	r1
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
    1b1c:	41 e0       	ldi	r20, 0x01	; 1
    1b1e:	be 01       	movw	r22, r28
    1b20:	6f 5f       	subi	r22, 0xFF	; 255
    1b22:	7f 4f       	sbci	r23, 0xFF	; 255
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	d0 df       	rcall	.-96     	; 0x1ac8 <_get_register>
    1b28:	89 81       	ldd	r24, Y+1	; 0x01
    1b2a:	80 fd       	sbrc	r24, 0
    1b2c:	10 c0       	rjmp	.+32     	; 0x1b4e <_set_rx_mode+0x3c>
    1b2e:	81 60       	ori	r24, 0x01	; 1
    1b30:	89 83       	std	Y+1, r24	; 0x01
    1b32:	41 e0       	ldi	r20, 0x01	; 1
    1b34:	be 01       	movw	r22, r28
    1b36:	6f 5f       	subi	r22, 0xFF	; 255
    1b38:	7f 4f       	sbci	r23, 0xFF	; 255
    1b3a:	80 e0       	ldi	r24, 0x00	; 0
    1b3c:	b0 df       	rcall	.-160    	; 0x1a9e <_set_register>
    1b3e:	85 e1       	ldi	r24, 0x15	; 21
    1b40:	8a 95       	dec	r24
    1b42:	f1 f7       	brne	.-4      	; 0x1b40 <_set_rx_mode+0x2e>
    1b44:	00 c0       	rjmp	.+0      	; 0x1b46 <_set_rx_mode+0x34>
    1b46:	85 e1       	ldi	r24, 0x15	; 21
    1b48:	8a 95       	dec	r24
    1b4a:	f1 f7       	brne	.-4      	; 0x1b48 <_set_rx_mode+0x36>
    1b4c:	00 c0       	rjmp	.+0      	; 0x1b4e <_set_rx_mode+0x3c>
    1b4e:	0f 90       	pop	r0
    1b50:	df 91       	pop	r29
    1b52:	cf 91       	pop	r28
    1b54:	08 95       	ret

00001b56 <_reset_pipe0_address>:
    1b56:	80 91 0a 02 	lds	r24, 0x020A
    1b5a:	88 23       	and	r24, r24
    1b5c:	29 f0       	breq	.+10     	; 0x1b68 <_reset_pipe0_address+0x12>
    1b5e:	45 e0       	ldi	r20, 0x05	; 5
    1b60:	65 e0       	ldi	r22, 0x05	; 5
    1b62:	72 e0       	ldi	r23, 0x02	; 2
    1b64:	8a e0       	ldi	r24, 0x0A	; 10
    1b66:	9b cf       	rjmp	.-202    	; 0x1a9e <_set_register>
    1b68:	08 95       	ret

00001b6a <__vector_1>:

// Interrupt handler
ISR(INT0_vect)
{
    1b6a:	1f 92       	push	r1
    1b6c:	0f 92       	push	r0
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	0f 92       	push	r0
    1b72:	11 24       	eor	r1, r1
    1b74:	0b b6       	in	r0, 0x3b	; 59
    1b76:	0f 92       	push	r0
    1b78:	2f 93       	push	r18
    1b7a:	3f 93       	push	r19
    1b7c:	4f 93       	push	r20
    1b7e:	5f 93       	push	r21
    1b80:	6f 93       	push	r22
    1b82:	7f 93       	push	r23
    1b84:	8f 93       	push	r24
    1b86:	9f 93       	push	r25
    1b88:	af 93       	push	r26
    1b8a:	bf 93       	push	r27
    1b8c:	ef 93       	push	r30
    1b8e:	ff 93       	push	r31
    1b90:	cf 93       	push	r28
    1b92:	df 93       	push	r29
    1b94:	1f 92       	push	r1
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;
    uint8_t pipe_number;

    RADIO_CE_LOW();
    1b9a:	2c 98       	cbi	0x05, 4	; 5

    status = _get_status();
    1b9c:	7b df       	rcall	.-266    	; 0x1a94 <_get_status>
    1b9e:	89 83       	std	Y+1, r24	; 0x01

    if (status & _BV(RX_DR)) {
    1ba0:	86 ff       	sbrs	r24, 6
    1ba2:	04 c0       	rjmp	.+8      	; 0x1bac <__vector_1+0x42>
        pipe_number =  (status & 0xE) >> 1;
    1ba4:	8e 70       	andi	r24, 0x0E	; 14
        radio_rxhandler(pipe_number);
    1ba6:	86 95       	lsr	r24
    1ba8:	0e 94 66 01 	call	0x2cc	; 0x2cc <radio_rxhandler>
    }

    // We can get the TX_DS or the MAX_RT interrupt, but not both.
    if (status & _BV(TX_DS)) {
    1bac:	89 81       	ldd	r24, Y+1	; 0x01
    1bae:	85 ff       	sbrs	r24, 5
    1bb0:	1b c0       	rjmp	.+54     	; 0x1be8 <__vector_1+0x7e>
    	// if there's nothing left to transmit, switch back to receive mode.
        transmit_lock = 0;
    1bb2:	10 92 21 15 	sts	0x1521, r1
        _reset_pipe0_address();
    1bb6:	cf df       	rcall	.-98     	; 0x1b56 <_reset_pipe0_address>
        _set_rx_mode();
    1bb8:	ac df       	rcall	.-168    	; 0x1b12 <_set_rx_mode>

        // indicate in the history that a packet was transmitted successfully by appending a 1.
        tx_history <<= 1;
    1bba:	80 91 03 02 	lds	r24, 0x0203
    1bbe:	90 91 04 02 	lds	r25, 0x0204
    1bc2:	88 0f       	add	r24, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	90 93 04 02 	sts	0x0204, r25
    1bca:	80 93 03 02 	sts	0x0203, r24
        tx_history |= 1;
    1bce:	80 91 03 02 	lds	r24, 0x0203
    1bd2:	90 91 04 02 	lds	r25, 0x0204
    1bd6:	81 60       	ori	r24, 0x01	; 1
    1bd8:	90 93 04 02 	sts	0x0204, r25
    1bdc:	80 93 03 02 	sts	0x0203, r24
        tx_last_status = RADIO_TX_SUCCESS;
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	80 93 02 02 	sts	0x0202, r24
    1be6:	14 c0       	rjmp	.+40     	; 0x1c10 <__vector_1+0xa6>
    } else if (status & _BV(MAX_RT)) {
    1be8:	84 ff       	sbrs	r24, 4
    1bea:	12 c0       	rjmp	.+36     	; 0x1c10 <__vector_1+0xa6>
        // enable SPI
       // RADIO_CSN_LOW();


        // flush the failed packet (it stays in the Tx FIFO; we could try to resend it by setting CE high)
        SPI_Write_Byte( FLUSH_TX );
    1bec:	81 ee       	ldi	r24, 0xE1	; 225
    1bee:	59 d0       	rcall	.+178    	; 0x1ca2 <SPI_Write_Byte>

        // resynch SPI
        //RADIO_CSN_HIGH();

        transmit_lock = 0;
    1bf0:	10 92 21 15 	sts	0x1521, r1
        _reset_pipe0_address();
    1bf4:	b0 df       	rcall	.-160    	; 0x1b56 <_reset_pipe0_address>
        _set_rx_mode();
    1bf6:	8d df       	rcall	.-230    	; 0x1b12 <_set_rx_mode>

        // indicate in the history that a packet was dropped by appending a 0.
        tx_history <<= 1;
    1bf8:	80 91 03 02 	lds	r24, 0x0203
    1bfc:	90 91 04 02 	lds	r25, 0x0204
    1c00:	88 0f       	add	r24, r24
    1c02:	99 1f       	adc	r25, r25
    1c04:	90 93 04 02 	sts	0x0204, r25
    1c08:	80 93 03 02 	sts	0x0203, r24
        tx_last_status = RADIO_TX_MAX_RT;
    1c0c:	10 92 02 02 	sts	0x0202, r1
    }

    // clear the interrupt flags.
	status = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
    1c10:	80 e7       	ldi	r24, 0x70	; 112
    1c12:	89 83       	std	Y+1, r24	; 0x01
	_set_register(STATUS, &status, 1);
    1c14:	41 e0       	ldi	r20, 0x01	; 1
    1c16:	be 01       	movw	r22, r28
    1c18:	6f 5f       	subi	r22, 0xFF	; 255
    1c1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c1c:	87 e0       	ldi	r24, 0x07	; 7
    1c1e:	3f df       	rcall	.-386    	; 0x1a9e <_set_register>

    RADIO_CE_HIGH();
    1c20:	2c 9a       	sbi	0x05, 4	; 5
}
    1c22:	0f 90       	pop	r0
    1c24:	df 91       	pop	r29
    1c26:	cf 91       	pop	r28
    1c28:	ff 91       	pop	r31
    1c2a:	ef 91       	pop	r30
    1c2c:	bf 91       	pop	r27
    1c2e:	af 91       	pop	r26
    1c30:	9f 91       	pop	r25
    1c32:	8f 91       	pop	r24
    1c34:	7f 91       	pop	r23
    1c36:	6f 91       	pop	r22
    1c38:	5f 91       	pop	r21
    1c3a:	4f 91       	pop	r20
    1c3c:	3f 91       	pop	r19
    1c3e:	2f 91       	pop	r18
    1c40:	0f 90       	pop	r0
    1c42:	0b be       	out	0x3b, r0	; 59
    1c44:	0f 90       	pop	r0
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	0f 90       	pop	r0
    1c4a:	1f 90       	pop	r1
    1c4c:	18 95       	reti

00001c4e <SPI_ReadWrite_Block>:
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1c4e:	44 23       	and	r20, r20
    1c50:	a1 f0       	breq	.+40     	; 0x1c7a <SPI_ReadWrite_Block+0x2c>
    1c52:	fc 01       	movw	r30, r24
    1c54:	a6 2f       	mov	r26, r22
    1c56:	b7 2f       	mov	r27, r23
    1c58:	41 50       	subi	r20, 0x01	; 1
    1c5a:	24 2f       	mov	r18, r20
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	2f 5f       	subi	r18, 0xFF	; 255
    1c60:	3f 4f       	sbci	r19, 0xFF	; 255
    1c62:	28 0f       	add	r18, r24
    1c64:	39 1f       	adc	r19, r25
          SPDR = data[i];
    1c66:	91 91       	ld	r25, Z+
    1c68:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1c6a:	0d b4       	in	r0, 0x2d	; 45
    1c6c:	07 fe       	sbrs	r0, 7
    1c6e:	fd cf       	rjmp	.-6      	; 0x1c6a <SPI_ReadWrite_Block+0x1c>
          buffer[i] = SPDR;
    1c70:	9e b5       	in	r25, 0x2e	; 46
    1c72:	9d 93       	st	X+, r25
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1c74:	e2 17       	cp	r30, r18
    1c76:	f3 07       	cpc	r31, r19
    1c78:	b1 f7       	brne	.-20     	; 0x1c66 <SPI_ReadWrite_Block+0x18>
    1c7a:	08 95       	ret

00001c7c <SPI_Write_Block>:
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1c7c:	66 23       	and	r22, r22
    1c7e:	81 f0       	breq	.+32     	; 0x1ca0 <SPI_Write_Block+0x24>
    1c80:	fc 01       	movw	r30, r24
    1c82:	61 50       	subi	r22, 0x01	; 1
    1c84:	26 2f       	mov	r18, r22
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	2f 5f       	subi	r18, 0xFF	; 255
    1c8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c8c:	28 0f       	add	r18, r24
    1c8e:	39 1f       	adc	r19, r25
          SPDR = data[i];
    1c90:	91 91       	ld	r25, Z+
    1c92:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1c94:	0d b4       	in	r0, 0x2d	; 45
    1c96:	07 fe       	sbrs	r0, 7
    1c98:	fd cf       	rjmp	.-6      	; 0x1c94 <SPI_Write_Block+0x18>
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1c9a:	e2 17       	cp	r30, r18
    1c9c:	f3 07       	cpc	r31, r19
    1c9e:	c1 f7       	brne	.-16     	; 0x1c90 <SPI_Write_Block+0x14>
    1ca0:	08 95       	ret

00001ca2 <SPI_Write_Byte>:
    }
}

uint8_t SPI_Write_Byte(uint8_t byte)
{
    SPDR = byte;
    1ca2:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
    1ca4:	0d b4       	in	r0, 0x2d	; 45
    1ca6:	07 fe       	sbrs	r0, 7
    1ca8:	fd cf       	rjmp	.-6      	; 0x1ca4 <SPI_Write_Byte+0x2>
    return SPDR;
    1caa:	8e b5       	in	r24, 0x2e	; 46
}
    1cac:	08 95       	ret

00001cae <Roomba_Init>:
		return;
	}

	state = newState;
	_delay_ms(20);
}
    1cae:	3d 9a       	sbi	0x07, 5	; 7
    1cb0:	45 98       	cbi	0x08, 5	; 8
    1cb2:	2f ef       	ldi	r18, 0xFF	; 255
    1cb4:	39 e6       	ldi	r19, 0x69	; 105
    1cb6:	88 e1       	ldi	r24, 0x18	; 24
    1cb8:	21 50       	subi	r18, 0x01	; 1
    1cba:	30 40       	sbci	r19, 0x00	; 0
    1cbc:	80 40       	sbci	r24, 0x00	; 0
    1cbe:	e1 f7       	brne	.-8      	; 0x1cb8 <Roomba_Init+0xa>
    1cc0:	00 c0       	rjmp	.+0      	; 0x1cc2 <Roomba_Init+0x14>
    1cc2:	00 00       	nop
    1cc4:	45 9a       	sbi	0x08, 5	; 8
    1cc6:	9f ef       	ldi	r25, 0xFF	; 255
    1cc8:	27 ea       	ldi	r18, 0xA7	; 167
    1cca:	31 e6       	ldi	r19, 0x61	; 97
    1ccc:	91 50       	subi	r25, 0x01	; 1
    1cce:	20 40       	sbci	r18, 0x00	; 0
    1cd0:	30 40       	sbci	r19, 0x00	; 0
    1cd2:	e1 f7       	brne	.-8      	; 0x1ccc <Roomba_Init+0x1e>
    1cd4:	00 c0       	rjmp	.+0      	; 0x1cd6 <Roomba_Init+0x28>
    1cd6:	00 00       	nop
    1cd8:	83 e0       	ldi	r24, 0x03	; 3
    1cda:	45 98       	cbi	0x08, 5	; 8
    1cdc:	9f ef       	ldi	r25, 0xFF	; 255
    1cde:	20 e7       	ldi	r18, 0x70	; 112
    1ce0:	32 e0       	ldi	r19, 0x02	; 2
    1ce2:	91 50       	subi	r25, 0x01	; 1
    1ce4:	20 40       	sbci	r18, 0x00	; 0
    1ce6:	30 40       	sbci	r19, 0x00	; 0
    1ce8:	e1 f7       	brne	.-8      	; 0x1ce2 <Roomba_Init+0x34>
    1cea:	00 c0       	rjmp	.+0      	; 0x1cec <Roomba_Init+0x3e>
    1cec:	00 00       	nop
    1cee:	45 9a       	sbi	0x08, 5	; 8
    1cf0:	9f ef       	ldi	r25, 0xFF	; 255
    1cf2:	20 e7       	ldi	r18, 0x70	; 112
    1cf4:	32 e0       	ldi	r19, 0x02	; 2
    1cf6:	91 50       	subi	r25, 0x01	; 1
    1cf8:	20 40       	sbci	r18, 0x00	; 0
    1cfa:	30 40       	sbci	r19, 0x00	; 0
    1cfc:	e1 f7       	brne	.-8      	; 0x1cf6 <Roomba_Init+0x48>
    1cfe:	00 c0       	rjmp	.+0      	; 0x1d00 <Roomba_Init+0x52>
    1d00:	00 00       	nop
    1d02:	81 50       	subi	r24, 0x01	; 1
    1d04:	51 f7       	brne	.-44     	; 0x1cda <Roomba_Init+0x2c>
    1d06:	45 d0       	rcall	.+138    	; 0x1d92 <uart_init>
    1d08:	60 e0       	ldi	r22, 0x00	; 0
    1d0a:	70 e0       	ldi	r23, 0x00	; 0
    1d0c:	80 e8       	ldi	r24, 0x80	; 128
    1d0e:	61 d0       	rcall	.+194    	; 0x1dd2 <uart_putchar>
    1d10:	8f ef       	ldi	r24, 0xFF	; 255
    1d12:	99 ef       	ldi	r25, 0xF9	; 249
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	81 50       	subi	r24, 0x01	; 1
    1d18:	90 40       	sbci	r25, 0x00	; 0
    1d1a:	20 40       	sbci	r18, 0x00	; 0
    1d1c:	e1 f7       	brne	.-8      	; 0x1d16 <Roomba_Init+0x68>
    1d1e:	00 c0       	rjmp	.+0      	; 0x1d20 <Roomba_Init+0x72>
    1d20:	00 00       	nop
    1d22:	3f ef       	ldi	r19, 0xFF	; 255
    1d24:	81 ee       	ldi	r24, 0xE1	; 225
    1d26:	94 e0       	ldi	r25, 0x04	; 4
    1d28:	31 50       	subi	r19, 0x01	; 1
    1d2a:	80 40       	sbci	r24, 0x00	; 0
    1d2c:	90 40       	sbci	r25, 0x00	; 0
    1d2e:	e1 f7       	brne	.-8      	; 0x1d28 <Roomba_Init+0x7a>
    1d30:	00 c0       	rjmp	.+0      	; 0x1d32 <Roomba_Init+0x84>
    1d32:	00 00       	nop
    1d34:	60 e0       	ldi	r22, 0x00	; 0
    1d36:	70 e0       	ldi	r23, 0x00	; 0
    1d38:	82 e8       	ldi	r24, 0x82	; 130
    1d3a:	4b d0       	rcall	.+150    	; 0x1dd2 <uart_putchar>
    1d3c:	2f ef       	ldi	r18, 0xFF	; 255
    1d3e:	39 ef       	ldi	r19, 0xF9	; 249
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	21 50       	subi	r18, 0x01	; 1
    1d44:	30 40       	sbci	r19, 0x00	; 0
    1d46:	80 40       	sbci	r24, 0x00	; 0
    1d48:	e1 f7       	brne	.-8      	; 0x1d42 <Roomba_Init+0x94>
    1d4a:	00 c0       	rjmp	.+0      	; 0x1d4c <Roomba_Init+0x9e>
    1d4c:	00 00       	nop
    1d4e:	08 95       	ret

00001d50 <Roomba_Drive>:

void Roomba_Drive( int16_t velocity, int16_t radius )
{
    1d50:	0f 93       	push	r16
    1d52:	1f 93       	push	r17
    1d54:	cf 93       	push	r28
    1d56:	df 93       	push	r29
    1d58:	18 2f       	mov	r17, r24
    1d5a:	09 2f       	mov	r16, r25
    1d5c:	c6 2f       	mov	r28, r22
    1d5e:	d7 2f       	mov	r29, r23
	uart_putchar(DRIVE, ROOMBA_UART);
    1d60:	60 e0       	ldi	r22, 0x00	; 0
    1d62:	70 e0       	ldi	r23, 0x00	; 0
    1d64:	89 e8       	ldi	r24, 0x89	; 137
    1d66:	35 d0       	rcall	.+106    	; 0x1dd2 <uart_putchar>
	uart_putchar(HIGH_BYTE(velocity), ROOMBA_UART);
    1d68:	60 e0       	ldi	r22, 0x00	; 0
    1d6a:	70 e0       	ldi	r23, 0x00	; 0
    1d6c:	80 2f       	mov	r24, r16
    1d6e:	31 d0       	rcall	.+98     	; 0x1dd2 <uart_putchar>
	uart_putchar(LOW_BYTE(velocity), ROOMBA_UART);
    1d70:	60 e0       	ldi	r22, 0x00	; 0
    1d72:	70 e0       	ldi	r23, 0x00	; 0
    1d74:	81 2f       	mov	r24, r17
    1d76:	2d d0       	rcall	.+90     	; 0x1dd2 <uart_putchar>
	uart_putchar(HIGH_BYTE(radius), ROOMBA_UART);
    1d78:	60 e0       	ldi	r22, 0x00	; 0
    1d7a:	70 e0       	ldi	r23, 0x00	; 0
    1d7c:	8d 2f       	mov	r24, r29
    1d7e:	29 d0       	rcall	.+82     	; 0x1dd2 <uart_putchar>
	uart_putchar(LOW_BYTE(radius), ROOMBA_UART);
    1d80:	60 e0       	ldi	r22, 0x00	; 0
    1d82:	70 e0       	ldi	r23, 0x00	; 0
    1d84:	8c 2f       	mov	r24, r28
    1d86:	25 d0       	rcall	.+74     	; 0x1dd2 <uart_putchar>
}
    1d88:	df 91       	pop	r29
    1d8a:	cf 91       	pop	r28
    1d8c:	1f 91       	pop	r17
    1d8e:	0f 91       	pop	r16
    1d90:	08 95       	ret

00001d92 <uart_init>:
		uart_putchar(*string, uart);
		string++;
	}
	
	
}
    1d92:	22 e0       	ldi	r18, 0x02	; 2
    1d94:	20 93 c0 00 	sts	0x00C0, r18
    1d98:	98 e9       	ldi	r25, 0x98	; 152
    1d9a:	90 93 c1 00 	sts	0x00C1, r25
    1d9e:	86 e0       	ldi	r24, 0x06	; 6
    1da0:	80 93 c2 00 	sts	0x00C2, r24
    1da4:	20 93 c8 00 	sts	0x00C8, r18
    1da8:	90 93 c9 00 	sts	0x00C9, r25
    1dac:	80 93 ca 00 	sts	0x00CA, r24
    1db0:	8f ec       	ldi	r24, 0xCF	; 207
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	90 93 cd 00 	sts	0x00CD, r25
    1db8:	80 93 cc 00 	sts	0x00CC, r24
    1dbc:	87 e6       	ldi	r24, 0x67	; 103
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	90 93 c5 00 	sts	0x00C5, r25
    1dc4:	80 93 c4 00 	sts	0x00C4, r24
    1dc8:	10 92 68 14 	sts	0x1468, r1
    1dcc:	10 92 67 14 	sts	0x1467, r1
    1dd0:	08 95       	ret

00001dd2 <uart_putchar>:
    1dd2:	67 2b       	or	r22, r23
    1dd4:	41 f0       	breq	.+16     	; 0x1de6 <uart_putchar+0x14>
    1dd6:	e8 ec       	ldi	r30, 0xC8	; 200
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	90 81       	ld	r25, Z
    1ddc:	95 ff       	sbrs	r25, 5
    1dde:	fd cf       	rjmp	.-6      	; 0x1dda <uart_putchar+0x8>
    1de0:	80 93 ce 00 	sts	0x00CE, r24
    1de4:	08 95       	ret
    1de6:	e0 ec       	ldi	r30, 0xC0	; 192
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	90 81       	ld	r25, Z
    1dec:	95 ff       	sbrs	r25, 5
    1dee:	fd cf       	rjmp	.-6      	; 0x1dea <uart_putchar+0x18>
    1df0:	80 93 c6 00 	sts	0x00C6, r24
    1df4:	08 95       	ret

00001df6 <uart_get_byte>:
    1df6:	80 32       	cpi	r24, 0x20	; 32
    1df8:	91 05       	cpc	r25, r1
    1dfa:	64 f4       	brge	.+24     	; 0x1e14 <uart_get_byte+0x1e>
    1dfc:	67 2b       	or	r22, r23
    1dfe:	29 f0       	breq	.+10     	; 0x1e0a <uart_get_byte+0x14>
    1e00:	fc 01       	movw	r30, r24
    1e02:	e7 59       	subi	r30, 0x97	; 151
    1e04:	fb 4e       	sbci	r31, 0xEB	; 235
    1e06:	80 81       	ld	r24, Z
    1e08:	08 95       	ret
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	e7 57       	subi	r30, 0x77	; 119
    1e0e:	fb 4e       	sbci	r31, 0xEB	; 235
    1e10:	80 81       	ld	r24, Z
    1e12:	08 95       	ret
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	08 95       	ret

00001e18 <uart_bytes_received>:
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	19 f4       	brne	.+6      	; 0x1e22 <uart_bytes_received+0xa>
    1e1c:	80 91 67 14 	lds	r24, 0x1467
    1e20:	08 95       	ret
    1e22:	80 91 68 14 	lds	r24, 0x1468
    1e26:	08 95       	ret

00001e28 <uart_reset_receive>:
    1e28:	01 97       	sbiw	r24, 0x01	; 1
    1e2a:	19 f4       	brne	.+6      	; 0x1e32 <uart_reset_receive+0xa>
    1e2c:	10 92 67 14 	sts	0x1467, r1
    1e30:	08 95       	ret
    1e32:	10 92 68 14 	sts	0x1468, r1
    1e36:	08 95       	ret

00001e38 <__vector_25>:
/**
 * UART receive byte ISR
 */
ISR(USART0_RX_vect)
{
    1e38:	1f 92       	push	r1
    1e3a:	0f 92       	push	r0
    1e3c:	0f b6       	in	r0, 0x3f	; 63
    1e3e:	0f 92       	push	r0
    1e40:	11 24       	eor	r1, r1
    1e42:	0b b6       	in	r0, 0x3b	; 59
    1e44:	0f 92       	push	r0
    1e46:	8f 93       	push	r24
    1e48:	9f 93       	push	r25
    1e4a:	ef 93       	push	r30
    1e4c:	ff 93       	push	r31
	while(!(UCSR0A & (1<<RXC0)));
    1e4e:	e0 ec       	ldi	r30, 0xC0	; 192
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	88 23       	and	r24, r24
    1e56:	ec f7       	brge	.-6      	; 0x1e52 <__vector_25+0x1a>
    uart_buffer[uart_buffer_index] = UDR0;
    1e58:	e0 91 68 14 	lds	r30, 0x1468
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 91 c6 00 	lds	r24, 0x00C6
    1e62:	e7 57       	subi	r30, 0x77	; 119
    1e64:	fb 4e       	sbci	r31, 0xEB	; 235
    1e66:	80 83       	st	Z, r24
    uart_buffer_index = (uart_buffer_index + 1) % UART_BUFFER_SIZE;
    1e68:	80 91 68 14 	lds	r24, 0x1468
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	01 96       	adiw	r24, 0x01	; 1
    1e70:	8f 71       	andi	r24, 0x1F	; 31
    1e72:	90 78       	andi	r25, 0x80	; 128
    1e74:	99 23       	and	r25, r25
    1e76:	24 f4       	brge	.+8      	; 0x1e80 <__vector_25+0x48>
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	80 6e       	ori	r24, 0xE0	; 224
    1e7c:	9f 6f       	ori	r25, 0xFF	; 255
    1e7e:	01 96       	adiw	r24, 0x01	; 1
    1e80:	80 93 68 14 	sts	0x1468, r24
}
    1e84:	ff 91       	pop	r31
    1e86:	ef 91       	pop	r30
    1e88:	9f 91       	pop	r25
    1e8a:	8f 91       	pop	r24
    1e8c:	0f 90       	pop	r0
    1e8e:	0b be       	out	0x3b, r0	; 59
    1e90:	0f 90       	pop	r0
    1e92:	0f be       	out	0x3f, r0	; 63
    1e94:	0f 90       	pop	r0
    1e96:	1f 90       	pop	r1
    1e98:	18 95       	reti

00001e9a <__vector_36>:

/**
 * UART receive byte ISR
 */
ISR(USART1_RX_vect)
{
    1e9a:	1f 92       	push	r1
    1e9c:	0f 92       	push	r0
    1e9e:	0f b6       	in	r0, 0x3f	; 63
    1ea0:	0f 92       	push	r0
    1ea2:	11 24       	eor	r1, r1
    1ea4:	0b b6       	in	r0, 0x3b	; 59
    1ea6:	0f 92       	push	r0
    1ea8:	8f 93       	push	r24
    1eaa:	9f 93       	push	r25
    1eac:	ef 93       	push	r30
    1eae:	ff 93       	push	r31
	while(!(UCSR1A & (1<<RXC1)));
    1eb0:	e8 ec       	ldi	r30, 0xC8	; 200
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	88 23       	and	r24, r24
    1eb8:	ec f7       	brge	.-6      	; 0x1eb4 <__vector_36+0x1a>
    uart_buffer_1[uart_buffer_1_index] = UDR1;
    1eba:	e0 91 67 14 	lds	r30, 0x1467
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 91 ce 00 	lds	r24, 0x00CE
    1ec4:	e7 59       	subi	r30, 0x97	; 151
    1ec6:	fb 4e       	sbci	r31, 0xEB	; 235
    1ec8:	80 83       	st	Z, r24
    uart_buffer_1_index = (uart_buffer_1_index + 1) % UART_BUFFER_SIZE;
    1eca:	80 91 67 14 	lds	r24, 0x1467
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	01 96       	adiw	r24, 0x01	; 1
    1ed2:	8f 71       	andi	r24, 0x1F	; 31
    1ed4:	90 78       	andi	r25, 0x80	; 128
    1ed6:	99 23       	and	r25, r25
    1ed8:	24 f4       	brge	.+8      	; 0x1ee2 <__vector_36+0x48>
    1eda:	01 97       	sbiw	r24, 0x01	; 1
    1edc:	80 6e       	ori	r24, 0xE0	; 224
    1ede:	9f 6f       	ori	r25, 0xFF	; 255
    1ee0:	01 96       	adiw	r24, 0x01	; 1
    1ee2:	80 93 67 14 	sts	0x1467, r24
}
    1ee6:	ff 91       	pop	r31
    1ee8:	ef 91       	pop	r30
    1eea:	9f 91       	pop	r25
    1eec:	8f 91       	pop	r24
    1eee:	0f 90       	pop	r0
    1ef0:	0b be       	out	0x3b, r0	; 59
    1ef2:	0f 90       	pop	r0
    1ef4:	0f be       	out	0x3f, r0	; 63
    1ef6:	0f 90       	pop	r0
    1ef8:	1f 90       	pop	r1
    1efa:	18 95       	reti

00001efc <__fixsfsi>:
    1efc:	04 d0       	rcall	.+8      	; 0x1f06 <__fixunssfsi>
    1efe:	68 94       	set
    1f00:	b1 11       	cpse	r27, r1
    1f02:	8d c0       	rjmp	.+282    	; 0x201e <__fp_szero>
    1f04:	08 95       	ret

00001f06 <__fixunssfsi>:
    1f06:	70 d0       	rcall	.+224    	; 0x1fe8 <__fp_splitA>
    1f08:	88 f0       	brcs	.+34     	; 0x1f2c <__fixunssfsi+0x26>
    1f0a:	9f 57       	subi	r25, 0x7F	; 127
    1f0c:	90 f0       	brcs	.+36     	; 0x1f32 <__fixunssfsi+0x2c>
    1f0e:	b9 2f       	mov	r27, r25
    1f10:	99 27       	eor	r25, r25
    1f12:	b7 51       	subi	r27, 0x17	; 23
    1f14:	a0 f0       	brcs	.+40     	; 0x1f3e <__fixunssfsi+0x38>
    1f16:	d1 f0       	breq	.+52     	; 0x1f4c <__fixunssfsi+0x46>
    1f18:	66 0f       	add	r22, r22
    1f1a:	77 1f       	adc	r23, r23
    1f1c:	88 1f       	adc	r24, r24
    1f1e:	99 1f       	adc	r25, r25
    1f20:	1a f0       	brmi	.+6      	; 0x1f28 <__fixunssfsi+0x22>
    1f22:	ba 95       	dec	r27
    1f24:	c9 f7       	brne	.-14     	; 0x1f18 <__fixunssfsi+0x12>
    1f26:	12 c0       	rjmp	.+36     	; 0x1f4c <__fixunssfsi+0x46>
    1f28:	b1 30       	cpi	r27, 0x01	; 1
    1f2a:	81 f0       	breq	.+32     	; 0x1f4c <__fixunssfsi+0x46>
    1f2c:	77 d0       	rcall	.+238    	; 0x201c <__fp_zero>
    1f2e:	b1 e0       	ldi	r27, 0x01	; 1
    1f30:	08 95       	ret
    1f32:	74 c0       	rjmp	.+232    	; 0x201c <__fp_zero>
    1f34:	67 2f       	mov	r22, r23
    1f36:	78 2f       	mov	r23, r24
    1f38:	88 27       	eor	r24, r24
    1f3a:	b8 5f       	subi	r27, 0xF8	; 248
    1f3c:	39 f0       	breq	.+14     	; 0x1f4c <__fixunssfsi+0x46>
    1f3e:	b9 3f       	cpi	r27, 0xF9	; 249
    1f40:	cc f3       	brlt	.-14     	; 0x1f34 <__fixunssfsi+0x2e>
    1f42:	86 95       	lsr	r24
    1f44:	77 95       	ror	r23
    1f46:	67 95       	ror	r22
    1f48:	b3 95       	inc	r27
    1f4a:	d9 f7       	brne	.-10     	; 0x1f42 <__fixunssfsi+0x3c>
    1f4c:	3e f4       	brtc	.+14     	; 0x1f5c <__fixunssfsi+0x56>
    1f4e:	90 95       	com	r25
    1f50:	80 95       	com	r24
    1f52:	70 95       	com	r23
    1f54:	61 95       	neg	r22
    1f56:	7f 4f       	sbci	r23, 0xFF	; 255
    1f58:	8f 4f       	sbci	r24, 0xFF	; 255
    1f5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f5c:	08 95       	ret

00001f5e <__floatunsisf>:
    1f5e:	e8 94       	clt
    1f60:	09 c0       	rjmp	.+18     	; 0x1f74 <__floatsisf+0x12>

00001f62 <__floatsisf>:
    1f62:	97 fb       	bst	r25, 7
    1f64:	3e f4       	brtc	.+14     	; 0x1f74 <__floatsisf+0x12>
    1f66:	90 95       	com	r25
    1f68:	80 95       	com	r24
    1f6a:	70 95       	com	r23
    1f6c:	61 95       	neg	r22
    1f6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f70:	8f 4f       	sbci	r24, 0xFF	; 255
    1f72:	9f 4f       	sbci	r25, 0xFF	; 255
    1f74:	99 23       	and	r25, r25
    1f76:	a9 f0       	breq	.+42     	; 0x1fa2 <__floatsisf+0x40>
    1f78:	f9 2f       	mov	r31, r25
    1f7a:	96 e9       	ldi	r25, 0x96	; 150
    1f7c:	bb 27       	eor	r27, r27
    1f7e:	93 95       	inc	r25
    1f80:	f6 95       	lsr	r31
    1f82:	87 95       	ror	r24
    1f84:	77 95       	ror	r23
    1f86:	67 95       	ror	r22
    1f88:	b7 95       	ror	r27
    1f8a:	f1 11       	cpse	r31, r1
    1f8c:	f8 cf       	rjmp	.-16     	; 0x1f7e <__floatsisf+0x1c>
    1f8e:	fa f4       	brpl	.+62     	; 0x1fce <__floatsisf+0x6c>
    1f90:	bb 0f       	add	r27, r27
    1f92:	11 f4       	brne	.+4      	; 0x1f98 <__floatsisf+0x36>
    1f94:	60 ff       	sbrs	r22, 0
    1f96:	1b c0       	rjmp	.+54     	; 0x1fce <__floatsisf+0x6c>
    1f98:	6f 5f       	subi	r22, 0xFF	; 255
    1f9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f9c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa0:	16 c0       	rjmp	.+44     	; 0x1fce <__floatsisf+0x6c>
    1fa2:	88 23       	and	r24, r24
    1fa4:	11 f0       	breq	.+4      	; 0x1faa <__floatsisf+0x48>
    1fa6:	96 e9       	ldi	r25, 0x96	; 150
    1fa8:	11 c0       	rjmp	.+34     	; 0x1fcc <__floatsisf+0x6a>
    1faa:	77 23       	and	r23, r23
    1fac:	21 f0       	breq	.+8      	; 0x1fb6 <__floatsisf+0x54>
    1fae:	9e e8       	ldi	r25, 0x8E	; 142
    1fb0:	87 2f       	mov	r24, r23
    1fb2:	76 2f       	mov	r23, r22
    1fb4:	05 c0       	rjmp	.+10     	; 0x1fc0 <__floatsisf+0x5e>
    1fb6:	66 23       	and	r22, r22
    1fb8:	71 f0       	breq	.+28     	; 0x1fd6 <__floatsisf+0x74>
    1fba:	96 e8       	ldi	r25, 0x86	; 134
    1fbc:	86 2f       	mov	r24, r22
    1fbe:	70 e0       	ldi	r23, 0x00	; 0
    1fc0:	60 e0       	ldi	r22, 0x00	; 0
    1fc2:	2a f0       	brmi	.+10     	; 0x1fce <__floatsisf+0x6c>
    1fc4:	9a 95       	dec	r25
    1fc6:	66 0f       	add	r22, r22
    1fc8:	77 1f       	adc	r23, r23
    1fca:	88 1f       	adc	r24, r24
    1fcc:	da f7       	brpl	.-10     	; 0x1fc4 <__floatsisf+0x62>
    1fce:	88 0f       	add	r24, r24
    1fd0:	96 95       	lsr	r25
    1fd2:	87 95       	ror	r24
    1fd4:	97 f9       	bld	r25, 7
    1fd6:	08 95       	ret

00001fd8 <__fp_split3>:
    1fd8:	57 fd       	sbrc	r21, 7
    1fda:	90 58       	subi	r25, 0x80	; 128
    1fdc:	44 0f       	add	r20, r20
    1fde:	55 1f       	adc	r21, r21
    1fe0:	59 f0       	breq	.+22     	; 0x1ff8 <__fp_splitA+0x10>
    1fe2:	5f 3f       	cpi	r21, 0xFF	; 255
    1fe4:	71 f0       	breq	.+28     	; 0x2002 <__fp_splitA+0x1a>
    1fe6:	47 95       	ror	r20

00001fe8 <__fp_splitA>:
    1fe8:	88 0f       	add	r24, r24
    1fea:	97 fb       	bst	r25, 7
    1fec:	99 1f       	adc	r25, r25
    1fee:	61 f0       	breq	.+24     	; 0x2008 <__fp_splitA+0x20>
    1ff0:	9f 3f       	cpi	r25, 0xFF	; 255
    1ff2:	79 f0       	breq	.+30     	; 0x2012 <__fp_splitA+0x2a>
    1ff4:	87 95       	ror	r24
    1ff6:	08 95       	ret
    1ff8:	12 16       	cp	r1, r18
    1ffa:	13 06       	cpc	r1, r19
    1ffc:	14 06       	cpc	r1, r20
    1ffe:	55 1f       	adc	r21, r21
    2000:	f2 cf       	rjmp	.-28     	; 0x1fe6 <__fp_split3+0xe>
    2002:	46 95       	lsr	r20
    2004:	f1 df       	rcall	.-30     	; 0x1fe8 <__fp_splitA>
    2006:	08 c0       	rjmp	.+16     	; 0x2018 <__fp_splitA+0x30>
    2008:	16 16       	cp	r1, r22
    200a:	17 06       	cpc	r1, r23
    200c:	18 06       	cpc	r1, r24
    200e:	99 1f       	adc	r25, r25
    2010:	f1 cf       	rjmp	.-30     	; 0x1ff4 <__fp_splitA+0xc>
    2012:	86 95       	lsr	r24
    2014:	71 05       	cpc	r23, r1
    2016:	61 05       	cpc	r22, r1
    2018:	08 94       	sec
    201a:	08 95       	ret

0000201c <__fp_zero>:
    201c:	e8 94       	clt

0000201e <__fp_szero>:
    201e:	bb 27       	eor	r27, r27
    2020:	66 27       	eor	r22, r22
    2022:	77 27       	eor	r23, r23
    2024:	cb 01       	movw	r24, r22
    2026:	97 f9       	bld	r25, 7
    2028:	08 95       	ret

0000202a <__mulsf3>:
    202a:	0b d0       	rcall	.+22     	; 0x2042 <__mulsf3x>
    202c:	78 c0       	rjmp	.+240    	; 0x211e <__fp_round>
    202e:	69 d0       	rcall	.+210    	; 0x2102 <__fp_pscA>
    2030:	28 f0       	brcs	.+10     	; 0x203c <__mulsf3+0x12>
    2032:	6e d0       	rcall	.+220    	; 0x2110 <__fp_pscB>
    2034:	18 f0       	brcs	.+6      	; 0x203c <__mulsf3+0x12>
    2036:	95 23       	and	r25, r21
    2038:	09 f0       	breq	.+2      	; 0x203c <__mulsf3+0x12>
    203a:	5a c0       	rjmp	.+180    	; 0x20f0 <__fp_inf>
    203c:	5f c0       	rjmp	.+190    	; 0x20fc <__fp_nan>
    203e:	11 24       	eor	r1, r1
    2040:	ee cf       	rjmp	.-36     	; 0x201e <__fp_szero>

00002042 <__mulsf3x>:
    2042:	ca df       	rcall	.-108    	; 0x1fd8 <__fp_split3>
    2044:	a0 f3       	brcs	.-24     	; 0x202e <__mulsf3+0x4>

00002046 <__mulsf3_pse>:
    2046:	95 9f       	mul	r25, r21
    2048:	d1 f3       	breq	.-12     	; 0x203e <__mulsf3+0x14>
    204a:	95 0f       	add	r25, r21
    204c:	50 e0       	ldi	r21, 0x00	; 0
    204e:	55 1f       	adc	r21, r21
    2050:	62 9f       	mul	r22, r18
    2052:	f0 01       	movw	r30, r0
    2054:	72 9f       	mul	r23, r18
    2056:	bb 27       	eor	r27, r27
    2058:	f0 0d       	add	r31, r0
    205a:	b1 1d       	adc	r27, r1
    205c:	63 9f       	mul	r22, r19
    205e:	aa 27       	eor	r26, r26
    2060:	f0 0d       	add	r31, r0
    2062:	b1 1d       	adc	r27, r1
    2064:	aa 1f       	adc	r26, r26
    2066:	64 9f       	mul	r22, r20
    2068:	66 27       	eor	r22, r22
    206a:	b0 0d       	add	r27, r0
    206c:	a1 1d       	adc	r26, r1
    206e:	66 1f       	adc	r22, r22
    2070:	82 9f       	mul	r24, r18
    2072:	22 27       	eor	r18, r18
    2074:	b0 0d       	add	r27, r0
    2076:	a1 1d       	adc	r26, r1
    2078:	62 1f       	adc	r22, r18
    207a:	73 9f       	mul	r23, r19
    207c:	b0 0d       	add	r27, r0
    207e:	a1 1d       	adc	r26, r1
    2080:	62 1f       	adc	r22, r18
    2082:	83 9f       	mul	r24, r19
    2084:	a0 0d       	add	r26, r0
    2086:	61 1d       	adc	r22, r1
    2088:	22 1f       	adc	r18, r18
    208a:	74 9f       	mul	r23, r20
    208c:	33 27       	eor	r19, r19
    208e:	a0 0d       	add	r26, r0
    2090:	61 1d       	adc	r22, r1
    2092:	23 1f       	adc	r18, r19
    2094:	84 9f       	mul	r24, r20
    2096:	60 0d       	add	r22, r0
    2098:	21 1d       	adc	r18, r1
    209a:	82 2f       	mov	r24, r18
    209c:	76 2f       	mov	r23, r22
    209e:	6a 2f       	mov	r22, r26
    20a0:	11 24       	eor	r1, r1
    20a2:	9f 57       	subi	r25, 0x7F	; 127
    20a4:	50 40       	sbci	r21, 0x00	; 0
    20a6:	8a f0       	brmi	.+34     	; 0x20ca <__mulsf3_pse+0x84>
    20a8:	e1 f0       	breq	.+56     	; 0x20e2 <__mulsf3_pse+0x9c>
    20aa:	88 23       	and	r24, r24
    20ac:	4a f0       	brmi	.+18     	; 0x20c0 <__mulsf3_pse+0x7a>
    20ae:	ee 0f       	add	r30, r30
    20b0:	ff 1f       	adc	r31, r31
    20b2:	bb 1f       	adc	r27, r27
    20b4:	66 1f       	adc	r22, r22
    20b6:	77 1f       	adc	r23, r23
    20b8:	88 1f       	adc	r24, r24
    20ba:	91 50       	subi	r25, 0x01	; 1
    20bc:	50 40       	sbci	r21, 0x00	; 0
    20be:	a9 f7       	brne	.-22     	; 0x20aa <__mulsf3_pse+0x64>
    20c0:	9e 3f       	cpi	r25, 0xFE	; 254
    20c2:	51 05       	cpc	r21, r1
    20c4:	70 f0       	brcs	.+28     	; 0x20e2 <__mulsf3_pse+0x9c>
    20c6:	14 c0       	rjmp	.+40     	; 0x20f0 <__fp_inf>
    20c8:	aa cf       	rjmp	.-172    	; 0x201e <__fp_szero>
    20ca:	5f 3f       	cpi	r21, 0xFF	; 255
    20cc:	ec f3       	brlt	.-6      	; 0x20c8 <__mulsf3_pse+0x82>
    20ce:	98 3e       	cpi	r25, 0xE8	; 232
    20d0:	dc f3       	brlt	.-10     	; 0x20c8 <__mulsf3_pse+0x82>
    20d2:	86 95       	lsr	r24
    20d4:	77 95       	ror	r23
    20d6:	67 95       	ror	r22
    20d8:	b7 95       	ror	r27
    20da:	f7 95       	ror	r31
    20dc:	e7 95       	ror	r30
    20de:	9f 5f       	subi	r25, 0xFF	; 255
    20e0:	c1 f7       	brne	.-16     	; 0x20d2 <__mulsf3_pse+0x8c>
    20e2:	fe 2b       	or	r31, r30
    20e4:	88 0f       	add	r24, r24
    20e6:	91 1d       	adc	r25, r1
    20e8:	96 95       	lsr	r25
    20ea:	87 95       	ror	r24
    20ec:	97 f9       	bld	r25, 7
    20ee:	08 95       	ret

000020f0 <__fp_inf>:
    20f0:	97 f9       	bld	r25, 7
    20f2:	9f 67       	ori	r25, 0x7F	; 127
    20f4:	80 e8       	ldi	r24, 0x80	; 128
    20f6:	70 e0       	ldi	r23, 0x00	; 0
    20f8:	60 e0       	ldi	r22, 0x00	; 0
    20fa:	08 95       	ret

000020fc <__fp_nan>:
    20fc:	9f ef       	ldi	r25, 0xFF	; 255
    20fe:	80 ec       	ldi	r24, 0xC0	; 192
    2100:	08 95       	ret

00002102 <__fp_pscA>:
    2102:	00 24       	eor	r0, r0
    2104:	0a 94       	dec	r0
    2106:	16 16       	cp	r1, r22
    2108:	17 06       	cpc	r1, r23
    210a:	18 06       	cpc	r1, r24
    210c:	09 06       	cpc	r0, r25
    210e:	08 95       	ret

00002110 <__fp_pscB>:
    2110:	00 24       	eor	r0, r0
    2112:	0a 94       	dec	r0
    2114:	12 16       	cp	r1, r18
    2116:	13 06       	cpc	r1, r19
    2118:	14 06       	cpc	r1, r20
    211a:	05 06       	cpc	r0, r21
    211c:	08 95       	ret

0000211e <__fp_round>:
    211e:	09 2e       	mov	r0, r25
    2120:	03 94       	inc	r0
    2122:	00 0c       	add	r0, r0
    2124:	11 f4       	brne	.+4      	; 0x212a <__fp_round+0xc>
    2126:	88 23       	and	r24, r24
    2128:	52 f0       	brmi	.+20     	; 0x213e <__fp_round+0x20>
    212a:	bb 0f       	add	r27, r27
    212c:	40 f4       	brcc	.+16     	; 0x213e <__fp_round+0x20>
    212e:	bf 2b       	or	r27, r31
    2130:	11 f4       	brne	.+4      	; 0x2136 <__fp_round+0x18>
    2132:	60 ff       	sbrs	r22, 0
    2134:	04 c0       	rjmp	.+8      	; 0x213e <__fp_round+0x20>
    2136:	6f 5f       	subi	r22, 0xFF	; 255
    2138:	7f 4f       	sbci	r23, 0xFF	; 255
    213a:	8f 4f       	sbci	r24, 0xFF	; 255
    213c:	9f 4f       	sbci	r25, 0xFF	; 255
    213e:	08 95       	ret

00002140 <__udivmodhi4>:
    2140:	aa 1b       	sub	r26, r26
    2142:	bb 1b       	sub	r27, r27
    2144:	51 e1       	ldi	r21, 0x11	; 17
    2146:	07 c0       	rjmp	.+14     	; 0x2156 <__udivmodhi4_ep>

00002148 <__udivmodhi4_loop>:
    2148:	aa 1f       	adc	r26, r26
    214a:	bb 1f       	adc	r27, r27
    214c:	a6 17       	cp	r26, r22
    214e:	b7 07       	cpc	r27, r23
    2150:	10 f0       	brcs	.+4      	; 0x2156 <__udivmodhi4_ep>
    2152:	a6 1b       	sub	r26, r22
    2154:	b7 0b       	sbc	r27, r23

00002156 <__udivmodhi4_ep>:
    2156:	88 1f       	adc	r24, r24
    2158:	99 1f       	adc	r25, r25
    215a:	5a 95       	dec	r21
    215c:	a9 f7       	brne	.-22     	; 0x2148 <__udivmodhi4_loop>
    215e:	80 95       	com	r24
    2160:	90 95       	com	r25
    2162:	bc 01       	movw	r22, r24
    2164:	cd 01       	movw	r24, r26
    2166:	08 95       	ret

00002168 <__divmodhi4>:
    2168:	97 fb       	bst	r25, 7
    216a:	07 2e       	mov	r0, r23
    216c:	16 f4       	brtc	.+4      	; 0x2172 <__divmodhi4+0xa>
    216e:	00 94       	com	r0
    2170:	06 d0       	rcall	.+12     	; 0x217e <__divmodhi4_neg1>
    2172:	77 fd       	sbrc	r23, 7
    2174:	08 d0       	rcall	.+16     	; 0x2186 <__divmodhi4_neg2>
    2176:	e4 df       	rcall	.-56     	; 0x2140 <__udivmodhi4>
    2178:	07 fc       	sbrc	r0, 7
    217a:	05 d0       	rcall	.+10     	; 0x2186 <__divmodhi4_neg2>
    217c:	3e f4       	brtc	.+14     	; 0x218c <__divmodhi4_exit>

0000217e <__divmodhi4_neg1>:
    217e:	90 95       	com	r25
    2180:	81 95       	neg	r24
    2182:	9f 4f       	sbci	r25, 0xFF	; 255
    2184:	08 95       	ret

00002186 <__divmodhi4_neg2>:
    2186:	70 95       	com	r23
    2188:	61 95       	neg	r22
    218a:	7f 4f       	sbci	r23, 0xFF	; 255

0000218c <__divmodhi4_exit>:
    218c:	08 95       	ret

0000218e <__tablejump2__>:
    218e:	ee 0f       	add	r30, r30
    2190:	ff 1f       	adc	r31, r31
    2192:	88 1f       	adc	r24, r24
    2194:	8b bf       	out	0x3b, r24	; 59
    2196:	07 90       	elpm	r0, Z+
    2198:	f6 91       	elpm	r31, Z
    219a:	e0 2d       	mov	r30, r0
    219c:	19 94       	eijmp

0000219e <_exit>:
    219e:	f8 94       	cli

000021a0 <__stop_program>:
    21a0:	ff cf       	rjmp	.-2      	; 0x21a0 <__stop_program>
