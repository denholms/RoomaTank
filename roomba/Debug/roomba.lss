
roomba.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800200  0000238c  00002420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000238c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000012fc  00800218  00800218  00002438  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002438  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002494  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000448  00000000  00000000  000024d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000054e2  00000000  00000000  00002920  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001526  00000000  00000000  00007e02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002837  00000000  00000000  00009328  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b24  00000000  00000000  0000bb60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000012cb  00000000  00000000  0000c684  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002bed  00000000  00000000  0000d94f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000450  00000000  00000000  0001053c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c0       	rjmp	.+252    	; 0xfe <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 3d 0d 	jmp	0x1a7a	; 0x1a7a <__vector_1>
       8:	9b c0       	rjmp	.+310    	; 0x140 <__bad_interrupt>
       a:	00 00       	nop
       c:	99 c0       	rjmp	.+306    	; 0x140 <__bad_interrupt>
       e:	00 00       	nop
      10:	97 c0       	rjmp	.+302    	; 0x140 <__bad_interrupt>
      12:	00 00       	nop
      14:	95 c0       	rjmp	.+298    	; 0x140 <__bad_interrupt>
      16:	00 00       	nop
      18:	93 c0       	rjmp	.+294    	; 0x140 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	91 c0       	rjmp	.+290    	; 0x140 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8f c0       	rjmp	.+286    	; 0x140 <__bad_interrupt>
      22:	00 00       	nop
      24:	8d c0       	rjmp	.+282    	; 0x140 <__bad_interrupt>
      26:	00 00       	nop
      28:	8b c0       	rjmp	.+278    	; 0x140 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	89 c0       	rjmp	.+274    	; 0x140 <__bad_interrupt>
      2e:	00 00       	nop
      30:	87 c0       	rjmp	.+270    	; 0x140 <__bad_interrupt>
      32:	00 00       	nop
      34:	85 c0       	rjmp	.+266    	; 0x140 <__bad_interrupt>
      36:	00 00       	nop
      38:	83 c0       	rjmp	.+262    	; 0x140 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	81 c0       	rjmp	.+258    	; 0x140 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7f c0       	rjmp	.+254    	; 0x140 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <__vector_17>
      48:	7b c0       	rjmp	.+246    	; 0x140 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	79 c0       	rjmp	.+242    	; 0x140 <__bad_interrupt>
      4e:	00 00       	nop
      50:	77 c0       	rjmp	.+238    	; 0x140 <__bad_interrupt>
      52:	00 00       	nop
      54:	75 c0       	rjmp	.+234    	; 0x140 <__bad_interrupt>
      56:	00 00       	nop
      58:	73 c0       	rjmp	.+230    	; 0x140 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	71 c0       	rjmp	.+226    	; 0x140 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6f c0       	rjmp	.+222    	; 0x140 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 7d 0e 	jmp	0x1cfa	; 0x1cfa <__vector_25>
      68:	6b c0       	rjmp	.+214    	; 0x140 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	69 c0       	rjmp	.+210    	; 0x140 <__bad_interrupt>
      6e:	00 00       	nop
      70:	67 c0       	rjmp	.+206    	; 0x140 <__bad_interrupt>
      72:	00 00       	nop
      74:	65 c0       	rjmp	.+202    	; 0x140 <__bad_interrupt>
      76:	00 00       	nop
      78:	63 c0       	rjmp	.+198    	; 0x140 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	61 c0       	rjmp	.+194    	; 0x140 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <__vector_32>
      84:	5d c0       	rjmp	.+186    	; 0x140 <__bad_interrupt>
      86:	00 00       	nop
      88:	5b c0       	rjmp	.+182    	; 0x140 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	59 c0       	rjmp	.+178    	; 0x140 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__vector_36>
      94:	55 c0       	rjmp	.+170    	; 0x140 <__bad_interrupt>
      96:	00 00       	nop
      98:	53 c0       	rjmp	.+166    	; 0x140 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	51 c0       	rjmp	.+162    	; 0x140 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4f c0       	rjmp	.+158    	; 0x140 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4d c0       	rjmp	.+154    	; 0x140 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4b c0       	rjmp	.+150    	; 0x140 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	49 c0       	rjmp	.+146    	; 0x140 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	47 c0       	rjmp	.+142    	; 0x140 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	45 c0       	rjmp	.+138    	; 0x140 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	43 c0       	rjmp	.+134    	; 0x140 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	41 c0       	rjmp	.+130    	; 0x140 <__bad_interrupt>
      be:	00 00       	nop
      c0:	3f c0       	rjmp	.+126    	; 0x140 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3d c0       	rjmp	.+122    	; 0x140 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3b c0       	rjmp	.+118    	; 0x140 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	39 c0       	rjmp	.+114    	; 0x140 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	37 c0       	rjmp	.+110    	; 0x140 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	35 c0       	rjmp	.+106    	; 0x140 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	33 c0       	rjmp	.+102    	; 0x140 <__bad_interrupt>
      da:	00 00       	nop
      dc:	31 c0       	rjmp	.+98     	; 0x140 <__bad_interrupt>
      de:	00 00       	nop
      e0:	2f c0       	rjmp	.+94     	; 0x140 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	0b 06       	cpc	r0, r27
      e6:	f1 05       	cpc	r31, r1
      e8:	0b 06       	cpc	r0, r27
      ea:	1a 06       	cpc	r1, r26
      ec:	bf 06       	cpc	r11, r31
      ee:	29 06       	cpc	r2, r25
      f0:	e2 05       	cpc	r30, r2
      f2:	12 07       	cpc	r17, r18
      f4:	47 07       	cpc	r20, r23
      f6:	e9 07       	cpc	r30, r25
      f8:	eb 07       	cpc	r30, r27
      fa:	21 08       	sbc	r2, r1
      fc:	98 08       	sbc	r9, r8

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d1 e2       	ldi	r29, 0x21	; 33
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0c bf       	out	0x3c, r16	; 60

0000010e <__do_copy_data>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a0 e0       	ldi	r26, 0x00	; 0
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	ec e8       	ldi	r30, 0x8C	; 140
     116:	f3 e2       	ldi	r31, 0x23	; 35
     118:	00 e0       	ldi	r16, 0x00	; 0
     11a:	0b bf       	out	0x3b, r16	; 59
     11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x14>
     11e:	07 90       	elpm	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	a8 31       	cpi	r26, 0x18	; 24
     124:	b1 07       	cpc	r27, r17
     126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0x10>

00000128 <__do_clear_bss>:
     128:	25 e1       	ldi	r18, 0x15	; 21
     12a:	a8 e1       	ldi	r26, 0x18	; 24
     12c:	b2 e0       	ldi	r27, 0x02	; 2
     12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
     130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
     132:	a4 31       	cpi	r26, 0x14	; 20
     134:	b2 07       	cpc	r27, r18
     136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>
     138:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <main>
     13c:	0c 94 c4 11 	jmp	0x2388	; 0x2388 <_exit>

00000140 <__bad_interrupt>:
     140:	5f cf       	rjmp	.-322    	; 0x0 <__vectors>

00000142 <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
     142:	0f 92       	push	r0
     144:	1f 92       	push	r1
     146:	2f 92       	push	r2
     148:	3f 92       	push	r3
     14a:	4f 92       	push	r4
     14c:	5f 92       	push	r5
     14e:	6f 92       	push	r6
     150:	7f 92       	push	r7
     152:	8f 92       	push	r8
     154:	9f 92       	push	r9
     156:	af 92       	push	r10
     158:	bf 92       	push	r11
     15a:	cf 92       	push	r12
     15c:	df 92       	push	r13
     15e:	ef 92       	push	r14
     160:	ff 92       	push	r15
     162:	0f 93       	push	r16
     164:	1f 93       	push	r17
     166:	2f 93       	push	r18
     168:	3f 93       	push	r19
     16a:	4f 93       	push	r20
     16c:	5f 93       	push	r21
     16e:	6f 93       	push	r22
     170:	7f 93       	push	r23
     172:	8f 93       	push	r24
     174:	9f 93       	push	r25
     176:	af 93       	push	r26
     178:	bf 93       	push	r27
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	ef 93       	push	r30
     180:	ff 93       	push	r31
     182:	0f b7       	in	r16, 0x3f	; 63
     184:	0f 93       	push	r16
     186:	fc b7       	in	r31, 0x3c	; 60
     188:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
     18a:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     18c:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
     18e:	e0 93 11 15 	sts	0x1511, r30
        sts  KernelSp+1, r31
     192:	f0 93 12 15 	sts	0x1512, r31
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
     196:	e0 91 ef 14 	lds	r30, 0x14EF
        lds  r31, CurrentSp+1
     19a:	f0 91 f0 14 	lds	r31, 0x14F0
        out  SPL, r30
     19e:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     1a0:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
     1a2:	ff 91       	pop	r31
     1a4:	fc bf       	out	0x3c, r31	; 60
     1a6:	0f 91       	pop	r16
     1a8:	0f bf       	out	0x3f, r16	; 63
     1aa:	ff 91       	pop	r31
     1ac:	ef 91       	pop	r30
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	bf 91       	pop	r27
     1b4:	af 91       	pop	r26
     1b6:	9f 91       	pop	r25
     1b8:	8f 91       	pop	r24
     1ba:	7f 91       	pop	r23
     1bc:	6f 91       	pop	r22
     1be:	5f 91       	pop	r21
     1c0:	4f 91       	pop	r20
     1c2:	3f 91       	pop	r19
     1c4:	2f 91       	pop	r18
     1c6:	1f 91       	pop	r17
     1c8:	0f 91       	pop	r16
     1ca:	ff 90       	pop	r15
     1cc:	ef 90       	pop	r14
     1ce:	df 90       	pop	r13
     1d0:	cf 90       	pop	r12
     1d2:	bf 90       	pop	r11
     1d4:	af 90       	pop	r10
     1d6:	9f 90       	pop	r9
     1d8:	8f 90       	pop	r8
     1da:	7f 90       	pop	r7
     1dc:	6f 90       	pop	r6
     1de:	5f 90       	pop	r5
     1e0:	4f 90       	pop	r4
     1e2:	3f 90       	pop	r3
     1e4:	2f 90       	pop	r2
     1e6:	1f 90       	pop	r1
     1e8:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
     1ea:	18 95       	reti

000001ec <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
     1ec:	0f 92       	push	r0
     1ee:	1f 92       	push	r1
     1f0:	2f 92       	push	r2
     1f2:	3f 92       	push	r3
     1f4:	4f 92       	push	r4
     1f6:	5f 92       	push	r5
     1f8:	6f 92       	push	r6
     1fa:	7f 92       	push	r7
     1fc:	8f 92       	push	r8
     1fe:	9f 92       	push	r9
     200:	af 92       	push	r10
     202:	bf 92       	push	r11
     204:	cf 92       	push	r12
     206:	df 92       	push	r13
     208:	ef 92       	push	r14
     20a:	ff 92       	push	r15
     20c:	0f 93       	push	r16
     20e:	1f 93       	push	r17
     210:	2f 93       	push	r18
     212:	3f 93       	push	r19
     214:	4f 93       	push	r20
     216:	5f 93       	push	r21
     218:	6f 93       	push	r22
     21a:	7f 93       	push	r23
     21c:	8f 93       	push	r24
     21e:	9f 93       	push	r25
     220:	af 93       	push	r26
     222:	bf 93       	push	r27
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	ef 93       	push	r30
     22a:	ff 93       	push	r31
     22c:	0f b7       	in	r16, 0x3f	; 63
     22e:	0f 93       	push	r16
     230:	fc b7       	in	r31, 0x3c	; 60
     232:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
     234:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     236:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
     238:	e0 93 ef 14 	sts	0x14EF, r30
        sts  CurrentSp+1, r31
     23c:	f0 93 f0 14 	sts	0x14F0, r31
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
     240:	e0 91 11 15 	lds	r30, 0x1511
        lds  r31, KernelSp+1
     244:	f0 91 12 15 	lds	r31, 0x1512
        out  SPL, r30
     248:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     24a:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
     24c:	ff 91       	pop	r31
     24e:	fc bf       	out	0x3c, r31	; 60
     250:	0f 91       	pop	r16
     252:	0f bf       	out	0x3f, r16	; 63
     254:	ff 91       	pop	r31
     256:	ef 91       	pop	r30
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	bf 91       	pop	r27
     25e:	af 91       	pop	r26
     260:	9f 91       	pop	r25
     262:	8f 91       	pop	r24
     264:	7f 91       	pop	r23
     266:	6f 91       	pop	r22
     268:	5f 91       	pop	r21
     26a:	4f 91       	pop	r20
     26c:	3f 91       	pop	r19
     26e:	2f 91       	pop	r18
     270:	1f 91       	pop	r17
     272:	0f 91       	pop	r16
     274:	ff 90       	pop	r15
     276:	ef 90       	pop	r14
     278:	df 90       	pop	r13
     27a:	cf 90       	pop	r12
     27c:	bf 90       	pop	r11
     27e:	af 90       	pop	r10
     280:	9f 90       	pop	r9
     282:	8f 90       	pop	r8
     284:	7f 90       	pop	r7
     286:	6f 90       	pop	r6
     288:	5f 90       	pop	r5
     28a:	4f 90       	pop	r4
     28c:	3f 90       	pop	r3
     28e:	2f 90       	pop	r2
     290:	1f 90       	pop	r1
     292:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
     294:	08 95       	ret

00000296 <adc_init>:

// initialize adc
void adc_init()
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
     296:	80 e4       	ldi	r24, 0x40	; 64
     298:	80 93 7c 00 	sts	0x007C, r24
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     29c:	87 e8       	ldi	r24, 0x87	; 135
     29e:	80 93 7a 00 	sts	0x007A, r24
     2a2:	08 95       	ret

000002a4 <adc_read>:
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     2a4:	ec e7       	ldi	r30, 0x7C	; 124
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	90 81       	ld	r25, Z
uint16_t adc_read(uint8_t ch)
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
     2aa:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     2ac:	98 7f       	andi	r25, 0xF8	; 248
     2ae:	89 2b       	or	r24, r25
     2b0:	80 83       	st	Z, r24
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
     2b2:	ea e7       	ldi	r30, 0x7A	; 122
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	80 81       	ld	r24, Z
     2b8:	80 64       	ori	r24, 0x40	; 64
     2ba:	80 83       	st	Z, r24
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
     2bc:	80 81       	ld	r24, Z
     2be:	86 fd       	sbrc	r24, 6
     2c0:	fd cf       	rjmp	.-6      	; 0x2bc <adc_read+0x18>
	
	return (ADC);
     2c2:	80 91 78 00 	lds	r24, 0x0078
     2c6:	90 91 79 00 	lds	r25, 0x0079
}
     2ca:	08 95       	ret

000002cc <radio_rxhandler>:
	return 0;
}

void radio_rxhandler(uint8_t pipenumber)
{
	rxflag = 1;
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	80 93 18 02 	sts	0x0218, r24
	PORTL ^= _BV(PL7);
     2d2:	eb e0       	ldi	r30, 0x0B	; 11
     2d4:	f1 e0       	ldi	r31, 0x01	; 1
     2d6:	80 81       	ld	r24, Z
     2d8:	80 58       	subi	r24, 0x80	; 128
     2da:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2dc:	83 ed       	ldi	r24, 0xD3	; 211
     2de:	90 e3       	ldi	r25, 0x30	; 48
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <radio_rxhandler+0x14>
     2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <radio_rxhandler+0x1a>
     2e6:	00 00       	nop
	_delay_ms(50);
	PORTL ^= _BV(PL7);
     2e8:	80 81       	ld	r24, Z
     2ea:	80 58       	subi	r24, 0x80	; 128
     2ec:	80 83       	st	Z, r24
     2ee:	08 95       	ret

000002f0 <lcd_nibble>:

void lcd_blank( uint8_t len )                   // blank n digits
{
  while( len-- )
    lcd_putchar( ' ' );
}
     2f0:	e2 e0       	ldi	r30, 0x02	; 2
     2f2:	f1 e0       	ldi	r31, 0x01	; 1
     2f4:	90 81       	ld	r25, Z
     2f6:	9f 7e       	andi	r25, 0xEF	; 239
     2f8:	90 83       	st	Z, r25
     2fa:	88 23       	and	r24, r24
     2fc:	1c f4       	brge	.+6      	; 0x304 <lcd_nibble+0x14>
     2fe:	90 81       	ld	r25, Z
     300:	90 61       	ori	r25, 0x10	; 16
     302:	90 83       	st	Z, r25
     304:	e2 e0       	ldi	r30, 0x02	; 2
     306:	f1 e0       	ldi	r31, 0x01	; 1
     308:	90 81       	ld	r25, Z
     30a:	97 7f       	andi	r25, 0xF7	; 247
     30c:	90 83       	st	Z, r25
     30e:	86 ff       	sbrs	r24, 6
     310:	03 c0       	rjmp	.+6      	; 0x318 <lcd_nibble+0x28>
     312:	90 81       	ld	r25, Z
     314:	98 60       	ori	r25, 0x08	; 8
     316:	90 83       	st	Z, r25
     318:	73 98       	cbi	0x0e, 3	; 14
     31a:	85 fd       	sbrc	r24, 5
     31c:	73 9a       	sbi	0x0e, 3	; 14
     31e:	a5 98       	cbi	0x14, 5	; 20
     320:	84 fd       	sbrc	r24, 4
     322:	a5 9a       	sbi	0x14, 5	; 20
     324:	e2 e0       	ldi	r30, 0x02	; 2
     326:	f1 e0       	ldi	r31, 0x01	; 1
     328:	80 81       	ld	r24, Z
     32a:	80 64       	ori	r24, 0x40	; 64
     32c:	80 83       	st	Z, r24
     32e:	85 e0       	ldi	r24, 0x05	; 5
     330:	8a 95       	dec	r24
     332:	f1 f7       	brne	.-4      	; 0x330 <lcd_nibble+0x40>
     334:	00 00       	nop
     336:	80 81       	ld	r24, Z
     338:	8f 7b       	andi	r24, 0xBF	; 191
     33a:	80 83       	st	Z, r24
     33c:	08 95       	ret

0000033e <lcd_command>:
     33e:	cf 93       	push	r28
     340:	c8 2f       	mov	r28, r24
     342:	e2 e0       	ldi	r30, 0x02	; 2
     344:	f1 e0       	ldi	r31, 0x01	; 1
     346:	80 81       	ld	r24, Z
     348:	8f 7d       	andi	r24, 0xDF	; 223
     34a:	80 83       	st	Z, r24
     34c:	8c 2f       	mov	r24, r28
     34e:	d0 df       	rcall	.-96     	; 0x2f0 <lcd_nibble>
     350:	8c 2f       	mov	r24, r28
     352:	82 95       	swap	r24
     354:	80 7f       	andi	r24, 0xF0	; 240
     356:	cc df       	rcall	.-104    	; 0x2f0 <lcd_nibble>
     358:	87 ec       	ldi	r24, 0xC7	; 199
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	01 97       	sbiw	r24, 0x01	; 1
     35e:	f1 f7       	brne	.-4      	; 0x35c <lcd_command+0x1e>
     360:	00 c0       	rjmp	.+0      	; 0x362 <lcd_command+0x24>
     362:	00 00       	nop
     364:	c4 30       	cpi	r28, 0x04	; 4
     366:	18 f0       	brcs	.+6      	; 0x36e <lcd_command+0x30>
     368:	c0 38       	cpi	r28, 0x80	; 128
     36a:	50 f0       	brcs	.+20     	; 0x380 <lcd_command+0x42>
     36c:	07 c0       	rjmp	.+14     	; 0x37c <lcd_command+0x3e>
     36e:	8f e3       	ldi	r24, 0x3F	; 63
     370:	9f e1       	ldi	r25, 0x1F	; 31
     372:	01 97       	sbiw	r24, 0x01	; 1
     374:	f1 f7       	brne	.-4      	; 0x372 <lcd_command+0x34>
     376:	00 c0       	rjmp	.+0      	; 0x378 <lcd_command+0x3a>
     378:	00 00       	nop
     37a:	c0 e8       	ldi	r28, 0x80	; 128
     37c:	c0 93 00 02 	sts	0x0200, r28
     380:	cf 91       	pop	r28
     382:	08 95       	ret

00000384 <lcd_putchar>:
     384:	cf 93       	push	r28
     386:	c8 2f       	mov	r28, r24
     388:	e2 e0       	ldi	r30, 0x02	; 2
     38a:	f1 e0       	ldi	r31, 0x01	; 1
     38c:	80 81       	ld	r24, Z
     38e:	80 62       	ori	r24, 0x20	; 32
     390:	80 83       	st	Z, r24
     392:	8c 2f       	mov	r24, r28
     394:	ad df       	rcall	.-166    	; 0x2f0 <lcd_nibble>
     396:	8c 2f       	mov	r24, r28
     398:	82 95       	swap	r24
     39a:	80 7f       	andi	r24, 0xF0	; 240
     39c:	a9 df       	rcall	.-174    	; 0x2f0 <lcd_nibble>
     39e:	87 ec       	ldi	r24, 0xC7	; 199
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	01 97       	sbiw	r24, 0x01	; 1
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <lcd_putchar+0x1e>
     3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <lcd_putchar+0x24>
     3a8:	00 00       	nop
     3aa:	80 91 00 02 	lds	r24, 0x0200
     3ae:	8f 5f       	subi	r24, 0xFF	; 255
     3b0:	80 93 00 02 	sts	0x0200, r24
     3b4:	80 39       	cpi	r24, 0x90	; 144
     3b6:	21 f0       	breq	.+8      	; 0x3c0 <lcd_putchar+0x3c>
     3b8:	80 3d       	cpi	r24, 0xD0	; 208
     3ba:	21 f4       	brne	.+8      	; 0x3c4 <lcd_putchar+0x40>
     3bc:	80 e8       	ldi	r24, 0x80	; 128
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <lcd_putchar+0x3e>
     3c0:	80 ec       	ldi	r24, 0xC0	; 192
     3c2:	bd df       	rcall	.-134    	; 0x33e <lcd_command>
     3c4:	cf 91       	pop	r28
     3c6:	08 95       	ret

000003c8 <lcd_puts>:
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	ec 01       	movw	r28, r24
     3ce:	88 81       	ld	r24, Y
     3d0:	88 23       	and	r24, r24
     3d2:	29 f0       	breq	.+10     	; 0x3de <lcd_puts+0x16>
     3d4:	21 96       	adiw	r28, 0x01	; 1
     3d6:	d6 df       	rcall	.-84     	; 0x384 <lcd_putchar>
     3d8:	89 91       	ld	r24, Y+
     3da:	81 11       	cpse	r24, r1
     3dc:	fc cf       	rjmp	.-8      	; 0x3d6 <lcd_puts+0xe>
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	08 95       	ret

000003e4 <lcd_init>:


void lcd_init( void )
{
  LCD_DDR_D4 = 1;                               // enable output pins
     3e4:	9d 9a       	sbi	0x13, 5	; 19
  LCD_DDR_D5 = 1;
     3e6:	6b 9a       	sbi	0x0d, 3	; 13
  LCD_DDR_D6 = 1;
     3e8:	e1 e0       	ldi	r30, 0x01	; 1
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	80 81       	ld	r24, Z
     3ee:	88 60       	ori	r24, 0x08	; 8
     3f0:	80 83       	st	Z, r24
  LCD_DDR_D7 = 1;
     3f2:	80 81       	ld	r24, Z
     3f4:	80 61       	ori	r24, 0x10	; 16
     3f6:	80 83       	st	Z, r24
  LCD_DDR_RS = 1;
     3f8:	80 81       	ld	r24, Z
     3fa:	80 62       	ori	r24, 0x20	; 32
     3fc:	80 83       	st	Z, r24
  LCD_DDR_E0 = 1;
     3fe:	80 81       	ld	r24, Z
     400:	80 64       	ori	r24, 0x40	; 64
     402:	80 83       	st	Z, r24
  LCD_E0 = 0;
     404:	e2 e0       	ldi	r30, 0x02	; 2
     406:	f1 e0       	ldi	r31, 0x01	; 1
     408:	80 81       	ld	r24, Z
     40a:	8f 7b       	andi	r24, 0xBF	; 191
     40c:	80 83       	st	Z, r24
  LCD_RS = 0;                                   // send commands
     40e:	80 81       	ld	r24, Z
     410:	8f 7d       	andi	r24, 0xDF	; 223
     412:	80 83       	st	Z, r24
     414:	8f e5       	ldi	r24, 0x5F	; 95
     416:	9a ee       	ldi	r25, 0xEA	; 234
     418:	01 97       	sbiw	r24, 0x01	; 1
     41a:	f1 f7       	brne	.-4      	; 0x418 <lcd_init+0x34>
     41c:	00 c0       	rjmp	.+0      	; 0x41e <lcd_init+0x3a>
     41e:	00 00       	nop

  _delay_ms( 15 );
  lcd_nibble( 0x30 );
     420:	80 e3       	ldi	r24, 0x30	; 48
     422:	66 df       	rcall	.-308    	; 0x2f0 <lcd_nibble>
     424:	8f e0       	ldi	r24, 0x0F	; 15
     426:	90 e4       	ldi	r25, 0x40	; 64
     428:	01 97       	sbiw	r24, 0x01	; 1
     42a:	f1 f7       	brne	.-4      	; 0x428 <lcd_init+0x44>
     42c:	00 c0       	rjmp	.+0      	; 0x42e <lcd_init+0x4a>
     42e:	00 00       	nop
  _delay_ms( 4.1 );
  lcd_nibble( 0x30 );
     430:	80 e3       	ldi	r24, 0x30	; 48
     432:	5e df       	rcall	.-324    	; 0x2f0 <lcd_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     434:	8f e8       	ldi	r24, 0x8F	; 143
     436:	91 e0       	ldi	r25, 0x01	; 1
     438:	01 97       	sbiw	r24, 0x01	; 1
     43a:	f1 f7       	brne	.-4      	; 0x438 <lcd_init+0x54>
     43c:	00 c0       	rjmp	.+0      	; 0x43e <lcd_init+0x5a>
     43e:	00 00       	nop
  _delay_us( 100 );
  lcd_nibble( 0x30 );
     440:	80 e3       	ldi	r24, 0x30	; 48
     442:	56 df       	rcall	.-340    	; 0x2f0 <lcd_nibble>
     444:	87 ec       	ldi	r24, 0xC7	; 199
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	01 97       	sbiw	r24, 0x01	; 1
     44a:	f1 f7       	brne	.-4      	; 0x448 <lcd_init+0x64>
     44c:	00 c0       	rjmp	.+0      	; 0x44e <lcd_init+0x6a>
     44e:	00 00       	nop
  _delay_us( LCD_TIME_DAT );
  lcd_nibble( 0x20 );                           // 4 bit mode
     450:	80 e2       	ldi	r24, 0x20	; 32
     452:	4e df       	rcall	.-356    	; 0x2f0 <lcd_nibble>
     454:	87 ec       	ldi	r24, 0xC7	; 199
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	01 97       	sbiw	r24, 0x01	; 1
     45a:	f1 f7       	brne	.-4      	; 0x458 <lcd_init+0x74>
     45c:	00 c0       	rjmp	.+0      	; 0x45e <lcd_init+0x7a>
     45e:	00 00       	nop
  _delay_us( LCD_TIME_DAT );
#if LCD_LINE == 1
  lcd_command( 0x20 );                          // 1 line
#else
  lcd_command( 0x28 );                          // 2 lines 5*7
     460:	88 e2       	ldi	r24, 0x28	; 40
     462:	6d df       	rcall	.-294    	; 0x33e <lcd_command>
#endif
  lcd_command( 0x08 );                          // display off
     464:	88 e0       	ldi	r24, 0x08	; 8
     466:	6b df       	rcall	.-298    	; 0x33e <lcd_command>
  lcd_command( 0x01 );                          // display clear
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	69 df       	rcall	.-302    	; 0x33e <lcd_command>
  lcd_command( 0x06 );                          // cursor increment
     46c:	86 e0       	ldi	r24, 0x06	; 6
     46e:	67 df       	rcall	.-306    	; 0x33e <lcd_command>
  lcd_command( 0x0C );                          // on, no cursor, no blink
     470:	8c e0       	ldi	r24, 0x0C	; 12
     472:	65 cf       	rjmp	.-310    	; 0x33e <lcd_command>
     474:	08 95       	ret

00000476 <init_LED_PORTL_pin0>:
void init_LED_PORTL_pin6(void) {
    DDRL |= _BV(DDL6);
}

void init_LED_PORTL_pin7(void) {
    DDRL |= _BV(DDL7);
     476:	ea e0       	ldi	r30, 0x0A	; 10
     478:	f1 e0       	ldi	r31, 0x01	; 1
     47a:	80 81       	ld	r24, Z
     47c:	81 60       	ori	r24, 0x01	; 1
     47e:	80 83       	st	Z, r24
     480:	08 95       	ret

00000482 <init_LED_PORTL_pin1>:
     482:	ea e0       	ldi	r30, 0x0A	; 10
     484:	f1 e0       	ldi	r31, 0x01	; 1
     486:	80 81       	ld	r24, Z
     488:	82 60       	ori	r24, 0x02	; 2
     48a:	80 83       	st	Z, r24
     48c:	08 95       	ret

0000048e <init_LED_PORTL_pin2>:
     48e:	ea e0       	ldi	r30, 0x0A	; 10
     490:	f1 e0       	ldi	r31, 0x01	; 1
     492:	80 81       	ld	r24, Z
     494:	84 60       	ori	r24, 0x04	; 4
     496:	80 83       	st	Z, r24
     498:	08 95       	ret

0000049a <init_LED_PORTL_pin5>:
     49a:	ea e0       	ldi	r30, 0x0A	; 10
     49c:	f1 e0       	ldi	r31, 0x01	; 1
     49e:	80 81       	ld	r24, Z
     4a0:	80 62       	ori	r24, 0x20	; 32
     4a2:	80 83       	st	Z, r24
     4a4:	08 95       	ret

000004a6 <init_LED_PORTL_pin6>:
     4a6:	ea e0       	ldi	r30, 0x0A	; 10
     4a8:	f1 e0       	ldi	r31, 0x01	; 1
     4aa:	80 81       	ld	r24, Z
     4ac:	80 64       	ori	r24, 0x40	; 64
     4ae:	80 83       	st	Z, r24
     4b0:	08 95       	ret

000004b2 <enable_LED>:
}

void enable_LED(unsigned int mask) {
    PORTL |= _BV(mask);
     4b2:	eb e0       	ldi	r30, 0x0B	; 11
     4b4:	f1 e0       	ldi	r31, 0x01	; 1
     4b6:	90 81       	ld	r25, Z
     4b8:	21 e0       	ldi	r18, 0x01	; 1
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <enable_LED+0x10>
     4be:	22 0f       	add	r18, r18
     4c0:	33 1f       	adc	r19, r19
     4c2:	8a 95       	dec	r24
     4c4:	e2 f7       	brpl	.-8      	; 0x4be <enable_LED+0xc>
     4c6:	29 2b       	or	r18, r25
     4c8:	20 83       	st	Z, r18
     4ca:	08 95       	ret

000004cc <disable_LED>:
}

void disable_LED(unsigned int mask) {
    PORTL &= ~_BV(mask);
     4cc:	eb e0       	ldi	r30, 0x0B	; 11
     4ce:	f1 e0       	ldi	r31, 0x01	; 1
     4d0:	90 81       	ld	r25, Z
     4d2:	21 e0       	ldi	r18, 0x01	; 1
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <disable_LED+0x10>
     4d8:	22 0f       	add	r18, r18
     4da:	33 1f       	adc	r19, r19
     4dc:	8a 95       	dec	r24
     4de:	e2 f7       	brpl	.-8      	; 0x4d8 <disable_LED+0xc>
     4e0:	20 95       	com	r18
     4e2:	29 23       	and	r18, r25
     4e4:	20 83       	st	Z, r18
     4e6:	08 95       	ret

000004e8 <Poll_Joystick>:
	
	Roomba_Drive(100, 0x8000);
}


void Poll_Joystick(){
     4e8:	0f 93       	push	r16
     4ea:	1f 93       	push	r17
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	00 d0       	rcall	.+0      	; 0x4f2 <Poll_Joystick+0xa>
     4f2:	00 d0       	rcall	.+0      	; 0x4f4 <Poll_Joystick+0xc>
     4f4:	cd b7       	in	r28, 0x3d	; 61
     4f6:	de b7       	in	r29, 0x3e	; 62
	
	char buffer[6];
	uint16_t joystick_y;
	uint16_t joystick_x;
	joystick_x = adc_read(7);
     4f8:	87 e0       	ldi	r24, 0x07	; 7
     4fa:	d4 de       	rcall	.-600    	; 0x2a4 <adc_read>
     4fc:	18 2f       	mov	r17, r24
     4fe:	09 2f       	mov	r16, r25
	joystick_y = adc_read(6);
     500:	86 e0       	ldi	r24, 0x06	; 6
     502:	d0 de       	rcall	.-608    	; 0x2a4 <adc_read>
	
	
	sprintf(buffer, "s%hu%hue", joystick_x, joystick_y);
     504:	9f 93       	push	r25
     506:	8f 93       	push	r24
     508:	0f 93       	push	r16
     50a:	1f 93       	push	r17
     50c:	8f e0       	ldi	r24, 0x0F	; 15
     50e:	92 e0       	ldi	r25, 0x02	; 2
     510:	9f 93       	push	r25
     512:	8f 93       	push	r24
     514:	8e 01       	movw	r16, r28
     516:	0f 5f       	subi	r16, 0xFF	; 255
     518:	1f 4f       	sbci	r17, 0xFF	; 255
     51a:	1f 93       	push	r17
     51c:	0f 93       	push	r16
     51e:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <sprintf>
	
	uart_send_string(buffer, BT_UART);
     522:	61 e0       	ldi	r22, 0x01	; 1
     524:	70 e0       	ldi	r23, 0x00	; 0
     526:	c8 01       	movw	r24, r16
     528:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <uart_send_string>
     52c:	0f b6       	in	r0, 0x3f	; 63
     52e:	f8 94       	cli
     530:	de bf       	out	0x3e, r29	; 62
     532:	0f be       	out	0x3f, r0	; 63
     534:	cd bf       	out	0x3d, r28	; 61
}
     536:	26 96       	adiw	r28, 0x06	; 6
     538:	0f b6       	in	r0, 0x3f	; 63
     53a:	f8 94       	cli
     53c:	de bf       	out	0x3e, r29	; 62
     53e:	0f be       	out	0x3f, r0	; 63
     540:	cd bf       	out	0x3d, r28	; 61
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	1f 91       	pop	r17
     548:	0f 91       	pop	r16
     54a:	08 95       	ret

0000054c <a_main>:

// Application level main function
// Creates the required tasks and then terminates
void a_main() {
     54c:	cf 93       	push	r28
     54e:	df 93       	push	r29
     550:	cd b7       	in	r28, 0x3d	; 61
     552:	de b7       	in	r29, 0x3e	; 62
     554:	60 97       	sbiw	r28, 0x10	; 16
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	f8 94       	cli
     55a:	de bf       	out	0x3e, r29	; 62
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	cd bf       	out	0x3d, r28	; 61
	//portL2_Mutex = Mutex_Init();
	//portL6_Mutex = Mutex_Init();
	//
	//e1 = Event_Init();
	//e2 = Event_Init();
	adc_init();
     560:	9a de       	rcall	.-716    	; 0x296 <adc_init>
	
	//PongPID = Task_Create(Pong, 8, 1);
	//PingPID = Task_Create(Ping, 8, 1);
	//IdlePID = Task_Create(Idle, MINPRIORITY, 1);
	lcd_init(); // initialized the LCD
     562:	40 df       	rcall	.-384    	; 0x3e4 <lcd_init>
	DDRB |= (1<<DDB4); // enable output mode of Digital Pin 10 (PORTB Pin 4) for backlit control
     564:	24 9a       	sbi	0x04, 4	; 4
	PORTB |= (1<<DDB4); // enable back light
     566:	2c 9a       	sbi	0x05, 4	; 5
	
	//sprintf(line, "ADC: %4d", adc_test);
	lcd_puts(line);
     568:	ce 01       	movw	r24, r28
     56a:	01 96       	adiw	r24, 0x01	; 1
     56c:	2d df       	rcall	.-422    	; 0x3c8 <lcd_puts>
	Roomba_Init();
     56e:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <Roomba_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     572:	2f ef       	ldi	r18, 0xFF	; 255
     574:	83 ec       	ldi	r24, 0xC3	; 195
     576:	99 e0       	ldi	r25, 0x09	; 9
     578:	21 50       	subi	r18, 0x01	; 1
     57a:	80 40       	sbci	r24, 0x00	; 0
     57c:	90 40       	sbci	r25, 0x00	; 0
     57e:	e1 f7       	brne	.-8      	; 0x578 <a_main+0x2c>
     580:	00 c0       	rjmp	.+0      	; 0x582 <a_main+0x36>
     582:	00 00       	nop
	//Roomba_PlaySong(50);
	
	for (;;)
	{
		_delay_ms(200);
		Poll_Joystick();
     584:	b1 df       	rcall	.-158    	; 0x4e8 <Poll_Joystick>
		
	}
     586:	f5 cf       	rjmp	.-22     	; 0x572 <a_main+0x26>

00000588 <Task_Terminate>:
/**
  * Application level task getarg to return intiial arg value
  */
int Task_GetArg(PID p) {
	return (Cp->arg);
}
     588:	80 91 29 02 	lds	r24, 0x0229
     58c:	90 91 2a 02 	lds	r25, 0x022A
     590:	89 2b       	or	r24, r25
     592:	51 f0       	breq	.+20     	; 0x5a8 <Task_Terminate+0x20>
     594:	f8 94       	cli
     596:	e0 91 2b 02 	lds	r30, 0x022B
     59a:	f0 91 2c 02 	lds	r31, 0x022C
     59e:	e3 5f       	subi	r30, 0xF3	; 243
     5a0:	fe 4f       	sbci	r31, 0xFE	; 254
     5a2:	84 e0       	ldi	r24, 0x04	; 4
     5a4:	80 83       	st	Z, r24
     5a6:	22 ce       	rjmp	.-956    	; 0x1ec <Enter_Kernel>
     5a8:	08 95       	ret

000005aa <Kernel_Create_Task_At>:
     5aa:	ef 92       	push	r14
     5ac:	ff 92       	push	r15
     5ae:	0f 93       	push	r16
     5b0:	1f 93       	push	r17
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	1f 92       	push	r1
     5b8:	1f 92       	push	r1
     5ba:	cd b7       	in	r28, 0x3d	; 61
     5bc:	de b7       	in	r29, 0x3e	; 62
     5be:	9a 83       	std	Y+2, r25	; 0x02
     5c0:	89 83       	std	Y+1, r24	; 0x01
     5c2:	dc 01       	movw	r26, r24
     5c4:	7c 01       	movw	r14, r24
     5c6:	04 e0       	ldi	r16, 0x04	; 4
     5c8:	e0 0e       	add	r14, r16
     5ca:	f1 1c       	adc	r15, r1
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	91 e0       	ldi	r25, 0x01	; 1
     5d0:	f7 01       	movw	r30, r14
     5d2:	8c 01       	movw	r16, r24
     5d4:	11 92       	st	Z+, r1
     5d6:	01 50       	subi	r16, 0x01	; 1
     5d8:	10 40       	sbci	r17, 0x00	; 0
     5da:	e1 f7       	brne	.-8      	; 0x5d4 <Kernel_Create_Task_At+0x2a>
     5dc:	fd 01       	movw	r30, r26
     5de:	ed 5f       	subi	r30, 0xFD	; 253
     5e0:	fe 4f       	sbci	r31, 0xFE	; 254
     5e2:	84 ec       	ldi	r24, 0xC4	; 196
     5e4:	92 e0       	ldi	r25, 0x02	; 2
     5e6:	80 83       	st	Z, r24
     5e8:	31 97       	sbiw	r30, 0x01	; 1
     5ea:	90 83       	st	Z, r25
     5ec:	31 97       	sbiw	r30, 0x01	; 1
     5ee:	60 83       	st	Z, r22
     5f0:	31 97       	sbiw	r30, 0x01	; 1
     5f2:	70 83       	st	Z, r23
     5f4:	31 97       	sbiw	r30, 0x01	; 1
     5f6:	10 82       	st	Z, r1
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	92 93       	st	-Z, r25
     5fc:	9f 5f       	subi	r25, 0xFF	; 255
     5fe:	92 32       	cpi	r25, 0x22	; 34
     600:	e1 f7       	brne	.-8      	; 0x5fa <Kernel_Create_Task_At+0x50>
     602:	a4 52       	subi	r26, 0x24	; 36
     604:	bf 4f       	sbci	r27, 0xFF	; 255
     606:	e9 81       	ldd	r30, Y+1	; 0x01
     608:	fa 81       	ldd	r31, Y+2	; 0x02
     60a:	b3 83       	std	Z+3, r27	; 0x03
     60c:	a2 83       	std	Z+2, r26	; 0x02
     60e:	df 01       	movw	r26, r30
     610:	a5 5f       	subi	r26, 0xF5	; 245
     612:	be 4f       	sbci	r27, 0xFE	; 254
     614:	11 96       	adiw	r26, 0x01	; 1
     616:	7c 93       	st	X, r23
     618:	6e 93       	st	-X, r22
     61a:	12 96       	adiw	r26, 0x02	; 2
     61c:	1c 92       	st	X, r1
     61e:	80 91 25 02 	lds	r24, 0x0225
     622:	90 91 26 02 	lds	r25, 0x0226
     626:	91 83       	std	Z+1, r25	; 0x01
     628:	80 83       	st	Z, r24
     62a:	89 81       	ldd	r24, Y+1	; 0x01
     62c:	9a 81       	ldd	r25, Y+2	; 0x02
     62e:	fc 01       	movw	r30, r24
     630:	eb 5f       	subi	r30, 0xFB	; 251
     632:	fe 4f       	sbci	r31, 0xFE	; 254
     634:	51 83       	std	Z+1, r21	; 0x01
     636:	40 83       	st	Z, r20
     638:	32 96       	adiw	r30, 0x02	; 2
     63a:	51 83       	std	Z+1, r21	; 0x01
     63c:	40 83       	st	Z, r20
     63e:	32 96       	adiw	r30, 0x02	; 2
     640:	31 83       	std	Z+1, r19	; 0x01
     642:	20 83       	st	Z, r18
     644:	71 96       	adiw	r30, 0x11	; 17
     646:	11 82       	std	Z+1, r1	; 0x01
     648:	10 82       	st	Z, r1
     64a:	34 97       	sbiw	r30, 0x04	; 4
     64c:	23 e6       	ldi	r18, 0x63	; 99
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	31 83       	std	Z+1, r19	; 0x01
     652:	20 83       	st	Z, r18
     654:	20 91 27 02 	lds	r18, 0x0227
     658:	30 91 28 02 	lds	r19, 0x0228
     65c:	2f 5f       	subi	r18, 0xFF	; 255
     65e:	3f 4f       	sbci	r19, 0xFF	; 255
     660:	30 93 28 02 	sts	0x0228, r19
     664:	20 93 27 02 	sts	0x0227, r18
     668:	20 91 25 02 	lds	r18, 0x0225
     66c:	30 91 26 02 	lds	r19, 0x0226
     670:	2f 5f       	subi	r18, 0xFF	; 255
     672:	3f 4f       	sbci	r19, 0xFF	; 255
     674:	30 93 26 02 	sts	0x0226, r19
     678:	20 93 25 02 	sts	0x0225, r18
     67c:	72 97       	sbiw	r30, 0x12	; 18
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	80 83       	st	Z, r24
     682:	4d e1       	ldi	r20, 0x1D	; 29
     684:	52 e0       	ldi	r21, 0x02	; 2
     686:	6f ec       	ldi	r22, 0xCF	; 207
     688:	74 e1       	ldi	r23, 0x14	; 20
     68a:	ce 01       	movw	r24, r28
     68c:	01 96       	adiw	r24, 0x01	; 1
     68e:	0e 94 93 0b 	call	0x1726	; 0x1726 <enqueueRQ>
     692:	e9 81       	ldd	r30, Y+1	; 0x01
     694:	fa 81       	ldd	r31, Y+2	; 0x02
     696:	80 81       	ld	r24, Z
     698:	91 81       	ldd	r25, Z+1	; 0x01
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	1f 91       	pop	r17
     6a4:	0f 91       	pop	r16
     6a6:	ff 90       	pop	r15
     6a8:	ef 90       	pop	r14
     6aa:	08 95       	ret

000006ac <Kernel_Create_Task>:
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	ec 01       	movw	r28, r24
     6b2:	80 91 27 02 	lds	r24, 0x0227
     6b6:	90 91 28 02 	lds	r25, 0x0228
     6ba:	40 97       	sbiw	r24, 0x10	; 16
     6bc:	21 f1       	breq	.+72     	; 0x706 <Kernel_Create_Task+0x5a>
     6be:	80 91 91 03 	lds	r24, 0x0391
     6c2:	88 23       	and	r24, r24
     6c4:	71 f0       	breq	.+28     	; 0x6e2 <Kernel_Create_Task+0x36>
     6c6:	af ea       	ldi	r26, 0xAF	; 175
     6c8:	b4 e0       	ldi	r27, 0x04	; 4
     6ca:	e1 e0       	ldi	r30, 0x01	; 1
     6cc:	f0 e0       	ldi	r31, 0x00	; 0
     6ce:	9c 91       	ld	r25, X
     6d0:	99 23       	and	r25, r25
     6d2:	49 f0       	breq	.+18     	; 0x6e6 <Kernel_Create_Task+0x3a>
     6d4:	31 96       	adiw	r30, 0x01	; 1
     6d6:	a2 5e       	subi	r26, 0xE2	; 226
     6d8:	be 4f       	sbci	r27, 0xFE	; 254
     6da:	e0 31       	cpi	r30, 0x10	; 16
     6dc:	f1 05       	cpc	r31, r1
     6de:	b9 f7       	brne	.-18     	; 0x6ce <Kernel_Create_Task+0x22>
     6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <Kernel_Create_Task+0x3a>
     6e2:	e0 e0       	ldi	r30, 0x00	; 0
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	9a 01       	movw	r18, r20
     6e8:	ab 01       	movw	r20, r22
     6ea:	be 01       	movw	r22, r28
     6ec:	ae e1       	ldi	r26, 0x1E	; 30
     6ee:	b1 e0       	ldi	r27, 0x01	; 1
     6f0:	ea 9f       	mul	r30, r26
     6f2:	c0 01       	movw	r24, r0
     6f4:	eb 9f       	mul	r30, r27
     6f6:	90 0d       	add	r25, r0
     6f8:	fa 9f       	mul	r31, r26
     6fa:	90 0d       	add	r25, r0
     6fc:	11 24       	eor	r1, r1
     6fe:	83 57       	subi	r24, 0x73	; 115
     700:	9d 4f       	sbci	r25, 0xFD	; 253
     702:	53 df       	rcall	.-346    	; 0x5aa <Kernel_Create_Task_At>
     704:	00 c0       	rjmp	.+0      	; 0x706 <Kernel_Create_Task+0x5a>
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	08 95       	ret

0000070c <Kernel_Init_Mutex_At>:
     70c:	fc 01       	movw	r30, r24
     70e:	80 91 23 02 	lds	r24, 0x0223
     712:	90 91 24 02 	lds	r25, 0x0224
     716:	91 83       	std	Z+1, r25	; 0x01
     718:	80 83       	st	Z, r24
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	82 83       	std	Z+2, r24	; 0x02
     71e:	80 91 23 02 	lds	r24, 0x0223
     722:	90 91 24 02 	lds	r25, 0x0224
     726:	01 96       	adiw	r24, 0x01	; 1
     728:	90 93 24 02 	sts	0x0224, r25
     72c:	80 93 23 02 	sts	0x0223, r24
     730:	80 81       	ld	r24, Z
     732:	91 81       	ldd	r25, Z+1	; 0x01
     734:	08 95       	ret

00000736 <Kernel_Init_Event_At>:
     736:	fc 01       	movw	r30, r24
     738:	80 91 21 02 	lds	r24, 0x0221
     73c:	90 91 22 02 	lds	r25, 0x0222
     740:	91 83       	std	Z+1, r25	; 0x01
     742:	80 83       	st	Z, r24
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	82 83       	std	Z+2, r24	; 0x02
     748:	14 82       	std	Z+4, r1	; 0x04
     74a:	13 82       	std	Z+3, r1	; 0x03
     74c:	80 91 21 02 	lds	r24, 0x0221
     750:	90 91 22 02 	lds	r25, 0x0222
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	90 93 22 02 	sts	0x0222, r25
     75a:	80 93 21 02 	sts	0x0221, r24
     75e:	80 81       	ld	r24, Z
     760:	91 81       	ldd	r25, Z+1	; 0x01
     762:	08 95       	ret

00000764 <OS_Init>:
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	10 92 28 02 	sts	0x0228, r1
     76c:	10 92 27 02 	sts	0x0227, r1
     770:	10 92 2a 02 	sts	0x022A, r1
     774:	10 92 29 02 	sts	0x0229, r1
     778:	10 92 24 02 	sts	0x0224, r1
     77c:	10 92 23 02 	sts	0x0223, r1
     780:	10 92 22 02 	sts	0x0222, r1
     784:	10 92 21 02 	sts	0x0221, r1
     788:	10 92 26 02 	sts	0x0226, r1
     78c:	10 92 25 02 	sts	0x0225, r1
     790:	ed e8       	ldi	r30, 0x8D	; 141
     792:	f2 e0       	ldi	r31, 0x02	; 2
     794:	a1 e9       	ldi	r26, 0x91	; 145
     796:	b3 e0       	ldi	r27, 0x03	; 3
     798:	4d e6       	ldi	r20, 0x6D	; 109
     79a:	54 e1       	ldi	r21, 0x14	; 20
     79c:	2e e1       	ldi	r18, 0x1E	; 30
     79e:	31 e0       	ldi	r19, 0x01	; 1
     7a0:	83 e6       	ldi	r24, 0x63	; 99
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	ef 01       	movw	r28, r30
     7a6:	b9 01       	movw	r22, r18
     7a8:	19 92       	st	Y+, r1
     7aa:	61 50       	subi	r22, 0x01	; 1
     7ac:	70 40       	sbci	r23, 0x00	; 0
     7ae:	e1 f7       	brne	.-8      	; 0x7a8 <OS_Init+0x44>
     7b0:	1c 92       	st	X, r1
     7b2:	53 96       	adiw	r26, 0x13	; 19
     7b4:	9c 93       	st	X, r25
     7b6:	8e 93       	st	-X, r24
     7b8:	52 97       	sbiw	r26, 0x12	; 18
     7ba:	11 82       	std	Z+1, r1	; 0x01
     7bc:	10 82       	st	Z, r1
     7be:	e2 5e       	subi	r30, 0xE2	; 226
     7c0:	fe 4f       	sbci	r31, 0xFE	; 254
     7c2:	a2 5e       	subi	r26, 0xE2	; 226
     7c4:	be 4f       	sbci	r27, 0xFE	; 254
     7c6:	e4 17       	cp	r30, r20
     7c8:	f5 07       	cpc	r31, r21
     7ca:	61 f7       	brne	.-40     	; 0x7a4 <OS_Init+0x40>
     7cc:	e7 e5       	ldi	r30, 0x57	; 87
     7ce:	f2 e0       	ldi	r31, 0x02	; 2
     7d0:	2f e8       	ldi	r18, 0x8F	; 143
     7d2:	32 e0       	ldi	r19, 0x02	; 2
     7d4:	87 e0       	ldi	r24, 0x07	; 7
     7d6:	df 01       	movw	r26, r30
     7d8:	12 97       	sbiw	r26, 0x02	; 2
     7da:	ed 01       	movw	r28, r26
     7dc:	68 2f       	mov	r22, r24
     7de:	19 92       	st	Y+, r1
     7e0:	6a 95       	dec	r22
     7e2:	e9 f7       	brne	.-6      	; 0x7de <OS_Init+0x7a>
     7e4:	10 82       	st	Z, r1
     7e6:	37 96       	adiw	r30, 0x07	; 7
     7e8:	e2 17       	cp	r30, r18
     7ea:	f3 07       	cpc	r31, r19
     7ec:	a1 f7       	brne	.-24     	; 0x7d6 <OS_Init+0x72>
     7ee:	ef e2       	ldi	r30, 0x2F	; 47
     7f0:	f2 e0       	ldi	r31, 0x02	; 2
     7f2:	27 e5       	ldi	r18, 0x57	; 87
     7f4:	32 e0       	ldi	r19, 0x02	; 2
     7f6:	85 e0       	ldi	r24, 0x05	; 5
     7f8:	df 01       	movw	r26, r30
     7fa:	12 97       	sbiw	r26, 0x02	; 2
     7fc:	ed 01       	movw	r28, r26
     7fe:	68 2f       	mov	r22, r24
     800:	19 92       	st	Y+, r1
     802:	6a 95       	dec	r22
     804:	e9 f7       	brne	.-6      	; 0x800 <OS_Init+0x9c>
     806:	10 82       	st	Z, r1
     808:	35 96       	adiw	r30, 0x05	; 5
     80a:	e2 17       	cp	r30, r18
     80c:	f3 07       	cpc	r31, r19
     80e:	a1 f7       	brne	.-24     	; 0x7f8 <OS_Init+0x94>
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	08 95       	ret

00000816 <OS_Abort>:
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 c4 11 	call	0x2388	; 0x2388 <_exit>

0000081e <Dispatch>:
     81e:	6d e1       	ldi	r22, 0x1D	; 29
     820:	72 e0       	ldi	r23, 0x02	; 2
     822:	8f ec       	ldi	r24, 0xCF	; 207
     824:	94 e1       	ldi	r25, 0x14	; 20
     826:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <dequeueRQ>
     82a:	fc 01       	movw	r30, r24
     82c:	90 93 2c 02 	sts	0x022C, r25
     830:	80 93 2b 02 	sts	0x022B, r24
     834:	89 2b       	or	r24, r25
     836:	09 f4       	brne	.+2      	; 0x83a <Dispatch+0x1c>
     838:	ee df       	rcall	.-36     	; 0x816 <OS_Abort>
     83a:	82 81       	ldd	r24, Z+2	; 0x02
     83c:	93 81       	ldd	r25, Z+3	; 0x03
     83e:	90 93 f0 14 	sts	0x14F0, r25
     842:	80 93 ef 14 	sts	0x14EF, r24
     846:	82 e0       	ldi	r24, 0x02	; 2
     848:	df 01       	movw	r26, r30
     84a:	ac 5f       	subi	r26, 0xFC	; 252
     84c:	be 4f       	sbci	r27, 0xFE	; 254
     84e:	8c 93       	st	X, r24
     850:	80 81       	ld	r24, Z
     852:	91 81       	ldd	r25, Z+1	; 0x01
     854:	02 97       	sbiw	r24, 0x02	; 2
     856:	20 f4       	brcc	.+8      	; 0x860 <Dispatch+0x42>
     858:	82 e0       	ldi	r24, 0x02	; 2
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	2a ce       	rjmp	.-940    	; 0x4b2 <enable_LED>
     85e:	08 95       	ret
     860:	80 81       	ld	r24, Z
     862:	91 81       	ldd	r25, Z+1	; 0x01
     864:	02 97       	sbiw	r24, 0x02	; 2
     866:	21 f4       	brne	.+8      	; 0x870 <Dispatch+0x52>
     868:	85 e0       	ldi	r24, 0x05	; 5
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	22 ce       	rjmp	.-956    	; 0x4b2 <enable_LED>
     86e:	08 95       	ret
     870:	80 81       	ld	r24, Z
     872:	91 81       	ldd	r25, Z+1	; 0x01
     874:	03 97       	sbiw	r24, 0x03	; 3
     876:	19 f4       	brne	.+6      	; 0x87e <Dispatch+0x60>
     878:	86 e0       	ldi	r24, 0x06	; 6
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	1a ce       	rjmp	.-972    	; 0x4b2 <enable_LED>
     87e:	08 95       	ret

00000880 <Kernel_Unlock_Mutex>:
     880:	0f 93       	push	r16
     882:	1f 93       	push	r17
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	1f 92       	push	r1
     88a:	1f 92       	push	r1
     88c:	cd b7       	in	r28, 0x3d	; 61
     88e:	de b7       	in	r29, 0x3e	; 62
     890:	a0 91 2b 02 	lds	r26, 0x022B
     894:	b0 91 2c 02 	lds	r27, 0x022C
     898:	fd 01       	movw	r30, r26
     89a:	ec 5e       	subi	r30, 0xEC	; 236
     89c:	fe 4f       	sbci	r31, 0xFE	; 254
     89e:	40 81       	ld	r20, Z
     8a0:	51 81       	ldd	r21, Z+1	; 0x01
     8a2:	e5 e5       	ldi	r30, 0x55	; 85
     8a4:	f2 e0       	ldi	r31, 0x02	; 2
     8a6:	00 e0       	ldi	r16, 0x00	; 0
     8a8:	10 e0       	ldi	r17, 0x00	; 0
     8aa:	80 81       	ld	r24, Z
     8ac:	91 81       	ldd	r25, Z+1	; 0x01
     8ae:	84 17       	cp	r24, r20
     8b0:	95 07       	cpc	r25, r21
     8b2:	39 f0       	breq	.+14     	; 0x8c2 <Kernel_Unlock_Mutex+0x42>
     8b4:	0f 5f       	subi	r16, 0xFF	; 255
     8b6:	1f 4f       	sbci	r17, 0xFF	; 255
     8b8:	37 96       	adiw	r30, 0x07	; 7
     8ba:	08 30       	cpi	r16, 0x08	; 8
     8bc:	11 05       	cpc	r17, r1
     8be:	a9 f7       	brne	.-22     	; 0x8aa <Kernel_Unlock_Mutex+0x2a>
     8c0:	f7 c0       	rjmp	.+494    	; 0xab0 <Kernel_Unlock_Mutex+0x230>
     8c2:	8d 91       	ld	r24, X+
     8c4:	9c 91       	ld	r25, X
     8c6:	11 97       	sbiw	r26, 0x01	; 1
     8c8:	27 e0       	ldi	r18, 0x07	; 7
     8ca:	20 9f       	mul	r18, r16
     8cc:	f0 01       	movw	r30, r0
     8ce:	21 9f       	mul	r18, r17
     8d0:	f0 0d       	add	r31, r0
     8d2:	11 24       	eor	r1, r1
     8d4:	eb 5a       	subi	r30, 0xAB	; 171
     8d6:	fd 4f       	sbci	r31, 0xFD	; 253
     8d8:	23 81       	ldd	r18, Z+3	; 0x03
     8da:	34 81       	ldd	r19, Z+4	; 0x04
     8dc:	28 17       	cp	r18, r24
     8de:	39 07       	cpc	r19, r25
     8e0:	09 f0       	breq	.+2      	; 0x8e4 <Kernel_Unlock_Mutex+0x64>
     8e2:	e6 c0       	rjmp	.+460    	; 0xab0 <Kernel_Unlock_Mutex+0x230>
     8e4:	ac 5f       	subi	r26, 0xFC	; 252
     8e6:	be 4f       	sbci	r27, 0xFE	; 254
     8e8:	8c 91       	ld	r24, X
     8ea:	86 30       	cpi	r24, 0x06	; 6
     8ec:	09 f0       	breq	.+2      	; 0x8f0 <Kernel_Unlock_Mutex+0x70>
     8ee:	4d c0       	rjmp	.+154    	; 0x98a <Kernel_Unlock_Mutex+0x10a>
     8f0:	69 e1       	ldi	r22, 0x19	; 25
     8f2:	72 e0       	ldi	r23, 0x02	; 2
     8f4:	81 ef       	ldi	r24, 0xF1	; 241
     8f6:	94 e1       	ldi	r25, 0x14	; 20
     8f8:	79 d7       	rcall	.+3826   	; 0x17ec <dequeueWQ>
     8fa:	9a 83       	std	Y+2, r25	; 0x02
     8fc:	89 83       	std	Y+1, r24	; 0x01
     8fe:	00 97       	sbiw	r24, 0x00	; 0
     900:	79 f4       	brne	.+30     	; 0x920 <Kernel_Unlock_Mutex+0xa0>
     902:	87 e0       	ldi	r24, 0x07	; 7
     904:	80 9f       	mul	r24, r16
     906:	f0 01       	movw	r30, r0
     908:	81 9f       	mul	r24, r17
     90a:	f0 0d       	add	r31, r0
     90c:	11 24       	eor	r1, r1
     90e:	eb 5a       	subi	r30, 0xAB	; 171
     910:	fd 4f       	sbci	r31, 0xFD	; 253
     912:	16 82       	std	Z+6, r1	; 0x06
     914:	15 82       	std	Z+5, r1	; 0x05
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	82 83       	std	Z+2, r24	; 0x02
     91a:	14 82       	std	Z+4, r1	; 0x04
     91c:	13 82       	std	Z+3, r1	; 0x03
     91e:	c8 c0       	rjmp	.+400    	; 0xab0 <Kernel_Unlock_Mutex+0x230>
     920:	27 e0       	ldi	r18, 0x07	; 7
     922:	20 9f       	mul	r18, r16
     924:	f0 01       	movw	r30, r0
     926:	21 9f       	mul	r18, r17
     928:	f0 0d       	add	r31, r0
     92a:	11 24       	eor	r1, r1
     92c:	eb 5a       	subi	r30, 0xAB	; 171
     92e:	fd 4f       	sbci	r31, 0xFD	; 253
     930:	21 e0       	ldi	r18, 0x01	; 1
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	36 83       	std	Z+6, r19	; 0x06
     936:	25 83       	std	Z+5, r18	; 0x05
     938:	dc 01       	movw	r26, r24
     93a:	2d 91       	ld	r18, X+
     93c:	3c 91       	ld	r19, X
     93e:	34 83       	std	Z+4, r19	; 0x04
     940:	23 83       	std	Z+3, r18	; 0x03
     942:	20 91 2b 02 	lds	r18, 0x022B
     946:	30 91 2c 02 	lds	r19, 0x022C
     94a:	d9 01       	movw	r26, r18
     94c:	a9 5f       	subi	r26, 0xF9	; 249
     94e:	be 4f       	sbci	r27, 0xFE	; 254
     950:	4d 91       	ld	r20, X+
     952:	5c 91       	ld	r21, X
     954:	11 97       	sbiw	r26, 0x01	; 1
     956:	fc 01       	movw	r30, r24
     958:	e9 5f       	subi	r30, 0xF9	; 249
     95a:	fe 4f       	sbci	r31, 0xFE	; 254
     95c:	51 83       	std	Z+1, r21	; 0x01
     95e:	40 83       	st	Z, r20
     960:	33 97       	sbiw	r30, 0x03	; 3
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	80 83       	st	Z, r24
     966:	f9 01       	movw	r30, r18
     968:	eb 5f       	subi	r30, 0xFB	; 251
     96a:	fe 4f       	sbci	r31, 0xFE	; 254
     96c:	40 81       	ld	r20, Z
     96e:	51 81       	ldd	r21, Z+1	; 0x01
     970:	11 96       	adiw	r26, 0x01	; 1
     972:	5c 93       	st	X, r21
     974:	4e 93       	st	-X, r20
     976:	31 97       	sbiw	r30, 0x01	; 1
     978:	80 83       	st	Z, r24
     97a:	4d e1       	ldi	r20, 0x1D	; 29
     97c:	52 e0       	ldi	r21, 0x02	; 2
     97e:	6f ec       	ldi	r22, 0xCF	; 207
     980:	74 e1       	ldi	r23, 0x14	; 20
     982:	ce 01       	movw	r24, r28
     984:	01 96       	adiw	r24, 0x01	; 1
     986:	cf d6       	rcall	.+3486   	; 0x1726 <enqueueRQ>
     988:	93 c0       	rjmp	.+294    	; 0xab0 <Kernel_Unlock_Mutex+0x230>
     98a:	87 e0       	ldi	r24, 0x07	; 7
     98c:	80 9f       	mul	r24, r16
     98e:	f0 01       	movw	r30, r0
     990:	81 9f       	mul	r24, r17
     992:	f0 0d       	add	r31, r0
     994:	11 24       	eor	r1, r1
     996:	eb 5a       	subi	r30, 0xAB	; 171
     998:	fd 4f       	sbci	r31, 0xFD	; 253
     99a:	85 81       	ldd	r24, Z+5	; 0x05
     99c:	96 81       	ldd	r25, Z+6	; 0x06
     99e:	82 30       	cpi	r24, 0x02	; 2
     9a0:	91 05       	cpc	r25, r1
     9a2:	60 f0       	brcs	.+24     	; 0x9bc <Kernel_Unlock_Mutex+0x13c>
     9a4:	27 e0       	ldi	r18, 0x07	; 7
     9a6:	20 9f       	mul	r18, r16
     9a8:	f0 01       	movw	r30, r0
     9aa:	21 9f       	mul	r18, r17
     9ac:	f0 0d       	add	r31, r0
     9ae:	11 24       	eor	r1, r1
     9b0:	eb 5a       	subi	r30, 0xAB	; 171
     9b2:	fd 4f       	sbci	r31, 0xFD	; 253
     9b4:	01 97       	sbiw	r24, 0x01	; 1
     9b6:	96 83       	std	Z+6, r25	; 0x06
     9b8:	85 83       	std	Z+5, r24	; 0x05
     9ba:	7a c0       	rjmp	.+244    	; 0xab0 <Kernel_Unlock_Mutex+0x230>
     9bc:	69 e1       	ldi	r22, 0x19	; 25
     9be:	72 e0       	ldi	r23, 0x02	; 2
     9c0:	81 ef       	ldi	r24, 0xF1	; 241
     9c2:	94 e1       	ldi	r25, 0x14	; 20
     9c4:	13 d7       	rcall	.+3622   	; 0x17ec <dequeueWQ>
     9c6:	9a 83       	std	Y+2, r25	; 0x02
     9c8:	89 83       	std	Y+1, r24	; 0x01
     9ca:	00 97       	sbiw	r24, 0x00	; 0
     9cc:	a9 f5       	brne	.+106    	; 0xa38 <Kernel_Unlock_Mutex+0x1b8>
     9ce:	87 e0       	ldi	r24, 0x07	; 7
     9d0:	80 9f       	mul	r24, r16
     9d2:	f0 01       	movw	r30, r0
     9d4:	81 9f       	mul	r24, r17
     9d6:	f0 0d       	add	r31, r0
     9d8:	11 24       	eor	r1, r1
     9da:	eb 5a       	subi	r30, 0xAB	; 171
     9dc:	fd 4f       	sbci	r31, 0xFD	; 253
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	82 83       	std	Z+2, r24	; 0x02
     9e2:	16 82       	std	Z+6, r1	; 0x06
     9e4:	15 82       	std	Z+5, r1	; 0x05
     9e6:	14 82       	std	Z+4, r1	; 0x04
     9e8:	13 82       	std	Z+3, r1	; 0x03
     9ea:	e0 91 2b 02 	lds	r30, 0x022B
     9ee:	f0 91 2c 02 	lds	r31, 0x022C
     9f2:	df 01       	movw	r26, r30
     9f4:	ab 5f       	subi	r26, 0xFB	; 251
     9f6:	be 4f       	sbci	r27, 0xFE	; 254
     9f8:	8d 91       	ld	r24, X+
     9fa:	9c 91       	ld	r25, X
     9fc:	11 97       	sbiw	r26, 0x01	; 1
     9fe:	12 96       	adiw	r26, 0x02	; 2
     a00:	11 96       	adiw	r26, 0x01	; 1
     a02:	9c 93       	st	X, r25
     a04:	8e 93       	st	-X, r24
     a06:	80 81       	ld	r24, Z
     a08:	91 81       	ldd	r25, Z+1	; 0x01
     a0a:	02 97       	sbiw	r24, 0x02	; 2
     a0c:	20 f4       	brcc	.+8      	; 0xa16 <Kernel_Unlock_Mutex+0x196>
     a0e:	82 e0       	ldi	r24, 0x02	; 2
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	4f dd       	rcall	.-1378   	; 0x4b2 <enable_LED>
     a14:	4d c0       	rjmp	.+154    	; 0xab0 <Kernel_Unlock_Mutex+0x230>
     a16:	80 81       	ld	r24, Z
     a18:	91 81       	ldd	r25, Z+1	; 0x01
     a1a:	02 97       	sbiw	r24, 0x02	; 2
     a1c:	21 f4       	brne	.+8      	; 0xa26 <Kernel_Unlock_Mutex+0x1a6>
     a1e:	85 e0       	ldi	r24, 0x05	; 5
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	47 dd       	rcall	.-1394   	; 0x4b2 <enable_LED>
     a24:	45 c0       	rjmp	.+138    	; 0xab0 <Kernel_Unlock_Mutex+0x230>
     a26:	80 81       	ld	r24, Z
     a28:	91 81       	ldd	r25, Z+1	; 0x01
     a2a:	03 97       	sbiw	r24, 0x03	; 3
     a2c:	09 f0       	breq	.+2      	; 0xa30 <Kernel_Unlock_Mutex+0x1b0>
     a2e:	40 c0       	rjmp	.+128    	; 0xab0 <Kernel_Unlock_Mutex+0x230>
     a30:	86 e0       	ldi	r24, 0x06	; 6
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	3e dd       	rcall	.-1412   	; 0x4b2 <enable_LED>
     a36:	3c c0       	rjmp	.+120    	; 0xab0 <Kernel_Unlock_Mutex+0x230>
     a38:	27 e0       	ldi	r18, 0x07	; 7
     a3a:	20 9f       	mul	r18, r16
     a3c:	f0 01       	movw	r30, r0
     a3e:	21 9f       	mul	r18, r17
     a40:	f0 0d       	add	r31, r0
     a42:	11 24       	eor	r1, r1
     a44:	eb 5a       	subi	r30, 0xAB	; 171
     a46:	fd 4f       	sbci	r31, 0xFD	; 253
     a48:	21 e0       	ldi	r18, 0x01	; 1
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	36 83       	std	Z+6, r19	; 0x06
     a4e:	25 83       	std	Z+5, r18	; 0x05
     a50:	dc 01       	movw	r26, r24
     a52:	2d 91       	ld	r18, X+
     a54:	3c 91       	ld	r19, X
     a56:	34 83       	std	Z+4, r19	; 0x04
     a58:	23 83       	std	Z+3, r18	; 0x03
     a5a:	20 91 2b 02 	lds	r18, 0x022B
     a5e:	30 91 2c 02 	lds	r19, 0x022C
     a62:	d9 01       	movw	r26, r18
     a64:	a9 5f       	subi	r26, 0xF9	; 249
     a66:	be 4f       	sbci	r27, 0xFE	; 254
     a68:	4d 91       	ld	r20, X+
     a6a:	5c 91       	ld	r21, X
     a6c:	11 97       	sbiw	r26, 0x01	; 1
     a6e:	fc 01       	movw	r30, r24
     a70:	e9 5f       	subi	r30, 0xF9	; 249
     a72:	fe 4f       	sbci	r31, 0xFE	; 254
     a74:	51 83       	std	Z+1, r21	; 0x01
     a76:	40 83       	st	Z, r20
     a78:	33 97       	sbiw	r30, 0x03	; 3
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	80 83       	st	Z, r24
     a7e:	f9 01       	movw	r30, r18
     a80:	eb 5f       	subi	r30, 0xFB	; 251
     a82:	fe 4f       	sbci	r31, 0xFE	; 254
     a84:	40 81       	ld	r20, Z
     a86:	51 81       	ldd	r21, Z+1	; 0x01
     a88:	11 96       	adiw	r26, 0x01	; 1
     a8a:	5c 93       	st	X, r21
     a8c:	4e 93       	st	-X, r20
     a8e:	31 97       	sbiw	r30, 0x01	; 1
     a90:	80 83       	st	Z, r24
     a92:	4d e1       	ldi	r20, 0x1D	; 29
     a94:	52 e0       	ldi	r21, 0x02	; 2
     a96:	6f ec       	ldi	r22, 0xCF	; 207
     a98:	74 e1       	ldi	r23, 0x14	; 20
     a9a:	ce 01       	movw	r24, r28
     a9c:	01 96       	adiw	r24, 0x01	; 1
     a9e:	43 d6       	rcall	.+3206   	; 0x1726 <enqueueRQ>
     aa0:	4d e1       	ldi	r20, 0x1D	; 29
     aa2:	52 e0       	ldi	r21, 0x02	; 2
     aa4:	6f ec       	ldi	r22, 0xCF	; 207
     aa6:	74 e1       	ldi	r23, 0x14	; 20
     aa8:	8b e2       	ldi	r24, 0x2B	; 43
     aaa:	92 e0       	ldi	r25, 0x02	; 2
     aac:	3c d6       	rcall	.+3192   	; 0x1726 <enqueueRQ>
     aae:	b7 de       	rcall	.-658    	; 0x81e <Dispatch>
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	1f 91       	pop	r17
     aba:	0f 91       	pop	r16
     abc:	08 95       	ret

00000abe <OS_Start>:
     abe:	2f 92       	push	r2
     ac0:	3f 92       	push	r3
     ac2:	4f 92       	push	r4
     ac4:	5f 92       	push	r5
     ac6:	6f 92       	push	r6
     ac8:	7f 92       	push	r7
     aca:	8f 92       	push	r8
     acc:	9f 92       	push	r9
     ace:	af 92       	push	r10
     ad0:	bf 92       	push	r11
     ad2:	cf 92       	push	r12
     ad4:	df 92       	push	r13
     ad6:	ef 92       	push	r14
     ad8:	ff 92       	push	r15
     ada:	0f 93       	push	r16
     adc:	1f 93       	push	r17
     ade:	cf 93       	push	r28
     ae0:	df 93       	push	r29
     ae2:	00 d0       	rcall	.+0      	; 0xae4 <OS_Start+0x26>
     ae4:	1f 92       	push	r1
     ae6:	cd b7       	in	r28, 0x3d	; 61
     ae8:	de b7       	in	r29, 0x3e	; 62
     aea:	80 91 29 02 	lds	r24, 0x0229
     aee:	90 91 2a 02 	lds	r25, 0x022A
     af2:	89 2b       	or	r24, r25
     af4:	09 f0       	breq	.+2      	; 0xaf8 <OS_Start+0x3a>
     af6:	06 c4       	rjmp	.+2060   	; 0x1304 <OS_Start+0x846>
     af8:	80 91 27 02 	lds	r24, 0x0227
     afc:	90 91 28 02 	lds	r25, 0x0228
     b00:	89 2b       	or	r24, r25
     b02:	09 f4       	brne	.+2      	; 0xb06 <OS_Start+0x48>
     b04:	ff c3       	rjmp	.+2046   	; 0x1304 <OS_Start+0x846>
     b06:	f8 94       	cli
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	90 93 2a 02 	sts	0x022A, r25
     b10:	80 93 29 02 	sts	0x0229, r24
     b14:	84 de       	rcall	.-760    	; 0x81e <Dispatch>
     b16:	0f 2e       	mov	r0, r31
     b18:	fd e2       	ldi	r31, 0x2D	; 45
     b1a:	ef 2e       	mov	r14, r31
     b1c:	f2 e0       	ldi	r31, 0x02	; 2
     b1e:	ff 2e       	mov	r15, r31
     b20:	f0 2d       	mov	r31, r0
     b22:	0f 2e       	mov	r0, r31
     b24:	fe e1       	ldi	r31, 0x1E	; 30
     b26:	af 2e       	mov	r10, r31
     b28:	bb 24       	eor	r11, r11
     b2a:	b3 94       	inc	r11
     b2c:	f0 2d       	mov	r31, r0
     b2e:	0f 2e       	mov	r0, r31
     b30:	f3 e6       	ldi	r31, 0x63	; 99
     b32:	2f 2e       	mov	r2, r31
     b34:	31 2c       	mov	r3, r1
     b36:	f0 2d       	mov	r31, r0
     b38:	88 24       	eor	r8, r8
     b3a:	83 94       	inc	r8
     b3c:	91 2c       	mov	r9, r1
     b3e:	0f 2e       	mov	r0, r31
     b40:	f5 e5       	ldi	r31, 0x55	; 85
     b42:	cf 2e       	mov	r12, r31
     b44:	f2 e0       	ldi	r31, 0x02	; 2
     b46:	df 2e       	mov	r13, r31
     b48:	f0 2d       	mov	r31, r0
     b4a:	0d e8       	ldi	r16, 0x8D	; 141
     b4c:	12 e0       	ldi	r17, 0x02	; 2
     b4e:	0f 2e       	mov	r0, r31
     b50:	fa e0       	ldi	r31, 0x0A	; 10
     b52:	6f 2e       	mov	r6, r31
     b54:	71 2c       	mov	r7, r1
     b56:	f0 2d       	mov	r31, r0
     b58:	e0 91 2b 02 	lds	r30, 0x022B
     b5c:	f0 91 2c 02 	lds	r31, 0x022C
     b60:	df 01       	movw	r26, r30
     b62:	a3 5f       	subi	r26, 0xF3	; 243
     b64:	be 4f       	sbci	r27, 0xFE	; 254
     b66:	1c 92       	st	X, r1
     b68:	82 81       	ldd	r24, Z+2	; 0x02
     b6a:	93 81       	ldd	r25, Z+3	; 0x03
     b6c:	90 93 f0 14 	sts	0x14F0, r25
     b70:	80 93 ef 14 	sts	0x14EF, r24
     b74:	e6 da       	rcall	.-2612   	; 0x142 <CSwitch>
     b76:	82 e0       	ldi	r24, 0x02	; 2
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	a8 dc       	rcall	.-1712   	; 0x4cc <disable_LED>
     b7c:	85 e0       	ldi	r24, 0x05	; 5
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	a5 dc       	rcall	.-1718   	; 0x4cc <disable_LED>
     b82:	86 e0       	ldi	r24, 0x06	; 6
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a2 dc       	rcall	.-1724   	; 0x4cc <disable_LED>
     b88:	80 91 2b 02 	lds	r24, 0x022B
     b8c:	90 91 2c 02 	lds	r25, 0x022C
     b90:	9c 83       	std	Y+4, r25	; 0x04
     b92:	8b 83       	std	Y+3, r24	; 0x03
     b94:	80 91 ef 14 	lds	r24, 0x14EF
     b98:	90 91 f0 14 	lds	r25, 0x14F0
     b9c:	ab 81       	ldd	r26, Y+3	; 0x03
     b9e:	bc 81       	ldd	r27, Y+4	; 0x04
     ba0:	13 96       	adiw	r26, 0x03	; 3
     ba2:	9c 93       	st	X, r25
     ba4:	8e 93       	st	-X, r24
     ba6:	12 97       	sbiw	r26, 0x02	; 2
     ba8:	fd 01       	movw	r30, r26
     baa:	e3 5f       	subi	r30, 0xF3	; 243
     bac:	fe 4f       	sbci	r31, 0xFE	; 254
     bae:	e0 81       	ld	r30, Z
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	ed 30       	cpi	r30, 0x0D	; 13
     bb4:	f1 05       	cpc	r31, r1
     bb6:	80 f6       	brcc	.-96     	; 0xb58 <OS_Start+0x9a>
     bb8:	88 27       	eor	r24, r24
     bba:	ee 58       	subi	r30, 0x8E	; 142
     bbc:	ff 4f       	sbci	r31, 0xFF	; 255
     bbe:	8f 4f       	sbci	r24, 0xFF	; 255
     bc0:	0c 94 f3 0e 	jmp	0x1de6	; 0x1de6 <__tablejump2__>
     bc4:	eb 81       	ldd	r30, Y+3	; 0x03
     bc6:	fc 81       	ldd	r31, Y+4	; 0x04
     bc8:	e4 5e       	subi	r30, 0xE4	; 228
     bca:	fe 4f       	sbci	r31, 0xFE	; 254
     bcc:	80 81       	ld	r24, Z
     bce:	91 81       	ldd	r25, Z+1	; 0x01
     bd0:	ed e8       	ldi	r30, 0x8D	; 141
     bd2:	f2 e0       	ldi	r31, 0x02	; 2
     bd4:	20 81       	ld	r18, Z
     bd6:	31 81       	ldd	r19, Z+1	; 0x01
     bd8:	28 17       	cp	r18, r24
     bda:	39 07       	cpc	r19, r25
     bdc:	09 f0       	breq	.+2      	; 0xbe0 <OS_Start+0x122>
     bde:	89 c0       	rjmp	.+274    	; 0xcf2 <OS_Start+0x234>
     be0:	0d c3       	rjmp	.+1562   	; 0x11fc <OS_Start+0x73e>
     be2:	eb 81       	ldd	r30, Y+3	; 0x03
     be4:	fc 81       	ldd	r31, Y+4	; 0x04
     be6:	e7 5f       	subi	r30, 0xF7	; 247
     be8:	fe 4f       	sbci	r31, 0xFE	; 254
     bea:	40 81       	ld	r20, Z
     bec:	51 81       	ldd	r21, Z+1	; 0x01
     bee:	eb 81       	ldd	r30, Y+3	; 0x03
     bf0:	fc 81       	ldd	r31, Y+4	; 0x04
     bf2:	eb 5f       	subi	r30, 0xFB	; 251
     bf4:	fe 4f       	sbci	r31, 0xFE	; 254
     bf6:	60 81       	ld	r22, Z
     bf8:	71 81       	ldd	r23, Z+1	; 0x01
     bfa:	eb 81       	ldd	r30, Y+3	; 0x03
     bfc:	fc 81       	ldd	r31, Y+4	; 0x04
     bfe:	e5 5f       	subi	r30, 0xF5	; 245
     c00:	fe 4f       	sbci	r31, 0xFE	; 254
     c02:	80 81       	ld	r24, Z
     c04:	91 81       	ldd	r25, Z+1	; 0x01
     c06:	52 dd       	rcall	.-1372   	; 0x6ac <Kernel_Create_Task>
     c08:	eb 81       	ldd	r30, Y+3	; 0x03
     c0a:	fc 81       	ldd	r31, Y+4	; 0x04
     c0c:	e2 5f       	subi	r30, 0xF2	; 242
     c0e:	fe 4f       	sbci	r31, 0xFE	; 254
     c10:	91 83       	std	Z+1, r25	; 0x01
     c12:	80 83       	st	Z, r24
     c14:	a1 cf       	rjmp	.-190    	; 0xb58 <OS_Start+0x9a>
     c16:	eb 81       	ldd	r30, Y+3	; 0x03
     c18:	fc 81       	ldd	r31, Y+4	; 0x04
     c1a:	ec 5f       	subi	r30, 0xFC	; 252
     c1c:	fe 4f       	sbci	r31, 0xFE	; 254
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	80 83       	st	Z, r24
     c22:	4d e1       	ldi	r20, 0x1D	; 29
     c24:	52 e0       	ldi	r21, 0x02	; 2
     c26:	6f ec       	ldi	r22, 0xCF	; 207
     c28:	74 e1       	ldi	r23, 0x14	; 20
     c2a:	8b e2       	ldi	r24, 0x2B	; 43
     c2c:	92 e0       	ldi	r25, 0x02	; 2
     c2e:	7b d5       	rcall	.+2806   	; 0x1726 <enqueueRQ>
     c30:	f6 dd       	rcall	.-1044   	; 0x81e <Dispatch>
     c32:	92 cf       	rjmp	.-220    	; 0xb58 <OS_Start+0x9a>
     c34:	eb 81       	ldd	r30, Y+3	; 0x03
     c36:	fc 81       	ldd	r31, Y+4	; 0x04
     c38:	ec 5f       	subi	r30, 0xFC	; 252
     c3a:	fe 4f       	sbci	r31, 0xFE	; 254
     c3c:	83 e0       	ldi	r24, 0x03	; 3
     c3e:	80 83       	st	Z, r24
     c40:	4b e1       	ldi	r20, 0x1B	; 27
     c42:	52 e0       	ldi	r21, 0x02	; 2
     c44:	6f ea       	ldi	r22, 0xAF	; 175
     c46:	74 e1       	ldi	r23, 0x14	; 20
     c48:	8b e2       	ldi	r24, 0x2B	; 43
     c4a:	92 e0       	ldi	r25, 0x02	; 2
     c4c:	fb d4       	rcall	.+2550   	; 0x1644 <enqueueSQ>
     c4e:	e7 dd       	rcall	.-1074   	; 0x81e <Dispatch>
     c50:	83 cf       	rjmp	.-250    	; 0xb58 <OS_Start+0x9a>
     c52:	ab 81       	ldd	r26, Y+3	; 0x03
     c54:	bc 81       	ldd	r27, Y+4	; 0x04
     c56:	2d 91       	ld	r18, X+
     c58:	3c 91       	ld	r19, X
     c5a:	11 97       	sbiw	r26, 0x01	; 1
     c5c:	fd 01       	movw	r30, r26
     c5e:	e4 5e       	subi	r30, 0xE4	; 228
     c60:	fe 4f       	sbci	r31, 0xFE	; 254
     c62:	80 81       	ld	r24, Z
     c64:	91 81       	ldd	r25, Z+1	; 0x01
     c66:	28 17       	cp	r18, r24
     c68:	39 07       	cpc	r19, r25
     c6a:	51 f0       	breq	.+20     	; 0xc80 <OS_Start+0x1c2>
     c6c:	80 81       	ld	r24, Z
     c6e:	91 81       	ldd	r25, Z+1	; 0x01
     c70:	ed e8       	ldi	r30, 0x8D	; 141
     c72:	f2 e0       	ldi	r31, 0x02	; 2
     c74:	20 81       	ld	r18, Z
     c76:	31 81       	ldd	r19, Z+1	; 0x01
     c78:	28 17       	cp	r18, r24
     c7a:	39 07       	cpc	r19, r25
     c7c:	41 f4       	brne	.+16     	; 0xc8e <OS_Start+0x1d0>
     c7e:	ad c2       	rjmp	.+1370   	; 0x11da <OS_Start+0x71c>
     c80:	eb 81       	ldd	r30, Y+3	; 0x03
     c82:	fc 81       	ldd	r31, Y+4	; 0x04
     c84:	e6 5e       	subi	r30, 0xE6	; 230
     c86:	fe 4f       	sbci	r31, 0xFE	; 254
     c88:	91 82       	std	Z+1, r9	; 0x01
     c8a:	80 82       	st	Z, r8
     c8c:	1a c0       	rjmp	.+52     	; 0xcc2 <OS_Start+0x204>
     c8e:	eb ea       	ldi	r30, 0xAB	; 171
     c90:	f3 e0       	ldi	r31, 0x03	; 3
     c92:	c4 01       	movw	r24, r8
     c94:	ab 81       	ldd	r26, Y+3	; 0x03
     c96:	bc 81       	ldd	r27, Y+4	; 0x04
     c98:	a4 5e       	subi	r26, 0xE4	; 228
     c9a:	be 4f       	sbci	r27, 0xFE	; 254
     c9c:	6b 81       	ldd	r22, Y+3	; 0x03
     c9e:	7c 81       	ldd	r23, Y+4	; 0x04
     ca0:	2d 91       	ld	r18, X+
     ca2:	3c 91       	ld	r19, X
     ca4:	11 97       	sbiw	r26, 0x01	; 1
     ca6:	40 81       	ld	r20, Z
     ca8:	51 81       	ldd	r21, Z+1	; 0x01
     caa:	42 17       	cp	r20, r18
     cac:	53 07       	cpc	r21, r19
     cae:	09 f4       	brne	.+2      	; 0xcb2 <OS_Start+0x1f4>
     cb0:	97 c2       	rjmp	.+1326   	; 0x11e0 <OS_Start+0x722>
     cb2:	01 96       	adiw	r24, 0x01	; 1
     cb4:	e2 5e       	subi	r30, 0xE2	; 226
     cb6:	fe 4f       	sbci	r31, 0xFE	; 254
     cb8:	80 31       	cpi	r24, 0x10	; 16
     cba:	91 05       	cpc	r25, r1
     cbc:	89 f7       	brne	.-30     	; 0xca0 <OS_Start+0x1e2>
     cbe:	7c 83       	std	Y+4, r23	; 0x04
     cc0:	6b 83       	std	Y+3, r22	; 0x03
     cc2:	eb 81       	ldd	r30, Y+3	; 0x03
     cc4:	fc 81       	ldd	r31, Y+4	; 0x04
     cc6:	e6 5e       	subi	r30, 0xE6	; 230
     cc8:	fe 4f       	sbci	r31, 0xFE	; 254
     cca:	80 81       	ld	r24, Z
     ccc:	91 81       	ldd	r25, Z+1	; 0x01
     cce:	89 2b       	or	r24, r25
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <OS_Start+0x216>
     cd2:	42 cf       	rjmp	.-380    	; 0xb58 <OS_Start+0x9a>
     cd4:	eb 81       	ldd	r30, Y+3	; 0x03
     cd6:	fc 81       	ldd	r31, Y+4	; 0x04
     cd8:	ec 5f       	subi	r30, 0xFC	; 252
     cda:	fe 4f       	sbci	r31, 0xFE	; 254
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	80 83       	st	Z, r24
     ce0:	4d e1       	ldi	r20, 0x1D	; 29
     ce2:	52 e0       	ldi	r21, 0x02	; 2
     ce4:	6f ec       	ldi	r22, 0xCF	; 207
     ce6:	74 e1       	ldi	r23, 0x14	; 20
     ce8:	8b e2       	ldi	r24, 0x2B	; 43
     cea:	92 e0       	ldi	r25, 0x02	; 2
     cec:	1c d5       	rcall	.+2616   	; 0x1726 <enqueueRQ>
     cee:	97 dd       	rcall	.-1234   	; 0x81e <Dispatch>
     cf0:	33 cf       	rjmp	.-410    	; 0xb58 <OS_Start+0x9a>
     cf2:	eb ea       	ldi	r30, 0xAB	; 171
     cf4:	f3 e0       	ldi	r31, 0x03	; 3
     cf6:	c4 01       	movw	r24, r8
     cf8:	ab 81       	ldd	r26, Y+3	; 0x03
     cfa:	bc 81       	ldd	r27, Y+4	; 0x04
     cfc:	a4 5e       	subi	r26, 0xE4	; 228
     cfe:	be 4f       	sbci	r27, 0xFE	; 254
     d00:	6b 81       	ldd	r22, Y+3	; 0x03
     d02:	7c 81       	ldd	r23, Y+4	; 0x04
     d04:	2d 91       	ld	r18, X+
     d06:	3c 91       	ld	r19, X
     d08:	11 97       	sbiw	r26, 0x01	; 1
     d0a:	40 81       	ld	r20, Z
     d0c:	51 81       	ldd	r21, Z+1	; 0x01
     d0e:	42 17       	cp	r20, r18
     d10:	53 07       	cpc	r21, r19
     d12:	09 f4       	brne	.+2      	; 0xd16 <OS_Start+0x258>
     d14:	76 c2       	rjmp	.+1260   	; 0x1202 <OS_Start+0x744>
     d16:	01 96       	adiw	r24, 0x01	; 1
     d18:	e2 5e       	subi	r30, 0xE2	; 226
     d1a:	fe 4f       	sbci	r31, 0xFE	; 254
     d1c:	80 31       	cpi	r24, 0x10	; 16
     d1e:	91 05       	cpc	r25, r1
     d20:	89 f7       	brne	.-30     	; 0xd04 <OS_Start+0x246>
     d22:	1a cf       	rjmp	.-460    	; 0xb58 <OS_Start+0x9a>
     d24:	8a 9d       	mul	r24, r10
     d26:	90 01       	movw	r18, r0
     d28:	8b 9d       	mul	r24, r11
     d2a:	30 0d       	add	r19, r0
     d2c:	9a 9d       	mul	r25, r10
     d2e:	30 0d       	add	r19, r0
     d30:	11 24       	eor	r1, r1
     d32:	c9 01       	movw	r24, r18
     d34:	83 57       	subi	r24, 0x73	; 115
     d36:	9d 4f       	sbci	r25, 0xFD	; 253
     d38:	fc 01       	movw	r30, r24
     d3a:	e6 5e       	subi	r30, 0xE6	; 230
     d3c:	fe 4f       	sbci	r31, 0xFE	; 254
     d3e:	11 82       	std	Z+1, r1	; 0x01
     d40:	10 82       	st	Z, r1
     d42:	eb 81       	ldd	r30, Y+3	; 0x03
     d44:	fc 81       	ldd	r31, Y+4	; 0x04
     d46:	e9 5f       	subi	r30, 0xF9	; 249
     d48:	fe 4f       	sbci	r31, 0xFE	; 254
     d4a:	20 81       	ld	r18, Z
     d4c:	31 81       	ldd	r19, Z+1	; 0x01
     d4e:	fc 01       	movw	r30, r24
     d50:	e9 5f       	subi	r30, 0xF9	; 249
     d52:	fe 4f       	sbci	r31, 0xFE	; 254
     d54:	80 81       	ld	r24, Z
     d56:	91 81       	ldd	r25, Z+1	; 0x01
     d58:	82 17       	cp	r24, r18
     d5a:	93 07       	cpc	r25, r19
     d5c:	08 f0       	brcs	.+2      	; 0xd60 <OS_Start+0x2a2>
     d5e:	fc ce       	rjmp	.-520    	; 0xb58 <OS_Start+0x9a>
     d60:	eb 81       	ldd	r30, Y+3	; 0x03
     d62:	fc 81       	ldd	r31, Y+4	; 0x04
     d64:	ec 5f       	subi	r30, 0xFC	; 252
     d66:	fe 4f       	sbci	r31, 0xFE	; 254
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	80 83       	st	Z, r24
     d6c:	4d e1       	ldi	r20, 0x1D	; 29
     d6e:	52 e0       	ldi	r21, 0x02	; 2
     d70:	6f ec       	ldi	r22, 0xCF	; 207
     d72:	74 e1       	ldi	r23, 0x14	; 20
     d74:	8b e2       	ldi	r24, 0x2B	; 43
     d76:	92 e0       	ldi	r25, 0x02	; 2
     d78:	d6 d4       	rcall	.+2476   	; 0x1726 <enqueueRQ>
     d7a:	51 dd       	rcall	.-1374   	; 0x81e <Dispatch>
     d7c:	ed ce       	rjmp	.-550    	; 0xb58 <OS_Start+0x9a>
     d7e:	eb 81       	ldd	r30, Y+3	; 0x03
     d80:	fc 81       	ldd	r31, Y+4	; 0x04
     d82:	e9 5f       	subi	r30, 0xF9	; 249
     d84:	fe 4f       	sbci	r31, 0xFE	; 254
     d86:	11 82       	std	Z+1, r1	; 0x01
     d88:	10 82       	st	Z, r1
     d8a:	eb 81       	ldd	r30, Y+3	; 0x03
     d8c:	fc 81       	ldd	r31, Y+4	; 0x04
     d8e:	eb 5f       	subi	r30, 0xFB	; 251
     d90:	fe 4f       	sbci	r31, 0xFE	; 254
     d92:	11 82       	std	Z+1, r1	; 0x01
     d94:	10 82       	st	Z, r1
     d96:	eb 81       	ldd	r30, Y+3	; 0x03
     d98:	fc 81       	ldd	r31, Y+4	; 0x04
     d9a:	ec 5f       	subi	r30, 0xFC	; 252
     d9c:	fe 4f       	sbci	r31, 0xFE	; 254
     d9e:	86 e0       	ldi	r24, 0x06	; 6
     da0:	80 83       	st	Z, r24
     da2:	dc 82       	std	Y+4, r13	; 0x04
     da4:	cb 82       	std	Y+3, r12	; 0x03
     da6:	e0 91 2b 02 	lds	r30, 0x022B
     daa:	f0 91 2c 02 	lds	r31, 0x022C
     dae:	80 81       	ld	r24, Z
     db0:	91 81       	ldd	r25, Z+1	; 0x01
     db2:	ab 81       	ldd	r26, Y+3	; 0x03
     db4:	bc 81       	ldd	r27, Y+4	; 0x04
     db6:	13 96       	adiw	r26, 0x03	; 3
     db8:	2d 91       	ld	r18, X+
     dba:	3c 91       	ld	r19, X
     dbc:	14 97       	sbiw	r26, 0x04	; 4
     dbe:	28 17       	cp	r18, r24
     dc0:	39 07       	cpc	r19, r25
     dc2:	39 f4       	brne	.+14     	; 0xdd2 <OS_Start+0x314>
     dc4:	8d 91       	ld	r24, X+
     dc6:	9c 91       	ld	r25, X
     dc8:	ec 5e       	subi	r30, 0xEC	; 236
     dca:	fe 4f       	sbci	r31, 0xFE	; 254
     dcc:	91 83       	std	Z+1, r25	; 0x01
     dce:	80 83       	st	Z, r24
     dd0:	57 dd       	rcall	.-1362   	; 0x880 <Kernel_Unlock_Mutex>
     dd2:	eb 81       	ldd	r30, Y+3	; 0x03
     dd4:	fc 81       	ldd	r31, Y+4	; 0x04
     dd6:	37 96       	adiw	r30, 0x07	; 7
     dd8:	fc 83       	std	Y+4, r31	; 0x04
     dda:	eb 83       	std	Y+3, r30	; 0x03
     ddc:	e0 17       	cp	r30, r16
     dde:	f1 07       	cpc	r31, r17
     de0:	11 f7       	brne	.-60     	; 0xda6 <OS_Start+0x2e8>
     de2:	e0 91 2b 02 	lds	r30, 0x022B
     de6:	f0 91 2c 02 	lds	r31, 0x022C
     dea:	df 01       	movw	r26, r30
     dec:	ac 5f       	subi	r26, 0xFC	; 252
     dee:	be 4f       	sbci	r27, 0xFE	; 254
     df0:	1c 92       	st	X, r1
     df2:	52 96       	adiw	r26, 0x12	; 18
     df4:	11 96       	adiw	r26, 0x01	; 1
     df6:	3c 92       	st	X, r3
     df8:	2e 92       	st	-X, r2
     dfa:	1f 97       	sbiw	r26, 0x0f	; 15
     dfc:	11 96       	adiw	r26, 0x01	; 1
     dfe:	7c 92       	st	X, r7
     e00:	6e 92       	st	-X, r6
     e02:	12 97       	sbiw	r26, 0x02	; 2
     e04:	11 96       	adiw	r26, 0x01	; 1
     e06:	7c 92       	st	X, r7
     e08:	6e 92       	st	-X, r6
     e0a:	11 82       	std	Z+1, r1	; 0x01
     e0c:	10 82       	st	Z, r1
     e0e:	80 91 27 02 	lds	r24, 0x0227
     e12:	90 91 28 02 	lds	r25, 0x0228
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	90 93 28 02 	sts	0x0228, r25
     e1c:	80 93 27 02 	sts	0x0227, r24
     e20:	fe dc       	rcall	.-1540   	; 0x81e <Dispatch>
     e22:	9a ce       	rjmp	.-716    	; 0xb58 <OS_Start+0x9a>
     e24:	80 91 23 02 	lds	r24, 0x0223
     e28:	90 91 24 02 	lds	r25, 0x0224
     e2c:	08 97       	sbiw	r24, 0x08	; 8
     e2e:	41 f1       	breq	.+80     	; 0xe80 <OS_Start+0x3c2>
     e30:	d6 01       	movw	r26, r12
     e32:	12 96       	adiw	r26, 0x02	; 2
     e34:	8c 91       	ld	r24, X
     e36:	88 23       	and	r24, r24
     e38:	89 f0       	breq	.+34     	; 0xe5c <OS_Start+0x39e>
     e3a:	ee e5       	ldi	r30, 0x5E	; 94
     e3c:	f2 e0       	ldi	r31, 0x02	; 2
     e3e:	94 01       	movw	r18, r8
     e40:	4b 81       	ldd	r20, Y+3	; 0x03
     e42:	5c 81       	ldd	r21, Y+4	; 0x04
     e44:	80 81       	ld	r24, Z
     e46:	88 23       	and	r24, r24
     e48:	61 f0       	breq	.+24     	; 0xe62 <OS_Start+0x3a4>
     e4a:	2f 5f       	subi	r18, 0xFF	; 255
     e4c:	3f 4f       	sbci	r19, 0xFF	; 255
     e4e:	37 96       	adiw	r30, 0x07	; 7
     e50:	28 30       	cpi	r18, 0x08	; 8
     e52:	31 05       	cpc	r19, r1
     e54:	b9 f7       	brne	.-18     	; 0xe44 <OS_Start+0x386>
     e56:	5c 83       	std	Y+4, r21	; 0x04
     e58:	4b 83       	std	Y+3, r20	; 0x03
     e5a:	05 c0       	rjmp	.+10     	; 0xe66 <OS_Start+0x3a8>
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <OS_Start+0x3a8>
     e62:	5c 83       	std	Y+4, r21	; 0x04
     e64:	4b 83       	std	Y+3, r20	; 0x03
     e66:	c9 01       	movw	r24, r18
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	82 1b       	sub	r24, r18
     e76:	93 0b       	sbc	r25, r19
     e78:	8b 5a       	subi	r24, 0xAB	; 171
     e7a:	9d 4f       	sbci	r25, 0xFD	; 253
     e7c:	47 dc       	rcall	.-1906   	; 0x70c <Kernel_Init_Mutex_At>
     e7e:	2c 01       	movw	r4, r24
     e80:	eb 81       	ldd	r30, Y+3	; 0x03
     e82:	fc 81       	ldd	r31, Y+4	; 0x04
     e84:	e2 5f       	subi	r30, 0xF2	; 242
     e86:	fe 4f       	sbci	r31, 0xFE	; 254
     e88:	51 82       	std	Z+1, r5	; 0x01
     e8a:	40 82       	st	Z, r4
     e8c:	65 ce       	rjmp	.-822    	; 0xb58 <OS_Start+0x9a>
     e8e:	eb 81       	ldd	r30, Y+3	; 0x03
     e90:	fc 81       	ldd	r31, Y+4	; 0x04
     e92:	ec 5e       	subi	r30, 0xEC	; 236
     e94:	fe 4f       	sbci	r31, 0xFE	; 254
     e96:	40 81       	ld	r20, Z
     e98:	51 81       	ldd	r21, Z+1	; 0x01
     e9a:	f6 01       	movw	r30, r12
     e9c:	80 81       	ld	r24, Z
     e9e:	91 81       	ldd	r25, Z+1	; 0x01
     ea0:	48 17       	cp	r20, r24
     ea2:	59 07       	cpc	r21, r25
     ea4:	09 f4       	brne	.+2      	; 0xea8 <OS_Start+0x3ea>
     ea6:	bf c1       	rjmp	.+894    	; 0x1226 <OS_Start+0x768>
     ea8:	c4 01       	movw	r24, r8
     eaa:	6b 81       	ldd	r22, Y+3	; 0x03
     eac:	7c 81       	ldd	r23, Y+4	; 0x04
     eae:	27 81       	ldd	r18, Z+7	; 0x07
     eb0:	30 85       	ldd	r19, Z+8	; 0x08
     eb2:	42 17       	cp	r20, r18
     eb4:	53 07       	cpc	r21, r19
     eb6:	09 f4       	brne	.+2      	; 0xeba <OS_Start+0x3fc>
     eb8:	b9 c1       	rjmp	.+882    	; 0x122c <OS_Start+0x76e>
     eba:	01 96       	adiw	r24, 0x01	; 1
     ebc:	37 96       	adiw	r30, 0x07	; 7
     ebe:	88 30       	cpi	r24, 0x08	; 8
     ec0:	91 05       	cpc	r25, r1
     ec2:	a9 f7       	brne	.-22     	; 0xeae <OS_Start+0x3f0>
     ec4:	49 ce       	rjmp	.-878    	; 0xb58 <OS_Start+0x9a>
     ec6:	fc 01       	movw	r30, r24
     ec8:	ee 0f       	add	r30, r30
     eca:	ff 1f       	adc	r31, r31
     ecc:	ee 0f       	add	r30, r30
     ece:	ff 1f       	adc	r31, r31
     ed0:	ee 0f       	add	r30, r30
     ed2:	ff 1f       	adc	r31, r31
     ed4:	e8 1b       	sub	r30, r24
     ed6:	f9 0b       	sbc	r31, r25
     ed8:	eb 5a       	subi	r30, 0xAB	; 171
     eda:	fd 4f       	sbci	r31, 0xFD	; 253
     edc:	82 e0       	ldi	r24, 0x02	; 2
     ede:	82 83       	std	Z+2, r24	; 0x02
     ee0:	ab 81       	ldd	r26, Y+3	; 0x03
     ee2:	bc 81       	ldd	r27, Y+4	; 0x04
     ee4:	8d 91       	ld	r24, X+
     ee6:	9c 91       	ld	r25, X
     ee8:	94 83       	std	Z+4, r25	; 0x04
     eea:	83 83       	std	Z+3, r24	; 0x03
     eec:	85 81       	ldd	r24, Z+5	; 0x05
     eee:	96 81       	ldd	r25, Z+6	; 0x06
     ef0:	01 96       	adiw	r24, 0x01	; 1
     ef2:	96 83       	std	Z+6, r25	; 0x06
     ef4:	85 83       	std	Z+5, r24	; 0x05
     ef6:	30 ce       	rjmp	.-928    	; 0xb58 <OS_Start+0x9a>
     ef8:	fc 01       	movw	r30, r24
     efa:	ee 0f       	add	r30, r30
     efc:	ff 1f       	adc	r31, r31
     efe:	ee 0f       	add	r30, r30
     f00:	ff 1f       	adc	r31, r31
     f02:	ee 0f       	add	r30, r30
     f04:	ff 1f       	adc	r31, r31
     f06:	e8 1b       	sub	r30, r24
     f08:	f9 0b       	sbc	r31, r25
     f0a:	eb 5a       	subi	r30, 0xAB	; 171
     f0c:	fd 4f       	sbci	r31, 0xFD	; 253
     f0e:	23 81       	ldd	r18, Z+3	; 0x03
     f10:	34 81       	ldd	r19, Z+4	; 0x04
     f12:	eb 81       	ldd	r30, Y+3	; 0x03
     f14:	fc 81       	ldd	r31, Y+4	; 0x04
     f16:	40 81       	ld	r20, Z
     f18:	51 81       	ldd	r21, Z+1	; 0x01
     f1a:	24 17       	cp	r18, r20
     f1c:	35 07       	cpc	r19, r21
     f1e:	89 f4       	brne	.+34     	; 0xf42 <OS_Start+0x484>
     f20:	fc 01       	movw	r30, r24
     f22:	ee 0f       	add	r30, r30
     f24:	ff 1f       	adc	r31, r31
     f26:	ee 0f       	add	r30, r30
     f28:	ff 1f       	adc	r31, r31
     f2a:	ee 0f       	add	r30, r30
     f2c:	ff 1f       	adc	r31, r31
     f2e:	e8 1b       	sub	r30, r24
     f30:	f9 0b       	sbc	r31, r25
     f32:	eb 5a       	subi	r30, 0xAB	; 171
     f34:	fd 4f       	sbci	r31, 0xFD	; 253
     f36:	85 81       	ldd	r24, Z+5	; 0x05
     f38:	96 81       	ldd	r25, Z+6	; 0x06
     f3a:	01 96       	adiw	r24, 0x01	; 1
     f3c:	96 83       	std	Z+6, r25	; 0x06
     f3e:	85 83       	std	Z+5, r24	; 0x05
     f40:	0b ce       	rjmp	.-1002   	; 0xb58 <OS_Start+0x9a>
     f42:	ed e8       	ldi	r30, 0x8D	; 141
     f44:	f2 e0       	ldi	r31, 0x02	; 2
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	6b 81       	ldd	r22, Y+3	; 0x03
     f4c:	7c 81       	ldd	r23, Y+4	; 0x04
     f4e:	40 81       	ld	r20, Z
     f50:	51 81       	ldd	r21, Z+1	; 0x01
     f52:	24 17       	cp	r18, r20
     f54:	35 07       	cpc	r19, r21
     f56:	19 f4       	brne	.+6      	; 0xf5e <OS_Start+0x4a0>
     f58:	21 15       	cp	r18, r1
     f5a:	31 05       	cpc	r19, r1
     f5c:	31 f4       	brne	.+12     	; 0xf6a <OS_Start+0x4ac>
     f5e:	01 96       	adiw	r24, 0x01	; 1
     f60:	e2 5e       	subi	r30, 0xE2	; 226
     f62:	fe 4f       	sbci	r31, 0xFE	; 254
     f64:	80 31       	cpi	r24, 0x10	; 16
     f66:	91 05       	cpc	r25, r1
     f68:	91 f7       	brne	.-28     	; 0xf4e <OS_Start+0x490>
     f6a:	7c 83       	std	Y+4, r23	; 0x04
     f6c:	6b 83       	std	Y+3, r22	; 0x03
     f6e:	fb 01       	movw	r30, r22
     f70:	e9 5f       	subi	r30, 0xF9	; 249
     f72:	fe 4f       	sbci	r31, 0xFE	; 254
     f74:	20 81       	ld	r18, Z
     f76:	31 81       	ldd	r19, Z+1	; 0x01
     f78:	8a 9d       	mul	r24, r10
     f7a:	f0 01       	movw	r30, r0
     f7c:	8b 9d       	mul	r24, r11
     f7e:	f0 0d       	add	r31, r0
     f80:	9a 9d       	mul	r25, r10
     f82:	f0 0d       	add	r31, r0
     f84:	11 24       	eor	r1, r1
     f86:	ec 56       	subi	r30, 0x6C	; 108
     f88:	fc 4f       	sbci	r31, 0xFC	; 252
     f8a:	40 81       	ld	r20, Z
     f8c:	51 81       	ldd	r21, Z+1	; 0x01
     f8e:	24 17       	cp	r18, r20
     f90:	35 07       	cpc	r19, r21
     f92:	80 f4       	brcc	.+32     	; 0xfb4 <OS_Start+0x4f6>
     f94:	fb 01       	movw	r30, r22
     f96:	e9 5f       	subi	r30, 0xF9	; 249
     f98:	fe 4f       	sbci	r31, 0xFE	; 254
     f9a:	20 81       	ld	r18, Z
     f9c:	31 81       	ldd	r19, Z+1	; 0x01
     f9e:	8a 9d       	mul	r24, r10
     fa0:	f0 01       	movw	r30, r0
     fa2:	8b 9d       	mul	r24, r11
     fa4:	f0 0d       	add	r31, r0
     fa6:	9a 9d       	mul	r25, r10
     fa8:	f0 0d       	add	r31, r0
     faa:	11 24       	eor	r1, r1
     fac:	ec 56       	subi	r30, 0x6C	; 108
     fae:	fc 4f       	sbci	r31, 0xFC	; 252
     fb0:	31 83       	std	Z+1, r19	; 0x01
     fb2:	20 83       	st	Z, r18
     fb4:	eb 81       	ldd	r30, Y+3	; 0x03
     fb6:	fc 81       	ldd	r31, Y+4	; 0x04
     fb8:	ec 5f       	subi	r30, 0xFC	; 252
     fba:	fe 4f       	sbci	r31, 0xFE	; 254
     fbc:	84 e0       	ldi	r24, 0x04	; 4
     fbe:	80 83       	st	Z, r24
     fc0:	49 e1       	ldi	r20, 0x19	; 25
     fc2:	52 e0       	ldi	r21, 0x02	; 2
     fc4:	61 ef       	ldi	r22, 0xF1	; 241
     fc6:	74 e1       	ldi	r23, 0x14	; 20
     fc8:	8b e2       	ldi	r24, 0x2B	; 43
     fca:	92 e0       	ldi	r25, 0x02	; 2
     fcc:	0b d3       	rcall	.+1558   	; 0x15e4 <enqueueWQ>
     fce:	27 dc       	rcall	.-1970   	; 0x81e <Dispatch>
     fd0:	c3 cd       	rjmp	.-1146   	; 0xb58 <OS_Start+0x9a>
     fd2:	56 dc       	rcall	.-1876   	; 0x880 <Kernel_Unlock_Mutex>
     fd4:	c1 cd       	rjmp	.-1150   	; 0xb58 <OS_Start+0x9a>
     fd6:	80 91 21 02 	lds	r24, 0x0221
     fda:	90 91 22 02 	lds	r25, 0x0222
     fde:	08 97       	sbiw	r24, 0x08	; 8
     fe0:	31 f1       	breq	.+76     	; 0x102e <OS_Start+0x570>
     fe2:	d7 01       	movw	r26, r14
     fe4:	12 96       	adiw	r26, 0x02	; 2
     fe6:	8c 91       	ld	r24, X
     fe8:	88 23       	and	r24, r24
     fea:	81 f0       	breq	.+32     	; 0x100c <OS_Start+0x54e>
     fec:	e4 e3       	ldi	r30, 0x34	; 52
     fee:	f2 e0       	ldi	r31, 0x02	; 2
     ff0:	c4 01       	movw	r24, r8
     ff2:	4b 81       	ldd	r20, Y+3	; 0x03
     ff4:	5c 81       	ldd	r21, Y+4	; 0x04
     ff6:	20 81       	ld	r18, Z
     ff8:	22 23       	and	r18, r18
     ffa:	59 f0       	breq	.+22     	; 0x1012 <OS_Start+0x554>
     ffc:	01 96       	adiw	r24, 0x01	; 1
     ffe:	35 96       	adiw	r30, 0x05	; 5
    1000:	88 30       	cpi	r24, 0x08	; 8
    1002:	91 05       	cpc	r25, r1
    1004:	c1 f7       	brne	.-16     	; 0xff6 <OS_Start+0x538>
    1006:	5c 83       	std	Y+4, r21	; 0x04
    1008:	4b 83       	std	Y+3, r20	; 0x03
    100a:	05 c0       	rjmp	.+10     	; 0x1016 <OS_Start+0x558>
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <OS_Start+0x558>
    1012:	5c 83       	std	Y+4, r21	; 0x04
    1014:	4b 83       	std	Y+3, r20	; 0x03
    1016:	9c 01       	movw	r18, r24
    1018:	22 0f       	add	r18, r18
    101a:	33 1f       	adc	r19, r19
    101c:	22 0f       	add	r18, r18
    101e:	33 1f       	adc	r19, r19
    1020:	82 0f       	add	r24, r18
    1022:	93 1f       	adc	r25, r19
    1024:	83 5d       	subi	r24, 0xD3	; 211
    1026:	9d 4f       	sbci	r25, 0xFD	; 253
    1028:	86 db       	rcall	.-2292   	; 0x736 <Kernel_Init_Event_At>
    102a:	9a 83       	std	Y+2, r25	; 0x02
    102c:	89 83       	std	Y+1, r24	; 0x01
    102e:	ab 81       	ldd	r26, Y+3	; 0x03
    1030:	bc 81       	ldd	r27, Y+4	; 0x04
    1032:	a2 5f       	subi	r26, 0xF2	; 242
    1034:	be 4f       	sbci	r27, 0xFE	; 254
    1036:	e9 81       	ldd	r30, Y+1	; 0x01
    1038:	fa 81       	ldd	r31, Y+2	; 0x02
    103a:	11 96       	adiw	r26, 0x01	; 1
    103c:	fc 93       	st	X, r31
    103e:	ee 93       	st	-X, r30
    1040:	8b cd       	rjmp	.-1258   	; 0xb58 <OS_Start+0x9a>
    1042:	eb 81       	ldd	r30, Y+3	; 0x03
    1044:	fc 81       	ldd	r31, Y+4	; 0x04
    1046:	e8 5e       	subi	r30, 0xE8	; 232
    1048:	fe 4f       	sbci	r31, 0xFE	; 254
    104a:	40 81       	ld	r20, Z
    104c:	51 81       	ldd	r21, Z+1	; 0x01
    104e:	d7 01       	movw	r26, r14
    1050:	8d 91       	ld	r24, X+
    1052:	9c 91       	ld	r25, X
    1054:	48 17       	cp	r20, r24
    1056:	59 07       	cpc	r21, r25
    1058:	09 f4       	brne	.+2      	; 0x105c <OS_Start+0x59e>
    105a:	fa c0       	rjmp	.+500    	; 0x1250 <OS_Start+0x792>
    105c:	f7 01       	movw	r30, r14
    105e:	c4 01       	movw	r24, r8
    1060:	6b 81       	ldd	r22, Y+3	; 0x03
    1062:	7c 81       	ldd	r23, Y+4	; 0x04
    1064:	25 81       	ldd	r18, Z+5	; 0x05
    1066:	36 81       	ldd	r19, Z+6	; 0x06
    1068:	42 17       	cp	r20, r18
    106a:	53 07       	cpc	r21, r19
    106c:	09 f4       	brne	.+2      	; 0x1070 <OS_Start+0x5b2>
    106e:	f3 c0       	rjmp	.+486    	; 0x1256 <OS_Start+0x798>
    1070:	01 96       	adiw	r24, 0x01	; 1
    1072:	35 96       	adiw	r30, 0x05	; 5
    1074:	88 30       	cpi	r24, 0x08	; 8
    1076:	91 05       	cpc	r25, r1
    1078:	a9 f7       	brne	.-22     	; 0x1064 <OS_Start+0x5a6>
    107a:	3d c0       	rjmp	.+122    	; 0x10f6 <OS_Start+0x638>
    107c:	fc 01       	movw	r30, r24
    107e:	ee 0f       	add	r30, r30
    1080:	ff 1f       	adc	r31, r31
    1082:	ee 0f       	add	r30, r30
    1084:	ff 1f       	adc	r31, r31
    1086:	e8 0f       	add	r30, r24
    1088:	f9 1f       	adc	r31, r25
    108a:	e3 5d       	subi	r30, 0xD3	; 211
    108c:	fd 4f       	sbci	r31, 0xFD	; 253
    108e:	22 81       	ldd	r18, Z+2	; 0x02
    1090:	22 30       	cpi	r18, 0x02	; 2
    1092:	69 f4       	brne	.+26     	; 0x10ae <OS_Start+0x5f0>
    1094:	fc 01       	movw	r30, r24
    1096:	ee 0f       	add	r30, r30
    1098:	ff 1f       	adc	r31, r31
    109a:	ee 0f       	add	r30, r30
    109c:	ff 1f       	adc	r31, r31
    109e:	8e 0f       	add	r24, r30
    10a0:	9f 1f       	adc	r25, r31
    10a2:	fc 01       	movw	r30, r24
    10a4:	e3 5d       	subi	r30, 0xD3	; 211
    10a6:	fd 4f       	sbci	r31, 0xFD	; 253
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	82 83       	std	Z+2, r24	; 0x02
    10ac:	24 c0       	rjmp	.+72     	; 0x10f6 <OS_Start+0x638>
    10ae:	eb 81       	ldd	r30, Y+3	; 0x03
    10b0:	fc 81       	ldd	r31, Y+4	; 0x04
    10b2:	ea 5e       	subi	r30, 0xEA	; 234
    10b4:	fe 4f       	sbci	r31, 0xFE	; 254
    10b6:	51 83       	std	Z+1, r21	; 0x01
    10b8:	40 83       	st	Z, r20
    10ba:	eb 81       	ldd	r30, Y+3	; 0x03
    10bc:	fc 81       	ldd	r31, Y+4	; 0x04
    10be:	20 81       	ld	r18, Z
    10c0:	31 81       	ldd	r19, Z+1	; 0x01
    10c2:	fc 01       	movw	r30, r24
    10c4:	ee 0f       	add	r30, r30
    10c6:	ff 1f       	adc	r31, r31
    10c8:	ee 0f       	add	r30, r30
    10ca:	ff 1f       	adc	r31, r31
    10cc:	8e 0f       	add	r24, r30
    10ce:	9f 1f       	adc	r25, r31
    10d0:	fc 01       	movw	r30, r24
    10d2:	e3 5d       	subi	r30, 0xD3	; 211
    10d4:	fd 4f       	sbci	r31, 0xFD	; 253
    10d6:	34 83       	std	Z+4, r19	; 0x04
    10d8:	23 83       	std	Z+3, r18	; 0x03
    10da:	eb 81       	ldd	r30, Y+3	; 0x03
    10dc:	fc 81       	ldd	r31, Y+4	; 0x04
    10de:	ec 5f       	subi	r30, 0xFC	; 252
    10e0:	fe 4f       	sbci	r31, 0xFE	; 254
    10e2:	85 e0       	ldi	r24, 0x05	; 5
    10e4:	80 83       	st	Z, r24
    10e6:	4d e1       	ldi	r20, 0x1D	; 29
    10e8:	52 e0       	ldi	r21, 0x02	; 2
    10ea:	6f ec       	ldi	r22, 0xCF	; 207
    10ec:	74 e1       	ldi	r23, 0x14	; 20
    10ee:	8b e2       	ldi	r24, 0x2B	; 43
    10f0:	92 e0       	ldi	r25, 0x02	; 2
    10f2:	19 d3       	rcall	.+1586   	; 0x1726 <enqueueRQ>
    10f4:	94 db       	rcall	.-2264   	; 0x81e <Dispatch>
    10f6:	e0 91 2b 02 	lds	r30, 0x022B
    10fa:	f0 91 2c 02 	lds	r31, 0x022C
    10fe:	80 81       	ld	r24, Z
    1100:	91 81       	ldd	r25, Z+1	; 0x01
    1102:	02 97       	sbiw	r24, 0x02	; 2
    1104:	20 f4       	brcc	.+8      	; 0x110e <OS_Start+0x650>
    1106:	82 e0       	ldi	r24, 0x02	; 2
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	d3 d9       	rcall	.-3162   	; 0x4b2 <enable_LED>
    110c:	25 cd       	rjmp	.-1462   	; 0xb58 <OS_Start+0x9a>
    110e:	80 81       	ld	r24, Z
    1110:	91 81       	ldd	r25, Z+1	; 0x01
    1112:	02 97       	sbiw	r24, 0x02	; 2
    1114:	21 f4       	brne	.+8      	; 0x111e <OS_Start+0x660>
    1116:	85 e0       	ldi	r24, 0x05	; 5
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	cb d9       	rcall	.-3178   	; 0x4b2 <enable_LED>
    111c:	1d cd       	rjmp	.-1478   	; 0xb58 <OS_Start+0x9a>
    111e:	80 81       	ld	r24, Z
    1120:	91 81       	ldd	r25, Z+1	; 0x01
    1122:	03 97       	sbiw	r24, 0x03	; 3
    1124:	09 f0       	breq	.+2      	; 0x1128 <OS_Start+0x66a>
    1126:	18 cd       	rjmp	.-1488   	; 0xb58 <OS_Start+0x9a>
    1128:	86 e0       	ldi	r24, 0x06	; 6
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	c2 d9       	rcall	.-3196   	; 0x4b2 <enable_LED>
    112e:	14 cd       	rjmp	.-1496   	; 0xb58 <OS_Start+0x9a>
    1130:	eb 81       	ldd	r30, Y+3	; 0x03
    1132:	fc 81       	ldd	r31, Y+4	; 0x04
    1134:	e8 5e       	subi	r30, 0xE8	; 232
    1136:	fe 4f       	sbci	r31, 0xFE	; 254
    1138:	40 81       	ld	r20, Z
    113a:	51 81       	ldd	r21, Z+1	; 0x01
    113c:	d7 01       	movw	r26, r14
    113e:	8d 91       	ld	r24, X+
    1140:	9c 91       	ld	r25, X
    1142:	48 17       	cp	r20, r24
    1144:	59 07       	cpc	r21, r25
    1146:	09 f4       	brne	.+2      	; 0x114a <OS_Start+0x68c>
    1148:	97 c0       	rjmp	.+302    	; 0x1278 <OS_Start+0x7ba>
    114a:	f7 01       	movw	r30, r14
    114c:	c4 01       	movw	r24, r8
    114e:	6b 81       	ldd	r22, Y+3	; 0x03
    1150:	7c 81       	ldd	r23, Y+4	; 0x04
    1152:	25 81       	ldd	r18, Z+5	; 0x05
    1154:	36 81       	ldd	r19, Z+6	; 0x06
    1156:	42 17       	cp	r20, r18
    1158:	53 07       	cpc	r21, r19
    115a:	09 f4       	brne	.+2      	; 0x115e <OS_Start+0x6a0>
    115c:	90 c0       	rjmp	.+288    	; 0x127e <OS_Start+0x7c0>
    115e:	01 96       	adiw	r24, 0x01	; 1
    1160:	35 96       	adiw	r30, 0x05	; 5
    1162:	88 30       	cpi	r24, 0x08	; 8
    1164:	91 05       	cpc	r25, r1
    1166:	a9 f7       	brne	.-22     	; 0x1152 <OS_Start+0x694>
    1168:	f7 cc       	rjmp	.-1554   	; 0xb58 <OS_Start+0x9a>
    116a:	80 81       	ld	r24, Z
    116c:	91 81       	ldd	r25, Z+1	; 0x01
    116e:	48 17       	cp	r20, r24
    1170:	59 07       	cpc	r21, r25
    1172:	09 f4       	brne	.+2      	; 0x1176 <OS_Start+0x6b8>
    1174:	97 c0       	rjmp	.+302    	; 0x12a4 <OS_Start+0x7e6>
    1176:	2f 5f       	subi	r18, 0xFF	; 255
    1178:	3f 4f       	sbci	r19, 0xFF	; 255
    117a:	e2 5e       	subi	r30, 0xE2	; 226
    117c:	fe 4f       	sbci	r31, 0xFE	; 254
    117e:	20 31       	cpi	r18, 0x10	; 16
    1180:	31 05       	cpc	r19, r1
    1182:	99 f7       	brne	.-26     	; 0x116a <OS_Start+0x6ac>
    1184:	cb 01       	movw	r24, r22
    1186:	fb 01       	movw	r30, r22
    1188:	ee 0f       	add	r30, r30
    118a:	ff 1f       	adc	r31, r31
    118c:	ee 0f       	add	r30, r30
    118e:	ff 1f       	adc	r31, r31
    1190:	8e 0f       	add	r24, r30
    1192:	9f 1f       	adc	r25, r31
    1194:	fc 01       	movw	r30, r24
    1196:	e3 5d       	subi	r30, 0xD3	; 211
    1198:	fd 4f       	sbci	r31, 0xFD	; 253
    119a:	82 e0       	ldi	r24, 0x02	; 2
    119c:	82 83       	std	Z+2, r24	; 0x02
    119e:	dc cc       	rjmp	.-1608   	; 0xb58 <OS_Start+0x9a>
    11a0:	2a 9d       	mul	r18, r10
    11a2:	f0 01       	movw	r30, r0
    11a4:	2b 9d       	mul	r18, r11
    11a6:	f0 0d       	add	r31, r0
    11a8:	3a 9d       	mul	r19, r10
    11aa:	f0 0d       	add	r31, r0
    11ac:	11 24       	eor	r1, r1
    11ae:	e9 55       	subi	r30, 0x59	; 89
    11b0:	fc 4f       	sbci	r31, 0xFC	; 252
    11b2:	80 81       	ld	r24, Z
    11b4:	91 81       	ldd	r25, Z+1	; 0x01
    11b6:	89 2b       	or	r24, r25
    11b8:	09 f0       	breq	.+2      	; 0x11bc <OS_Start+0x6fe>
    11ba:	ce cc       	rjmp	.-1636   	; 0xb58 <OS_Start+0x9a>
    11bc:	eb 81       	ldd	r30, Y+3	; 0x03
    11be:	fc 81       	ldd	r31, Y+4	; 0x04
    11c0:	ec 5f       	subi	r30, 0xFC	; 252
    11c2:	fe 4f       	sbci	r31, 0xFE	; 254
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	80 83       	st	Z, r24
    11c8:	4d e1       	ldi	r20, 0x1D	; 29
    11ca:	52 e0       	ldi	r21, 0x02	; 2
    11cc:	6f ec       	ldi	r22, 0xCF	; 207
    11ce:	74 e1       	ldi	r23, 0x14	; 20
    11d0:	8b e2       	ldi	r24, 0x2B	; 43
    11d2:	92 e0       	ldi	r25, 0x02	; 2
    11d4:	a8 d2       	rcall	.+1360   	; 0x1726 <enqueueRQ>
    11d6:	23 db       	rcall	.-2490   	; 0x81e <Dispatch>
    11d8:	bf cc       	rjmp	.-1666   	; 0xb58 <OS_Start+0x9a>
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <OS_Start+0x726>
    11e0:	7c 83       	std	Y+4, r23	; 0x04
    11e2:	6b 83       	std	Y+3, r22	; 0x03
    11e4:	8a 9d       	mul	r24, r10
    11e6:	f0 01       	movw	r30, r0
    11e8:	8b 9d       	mul	r24, r11
    11ea:	f0 0d       	add	r31, r0
    11ec:	9a 9d       	mul	r25, r10
    11ee:	f0 0d       	add	r31, r0
    11f0:	11 24       	eor	r1, r1
    11f2:	e9 55       	subi	r30, 0x59	; 89
    11f4:	fc 4f       	sbci	r31, 0xFC	; 252
    11f6:	91 82       	std	Z+1, r9	; 0x01
    11f8:	80 82       	st	Z, r8
    11fa:	63 cd       	rjmp	.-1338   	; 0xcc2 <OS_Start+0x204>
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <OS_Start+0x748>
    1202:	7c 83       	std	Y+4, r23	; 0x04
    1204:	6b 83       	std	Y+3, r22	; 0x03
    1206:	8a 9d       	mul	r24, r10
    1208:	f0 01       	movw	r30, r0
    120a:	8b 9d       	mul	r24, r11
    120c:	f0 0d       	add	r31, r0
    120e:	9a 9d       	mul	r25, r10
    1210:	f0 0d       	add	r31, r0
    1212:	11 24       	eor	r1, r1
    1214:	e9 55       	subi	r30, 0x59	; 89
    1216:	fc 4f       	sbci	r31, 0xFC	; 252
    1218:	20 81       	ld	r18, Z
    121a:	31 81       	ldd	r19, Z+1	; 0x01
    121c:	21 30       	cpi	r18, 0x01	; 1
    121e:	31 05       	cpc	r19, r1
    1220:	09 f0       	breq	.+2      	; 0x1224 <OS_Start+0x766>
    1222:	9a cc       	rjmp	.-1740   	; 0xb58 <OS_Start+0x9a>
    1224:	7f cd       	rjmp	.-1282   	; 0xd24 <OS_Start+0x266>
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <OS_Start+0x772>
    122c:	7c 83       	std	Y+4, r23	; 0x04
    122e:	6b 83       	std	Y+3, r22	; 0x03
    1230:	fc 01       	movw	r30, r24
    1232:	ee 0f       	add	r30, r30
    1234:	ff 1f       	adc	r31, r31
    1236:	ee 0f       	add	r30, r30
    1238:	ff 1f       	adc	r31, r31
    123a:	ee 0f       	add	r30, r30
    123c:	ff 1f       	adc	r31, r31
    123e:	e8 1b       	sub	r30, r24
    1240:	f9 0b       	sbc	r31, r25
    1242:	eb 5a       	subi	r30, 0xAB	; 171
    1244:	fd 4f       	sbci	r31, 0xFD	; 253
    1246:	22 81       	ldd	r18, Z+2	; 0x02
    1248:	21 30       	cpi	r18, 0x01	; 1
    124a:	09 f0       	breq	.+2      	; 0x124e <OS_Start+0x790>
    124c:	55 ce       	rjmp	.-854    	; 0xef8 <OS_Start+0x43a>
    124e:	3b ce       	rjmp	.-906    	; 0xec6 <OS_Start+0x408>
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	02 c0       	rjmp	.+4      	; 0x125a <OS_Start+0x79c>
    1256:	7c 83       	std	Y+4, r23	; 0x04
    1258:	6b 83       	std	Y+3, r22	; 0x03
    125a:	fc 01       	movw	r30, r24
    125c:	ee 0f       	add	r30, r30
    125e:	ff 1f       	adc	r31, r31
    1260:	ee 0f       	add	r30, r30
    1262:	ff 1f       	adc	r31, r31
    1264:	e8 0f       	add	r30, r24
    1266:	f9 1f       	adc	r31, r25
    1268:	e3 5d       	subi	r30, 0xD3	; 211
    126a:	fd 4f       	sbci	r31, 0xFD	; 253
    126c:	23 81       	ldd	r18, Z+3	; 0x03
    126e:	34 81       	ldd	r19, Z+4	; 0x04
    1270:	23 2b       	or	r18, r19
    1272:	09 f0       	breq	.+2      	; 0x1276 <OS_Start+0x7b8>
    1274:	40 cf       	rjmp	.-384    	; 0x10f6 <OS_Start+0x638>
    1276:	02 cf       	rjmp	.-508    	; 0x107c <OS_Start+0x5be>
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <OS_Start+0x7c4>
    127e:	7c 83       	std	Y+4, r23	; 0x04
    1280:	6b 83       	std	Y+3, r22	; 0x03
    1282:	e3 ea       	ldi	r30, 0xA3	; 163
    1284:	f3 e0       	ldi	r31, 0x03	; 3
    1286:	20 81       	ld	r18, Z
    1288:	31 81       	ldd	r19, Z+1	; 0x01
    128a:	42 17       	cp	r20, r18
    128c:	53 07       	cpc	r21, r19
    128e:	39 f0       	breq	.+14     	; 0x129e <OS_Start+0x7e0>
    1290:	e1 ec       	ldi	r30, 0xC1	; 193
    1292:	f4 e0       	ldi	r31, 0x04	; 4
    1294:	94 01       	movw	r18, r8
    1296:	ab 81       	ldd	r26, Y+3	; 0x03
    1298:	bc 81       	ldd	r27, Y+4	; 0x04
    129a:	bc 01       	movw	r22, r24
    129c:	66 cf       	rjmp	.-308    	; 0x116a <OS_Start+0x6ac>
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	03 c0       	rjmp	.+6      	; 0x12aa <OS_Start+0x7ec>
    12a4:	bc 83       	std	Y+4, r27	; 0x04
    12a6:	ab 83       	std	Y+3, r26	; 0x03
    12a8:	cb 01       	movw	r24, r22
    12aa:	2a 9d       	mul	r18, r10
    12ac:	a0 01       	movw	r20, r0
    12ae:	2b 9d       	mul	r18, r11
    12b0:	50 0d       	add	r21, r0
    12b2:	3a 9d       	mul	r19, r10
    12b4:	50 0d       	add	r21, r0
    12b6:	11 24       	eor	r1, r1
    12b8:	43 57       	subi	r20, 0x73	; 115
    12ba:	5d 4f       	sbci	r21, 0xFD	; 253
    12bc:	fa 01       	movw	r30, r20
    12be:	ec 5f       	subi	r30, 0xFC	; 252
    12c0:	fe 4f       	sbci	r31, 0xFE	; 254
    12c2:	61 e0       	ldi	r22, 0x01	; 1
    12c4:	60 83       	st	Z, r22
    12c6:	72 96       	adiw	r30, 0x12	; 18
    12c8:	31 82       	std	Z+1, r3	; 0x01
    12ca:	20 82       	st	Z, r2
    12cc:	fc 01       	movw	r30, r24
    12ce:	ee 0f       	add	r30, r30
    12d0:	ff 1f       	adc	r31, r31
    12d2:	ee 0f       	add	r30, r30
    12d4:	ff 1f       	adc	r31, r31
    12d6:	8e 0f       	add	r24, r30
    12d8:	9f 1f       	adc	r25, r31
    12da:	fc 01       	movw	r30, r24
    12dc:	e3 5d       	subi	r30, 0xD3	; 211
    12de:	fd 4f       	sbci	r31, 0xFD	; 253
    12e0:	14 82       	std	Z+4, r1	; 0x04
    12e2:	13 82       	std	Z+3, r1	; 0x03
    12e4:	eb 81       	ldd	r30, Y+3	; 0x03
    12e6:	fc 81       	ldd	r31, Y+4	; 0x04
    12e8:	e9 5f       	subi	r30, 0xF9	; 249
    12ea:	fe 4f       	sbci	r31, 0xFE	; 254
    12ec:	80 81       	ld	r24, Z
    12ee:	91 81       	ldd	r25, Z+1	; 0x01
    12f0:	fa 01       	movw	r30, r20
    12f2:	e9 5f       	subi	r30, 0xF9	; 249
    12f4:	fe 4f       	sbci	r31, 0xFE	; 254
    12f6:	40 81       	ld	r20, Z
    12f8:	51 81       	ldd	r21, Z+1	; 0x01
    12fa:	48 17       	cp	r20, r24
    12fc:	59 07       	cpc	r21, r25
    12fe:	08 f4       	brcc	.+2      	; 0x1302 <OS_Start+0x844>
    1300:	4f cf       	rjmp	.-354    	; 0x11a0 <OS_Start+0x6e2>
    1302:	2a cc       	rjmp	.-1964   	; 0xb58 <OS_Start+0x9a>
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	df 91       	pop	r29
    130e:	cf 91       	pop	r28
    1310:	1f 91       	pop	r17
    1312:	0f 91       	pop	r16
    1314:	ff 90       	pop	r15
    1316:	ef 90       	pop	r14
    1318:	df 90       	pop	r13
    131a:	cf 90       	pop	r12
    131c:	bf 90       	pop	r11
    131e:	af 90       	pop	r10
    1320:	9f 90       	pop	r9
    1322:	8f 90       	pop	r8
    1324:	7f 90       	pop	r7
    1326:	6f 90       	pop	r6
    1328:	5f 90       	pop	r5
    132a:	4f 90       	pop	r4
    132c:	3f 90       	pop	r3
    132e:	2f 90       	pop	r2
    1330:	08 95       	ret

00001332 <Task_Create>:
    1332:	20 91 29 02 	lds	r18, 0x0229
    1336:	30 91 2a 02 	lds	r19, 0x022A
    133a:	23 2b       	or	r18, r19
    133c:	f1 f0       	breq	.+60     	; 0x137a <Task_Create+0x48>
    133e:	f8 94       	cli
    1340:	20 91 2b 02 	lds	r18, 0x022B
    1344:	30 91 2c 02 	lds	r19, 0x022C
    1348:	f9 01       	movw	r30, r18
    134a:	e3 5f       	subi	r30, 0xF3	; 243
    134c:	fe 4f       	sbci	r31, 0xFE	; 254
    134e:	a1 e0       	ldi	r26, 0x01	; 1
    1350:	a0 83       	st	Z, r26
    1352:	32 97       	sbiw	r30, 0x02	; 2
    1354:	91 83       	std	Z+1, r25	; 0x01
    1356:	80 83       	st	Z, r24
    1358:	36 97       	sbiw	r30, 0x06	; 6
    135a:	71 83       	std	Z+1, r23	; 0x01
    135c:	60 83       	st	Z, r22
    135e:	34 96       	adiw	r30, 0x04	; 4
    1360:	51 83       	std	Z+1, r21	; 0x01
    1362:	40 83       	st	Z, r20
    1364:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    1368:	e0 91 2b 02 	lds	r30, 0x022B
    136c:	f0 91 2c 02 	lds	r31, 0x022C
    1370:	e2 5f       	subi	r30, 0xF2	; 242
    1372:	fe 4f       	sbci	r31, 0xFE	; 254
    1374:	80 81       	ld	r24, Z
    1376:	91 81       	ldd	r25, Z+1	; 0x01
    1378:	08 95       	ret
    137a:	98 c9       	rjmp	.-3280   	; 0x6ac <Kernel_Create_Task>
    137c:	08 95       	ret

0000137e <Task_Next>:
    137e:	80 91 29 02 	lds	r24, 0x0229
    1382:	90 91 2a 02 	lds	r25, 0x022A
    1386:	89 2b       	or	r24, r25
    1388:	59 f0       	breq	.+22     	; 0x13a0 <Task_Next+0x22>
    138a:	f8 94       	cli
    138c:	e0 91 2b 02 	lds	r30, 0x022B
    1390:	f0 91 2c 02 	lds	r31, 0x022C
    1394:	e3 5f       	subi	r30, 0xF3	; 243
    1396:	fe 4f       	sbci	r31, 0xFE	; 254
    1398:	82 e0       	ldi	r24, 0x02	; 2
    139a:	80 83       	st	Z, r24
    139c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <Enter_Kernel>
    13a0:	08 95       	ret

000013a2 <setup>:
  * Setup pins and timers
  */
void setup() {
	/** For testing */
	/** pin 47 */
	init_LED_PORTL_pin2();
    13a2:	75 d8       	rcall	.-3862   	; 0x48e <init_LED_PORTL_pin2>

	/** pin 43 */
	init_LED_PORTL_pin6();
    13a4:	80 d8       	rcall	.-3840   	; 0x4a6 <init_LED_PORTL_pin6>

	/** pin 44 */
	init_LED_PORTL_pin5();
    13a6:	79 d8       	rcall	.-3854   	; 0x49a <init_LED_PORTL_pin5>

	/** pin 49 */
	init_LED_PORTL_pin0();
    13a8:	66 d8       	rcall	.-3892   	; 0x476 <init_LED_PORTL_pin0>

	/** pin 48 */
	init_LED_PORTL_pin1();
    13aa:	6b d8       	rcall	.-3882   	; 0x482 <init_LED_PORTL_pin1>

	/** initialize Timer1 16 bit timer */
	Disable_Interrupt();
    13ac:	f8 94       	cli

	/** Timer 1 */
	TCCR1A = 0;                 /** Set TCCR1A register to 0 */
    13ae:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;                 /** Set TCCR1B register to 0 */
    13b2:	e1 e8       	ldi	r30, 0x81	; 129
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	10 82       	st	Z, r1

	TCNT1 = 0;                  /** Initialize counter to 0 */
    13b8:	10 92 85 00 	sts	0x0085, r1
    13bc:	10 92 84 00 	sts	0x0084, r1

	OCR1A = 624;                /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
    13c0:	80 e7       	ldi	r24, 0x70	; 112
    13c2:	92 e0       	ldi	r25, 0x02	; 2
    13c4:	90 93 89 00 	sts	0x0089, r25
    13c8:	80 93 88 00 	sts	0x0088, r24

	TCCR1B |= (1 << WGM12);     /** Turns on CTC mode (TOP is now OCR1A) */
    13cc:	80 81       	ld	r24, Z
    13ce:	88 60       	ori	r24, 0x08	; 8
    13d0:	80 83       	st	Z, r24

	TCCR1B |= (1 << CS12);      /** Prescaler 256 */
    13d2:	80 81       	ld	r24, Z
    13d4:	84 60       	ori	r24, 0x04	; 4
    13d6:	80 83       	st	Z, r24

	TIMSK1 |= (1 << OCIE1A);    /** Enable timer compare interrupt */
    13d8:	ef e6       	ldi	r30, 0x6F	; 111
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	82 60       	ori	r24, 0x02	; 2
    13e0:	80 83       	st	Z, r24

	/** Timer 3 */
	TCCR3A = 0;                 /** Set TCCR0A register to 0 */
    13e2:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0;                 /** Set TCCR0B register to 0 */
    13e6:	e1 e9       	ldi	r30, 0x91	; 145
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	10 82       	st	Z, r1

	TCNT3 = 0;                  /** Initialize counter to 0 */
    13ec:	10 92 95 00 	sts	0x0095, r1
    13f0:	10 92 94 00 	sts	0x0094, r1

	OCR3A = 62499;              /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
    13f4:	83 e2       	ldi	r24, 0x23	; 35
    13f6:	94 ef       	ldi	r25, 0xF4	; 244
    13f8:	90 93 99 00 	sts	0x0099, r25
    13fc:	80 93 98 00 	sts	0x0098, r24

	TCCR3B |= (1 << WGM32);     /** Turns on CTC mode (TOP is now OCR1A) */
    1400:	80 81       	ld	r24, Z
    1402:	88 60       	ori	r24, 0x08	; 8
    1404:	80 83       	st	Z, r24

	TCCR3B |= (1 << CS32);      /** Prescaler 1024 */
    1406:	80 81       	ld	r24, Z
    1408:	84 60       	ori	r24, 0x04	; 4
    140a:	80 83       	st	Z, r24

	TIMSK3 = (1 << OCIE3A);
    140c:	82 e0       	ldi	r24, 0x02	; 2
    140e:	80 93 71 00 	sts	0x0071, r24

	Enable_Interrupt();
    1412:	78 94       	sei
    1414:	08 95       	ret

00001416 <__vector_17>:
}

/**
  * ISR for timer1
  */
ISR(TIMER1_COMPA_vect) {
    1416:	1f 92       	push	r1
    1418:	0f 92       	push	r0
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	0f 92       	push	r0
    141e:	11 24       	eor	r1, r1
    1420:	0b b6       	in	r0, 0x3b	; 59
    1422:	0f 92       	push	r0
    1424:	df 92       	push	r13
    1426:	ef 92       	push	r14
    1428:	ff 92       	push	r15
    142a:	0f 93       	push	r16
    142c:	1f 93       	push	r17
    142e:	2f 93       	push	r18
    1430:	3f 93       	push	r19
    1432:	4f 93       	push	r20
    1434:	5f 93       	push	r21
    1436:	6f 93       	push	r22
    1438:	7f 93       	push	r23
    143a:	8f 93       	push	r24
    143c:	9f 93       	push	r25
    143e:	af 93       	push	r26
    1440:	bf 93       	push	r27
    1442:	ef 93       	push	r30
    1444:	ff 93       	push	r31
    1446:	cf 93       	push	r28
    1448:	df 93       	push	r29
    144a:	00 d0       	rcall	.+0      	; 0x144c <__vector_17+0x36>
    144c:	1f 92       	push	r1
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
    1452:	80 91 1b 02 	lds	r24, 0x021B
    1456:	90 91 1c 02 	lds	r25, 0x021C
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	9a 83       	std	Y+2, r25	; 0x02
    145e:	89 83       	std	Y+1, r24	; 0x01
    1460:	89 81       	ldd	r24, Y+1	; 0x01
    1462:	9a 81       	ldd	r25, Y+2	; 0x02
    1464:	99 23       	and	r25, r25
    1466:	0c f4       	brge	.+2      	; 0x146a <__vector_17+0x54>
    1468:	7c c0       	rjmp	.+248    	; 0x1562 <__vector_17+0x14c>
		if ((SleepQueue[i]->wakeTickOverflow <= tickOverflowCount) && (SleepQueue[i]->wakeTick <= (TCNT3/625))) {
    146a:	e9 81       	ldd	r30, Y+1	; 0x01
    146c:	fa 81       	ldd	r31, Y+2	; 0x02
    146e:	ee 0f       	add	r30, r30
    1470:	ff 1f       	adc	r31, r31
    1472:	e1 55       	subi	r30, 0x51	; 81
    1474:	fb 4e       	sbci	r31, 0xEB	; 235
    1476:	01 90       	ld	r0, Z+
    1478:	f0 81       	ld	r31, Z
    147a:	e0 2d       	mov	r30, r0
    147c:	e0 5f       	subi	r30, 0xF0	; 240
    147e:	fe 4f       	sbci	r31, 0xFE	; 254
    1480:	20 81       	ld	r18, Z
    1482:	31 81       	ldd	r19, Z+1	; 0x01
    1484:	80 91 1f 02 	lds	r24, 0x021F
    1488:	90 91 20 02 	lds	r25, 0x0220
    148c:	82 17       	cp	r24, r18
    148e:	93 07       	cpc	r25, r19
    1490:	08 f4       	brcc	.+2      	; 0x1494 <__vector_17+0x7e>
    1492:	67 c0       	rjmp	.+206    	; 0x1562 <__vector_17+0x14c>
    1494:	e9 81       	ldd	r30, Y+1	; 0x01
    1496:	fa 81       	ldd	r31, Y+2	; 0x02
    1498:	ee 0f       	add	r30, r30
    149a:	ff 1f       	adc	r31, r31
    149c:	e1 55       	subi	r30, 0x51	; 81
    149e:	fb 4e       	sbci	r31, 0xEB	; 235
    14a0:	01 90       	ld	r0, Z+
    14a2:	f0 81       	ld	r31, Z
    14a4:	e0 2d       	mov	r30, r0
    14a6:	ee 5e       	subi	r30, 0xEE	; 238
    14a8:	fe 4f       	sbci	r31, 0xFE	; 254
    14aa:	20 81       	ld	r18, Z
    14ac:	31 81       	ldd	r19, Z+1	; 0x01
    14ae:	80 91 94 00 	lds	r24, 0x0094
    14b2:	90 91 95 00 	lds	r25, 0x0095
    14b6:	61 e7       	ldi	r22, 0x71	; 113
    14b8:	72 e0       	ldi	r23, 0x02	; 2
    14ba:	81 d4       	rcall	.+2306   	; 0x1dbe <__udivmodhi4>
    14bc:	62 17       	cp	r22, r18
    14be:	73 07       	cpc	r23, r19
    14c0:	58 f5       	brcc	.+86     	; 0x1518 <__vector_17+0x102>
    14c2:	4f c0       	rjmp	.+158    	; 0x1562 <__vector_17+0x14c>
    14c4:	e9 81       	ldd	r30, Y+1	; 0x01
    14c6:	fa 81       	ldd	r31, Y+2	; 0x02
    14c8:	ee 0f       	add	r30, r30
    14ca:	ff 1f       	adc	r31, r31
    14cc:	e1 55       	subi	r30, 0x51	; 81
    14ce:	fb 4e       	sbci	r31, 0xEB	; 235
    14d0:	01 90       	ld	r0, Z+
    14d2:	f0 81       	ld	r31, Z
    14d4:	e0 2d       	mov	r30, r0
    14d6:	e0 5f       	subi	r30, 0xF0	; 240
    14d8:	fe 4f       	sbci	r31, 0xFE	; 254
    14da:	20 81       	ld	r18, Z
    14dc:	31 81       	ldd	r19, Z+1	; 0x01
    14de:	80 91 1f 02 	lds	r24, 0x021F
    14e2:	90 91 20 02 	lds	r25, 0x0220
    14e6:	82 17       	cp	r24, r18
    14e8:	93 07       	cpc	r25, r19
    14ea:	d8 f1       	brcs	.+118    	; 0x1562 <__vector_17+0x14c>
    14ec:	e9 81       	ldd	r30, Y+1	; 0x01
    14ee:	fa 81       	ldd	r31, Y+2	; 0x02
    14f0:	ee 0f       	add	r30, r30
    14f2:	ff 1f       	adc	r31, r31
    14f4:	e1 55       	subi	r30, 0x51	; 81
    14f6:	fb 4e       	sbci	r31, 0xEB	; 235
    14f8:	01 90       	ld	r0, Z+
    14fa:	f0 81       	ld	r31, Z
    14fc:	e0 2d       	mov	r30, r0
    14fe:	ee 5e       	subi	r30, 0xEE	; 238
    1500:	fe 4f       	sbci	r31, 0xFE	; 254
    1502:	20 81       	ld	r18, Z
    1504:	31 81       	ldd	r19, Z+1	; 0x01
    1506:	f7 01       	movw	r30, r14
    1508:	80 81       	ld	r24, Z
    150a:	91 81       	ldd	r25, Z+1	; 0x01
    150c:	b8 01       	movw	r22, r16
    150e:	57 d4       	rcall	.+2222   	; 0x1dbe <__udivmodhi4>
    1510:	62 17       	cp	r22, r18
    1512:	73 07       	cpc	r23, r19
    1514:	50 f4       	brcc	.+20     	; 0x152a <__vector_17+0x114>
    1516:	25 c0       	rjmp	.+74     	; 0x1562 <__vector_17+0x14c>
			volatile PD *p = dequeue(&SleepQueue, &SQCount);
			p->state = READY;
    1518:	dd 24       	eor	r13, r13
    151a:	d3 94       	inc	r13
ISR(TIMER1_COMPA_vect) {

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
		if ((SleepQueue[i]->wakeTickOverflow <= tickOverflowCount) && (SleepQueue[i]->wakeTick <= (TCNT3/625))) {
    151c:	0f 2e       	mov	r0, r31
    151e:	f4 e9       	ldi	r31, 0x94	; 148
    1520:	ef 2e       	mov	r14, r31
    1522:	f1 2c       	mov	r15, r1
    1524:	f0 2d       	mov	r31, r0
    1526:	01 e7       	ldi	r16, 0x71	; 113
    1528:	12 e0       	ldi	r17, 0x02	; 2
			volatile PD *p = dequeue(&SleepQueue, &SQCount);
    152a:	6b e1       	ldi	r22, 0x1B	; 27
    152c:	72 e0       	ldi	r23, 0x02	; 2
    152e:	8f ea       	ldi	r24, 0xAF	; 175
    1530:	94 e1       	ldi	r25, 0x14	; 20
    1532:	1c d2       	rcall	.+1080   	; 0x196c <dequeue>
    1534:	9c 83       	std	Y+4, r25	; 0x04
    1536:	8b 83       	std	Y+3, r24	; 0x03
			p->state = READY;
    1538:	fc 01       	movw	r30, r24
    153a:	ec 5f       	subi	r30, 0xFC	; 252
    153c:	fe 4f       	sbci	r31, 0xFE	; 254
    153e:	d0 82       	st	Z, r13
			enqueueRQ(&p, &ReadyQueue, &RQCount);
    1540:	4d e1       	ldi	r20, 0x1D	; 29
    1542:	52 e0       	ldi	r21, 0x02	; 2
    1544:	6f ec       	ldi	r22, 0xCF	; 207
    1546:	74 e1       	ldi	r23, 0x14	; 20
    1548:	ce 01       	movw	r24, r28
    154a:	03 96       	adiw	r24, 0x03	; 3
    154c:	ec d0       	rcall	.+472    	; 0x1726 <enqueueRQ>
  */
ISR(TIMER1_COMPA_vect) {

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	9a 81       	ldd	r25, Y+2	; 0x02
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	9a 83       	std	Y+2, r25	; 0x02
    1556:	89 83       	std	Y+1, r24	; 0x01
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	9a 81       	ldd	r25, Y+2	; 0x02
    155c:	99 23       	and	r25, r25
    155e:	0c f0       	brlt	.+2      	; 0x1562 <__vector_17+0x14c>
    1560:	b1 cf       	rjmp	.-158    	; 0x14c4 <__vector_17+0xae>
		else {
			break;
		}
	}

	Task_Next();
    1562:	0d df       	rcall	.-486    	; 0x137e <Task_Next>
}
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	ff 91       	pop	r31
    1572:	ef 91       	pop	r30
    1574:	bf 91       	pop	r27
    1576:	af 91       	pop	r26
    1578:	9f 91       	pop	r25
    157a:	8f 91       	pop	r24
    157c:	7f 91       	pop	r23
    157e:	6f 91       	pop	r22
    1580:	5f 91       	pop	r21
    1582:	4f 91       	pop	r20
    1584:	3f 91       	pop	r19
    1586:	2f 91       	pop	r18
    1588:	1f 91       	pop	r17
    158a:	0f 91       	pop	r16
    158c:	ff 90       	pop	r15
    158e:	ef 90       	pop	r14
    1590:	df 90       	pop	r13
    1592:	0f 90       	pop	r0
    1594:	0b be       	out	0x3b, r0	; 59
    1596:	0f 90       	pop	r0
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	0f 90       	pop	r0
    159c:	1f 90       	pop	r1
    159e:	18 95       	reti

000015a0 <__vector_32>:

/**
  * ISR for timer3
  */
ISR(TIMER3_COMPA_vect) {
    15a0:	1f 92       	push	r1
    15a2:	0f 92       	push	r0
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	0f 92       	push	r0
    15a8:	11 24       	eor	r1, r1
    15aa:	8f 93       	push	r24
    15ac:	9f 93       	push	r25
	tickOverflowCount += 1;
    15ae:	80 91 1f 02 	lds	r24, 0x021F
    15b2:	90 91 20 02 	lds	r25, 0x0220
    15b6:	01 96       	adiw	r24, 0x01	; 1
    15b8:	90 93 20 02 	sts	0x0220, r25
    15bc:	80 93 1f 02 	sts	0x021F, r24
}
    15c0:	9f 91       	pop	r25
    15c2:	8f 91       	pop	r24
    15c4:	0f 90       	pop	r0
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	0f 90       	pop	r0
    15ca:	1f 90       	pop	r1
    15cc:	18 95       	reti

000015ce <main>:

/**
  * This function boots the OS and creates the first task: a_main
  */
void main() {
	setup();
    15ce:	e9 de       	rcall	.-558    	; 0x13a2 <setup>
	
	OS_Init();
    15d0:	c9 d8       	rcall	.-3694   	; 0x764 <OS_Init>
	Task_Create(a_main, 0, 1);
    15d2:	41 e0       	ldi	r20, 0x01	; 1
    15d4:	50 e0       	ldi	r21, 0x00	; 0
    15d6:	60 e0       	ldi	r22, 0x00	; 0
    15d8:	70 e0       	ldi	r23, 0x00	; 0
    15da:	86 ea       	ldi	r24, 0xA6	; 166
    15dc:	92 e0       	ldi	r25, 0x02	; 2
    15de:	a9 de       	rcall	.-686    	; 0x1332 <Task_Create>
	OS_Start();
    15e0:	6e ca       	rjmp	.-2852   	; 0xabe <OS_Start>
    15e2:	08 95       	ret

000015e4 <enqueueWQ>:
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
}

void enqueueWQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    15e4:	cf 93       	push	r28
    15e6:	df 93       	push	r29
    15e8:	ea 01       	movw	r28, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    15ea:	28 81       	ld	r18, Y
    15ec:	39 81       	ldd	r19, Y+1	; 0x01
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
}

void enqueueWQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    15ee:	2f 30       	cpi	r18, 0x0F	; 15
    15f0:	31 05       	cpc	r19, r1
    15f2:	29 f1       	breq	.+74     	; 0x163e <enqueueWQ+0x5a>
        return;
    }

    int i = (*QCount) - 1;
    15f4:	e8 81       	ld	r30, Y
    15f6:	f9 81       	ldd	r31, Y+1	; 0x01
    15f8:	9f 01       	movw	r18, r30
    15fa:	21 50       	subi	r18, 0x01	; 1
    15fc:	31 09       	sbc	r19, r1

    while(i >= 0) {
    15fe:	72 f0       	brmi	.+28     	; 0x161c <enqueueWQ+0x38>
    1600:	ee 0f       	add	r30, r30
    1602:	ff 1f       	adc	r31, r31
    1604:	e6 0f       	add	r30, r22
    1606:	f7 1f       	adc	r31, r23
    1608:	db 01       	movw	r26, r22
        Queue[i+1] = Queue[i];
    160a:	32 91       	ld	r19, -Z
    160c:	22 91       	ld	r18, -Z
    160e:	33 83       	std	Z+3, r19	; 0x03
    1610:	22 83       	std	Z+2, r18	; 0x02
        return;
    }

    int i = (*QCount) - 1;

    while(i >= 0) {
    1612:	ea 17       	cp	r30, r26
    1614:	fb 07       	cpc	r31, r27
    1616:	c9 f7       	brne	.-14     	; 0x160a <enqueueWQ+0x26>
        Queue[i+1] = Queue[i];
        i--;
    1618:	2f ef       	ldi	r18, 0xFF	; 255
    161a:	3f ef       	ldi	r19, 0xFF	; 255
    }

    Queue[i+1] = *p;
    161c:	fc 01       	movw	r30, r24
    161e:	80 81       	ld	r24, Z
    1620:	91 81       	ldd	r25, Z+1	; 0x01
    1622:	2f 5f       	subi	r18, 0xFF	; 255
    1624:	3f 4f       	sbci	r19, 0xFF	; 255
    1626:	22 0f       	add	r18, r18
    1628:	33 1f       	adc	r19, r19
    162a:	fb 01       	movw	r30, r22
    162c:	e2 0f       	add	r30, r18
    162e:	f3 1f       	adc	r31, r19
    1630:	91 83       	std	Z+1, r25	; 0x01
    1632:	80 83       	st	Z, r24
    (*QCount)++;
    1634:	88 81       	ld	r24, Y
    1636:	99 81       	ldd	r25, Y+1	; 0x01
    1638:	01 96       	adiw	r24, 0x01	; 1
    163a:	99 83       	std	Y+1, r25	; 0x01
    163c:	88 83       	st	Y, r24
}
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	08 95       	ret

00001644 <enqueueSQ>:

void enqueueSQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    1644:	cf 92       	push	r12
    1646:	df 92       	push	r13
    1648:	ef 92       	push	r14
    164a:	ff 92       	push	r15
    164c:	0f 93       	push	r16
    164e:	1f 93       	push	r17
    1650:	cf 93       	push	r28
    1652:	df 93       	push	r29

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    1654:	ea 01       	movw	r28, r20
    1656:	28 81       	ld	r18, Y
    1658:	39 81       	ldd	r19, Y+1	; 0x01
    Queue[i+1] = *p;
    (*QCount)++;
}

void enqueueSQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    165a:	2f 30       	cpi	r18, 0x0F	; 15
    165c:	31 05       	cpc	r19, r1
    165e:	09 f4       	brne	.+2      	; 0x1662 <enqueueSQ+0x1e>
    1660:	59 c0       	rjmp	.+178    	; 0x1714 <enqueueSQ+0xd0>
        return;
    }

    int i = (*QCount) - 1;
    1662:	a8 81       	ld	r26, Y
    1664:	b9 81       	ldd	r27, Y+1	; 0x01
    1666:	11 97       	sbiw	r26, 0x01	; 1

    volatile PD *new = *p;
    1668:	fc 01       	movw	r30, r24
    166a:	c0 80       	ld	r12, Z
    166c:	d1 80       	ldd	r13, Z+1	; 0x01

    volatile PD *temp = Queue[i];
    166e:	fd 01       	movw	r30, r26
    1670:	ee 0f       	add	r30, r30
    1672:	ff 1f       	adc	r31, r31
    1674:	eb 01       	movw	r28, r22
    1676:	ce 0f       	add	r28, r30
    1678:	df 1f       	adc	r29, r31
    167a:	28 81       	ld	r18, Y
    167c:	39 81       	ldd	r19, Y+1	; 0x01

    while(i >= 0 && ((new->wakeTickOverflow > temp->wakeTickOverflow) || ((new->wakeTickOverflow >= temp->wakeTickOverflow) && (new->wakeTick >= temp->wakeTick)))) {
    167e:	bb 23       	and	r27, r27
    1680:	cc f1       	brlt	.+114    	; 0x16f4 <enqueueSQ+0xb0>
    1682:	fe 01       	movw	r30, r28
    1684:	76 01       	movw	r14, r12
    1686:	c0 ef       	ldi	r28, 0xF0	; 240
    1688:	ec 1a       	sub	r14, r28
    168a:	ce ef       	ldi	r28, 0xFE	; 254
    168c:	fc 0a       	sbc	r15, r28
    168e:	de ee       	ldi	r29, 0xEE	; 238
    1690:	cd 1a       	sub	r12, r29
    1692:	de ef       	ldi	r29, 0xFE	; 254
    1694:	dd 0a       	sbc	r13, r29
    1696:	0b c0       	rjmp	.+22     	; 0x16ae <enqueueSQ+0x6a>
        Queue[i+1] = Queue[i];
    1698:	20 81       	ld	r18, Z
    169a:	31 81       	ldd	r19, Z+1	; 0x01
    169c:	33 83       	std	Z+3, r19	; 0x03
    169e:	22 83       	std	Z+2, r18	; 0x02
        i--;
    16a0:	11 97       	sbiw	r26, 0x01	; 1
        temp = Queue[i];
    16a2:	32 91       	ld	r19, -Z
    16a4:	22 91       	ld	r18, -Z

    volatile PD *new = *p;

    volatile PD *temp = Queue[i];

    while(i >= 0 && ((new->wakeTickOverflow > temp->wakeTickOverflow) || ((new->wakeTickOverflow >= temp->wakeTickOverflow) && (new->wakeTick >= temp->wakeTick)))) {
    16a6:	af 3f       	cpi	r26, 0xFF	; 255
    16a8:	cf ef       	ldi	r28, 0xFF	; 255
    16aa:	bc 07       	cpc	r27, r28
    16ac:	19 f1       	breq	.+70     	; 0x16f4 <enqueueSQ+0xb0>
    16ae:	e7 01       	movw	r28, r14
    16b0:	08 81       	ld	r16, Y
    16b2:	19 81       	ldd	r17, Y+1	; 0x01
    16b4:	e9 01       	movw	r28, r18
    16b6:	c0 5f       	subi	r28, 0xF0	; 240
    16b8:	de 4f       	sbci	r29, 0xFE	; 254
    16ba:	09 90       	ld	r0, Y+
    16bc:	d8 81       	ld	r29, Y
    16be:	c0 2d       	mov	r28, r0
    16c0:	c0 17       	cp	r28, r16
    16c2:	d1 07       	cpc	r29, r17
    16c4:	48 f3       	brcs	.-46     	; 0x1698 <enqueueSQ+0x54>
    16c6:	e7 01       	movw	r28, r14
    16c8:	08 81       	ld	r16, Y
    16ca:	19 81       	ldd	r17, Y+1	; 0x01
    16cc:	e9 01       	movw	r28, r18
    16ce:	c0 5f       	subi	r28, 0xF0	; 240
    16d0:	de 4f       	sbci	r29, 0xFE	; 254
    16d2:	09 90       	ld	r0, Y+
    16d4:	d8 81       	ld	r29, Y
    16d6:	c0 2d       	mov	r28, r0
    16d8:	0c 17       	cp	r16, r28
    16da:	1d 07       	cpc	r17, r29
    16dc:	58 f0       	brcs	.+22     	; 0x16f4 <enqueueSQ+0xb0>
    16de:	e6 01       	movw	r28, r12
    16e0:	08 81       	ld	r16, Y
    16e2:	19 81       	ldd	r17, Y+1	; 0x01
    16e4:	2e 5e       	subi	r18, 0xEE	; 238
    16e6:	3e 4f       	sbci	r19, 0xFE	; 254
    16e8:	e9 01       	movw	r28, r18
    16ea:	28 81       	ld	r18, Y
    16ec:	39 81       	ldd	r19, Y+1	; 0x01
    16ee:	02 17       	cp	r16, r18
    16f0:	13 07       	cpc	r17, r19
    16f2:	90 f6       	brcc	.-92     	; 0x1698 <enqueueSQ+0x54>
        Queue[i+1] = Queue[i];
        i--;
        temp = Queue[i];
    }

    Queue[i+1] = *p;
    16f4:	fc 01       	movw	r30, r24
    16f6:	80 81       	ld	r24, Z
    16f8:	91 81       	ldd	r25, Z+1	; 0x01
    16fa:	11 96       	adiw	r26, 0x01	; 1
    16fc:	aa 0f       	add	r26, r26
    16fe:	bb 1f       	adc	r27, r27
    1700:	a6 0f       	add	r26, r22
    1702:	b7 1f       	adc	r27, r23
    1704:	8d 93       	st	X+, r24
    1706:	9c 93       	st	X, r25
    (*QCount)++;
    1708:	ea 01       	movw	r28, r20
    170a:	88 81       	ld	r24, Y
    170c:	99 81       	ldd	r25, Y+1	; 0x01
    170e:	01 96       	adiw	r24, 0x01	; 1
    1710:	99 83       	std	Y+1, r25	; 0x01
    1712:	88 83       	st	Y, r24
}
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	1f 91       	pop	r17
    171a:	0f 91       	pop	r16
    171c:	ff 90       	pop	r15
    171e:	ef 90       	pop	r14
    1720:	df 90       	pop	r13
    1722:	cf 90       	pop	r12
    1724:	08 95       	ret

00001726 <enqueueRQ>:

/*
 *  Insert into the queue sorted by priority
 */
void enqueueRQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    1726:	cf 92       	push	r12
    1728:	df 92       	push	r13
    172a:	ef 92       	push	r14
    172c:	ff 92       	push	r15
    172e:	0f 93       	push	r16
    1730:	1f 93       	push	r17
    1732:	cf 93       	push	r28
    1734:	df 93       	push	r29
    1736:	6a 01       	movw	r12, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    1738:	ea 01       	movw	r28, r20
    173a:	28 81       	ld	r18, Y
    173c:	39 81       	ldd	r19, Y+1	; 0x01

/*
 *  Insert into the queue sorted by priority
 */
void enqueueRQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    173e:	2f 30       	cpi	r18, 0x0F	; 15
    1740:	31 05       	cpc	r19, r1
    1742:	09 f4       	brne	.+2      	; 0x1746 <enqueueRQ+0x20>
    1744:	4a c0       	rjmp	.+148    	; 0x17da <enqueueRQ+0xb4>
        return;
    }

    int i = (*QCount) - 1;
    1746:	28 81       	ld	r18, Y
    1748:	39 81       	ldd	r19, Y+1	; 0x01
    174a:	21 50       	subi	r18, 0x01	; 1
    174c:	31 09       	sbc	r19, r1

    volatile PD *new = *p;
    174e:	fc 01       	movw	r30, r24
    1750:	00 81       	ld	r16, Z
    1752:	11 81       	ldd	r17, Z+1	; 0x01

    volatile PD *temp = Queue[i];
    1754:	f9 01       	movw	r30, r18
    1756:	ee 0f       	add	r30, r30
    1758:	ff 1f       	adc	r31, r31
    175a:	db 01       	movw	r26, r22
    175c:	ae 0f       	add	r26, r30
    175e:	bf 1f       	adc	r27, r31
    1760:	4d 91       	ld	r20, X+
    1762:	5c 91       	ld	r21, X

    while(i >= 0 && (new->inheritedPy >= temp->inheritedPy)) {
    1764:	33 23       	and	r19, r19
    1766:	3c f1       	brlt	.+78     	; 0x17b6 <enqueueRQ+0x90>
    1768:	d8 01       	movw	r26, r16
    176a:	a9 5f       	subi	r26, 0xF9	; 249
    176c:	be 4f       	sbci	r27, 0xFE	; 254
    176e:	ed 90       	ld	r14, X+
    1770:	fc 90       	ld	r15, X
    1772:	da 01       	movw	r26, r20
    1774:	a9 5f       	subi	r26, 0xF9	; 249
    1776:	be 4f       	sbci	r27, 0xFE	; 254
    1778:	4d 91       	ld	r20, X+
    177a:	5c 91       	ld	r21, X
    177c:	e4 16       	cp	r14, r20
    177e:	f5 06       	cpc	r15, r21
    1780:	d0 f0       	brcs	.+52     	; 0x17b6 <enqueueRQ+0x90>
    1782:	e6 0f       	add	r30, r22
    1784:	f7 1f       	adc	r31, r23
    1786:	09 5f       	subi	r16, 0xF9	; 249
    1788:	1e 4f       	sbci	r17, 0xFE	; 254
        Queue[i+1] = Queue[i];
    178a:	a0 81       	ld	r26, Z
    178c:	b1 81       	ldd	r27, Z+1	; 0x01
    178e:	b3 83       	std	Z+3, r27	; 0x03
    1790:	a2 83       	std	Z+2, r26	; 0x02
        i--;
    1792:	21 50       	subi	r18, 0x01	; 1
    1794:	31 09       	sbc	r19, r1
        temp = Queue[i];
    1796:	b2 91       	ld	r27, -Z
    1798:	a2 91       	ld	r26, -Z

    volatile PD *new = *p;

    volatile PD *temp = Queue[i];

    while(i >= 0 && (new->inheritedPy >= temp->inheritedPy)) {
    179a:	2f 3f       	cpi	r18, 0xFF	; 255
    179c:	4f ef       	ldi	r20, 0xFF	; 255
    179e:	34 07       	cpc	r19, r20
    17a0:	51 f0       	breq	.+20     	; 0x17b6 <enqueueRQ+0x90>
    17a2:	e8 01       	movw	r28, r16
    17a4:	e8 80       	ld	r14, Y
    17a6:	f9 80       	ldd	r15, Y+1	; 0x01
    17a8:	a9 5f       	subi	r26, 0xF9	; 249
    17aa:	be 4f       	sbci	r27, 0xFE	; 254
    17ac:	4d 91       	ld	r20, X+
    17ae:	5c 91       	ld	r21, X
    17b0:	e4 16       	cp	r14, r20
    17b2:	f5 06       	cpc	r15, r21
    17b4:	50 f7       	brcc	.-44     	; 0x178a <enqueueRQ+0x64>
        Queue[i+1] = Queue[i];
        i--;
        temp = Queue[i];
    }

    Queue[i+1] = *p;
    17b6:	fc 01       	movw	r30, r24
    17b8:	80 81       	ld	r24, Z
    17ba:	91 81       	ldd	r25, Z+1	; 0x01
    17bc:	2f 5f       	subi	r18, 0xFF	; 255
    17be:	3f 4f       	sbci	r19, 0xFF	; 255
    17c0:	22 0f       	add	r18, r18
    17c2:	33 1f       	adc	r19, r19
    17c4:	fb 01       	movw	r30, r22
    17c6:	e2 0f       	add	r30, r18
    17c8:	f3 1f       	adc	r31, r19
    17ca:	91 83       	std	Z+1, r25	; 0x01
    17cc:	80 83       	st	Z, r24
    (*QCount)++;
    17ce:	e6 01       	movw	r28, r12
    17d0:	88 81       	ld	r24, Y
    17d2:	99 81       	ldd	r25, Y+1	; 0x01
    17d4:	01 96       	adiw	r24, 0x01	; 1
    17d6:	99 83       	std	Y+1, r25	; 0x01
    17d8:	88 83       	st	Y, r24
}
    17da:	df 91       	pop	r29
    17dc:	cf 91       	pop	r28
    17de:	1f 91       	pop	r17
    17e0:	0f 91       	pop	r16
    17e2:	ff 90       	pop	r15
    17e4:	ef 90       	pop	r14
    17e6:	df 90       	pop	r13
    17e8:	cf 90       	pop	r12
    17ea:	08 95       	ret

000017ec <dequeueWQ>:

/*
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {
    17ec:	0f 93       	push	r16
    17ee:	1f 93       	push	r17
    17f0:	cf 93       	push	r28
    17f2:	df 93       	push	r29

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    17f4:	eb 01       	movw	r28, r22
    17f6:	28 81       	ld	r18, Y
    17f8:	39 81       	ldd	r19, Y+1	; 0x01
/*
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {

    if(isEmpty(QCount)) {
    17fa:	23 2b       	or	r18, r19
    17fc:	09 f4       	brne	.+2      	; 0x1800 <dequeueWQ+0x14>
    17fe:	54 c0       	rjmp	.+168    	; 0x18a8 <dequeueWQ+0xbc>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
    1800:	28 81       	ld	r18, Y
    1802:	39 81       	ldd	r19, Y+1	; 0x01
    1804:	21 50       	subi	r18, 0x01	; 1
    1806:	31 09       	sbc	r19, r1
    1808:	0a f4       	brpl	.+2      	; 0x180c <dequeueWQ+0x20>
    180a:	51 c0       	rjmp	.+162    	; 0x18ae <dequeueWQ+0xc2>
        if(Queue[i]->m == m){
    180c:	e9 01       	movw	r28, r18
    180e:	cc 0f       	add	r28, r28
    1810:	dd 1f       	adc	r29, r29
    1812:	fc 01       	movw	r30, r24
    1814:	ec 0f       	add	r30, r28
    1816:	fd 1f       	adc	r31, r29
    1818:	a0 81       	ld	r26, Z
    181a:	b1 81       	ldd	r27, Z+1	; 0x01
    181c:	fd 01       	movw	r30, r26
    181e:	ec 5e       	subi	r30, 0xEC	; 236
    1820:	fe 4f       	sbci	r31, 0xFE	; 254
    1822:	01 90       	ld	r0, Z+
    1824:	f0 81       	ld	r31, Z
    1826:	e0 2d       	mov	r30, r0
    1828:	e4 17       	cp	r30, r20
    182a:	f5 07       	cpc	r31, r21
    182c:	81 f4       	brne	.+32     	; 0x184e <dequeueWQ+0x62>
    182e:	0a c0       	rjmp	.+20     	; 0x1844 <dequeueWQ+0x58>
    1830:	ba 91       	ld	r27, -Y
    1832:	aa 91       	ld	r26, -Y
    1834:	fd 01       	movw	r30, r26
    1836:	ec 5e       	subi	r30, 0xEC	; 236
    1838:	fe 4f       	sbci	r31, 0xFE	; 254
    183a:	00 81       	ld	r16, Z
    183c:	11 81       	ldd	r17, Z+1	; 0x01
    183e:	04 17       	cp	r16, r20
    1840:	15 07       	cpc	r17, r21
    1842:	39 f4       	brne	.+14     	; 0x1852 <dequeueWQ+0x66>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
    1844:	10 97       	sbiw	r26, 0x00	; 0
    1846:	59 f4       	brne	.+22     	; 0x185e <dequeueWQ+0x72>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	32 c0       	rjmp	.+100    	; 0x18b2 <dequeueWQ+0xc6>
    184e:	c8 0f       	add	r28, r24
    1850:	d9 1f       	adc	r29, r25
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
    1852:	21 50       	subi	r18, 0x01	; 1
    1854:	31 09       	sbc	r19, r1
    1856:	60 f7       	brcc	.-40     	; 0x1830 <dequeueWQ+0x44>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	2a c0       	rjmp	.+84     	; 0x18b2 <dequeueWQ+0xc6>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i<(*QCount)-1) {
    185e:	eb 01       	movw	r28, r22
    1860:	48 81       	ld	r20, Y
    1862:	59 81       	ldd	r21, Y+1	; 0x01
    1864:	41 50       	subi	r20, 0x01	; 1
    1866:	51 09       	sbc	r21, r1
    1868:	24 17       	cp	r18, r20
    186a:	35 07       	cpc	r19, r21
    186c:	a4 f4       	brge	.+40     	; 0x1896 <dequeueWQ+0xaa>
    186e:	a9 01       	movw	r20, r18
    1870:	44 0f       	add	r20, r20
    1872:	55 1f       	adc	r21, r21
    1874:	fc 01       	movw	r30, r24
    1876:	e4 0f       	add	r30, r20
    1878:	f5 1f       	adc	r31, r21
            Queue[i] = Queue[i+1];
    187a:	82 81       	ldd	r24, Z+2	; 0x02
    187c:	93 81       	ldd	r25, Z+3	; 0x03
    187e:	81 93       	st	Z+, r24
    1880:	91 93       	st	Z+, r25
            i++;
    1882:	2f 5f       	subi	r18, 0xFF	; 255
    1884:	3f 4f       	sbci	r19, 0xFF	; 255
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i<(*QCount)-1) {
    1886:	eb 01       	movw	r28, r22
    1888:	48 81       	ld	r20, Y
    188a:	59 81       	ldd	r21, Y+1	; 0x01
    188c:	41 50       	subi	r20, 0x01	; 1
    188e:	51 09       	sbc	r21, r1
    1890:	24 17       	cp	r18, r20
    1892:	35 07       	cpc	r19, r21
    1894:	94 f3       	brlt	.-28     	; 0x187a <dequeueWQ+0x8e>
            Queue[i] = Queue[i+1];
            i++;
        }
        (*QCount)--;
    1896:	fb 01       	movw	r30, r22
    1898:	80 81       	ld	r24, Z
    189a:	91 81       	ldd	r25, Z+1	; 0x01
    189c:	01 97       	sbiw	r24, 0x01	; 1
    189e:	91 83       	std	Z+1, r25	; 0x01
    18a0:	80 83       	st	Z, r24

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
        if(Queue[i]->m == m){
            result = Queue[i];
    18a2:	8a 2f       	mov	r24, r26
    18a4:	9b 2f       	mov	r25, r27
    18a6:	05 c0       	rjmp	.+10     	; 0x18b2 <dequeueWQ+0xc6>
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {

    if(isEmpty(QCount)) {
        return NULL;
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <dequeueWQ+0xc6>
            i++;
        }
        (*QCount)--;
    }

    return result;
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	90 e0       	ldi	r25, 0x00	; 0
}
    18b2:	df 91       	pop	r29
    18b4:	cf 91       	pop	r28
    18b6:	1f 91       	pop	r17
    18b8:	0f 91       	pop	r16
    18ba:	08 95       	ret

000018bc <dequeueRQ>:

/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {
    18bc:	cf 93       	push	r28
    18be:	df 93       	push	r29
    18c0:	eb 01       	movw	r28, r22

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    18c2:	28 81       	ld	r18, Y
    18c4:	39 81       	ldd	r19, Y+1	; 0x01
/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
    18c6:	23 2b       	or	r18, r19
    18c8:	09 f4       	brne	.+2      	; 0x18cc <dequeueRQ+0x10>
    18ca:	48 c0       	rjmp	.+144    	; 0x195c <dequeueRQ+0xa0>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
    18cc:	e8 81       	ld	r30, Y
    18ce:	f9 81       	ldd	r31, Y+1	; 0x01
    18d0:	9f 01       	movw	r18, r30
    18d2:	21 50       	subi	r18, 0x01	; 1
    18d4:	31 09       	sbc	r19, r1
    18d6:	0a f4       	brpl	.+2      	; 0x18da <dequeueRQ+0x1e>
    18d8:	44 c0       	rjmp	.+136    	; 0x1962 <dequeueRQ+0xa6>
    18da:	ee 0f       	add	r30, r30
    18dc:	ff 1f       	adc	r31, r31
    18de:	e8 0f       	add	r30, r24
    18e0:	f9 1f       	adc	r31, r25
        if((Queue[i]->suspended == 0) && (Queue[i]->state == READY)) {
    18e2:	52 91       	ld	r21, -Z
    18e4:	42 91       	ld	r20, -Z
    18e6:	da 01       	movw	r26, r20
    18e8:	a6 5e       	subi	r26, 0xE6	; 230
    18ea:	be 4f       	sbci	r27, 0xFE	; 254
    18ec:	6d 91       	ld	r22, X+
    18ee:	7c 91       	ld	r23, X
    18f0:	11 97       	sbiw	r26, 0x01	; 1
    18f2:	67 2b       	or	r22, r23
    18f4:	59 f4       	brne	.+22     	; 0x190c <dequeueRQ+0x50>
    18f6:	56 97       	sbiw	r26, 0x16	; 22
    18f8:	6c 91       	ld	r22, X
    18fa:	61 30       	cpi	r22, 0x01	; 1
    18fc:	39 f4       	brne	.+14     	; 0x190c <dequeueRQ+0x50>
    18fe:	f9 01       	movw	r30, r18
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
    1900:	41 15       	cp	r20, r1
    1902:	51 05       	cpc	r21, r1
    1904:	49 f4       	brne	.+18     	; 0x1918 <dequeueRQ+0x5c>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	2d c0       	rjmp	.+90     	; 0x1966 <dequeueRQ+0xaa>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
    190c:	21 50       	subi	r18, 0x01	; 1
    190e:	31 09       	sbc	r19, r1
    1910:	40 f7       	brcc	.-48     	; 0x18e2 <dequeueRQ+0x26>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	27 c0       	rjmp	.+78     	; 0x1966 <dequeueRQ+0xaa>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i < (*QCount)-1) {
    1918:	68 81       	ld	r22, Y
    191a:	79 81       	ldd	r23, Y+1	; 0x01
    191c:	61 50       	subi	r22, 0x01	; 1
    191e:	71 09       	sbc	r23, r1
    1920:	26 17       	cp	r18, r22
    1922:	37 07       	cpc	r19, r23
    1924:	9c f4       	brge	.+38     	; 0x194c <dequeueRQ+0x90>
    1926:	ee 0f       	add	r30, r30
    1928:	ff 1f       	adc	r31, r31
    192a:	dc 01       	movw	r26, r24
    192c:	ae 0f       	add	r26, r30
    192e:	bf 1f       	adc	r27, r31
            Queue[i] = Queue[i+1];
    1930:	12 96       	adiw	r26, 0x02	; 2
    1932:	8d 91       	ld	r24, X+
    1934:	9c 91       	ld	r25, X
    1936:	13 97       	sbiw	r26, 0x03	; 3
    1938:	8d 93       	st	X+, r24
    193a:	9d 93       	st	X+, r25
            i++;
    193c:	2f 5f       	subi	r18, 0xFF	; 255
    193e:	3f 4f       	sbci	r19, 0xFF	; 255
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i < (*QCount)-1) {
    1940:	e8 81       	ld	r30, Y
    1942:	f9 81       	ldd	r31, Y+1	; 0x01
    1944:	31 97       	sbiw	r30, 0x01	; 1
    1946:	2e 17       	cp	r18, r30
    1948:	3f 07       	cpc	r19, r31
    194a:	94 f3       	brlt	.-28     	; 0x1930 <dequeueRQ+0x74>
            Queue[i] = Queue[i+1];
            i++;
        }
        (*QCount)--;
    194c:	88 81       	ld	r24, Y
    194e:	99 81       	ldd	r25, Y+1	; 0x01
    1950:	01 97       	sbiw	r24, 0x01	; 1
    1952:	99 83       	std	Y+1, r25	; 0x01
    1954:	88 83       	st	Y, r24
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
        if((Queue[i]->suspended == 0) && (Queue[i]->state == READY)) {
    1956:	84 2f       	mov	r24, r20
    1958:	95 2f       	mov	r25, r21
    195a:	05 c0       	rjmp	.+10     	; 0x1966 <dequeueRQ+0xaa>
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
        return NULL;
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <dequeueRQ+0xaa>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	90 e0       	ldi	r25, 0x00	; 0
}
    1966:	df 91       	pop	r29
    1968:	cf 91       	pop	r28
    196a:	08 95       	ret

0000196c <dequeue>:

/*
 *  Return the first element of the queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
    196c:	db 01       	movw	r26, r22

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    196e:	2d 91       	ld	r18, X+
    1970:	3c 91       	ld	r19, X
    1972:	11 97       	sbiw	r26, 0x01	; 1
/*
 *  Return the first element of the queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
    1974:	23 2b       	or	r18, r19
    1976:	a9 f0       	breq	.+42     	; 0x19a2 <dequeue+0x36>
        return;
    }

    volatile PD *result = (Queue[(*QCount)-1]);
    1978:	2d 91       	ld	r18, X+
    197a:	3c 91       	ld	r19, X
    197c:	11 97       	sbiw	r26, 0x01	; 1
    197e:	f9 01       	movw	r30, r18
    1980:	e1 50       	subi	r30, 0x01	; 1
    1982:	f0 48       	sbci	r31, 0x80	; 128
    1984:	ee 0f       	add	r30, r30
    1986:	ff 1f       	adc	r31, r31
    1988:	e8 0f       	add	r30, r24
    198a:	f9 1f       	adc	r31, r25
    198c:	80 81       	ld	r24, Z
    198e:	91 81       	ldd	r25, Z+1	; 0x01
    (*QCount)--;
    1990:	2d 91       	ld	r18, X+
    1992:	3c 91       	ld	r19, X
    1994:	11 97       	sbiw	r26, 0x01	; 1
    1996:	21 50       	subi	r18, 0x01	; 1
    1998:	31 09       	sbc	r19, r1
    199a:	11 96       	adiw	r26, 0x01	; 1
    199c:	3c 93       	st	X, r19
    199e:	2e 93       	st	-X, r18
    19a0:	08 95       	ret

    return result;
}
    19a2:	08 95       	ret

000019a4 <_get_status>:
	}

	wh = (16 - weight) * 100;
	wh /= 16;
	return wh;
}
    19a4:	2d 98       	cbi	0x05, 5	; 5
    19a6:	8f ef       	ldi	r24, 0xFF	; 255
    19a8:	04 d1       	rcall	.+520    	; 0x1bb2 <SPI_Write_Byte>
    19aa:	2d 9a       	sbi	0x05, 5	; 5
    19ac:	08 95       	ret

000019ae <_set_register>:
    19ae:	0f 93       	push	r16
    19b0:	1f 93       	push	r17
    19b2:	cf 93       	push	r28
    19b4:	df 93       	push	r29
    19b6:	8b 01       	movw	r16, r22
    19b8:	d4 2f       	mov	r29, r20
    19ba:	2d 98       	cbi	0x05, 5	; 5
    19bc:	8f 71       	andi	r24, 0x1F	; 31
    19be:	80 62       	ori	r24, 0x20	; 32
    19c0:	f8 d0       	rcall	.+496    	; 0x1bb2 <SPI_Write_Byte>
    19c2:	c8 2f       	mov	r28, r24
    19c4:	6d 2f       	mov	r22, r29
    19c6:	c8 01       	movw	r24, r16
    19c8:	e1 d0       	rcall	.+450    	; 0x1b8c <SPI_Write_Block>
    19ca:	2d 9a       	sbi	0x05, 5	; 5
    19cc:	8c 2f       	mov	r24, r28
    19ce:	df 91       	pop	r29
    19d0:	cf 91       	pop	r28
    19d2:	1f 91       	pop	r17
    19d4:	0f 91       	pop	r16
    19d6:	08 95       	ret

000019d8 <_get_register>:
    19d8:	0f 93       	push	r16
    19da:	1f 93       	push	r17
    19dc:	cf 93       	push	r28
    19de:	df 93       	push	r29
    19e0:	eb 01       	movw	r28, r22
    19e2:	14 2f       	mov	r17, r20
    19e4:	44 23       	and	r20, r20
    19e6:	69 f0       	breq	.+26     	; 0x1a02 <_get_register+0x2a>
    19e8:	fb 01       	movw	r30, r22
    19ea:	2f ef       	ldi	r18, 0xFF	; 255
    19ec:	24 0f       	add	r18, r20
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	2f 5f       	subi	r18, 0xFF	; 255
    19f2:	3f 4f       	sbci	r19, 0xFF	; 255
    19f4:	26 0f       	add	r18, r22
    19f6:	37 1f       	adc	r19, r23
    19f8:	9f ef       	ldi	r25, 0xFF	; 255
    19fa:	91 93       	st	Z+, r25
    19fc:	e2 17       	cp	r30, r18
    19fe:	f3 07       	cpc	r31, r19
    1a00:	e1 f7       	brne	.-8      	; 0x19fa <_get_register+0x22>
    1a02:	2d 98       	cbi	0x05, 5	; 5
    1a04:	8f 71       	andi	r24, 0x1F	; 31
    1a06:	d5 d0       	rcall	.+426    	; 0x1bb2 <SPI_Write_Byte>
    1a08:	08 2f       	mov	r16, r24
    1a0a:	41 2f       	mov	r20, r17
    1a0c:	be 01       	movw	r22, r28
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	a5 d0       	rcall	.+330    	; 0x1b5e <SPI_ReadWrite_Block>
    1a14:	2d 9a       	sbi	0x05, 5	; 5
    1a16:	80 2f       	mov	r24, r16
    1a18:	df 91       	pop	r29
    1a1a:	cf 91       	pop	r28
    1a1c:	1f 91       	pop	r17
    1a1e:	0f 91       	pop	r16
    1a20:	08 95       	ret

00001a22 <_set_rx_mode>:
    1a22:	cf 93       	push	r28
    1a24:	df 93       	push	r29
    1a26:	1f 92       	push	r1
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62
    1a2c:	41 e0       	ldi	r20, 0x01	; 1
    1a2e:	be 01       	movw	r22, r28
    1a30:	6f 5f       	subi	r22, 0xFF	; 255
    1a32:	7f 4f       	sbci	r23, 0xFF	; 255
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	d0 df       	rcall	.-96     	; 0x19d8 <_get_register>
    1a38:	89 81       	ldd	r24, Y+1	; 0x01
    1a3a:	80 fd       	sbrc	r24, 0
    1a3c:	10 c0       	rjmp	.+32     	; 0x1a5e <_set_rx_mode+0x3c>
    1a3e:	81 60       	ori	r24, 0x01	; 1
    1a40:	89 83       	std	Y+1, r24	; 0x01
    1a42:	41 e0       	ldi	r20, 0x01	; 1
    1a44:	be 01       	movw	r22, r28
    1a46:	6f 5f       	subi	r22, 0xFF	; 255
    1a48:	7f 4f       	sbci	r23, 0xFF	; 255
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	b0 df       	rcall	.-160    	; 0x19ae <_set_register>
    1a4e:	85 e1       	ldi	r24, 0x15	; 21
    1a50:	8a 95       	dec	r24
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <_set_rx_mode+0x2e>
    1a54:	00 c0       	rjmp	.+0      	; 0x1a56 <_set_rx_mode+0x34>
    1a56:	85 e1       	ldi	r24, 0x15	; 21
    1a58:	8a 95       	dec	r24
    1a5a:	f1 f7       	brne	.-4      	; 0x1a58 <_set_rx_mode+0x36>
    1a5c:	00 c0       	rjmp	.+0      	; 0x1a5e <_set_rx_mode+0x3c>
    1a5e:	0f 90       	pop	r0
    1a60:	df 91       	pop	r29
    1a62:	cf 91       	pop	r28
    1a64:	08 95       	ret

00001a66 <_reset_pipe0_address>:
    1a66:	80 91 09 02 	lds	r24, 0x0209
    1a6a:	88 23       	and	r24, r24
    1a6c:	29 f0       	breq	.+10     	; 0x1a78 <_reset_pipe0_address+0x12>
    1a6e:	45 e0       	ldi	r20, 0x05	; 5
    1a70:	64 e0       	ldi	r22, 0x04	; 4
    1a72:	72 e0       	ldi	r23, 0x02	; 2
    1a74:	8a e0       	ldi	r24, 0x0A	; 10
    1a76:	9b cf       	rjmp	.-202    	; 0x19ae <_set_register>
    1a78:	08 95       	ret

00001a7a <__vector_1>:

// Interrupt handler
ISR(INT0_vect)
{
    1a7a:	1f 92       	push	r1
    1a7c:	0f 92       	push	r0
    1a7e:	0f b6       	in	r0, 0x3f	; 63
    1a80:	0f 92       	push	r0
    1a82:	11 24       	eor	r1, r1
    1a84:	0b b6       	in	r0, 0x3b	; 59
    1a86:	0f 92       	push	r0
    1a88:	2f 93       	push	r18
    1a8a:	3f 93       	push	r19
    1a8c:	4f 93       	push	r20
    1a8e:	5f 93       	push	r21
    1a90:	6f 93       	push	r22
    1a92:	7f 93       	push	r23
    1a94:	8f 93       	push	r24
    1a96:	9f 93       	push	r25
    1a98:	af 93       	push	r26
    1a9a:	bf 93       	push	r27
    1a9c:	ef 93       	push	r30
    1a9e:	ff 93       	push	r31
    1aa0:	cf 93       	push	r28
    1aa2:	df 93       	push	r29
    1aa4:	1f 92       	push	r1
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;
    uint8_t pipe_number;

    RADIO_CE_LOW();
    1aaa:	2c 98       	cbi	0x05, 4	; 5

    status = _get_status();
    1aac:	7b df       	rcall	.-266    	; 0x19a4 <_get_status>
    1aae:	89 83       	std	Y+1, r24	; 0x01

    if (status & _BV(RX_DR)) {
    1ab0:	86 ff       	sbrs	r24, 6
    1ab2:	04 c0       	rjmp	.+8      	; 0x1abc <__vector_1+0x42>
        pipe_number =  (status & 0xE) >> 1;
    1ab4:	8e 70       	andi	r24, 0x0E	; 14
        radio_rxhandler(pipe_number);
    1ab6:	86 95       	lsr	r24
    1ab8:	0e 94 66 01 	call	0x2cc	; 0x2cc <radio_rxhandler>
    }

    // We can get the TX_DS or the MAX_RT interrupt, but not both.
    if (status & _BV(TX_DS)) {
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	85 ff       	sbrs	r24, 5
    1ac0:	1b c0       	rjmp	.+54     	; 0x1af8 <__vector_1+0x7e>
    	// if there's nothing left to transmit, switch back to receive mode.
        transmit_lock = 0;
    1ac2:	10 92 13 15 	sts	0x1513, r1
        _reset_pipe0_address();
    1ac6:	cf df       	rcall	.-98     	; 0x1a66 <_reset_pipe0_address>
        _set_rx_mode();
    1ac8:	ac df       	rcall	.-168    	; 0x1a22 <_set_rx_mode>

        // indicate in the history that a packet was transmitted successfully by appending a 1.
        tx_history <<= 1;
    1aca:	80 91 02 02 	lds	r24, 0x0202
    1ace:	90 91 03 02 	lds	r25, 0x0203
    1ad2:	88 0f       	add	r24, r24
    1ad4:	99 1f       	adc	r25, r25
    1ad6:	90 93 03 02 	sts	0x0203, r25
    1ada:	80 93 02 02 	sts	0x0202, r24
        tx_history |= 1;
    1ade:	80 91 02 02 	lds	r24, 0x0202
    1ae2:	90 91 03 02 	lds	r25, 0x0203
    1ae6:	81 60       	ori	r24, 0x01	; 1
    1ae8:	90 93 03 02 	sts	0x0203, r25
    1aec:	80 93 02 02 	sts	0x0202, r24
        tx_last_status = RADIO_TX_SUCCESS;
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	80 93 01 02 	sts	0x0201, r24
    1af6:	14 c0       	rjmp	.+40     	; 0x1b20 <__vector_1+0xa6>
    } else if (status & _BV(MAX_RT)) {
    1af8:	84 ff       	sbrs	r24, 4
    1afa:	12 c0       	rjmp	.+36     	; 0x1b20 <__vector_1+0xa6>
        // enable SPI
       // RADIO_CSN_LOW();


        // flush the failed packet (it stays in the Tx FIFO; we could try to resend it by setting CE high)
        SPI_Write_Byte( FLUSH_TX );
    1afc:	81 ee       	ldi	r24, 0xE1	; 225
    1afe:	59 d0       	rcall	.+178    	; 0x1bb2 <SPI_Write_Byte>

        // resynch SPI
        //RADIO_CSN_HIGH();

        transmit_lock = 0;
    1b00:	10 92 13 15 	sts	0x1513, r1
        _reset_pipe0_address();
    1b04:	b0 df       	rcall	.-160    	; 0x1a66 <_reset_pipe0_address>
        _set_rx_mode();
    1b06:	8d df       	rcall	.-230    	; 0x1a22 <_set_rx_mode>

        // indicate in the history that a packet was dropped by appending a 0.
        tx_history <<= 1;
    1b08:	80 91 02 02 	lds	r24, 0x0202
    1b0c:	90 91 03 02 	lds	r25, 0x0203
    1b10:	88 0f       	add	r24, r24
    1b12:	99 1f       	adc	r25, r25
    1b14:	90 93 03 02 	sts	0x0203, r25
    1b18:	80 93 02 02 	sts	0x0202, r24
        tx_last_status = RADIO_TX_MAX_RT;
    1b1c:	10 92 01 02 	sts	0x0201, r1
    }

    // clear the interrupt flags.
	status = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
    1b20:	80 e7       	ldi	r24, 0x70	; 112
    1b22:	89 83       	std	Y+1, r24	; 0x01
	_set_register(STATUS, &status, 1);
    1b24:	41 e0       	ldi	r20, 0x01	; 1
    1b26:	be 01       	movw	r22, r28
    1b28:	6f 5f       	subi	r22, 0xFF	; 255
    1b2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b2c:	87 e0       	ldi	r24, 0x07	; 7
    1b2e:	3f df       	rcall	.-386    	; 0x19ae <_set_register>

    RADIO_CE_HIGH();
    1b30:	2c 9a       	sbi	0x05, 4	; 5
}
    1b32:	0f 90       	pop	r0
    1b34:	df 91       	pop	r29
    1b36:	cf 91       	pop	r28
    1b38:	ff 91       	pop	r31
    1b3a:	ef 91       	pop	r30
    1b3c:	bf 91       	pop	r27
    1b3e:	af 91       	pop	r26
    1b40:	9f 91       	pop	r25
    1b42:	8f 91       	pop	r24
    1b44:	7f 91       	pop	r23
    1b46:	6f 91       	pop	r22
    1b48:	5f 91       	pop	r21
    1b4a:	4f 91       	pop	r20
    1b4c:	3f 91       	pop	r19
    1b4e:	2f 91       	pop	r18
    1b50:	0f 90       	pop	r0
    1b52:	0b be       	out	0x3b, r0	; 59
    1b54:	0f 90       	pop	r0
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	0f 90       	pop	r0
    1b5a:	1f 90       	pop	r1
    1b5c:	18 95       	reti

00001b5e <SPI_ReadWrite_Block>:
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1b5e:	44 23       	and	r20, r20
    1b60:	a1 f0       	breq	.+40     	; 0x1b8a <SPI_ReadWrite_Block+0x2c>
    1b62:	fc 01       	movw	r30, r24
    1b64:	a6 2f       	mov	r26, r22
    1b66:	b7 2f       	mov	r27, r23
    1b68:	41 50       	subi	r20, 0x01	; 1
    1b6a:	24 2f       	mov	r18, r20
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	2f 5f       	subi	r18, 0xFF	; 255
    1b70:	3f 4f       	sbci	r19, 0xFF	; 255
    1b72:	28 0f       	add	r18, r24
    1b74:	39 1f       	adc	r19, r25
          SPDR = data[i];
    1b76:	91 91       	ld	r25, Z+
    1b78:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1b7a:	0d b4       	in	r0, 0x2d	; 45
    1b7c:	07 fe       	sbrs	r0, 7
    1b7e:	fd cf       	rjmp	.-6      	; 0x1b7a <SPI_ReadWrite_Block+0x1c>
          buffer[i] = SPDR;
    1b80:	9e b5       	in	r25, 0x2e	; 46
    1b82:	9d 93       	st	X+, r25
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1b84:	e2 17       	cp	r30, r18
    1b86:	f3 07       	cpc	r31, r19
    1b88:	b1 f7       	brne	.-20     	; 0x1b76 <SPI_ReadWrite_Block+0x18>
    1b8a:	08 95       	ret

00001b8c <SPI_Write_Block>:
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1b8c:	66 23       	and	r22, r22
    1b8e:	81 f0       	breq	.+32     	; 0x1bb0 <SPI_Write_Block+0x24>
    1b90:	fc 01       	movw	r30, r24
    1b92:	61 50       	subi	r22, 0x01	; 1
    1b94:	26 2f       	mov	r18, r22
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	2f 5f       	subi	r18, 0xFF	; 255
    1b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9c:	28 0f       	add	r18, r24
    1b9e:	39 1f       	adc	r19, r25
          SPDR = data[i];
    1ba0:	91 91       	ld	r25, Z+
    1ba2:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1ba4:	0d b4       	in	r0, 0x2d	; 45
    1ba6:	07 fe       	sbrs	r0, 7
    1ba8:	fd cf       	rjmp	.-6      	; 0x1ba4 <SPI_Write_Block+0x18>
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1baa:	e2 17       	cp	r30, r18
    1bac:	f3 07       	cpc	r31, r19
    1bae:	c1 f7       	brne	.-16     	; 0x1ba0 <SPI_Write_Block+0x14>
    1bb0:	08 95       	ret

00001bb2 <SPI_Write_Byte>:
    }
}

uint8_t SPI_Write_Byte(uint8_t byte)
{
    SPDR = byte;
    1bb2:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
    1bb4:	0d b4       	in	r0, 0x2d	; 45
    1bb6:	07 fe       	sbrs	r0, 7
    1bb8:	fd cf       	rjmp	.-6      	; 0x1bb4 <SPI_Write_Byte+0x2>
    return SPDR;
    1bba:	8e b5       	in	r24, 0x2e	; 46
}
    1bbc:	08 95       	ret

00001bbe <Roomba_Init>:
static void update_leds();

void Roomba_Init()
{
	uint8_t i;
	DD_DDR |= _BV(DD_PIN);
    1bbe:	3d 9a       	sbi	0x07, 5	; 7
	// Wake up the Roomba by driving the DD pin low for 500 ms.
	DD_PORT &= ~_BV(DD_PIN);
    1bc0:	45 98       	cbi	0x08, 5	; 8
    1bc2:	2f ef       	ldi	r18, 0xFF	; 255
    1bc4:	39 e6       	ldi	r19, 0x69	; 105
    1bc6:	88 e1       	ldi	r24, 0x18	; 24
    1bc8:	21 50       	subi	r18, 0x01	; 1
    1bca:	30 40       	sbci	r19, 0x00	; 0
    1bcc:	80 40       	sbci	r24, 0x00	; 0
    1bce:	e1 f7       	brne	.-8      	; 0x1bc8 <Roomba_Init+0xa>
    1bd0:	00 c0       	rjmp	.+0      	; 0x1bd2 <Roomba_Init+0x14>
    1bd2:	00 00       	nop
	_delay_ms(500);
	DD_PORT |= _BV(DD_PIN);
    1bd4:	45 9a       	sbi	0x08, 5	; 8
    1bd6:	9f ef       	ldi	r25, 0xFF	; 255
    1bd8:	27 ea       	ldi	r18, 0xA7	; 167
    1bda:	31 e6       	ldi	r19, 0x61	; 97
    1bdc:	91 50       	subi	r25, 0x01	; 1
    1bde:	20 40       	sbci	r18, 0x00	; 0
    1be0:	30 40       	sbci	r19, 0x00	; 0
    1be2:	e1 f7       	brne	.-8      	; 0x1bdc <Roomba_Init+0x1e>
    1be4:	00 c0       	rjmp	.+0      	; 0x1be6 <Roomba_Init+0x28>
    1be6:	00 00       	nop
    1be8:	83 e0       	ldi	r24, 0x03	; 3
	// Wait for 2 seconds, Then pulse the DD pin 3 times to set the Roomba to operate at 19200 baud.
	// This ensures that we know what baud rate to talk at.
	_delay_ms(2000);
	for (i = 0; i < 3; i++)
	{
		DD_PORT &= ~_BV(DD_PIN);
    1bea:	45 98       	cbi	0x08, 5	; 8
    1bec:	9f ef       	ldi	r25, 0xFF	; 255
    1bee:	23 ec       	ldi	r18, 0xC3	; 195
    1bf0:	39 e0       	ldi	r19, 0x09	; 9
    1bf2:	91 50       	subi	r25, 0x01	; 1
    1bf4:	20 40       	sbci	r18, 0x00	; 0
    1bf6:	30 40       	sbci	r19, 0x00	; 0
    1bf8:	e1 f7       	brne	.-8      	; 0x1bf2 <Roomba_Init+0x34>
    1bfa:	00 c0       	rjmp	.+0      	; 0x1bfc <Roomba_Init+0x3e>
    1bfc:	00 00       	nop
		_delay_ms(200);
		DD_PORT |= _BV(DD_PIN);
    1bfe:	45 9a       	sbi	0x08, 5	; 8
    1c00:	9f ef       	ldi	r25, 0xFF	; 255
    1c02:	23 ec       	ldi	r18, 0xC3	; 195
    1c04:	39 e0       	ldi	r19, 0x09	; 9
    1c06:	91 50       	subi	r25, 0x01	; 1
    1c08:	20 40       	sbci	r18, 0x00	; 0
    1c0a:	30 40       	sbci	r19, 0x00	; 0
    1c0c:	e1 f7       	brne	.-8      	; 0x1c06 <Roomba_Init+0x48>
    1c0e:	00 c0       	rjmp	.+0      	; 0x1c10 <Roomba_Init+0x52>
    1c10:	00 00       	nop
    1c12:	81 50       	subi	r24, 0x01	; 1
	DD_PORT |= _BV(DD_PIN);

	// Wait for 2 seconds, Then pulse the DD pin 3 times to set the Roomba to operate at 19200 baud.
	// This ensures that we know what baud rate to talk at.
	_delay_ms(2000);
	for (i = 0; i < 3; i++)
    1c14:	51 f7       	brne	.-44     	; 0x1bea <Roomba_Init+0x2c>
		_delay_ms(200);
		DD_PORT |= _BV(DD_PIN);
		_delay_ms(200);
	}

	uart_init(UART_19200);
    1c16:	2e d0       	rcall	.+92     	; 0x1c74 <uart_init>

	// start the Roomba's SCI
	uart_putchar(START, ROOMBA_UART);
    1c18:	60 e0       	ldi	r22, 0x00	; 0
    1c1a:	70 e0       	ldi	r23, 0x00	; 0
    1c1c:	80 e8       	ldi	r24, 0x80	; 128
    1c1e:	47 d0       	rcall	.+142    	; 0x1cae <uart_putchar>
    1c20:	8f ef       	ldi	r24, 0xFF	; 255
    1c22:	99 ef       	ldi	r25, 0xF9	; 249
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	81 50       	subi	r24, 0x01	; 1
    1c28:	90 40       	sbci	r25, 0x00	; 0
    1c2a:	20 40       	sbci	r18, 0x00	; 0
    1c2c:	e1 f7       	brne	.-8      	; 0x1c26 <Roomba_Init+0x68>
    1c2e:	00 c0       	rjmp	.+0      	; 0x1c30 <Roomba_Init+0x72>
    1c30:	00 00       	nop
	// framing error probabilities.  The best we can do with a 16 or 8 MHz crystal is 38400 bps, which has a framing
	// error rate of 0.2% (1 bit out of every 500).  Well, the best is 76800 bps, but the Roomba doesn't support
	// that.  38400 at 0.2% is sufficient for our purposes.  An 18.432 MHz crystal will generate all the Roomba's
	// baud rates with 0.0% error!.  Anyway, the point is we want to use a 38400 bps baud rate to avoid framing
	// errors.  Also, we have to wait for 100 ms after changing the baud rate.
	uart_putchar(BAUD, ROOMBA_UART);
    1c32:	60 e0       	ldi	r22, 0x00	; 0
    1c34:	70 e0       	ldi	r23, 0x00	; 0
    1c36:	81 e8       	ldi	r24, 0x81	; 129
    1c38:	3a d0       	rcall	.+116    	; 0x1cae <uart_putchar>
	uart_putchar(ROOMBA_38400BPS, ROOMBA_UART);
    1c3a:	60 e0       	ldi	r22, 0x00	; 0
    1c3c:	70 e0       	ldi	r23, 0x00	; 0
    1c3e:	89 e0       	ldi	r24, 0x09	; 9
    1c40:	36 d0       	rcall	.+108    	; 0x1cae <uart_putchar>
    1c42:	3f ef       	ldi	r19, 0xFF	; 255
    1c44:	81 ee       	ldi	r24, 0xE1	; 225
    1c46:	94 e0       	ldi	r25, 0x04	; 4
    1c48:	31 50       	subi	r19, 0x01	; 1
    1c4a:	80 40       	sbci	r24, 0x00	; 0
    1c4c:	90 40       	sbci	r25, 0x00	; 0
    1c4e:	e1 f7       	brne	.-8      	; 0x1c48 <Roomba_Init+0x8a>
    1c50:	00 c0       	rjmp	.+0      	; 0x1c52 <Roomba_Init+0x94>
    1c52:	00 00       	nop
	_delay_ms(100);

	// change the AVR's UART clock to the new baud rate.
	uart_init(UART_38400);
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	0e d0       	rcall	.+28     	; 0x1c74 <uart_init>

	// put the Roomba into safe mode.
	uart_putchar(CONTROL, ROOMBA_UART);
    1c58:	60 e0       	ldi	r22, 0x00	; 0
    1c5a:	70 e0       	ldi	r23, 0x00	; 0
    1c5c:	82 e8       	ldi	r24, 0x82	; 130
    1c5e:	27 d0       	rcall	.+78     	; 0x1cae <uart_putchar>
    1c60:	2f ef       	ldi	r18, 0xFF	; 255
    1c62:	39 ef       	ldi	r19, 0xF9	; 249
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	21 50       	subi	r18, 0x01	; 1
    1c68:	30 40       	sbci	r19, 0x00	; 0
    1c6a:	80 40       	sbci	r24, 0x00	; 0
    1c6c:	e1 f7       	brne	.-8      	; 0x1c66 <Roomba_Init+0xa8>
    1c6e:	00 c0       	rjmp	.+0      	; 0x1c70 <Roomba_Init+0xb2>
    1c70:	00 00       	nop
    1c72:	08 95       	ret

00001c74 <uart_init>:
void uart_reset_receive(int uart)
{
	if (uart) {
		uart_buffer_1_index = 0;
	} else {
		uart_buffer_index = 0;
    1c74:	e4 e6       	ldi	r30, 0x64	; 100
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	8d 7f       	andi	r24, 0xFD	; 253
    1c7c:	80 83       	st	Z, r24
    1c7e:	82 e0       	ldi	r24, 0x02	; 2
    1c80:	80 93 c0 00 	sts	0x00C0, r24
    1c84:	88 e9       	ldi	r24, 0x98	; 152
    1c86:	80 93 c1 00 	sts	0x00C1, r24
    1c8a:	86 e0       	ldi	r24, 0x06	; 6
    1c8c:	80 93 c2 00 	sts	0x00C2, r24
    1c90:	87 e6       	ldi	r24, 0x67	; 103
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	90 93 c5 00 	sts	0x00C5, r25
    1c98:	80 93 c4 00 	sts	0x00C4, r24
    1c9c:	90 93 cd 00 	sts	0x00CD, r25
    1ca0:	80 93 cc 00 	sts	0x00CC, r24
    1ca4:	10 92 6e 14 	sts	0x146E, r1
    1ca8:	10 92 6d 14 	sts	0x146D, r1
    1cac:	08 95       	ret

00001cae <uart_putchar>:
    1cae:	67 2b       	or	r22, r23
    1cb0:	41 f0       	breq	.+16     	; 0x1cc2 <uart_putchar+0x14>
    1cb2:	e8 ec       	ldi	r30, 0xC8	; 200
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	90 81       	ld	r25, Z
    1cb8:	95 ff       	sbrs	r25, 5
    1cba:	fd cf       	rjmp	.-6      	; 0x1cb6 <uart_putchar+0x8>
    1cbc:	80 93 ce 00 	sts	0x00CE, r24
    1cc0:	08 95       	ret
    1cc2:	e0 ec       	ldi	r30, 0xC0	; 192
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	90 81       	ld	r25, Z
    1cc8:	95 ff       	sbrs	r25, 5
    1cca:	fd cf       	rjmp	.-6      	; 0x1cc6 <uart_putchar+0x18>
    1ccc:	80 93 c6 00 	sts	0x00C6, r24
    1cd0:	08 95       	ret

00001cd2 <uart_send_string>:
	}
}
void uart_send_string(char *string, int uart){
    1cd2:	0f 93       	push	r16
    1cd4:	1f 93       	push	r17
    1cd6:	cf 93       	push	r28
    1cd8:	df 93       	push	r29
    1cda:	ec 01       	movw	r28, r24
	
	while (*string != '\0')
    1cdc:	88 81       	ld	r24, Y
    1cde:	88 23       	and	r24, r24
    1ce0:	39 f0       	breq	.+14     	; 0x1cf0 <uart_send_string+0x1e>
    1ce2:	8b 01       	movw	r16, r22
    1ce4:	21 96       	adiw	r28, 0x01	; 1
	{
		uart_putchar(*string, uart);
    1ce6:	b8 01       	movw	r22, r16
    1ce8:	e2 df       	rcall	.-60     	; 0x1cae <uart_putchar>
		uart_buffer_index = 0;
	}
}
void uart_send_string(char *string, int uart){
	
	while (*string != '\0')
    1cea:	89 91       	ld	r24, Y+
    1cec:	81 11       	cpse	r24, r1
    1cee:	fb cf       	rjmp	.-10     	; 0x1ce6 <uart_send_string+0x14>
		uart_putchar(*string, uart);
		string++;
	}
	
	
}
    1cf0:	df 91       	pop	r29
    1cf2:	cf 91       	pop	r28
    1cf4:	1f 91       	pop	r17
    1cf6:	0f 91       	pop	r16
    1cf8:	08 95       	ret

00001cfa <__vector_25>:
/**
 * UART receive byte ISR
 */
ISR(USART0_RX_vect)
{
    1cfa:	1f 92       	push	r1
    1cfc:	0f 92       	push	r0
    1cfe:	0f b6       	in	r0, 0x3f	; 63
    1d00:	0f 92       	push	r0
    1d02:	11 24       	eor	r1, r1
    1d04:	0b b6       	in	r0, 0x3b	; 59
    1d06:	0f 92       	push	r0
    1d08:	8f 93       	push	r24
    1d0a:	9f 93       	push	r25
    1d0c:	ef 93       	push	r30
    1d0e:	ff 93       	push	r31
	while(!(UCSR0A & (1<<RXC0)));
    1d10:	e0 ec       	ldi	r30, 0xC0	; 192
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	88 23       	and	r24, r24
    1d18:	ec f7       	brge	.-6      	; 0x1d14 <__vector_25+0x1a>
    uart_buffer[uart_buffer_index] = UDR0;
    1d1a:	e0 91 6e 14 	lds	r30, 0x146E
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 91 c6 00 	lds	r24, 0x00C6
    1d24:	e1 57       	subi	r30, 0x71	; 113
    1d26:	fb 4e       	sbci	r31, 0xEB	; 235
    1d28:	80 83       	st	Z, r24
    uart_buffer_index = (uart_buffer_index + 1) % UART_BUFFER_SIZE;
    1d2a:	80 91 6e 14 	lds	r24, 0x146E
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	01 96       	adiw	r24, 0x01	; 1
    1d32:	8f 71       	andi	r24, 0x1F	; 31
    1d34:	90 78       	andi	r25, 0x80	; 128
    1d36:	99 23       	and	r25, r25
    1d38:	24 f4       	brge	.+8      	; 0x1d42 <__vector_25+0x48>
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	80 6e       	ori	r24, 0xE0	; 224
    1d3e:	9f 6f       	ori	r25, 0xFF	; 255
    1d40:	01 96       	adiw	r24, 0x01	; 1
    1d42:	80 93 6e 14 	sts	0x146E, r24
}
    1d46:	ff 91       	pop	r31
    1d48:	ef 91       	pop	r30
    1d4a:	9f 91       	pop	r25
    1d4c:	8f 91       	pop	r24
    1d4e:	0f 90       	pop	r0
    1d50:	0b be       	out	0x3b, r0	; 59
    1d52:	0f 90       	pop	r0
    1d54:	0f be       	out	0x3f, r0	; 63
    1d56:	0f 90       	pop	r0
    1d58:	1f 90       	pop	r1
    1d5a:	18 95       	reti

00001d5c <__vector_36>:

/**
 * UART receive byte ISR
 */
ISR(USART1_RX_vect)
{
    1d5c:	1f 92       	push	r1
    1d5e:	0f 92       	push	r0
    1d60:	0f b6       	in	r0, 0x3f	; 63
    1d62:	0f 92       	push	r0
    1d64:	11 24       	eor	r1, r1
    1d66:	0b b6       	in	r0, 0x3b	; 59
    1d68:	0f 92       	push	r0
    1d6a:	8f 93       	push	r24
    1d6c:	9f 93       	push	r25
    1d6e:	ef 93       	push	r30
    1d70:	ff 93       	push	r31
	while(!(UCSR1A & (1<<RXC1)));
    1d72:	e8 ec       	ldi	r30, 0xC8	; 200
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	88 23       	and	r24, r24
    1d7a:	ec f7       	brge	.-6      	; 0x1d76 <__vector_36+0x1a>
    uart_buffer_1[uart_buffer_1_index] = UDR1;
    1d7c:	e0 91 6d 14 	lds	r30, 0x146D
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 91 ce 00 	lds	r24, 0x00CE
    1d86:	e1 59       	subi	r30, 0x91	; 145
    1d88:	fb 4e       	sbci	r31, 0xEB	; 235
    1d8a:	80 83       	st	Z, r24
    uart_buffer_1_index = (uart_buffer_1_index + 1) % UART_BUFFER_SIZE;
    1d8c:	80 91 6d 14 	lds	r24, 0x146D
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	01 96       	adiw	r24, 0x01	; 1
    1d94:	8f 71       	andi	r24, 0x1F	; 31
    1d96:	90 78       	andi	r25, 0x80	; 128
    1d98:	99 23       	and	r25, r25
    1d9a:	24 f4       	brge	.+8      	; 0x1da4 <__vector_36+0x48>
    1d9c:	01 97       	sbiw	r24, 0x01	; 1
    1d9e:	80 6e       	ori	r24, 0xE0	; 224
    1da0:	9f 6f       	ori	r25, 0xFF	; 255
    1da2:	01 96       	adiw	r24, 0x01	; 1
    1da4:	80 93 6d 14 	sts	0x146D, r24
}
    1da8:	ff 91       	pop	r31
    1daa:	ef 91       	pop	r30
    1dac:	9f 91       	pop	r25
    1dae:	8f 91       	pop	r24
    1db0:	0f 90       	pop	r0
    1db2:	0b be       	out	0x3b, r0	; 59
    1db4:	0f 90       	pop	r0
    1db6:	0f be       	out	0x3f, r0	; 63
    1db8:	0f 90       	pop	r0
    1dba:	1f 90       	pop	r1
    1dbc:	18 95       	reti

00001dbe <__udivmodhi4>:
    1dbe:	aa 1b       	sub	r26, r26
    1dc0:	bb 1b       	sub	r27, r27
    1dc2:	51 e1       	ldi	r21, 0x11	; 17
    1dc4:	07 c0       	rjmp	.+14     	; 0x1dd4 <__udivmodhi4_ep>

00001dc6 <__udivmodhi4_loop>:
    1dc6:	aa 1f       	adc	r26, r26
    1dc8:	bb 1f       	adc	r27, r27
    1dca:	a6 17       	cp	r26, r22
    1dcc:	b7 07       	cpc	r27, r23
    1dce:	10 f0       	brcs	.+4      	; 0x1dd4 <__udivmodhi4_ep>
    1dd0:	a6 1b       	sub	r26, r22
    1dd2:	b7 0b       	sbc	r27, r23

00001dd4 <__udivmodhi4_ep>:
    1dd4:	88 1f       	adc	r24, r24
    1dd6:	99 1f       	adc	r25, r25
    1dd8:	5a 95       	dec	r21
    1dda:	a9 f7       	brne	.-22     	; 0x1dc6 <__udivmodhi4_loop>
    1ddc:	80 95       	com	r24
    1dde:	90 95       	com	r25
    1de0:	bc 01       	movw	r22, r24
    1de2:	cd 01       	movw	r24, r26
    1de4:	08 95       	ret

00001de6 <__tablejump2__>:
    1de6:	ee 0f       	add	r30, r30
    1de8:	ff 1f       	adc	r31, r31
    1dea:	88 1f       	adc	r24, r24
    1dec:	8b bf       	out	0x3b, r24	; 59
    1dee:	07 90       	elpm	r0, Z+
    1df0:	f6 91       	elpm	r31, Z
    1df2:	e0 2d       	mov	r30, r0
    1df4:	19 94       	eijmp

00001df6 <sprintf>:
    1df6:	0f 93       	push	r16
    1df8:	1f 93       	push	r17
    1dfa:	cf 93       	push	r28
    1dfc:	df 93       	push	r29
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	2e 97       	sbiw	r28, 0x0e	; 14
    1e04:	0f b6       	in	r0, 0x3f	; 63
    1e06:	f8 94       	cli
    1e08:	de bf       	out	0x3e, r29	; 62
    1e0a:	0f be       	out	0x3f, r0	; 63
    1e0c:	cd bf       	out	0x3d, r28	; 61
    1e0e:	0e 89       	ldd	r16, Y+22	; 0x16
    1e10:	1f 89       	ldd	r17, Y+23	; 0x17
    1e12:	86 e0       	ldi	r24, 0x06	; 6
    1e14:	8c 83       	std	Y+4, r24	; 0x04
    1e16:	1a 83       	std	Y+2, r17	; 0x02
    1e18:	09 83       	std	Y+1, r16	; 0x01
    1e1a:	8f ef       	ldi	r24, 0xFF	; 255
    1e1c:	9f e7       	ldi	r25, 0x7F	; 127
    1e1e:	9e 83       	std	Y+6, r25	; 0x06
    1e20:	8d 83       	std	Y+5, r24	; 0x05
    1e22:	ae 01       	movw	r20, r28
    1e24:	46 5e       	subi	r20, 0xE6	; 230
    1e26:	5f 4f       	sbci	r21, 0xFF	; 255
    1e28:	68 8d       	ldd	r22, Y+24	; 0x18
    1e2a:	79 8d       	ldd	r23, Y+25	; 0x19
    1e2c:	ce 01       	movw	r24, r28
    1e2e:	01 96       	adiw	r24, 0x01	; 1
    1e30:	11 d0       	rcall	.+34     	; 0x1e54 <vfprintf>
    1e32:	2f 81       	ldd	r18, Y+7	; 0x07
    1e34:	38 85       	ldd	r19, Y+8	; 0x08
    1e36:	f8 01       	movw	r30, r16
    1e38:	e2 0f       	add	r30, r18
    1e3a:	f3 1f       	adc	r31, r19
    1e3c:	10 82       	st	Z, r1
    1e3e:	2e 96       	adiw	r28, 0x0e	; 14
    1e40:	0f b6       	in	r0, 0x3f	; 63
    1e42:	f8 94       	cli
    1e44:	de bf       	out	0x3e, r29	; 62
    1e46:	0f be       	out	0x3f, r0	; 63
    1e48:	cd bf       	out	0x3d, r28	; 61
    1e4a:	df 91       	pop	r29
    1e4c:	cf 91       	pop	r28
    1e4e:	1f 91       	pop	r17
    1e50:	0f 91       	pop	r16
    1e52:	08 95       	ret

00001e54 <vfprintf>:
    1e54:	2f 92       	push	r2
    1e56:	3f 92       	push	r3
    1e58:	4f 92       	push	r4
    1e5a:	5f 92       	push	r5
    1e5c:	6f 92       	push	r6
    1e5e:	7f 92       	push	r7
    1e60:	8f 92       	push	r8
    1e62:	9f 92       	push	r9
    1e64:	af 92       	push	r10
    1e66:	bf 92       	push	r11
    1e68:	cf 92       	push	r12
    1e6a:	df 92       	push	r13
    1e6c:	ef 92       	push	r14
    1e6e:	ff 92       	push	r15
    1e70:	0f 93       	push	r16
    1e72:	1f 93       	push	r17
    1e74:	cf 93       	push	r28
    1e76:	df 93       	push	r29
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
    1e7c:	2c 97       	sbiw	r28, 0x0c	; 12
    1e7e:	0f b6       	in	r0, 0x3f	; 63
    1e80:	f8 94       	cli
    1e82:	de bf       	out	0x3e, r29	; 62
    1e84:	0f be       	out	0x3f, r0	; 63
    1e86:	cd bf       	out	0x3d, r28	; 61
    1e88:	7c 01       	movw	r14, r24
    1e8a:	6b 01       	movw	r12, r22
    1e8c:	8a 01       	movw	r16, r20
    1e8e:	fc 01       	movw	r30, r24
    1e90:	17 82       	std	Z+7, r1	; 0x07
    1e92:	16 82       	std	Z+6, r1	; 0x06
    1e94:	83 81       	ldd	r24, Z+3	; 0x03
    1e96:	81 ff       	sbrs	r24, 1
    1e98:	b0 c1       	rjmp	.+864    	; 0x21fa <vfprintf+0x3a6>
    1e9a:	ce 01       	movw	r24, r28
    1e9c:	01 96       	adiw	r24, 0x01	; 1
    1e9e:	4c 01       	movw	r8, r24
    1ea0:	f7 01       	movw	r30, r14
    1ea2:	93 81       	ldd	r25, Z+3	; 0x03
    1ea4:	f6 01       	movw	r30, r12
    1ea6:	93 fd       	sbrc	r25, 3
    1ea8:	85 91       	lpm	r24, Z+
    1eaa:	93 ff       	sbrs	r25, 3
    1eac:	81 91       	ld	r24, Z+
    1eae:	6f 01       	movw	r12, r30
    1eb0:	88 23       	and	r24, r24
    1eb2:	09 f4       	brne	.+2      	; 0x1eb6 <vfprintf+0x62>
    1eb4:	9e c1       	rjmp	.+828    	; 0x21f2 <vfprintf+0x39e>
    1eb6:	85 32       	cpi	r24, 0x25	; 37
    1eb8:	39 f4       	brne	.+14     	; 0x1ec8 <vfprintf+0x74>
    1eba:	93 fd       	sbrc	r25, 3
    1ebc:	85 91       	lpm	r24, Z+
    1ebe:	93 ff       	sbrs	r25, 3
    1ec0:	81 91       	ld	r24, Z+
    1ec2:	6f 01       	movw	r12, r30
    1ec4:	85 32       	cpi	r24, 0x25	; 37
    1ec6:	21 f4       	brne	.+8      	; 0x1ed0 <vfprintf+0x7c>
    1ec8:	b7 01       	movw	r22, r14
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	c7 d1       	rcall	.+910    	; 0x225c <fputc>
    1ece:	e8 cf       	rjmp	.-48     	; 0x1ea0 <vfprintf+0x4c>
    1ed0:	51 2c       	mov	r5, r1
    1ed2:	31 2c       	mov	r3, r1
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	20 32       	cpi	r18, 0x20	; 32
    1ed8:	a0 f4       	brcc	.+40     	; 0x1f02 <vfprintf+0xae>
    1eda:	8b 32       	cpi	r24, 0x2B	; 43
    1edc:	69 f0       	breq	.+26     	; 0x1ef8 <vfprintf+0xa4>
    1ede:	30 f4       	brcc	.+12     	; 0x1eec <vfprintf+0x98>
    1ee0:	80 32       	cpi	r24, 0x20	; 32
    1ee2:	59 f0       	breq	.+22     	; 0x1efa <vfprintf+0xa6>
    1ee4:	83 32       	cpi	r24, 0x23	; 35
    1ee6:	69 f4       	brne	.+26     	; 0x1f02 <vfprintf+0xae>
    1ee8:	20 61       	ori	r18, 0x10	; 16
    1eea:	2c c0       	rjmp	.+88     	; 0x1f44 <vfprintf+0xf0>
    1eec:	8d 32       	cpi	r24, 0x2D	; 45
    1eee:	39 f0       	breq	.+14     	; 0x1efe <vfprintf+0xaa>
    1ef0:	80 33       	cpi	r24, 0x30	; 48
    1ef2:	39 f4       	brne	.+14     	; 0x1f02 <vfprintf+0xae>
    1ef4:	21 60       	ori	r18, 0x01	; 1
    1ef6:	26 c0       	rjmp	.+76     	; 0x1f44 <vfprintf+0xf0>
    1ef8:	22 60       	ori	r18, 0x02	; 2
    1efa:	24 60       	ori	r18, 0x04	; 4
    1efc:	23 c0       	rjmp	.+70     	; 0x1f44 <vfprintf+0xf0>
    1efe:	28 60       	ori	r18, 0x08	; 8
    1f00:	21 c0       	rjmp	.+66     	; 0x1f44 <vfprintf+0xf0>
    1f02:	27 fd       	sbrc	r18, 7
    1f04:	27 c0       	rjmp	.+78     	; 0x1f54 <vfprintf+0x100>
    1f06:	30 ed       	ldi	r19, 0xD0	; 208
    1f08:	38 0f       	add	r19, r24
    1f0a:	3a 30       	cpi	r19, 0x0A	; 10
    1f0c:	78 f4       	brcc	.+30     	; 0x1f2c <vfprintf+0xd8>
    1f0e:	26 ff       	sbrs	r18, 6
    1f10:	06 c0       	rjmp	.+12     	; 0x1f1e <vfprintf+0xca>
    1f12:	fa e0       	ldi	r31, 0x0A	; 10
    1f14:	5f 9e       	mul	r5, r31
    1f16:	30 0d       	add	r19, r0
    1f18:	11 24       	eor	r1, r1
    1f1a:	53 2e       	mov	r5, r19
    1f1c:	13 c0       	rjmp	.+38     	; 0x1f44 <vfprintf+0xf0>
    1f1e:	8a e0       	ldi	r24, 0x0A	; 10
    1f20:	38 9e       	mul	r3, r24
    1f22:	30 0d       	add	r19, r0
    1f24:	11 24       	eor	r1, r1
    1f26:	33 2e       	mov	r3, r19
    1f28:	20 62       	ori	r18, 0x20	; 32
    1f2a:	0c c0       	rjmp	.+24     	; 0x1f44 <vfprintf+0xf0>
    1f2c:	8e 32       	cpi	r24, 0x2E	; 46
    1f2e:	21 f4       	brne	.+8      	; 0x1f38 <vfprintf+0xe4>
    1f30:	26 fd       	sbrc	r18, 6
    1f32:	5f c1       	rjmp	.+702    	; 0x21f2 <vfprintf+0x39e>
    1f34:	20 64       	ori	r18, 0x40	; 64
    1f36:	06 c0       	rjmp	.+12     	; 0x1f44 <vfprintf+0xf0>
    1f38:	8c 36       	cpi	r24, 0x6C	; 108
    1f3a:	11 f4       	brne	.+4      	; 0x1f40 <vfprintf+0xec>
    1f3c:	20 68       	ori	r18, 0x80	; 128
    1f3e:	02 c0       	rjmp	.+4      	; 0x1f44 <vfprintf+0xf0>
    1f40:	88 36       	cpi	r24, 0x68	; 104
    1f42:	41 f4       	brne	.+16     	; 0x1f54 <vfprintf+0x100>
    1f44:	f6 01       	movw	r30, r12
    1f46:	93 fd       	sbrc	r25, 3
    1f48:	85 91       	lpm	r24, Z+
    1f4a:	93 ff       	sbrs	r25, 3
    1f4c:	81 91       	ld	r24, Z+
    1f4e:	6f 01       	movw	r12, r30
    1f50:	81 11       	cpse	r24, r1
    1f52:	c1 cf       	rjmp	.-126    	; 0x1ed6 <vfprintf+0x82>
    1f54:	98 2f       	mov	r25, r24
    1f56:	9f 7d       	andi	r25, 0xDF	; 223
    1f58:	95 54       	subi	r25, 0x45	; 69
    1f5a:	93 30       	cpi	r25, 0x03	; 3
    1f5c:	28 f4       	brcc	.+10     	; 0x1f68 <vfprintf+0x114>
    1f5e:	0c 5f       	subi	r16, 0xFC	; 252
    1f60:	1f 4f       	sbci	r17, 0xFF	; 255
    1f62:	ff e3       	ldi	r31, 0x3F	; 63
    1f64:	f9 83       	std	Y+1, r31	; 0x01
    1f66:	0d c0       	rjmp	.+26     	; 0x1f82 <vfprintf+0x12e>
    1f68:	83 36       	cpi	r24, 0x63	; 99
    1f6a:	31 f0       	breq	.+12     	; 0x1f78 <vfprintf+0x124>
    1f6c:	83 37       	cpi	r24, 0x73	; 115
    1f6e:	71 f0       	breq	.+28     	; 0x1f8c <vfprintf+0x138>
    1f70:	83 35       	cpi	r24, 0x53	; 83
    1f72:	09 f0       	breq	.+2      	; 0x1f76 <vfprintf+0x122>
    1f74:	57 c0       	rjmp	.+174    	; 0x2024 <vfprintf+0x1d0>
    1f76:	21 c0       	rjmp	.+66     	; 0x1fba <vfprintf+0x166>
    1f78:	f8 01       	movw	r30, r16
    1f7a:	80 81       	ld	r24, Z
    1f7c:	89 83       	std	Y+1, r24	; 0x01
    1f7e:	0e 5f       	subi	r16, 0xFE	; 254
    1f80:	1f 4f       	sbci	r17, 0xFF	; 255
    1f82:	44 24       	eor	r4, r4
    1f84:	43 94       	inc	r4
    1f86:	51 2c       	mov	r5, r1
    1f88:	54 01       	movw	r10, r8
    1f8a:	14 c0       	rjmp	.+40     	; 0x1fb4 <vfprintf+0x160>
    1f8c:	38 01       	movw	r6, r16
    1f8e:	f2 e0       	ldi	r31, 0x02	; 2
    1f90:	6f 0e       	add	r6, r31
    1f92:	71 1c       	adc	r7, r1
    1f94:	f8 01       	movw	r30, r16
    1f96:	a0 80       	ld	r10, Z
    1f98:	b1 80       	ldd	r11, Z+1	; 0x01
    1f9a:	26 ff       	sbrs	r18, 6
    1f9c:	03 c0       	rjmp	.+6      	; 0x1fa4 <vfprintf+0x150>
    1f9e:	65 2d       	mov	r22, r5
    1fa0:	70 e0       	ldi	r23, 0x00	; 0
    1fa2:	02 c0       	rjmp	.+4      	; 0x1fa8 <vfprintf+0x154>
    1fa4:	6f ef       	ldi	r22, 0xFF	; 255
    1fa6:	7f ef       	ldi	r23, 0xFF	; 255
    1fa8:	c5 01       	movw	r24, r10
    1faa:	2c 87       	std	Y+12, r18	; 0x0c
    1fac:	4c d1       	rcall	.+664    	; 0x2246 <strnlen>
    1fae:	2c 01       	movw	r4, r24
    1fb0:	83 01       	movw	r16, r6
    1fb2:	2c 85       	ldd	r18, Y+12	; 0x0c
    1fb4:	2f 77       	andi	r18, 0x7F	; 127
    1fb6:	22 2e       	mov	r2, r18
    1fb8:	16 c0       	rjmp	.+44     	; 0x1fe6 <vfprintf+0x192>
    1fba:	38 01       	movw	r6, r16
    1fbc:	f2 e0       	ldi	r31, 0x02	; 2
    1fbe:	6f 0e       	add	r6, r31
    1fc0:	71 1c       	adc	r7, r1
    1fc2:	f8 01       	movw	r30, r16
    1fc4:	a0 80       	ld	r10, Z
    1fc6:	b1 80       	ldd	r11, Z+1	; 0x01
    1fc8:	26 ff       	sbrs	r18, 6
    1fca:	03 c0       	rjmp	.+6      	; 0x1fd2 <vfprintf+0x17e>
    1fcc:	65 2d       	mov	r22, r5
    1fce:	70 e0       	ldi	r23, 0x00	; 0
    1fd0:	02 c0       	rjmp	.+4      	; 0x1fd6 <vfprintf+0x182>
    1fd2:	6f ef       	ldi	r22, 0xFF	; 255
    1fd4:	7f ef       	ldi	r23, 0xFF	; 255
    1fd6:	c5 01       	movw	r24, r10
    1fd8:	2c 87       	std	Y+12, r18	; 0x0c
    1fda:	2a d1       	rcall	.+596    	; 0x2230 <strnlen_P>
    1fdc:	2c 01       	movw	r4, r24
    1fde:	2c 85       	ldd	r18, Y+12	; 0x0c
    1fe0:	20 68       	ori	r18, 0x80	; 128
    1fe2:	22 2e       	mov	r2, r18
    1fe4:	83 01       	movw	r16, r6
    1fe6:	23 fc       	sbrc	r2, 3
    1fe8:	19 c0       	rjmp	.+50     	; 0x201c <vfprintf+0x1c8>
    1fea:	83 2d       	mov	r24, r3
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	48 16       	cp	r4, r24
    1ff0:	59 06       	cpc	r5, r25
    1ff2:	a0 f4       	brcc	.+40     	; 0x201c <vfprintf+0x1c8>
    1ff4:	b7 01       	movw	r22, r14
    1ff6:	80 e2       	ldi	r24, 0x20	; 32
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	30 d1       	rcall	.+608    	; 0x225c <fputc>
    1ffc:	3a 94       	dec	r3
    1ffe:	f5 cf       	rjmp	.-22     	; 0x1fea <vfprintf+0x196>
    2000:	f5 01       	movw	r30, r10
    2002:	27 fc       	sbrc	r2, 7
    2004:	85 91       	lpm	r24, Z+
    2006:	27 fe       	sbrs	r2, 7
    2008:	81 91       	ld	r24, Z+
    200a:	5f 01       	movw	r10, r30
    200c:	b7 01       	movw	r22, r14
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	25 d1       	rcall	.+586    	; 0x225c <fputc>
    2012:	31 10       	cpse	r3, r1
    2014:	3a 94       	dec	r3
    2016:	f1 e0       	ldi	r31, 0x01	; 1
    2018:	4f 1a       	sub	r4, r31
    201a:	51 08       	sbc	r5, r1
    201c:	41 14       	cp	r4, r1
    201e:	51 04       	cpc	r5, r1
    2020:	79 f7       	brne	.-34     	; 0x2000 <vfprintf+0x1ac>
    2022:	de c0       	rjmp	.+444    	; 0x21e0 <vfprintf+0x38c>
    2024:	84 36       	cpi	r24, 0x64	; 100
    2026:	11 f0       	breq	.+4      	; 0x202c <vfprintf+0x1d8>
    2028:	89 36       	cpi	r24, 0x69	; 105
    202a:	31 f5       	brne	.+76     	; 0x2078 <vfprintf+0x224>
    202c:	f8 01       	movw	r30, r16
    202e:	27 ff       	sbrs	r18, 7
    2030:	07 c0       	rjmp	.+14     	; 0x2040 <vfprintf+0x1ec>
    2032:	60 81       	ld	r22, Z
    2034:	71 81       	ldd	r23, Z+1	; 0x01
    2036:	82 81       	ldd	r24, Z+2	; 0x02
    2038:	93 81       	ldd	r25, Z+3	; 0x03
    203a:	0c 5f       	subi	r16, 0xFC	; 252
    203c:	1f 4f       	sbci	r17, 0xFF	; 255
    203e:	08 c0       	rjmp	.+16     	; 0x2050 <vfprintf+0x1fc>
    2040:	60 81       	ld	r22, Z
    2042:	71 81       	ldd	r23, Z+1	; 0x01
    2044:	07 2e       	mov	r0, r23
    2046:	00 0c       	add	r0, r0
    2048:	88 0b       	sbc	r24, r24
    204a:	99 0b       	sbc	r25, r25
    204c:	0e 5f       	subi	r16, 0xFE	; 254
    204e:	1f 4f       	sbci	r17, 0xFF	; 255
    2050:	2f 76       	andi	r18, 0x6F	; 111
    2052:	72 2e       	mov	r7, r18
    2054:	97 ff       	sbrs	r25, 7
    2056:	09 c0       	rjmp	.+18     	; 0x206a <vfprintf+0x216>
    2058:	90 95       	com	r25
    205a:	80 95       	com	r24
    205c:	70 95       	com	r23
    205e:	61 95       	neg	r22
    2060:	7f 4f       	sbci	r23, 0xFF	; 255
    2062:	8f 4f       	sbci	r24, 0xFF	; 255
    2064:	9f 4f       	sbci	r25, 0xFF	; 255
    2066:	20 68       	ori	r18, 0x80	; 128
    2068:	72 2e       	mov	r7, r18
    206a:	2a e0       	ldi	r18, 0x0A	; 10
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	a4 01       	movw	r20, r8
    2070:	2d d1       	rcall	.+602    	; 0x22cc <__ultoa_invert>
    2072:	a8 2e       	mov	r10, r24
    2074:	a8 18       	sub	r10, r8
    2076:	43 c0       	rjmp	.+134    	; 0x20fe <vfprintf+0x2aa>
    2078:	85 37       	cpi	r24, 0x75	; 117
    207a:	29 f4       	brne	.+10     	; 0x2086 <vfprintf+0x232>
    207c:	2f 7e       	andi	r18, 0xEF	; 239
    207e:	b2 2e       	mov	r11, r18
    2080:	2a e0       	ldi	r18, 0x0A	; 10
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	25 c0       	rjmp	.+74     	; 0x20d0 <vfprintf+0x27c>
    2086:	f2 2f       	mov	r31, r18
    2088:	f9 7f       	andi	r31, 0xF9	; 249
    208a:	bf 2e       	mov	r11, r31
    208c:	8f 36       	cpi	r24, 0x6F	; 111
    208e:	c1 f0       	breq	.+48     	; 0x20c0 <vfprintf+0x26c>
    2090:	18 f4       	brcc	.+6      	; 0x2098 <vfprintf+0x244>
    2092:	88 35       	cpi	r24, 0x58	; 88
    2094:	79 f0       	breq	.+30     	; 0x20b4 <vfprintf+0x260>
    2096:	ad c0       	rjmp	.+346    	; 0x21f2 <vfprintf+0x39e>
    2098:	80 37       	cpi	r24, 0x70	; 112
    209a:	19 f0       	breq	.+6      	; 0x20a2 <vfprintf+0x24e>
    209c:	88 37       	cpi	r24, 0x78	; 120
    209e:	21 f0       	breq	.+8      	; 0x20a8 <vfprintf+0x254>
    20a0:	a8 c0       	rjmp	.+336    	; 0x21f2 <vfprintf+0x39e>
    20a2:	2f 2f       	mov	r18, r31
    20a4:	20 61       	ori	r18, 0x10	; 16
    20a6:	b2 2e       	mov	r11, r18
    20a8:	b4 fe       	sbrs	r11, 4
    20aa:	0d c0       	rjmp	.+26     	; 0x20c6 <vfprintf+0x272>
    20ac:	8b 2d       	mov	r24, r11
    20ae:	84 60       	ori	r24, 0x04	; 4
    20b0:	b8 2e       	mov	r11, r24
    20b2:	09 c0       	rjmp	.+18     	; 0x20c6 <vfprintf+0x272>
    20b4:	24 ff       	sbrs	r18, 4
    20b6:	0a c0       	rjmp	.+20     	; 0x20cc <vfprintf+0x278>
    20b8:	9f 2f       	mov	r25, r31
    20ba:	96 60       	ori	r25, 0x06	; 6
    20bc:	b9 2e       	mov	r11, r25
    20be:	06 c0       	rjmp	.+12     	; 0x20cc <vfprintf+0x278>
    20c0:	28 e0       	ldi	r18, 0x08	; 8
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	05 c0       	rjmp	.+10     	; 0x20d0 <vfprintf+0x27c>
    20c6:	20 e1       	ldi	r18, 0x10	; 16
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	02 c0       	rjmp	.+4      	; 0x20d0 <vfprintf+0x27c>
    20cc:	20 e1       	ldi	r18, 0x10	; 16
    20ce:	32 e0       	ldi	r19, 0x02	; 2
    20d0:	f8 01       	movw	r30, r16
    20d2:	b7 fe       	sbrs	r11, 7
    20d4:	07 c0       	rjmp	.+14     	; 0x20e4 <vfprintf+0x290>
    20d6:	60 81       	ld	r22, Z
    20d8:	71 81       	ldd	r23, Z+1	; 0x01
    20da:	82 81       	ldd	r24, Z+2	; 0x02
    20dc:	93 81       	ldd	r25, Z+3	; 0x03
    20de:	0c 5f       	subi	r16, 0xFC	; 252
    20e0:	1f 4f       	sbci	r17, 0xFF	; 255
    20e2:	06 c0       	rjmp	.+12     	; 0x20f0 <vfprintf+0x29c>
    20e4:	60 81       	ld	r22, Z
    20e6:	71 81       	ldd	r23, Z+1	; 0x01
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	0e 5f       	subi	r16, 0xFE	; 254
    20ee:	1f 4f       	sbci	r17, 0xFF	; 255
    20f0:	a4 01       	movw	r20, r8
    20f2:	ec d0       	rcall	.+472    	; 0x22cc <__ultoa_invert>
    20f4:	a8 2e       	mov	r10, r24
    20f6:	a8 18       	sub	r10, r8
    20f8:	fb 2d       	mov	r31, r11
    20fa:	ff 77       	andi	r31, 0x7F	; 127
    20fc:	7f 2e       	mov	r7, r31
    20fe:	76 fe       	sbrs	r7, 6
    2100:	0b c0       	rjmp	.+22     	; 0x2118 <vfprintf+0x2c4>
    2102:	37 2d       	mov	r19, r7
    2104:	3e 7f       	andi	r19, 0xFE	; 254
    2106:	a5 14       	cp	r10, r5
    2108:	50 f4       	brcc	.+20     	; 0x211e <vfprintf+0x2ca>
    210a:	74 fe       	sbrs	r7, 4
    210c:	0a c0       	rjmp	.+20     	; 0x2122 <vfprintf+0x2ce>
    210e:	72 fc       	sbrc	r7, 2
    2110:	08 c0       	rjmp	.+16     	; 0x2122 <vfprintf+0x2ce>
    2112:	37 2d       	mov	r19, r7
    2114:	3e 7e       	andi	r19, 0xEE	; 238
    2116:	05 c0       	rjmp	.+10     	; 0x2122 <vfprintf+0x2ce>
    2118:	ba 2c       	mov	r11, r10
    211a:	37 2d       	mov	r19, r7
    211c:	03 c0       	rjmp	.+6      	; 0x2124 <vfprintf+0x2d0>
    211e:	ba 2c       	mov	r11, r10
    2120:	01 c0       	rjmp	.+2      	; 0x2124 <vfprintf+0x2d0>
    2122:	b5 2c       	mov	r11, r5
    2124:	34 ff       	sbrs	r19, 4
    2126:	0d c0       	rjmp	.+26     	; 0x2142 <vfprintf+0x2ee>
    2128:	fe 01       	movw	r30, r28
    212a:	ea 0d       	add	r30, r10
    212c:	f1 1d       	adc	r31, r1
    212e:	80 81       	ld	r24, Z
    2130:	80 33       	cpi	r24, 0x30	; 48
    2132:	11 f4       	brne	.+4      	; 0x2138 <vfprintf+0x2e4>
    2134:	39 7e       	andi	r19, 0xE9	; 233
    2136:	09 c0       	rjmp	.+18     	; 0x214a <vfprintf+0x2f6>
    2138:	32 ff       	sbrs	r19, 2
    213a:	06 c0       	rjmp	.+12     	; 0x2148 <vfprintf+0x2f4>
    213c:	b3 94       	inc	r11
    213e:	b3 94       	inc	r11
    2140:	04 c0       	rjmp	.+8      	; 0x214a <vfprintf+0x2f6>
    2142:	83 2f       	mov	r24, r19
    2144:	86 78       	andi	r24, 0x86	; 134
    2146:	09 f0       	breq	.+2      	; 0x214a <vfprintf+0x2f6>
    2148:	b3 94       	inc	r11
    214a:	33 fd       	sbrc	r19, 3
    214c:	12 c0       	rjmp	.+36     	; 0x2172 <vfprintf+0x31e>
    214e:	30 ff       	sbrs	r19, 0
    2150:	06 c0       	rjmp	.+12     	; 0x215e <vfprintf+0x30a>
    2152:	5a 2c       	mov	r5, r10
    2154:	b3 14       	cp	r11, r3
    2156:	18 f4       	brcc	.+6      	; 0x215e <vfprintf+0x30a>
    2158:	53 0c       	add	r5, r3
    215a:	5b 18       	sub	r5, r11
    215c:	b3 2c       	mov	r11, r3
    215e:	b3 14       	cp	r11, r3
    2160:	60 f4       	brcc	.+24     	; 0x217a <vfprintf+0x326>
    2162:	b7 01       	movw	r22, r14
    2164:	80 e2       	ldi	r24, 0x20	; 32
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	3c 87       	std	Y+12, r19	; 0x0c
    216a:	78 d0       	rcall	.+240    	; 0x225c <fputc>
    216c:	b3 94       	inc	r11
    216e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2170:	f6 cf       	rjmp	.-20     	; 0x215e <vfprintf+0x30a>
    2172:	b3 14       	cp	r11, r3
    2174:	10 f4       	brcc	.+4      	; 0x217a <vfprintf+0x326>
    2176:	3b 18       	sub	r3, r11
    2178:	01 c0       	rjmp	.+2      	; 0x217c <vfprintf+0x328>
    217a:	31 2c       	mov	r3, r1
    217c:	34 ff       	sbrs	r19, 4
    217e:	11 c0       	rjmp	.+34     	; 0x21a2 <vfprintf+0x34e>
    2180:	b7 01       	movw	r22, r14
    2182:	80 e3       	ldi	r24, 0x30	; 48
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	3c 87       	std	Y+12, r19	; 0x0c
    2188:	69 d0       	rcall	.+210    	; 0x225c <fputc>
    218a:	3c 85       	ldd	r19, Y+12	; 0x0c
    218c:	32 ff       	sbrs	r19, 2
    218e:	16 c0       	rjmp	.+44     	; 0x21bc <vfprintf+0x368>
    2190:	31 fd       	sbrc	r19, 1
    2192:	03 c0       	rjmp	.+6      	; 0x219a <vfprintf+0x346>
    2194:	88 e7       	ldi	r24, 0x78	; 120
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	02 c0       	rjmp	.+4      	; 0x219e <vfprintf+0x34a>
    219a:	88 e5       	ldi	r24, 0x58	; 88
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	b7 01       	movw	r22, r14
    21a0:	0c c0       	rjmp	.+24     	; 0x21ba <vfprintf+0x366>
    21a2:	83 2f       	mov	r24, r19
    21a4:	86 78       	andi	r24, 0x86	; 134
    21a6:	51 f0       	breq	.+20     	; 0x21bc <vfprintf+0x368>
    21a8:	31 ff       	sbrs	r19, 1
    21aa:	02 c0       	rjmp	.+4      	; 0x21b0 <vfprintf+0x35c>
    21ac:	8b e2       	ldi	r24, 0x2B	; 43
    21ae:	01 c0       	rjmp	.+2      	; 0x21b2 <vfprintf+0x35e>
    21b0:	80 e2       	ldi	r24, 0x20	; 32
    21b2:	37 fd       	sbrc	r19, 7
    21b4:	8d e2       	ldi	r24, 0x2D	; 45
    21b6:	b7 01       	movw	r22, r14
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	50 d0       	rcall	.+160    	; 0x225c <fputc>
    21bc:	a5 14       	cp	r10, r5
    21be:	30 f4       	brcc	.+12     	; 0x21cc <vfprintf+0x378>
    21c0:	b7 01       	movw	r22, r14
    21c2:	80 e3       	ldi	r24, 0x30	; 48
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	4a d0       	rcall	.+148    	; 0x225c <fputc>
    21c8:	5a 94       	dec	r5
    21ca:	f8 cf       	rjmp	.-16     	; 0x21bc <vfprintf+0x368>
    21cc:	aa 94       	dec	r10
    21ce:	f4 01       	movw	r30, r8
    21d0:	ea 0d       	add	r30, r10
    21d2:	f1 1d       	adc	r31, r1
    21d4:	80 81       	ld	r24, Z
    21d6:	b7 01       	movw	r22, r14
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	40 d0       	rcall	.+128    	; 0x225c <fputc>
    21dc:	a1 10       	cpse	r10, r1
    21de:	f6 cf       	rjmp	.-20     	; 0x21cc <vfprintf+0x378>
    21e0:	33 20       	and	r3, r3
    21e2:	09 f4       	brne	.+2      	; 0x21e6 <vfprintf+0x392>
    21e4:	5d ce       	rjmp	.-838    	; 0x1ea0 <vfprintf+0x4c>
    21e6:	b7 01       	movw	r22, r14
    21e8:	80 e2       	ldi	r24, 0x20	; 32
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	37 d0       	rcall	.+110    	; 0x225c <fputc>
    21ee:	3a 94       	dec	r3
    21f0:	f7 cf       	rjmp	.-18     	; 0x21e0 <vfprintf+0x38c>
    21f2:	f7 01       	movw	r30, r14
    21f4:	86 81       	ldd	r24, Z+6	; 0x06
    21f6:	97 81       	ldd	r25, Z+7	; 0x07
    21f8:	02 c0       	rjmp	.+4      	; 0x21fe <vfprintf+0x3aa>
    21fa:	8f ef       	ldi	r24, 0xFF	; 255
    21fc:	9f ef       	ldi	r25, 0xFF	; 255
    21fe:	2c 96       	adiw	r28, 0x0c	; 12
    2200:	0f b6       	in	r0, 0x3f	; 63
    2202:	f8 94       	cli
    2204:	de bf       	out	0x3e, r29	; 62
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	cd bf       	out	0x3d, r28	; 61
    220a:	df 91       	pop	r29
    220c:	cf 91       	pop	r28
    220e:	1f 91       	pop	r17
    2210:	0f 91       	pop	r16
    2212:	ff 90       	pop	r15
    2214:	ef 90       	pop	r14
    2216:	df 90       	pop	r13
    2218:	cf 90       	pop	r12
    221a:	bf 90       	pop	r11
    221c:	af 90       	pop	r10
    221e:	9f 90       	pop	r9
    2220:	8f 90       	pop	r8
    2222:	7f 90       	pop	r7
    2224:	6f 90       	pop	r6
    2226:	5f 90       	pop	r5
    2228:	4f 90       	pop	r4
    222a:	3f 90       	pop	r3
    222c:	2f 90       	pop	r2
    222e:	08 95       	ret

00002230 <strnlen_P>:
    2230:	fc 01       	movw	r30, r24
    2232:	05 90       	lpm	r0, Z+
    2234:	61 50       	subi	r22, 0x01	; 1
    2236:	70 40       	sbci	r23, 0x00	; 0
    2238:	01 10       	cpse	r0, r1
    223a:	d8 f7       	brcc	.-10     	; 0x2232 <strnlen_P+0x2>
    223c:	80 95       	com	r24
    223e:	90 95       	com	r25
    2240:	8e 0f       	add	r24, r30
    2242:	9f 1f       	adc	r25, r31
    2244:	08 95       	ret

00002246 <strnlen>:
    2246:	fc 01       	movw	r30, r24
    2248:	61 50       	subi	r22, 0x01	; 1
    224a:	70 40       	sbci	r23, 0x00	; 0
    224c:	01 90       	ld	r0, Z+
    224e:	01 10       	cpse	r0, r1
    2250:	d8 f7       	brcc	.-10     	; 0x2248 <strnlen+0x2>
    2252:	80 95       	com	r24
    2254:	90 95       	com	r25
    2256:	8e 0f       	add	r24, r30
    2258:	9f 1f       	adc	r25, r31
    225a:	08 95       	ret

0000225c <fputc>:
    225c:	0f 93       	push	r16
    225e:	1f 93       	push	r17
    2260:	cf 93       	push	r28
    2262:	df 93       	push	r29
    2264:	fb 01       	movw	r30, r22
    2266:	23 81       	ldd	r18, Z+3	; 0x03
    2268:	21 fd       	sbrc	r18, 1
    226a:	03 c0       	rjmp	.+6      	; 0x2272 <fputc+0x16>
    226c:	8f ef       	ldi	r24, 0xFF	; 255
    226e:	9f ef       	ldi	r25, 0xFF	; 255
    2270:	28 c0       	rjmp	.+80     	; 0x22c2 <fputc+0x66>
    2272:	22 ff       	sbrs	r18, 2
    2274:	16 c0       	rjmp	.+44     	; 0x22a2 <fputc+0x46>
    2276:	46 81       	ldd	r20, Z+6	; 0x06
    2278:	57 81       	ldd	r21, Z+7	; 0x07
    227a:	24 81       	ldd	r18, Z+4	; 0x04
    227c:	35 81       	ldd	r19, Z+5	; 0x05
    227e:	42 17       	cp	r20, r18
    2280:	53 07       	cpc	r21, r19
    2282:	44 f4       	brge	.+16     	; 0x2294 <fputc+0x38>
    2284:	a0 81       	ld	r26, Z
    2286:	b1 81       	ldd	r27, Z+1	; 0x01
    2288:	9d 01       	movw	r18, r26
    228a:	2f 5f       	subi	r18, 0xFF	; 255
    228c:	3f 4f       	sbci	r19, 0xFF	; 255
    228e:	31 83       	std	Z+1, r19	; 0x01
    2290:	20 83       	st	Z, r18
    2292:	8c 93       	st	X, r24
    2294:	26 81       	ldd	r18, Z+6	; 0x06
    2296:	37 81       	ldd	r19, Z+7	; 0x07
    2298:	2f 5f       	subi	r18, 0xFF	; 255
    229a:	3f 4f       	sbci	r19, 0xFF	; 255
    229c:	37 83       	std	Z+7, r19	; 0x07
    229e:	26 83       	std	Z+6, r18	; 0x06
    22a0:	10 c0       	rjmp	.+32     	; 0x22c2 <fputc+0x66>
    22a2:	eb 01       	movw	r28, r22
    22a4:	09 2f       	mov	r16, r25
    22a6:	18 2f       	mov	r17, r24
    22a8:	00 84       	ldd	r0, Z+8	; 0x08
    22aa:	f1 85       	ldd	r31, Z+9	; 0x09
    22ac:	e0 2d       	mov	r30, r0
    22ae:	19 95       	eicall
    22b0:	89 2b       	or	r24, r25
    22b2:	e1 f6       	brne	.-72     	; 0x226c <fputc+0x10>
    22b4:	8e 81       	ldd	r24, Y+6	; 0x06
    22b6:	9f 81       	ldd	r25, Y+7	; 0x07
    22b8:	01 96       	adiw	r24, 0x01	; 1
    22ba:	9f 83       	std	Y+7, r25	; 0x07
    22bc:	8e 83       	std	Y+6, r24	; 0x06
    22be:	81 2f       	mov	r24, r17
    22c0:	90 2f       	mov	r25, r16
    22c2:	df 91       	pop	r29
    22c4:	cf 91       	pop	r28
    22c6:	1f 91       	pop	r17
    22c8:	0f 91       	pop	r16
    22ca:	08 95       	ret

000022cc <__ultoa_invert>:
    22cc:	fa 01       	movw	r30, r20
    22ce:	aa 27       	eor	r26, r26
    22d0:	28 30       	cpi	r18, 0x08	; 8
    22d2:	51 f1       	breq	.+84     	; 0x2328 <__ultoa_invert+0x5c>
    22d4:	20 31       	cpi	r18, 0x10	; 16
    22d6:	81 f1       	breq	.+96     	; 0x2338 <__ultoa_invert+0x6c>
    22d8:	e8 94       	clt
    22da:	6f 93       	push	r22
    22dc:	6e 7f       	andi	r22, 0xFE	; 254
    22de:	6e 5f       	subi	r22, 0xFE	; 254
    22e0:	7f 4f       	sbci	r23, 0xFF	; 255
    22e2:	8f 4f       	sbci	r24, 0xFF	; 255
    22e4:	9f 4f       	sbci	r25, 0xFF	; 255
    22e6:	af 4f       	sbci	r26, 0xFF	; 255
    22e8:	b1 e0       	ldi	r27, 0x01	; 1
    22ea:	3e d0       	rcall	.+124    	; 0x2368 <__ultoa_invert+0x9c>
    22ec:	b4 e0       	ldi	r27, 0x04	; 4
    22ee:	3c d0       	rcall	.+120    	; 0x2368 <__ultoa_invert+0x9c>
    22f0:	67 0f       	add	r22, r23
    22f2:	78 1f       	adc	r23, r24
    22f4:	89 1f       	adc	r24, r25
    22f6:	9a 1f       	adc	r25, r26
    22f8:	a1 1d       	adc	r26, r1
    22fa:	68 0f       	add	r22, r24
    22fc:	79 1f       	adc	r23, r25
    22fe:	8a 1f       	adc	r24, r26
    2300:	91 1d       	adc	r25, r1
    2302:	a1 1d       	adc	r26, r1
    2304:	6a 0f       	add	r22, r26
    2306:	71 1d       	adc	r23, r1
    2308:	81 1d       	adc	r24, r1
    230a:	91 1d       	adc	r25, r1
    230c:	a1 1d       	adc	r26, r1
    230e:	20 d0       	rcall	.+64     	; 0x2350 <__ultoa_invert+0x84>
    2310:	09 f4       	brne	.+2      	; 0x2314 <__ultoa_invert+0x48>
    2312:	68 94       	set
    2314:	3f 91       	pop	r19
    2316:	2a e0       	ldi	r18, 0x0A	; 10
    2318:	26 9f       	mul	r18, r22
    231a:	11 24       	eor	r1, r1
    231c:	30 19       	sub	r19, r0
    231e:	30 5d       	subi	r19, 0xD0	; 208
    2320:	31 93       	st	Z+, r19
    2322:	de f6       	brtc	.-74     	; 0x22da <__ultoa_invert+0xe>
    2324:	cf 01       	movw	r24, r30
    2326:	08 95       	ret
    2328:	46 2f       	mov	r20, r22
    232a:	47 70       	andi	r20, 0x07	; 7
    232c:	40 5d       	subi	r20, 0xD0	; 208
    232e:	41 93       	st	Z+, r20
    2330:	b3 e0       	ldi	r27, 0x03	; 3
    2332:	0f d0       	rcall	.+30     	; 0x2352 <__ultoa_invert+0x86>
    2334:	c9 f7       	brne	.-14     	; 0x2328 <__ultoa_invert+0x5c>
    2336:	f6 cf       	rjmp	.-20     	; 0x2324 <__ultoa_invert+0x58>
    2338:	46 2f       	mov	r20, r22
    233a:	4f 70       	andi	r20, 0x0F	; 15
    233c:	40 5d       	subi	r20, 0xD0	; 208
    233e:	4a 33       	cpi	r20, 0x3A	; 58
    2340:	18 f0       	brcs	.+6      	; 0x2348 <__ultoa_invert+0x7c>
    2342:	49 5d       	subi	r20, 0xD9	; 217
    2344:	31 fd       	sbrc	r19, 1
    2346:	40 52       	subi	r20, 0x20	; 32
    2348:	41 93       	st	Z+, r20
    234a:	02 d0       	rcall	.+4      	; 0x2350 <__ultoa_invert+0x84>
    234c:	a9 f7       	brne	.-22     	; 0x2338 <__ultoa_invert+0x6c>
    234e:	ea cf       	rjmp	.-44     	; 0x2324 <__ultoa_invert+0x58>
    2350:	b4 e0       	ldi	r27, 0x04	; 4
    2352:	a6 95       	lsr	r26
    2354:	97 95       	ror	r25
    2356:	87 95       	ror	r24
    2358:	77 95       	ror	r23
    235a:	67 95       	ror	r22
    235c:	ba 95       	dec	r27
    235e:	c9 f7       	brne	.-14     	; 0x2352 <__ultoa_invert+0x86>
    2360:	00 97       	sbiw	r24, 0x00	; 0
    2362:	61 05       	cpc	r22, r1
    2364:	71 05       	cpc	r23, r1
    2366:	08 95       	ret
    2368:	9b 01       	movw	r18, r22
    236a:	ac 01       	movw	r20, r24
    236c:	0a 2e       	mov	r0, r26
    236e:	06 94       	lsr	r0
    2370:	57 95       	ror	r21
    2372:	47 95       	ror	r20
    2374:	37 95       	ror	r19
    2376:	27 95       	ror	r18
    2378:	ba 95       	dec	r27
    237a:	c9 f7       	brne	.-14     	; 0x236e <__ultoa_invert+0xa2>
    237c:	62 0f       	add	r22, r18
    237e:	73 1f       	adc	r23, r19
    2380:	84 1f       	adc	r24, r20
    2382:	95 1f       	adc	r25, r21
    2384:	a0 1d       	adc	r26, r0
    2386:	08 95       	ret

00002388 <_exit>:
    2388:	f8 94       	cli

0000238a <__stop_program>:
    238a:	ff cf       	rjmp	.-2      	; 0x238a <__stop_program>
