
roomba.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  00002140  000021d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002140  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001312  00800210  00800210  000021e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000021e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002214  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000418  00000000  00000000  00002258  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000051e2  00000000  00000000  00002670  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001348  00000000  00000000  00007852  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000026ad  00000000  00000000  00008b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000aa4  00000000  00000000  0000b248  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000121a  00000000  00000000  0000bcec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002a52  00000000  00000000  0000cf06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000430  00000000  00000000  0000f958  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c0       	rjmp	.+252    	; 0xfe <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 84 0d 	jmp	0x1b08	; 0x1b08 <__vector_1>
       8:	9b c0       	rjmp	.+310    	; 0x140 <__bad_interrupt>
       a:	00 00       	nop
       c:	99 c0       	rjmp	.+306    	; 0x140 <__bad_interrupt>
       e:	00 00       	nop
      10:	97 c0       	rjmp	.+302    	; 0x140 <__bad_interrupt>
      12:	00 00       	nop
      14:	95 c0       	rjmp	.+298    	; 0x140 <__bad_interrupt>
      16:	00 00       	nop
      18:	93 c0       	rjmp	.+294    	; 0x140 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	91 c0       	rjmp	.+290    	; 0x140 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8f c0       	rjmp	.+286    	; 0x140 <__bad_interrupt>
      22:	00 00       	nop
      24:	8d c0       	rjmp	.+282    	; 0x140 <__bad_interrupt>
      26:	00 00       	nop
      28:	8b c0       	rjmp	.+278    	; 0x140 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	89 c0       	rjmp	.+274    	; 0x140 <__bad_interrupt>
      2e:	00 00       	nop
      30:	87 c0       	rjmp	.+270    	; 0x140 <__bad_interrupt>
      32:	00 00       	nop
      34:	85 c0       	rjmp	.+266    	; 0x140 <__bad_interrupt>
      36:	00 00       	nop
      38:	83 c0       	rjmp	.+262    	; 0x140 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	81 c0       	rjmp	.+258    	; 0x140 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7f c0       	rjmp	.+254    	; 0x140 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 35 0a 	jmp	0x146a	; 0x146a <__vector_17>
      48:	7b c0       	rjmp	.+246    	; 0x140 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	79 c0       	rjmp	.+242    	; 0x140 <__bad_interrupt>
      4e:	00 00       	nop
      50:	77 c0       	rjmp	.+238    	; 0x140 <__bad_interrupt>
      52:	00 00       	nop
      54:	75 c0       	rjmp	.+234    	; 0x140 <__bad_interrupt>
      56:	00 00       	nop
      58:	73 c0       	rjmp	.+230    	; 0x140 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	71 c0       	rjmp	.+226    	; 0x140 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6f c0       	rjmp	.+222    	; 0x140 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 eb 0e 	jmp	0x1dd6	; 0x1dd6 <__vector_25>
      68:	6b c0       	rjmp	.+214    	; 0x140 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	69 c0       	rjmp	.+210    	; 0x140 <__bad_interrupt>
      6e:	00 00       	nop
      70:	67 c0       	rjmp	.+206    	; 0x140 <__bad_interrupt>
      72:	00 00       	nop
      74:	65 c0       	rjmp	.+202    	; 0x140 <__bad_interrupt>
      76:	00 00       	nop
      78:	63 c0       	rjmp	.+198    	; 0x140 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	61 c0       	rjmp	.+194    	; 0x140 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 0c 0b 	jmp	0x1618	; 0x1618 <__vector_32>
      84:	5d c0       	rjmp	.+186    	; 0x140 <__bad_interrupt>
      86:	00 00       	nop
      88:	5b c0       	rjmp	.+182    	; 0x140 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	59 c0       	rjmp	.+178    	; 0x140 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 1c 0f 	jmp	0x1e38	; 0x1e38 <__vector_36>
      94:	55 c0       	rjmp	.+170    	; 0x140 <__bad_interrupt>
      96:	00 00       	nop
      98:	53 c0       	rjmp	.+166    	; 0x140 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	51 c0       	rjmp	.+162    	; 0x140 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4f c0       	rjmp	.+158    	; 0x140 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4d c0       	rjmp	.+154    	; 0x140 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4b c0       	rjmp	.+150    	; 0x140 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	49 c0       	rjmp	.+146    	; 0x140 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	47 c0       	rjmp	.+142    	; 0x140 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	45 c0       	rjmp	.+138    	; 0x140 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	43 c0       	rjmp	.+134    	; 0x140 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	41 c0       	rjmp	.+130    	; 0x140 <__bad_interrupt>
      be:	00 00       	nop
      c0:	3f c0       	rjmp	.+126    	; 0x140 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3d c0       	rjmp	.+122    	; 0x140 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3b c0       	rjmp	.+118    	; 0x140 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	39 c0       	rjmp	.+114    	; 0x140 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	37 c0       	rjmp	.+110    	; 0x140 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	35 c0       	rjmp	.+106    	; 0x140 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	33 c0       	rjmp	.+102    	; 0x140 <__bad_interrupt>
      da:	00 00       	nop
      dc:	31 c0       	rjmp	.+98     	; 0x140 <__bad_interrupt>
      de:	00 00       	nop
      e0:	2f c0       	rjmp	.+94     	; 0x140 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	30 06       	cpc	r3, r16
      e6:	16 06       	cpc	r1, r22
      e8:	30 06       	cpc	r3, r16
      ea:	3f 06       	cpc	r3, r31
      ec:	e4 06       	cpc	r14, r20
      ee:	4e 06       	cpc	r4, r30
      f0:	07 06       	cpc	r0, r23
      f2:	37 07       	cpc	r19, r23
      f4:	6c 07       	cpc	r22, r28
      f6:	0e 08       	sbc	r0, r14
      f8:	10 08       	sbc	r1, r0
      fa:	46 08       	sbc	r4, r6
      fc:	bd 08       	sbc	r11, r13

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d1 e2       	ldi	r29, 0x21	; 33
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0c bf       	out	0x3c, r16	; 60

0000010e <__do_copy_data>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a0 e0       	ldi	r26, 0x00	; 0
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	e0 e4       	ldi	r30, 0x40	; 64
     116:	f1 e2       	ldi	r31, 0x21	; 33
     118:	00 e0       	ldi	r16, 0x00	; 0
     11a:	0b bf       	out	0x3b, r16	; 59
     11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x14>
     11e:	07 90       	elpm	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	a0 31       	cpi	r26, 0x10	; 16
     124:	b1 07       	cpc	r27, r17
     126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0x10>

00000128 <__do_clear_bss>:
     128:	25 e1       	ldi	r18, 0x15	; 21
     12a:	a0 e1       	ldi	r26, 0x10	; 16
     12c:	b2 e0       	ldi	r27, 0x02	; 2
     12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
     130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
     132:	a2 32       	cpi	r26, 0x22	; 34
     134:	b2 07       	cpc	r27, r18
     136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>
     138:	0e 94 2d 0b 	call	0x165a	; 0x165a <main>
     13c:	0c 94 9e 10 	jmp	0x213c	; 0x213c <_exit>

00000140 <__bad_interrupt>:
     140:	5f cf       	rjmp	.-322    	; 0x0 <__vectors>

00000142 <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
     142:	0f 92       	push	r0
     144:	1f 92       	push	r1
     146:	2f 92       	push	r2
     148:	3f 92       	push	r3
     14a:	4f 92       	push	r4
     14c:	5f 92       	push	r5
     14e:	6f 92       	push	r6
     150:	7f 92       	push	r7
     152:	8f 92       	push	r8
     154:	9f 92       	push	r9
     156:	af 92       	push	r10
     158:	bf 92       	push	r11
     15a:	cf 92       	push	r12
     15c:	df 92       	push	r13
     15e:	ef 92       	push	r14
     160:	ff 92       	push	r15
     162:	0f 93       	push	r16
     164:	1f 93       	push	r17
     166:	2f 93       	push	r18
     168:	3f 93       	push	r19
     16a:	4f 93       	push	r20
     16c:	5f 93       	push	r21
     16e:	6f 93       	push	r22
     170:	7f 93       	push	r23
     172:	8f 93       	push	r24
     174:	9f 93       	push	r25
     176:	af 93       	push	r26
     178:	bf 93       	push	r27
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	ef 93       	push	r30
     180:	ff 93       	push	r31
     182:	0f b7       	in	r16, 0x3f	; 63
     184:	0f 93       	push	r16
     186:	fc b7       	in	r31, 0x3c	; 60
     188:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
     18a:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     18c:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
     18e:	e0 93 1f 15 	sts	0x151F, r30
        sts  KernelSp+1, r31
     192:	f0 93 20 15 	sts	0x1520, r31
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
     196:	e0 91 fd 14 	lds	r30, 0x14FD
        lds  r31, CurrentSp+1
     19a:	f0 91 fe 14 	lds	r31, 0x14FE
        out  SPL, r30
     19e:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     1a0:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
     1a2:	ff 91       	pop	r31
     1a4:	fc bf       	out	0x3c, r31	; 60
     1a6:	0f 91       	pop	r16
     1a8:	0f bf       	out	0x3f, r16	; 63
     1aa:	ff 91       	pop	r31
     1ac:	ef 91       	pop	r30
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	bf 91       	pop	r27
     1b4:	af 91       	pop	r26
     1b6:	9f 91       	pop	r25
     1b8:	8f 91       	pop	r24
     1ba:	7f 91       	pop	r23
     1bc:	6f 91       	pop	r22
     1be:	5f 91       	pop	r21
     1c0:	4f 91       	pop	r20
     1c2:	3f 91       	pop	r19
     1c4:	2f 91       	pop	r18
     1c6:	1f 91       	pop	r17
     1c8:	0f 91       	pop	r16
     1ca:	ff 90       	pop	r15
     1cc:	ef 90       	pop	r14
     1ce:	df 90       	pop	r13
     1d0:	cf 90       	pop	r12
     1d2:	bf 90       	pop	r11
     1d4:	af 90       	pop	r10
     1d6:	9f 90       	pop	r9
     1d8:	8f 90       	pop	r8
     1da:	7f 90       	pop	r7
     1dc:	6f 90       	pop	r6
     1de:	5f 90       	pop	r5
     1e0:	4f 90       	pop	r4
     1e2:	3f 90       	pop	r3
     1e4:	2f 90       	pop	r2
     1e6:	1f 90       	pop	r1
     1e8:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
     1ea:	18 95       	reti

000001ec <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
     1ec:	0f 92       	push	r0
     1ee:	1f 92       	push	r1
     1f0:	2f 92       	push	r2
     1f2:	3f 92       	push	r3
     1f4:	4f 92       	push	r4
     1f6:	5f 92       	push	r5
     1f8:	6f 92       	push	r6
     1fa:	7f 92       	push	r7
     1fc:	8f 92       	push	r8
     1fe:	9f 92       	push	r9
     200:	af 92       	push	r10
     202:	bf 92       	push	r11
     204:	cf 92       	push	r12
     206:	df 92       	push	r13
     208:	ef 92       	push	r14
     20a:	ff 92       	push	r15
     20c:	0f 93       	push	r16
     20e:	1f 93       	push	r17
     210:	2f 93       	push	r18
     212:	3f 93       	push	r19
     214:	4f 93       	push	r20
     216:	5f 93       	push	r21
     218:	6f 93       	push	r22
     21a:	7f 93       	push	r23
     21c:	8f 93       	push	r24
     21e:	9f 93       	push	r25
     220:	af 93       	push	r26
     222:	bf 93       	push	r27
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	ef 93       	push	r30
     22a:	ff 93       	push	r31
     22c:	0f b7       	in	r16, 0x3f	; 63
     22e:	0f 93       	push	r16
     230:	fc b7       	in	r31, 0x3c	; 60
     232:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
     234:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     236:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
     238:	e0 93 fd 14 	sts	0x14FD, r30
        sts  CurrentSp+1, r31
     23c:	f0 93 fe 14 	sts	0x14FE, r31
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
     240:	e0 91 1f 15 	lds	r30, 0x151F
        lds  r31, KernelSp+1
     244:	f0 91 20 15 	lds	r31, 0x1520
        out  SPL, r30
     248:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     24a:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
     24c:	ff 91       	pop	r31
     24e:	fc bf       	out	0x3c, r31	; 60
     250:	0f 91       	pop	r16
     252:	0f bf       	out	0x3f, r16	; 63
     254:	ff 91       	pop	r31
     256:	ef 91       	pop	r30
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	bf 91       	pop	r27
     25e:	af 91       	pop	r26
     260:	9f 91       	pop	r25
     262:	8f 91       	pop	r24
     264:	7f 91       	pop	r23
     266:	6f 91       	pop	r22
     268:	5f 91       	pop	r21
     26a:	4f 91       	pop	r20
     26c:	3f 91       	pop	r19
     26e:	2f 91       	pop	r18
     270:	1f 91       	pop	r17
     272:	0f 91       	pop	r16
     274:	ff 90       	pop	r15
     276:	ef 90       	pop	r14
     278:	df 90       	pop	r13
     27a:	cf 90       	pop	r12
     27c:	bf 90       	pop	r11
     27e:	af 90       	pop	r10
     280:	9f 90       	pop	r9
     282:	8f 90       	pop	r8
     284:	7f 90       	pop	r7
     286:	6f 90       	pop	r6
     288:	5f 90       	pop	r5
     28a:	4f 90       	pop	r4
     28c:	3f 90       	pop	r3
     28e:	2f 90       	pop	r2
     290:	1f 90       	pop	r1
     292:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
     294:	08 95       	ret

00000296 <adc_init>:

// initialize adc
void adc_init()
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
     296:	80 e4       	ldi	r24, 0x40	; 64
     298:	80 93 7c 00 	sts	0x007C, r24
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     29c:	87 e8       	ldi	r24, 0x87	; 135
     29e:	80 93 7a 00 	sts	0x007A, r24
     2a2:	08 95       	ret

000002a4 <adc_read>:
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     2a4:	ec e7       	ldi	r30, 0x7C	; 124
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	90 81       	ld	r25, Z
uint16_t adc_read(uint8_t ch)
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
     2aa:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     2ac:	98 7f       	andi	r25, 0xF8	; 248
     2ae:	89 2b       	or	r24, r25
     2b0:	80 83       	st	Z, r24
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
     2b2:	ea e7       	ldi	r30, 0x7A	; 122
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	80 81       	ld	r24, Z
     2b8:	80 64       	ori	r24, 0x40	; 64
     2ba:	80 83       	st	Z, r24
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
     2bc:	80 81       	ld	r24, Z
     2be:	86 fd       	sbrc	r24, 6
     2c0:	fd cf       	rjmp	.-6      	; 0x2bc <adc_read+0x18>
	
	return (ADC);
     2c2:	80 91 78 00 	lds	r24, 0x0078
     2c6:	90 91 79 00 	lds	r25, 0x0079
}
     2ca:	08 95       	ret

000002cc <radio_rxhandler>:
	return 0;
}

void radio_rxhandler(uint8_t pipenumber)
{
	rxflag = 1;
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	80 93 10 02 	sts	0x0210, r24
	PORTL ^= _BV(PL7);
     2d2:	eb e0       	ldi	r30, 0x0B	; 11
     2d4:	f1 e0       	ldi	r31, 0x01	; 1
     2d6:	80 81       	ld	r24, Z
     2d8:	80 58       	subi	r24, 0x80	; 128
     2da:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2dc:	83 ed       	ldi	r24, 0xD3	; 211
     2de:	90 e3       	ldi	r25, 0x30	; 48
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <radio_rxhandler+0x14>
     2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <radio_rxhandler+0x1a>
     2e6:	00 00       	nop
	_delay_ms(50);
	PORTL ^= _BV(PL7);
     2e8:	80 81       	ld	r24, Z
     2ea:	80 58       	subi	r24, 0x80	; 128
     2ec:	80 83       	st	Z, r24
     2ee:	08 95       	ret

000002f0 <init_LED_PORTL_pin0>:
void init_LED_PORTL_pin6(void) {
    DDRL |= _BV(DDL6);
}

void init_LED_PORTL_pin7(void) {
    DDRL |= _BV(DDL7);
     2f0:	ea e0       	ldi	r30, 0x0A	; 10
     2f2:	f1 e0       	ldi	r31, 0x01	; 1
     2f4:	80 81       	ld	r24, Z
     2f6:	81 60       	ori	r24, 0x01	; 1
     2f8:	80 83       	st	Z, r24
     2fa:	08 95       	ret

000002fc <init_LED_PORTL_pin1>:
     2fc:	ea e0       	ldi	r30, 0x0A	; 10
     2fe:	f1 e0       	ldi	r31, 0x01	; 1
     300:	80 81       	ld	r24, Z
     302:	82 60       	ori	r24, 0x02	; 2
     304:	80 83       	st	Z, r24
     306:	08 95       	ret

00000308 <init_LED_PORTL_pin2>:
     308:	ea e0       	ldi	r30, 0x0A	; 10
     30a:	f1 e0       	ldi	r31, 0x01	; 1
     30c:	80 81       	ld	r24, Z
     30e:	84 60       	ori	r24, 0x04	; 4
     310:	80 83       	st	Z, r24
     312:	08 95       	ret

00000314 <init_LED_PORTL_pin5>:
     314:	ea e0       	ldi	r30, 0x0A	; 10
     316:	f1 e0       	ldi	r31, 0x01	; 1
     318:	80 81       	ld	r24, Z
     31a:	80 62       	ori	r24, 0x20	; 32
     31c:	80 83       	st	Z, r24
     31e:	08 95       	ret

00000320 <init_LED_PORTL_pin6>:
     320:	ea e0       	ldi	r30, 0x0A	; 10
     322:	f1 e0       	ldi	r31, 0x01	; 1
     324:	80 81       	ld	r24, Z
     326:	80 64       	ori	r24, 0x40	; 64
     328:	80 83       	st	Z, r24
     32a:	08 95       	ret

0000032c <enable_LED>:
}

void enable_LED(unsigned int mask) {
    PORTL |= _BV(mask);
     32c:	eb e0       	ldi	r30, 0x0B	; 11
     32e:	f1 e0       	ldi	r31, 0x01	; 1
     330:	90 81       	ld	r25, Z
     332:	21 e0       	ldi	r18, 0x01	; 1
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	02 c0       	rjmp	.+4      	; 0x33c <enable_LED+0x10>
     338:	22 0f       	add	r18, r18
     33a:	33 1f       	adc	r19, r19
     33c:	8a 95       	dec	r24
     33e:	e2 f7       	brpl	.-8      	; 0x338 <enable_LED+0xc>
     340:	29 2b       	or	r18, r25
     342:	20 83       	st	Z, r18
     344:	08 95       	ret

00000346 <disable_LED>:
}

void disable_LED(unsigned int mask) {
    PORTL &= ~_BV(mask);
     346:	eb e0       	ldi	r30, 0x0B	; 11
     348:	f1 e0       	ldi	r31, 0x01	; 1
     34a:	90 81       	ld	r25, Z
     34c:	21 e0       	ldi	r18, 0x01	; 1
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	02 c0       	rjmp	.+4      	; 0x356 <disable_LED+0x10>
     352:	22 0f       	add	r18, r18
     354:	33 1f       	adc	r19, r19
     356:	8a 95       	dec	r24
     358:	e2 f7       	brpl	.-8      	; 0x352 <disable_LED+0xc>
     35a:	20 95       	com	r18
     35c:	29 23       	and	r18, r25
     35e:	20 83       	st	Z, r18
     360:	08 95       	ret

00000362 <Idle>:

		Task_Sleep(100);
	}*/
	
	Roomba_Drive(100, 0x8000);
	Task_Terminate();
     362:	ff cf       	rjmp	.-2      	; 0x362 <Idle>

00000364 <Init_Task>:
     364:	0f 93       	push	r16
     366:	1f 93       	push	r17
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	ca e0       	ldi	r28, 0x0A	; 10
     36e:	d0 e0       	ldi	r29, 0x00	; 0
     370:	00 e0       	ldi	r16, 0x00	; 0
     372:	10 e0       	ldi	r17, 0x00	; 0
     374:	87 e0       	ldi	r24, 0x07	; 7
     376:	96 df       	rcall	.-212    	; 0x2a4 <adc_read>
     378:	08 0f       	add	r16, r24
     37a:	19 1f       	adc	r17, r25
     37c:	21 97       	sbiw	r28, 0x01	; 1
     37e:	d1 f7       	brne	.-12     	; 0x374 <Init_Task+0x10>
     380:	c8 01       	movw	r24, r16
     382:	6a e0       	ldi	r22, 0x0A	; 10
     384:	70 e0       	ldi	r23, 0x00	; 0
     386:	0e 94 83 10 	call	0x2106	; 0x2106 <__divmodhi4>
     38a:	07 2e       	mov	r0, r23
     38c:	00 0c       	add	r0, r0
     38e:	88 0b       	sbc	r24, r24
     390:	99 0b       	sbc	r25, r25
     392:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <__floatsisf>
     396:	23 e3       	ldi	r18, 0x33	; 51
     398:	33 e3       	ldi	r19, 0x33	; 51
     39a:	43 eb       	ldi	r20, 0xB3	; 179
     39c:	5f e3       	ldi	r21, 0x3F	; 63
     39e:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__mulsf3>
     3a2:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__fixsfsi>
     3a6:	70 93 ac 14 	sts	0x14AC, r23
     3aa:	60 93 ab 14 	sts	0x14AB, r22
     3ae:	11 d1       	rcall	.+546    	; 0x5d2 <Task_Terminate>
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	1f 91       	pop	r17
     3b6:	0f 91       	pop	r16
     3b8:	08 95       	ret

000003ba <Man_Drive>:
}

void Man_Drive(uint8_t dir){
	switch ((int)dir){
     3ba:	82 33       	cpi	r24, 0x32	; 50
     3bc:	11 f1       	breq	.+68     	; 0x402 <Man_Drive+0x48>
     3be:	28 f4       	brcc	.+10     	; 0x3ca <Man_Drive+0x10>
     3c0:	80 33       	cpi	r24, 0x30	; 48
     3c2:	41 f0       	breq	.+16     	; 0x3d4 <Man_Drive+0x1a>
     3c4:	81 33       	cpi	r24, 0x31	; 49
     3c6:	69 f0       	breq	.+26     	; 0x3e2 <Man_Drive+0x28>
     3c8:	4c c0       	rjmp	.+152    	; 0x462 <Man_Drive+0xa8>
     3ca:	83 33       	cpi	r24, 0x33	; 51
     3cc:	51 f1       	breq	.+84     	; 0x422 <Man_Drive+0x68>
     3ce:	84 33       	cpi	r24, 0x34	; 52
     3d0:	c9 f1       	breq	.+114    	; 0x444 <Man_Drive+0x8a>
     3d2:	47 c0       	rjmp	.+142    	; 0x462 <Man_Drive+0xa8>
		case 48:
			//No movement
			radius = 0x8000;
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	90 e8       	ldi	r25, 0x80	; 128
     3d8:	90 93 01 02 	sts	0x0201, r25
     3dc:	80 93 00 02 	sts	0x0200, r24
			break;
     3e0:	40 c0       	rjmp	.+128    	; 0x462 <Man_Drive+0xa8>
		case 49:
			//Left
			radius = (velocity == 0) ? -1 : -200;
     3e2:	80 91 11 02 	lds	r24, 0x0211
     3e6:	90 91 12 02 	lds	r25, 0x0212
     3ea:	89 2b       	or	r24, r25
     3ec:	19 f0       	breq	.+6      	; 0x3f4 <Man_Drive+0x3a>
     3ee:	88 e3       	ldi	r24, 0x38	; 56
     3f0:	9f ef       	ldi	r25, 0xFF	; 255
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <Man_Drive+0x3e>
     3f4:	8f ef       	ldi	r24, 0xFF	; 255
     3f6:	9f ef       	ldi	r25, 0xFF	; 255
     3f8:	90 93 01 02 	sts	0x0201, r25
     3fc:	80 93 00 02 	sts	0x0200, r24
			break;
     400:	30 c0       	rjmp	.+96     	; 0x462 <Man_Drive+0xa8>
		case 50:
			//Right
			radius = (velocity == 0) ? 1 : 200;
     402:	80 91 11 02 	lds	r24, 0x0211
     406:	90 91 12 02 	lds	r25, 0x0212
     40a:	89 2b       	or	r24, r25
     40c:	19 f0       	breq	.+6      	; 0x414 <Man_Drive+0x5a>
     40e:	88 ec       	ldi	r24, 0xC8	; 200
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	02 c0       	rjmp	.+4      	; 0x418 <Man_Drive+0x5e>
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	90 93 01 02 	sts	0x0201, r25
     41c:	80 93 00 02 	sts	0x0200, r24
			break;
     420:	20 c0       	rjmp	.+64     	; 0x462 <Man_Drive+0xa8>
		case 51:
			//Down
			velocity = (velocity > 0) ? 0 : -200;
     422:	80 91 11 02 	lds	r24, 0x0211
     426:	90 91 12 02 	lds	r25, 0x0212
     42a:	18 16       	cp	r1, r24
     42c:	19 06       	cpc	r1, r25
     42e:	1c f0       	brlt	.+6      	; 0x436 <Man_Drive+0x7c>
     430:	88 e3       	ldi	r24, 0x38	; 56
     432:	9f ef       	ldi	r25, 0xFF	; 255
     434:	02 c0       	rjmp	.+4      	; 0x43a <Man_Drive+0x80>
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	90 93 12 02 	sts	0x0212, r25
     43e:	80 93 11 02 	sts	0x0211, r24
			break;
     442:	0f c0       	rjmp	.+30     	; 0x462 <Man_Drive+0xa8>
		case 52:
			//Up
			velocity = (velocity < 0) ? 0 : 200;
     444:	80 91 11 02 	lds	r24, 0x0211
     448:	90 91 12 02 	lds	r25, 0x0212
     44c:	99 23       	and	r25, r25
     44e:	1c f0       	brlt	.+6      	; 0x456 <Man_Drive+0x9c>
     450:	88 ec       	ldi	r24, 0xC8	; 200
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	02 c0       	rjmp	.+4      	; 0x45a <Man_Drive+0xa0>
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	90 93 12 02 	sts	0x0212, r25
     45e:	80 93 11 02 	sts	0x0211, r24
			break;
		default:
			break;
			
	}
	Roomba_Drive(velocity, radius);
     462:	60 91 00 02 	lds	r22, 0x0200
     466:	70 91 01 02 	lds	r23, 0x0201
     46a:	80 91 11 02 	lds	r24, 0x0211
     46e:	90 91 12 02 	lds	r25, 0x0212
     472:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <Roomba_Drive>
     476:	08 95       	ret

00000478 <Auto_Drive>:
	return;
}

void Auto_Drive() {
	//uart_putchar(CLEAN, ROOMBA_UART);
	PORTG |= (1<<PG2);
     478:	a2 9a       	sbi	0x14, 2	; 20
     47a:	2f ef       	ldi	r18, 0xFF	; 255
     47c:	81 ee       	ldi	r24, 0xE1	; 225
     47e:	94 e0       	ldi	r25, 0x04	; 4
     480:	21 50       	subi	r18, 0x01	; 1
     482:	80 40       	sbci	r24, 0x00	; 0
     484:	90 40       	sbci	r25, 0x00	; 0
     486:	e1 f7       	brne	.-8      	; 0x480 <Auto_Drive+0x8>
     488:	00 c0       	rjmp	.+0      	; 0x48a <Auto_Drive+0x12>
     48a:	00 00       	nop
	_delay_ms(100);
	PORTG &= ~(1<<PG2);
     48c:	a2 98       	cbi	0x14, 2	; 20
     48e:	2f ef       	ldi	r18, 0xFF	; 255
     490:	81 ee       	ldi	r24, 0xE1	; 225
     492:	94 e0       	ldi	r25, 0x04	; 4
     494:	21 50       	subi	r18, 0x01	; 1
     496:	80 40       	sbci	r24, 0x00	; 0
     498:	90 40       	sbci	r25, 0x00	; 0
     49a:	e1 f7       	brne	.-8      	; 0x494 <Auto_Drive+0x1c>
     49c:	00 c0       	rjmp	.+0      	; 0x49e <Auto_Drive+0x26>
     49e:	00 00       	nop
     4a0:	2f ef       	ldi	r18, 0xFF	; 255
     4a2:	89 ef       	ldi	r24, 0xF9	; 249
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	21 50       	subi	r18, 0x01	; 1
     4a8:	80 40       	sbci	r24, 0x00	; 0
     4aa:	90 40       	sbci	r25, 0x00	; 0
     4ac:	e1 f7       	brne	.-8      	; 0x4a6 <Auto_Drive+0x2e>
     4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <Auto_Drive+0x38>
     4b0:	00 00       	nop
     4b2:	08 95       	ret

000004b4 <Sense>:
	uint16_t photo_resist = 0;
	uint8_t start = 255;
	uint8_t dir = 0;
	uint8_t laser_btn = 255;
	uint8_t end = 255;
	int count = 0;
     4b4:	c0 e0       	ldi	r28, 0x00	; 0
     4b6:	d0 e0       	ldi	r29, 0x00	; 0
				// Direction input (joystick) results in manual drive
				if (dir == 48){
					count += 1;
					if (count >= 50){
						Auto_Drive();
						count = 0;
     4b8:	e1 2c       	mov	r14, r1
     4ba:	f1 2c       	mov	r15, r1
	
	for (;;) {
		photo_resist = 0;
		
		// Read photo-resistor
		photo_resist = adc_read(7);
     4bc:	87 e0       	ldi	r24, 0x07	; 7
     4be:	f2 de       	rcall	.-540    	; 0x2a4 <adc_read>

		// Hit by laser
		if (photo_resist > light_threshold){
     4c0:	20 91 ab 14 	lds	r18, 0x14AB
     4c4:	30 91 ac 14 	lds	r19, 0x14AC
     4c8:	28 17       	cp	r18, r24
     4ca:	39 07       	cpc	r19, r25
     4cc:	10 f4       	brcc	.+4      	; 0x4d2 <Sense+0x1e>

			//Light up LED
			PORTG |= (1<<PG2);
     4ce:	a2 9a       	sbi	0x14, 2	; 20
     4d0:	ff cf       	rjmp	.-2      	; 0x4d0 <Sense+0x1c>
			Idle();
		}
		
		// If enough data received
		if (uart_bytes_received(BT_UART) >= 5) {
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <uart_bytes_received>
     4da:	85 30       	cpi	r24, 0x05	; 5
     4dc:	08 f4       	brcc	.+2      	; 0x4e0 <Sense+0x2c>
     4de:	54 c0       	rjmp	.+168    	; 0x588 <Sense+0xd4>
			//uart_reset_receive(BT_UART);
			
			start = uart_get_byte(1, BT_UART);
     4e0:	61 e0       	ldi	r22, 0x01	; 1
     4e2:	70 e0       	ldi	r23, 0x00	; 0
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <uart_get_byte>
     4ec:	08 2f       	mov	r16, r24
			end = uart_get_byte(4, BT_UART);
     4ee:	61 e0       	ldi	r22, 0x01	; 1
     4f0:	70 e0       	ldi	r23, 0x00	; 0
     4f2:	84 e0       	ldi	r24, 0x04	; 4
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <uart_get_byte>
     4fa:	18 2f       	mov	r17, r24
			uart_putchar(uart_bytes_received(BT_UART), BT_UART);
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <uart_bytes_received>
     504:	61 e0       	ldi	r22, 0x01	; 1
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <uart_putchar>
			uart_putchar(start, BT_UART);
     50c:	61 e0       	ldi	r22, 0x01	; 1
     50e:	70 e0       	ldi	r23, 0x00	; 0
     510:	80 2f       	mov	r24, r16
     512:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <uart_putchar>
			uart_putchar(end, BT_UART);
     516:	61 e0       	ldi	r22, 0x01	; 1
     518:	70 e0       	ldi	r23, 0x00	; 0
     51a:	81 2f       	mov	r24, r17
     51c:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <uart_putchar>
			// Validate framing
			if (start == (uint8_t)'s' && end == (uint8_t)'e'){
     520:	03 37       	cpi	r16, 0x73	; 115
     522:	71 f5       	brne	.+92     	; 0x580 <Sense+0xcc>
     524:	15 36       	cpi	r17, 0x65	; 101
     526:	61 f5       	brne	.+88     	; 0x580 <Sense+0xcc>
				dir = uart_get_byte(2, BT_UART);
     528:	61 e0       	ldi	r22, 0x01	; 1
     52a:	70 e0       	ldi	r23, 0x00	; 0
     52c:	82 e0       	ldi	r24, 0x02	; 2
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <uart_get_byte>
     534:	18 2f       	mov	r17, r24
				laser_btn = uart_get_byte(3, BT_UART);
     536:	61 e0       	ldi	r22, 0x01	; 1
     538:	70 e0       	ldi	r23, 0x00	; 0
     53a:	83 e0       	ldi	r24, 0x03	; 3
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <uart_get_byte>
     542:	08 2f       	mov	r16, r24
				uart_putchar(dir, BT_UART);
     544:	61 e0       	ldi	r22, 0x01	; 1
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	81 2f       	mov	r24, r17
     54a:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <uart_putchar>
				uart_putchar(laser_btn, BT_UART);
     54e:	61 e0       	ldi	r22, 0x01	; 1
     550:	70 e0       	ldi	r23, 0x00	; 0
     552:	80 2f       	mov	r24, r16
     554:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <uart_putchar>
				
				// On == 'o'
				if (laser_btn == 111){
     558:	0f 36       	cpi	r16, 0x6F	; 111
     55a:	31 f4       	brne	.+12     	; 0x568 <Sense+0xb4>
					uart_putchar('o', BT_UART);
     55c:	61 e0       	ldi	r22, 0x01	; 1
     55e:	70 e0       	ldi	r23, 0x00	; 0
     560:	8f e6       	ldi	r24, 0x6F	; 111
     562:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <uart_putchar>
					//FIRE LASER
					PORTD |= (1<<PD7);
     566:	5f 9a       	sbi	0x0b, 7	; 11
				}
				// Direction input (joystick) results in manual drive
				if (dir == 48){
     568:	10 33       	cpi	r17, 0x30	; 48
     56a:	41 f4       	brne	.+16     	; 0x57c <Sense+0xc8>
					count += 1;
     56c:	21 96       	adiw	r28, 0x01	; 1
					if (count >= 50){
     56e:	c2 33       	cpi	r28, 0x32	; 50
     570:	d1 05       	cpc	r29, r1
     572:	34 f0       	brlt	.+12     	; 0x580 <Sense+0xcc>
						Auto_Drive();
     574:	81 df       	rcall	.-254    	; 0x478 <Auto_Drive>
						count = 0;
     576:	ce 2d       	mov	r28, r14
     578:	df 2d       	mov	r29, r15
     57a:	02 c0       	rjmp	.+4      	; 0x580 <Sense+0xcc>
					}
				} else {
					Man_Drive(dir);
     57c:	81 2f       	mov	r24, r17
     57e:	1d df       	rcall	.-454    	; 0x3ba <Man_Drive>
				}
			}
			uart_reset_receive(BT_UART);
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <uart_reset_receive>
		}
		
		//Turn laser off
		PORTD &= ~(1<<PD7);
     588:	5f 98       	cbi	0x0b, 7	; 11
	}
     58a:	98 cf       	rjmp	.-208    	; 0x4bc <Sense+0x8>

0000058c <a_main>:

// Application level main function
// Creates the required tasks and then terminates
void a_main() {
	//Init_Task();
	InitPID		= Task_Create(Init_Task,0,1);
     58c:	41 e0       	ldi	r20, 0x01	; 1
     58e:	50 e0       	ldi	r21, 0x00	; 0
     590:	60 e0       	ldi	r22, 0x00	; 0
     592:	70 e0       	ldi	r23, 0x00	; 0
     594:	82 eb       	ldi	r24, 0xB2	; 178
     596:	91 e0       	ldi	r25, 0x01	; 1
     598:	f1 d6       	rcall	.+3554   	; 0x137c <Task_Create>
     59a:	90 93 ba 14 	sts	0x14BA, r25
     59e:	80 93 b9 14 	sts	0x14B9, r24
	SensePID	= Task_Create(Sense, 1, 1);
     5a2:	41 e0       	ldi	r20, 0x01	; 1
     5a4:	50 e0       	ldi	r21, 0x00	; 0
     5a6:	61 e0       	ldi	r22, 0x01	; 1
     5a8:	70 e0       	ldi	r23, 0x00	; 0
     5aa:	8a e5       	ldi	r24, 0x5A	; 90
     5ac:	92 e0       	ldi	r25, 0x02	; 2
     5ae:	e6 d6       	rcall	.+3532   	; 0x137c <Task_Create>
     5b0:	90 93 b2 14 	sts	0x14B2, r25
     5b4:	80 93 b1 14 	sts	0x14B1, r24
	IdlePID		= Task_Create(Idle, 8, 1);
     5b8:	41 e0       	ldi	r20, 0x01	; 1
     5ba:	50 e0       	ldi	r21, 0x00	; 0
     5bc:	68 e0       	ldi	r22, 0x08	; 8
     5be:	70 e0       	ldi	r23, 0x00	; 0
     5c0:	81 eb       	ldi	r24, 0xB1	; 177
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	db d6       	rcall	.+3510   	; 0x137c <Task_Create>
     5c6:	90 93 aa 14 	sts	0x14AA, r25
     5ca:	80 93 a9 14 	sts	0x14A9, r24
	adc_test = adc_read(7);
	sprintf(line, "%04d\0", adc_test);
	uart_send_string(line, BT_UART);
	_delay_ms(50);*/
	
	Task_Terminate();
     5ce:	01 c0       	rjmp	.+2      	; 0x5d2 <Task_Terminate>
     5d0:	08 95       	ret

000005d2 <Task_Terminate>:
/**
  * Application level task getarg to return intiial arg value
  */
int Task_GetArg(PID p) {
	return (Cp->arg);
}
     5d2:	80 91 23 02 	lds	r24, 0x0223
     5d6:	90 91 24 02 	lds	r25, 0x0224
     5da:	89 2b       	or	r24, r25
     5dc:	51 f0       	breq	.+20     	; 0x5f2 <Task_Terminate+0x20>
     5de:	f8 94       	cli
     5e0:	e0 91 25 02 	lds	r30, 0x0225
     5e4:	f0 91 26 02 	lds	r31, 0x0226
     5e8:	e3 5f       	subi	r30, 0xF3	; 243
     5ea:	fe 4f       	sbci	r31, 0xFE	; 254
     5ec:	84 e0       	ldi	r24, 0x04	; 4
     5ee:	80 83       	st	Z, r24
     5f0:	fd cd       	rjmp	.-1030   	; 0x1ec <Enter_Kernel>
     5f2:	08 95       	ret

000005f4 <Kernel_Create_Task_At>:
     5f4:	ef 92       	push	r14
     5f6:	ff 92       	push	r15
     5f8:	0f 93       	push	r16
     5fa:	1f 93       	push	r17
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	1f 92       	push	r1
     602:	1f 92       	push	r1
     604:	cd b7       	in	r28, 0x3d	; 61
     606:	de b7       	in	r29, 0x3e	; 62
     608:	9a 83       	std	Y+2, r25	; 0x02
     60a:	89 83       	std	Y+1, r24	; 0x01
     60c:	dc 01       	movw	r26, r24
     60e:	7c 01       	movw	r14, r24
     610:	04 e0       	ldi	r16, 0x04	; 4
     612:	e0 0e       	add	r14, r16
     614:	f1 1c       	adc	r15, r1
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	f7 01       	movw	r30, r14
     61c:	8c 01       	movw	r16, r24
     61e:	11 92       	st	Z+, r1
     620:	01 50       	subi	r16, 0x01	; 1
     622:	10 40       	sbci	r17, 0x00	; 0
     624:	e1 f7       	brne	.-8      	; 0x61e <Kernel_Create_Task_At+0x2a>
     626:	fd 01       	movw	r30, r26
     628:	ed 5f       	subi	r30, 0xFD	; 253
     62a:	fe 4f       	sbci	r31, 0xFE	; 254
     62c:	89 ee       	ldi	r24, 0xE9	; 233
     62e:	92 e0       	ldi	r25, 0x02	; 2
     630:	80 83       	st	Z, r24
     632:	31 97       	sbiw	r30, 0x01	; 1
     634:	90 83       	st	Z, r25
     636:	31 97       	sbiw	r30, 0x01	; 1
     638:	60 83       	st	Z, r22
     63a:	31 97       	sbiw	r30, 0x01	; 1
     63c:	70 83       	st	Z, r23
     63e:	31 97       	sbiw	r30, 0x01	; 1
     640:	10 82       	st	Z, r1
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	92 93       	st	-Z, r25
     646:	9f 5f       	subi	r25, 0xFF	; 255
     648:	92 32       	cpi	r25, 0x22	; 34
     64a:	e1 f7       	brne	.-8      	; 0x644 <Kernel_Create_Task_At+0x50>
     64c:	a4 52       	subi	r26, 0x24	; 36
     64e:	bf 4f       	sbci	r27, 0xFF	; 255
     650:	e9 81       	ldd	r30, Y+1	; 0x01
     652:	fa 81       	ldd	r31, Y+2	; 0x02
     654:	b3 83       	std	Z+3, r27	; 0x03
     656:	a2 83       	std	Z+2, r26	; 0x02
     658:	df 01       	movw	r26, r30
     65a:	a5 5f       	subi	r26, 0xF5	; 245
     65c:	be 4f       	sbci	r27, 0xFE	; 254
     65e:	11 96       	adiw	r26, 0x01	; 1
     660:	7c 93       	st	X, r23
     662:	6e 93       	st	-X, r22
     664:	12 96       	adiw	r26, 0x02	; 2
     666:	1c 92       	st	X, r1
     668:	80 91 1f 02 	lds	r24, 0x021F
     66c:	90 91 20 02 	lds	r25, 0x0220
     670:	91 83       	std	Z+1, r25	; 0x01
     672:	80 83       	st	Z, r24
     674:	89 81       	ldd	r24, Y+1	; 0x01
     676:	9a 81       	ldd	r25, Y+2	; 0x02
     678:	fc 01       	movw	r30, r24
     67a:	eb 5f       	subi	r30, 0xFB	; 251
     67c:	fe 4f       	sbci	r31, 0xFE	; 254
     67e:	51 83       	std	Z+1, r21	; 0x01
     680:	40 83       	st	Z, r20
     682:	32 96       	adiw	r30, 0x02	; 2
     684:	51 83       	std	Z+1, r21	; 0x01
     686:	40 83       	st	Z, r20
     688:	32 96       	adiw	r30, 0x02	; 2
     68a:	31 83       	std	Z+1, r19	; 0x01
     68c:	20 83       	st	Z, r18
     68e:	71 96       	adiw	r30, 0x11	; 17
     690:	11 82       	std	Z+1, r1	; 0x01
     692:	10 82       	st	Z, r1
     694:	34 97       	sbiw	r30, 0x04	; 4
     696:	23 e6       	ldi	r18, 0x63	; 99
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	31 83       	std	Z+1, r19	; 0x01
     69c:	20 83       	st	Z, r18
     69e:	20 91 21 02 	lds	r18, 0x0221
     6a2:	30 91 22 02 	lds	r19, 0x0222
     6a6:	2f 5f       	subi	r18, 0xFF	; 255
     6a8:	3f 4f       	sbci	r19, 0xFF	; 255
     6aa:	30 93 22 02 	sts	0x0222, r19
     6ae:	20 93 21 02 	sts	0x0221, r18
     6b2:	20 91 1f 02 	lds	r18, 0x021F
     6b6:	30 91 20 02 	lds	r19, 0x0220
     6ba:	2f 5f       	subi	r18, 0xFF	; 255
     6bc:	3f 4f       	sbci	r19, 0xFF	; 255
     6be:	30 93 20 02 	sts	0x0220, r19
     6c2:	20 93 1f 02 	sts	0x021F, r18
     6c6:	72 97       	sbiw	r30, 0x12	; 18
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	80 83       	st	Z, r24
     6cc:	47 e1       	ldi	r20, 0x17	; 23
     6ce:	52 e0       	ldi	r21, 0x02	; 2
     6d0:	6d ed       	ldi	r22, 0xDD	; 221
     6d2:	74 e1       	ldi	r23, 0x14	; 20
     6d4:	ce 01       	movw	r24, r28
     6d6:	01 96       	adiw	r24, 0x01	; 1
     6d8:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <enqueueRQ>
     6dc:	e9 81       	ldd	r30, Y+1	; 0x01
     6de:	fa 81       	ldd	r31, Y+2	; 0x02
     6e0:	80 81       	ld	r24, Z
     6e2:	91 81       	ldd	r25, Z+1	; 0x01
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	1f 91       	pop	r17
     6ee:	0f 91       	pop	r16
     6f0:	ff 90       	pop	r15
     6f2:	ef 90       	pop	r14
     6f4:	08 95       	ret

000006f6 <Kernel_Create_Task>:
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	ec 01       	movw	r28, r24
     6fc:	80 91 21 02 	lds	r24, 0x0221
     700:	90 91 22 02 	lds	r25, 0x0222
     704:	40 97       	sbiw	r24, 0x10	; 16
     706:	21 f1       	breq	.+72     	; 0x750 <Kernel_Create_Task+0x5a>
     708:	80 91 8b 03 	lds	r24, 0x038B
     70c:	88 23       	and	r24, r24
     70e:	71 f0       	breq	.+28     	; 0x72c <Kernel_Create_Task+0x36>
     710:	a9 ea       	ldi	r26, 0xA9	; 169
     712:	b4 e0       	ldi	r27, 0x04	; 4
     714:	e1 e0       	ldi	r30, 0x01	; 1
     716:	f0 e0       	ldi	r31, 0x00	; 0
     718:	9c 91       	ld	r25, X
     71a:	99 23       	and	r25, r25
     71c:	49 f0       	breq	.+18     	; 0x730 <Kernel_Create_Task+0x3a>
     71e:	31 96       	adiw	r30, 0x01	; 1
     720:	a2 5e       	subi	r26, 0xE2	; 226
     722:	be 4f       	sbci	r27, 0xFE	; 254
     724:	e0 31       	cpi	r30, 0x10	; 16
     726:	f1 05       	cpc	r31, r1
     728:	b9 f7       	brne	.-18     	; 0x718 <Kernel_Create_Task+0x22>
     72a:	02 c0       	rjmp	.+4      	; 0x730 <Kernel_Create_Task+0x3a>
     72c:	e0 e0       	ldi	r30, 0x00	; 0
     72e:	f0 e0       	ldi	r31, 0x00	; 0
     730:	9a 01       	movw	r18, r20
     732:	ab 01       	movw	r20, r22
     734:	be 01       	movw	r22, r28
     736:	ae e1       	ldi	r26, 0x1E	; 30
     738:	b1 e0       	ldi	r27, 0x01	; 1
     73a:	ea 9f       	mul	r30, r26
     73c:	c0 01       	movw	r24, r0
     73e:	eb 9f       	mul	r30, r27
     740:	90 0d       	add	r25, r0
     742:	fa 9f       	mul	r31, r26
     744:	90 0d       	add	r25, r0
     746:	11 24       	eor	r1, r1
     748:	89 57       	subi	r24, 0x79	; 121
     74a:	9d 4f       	sbci	r25, 0xFD	; 253
     74c:	53 df       	rcall	.-346    	; 0x5f4 <Kernel_Create_Task_At>
     74e:	00 c0       	rjmp	.+0      	; 0x750 <Kernel_Create_Task+0x5a>
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	08 95       	ret

00000756 <Kernel_Init_Mutex_At>:
     756:	fc 01       	movw	r30, r24
     758:	80 91 1d 02 	lds	r24, 0x021D
     75c:	90 91 1e 02 	lds	r25, 0x021E
     760:	91 83       	std	Z+1, r25	; 0x01
     762:	80 83       	st	Z, r24
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	82 83       	std	Z+2, r24	; 0x02
     768:	80 91 1d 02 	lds	r24, 0x021D
     76c:	90 91 1e 02 	lds	r25, 0x021E
     770:	01 96       	adiw	r24, 0x01	; 1
     772:	90 93 1e 02 	sts	0x021E, r25
     776:	80 93 1d 02 	sts	0x021D, r24
     77a:	80 81       	ld	r24, Z
     77c:	91 81       	ldd	r25, Z+1	; 0x01
     77e:	08 95       	ret

00000780 <Kernel_Init_Event_At>:
     780:	fc 01       	movw	r30, r24
     782:	80 91 1b 02 	lds	r24, 0x021B
     786:	90 91 1c 02 	lds	r25, 0x021C
     78a:	91 83       	std	Z+1, r25	; 0x01
     78c:	80 83       	st	Z, r24
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	82 83       	std	Z+2, r24	; 0x02
     792:	14 82       	std	Z+4, r1	; 0x04
     794:	13 82       	std	Z+3, r1	; 0x03
     796:	80 91 1b 02 	lds	r24, 0x021B
     79a:	90 91 1c 02 	lds	r25, 0x021C
     79e:	01 96       	adiw	r24, 0x01	; 1
     7a0:	90 93 1c 02 	sts	0x021C, r25
     7a4:	80 93 1b 02 	sts	0x021B, r24
     7a8:	80 81       	ld	r24, Z
     7aa:	91 81       	ldd	r25, Z+1	; 0x01
     7ac:	08 95       	ret

000007ae <OS_Init>:
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	10 92 22 02 	sts	0x0222, r1
     7b6:	10 92 21 02 	sts	0x0221, r1
     7ba:	10 92 24 02 	sts	0x0224, r1
     7be:	10 92 23 02 	sts	0x0223, r1
     7c2:	10 92 1e 02 	sts	0x021E, r1
     7c6:	10 92 1d 02 	sts	0x021D, r1
     7ca:	10 92 1c 02 	sts	0x021C, r1
     7ce:	10 92 1b 02 	sts	0x021B, r1
     7d2:	10 92 20 02 	sts	0x0220, r1
     7d6:	10 92 1f 02 	sts	0x021F, r1
     7da:	e7 e8       	ldi	r30, 0x87	; 135
     7dc:	f2 e0       	ldi	r31, 0x02	; 2
     7de:	ab e8       	ldi	r26, 0x8B	; 139
     7e0:	b3 e0       	ldi	r27, 0x03	; 3
     7e2:	47 e6       	ldi	r20, 0x67	; 103
     7e4:	54 e1       	ldi	r21, 0x14	; 20
     7e6:	2e e1       	ldi	r18, 0x1E	; 30
     7e8:	31 e0       	ldi	r19, 0x01	; 1
     7ea:	83 e6       	ldi	r24, 0x63	; 99
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	ef 01       	movw	r28, r30
     7f0:	b9 01       	movw	r22, r18
     7f2:	19 92       	st	Y+, r1
     7f4:	61 50       	subi	r22, 0x01	; 1
     7f6:	70 40       	sbci	r23, 0x00	; 0
     7f8:	e1 f7       	brne	.-8      	; 0x7f2 <OS_Init+0x44>
     7fa:	1c 92       	st	X, r1
     7fc:	53 96       	adiw	r26, 0x13	; 19
     7fe:	9c 93       	st	X, r25
     800:	8e 93       	st	-X, r24
     802:	52 97       	sbiw	r26, 0x12	; 18
     804:	11 82       	std	Z+1, r1	; 0x01
     806:	10 82       	st	Z, r1
     808:	e2 5e       	subi	r30, 0xE2	; 226
     80a:	fe 4f       	sbci	r31, 0xFE	; 254
     80c:	a2 5e       	subi	r26, 0xE2	; 226
     80e:	be 4f       	sbci	r27, 0xFE	; 254
     810:	e4 17       	cp	r30, r20
     812:	f5 07       	cpc	r31, r21
     814:	61 f7       	brne	.-40     	; 0x7ee <OS_Init+0x40>
     816:	e1 e5       	ldi	r30, 0x51	; 81
     818:	f2 e0       	ldi	r31, 0x02	; 2
     81a:	29 e8       	ldi	r18, 0x89	; 137
     81c:	32 e0       	ldi	r19, 0x02	; 2
     81e:	87 e0       	ldi	r24, 0x07	; 7
     820:	df 01       	movw	r26, r30
     822:	12 97       	sbiw	r26, 0x02	; 2
     824:	ed 01       	movw	r28, r26
     826:	68 2f       	mov	r22, r24
     828:	19 92       	st	Y+, r1
     82a:	6a 95       	dec	r22
     82c:	e9 f7       	brne	.-6      	; 0x828 <OS_Init+0x7a>
     82e:	10 82       	st	Z, r1
     830:	37 96       	adiw	r30, 0x07	; 7
     832:	e2 17       	cp	r30, r18
     834:	f3 07       	cpc	r31, r19
     836:	a1 f7       	brne	.-24     	; 0x820 <OS_Init+0x72>
     838:	e9 e2       	ldi	r30, 0x29	; 41
     83a:	f2 e0       	ldi	r31, 0x02	; 2
     83c:	21 e5       	ldi	r18, 0x51	; 81
     83e:	32 e0       	ldi	r19, 0x02	; 2
     840:	85 e0       	ldi	r24, 0x05	; 5
     842:	df 01       	movw	r26, r30
     844:	12 97       	sbiw	r26, 0x02	; 2
     846:	ed 01       	movw	r28, r26
     848:	68 2f       	mov	r22, r24
     84a:	19 92       	st	Y+, r1
     84c:	6a 95       	dec	r22
     84e:	e9 f7       	brne	.-6      	; 0x84a <OS_Init+0x9c>
     850:	10 82       	st	Z, r1
     852:	35 96       	adiw	r30, 0x05	; 5
     854:	e2 17       	cp	r30, r18
     856:	f3 07       	cpc	r31, r19
     858:	a1 f7       	brne	.-24     	; 0x842 <OS_Init+0x94>
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	08 95       	ret

00000860 <OS_Abort>:
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	0e 94 9e 10 	call	0x213c	; 0x213c <_exit>

00000868 <Dispatch>:
     868:	67 e1       	ldi	r22, 0x17	; 23
     86a:	72 e0       	ldi	r23, 0x02	; 2
     86c:	8d ed       	ldi	r24, 0xDD	; 221
     86e:	94 e1       	ldi	r25, 0x14	; 20
     870:	0e 94 a5 0c 	call	0x194a	; 0x194a <dequeueRQ>
     874:	fc 01       	movw	r30, r24
     876:	90 93 26 02 	sts	0x0226, r25
     87a:	80 93 25 02 	sts	0x0225, r24
     87e:	89 2b       	or	r24, r25
     880:	09 f4       	brne	.+2      	; 0x884 <Dispatch+0x1c>
     882:	ee df       	rcall	.-36     	; 0x860 <OS_Abort>
     884:	82 81       	ldd	r24, Z+2	; 0x02
     886:	93 81       	ldd	r25, Z+3	; 0x03
     888:	90 93 fe 14 	sts	0x14FE, r25
     88c:	80 93 fd 14 	sts	0x14FD, r24
     890:	82 e0       	ldi	r24, 0x02	; 2
     892:	df 01       	movw	r26, r30
     894:	ac 5f       	subi	r26, 0xFC	; 252
     896:	be 4f       	sbci	r27, 0xFE	; 254
     898:	8c 93       	st	X, r24
     89a:	80 81       	ld	r24, Z
     89c:	91 81       	ldd	r25, Z+1	; 0x01
     89e:	02 97       	sbiw	r24, 0x02	; 2
     8a0:	20 f4       	brcc	.+8      	; 0x8aa <Dispatch+0x42>
     8a2:	82 e0       	ldi	r24, 0x02	; 2
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	42 cd       	rjmp	.-1404   	; 0x32c <enable_LED>
     8a8:	08 95       	ret
     8aa:	80 81       	ld	r24, Z
     8ac:	91 81       	ldd	r25, Z+1	; 0x01
     8ae:	02 97       	sbiw	r24, 0x02	; 2
     8b0:	21 f4       	brne	.+8      	; 0x8ba <Dispatch+0x52>
     8b2:	85 e0       	ldi	r24, 0x05	; 5
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	3a cd       	rjmp	.-1420   	; 0x32c <enable_LED>
     8b8:	08 95       	ret
     8ba:	80 81       	ld	r24, Z
     8bc:	91 81       	ldd	r25, Z+1	; 0x01
     8be:	03 97       	sbiw	r24, 0x03	; 3
     8c0:	19 f4       	brne	.+6      	; 0x8c8 <Dispatch+0x60>
     8c2:	86 e0       	ldi	r24, 0x06	; 6
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	32 cd       	rjmp	.-1436   	; 0x32c <enable_LED>
     8c8:	08 95       	ret

000008ca <Kernel_Unlock_Mutex>:
     8ca:	0f 93       	push	r16
     8cc:	1f 93       	push	r17
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	1f 92       	push	r1
     8d4:	1f 92       	push	r1
     8d6:	cd b7       	in	r28, 0x3d	; 61
     8d8:	de b7       	in	r29, 0x3e	; 62
     8da:	a0 91 25 02 	lds	r26, 0x0225
     8de:	b0 91 26 02 	lds	r27, 0x0226
     8e2:	fd 01       	movw	r30, r26
     8e4:	ec 5e       	subi	r30, 0xEC	; 236
     8e6:	fe 4f       	sbci	r31, 0xFE	; 254
     8e8:	40 81       	ld	r20, Z
     8ea:	51 81       	ldd	r21, Z+1	; 0x01
     8ec:	ef e4       	ldi	r30, 0x4F	; 79
     8ee:	f2 e0       	ldi	r31, 0x02	; 2
     8f0:	00 e0       	ldi	r16, 0x00	; 0
     8f2:	10 e0       	ldi	r17, 0x00	; 0
     8f4:	80 81       	ld	r24, Z
     8f6:	91 81       	ldd	r25, Z+1	; 0x01
     8f8:	84 17       	cp	r24, r20
     8fa:	95 07       	cpc	r25, r21
     8fc:	39 f0       	breq	.+14     	; 0x90c <Kernel_Unlock_Mutex+0x42>
     8fe:	0f 5f       	subi	r16, 0xFF	; 255
     900:	1f 4f       	sbci	r17, 0xFF	; 255
     902:	37 96       	adiw	r30, 0x07	; 7
     904:	08 30       	cpi	r16, 0x08	; 8
     906:	11 05       	cpc	r17, r1
     908:	a9 f7       	brne	.-22     	; 0x8f4 <Kernel_Unlock_Mutex+0x2a>
     90a:	f7 c0       	rjmp	.+494    	; 0xafa <Kernel_Unlock_Mutex+0x230>
     90c:	8d 91       	ld	r24, X+
     90e:	9c 91       	ld	r25, X
     910:	11 97       	sbiw	r26, 0x01	; 1
     912:	27 e0       	ldi	r18, 0x07	; 7
     914:	20 9f       	mul	r18, r16
     916:	f0 01       	movw	r30, r0
     918:	21 9f       	mul	r18, r17
     91a:	f0 0d       	add	r31, r0
     91c:	11 24       	eor	r1, r1
     91e:	e1 5b       	subi	r30, 0xB1	; 177
     920:	fd 4f       	sbci	r31, 0xFD	; 253
     922:	23 81       	ldd	r18, Z+3	; 0x03
     924:	34 81       	ldd	r19, Z+4	; 0x04
     926:	28 17       	cp	r18, r24
     928:	39 07       	cpc	r19, r25
     92a:	09 f0       	breq	.+2      	; 0x92e <Kernel_Unlock_Mutex+0x64>
     92c:	e6 c0       	rjmp	.+460    	; 0xafa <Kernel_Unlock_Mutex+0x230>
     92e:	ac 5f       	subi	r26, 0xFC	; 252
     930:	be 4f       	sbci	r27, 0xFE	; 254
     932:	8c 91       	ld	r24, X
     934:	86 30       	cpi	r24, 0x06	; 6
     936:	09 f0       	breq	.+2      	; 0x93a <Kernel_Unlock_Mutex+0x70>
     938:	4d c0       	rjmp	.+154    	; 0x9d4 <Kernel_Unlock_Mutex+0x10a>
     93a:	63 e1       	ldi	r22, 0x13	; 19
     93c:	72 e0       	ldi	r23, 0x02	; 2
     93e:	8f ef       	ldi	r24, 0xFF	; 255
     940:	94 e1       	ldi	r25, 0x14	; 20
     942:	9b d7       	rcall	.+3894   	; 0x187a <dequeueWQ>
     944:	9a 83       	std	Y+2, r25	; 0x02
     946:	89 83       	std	Y+1, r24	; 0x01
     948:	00 97       	sbiw	r24, 0x00	; 0
     94a:	79 f4       	brne	.+30     	; 0x96a <Kernel_Unlock_Mutex+0xa0>
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	80 9f       	mul	r24, r16
     950:	f0 01       	movw	r30, r0
     952:	81 9f       	mul	r24, r17
     954:	f0 0d       	add	r31, r0
     956:	11 24       	eor	r1, r1
     958:	e1 5b       	subi	r30, 0xB1	; 177
     95a:	fd 4f       	sbci	r31, 0xFD	; 253
     95c:	16 82       	std	Z+6, r1	; 0x06
     95e:	15 82       	std	Z+5, r1	; 0x05
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	82 83       	std	Z+2, r24	; 0x02
     964:	14 82       	std	Z+4, r1	; 0x04
     966:	13 82       	std	Z+3, r1	; 0x03
     968:	c8 c0       	rjmp	.+400    	; 0xafa <Kernel_Unlock_Mutex+0x230>
     96a:	27 e0       	ldi	r18, 0x07	; 7
     96c:	20 9f       	mul	r18, r16
     96e:	f0 01       	movw	r30, r0
     970:	21 9f       	mul	r18, r17
     972:	f0 0d       	add	r31, r0
     974:	11 24       	eor	r1, r1
     976:	e1 5b       	subi	r30, 0xB1	; 177
     978:	fd 4f       	sbci	r31, 0xFD	; 253
     97a:	21 e0       	ldi	r18, 0x01	; 1
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	36 83       	std	Z+6, r19	; 0x06
     980:	25 83       	std	Z+5, r18	; 0x05
     982:	dc 01       	movw	r26, r24
     984:	2d 91       	ld	r18, X+
     986:	3c 91       	ld	r19, X
     988:	34 83       	std	Z+4, r19	; 0x04
     98a:	23 83       	std	Z+3, r18	; 0x03
     98c:	20 91 25 02 	lds	r18, 0x0225
     990:	30 91 26 02 	lds	r19, 0x0226
     994:	d9 01       	movw	r26, r18
     996:	a9 5f       	subi	r26, 0xF9	; 249
     998:	be 4f       	sbci	r27, 0xFE	; 254
     99a:	4d 91       	ld	r20, X+
     99c:	5c 91       	ld	r21, X
     99e:	11 97       	sbiw	r26, 0x01	; 1
     9a0:	fc 01       	movw	r30, r24
     9a2:	e9 5f       	subi	r30, 0xF9	; 249
     9a4:	fe 4f       	sbci	r31, 0xFE	; 254
     9a6:	51 83       	std	Z+1, r21	; 0x01
     9a8:	40 83       	st	Z, r20
     9aa:	33 97       	sbiw	r30, 0x03	; 3
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	80 83       	st	Z, r24
     9b0:	f9 01       	movw	r30, r18
     9b2:	eb 5f       	subi	r30, 0xFB	; 251
     9b4:	fe 4f       	sbci	r31, 0xFE	; 254
     9b6:	40 81       	ld	r20, Z
     9b8:	51 81       	ldd	r21, Z+1	; 0x01
     9ba:	11 96       	adiw	r26, 0x01	; 1
     9bc:	5c 93       	st	X, r21
     9be:	4e 93       	st	-X, r20
     9c0:	31 97       	sbiw	r30, 0x01	; 1
     9c2:	80 83       	st	Z, r24
     9c4:	47 e1       	ldi	r20, 0x17	; 23
     9c6:	52 e0       	ldi	r21, 0x02	; 2
     9c8:	6d ed       	ldi	r22, 0xDD	; 221
     9ca:	74 e1       	ldi	r23, 0x14	; 20
     9cc:	ce 01       	movw	r24, r28
     9ce:	01 96       	adiw	r24, 0x01	; 1
     9d0:	f1 d6       	rcall	.+3554   	; 0x17b4 <enqueueRQ>
     9d2:	93 c0       	rjmp	.+294    	; 0xafa <Kernel_Unlock_Mutex+0x230>
     9d4:	87 e0       	ldi	r24, 0x07	; 7
     9d6:	80 9f       	mul	r24, r16
     9d8:	f0 01       	movw	r30, r0
     9da:	81 9f       	mul	r24, r17
     9dc:	f0 0d       	add	r31, r0
     9de:	11 24       	eor	r1, r1
     9e0:	e1 5b       	subi	r30, 0xB1	; 177
     9e2:	fd 4f       	sbci	r31, 0xFD	; 253
     9e4:	85 81       	ldd	r24, Z+5	; 0x05
     9e6:	96 81       	ldd	r25, Z+6	; 0x06
     9e8:	82 30       	cpi	r24, 0x02	; 2
     9ea:	91 05       	cpc	r25, r1
     9ec:	60 f0       	brcs	.+24     	; 0xa06 <Kernel_Unlock_Mutex+0x13c>
     9ee:	27 e0       	ldi	r18, 0x07	; 7
     9f0:	20 9f       	mul	r18, r16
     9f2:	f0 01       	movw	r30, r0
     9f4:	21 9f       	mul	r18, r17
     9f6:	f0 0d       	add	r31, r0
     9f8:	11 24       	eor	r1, r1
     9fa:	e1 5b       	subi	r30, 0xB1	; 177
     9fc:	fd 4f       	sbci	r31, 0xFD	; 253
     9fe:	01 97       	sbiw	r24, 0x01	; 1
     a00:	96 83       	std	Z+6, r25	; 0x06
     a02:	85 83       	std	Z+5, r24	; 0x05
     a04:	7a c0       	rjmp	.+244    	; 0xafa <Kernel_Unlock_Mutex+0x230>
     a06:	63 e1       	ldi	r22, 0x13	; 19
     a08:	72 e0       	ldi	r23, 0x02	; 2
     a0a:	8f ef       	ldi	r24, 0xFF	; 255
     a0c:	94 e1       	ldi	r25, 0x14	; 20
     a0e:	35 d7       	rcall	.+3690   	; 0x187a <dequeueWQ>
     a10:	9a 83       	std	Y+2, r25	; 0x02
     a12:	89 83       	std	Y+1, r24	; 0x01
     a14:	00 97       	sbiw	r24, 0x00	; 0
     a16:	a9 f5       	brne	.+106    	; 0xa82 <Kernel_Unlock_Mutex+0x1b8>
     a18:	87 e0       	ldi	r24, 0x07	; 7
     a1a:	80 9f       	mul	r24, r16
     a1c:	f0 01       	movw	r30, r0
     a1e:	81 9f       	mul	r24, r17
     a20:	f0 0d       	add	r31, r0
     a22:	11 24       	eor	r1, r1
     a24:	e1 5b       	subi	r30, 0xB1	; 177
     a26:	fd 4f       	sbci	r31, 0xFD	; 253
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	82 83       	std	Z+2, r24	; 0x02
     a2c:	16 82       	std	Z+6, r1	; 0x06
     a2e:	15 82       	std	Z+5, r1	; 0x05
     a30:	14 82       	std	Z+4, r1	; 0x04
     a32:	13 82       	std	Z+3, r1	; 0x03
     a34:	e0 91 25 02 	lds	r30, 0x0225
     a38:	f0 91 26 02 	lds	r31, 0x0226
     a3c:	df 01       	movw	r26, r30
     a3e:	ab 5f       	subi	r26, 0xFB	; 251
     a40:	be 4f       	sbci	r27, 0xFE	; 254
     a42:	8d 91       	ld	r24, X+
     a44:	9c 91       	ld	r25, X
     a46:	11 97       	sbiw	r26, 0x01	; 1
     a48:	12 96       	adiw	r26, 0x02	; 2
     a4a:	11 96       	adiw	r26, 0x01	; 1
     a4c:	9c 93       	st	X, r25
     a4e:	8e 93       	st	-X, r24
     a50:	80 81       	ld	r24, Z
     a52:	91 81       	ldd	r25, Z+1	; 0x01
     a54:	02 97       	sbiw	r24, 0x02	; 2
     a56:	20 f4       	brcc	.+8      	; 0xa60 <Kernel_Unlock_Mutex+0x196>
     a58:	82 e0       	ldi	r24, 0x02	; 2
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	67 dc       	rcall	.-1842   	; 0x32c <enable_LED>
     a5e:	4d c0       	rjmp	.+154    	; 0xafa <Kernel_Unlock_Mutex+0x230>
     a60:	80 81       	ld	r24, Z
     a62:	91 81       	ldd	r25, Z+1	; 0x01
     a64:	02 97       	sbiw	r24, 0x02	; 2
     a66:	21 f4       	brne	.+8      	; 0xa70 <Kernel_Unlock_Mutex+0x1a6>
     a68:	85 e0       	ldi	r24, 0x05	; 5
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	5f dc       	rcall	.-1858   	; 0x32c <enable_LED>
     a6e:	45 c0       	rjmp	.+138    	; 0xafa <Kernel_Unlock_Mutex+0x230>
     a70:	80 81       	ld	r24, Z
     a72:	91 81       	ldd	r25, Z+1	; 0x01
     a74:	03 97       	sbiw	r24, 0x03	; 3
     a76:	09 f0       	breq	.+2      	; 0xa7a <Kernel_Unlock_Mutex+0x1b0>
     a78:	40 c0       	rjmp	.+128    	; 0xafa <Kernel_Unlock_Mutex+0x230>
     a7a:	86 e0       	ldi	r24, 0x06	; 6
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	56 dc       	rcall	.-1876   	; 0x32c <enable_LED>
     a80:	3c c0       	rjmp	.+120    	; 0xafa <Kernel_Unlock_Mutex+0x230>
     a82:	27 e0       	ldi	r18, 0x07	; 7
     a84:	20 9f       	mul	r18, r16
     a86:	f0 01       	movw	r30, r0
     a88:	21 9f       	mul	r18, r17
     a8a:	f0 0d       	add	r31, r0
     a8c:	11 24       	eor	r1, r1
     a8e:	e1 5b       	subi	r30, 0xB1	; 177
     a90:	fd 4f       	sbci	r31, 0xFD	; 253
     a92:	21 e0       	ldi	r18, 0x01	; 1
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	36 83       	std	Z+6, r19	; 0x06
     a98:	25 83       	std	Z+5, r18	; 0x05
     a9a:	dc 01       	movw	r26, r24
     a9c:	2d 91       	ld	r18, X+
     a9e:	3c 91       	ld	r19, X
     aa0:	34 83       	std	Z+4, r19	; 0x04
     aa2:	23 83       	std	Z+3, r18	; 0x03
     aa4:	20 91 25 02 	lds	r18, 0x0225
     aa8:	30 91 26 02 	lds	r19, 0x0226
     aac:	d9 01       	movw	r26, r18
     aae:	a9 5f       	subi	r26, 0xF9	; 249
     ab0:	be 4f       	sbci	r27, 0xFE	; 254
     ab2:	4d 91       	ld	r20, X+
     ab4:	5c 91       	ld	r21, X
     ab6:	11 97       	sbiw	r26, 0x01	; 1
     ab8:	fc 01       	movw	r30, r24
     aba:	e9 5f       	subi	r30, 0xF9	; 249
     abc:	fe 4f       	sbci	r31, 0xFE	; 254
     abe:	51 83       	std	Z+1, r21	; 0x01
     ac0:	40 83       	st	Z, r20
     ac2:	33 97       	sbiw	r30, 0x03	; 3
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	80 83       	st	Z, r24
     ac8:	f9 01       	movw	r30, r18
     aca:	eb 5f       	subi	r30, 0xFB	; 251
     acc:	fe 4f       	sbci	r31, 0xFE	; 254
     ace:	40 81       	ld	r20, Z
     ad0:	51 81       	ldd	r21, Z+1	; 0x01
     ad2:	11 96       	adiw	r26, 0x01	; 1
     ad4:	5c 93       	st	X, r21
     ad6:	4e 93       	st	-X, r20
     ad8:	31 97       	sbiw	r30, 0x01	; 1
     ada:	80 83       	st	Z, r24
     adc:	47 e1       	ldi	r20, 0x17	; 23
     ade:	52 e0       	ldi	r21, 0x02	; 2
     ae0:	6d ed       	ldi	r22, 0xDD	; 221
     ae2:	74 e1       	ldi	r23, 0x14	; 20
     ae4:	ce 01       	movw	r24, r28
     ae6:	01 96       	adiw	r24, 0x01	; 1
     ae8:	65 d6       	rcall	.+3274   	; 0x17b4 <enqueueRQ>
     aea:	47 e1       	ldi	r20, 0x17	; 23
     aec:	52 e0       	ldi	r21, 0x02	; 2
     aee:	6d ed       	ldi	r22, 0xDD	; 221
     af0:	74 e1       	ldi	r23, 0x14	; 20
     af2:	85 e2       	ldi	r24, 0x25	; 37
     af4:	92 e0       	ldi	r25, 0x02	; 2
     af6:	5e d6       	rcall	.+3260   	; 0x17b4 <enqueueRQ>
     af8:	b7 de       	rcall	.-658    	; 0x868 <Dispatch>
     afa:	0f 90       	pop	r0
     afc:	0f 90       	pop	r0
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	08 95       	ret

00000b08 <OS_Start>:
     b08:	2f 92       	push	r2
     b0a:	3f 92       	push	r3
     b0c:	4f 92       	push	r4
     b0e:	5f 92       	push	r5
     b10:	6f 92       	push	r6
     b12:	7f 92       	push	r7
     b14:	8f 92       	push	r8
     b16:	9f 92       	push	r9
     b18:	af 92       	push	r10
     b1a:	bf 92       	push	r11
     b1c:	cf 92       	push	r12
     b1e:	df 92       	push	r13
     b20:	ef 92       	push	r14
     b22:	ff 92       	push	r15
     b24:	0f 93       	push	r16
     b26:	1f 93       	push	r17
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
     b2c:	00 d0       	rcall	.+0      	; 0xb2e <OS_Start+0x26>
     b2e:	1f 92       	push	r1
     b30:	cd b7       	in	r28, 0x3d	; 61
     b32:	de b7       	in	r29, 0x3e	; 62
     b34:	80 91 23 02 	lds	r24, 0x0223
     b38:	90 91 24 02 	lds	r25, 0x0224
     b3c:	89 2b       	or	r24, r25
     b3e:	09 f0       	breq	.+2      	; 0xb42 <OS_Start+0x3a>
     b40:	06 c4       	rjmp	.+2060   	; 0x134e <OS_Start+0x846>
     b42:	80 91 21 02 	lds	r24, 0x0221
     b46:	90 91 22 02 	lds	r25, 0x0222
     b4a:	89 2b       	or	r24, r25
     b4c:	09 f4       	brne	.+2      	; 0xb50 <OS_Start+0x48>
     b4e:	ff c3       	rjmp	.+2046   	; 0x134e <OS_Start+0x846>
     b50:	f8 94       	cli
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	90 93 24 02 	sts	0x0224, r25
     b5a:	80 93 23 02 	sts	0x0223, r24
     b5e:	84 de       	rcall	.-760    	; 0x868 <Dispatch>
     b60:	0f 2e       	mov	r0, r31
     b62:	f7 e2       	ldi	r31, 0x27	; 39
     b64:	ef 2e       	mov	r14, r31
     b66:	f2 e0       	ldi	r31, 0x02	; 2
     b68:	ff 2e       	mov	r15, r31
     b6a:	f0 2d       	mov	r31, r0
     b6c:	0f 2e       	mov	r0, r31
     b6e:	fe e1       	ldi	r31, 0x1E	; 30
     b70:	af 2e       	mov	r10, r31
     b72:	bb 24       	eor	r11, r11
     b74:	b3 94       	inc	r11
     b76:	f0 2d       	mov	r31, r0
     b78:	0f 2e       	mov	r0, r31
     b7a:	f3 e6       	ldi	r31, 0x63	; 99
     b7c:	2f 2e       	mov	r2, r31
     b7e:	31 2c       	mov	r3, r1
     b80:	f0 2d       	mov	r31, r0
     b82:	88 24       	eor	r8, r8
     b84:	83 94       	inc	r8
     b86:	91 2c       	mov	r9, r1
     b88:	0f 2e       	mov	r0, r31
     b8a:	ff e4       	ldi	r31, 0x4F	; 79
     b8c:	cf 2e       	mov	r12, r31
     b8e:	f2 e0       	ldi	r31, 0x02	; 2
     b90:	df 2e       	mov	r13, r31
     b92:	f0 2d       	mov	r31, r0
     b94:	07 e8       	ldi	r16, 0x87	; 135
     b96:	12 e0       	ldi	r17, 0x02	; 2
     b98:	0f 2e       	mov	r0, r31
     b9a:	fa e0       	ldi	r31, 0x0A	; 10
     b9c:	6f 2e       	mov	r6, r31
     b9e:	71 2c       	mov	r7, r1
     ba0:	f0 2d       	mov	r31, r0
     ba2:	e0 91 25 02 	lds	r30, 0x0225
     ba6:	f0 91 26 02 	lds	r31, 0x0226
     baa:	df 01       	movw	r26, r30
     bac:	a3 5f       	subi	r26, 0xF3	; 243
     bae:	be 4f       	sbci	r27, 0xFE	; 254
     bb0:	1c 92       	st	X, r1
     bb2:	82 81       	ldd	r24, Z+2	; 0x02
     bb4:	93 81       	ldd	r25, Z+3	; 0x03
     bb6:	90 93 fe 14 	sts	0x14FE, r25
     bba:	80 93 fd 14 	sts	0x14FD, r24
     bbe:	c1 da       	rcall	.-2686   	; 0x142 <CSwitch>
     bc0:	82 e0       	ldi	r24, 0x02	; 2
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	c0 db       	rcall	.-2176   	; 0x346 <disable_LED>
     bc6:	85 e0       	ldi	r24, 0x05	; 5
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	bd db       	rcall	.-2182   	; 0x346 <disable_LED>
     bcc:	86 e0       	ldi	r24, 0x06	; 6
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	ba db       	rcall	.-2188   	; 0x346 <disable_LED>
     bd2:	80 91 25 02 	lds	r24, 0x0225
     bd6:	90 91 26 02 	lds	r25, 0x0226
     bda:	9c 83       	std	Y+4, r25	; 0x04
     bdc:	8b 83       	std	Y+3, r24	; 0x03
     bde:	80 91 fd 14 	lds	r24, 0x14FD
     be2:	90 91 fe 14 	lds	r25, 0x14FE
     be6:	ab 81       	ldd	r26, Y+3	; 0x03
     be8:	bc 81       	ldd	r27, Y+4	; 0x04
     bea:	13 96       	adiw	r26, 0x03	; 3
     bec:	9c 93       	st	X, r25
     bee:	8e 93       	st	-X, r24
     bf0:	12 97       	sbiw	r26, 0x02	; 2
     bf2:	fd 01       	movw	r30, r26
     bf4:	e3 5f       	subi	r30, 0xF3	; 243
     bf6:	fe 4f       	sbci	r31, 0xFE	; 254
     bf8:	e0 81       	ld	r30, Z
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	ed 30       	cpi	r30, 0x0D	; 13
     bfe:	f1 05       	cpc	r31, r1
     c00:	80 f6       	brcc	.-96     	; 0xba2 <OS_Start+0x9a>
     c02:	88 27       	eor	r24, r24
     c04:	ee 58       	subi	r30, 0x8E	; 142
     c06:	ff 4f       	sbci	r31, 0xFF	; 255
     c08:	8f 4f       	sbci	r24, 0xFF	; 255
     c0a:	0c 94 96 10 	jmp	0x212c	; 0x212c <__tablejump2__>
     c0e:	eb 81       	ldd	r30, Y+3	; 0x03
     c10:	fc 81       	ldd	r31, Y+4	; 0x04
     c12:	e4 5e       	subi	r30, 0xE4	; 228
     c14:	fe 4f       	sbci	r31, 0xFE	; 254
     c16:	80 81       	ld	r24, Z
     c18:	91 81       	ldd	r25, Z+1	; 0x01
     c1a:	e7 e8       	ldi	r30, 0x87	; 135
     c1c:	f2 e0       	ldi	r31, 0x02	; 2
     c1e:	20 81       	ld	r18, Z
     c20:	31 81       	ldd	r19, Z+1	; 0x01
     c22:	28 17       	cp	r18, r24
     c24:	39 07       	cpc	r19, r25
     c26:	09 f0       	breq	.+2      	; 0xc2a <OS_Start+0x122>
     c28:	89 c0       	rjmp	.+274    	; 0xd3c <OS_Start+0x234>
     c2a:	0d c3       	rjmp	.+1562   	; 0x1246 <OS_Start+0x73e>
     c2c:	eb 81       	ldd	r30, Y+3	; 0x03
     c2e:	fc 81       	ldd	r31, Y+4	; 0x04
     c30:	e7 5f       	subi	r30, 0xF7	; 247
     c32:	fe 4f       	sbci	r31, 0xFE	; 254
     c34:	40 81       	ld	r20, Z
     c36:	51 81       	ldd	r21, Z+1	; 0x01
     c38:	eb 81       	ldd	r30, Y+3	; 0x03
     c3a:	fc 81       	ldd	r31, Y+4	; 0x04
     c3c:	eb 5f       	subi	r30, 0xFB	; 251
     c3e:	fe 4f       	sbci	r31, 0xFE	; 254
     c40:	60 81       	ld	r22, Z
     c42:	71 81       	ldd	r23, Z+1	; 0x01
     c44:	eb 81       	ldd	r30, Y+3	; 0x03
     c46:	fc 81       	ldd	r31, Y+4	; 0x04
     c48:	e5 5f       	subi	r30, 0xF5	; 245
     c4a:	fe 4f       	sbci	r31, 0xFE	; 254
     c4c:	80 81       	ld	r24, Z
     c4e:	91 81       	ldd	r25, Z+1	; 0x01
     c50:	52 dd       	rcall	.-1372   	; 0x6f6 <Kernel_Create_Task>
     c52:	eb 81       	ldd	r30, Y+3	; 0x03
     c54:	fc 81       	ldd	r31, Y+4	; 0x04
     c56:	e2 5f       	subi	r30, 0xF2	; 242
     c58:	fe 4f       	sbci	r31, 0xFE	; 254
     c5a:	91 83       	std	Z+1, r25	; 0x01
     c5c:	80 83       	st	Z, r24
     c5e:	a1 cf       	rjmp	.-190    	; 0xba2 <OS_Start+0x9a>
     c60:	eb 81       	ldd	r30, Y+3	; 0x03
     c62:	fc 81       	ldd	r31, Y+4	; 0x04
     c64:	ec 5f       	subi	r30, 0xFC	; 252
     c66:	fe 4f       	sbci	r31, 0xFE	; 254
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	80 83       	st	Z, r24
     c6c:	47 e1       	ldi	r20, 0x17	; 23
     c6e:	52 e0       	ldi	r21, 0x02	; 2
     c70:	6d ed       	ldi	r22, 0xDD	; 221
     c72:	74 e1       	ldi	r23, 0x14	; 20
     c74:	85 e2       	ldi	r24, 0x25	; 37
     c76:	92 e0       	ldi	r25, 0x02	; 2
     c78:	9d d5       	rcall	.+2874   	; 0x17b4 <enqueueRQ>
     c7a:	f6 dd       	rcall	.-1044   	; 0x868 <Dispatch>
     c7c:	92 cf       	rjmp	.-220    	; 0xba2 <OS_Start+0x9a>
     c7e:	eb 81       	ldd	r30, Y+3	; 0x03
     c80:	fc 81       	ldd	r31, Y+4	; 0x04
     c82:	ec 5f       	subi	r30, 0xFC	; 252
     c84:	fe 4f       	sbci	r31, 0xFE	; 254
     c86:	83 e0       	ldi	r24, 0x03	; 3
     c88:	80 83       	st	Z, r24
     c8a:	45 e1       	ldi	r20, 0x15	; 21
     c8c:	52 e0       	ldi	r21, 0x02	; 2
     c8e:	6d eb       	ldi	r22, 0xBD	; 189
     c90:	74 e1       	ldi	r23, 0x14	; 20
     c92:	85 e2       	ldi	r24, 0x25	; 37
     c94:	92 e0       	ldi	r25, 0x02	; 2
     c96:	1d d5       	rcall	.+2618   	; 0x16d2 <enqueueSQ>
     c98:	e7 dd       	rcall	.-1074   	; 0x868 <Dispatch>
     c9a:	83 cf       	rjmp	.-250    	; 0xba2 <OS_Start+0x9a>
     c9c:	ab 81       	ldd	r26, Y+3	; 0x03
     c9e:	bc 81       	ldd	r27, Y+4	; 0x04
     ca0:	2d 91       	ld	r18, X+
     ca2:	3c 91       	ld	r19, X
     ca4:	11 97       	sbiw	r26, 0x01	; 1
     ca6:	fd 01       	movw	r30, r26
     ca8:	e4 5e       	subi	r30, 0xE4	; 228
     caa:	fe 4f       	sbci	r31, 0xFE	; 254
     cac:	80 81       	ld	r24, Z
     cae:	91 81       	ldd	r25, Z+1	; 0x01
     cb0:	28 17       	cp	r18, r24
     cb2:	39 07       	cpc	r19, r25
     cb4:	51 f0       	breq	.+20     	; 0xcca <OS_Start+0x1c2>
     cb6:	80 81       	ld	r24, Z
     cb8:	91 81       	ldd	r25, Z+1	; 0x01
     cba:	e7 e8       	ldi	r30, 0x87	; 135
     cbc:	f2 e0       	ldi	r31, 0x02	; 2
     cbe:	20 81       	ld	r18, Z
     cc0:	31 81       	ldd	r19, Z+1	; 0x01
     cc2:	28 17       	cp	r18, r24
     cc4:	39 07       	cpc	r19, r25
     cc6:	41 f4       	brne	.+16     	; 0xcd8 <OS_Start+0x1d0>
     cc8:	ad c2       	rjmp	.+1370   	; 0x1224 <OS_Start+0x71c>
     cca:	eb 81       	ldd	r30, Y+3	; 0x03
     ccc:	fc 81       	ldd	r31, Y+4	; 0x04
     cce:	e6 5e       	subi	r30, 0xE6	; 230
     cd0:	fe 4f       	sbci	r31, 0xFE	; 254
     cd2:	91 82       	std	Z+1, r9	; 0x01
     cd4:	80 82       	st	Z, r8
     cd6:	1a c0       	rjmp	.+52     	; 0xd0c <OS_Start+0x204>
     cd8:	e5 ea       	ldi	r30, 0xA5	; 165
     cda:	f3 e0       	ldi	r31, 0x03	; 3
     cdc:	c4 01       	movw	r24, r8
     cde:	ab 81       	ldd	r26, Y+3	; 0x03
     ce0:	bc 81       	ldd	r27, Y+4	; 0x04
     ce2:	a4 5e       	subi	r26, 0xE4	; 228
     ce4:	be 4f       	sbci	r27, 0xFE	; 254
     ce6:	6b 81       	ldd	r22, Y+3	; 0x03
     ce8:	7c 81       	ldd	r23, Y+4	; 0x04
     cea:	2d 91       	ld	r18, X+
     cec:	3c 91       	ld	r19, X
     cee:	11 97       	sbiw	r26, 0x01	; 1
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	42 17       	cp	r20, r18
     cf6:	53 07       	cpc	r21, r19
     cf8:	09 f4       	brne	.+2      	; 0xcfc <OS_Start+0x1f4>
     cfa:	97 c2       	rjmp	.+1326   	; 0x122a <OS_Start+0x722>
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	e2 5e       	subi	r30, 0xE2	; 226
     d00:	fe 4f       	sbci	r31, 0xFE	; 254
     d02:	80 31       	cpi	r24, 0x10	; 16
     d04:	91 05       	cpc	r25, r1
     d06:	89 f7       	brne	.-30     	; 0xcea <OS_Start+0x1e2>
     d08:	7c 83       	std	Y+4, r23	; 0x04
     d0a:	6b 83       	std	Y+3, r22	; 0x03
     d0c:	eb 81       	ldd	r30, Y+3	; 0x03
     d0e:	fc 81       	ldd	r31, Y+4	; 0x04
     d10:	e6 5e       	subi	r30, 0xE6	; 230
     d12:	fe 4f       	sbci	r31, 0xFE	; 254
     d14:	80 81       	ld	r24, Z
     d16:	91 81       	ldd	r25, Z+1	; 0x01
     d18:	89 2b       	or	r24, r25
     d1a:	09 f4       	brne	.+2      	; 0xd1e <OS_Start+0x216>
     d1c:	42 cf       	rjmp	.-380    	; 0xba2 <OS_Start+0x9a>
     d1e:	eb 81       	ldd	r30, Y+3	; 0x03
     d20:	fc 81       	ldd	r31, Y+4	; 0x04
     d22:	ec 5f       	subi	r30, 0xFC	; 252
     d24:	fe 4f       	sbci	r31, 0xFE	; 254
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	80 83       	st	Z, r24
     d2a:	47 e1       	ldi	r20, 0x17	; 23
     d2c:	52 e0       	ldi	r21, 0x02	; 2
     d2e:	6d ed       	ldi	r22, 0xDD	; 221
     d30:	74 e1       	ldi	r23, 0x14	; 20
     d32:	85 e2       	ldi	r24, 0x25	; 37
     d34:	92 e0       	ldi	r25, 0x02	; 2
     d36:	3e d5       	rcall	.+2684   	; 0x17b4 <enqueueRQ>
     d38:	97 dd       	rcall	.-1234   	; 0x868 <Dispatch>
     d3a:	33 cf       	rjmp	.-410    	; 0xba2 <OS_Start+0x9a>
     d3c:	e5 ea       	ldi	r30, 0xA5	; 165
     d3e:	f3 e0       	ldi	r31, 0x03	; 3
     d40:	c4 01       	movw	r24, r8
     d42:	ab 81       	ldd	r26, Y+3	; 0x03
     d44:	bc 81       	ldd	r27, Y+4	; 0x04
     d46:	a4 5e       	subi	r26, 0xE4	; 228
     d48:	be 4f       	sbci	r27, 0xFE	; 254
     d4a:	6b 81       	ldd	r22, Y+3	; 0x03
     d4c:	7c 81       	ldd	r23, Y+4	; 0x04
     d4e:	2d 91       	ld	r18, X+
     d50:	3c 91       	ld	r19, X
     d52:	11 97       	sbiw	r26, 0x01	; 1
     d54:	40 81       	ld	r20, Z
     d56:	51 81       	ldd	r21, Z+1	; 0x01
     d58:	42 17       	cp	r20, r18
     d5a:	53 07       	cpc	r21, r19
     d5c:	09 f4       	brne	.+2      	; 0xd60 <OS_Start+0x258>
     d5e:	76 c2       	rjmp	.+1260   	; 0x124c <OS_Start+0x744>
     d60:	01 96       	adiw	r24, 0x01	; 1
     d62:	e2 5e       	subi	r30, 0xE2	; 226
     d64:	fe 4f       	sbci	r31, 0xFE	; 254
     d66:	80 31       	cpi	r24, 0x10	; 16
     d68:	91 05       	cpc	r25, r1
     d6a:	89 f7       	brne	.-30     	; 0xd4e <OS_Start+0x246>
     d6c:	1a cf       	rjmp	.-460    	; 0xba2 <OS_Start+0x9a>
     d6e:	8a 9d       	mul	r24, r10
     d70:	90 01       	movw	r18, r0
     d72:	8b 9d       	mul	r24, r11
     d74:	30 0d       	add	r19, r0
     d76:	9a 9d       	mul	r25, r10
     d78:	30 0d       	add	r19, r0
     d7a:	11 24       	eor	r1, r1
     d7c:	c9 01       	movw	r24, r18
     d7e:	89 57       	subi	r24, 0x79	; 121
     d80:	9d 4f       	sbci	r25, 0xFD	; 253
     d82:	fc 01       	movw	r30, r24
     d84:	e6 5e       	subi	r30, 0xE6	; 230
     d86:	fe 4f       	sbci	r31, 0xFE	; 254
     d88:	11 82       	std	Z+1, r1	; 0x01
     d8a:	10 82       	st	Z, r1
     d8c:	eb 81       	ldd	r30, Y+3	; 0x03
     d8e:	fc 81       	ldd	r31, Y+4	; 0x04
     d90:	e9 5f       	subi	r30, 0xF9	; 249
     d92:	fe 4f       	sbci	r31, 0xFE	; 254
     d94:	20 81       	ld	r18, Z
     d96:	31 81       	ldd	r19, Z+1	; 0x01
     d98:	fc 01       	movw	r30, r24
     d9a:	e9 5f       	subi	r30, 0xF9	; 249
     d9c:	fe 4f       	sbci	r31, 0xFE	; 254
     d9e:	80 81       	ld	r24, Z
     da0:	91 81       	ldd	r25, Z+1	; 0x01
     da2:	82 17       	cp	r24, r18
     da4:	93 07       	cpc	r25, r19
     da6:	08 f0       	brcs	.+2      	; 0xdaa <OS_Start+0x2a2>
     da8:	fc ce       	rjmp	.-520    	; 0xba2 <OS_Start+0x9a>
     daa:	eb 81       	ldd	r30, Y+3	; 0x03
     dac:	fc 81       	ldd	r31, Y+4	; 0x04
     dae:	ec 5f       	subi	r30, 0xFC	; 252
     db0:	fe 4f       	sbci	r31, 0xFE	; 254
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	80 83       	st	Z, r24
     db6:	47 e1       	ldi	r20, 0x17	; 23
     db8:	52 e0       	ldi	r21, 0x02	; 2
     dba:	6d ed       	ldi	r22, 0xDD	; 221
     dbc:	74 e1       	ldi	r23, 0x14	; 20
     dbe:	85 e2       	ldi	r24, 0x25	; 37
     dc0:	92 e0       	ldi	r25, 0x02	; 2
     dc2:	f8 d4       	rcall	.+2544   	; 0x17b4 <enqueueRQ>
     dc4:	51 dd       	rcall	.-1374   	; 0x868 <Dispatch>
     dc6:	ed ce       	rjmp	.-550    	; 0xba2 <OS_Start+0x9a>
     dc8:	eb 81       	ldd	r30, Y+3	; 0x03
     dca:	fc 81       	ldd	r31, Y+4	; 0x04
     dcc:	e9 5f       	subi	r30, 0xF9	; 249
     dce:	fe 4f       	sbci	r31, 0xFE	; 254
     dd0:	11 82       	std	Z+1, r1	; 0x01
     dd2:	10 82       	st	Z, r1
     dd4:	eb 81       	ldd	r30, Y+3	; 0x03
     dd6:	fc 81       	ldd	r31, Y+4	; 0x04
     dd8:	eb 5f       	subi	r30, 0xFB	; 251
     dda:	fe 4f       	sbci	r31, 0xFE	; 254
     ddc:	11 82       	std	Z+1, r1	; 0x01
     dde:	10 82       	st	Z, r1
     de0:	eb 81       	ldd	r30, Y+3	; 0x03
     de2:	fc 81       	ldd	r31, Y+4	; 0x04
     de4:	ec 5f       	subi	r30, 0xFC	; 252
     de6:	fe 4f       	sbci	r31, 0xFE	; 254
     de8:	86 e0       	ldi	r24, 0x06	; 6
     dea:	80 83       	st	Z, r24
     dec:	dc 82       	std	Y+4, r13	; 0x04
     dee:	cb 82       	std	Y+3, r12	; 0x03
     df0:	e0 91 25 02 	lds	r30, 0x0225
     df4:	f0 91 26 02 	lds	r31, 0x0226
     df8:	80 81       	ld	r24, Z
     dfa:	91 81       	ldd	r25, Z+1	; 0x01
     dfc:	ab 81       	ldd	r26, Y+3	; 0x03
     dfe:	bc 81       	ldd	r27, Y+4	; 0x04
     e00:	13 96       	adiw	r26, 0x03	; 3
     e02:	2d 91       	ld	r18, X+
     e04:	3c 91       	ld	r19, X
     e06:	14 97       	sbiw	r26, 0x04	; 4
     e08:	28 17       	cp	r18, r24
     e0a:	39 07       	cpc	r19, r25
     e0c:	39 f4       	brne	.+14     	; 0xe1c <OS_Start+0x314>
     e0e:	8d 91       	ld	r24, X+
     e10:	9c 91       	ld	r25, X
     e12:	ec 5e       	subi	r30, 0xEC	; 236
     e14:	fe 4f       	sbci	r31, 0xFE	; 254
     e16:	91 83       	std	Z+1, r25	; 0x01
     e18:	80 83       	st	Z, r24
     e1a:	57 dd       	rcall	.-1362   	; 0x8ca <Kernel_Unlock_Mutex>
     e1c:	eb 81       	ldd	r30, Y+3	; 0x03
     e1e:	fc 81       	ldd	r31, Y+4	; 0x04
     e20:	37 96       	adiw	r30, 0x07	; 7
     e22:	fc 83       	std	Y+4, r31	; 0x04
     e24:	eb 83       	std	Y+3, r30	; 0x03
     e26:	e0 17       	cp	r30, r16
     e28:	f1 07       	cpc	r31, r17
     e2a:	11 f7       	brne	.-60     	; 0xdf0 <OS_Start+0x2e8>
     e2c:	e0 91 25 02 	lds	r30, 0x0225
     e30:	f0 91 26 02 	lds	r31, 0x0226
     e34:	df 01       	movw	r26, r30
     e36:	ac 5f       	subi	r26, 0xFC	; 252
     e38:	be 4f       	sbci	r27, 0xFE	; 254
     e3a:	1c 92       	st	X, r1
     e3c:	52 96       	adiw	r26, 0x12	; 18
     e3e:	11 96       	adiw	r26, 0x01	; 1
     e40:	3c 92       	st	X, r3
     e42:	2e 92       	st	-X, r2
     e44:	1f 97       	sbiw	r26, 0x0f	; 15
     e46:	11 96       	adiw	r26, 0x01	; 1
     e48:	7c 92       	st	X, r7
     e4a:	6e 92       	st	-X, r6
     e4c:	12 97       	sbiw	r26, 0x02	; 2
     e4e:	11 96       	adiw	r26, 0x01	; 1
     e50:	7c 92       	st	X, r7
     e52:	6e 92       	st	-X, r6
     e54:	11 82       	std	Z+1, r1	; 0x01
     e56:	10 82       	st	Z, r1
     e58:	80 91 21 02 	lds	r24, 0x0221
     e5c:	90 91 22 02 	lds	r25, 0x0222
     e60:	01 97       	sbiw	r24, 0x01	; 1
     e62:	90 93 22 02 	sts	0x0222, r25
     e66:	80 93 21 02 	sts	0x0221, r24
     e6a:	fe dc       	rcall	.-1540   	; 0x868 <Dispatch>
     e6c:	9a ce       	rjmp	.-716    	; 0xba2 <OS_Start+0x9a>
     e6e:	80 91 1d 02 	lds	r24, 0x021D
     e72:	90 91 1e 02 	lds	r25, 0x021E
     e76:	08 97       	sbiw	r24, 0x08	; 8
     e78:	41 f1       	breq	.+80     	; 0xeca <OS_Start+0x3c2>
     e7a:	d6 01       	movw	r26, r12
     e7c:	12 96       	adiw	r26, 0x02	; 2
     e7e:	8c 91       	ld	r24, X
     e80:	88 23       	and	r24, r24
     e82:	89 f0       	breq	.+34     	; 0xea6 <OS_Start+0x39e>
     e84:	e8 e5       	ldi	r30, 0x58	; 88
     e86:	f2 e0       	ldi	r31, 0x02	; 2
     e88:	94 01       	movw	r18, r8
     e8a:	4b 81       	ldd	r20, Y+3	; 0x03
     e8c:	5c 81       	ldd	r21, Y+4	; 0x04
     e8e:	80 81       	ld	r24, Z
     e90:	88 23       	and	r24, r24
     e92:	61 f0       	breq	.+24     	; 0xeac <OS_Start+0x3a4>
     e94:	2f 5f       	subi	r18, 0xFF	; 255
     e96:	3f 4f       	sbci	r19, 0xFF	; 255
     e98:	37 96       	adiw	r30, 0x07	; 7
     e9a:	28 30       	cpi	r18, 0x08	; 8
     e9c:	31 05       	cpc	r19, r1
     e9e:	b9 f7       	brne	.-18     	; 0xe8e <OS_Start+0x386>
     ea0:	5c 83       	std	Y+4, r21	; 0x04
     ea2:	4b 83       	std	Y+3, r20	; 0x03
     ea4:	05 c0       	rjmp	.+10     	; 0xeb0 <OS_Start+0x3a8>
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <OS_Start+0x3a8>
     eac:	5c 83       	std	Y+4, r21	; 0x04
     eae:	4b 83       	std	Y+3, r20	; 0x03
     eb0:	c9 01       	movw	r24, r18
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	82 1b       	sub	r24, r18
     ec0:	93 0b       	sbc	r25, r19
     ec2:	81 5b       	subi	r24, 0xB1	; 177
     ec4:	9d 4f       	sbci	r25, 0xFD	; 253
     ec6:	47 dc       	rcall	.-1906   	; 0x756 <Kernel_Init_Mutex_At>
     ec8:	2c 01       	movw	r4, r24
     eca:	eb 81       	ldd	r30, Y+3	; 0x03
     ecc:	fc 81       	ldd	r31, Y+4	; 0x04
     ece:	e2 5f       	subi	r30, 0xF2	; 242
     ed0:	fe 4f       	sbci	r31, 0xFE	; 254
     ed2:	51 82       	std	Z+1, r5	; 0x01
     ed4:	40 82       	st	Z, r4
     ed6:	65 ce       	rjmp	.-822    	; 0xba2 <OS_Start+0x9a>
     ed8:	eb 81       	ldd	r30, Y+3	; 0x03
     eda:	fc 81       	ldd	r31, Y+4	; 0x04
     edc:	ec 5e       	subi	r30, 0xEC	; 236
     ede:	fe 4f       	sbci	r31, 0xFE	; 254
     ee0:	40 81       	ld	r20, Z
     ee2:	51 81       	ldd	r21, Z+1	; 0x01
     ee4:	f6 01       	movw	r30, r12
     ee6:	80 81       	ld	r24, Z
     ee8:	91 81       	ldd	r25, Z+1	; 0x01
     eea:	48 17       	cp	r20, r24
     eec:	59 07       	cpc	r21, r25
     eee:	09 f4       	brne	.+2      	; 0xef2 <OS_Start+0x3ea>
     ef0:	bf c1       	rjmp	.+894    	; 0x1270 <OS_Start+0x768>
     ef2:	c4 01       	movw	r24, r8
     ef4:	6b 81       	ldd	r22, Y+3	; 0x03
     ef6:	7c 81       	ldd	r23, Y+4	; 0x04
     ef8:	27 81       	ldd	r18, Z+7	; 0x07
     efa:	30 85       	ldd	r19, Z+8	; 0x08
     efc:	42 17       	cp	r20, r18
     efe:	53 07       	cpc	r21, r19
     f00:	09 f4       	brne	.+2      	; 0xf04 <OS_Start+0x3fc>
     f02:	b9 c1       	rjmp	.+882    	; 0x1276 <OS_Start+0x76e>
     f04:	01 96       	adiw	r24, 0x01	; 1
     f06:	37 96       	adiw	r30, 0x07	; 7
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	91 05       	cpc	r25, r1
     f0c:	a9 f7       	brne	.-22     	; 0xef8 <OS_Start+0x3f0>
     f0e:	49 ce       	rjmp	.-878    	; 0xba2 <OS_Start+0x9a>
     f10:	fc 01       	movw	r30, r24
     f12:	ee 0f       	add	r30, r30
     f14:	ff 1f       	adc	r31, r31
     f16:	ee 0f       	add	r30, r30
     f18:	ff 1f       	adc	r31, r31
     f1a:	ee 0f       	add	r30, r30
     f1c:	ff 1f       	adc	r31, r31
     f1e:	e8 1b       	sub	r30, r24
     f20:	f9 0b       	sbc	r31, r25
     f22:	e1 5b       	subi	r30, 0xB1	; 177
     f24:	fd 4f       	sbci	r31, 0xFD	; 253
     f26:	82 e0       	ldi	r24, 0x02	; 2
     f28:	82 83       	std	Z+2, r24	; 0x02
     f2a:	ab 81       	ldd	r26, Y+3	; 0x03
     f2c:	bc 81       	ldd	r27, Y+4	; 0x04
     f2e:	8d 91       	ld	r24, X+
     f30:	9c 91       	ld	r25, X
     f32:	94 83       	std	Z+4, r25	; 0x04
     f34:	83 83       	std	Z+3, r24	; 0x03
     f36:	85 81       	ldd	r24, Z+5	; 0x05
     f38:	96 81       	ldd	r25, Z+6	; 0x06
     f3a:	01 96       	adiw	r24, 0x01	; 1
     f3c:	96 83       	std	Z+6, r25	; 0x06
     f3e:	85 83       	std	Z+5, r24	; 0x05
     f40:	30 ce       	rjmp	.-928    	; 0xba2 <OS_Start+0x9a>
     f42:	fc 01       	movw	r30, r24
     f44:	ee 0f       	add	r30, r30
     f46:	ff 1f       	adc	r31, r31
     f48:	ee 0f       	add	r30, r30
     f4a:	ff 1f       	adc	r31, r31
     f4c:	ee 0f       	add	r30, r30
     f4e:	ff 1f       	adc	r31, r31
     f50:	e8 1b       	sub	r30, r24
     f52:	f9 0b       	sbc	r31, r25
     f54:	e1 5b       	subi	r30, 0xB1	; 177
     f56:	fd 4f       	sbci	r31, 0xFD	; 253
     f58:	23 81       	ldd	r18, Z+3	; 0x03
     f5a:	34 81       	ldd	r19, Z+4	; 0x04
     f5c:	eb 81       	ldd	r30, Y+3	; 0x03
     f5e:	fc 81       	ldd	r31, Y+4	; 0x04
     f60:	40 81       	ld	r20, Z
     f62:	51 81       	ldd	r21, Z+1	; 0x01
     f64:	24 17       	cp	r18, r20
     f66:	35 07       	cpc	r19, r21
     f68:	89 f4       	brne	.+34     	; 0xf8c <OS_Start+0x484>
     f6a:	fc 01       	movw	r30, r24
     f6c:	ee 0f       	add	r30, r30
     f6e:	ff 1f       	adc	r31, r31
     f70:	ee 0f       	add	r30, r30
     f72:	ff 1f       	adc	r31, r31
     f74:	ee 0f       	add	r30, r30
     f76:	ff 1f       	adc	r31, r31
     f78:	e8 1b       	sub	r30, r24
     f7a:	f9 0b       	sbc	r31, r25
     f7c:	e1 5b       	subi	r30, 0xB1	; 177
     f7e:	fd 4f       	sbci	r31, 0xFD	; 253
     f80:	85 81       	ldd	r24, Z+5	; 0x05
     f82:	96 81       	ldd	r25, Z+6	; 0x06
     f84:	01 96       	adiw	r24, 0x01	; 1
     f86:	96 83       	std	Z+6, r25	; 0x06
     f88:	85 83       	std	Z+5, r24	; 0x05
     f8a:	0b ce       	rjmp	.-1002   	; 0xba2 <OS_Start+0x9a>
     f8c:	e7 e8       	ldi	r30, 0x87	; 135
     f8e:	f2 e0       	ldi	r31, 0x02	; 2
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	6b 81       	ldd	r22, Y+3	; 0x03
     f96:	7c 81       	ldd	r23, Y+4	; 0x04
     f98:	40 81       	ld	r20, Z
     f9a:	51 81       	ldd	r21, Z+1	; 0x01
     f9c:	24 17       	cp	r18, r20
     f9e:	35 07       	cpc	r19, r21
     fa0:	19 f4       	brne	.+6      	; 0xfa8 <OS_Start+0x4a0>
     fa2:	21 15       	cp	r18, r1
     fa4:	31 05       	cpc	r19, r1
     fa6:	31 f4       	brne	.+12     	; 0xfb4 <OS_Start+0x4ac>
     fa8:	01 96       	adiw	r24, 0x01	; 1
     faa:	e2 5e       	subi	r30, 0xE2	; 226
     fac:	fe 4f       	sbci	r31, 0xFE	; 254
     fae:	80 31       	cpi	r24, 0x10	; 16
     fb0:	91 05       	cpc	r25, r1
     fb2:	91 f7       	brne	.-28     	; 0xf98 <OS_Start+0x490>
     fb4:	7c 83       	std	Y+4, r23	; 0x04
     fb6:	6b 83       	std	Y+3, r22	; 0x03
     fb8:	fb 01       	movw	r30, r22
     fba:	e9 5f       	subi	r30, 0xF9	; 249
     fbc:	fe 4f       	sbci	r31, 0xFE	; 254
     fbe:	20 81       	ld	r18, Z
     fc0:	31 81       	ldd	r19, Z+1	; 0x01
     fc2:	8a 9d       	mul	r24, r10
     fc4:	f0 01       	movw	r30, r0
     fc6:	8b 9d       	mul	r24, r11
     fc8:	f0 0d       	add	r31, r0
     fca:	9a 9d       	mul	r25, r10
     fcc:	f0 0d       	add	r31, r0
     fce:	11 24       	eor	r1, r1
     fd0:	e2 57       	subi	r30, 0x72	; 114
     fd2:	fc 4f       	sbci	r31, 0xFC	; 252
     fd4:	40 81       	ld	r20, Z
     fd6:	51 81       	ldd	r21, Z+1	; 0x01
     fd8:	24 17       	cp	r18, r20
     fda:	35 07       	cpc	r19, r21
     fdc:	80 f4       	brcc	.+32     	; 0xffe <OS_Start+0x4f6>
     fde:	fb 01       	movw	r30, r22
     fe0:	e9 5f       	subi	r30, 0xF9	; 249
     fe2:	fe 4f       	sbci	r31, 0xFE	; 254
     fe4:	20 81       	ld	r18, Z
     fe6:	31 81       	ldd	r19, Z+1	; 0x01
     fe8:	8a 9d       	mul	r24, r10
     fea:	f0 01       	movw	r30, r0
     fec:	8b 9d       	mul	r24, r11
     fee:	f0 0d       	add	r31, r0
     ff0:	9a 9d       	mul	r25, r10
     ff2:	f0 0d       	add	r31, r0
     ff4:	11 24       	eor	r1, r1
     ff6:	e2 57       	subi	r30, 0x72	; 114
     ff8:	fc 4f       	sbci	r31, 0xFC	; 252
     ffa:	31 83       	std	Z+1, r19	; 0x01
     ffc:	20 83       	st	Z, r18
     ffe:	eb 81       	ldd	r30, Y+3	; 0x03
    1000:	fc 81       	ldd	r31, Y+4	; 0x04
    1002:	ec 5f       	subi	r30, 0xFC	; 252
    1004:	fe 4f       	sbci	r31, 0xFE	; 254
    1006:	84 e0       	ldi	r24, 0x04	; 4
    1008:	80 83       	st	Z, r24
    100a:	43 e1       	ldi	r20, 0x13	; 19
    100c:	52 e0       	ldi	r21, 0x02	; 2
    100e:	6f ef       	ldi	r22, 0xFF	; 255
    1010:	74 e1       	ldi	r23, 0x14	; 20
    1012:	85 e2       	ldi	r24, 0x25	; 37
    1014:	92 e0       	ldi	r25, 0x02	; 2
    1016:	2d d3       	rcall	.+1626   	; 0x1672 <enqueueWQ>
    1018:	27 dc       	rcall	.-1970   	; 0x868 <Dispatch>
    101a:	c3 cd       	rjmp	.-1146   	; 0xba2 <OS_Start+0x9a>
    101c:	56 dc       	rcall	.-1876   	; 0x8ca <Kernel_Unlock_Mutex>
    101e:	c1 cd       	rjmp	.-1150   	; 0xba2 <OS_Start+0x9a>
    1020:	80 91 1b 02 	lds	r24, 0x021B
    1024:	90 91 1c 02 	lds	r25, 0x021C
    1028:	08 97       	sbiw	r24, 0x08	; 8
    102a:	31 f1       	breq	.+76     	; 0x1078 <OS_Start+0x570>
    102c:	d7 01       	movw	r26, r14
    102e:	12 96       	adiw	r26, 0x02	; 2
    1030:	8c 91       	ld	r24, X
    1032:	88 23       	and	r24, r24
    1034:	81 f0       	breq	.+32     	; 0x1056 <OS_Start+0x54e>
    1036:	ee e2       	ldi	r30, 0x2E	; 46
    1038:	f2 e0       	ldi	r31, 0x02	; 2
    103a:	c4 01       	movw	r24, r8
    103c:	4b 81       	ldd	r20, Y+3	; 0x03
    103e:	5c 81       	ldd	r21, Y+4	; 0x04
    1040:	20 81       	ld	r18, Z
    1042:	22 23       	and	r18, r18
    1044:	59 f0       	breq	.+22     	; 0x105c <OS_Start+0x554>
    1046:	01 96       	adiw	r24, 0x01	; 1
    1048:	35 96       	adiw	r30, 0x05	; 5
    104a:	88 30       	cpi	r24, 0x08	; 8
    104c:	91 05       	cpc	r25, r1
    104e:	c1 f7       	brne	.-16     	; 0x1040 <OS_Start+0x538>
    1050:	5c 83       	std	Y+4, r21	; 0x04
    1052:	4b 83       	std	Y+3, r20	; 0x03
    1054:	05 c0       	rjmp	.+10     	; 0x1060 <OS_Start+0x558>
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <OS_Start+0x558>
    105c:	5c 83       	std	Y+4, r21	; 0x04
    105e:	4b 83       	std	Y+3, r20	; 0x03
    1060:	9c 01       	movw	r18, r24
    1062:	22 0f       	add	r18, r18
    1064:	33 1f       	adc	r19, r19
    1066:	22 0f       	add	r18, r18
    1068:	33 1f       	adc	r19, r19
    106a:	82 0f       	add	r24, r18
    106c:	93 1f       	adc	r25, r19
    106e:	89 5d       	subi	r24, 0xD9	; 217
    1070:	9d 4f       	sbci	r25, 0xFD	; 253
    1072:	86 db       	rcall	.-2292   	; 0x780 <Kernel_Init_Event_At>
    1074:	9a 83       	std	Y+2, r25	; 0x02
    1076:	89 83       	std	Y+1, r24	; 0x01
    1078:	ab 81       	ldd	r26, Y+3	; 0x03
    107a:	bc 81       	ldd	r27, Y+4	; 0x04
    107c:	a2 5f       	subi	r26, 0xF2	; 242
    107e:	be 4f       	sbci	r27, 0xFE	; 254
    1080:	e9 81       	ldd	r30, Y+1	; 0x01
    1082:	fa 81       	ldd	r31, Y+2	; 0x02
    1084:	11 96       	adiw	r26, 0x01	; 1
    1086:	fc 93       	st	X, r31
    1088:	ee 93       	st	-X, r30
    108a:	8b cd       	rjmp	.-1258   	; 0xba2 <OS_Start+0x9a>
    108c:	eb 81       	ldd	r30, Y+3	; 0x03
    108e:	fc 81       	ldd	r31, Y+4	; 0x04
    1090:	e8 5e       	subi	r30, 0xE8	; 232
    1092:	fe 4f       	sbci	r31, 0xFE	; 254
    1094:	40 81       	ld	r20, Z
    1096:	51 81       	ldd	r21, Z+1	; 0x01
    1098:	d7 01       	movw	r26, r14
    109a:	8d 91       	ld	r24, X+
    109c:	9c 91       	ld	r25, X
    109e:	48 17       	cp	r20, r24
    10a0:	59 07       	cpc	r21, r25
    10a2:	09 f4       	brne	.+2      	; 0x10a6 <OS_Start+0x59e>
    10a4:	fa c0       	rjmp	.+500    	; 0x129a <OS_Start+0x792>
    10a6:	f7 01       	movw	r30, r14
    10a8:	c4 01       	movw	r24, r8
    10aa:	6b 81       	ldd	r22, Y+3	; 0x03
    10ac:	7c 81       	ldd	r23, Y+4	; 0x04
    10ae:	25 81       	ldd	r18, Z+5	; 0x05
    10b0:	36 81       	ldd	r19, Z+6	; 0x06
    10b2:	42 17       	cp	r20, r18
    10b4:	53 07       	cpc	r21, r19
    10b6:	09 f4       	brne	.+2      	; 0x10ba <OS_Start+0x5b2>
    10b8:	f3 c0       	rjmp	.+486    	; 0x12a0 <OS_Start+0x798>
    10ba:	01 96       	adiw	r24, 0x01	; 1
    10bc:	35 96       	adiw	r30, 0x05	; 5
    10be:	88 30       	cpi	r24, 0x08	; 8
    10c0:	91 05       	cpc	r25, r1
    10c2:	a9 f7       	brne	.-22     	; 0x10ae <OS_Start+0x5a6>
    10c4:	3d c0       	rjmp	.+122    	; 0x1140 <OS_Start+0x638>
    10c6:	fc 01       	movw	r30, r24
    10c8:	ee 0f       	add	r30, r30
    10ca:	ff 1f       	adc	r31, r31
    10cc:	ee 0f       	add	r30, r30
    10ce:	ff 1f       	adc	r31, r31
    10d0:	e8 0f       	add	r30, r24
    10d2:	f9 1f       	adc	r31, r25
    10d4:	e9 5d       	subi	r30, 0xD9	; 217
    10d6:	fd 4f       	sbci	r31, 0xFD	; 253
    10d8:	22 81       	ldd	r18, Z+2	; 0x02
    10da:	22 30       	cpi	r18, 0x02	; 2
    10dc:	69 f4       	brne	.+26     	; 0x10f8 <OS_Start+0x5f0>
    10de:	fc 01       	movw	r30, r24
    10e0:	ee 0f       	add	r30, r30
    10e2:	ff 1f       	adc	r31, r31
    10e4:	ee 0f       	add	r30, r30
    10e6:	ff 1f       	adc	r31, r31
    10e8:	8e 0f       	add	r24, r30
    10ea:	9f 1f       	adc	r25, r31
    10ec:	fc 01       	movw	r30, r24
    10ee:	e9 5d       	subi	r30, 0xD9	; 217
    10f0:	fd 4f       	sbci	r31, 0xFD	; 253
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	82 83       	std	Z+2, r24	; 0x02
    10f6:	24 c0       	rjmp	.+72     	; 0x1140 <OS_Start+0x638>
    10f8:	eb 81       	ldd	r30, Y+3	; 0x03
    10fa:	fc 81       	ldd	r31, Y+4	; 0x04
    10fc:	ea 5e       	subi	r30, 0xEA	; 234
    10fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1100:	51 83       	std	Z+1, r21	; 0x01
    1102:	40 83       	st	Z, r20
    1104:	eb 81       	ldd	r30, Y+3	; 0x03
    1106:	fc 81       	ldd	r31, Y+4	; 0x04
    1108:	20 81       	ld	r18, Z
    110a:	31 81       	ldd	r19, Z+1	; 0x01
    110c:	fc 01       	movw	r30, r24
    110e:	ee 0f       	add	r30, r30
    1110:	ff 1f       	adc	r31, r31
    1112:	ee 0f       	add	r30, r30
    1114:	ff 1f       	adc	r31, r31
    1116:	8e 0f       	add	r24, r30
    1118:	9f 1f       	adc	r25, r31
    111a:	fc 01       	movw	r30, r24
    111c:	e9 5d       	subi	r30, 0xD9	; 217
    111e:	fd 4f       	sbci	r31, 0xFD	; 253
    1120:	34 83       	std	Z+4, r19	; 0x04
    1122:	23 83       	std	Z+3, r18	; 0x03
    1124:	eb 81       	ldd	r30, Y+3	; 0x03
    1126:	fc 81       	ldd	r31, Y+4	; 0x04
    1128:	ec 5f       	subi	r30, 0xFC	; 252
    112a:	fe 4f       	sbci	r31, 0xFE	; 254
    112c:	85 e0       	ldi	r24, 0x05	; 5
    112e:	80 83       	st	Z, r24
    1130:	47 e1       	ldi	r20, 0x17	; 23
    1132:	52 e0       	ldi	r21, 0x02	; 2
    1134:	6d ed       	ldi	r22, 0xDD	; 221
    1136:	74 e1       	ldi	r23, 0x14	; 20
    1138:	85 e2       	ldi	r24, 0x25	; 37
    113a:	92 e0       	ldi	r25, 0x02	; 2
    113c:	3b d3       	rcall	.+1654   	; 0x17b4 <enqueueRQ>
    113e:	94 db       	rcall	.-2264   	; 0x868 <Dispatch>
    1140:	e0 91 25 02 	lds	r30, 0x0225
    1144:	f0 91 26 02 	lds	r31, 0x0226
    1148:	80 81       	ld	r24, Z
    114a:	91 81       	ldd	r25, Z+1	; 0x01
    114c:	02 97       	sbiw	r24, 0x02	; 2
    114e:	20 f4       	brcc	.+8      	; 0x1158 <OS_Start+0x650>
    1150:	82 e0       	ldi	r24, 0x02	; 2
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	eb d8       	rcall	.-3626   	; 0x32c <enable_LED>
    1156:	25 cd       	rjmp	.-1462   	; 0xba2 <OS_Start+0x9a>
    1158:	80 81       	ld	r24, Z
    115a:	91 81       	ldd	r25, Z+1	; 0x01
    115c:	02 97       	sbiw	r24, 0x02	; 2
    115e:	21 f4       	brne	.+8      	; 0x1168 <OS_Start+0x660>
    1160:	85 e0       	ldi	r24, 0x05	; 5
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	e3 d8       	rcall	.-3642   	; 0x32c <enable_LED>
    1166:	1d cd       	rjmp	.-1478   	; 0xba2 <OS_Start+0x9a>
    1168:	80 81       	ld	r24, Z
    116a:	91 81       	ldd	r25, Z+1	; 0x01
    116c:	03 97       	sbiw	r24, 0x03	; 3
    116e:	09 f0       	breq	.+2      	; 0x1172 <OS_Start+0x66a>
    1170:	18 cd       	rjmp	.-1488   	; 0xba2 <OS_Start+0x9a>
    1172:	86 e0       	ldi	r24, 0x06	; 6
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	da d8       	rcall	.-3660   	; 0x32c <enable_LED>
    1178:	14 cd       	rjmp	.-1496   	; 0xba2 <OS_Start+0x9a>
    117a:	eb 81       	ldd	r30, Y+3	; 0x03
    117c:	fc 81       	ldd	r31, Y+4	; 0x04
    117e:	e8 5e       	subi	r30, 0xE8	; 232
    1180:	fe 4f       	sbci	r31, 0xFE	; 254
    1182:	40 81       	ld	r20, Z
    1184:	51 81       	ldd	r21, Z+1	; 0x01
    1186:	d7 01       	movw	r26, r14
    1188:	8d 91       	ld	r24, X+
    118a:	9c 91       	ld	r25, X
    118c:	48 17       	cp	r20, r24
    118e:	59 07       	cpc	r21, r25
    1190:	09 f4       	brne	.+2      	; 0x1194 <OS_Start+0x68c>
    1192:	97 c0       	rjmp	.+302    	; 0x12c2 <OS_Start+0x7ba>
    1194:	f7 01       	movw	r30, r14
    1196:	c4 01       	movw	r24, r8
    1198:	6b 81       	ldd	r22, Y+3	; 0x03
    119a:	7c 81       	ldd	r23, Y+4	; 0x04
    119c:	25 81       	ldd	r18, Z+5	; 0x05
    119e:	36 81       	ldd	r19, Z+6	; 0x06
    11a0:	42 17       	cp	r20, r18
    11a2:	53 07       	cpc	r21, r19
    11a4:	09 f4       	brne	.+2      	; 0x11a8 <OS_Start+0x6a0>
    11a6:	90 c0       	rjmp	.+288    	; 0x12c8 <OS_Start+0x7c0>
    11a8:	01 96       	adiw	r24, 0x01	; 1
    11aa:	35 96       	adiw	r30, 0x05	; 5
    11ac:	88 30       	cpi	r24, 0x08	; 8
    11ae:	91 05       	cpc	r25, r1
    11b0:	a9 f7       	brne	.-22     	; 0x119c <OS_Start+0x694>
    11b2:	f7 cc       	rjmp	.-1554   	; 0xba2 <OS_Start+0x9a>
    11b4:	80 81       	ld	r24, Z
    11b6:	91 81       	ldd	r25, Z+1	; 0x01
    11b8:	48 17       	cp	r20, r24
    11ba:	59 07       	cpc	r21, r25
    11bc:	09 f4       	brne	.+2      	; 0x11c0 <OS_Start+0x6b8>
    11be:	97 c0       	rjmp	.+302    	; 0x12ee <OS_Start+0x7e6>
    11c0:	2f 5f       	subi	r18, 0xFF	; 255
    11c2:	3f 4f       	sbci	r19, 0xFF	; 255
    11c4:	e2 5e       	subi	r30, 0xE2	; 226
    11c6:	fe 4f       	sbci	r31, 0xFE	; 254
    11c8:	20 31       	cpi	r18, 0x10	; 16
    11ca:	31 05       	cpc	r19, r1
    11cc:	99 f7       	brne	.-26     	; 0x11b4 <OS_Start+0x6ac>
    11ce:	cb 01       	movw	r24, r22
    11d0:	fb 01       	movw	r30, r22
    11d2:	ee 0f       	add	r30, r30
    11d4:	ff 1f       	adc	r31, r31
    11d6:	ee 0f       	add	r30, r30
    11d8:	ff 1f       	adc	r31, r31
    11da:	8e 0f       	add	r24, r30
    11dc:	9f 1f       	adc	r25, r31
    11de:	fc 01       	movw	r30, r24
    11e0:	e9 5d       	subi	r30, 0xD9	; 217
    11e2:	fd 4f       	sbci	r31, 0xFD	; 253
    11e4:	82 e0       	ldi	r24, 0x02	; 2
    11e6:	82 83       	std	Z+2, r24	; 0x02
    11e8:	dc cc       	rjmp	.-1608   	; 0xba2 <OS_Start+0x9a>
    11ea:	2a 9d       	mul	r18, r10
    11ec:	f0 01       	movw	r30, r0
    11ee:	2b 9d       	mul	r18, r11
    11f0:	f0 0d       	add	r31, r0
    11f2:	3a 9d       	mul	r19, r10
    11f4:	f0 0d       	add	r31, r0
    11f6:	11 24       	eor	r1, r1
    11f8:	ef 55       	subi	r30, 0x5F	; 95
    11fa:	fc 4f       	sbci	r31, 0xFC	; 252
    11fc:	80 81       	ld	r24, Z
    11fe:	91 81       	ldd	r25, Z+1	; 0x01
    1200:	89 2b       	or	r24, r25
    1202:	09 f0       	breq	.+2      	; 0x1206 <OS_Start+0x6fe>
    1204:	ce cc       	rjmp	.-1636   	; 0xba2 <OS_Start+0x9a>
    1206:	eb 81       	ldd	r30, Y+3	; 0x03
    1208:	fc 81       	ldd	r31, Y+4	; 0x04
    120a:	ec 5f       	subi	r30, 0xFC	; 252
    120c:	fe 4f       	sbci	r31, 0xFE	; 254
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	80 83       	st	Z, r24
    1212:	47 e1       	ldi	r20, 0x17	; 23
    1214:	52 e0       	ldi	r21, 0x02	; 2
    1216:	6d ed       	ldi	r22, 0xDD	; 221
    1218:	74 e1       	ldi	r23, 0x14	; 20
    121a:	85 e2       	ldi	r24, 0x25	; 37
    121c:	92 e0       	ldi	r25, 0x02	; 2
    121e:	ca d2       	rcall	.+1428   	; 0x17b4 <enqueueRQ>
    1220:	23 db       	rcall	.-2490   	; 0x868 <Dispatch>
    1222:	bf cc       	rjmp	.-1666   	; 0xba2 <OS_Start+0x9a>
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	02 c0       	rjmp	.+4      	; 0x122e <OS_Start+0x726>
    122a:	7c 83       	std	Y+4, r23	; 0x04
    122c:	6b 83       	std	Y+3, r22	; 0x03
    122e:	8a 9d       	mul	r24, r10
    1230:	f0 01       	movw	r30, r0
    1232:	8b 9d       	mul	r24, r11
    1234:	f0 0d       	add	r31, r0
    1236:	9a 9d       	mul	r25, r10
    1238:	f0 0d       	add	r31, r0
    123a:	11 24       	eor	r1, r1
    123c:	ef 55       	subi	r30, 0x5F	; 95
    123e:	fc 4f       	sbci	r31, 0xFC	; 252
    1240:	91 82       	std	Z+1, r9	; 0x01
    1242:	80 82       	st	Z, r8
    1244:	63 cd       	rjmp	.-1338   	; 0xd0c <OS_Start+0x204>
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <OS_Start+0x748>
    124c:	7c 83       	std	Y+4, r23	; 0x04
    124e:	6b 83       	std	Y+3, r22	; 0x03
    1250:	8a 9d       	mul	r24, r10
    1252:	f0 01       	movw	r30, r0
    1254:	8b 9d       	mul	r24, r11
    1256:	f0 0d       	add	r31, r0
    1258:	9a 9d       	mul	r25, r10
    125a:	f0 0d       	add	r31, r0
    125c:	11 24       	eor	r1, r1
    125e:	ef 55       	subi	r30, 0x5F	; 95
    1260:	fc 4f       	sbci	r31, 0xFC	; 252
    1262:	20 81       	ld	r18, Z
    1264:	31 81       	ldd	r19, Z+1	; 0x01
    1266:	21 30       	cpi	r18, 0x01	; 1
    1268:	31 05       	cpc	r19, r1
    126a:	09 f0       	breq	.+2      	; 0x126e <OS_Start+0x766>
    126c:	9a cc       	rjmp	.-1740   	; 0xba2 <OS_Start+0x9a>
    126e:	7f cd       	rjmp	.-1282   	; 0xd6e <OS_Start+0x266>
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	02 c0       	rjmp	.+4      	; 0x127a <OS_Start+0x772>
    1276:	7c 83       	std	Y+4, r23	; 0x04
    1278:	6b 83       	std	Y+3, r22	; 0x03
    127a:	fc 01       	movw	r30, r24
    127c:	ee 0f       	add	r30, r30
    127e:	ff 1f       	adc	r31, r31
    1280:	ee 0f       	add	r30, r30
    1282:	ff 1f       	adc	r31, r31
    1284:	ee 0f       	add	r30, r30
    1286:	ff 1f       	adc	r31, r31
    1288:	e8 1b       	sub	r30, r24
    128a:	f9 0b       	sbc	r31, r25
    128c:	e1 5b       	subi	r30, 0xB1	; 177
    128e:	fd 4f       	sbci	r31, 0xFD	; 253
    1290:	22 81       	ldd	r18, Z+2	; 0x02
    1292:	21 30       	cpi	r18, 0x01	; 1
    1294:	09 f0       	breq	.+2      	; 0x1298 <OS_Start+0x790>
    1296:	55 ce       	rjmp	.-854    	; 0xf42 <OS_Start+0x43a>
    1298:	3b ce       	rjmp	.-906    	; 0xf10 <OS_Start+0x408>
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <OS_Start+0x79c>
    12a0:	7c 83       	std	Y+4, r23	; 0x04
    12a2:	6b 83       	std	Y+3, r22	; 0x03
    12a4:	fc 01       	movw	r30, r24
    12a6:	ee 0f       	add	r30, r30
    12a8:	ff 1f       	adc	r31, r31
    12aa:	ee 0f       	add	r30, r30
    12ac:	ff 1f       	adc	r31, r31
    12ae:	e8 0f       	add	r30, r24
    12b0:	f9 1f       	adc	r31, r25
    12b2:	e9 5d       	subi	r30, 0xD9	; 217
    12b4:	fd 4f       	sbci	r31, 0xFD	; 253
    12b6:	23 81       	ldd	r18, Z+3	; 0x03
    12b8:	34 81       	ldd	r19, Z+4	; 0x04
    12ba:	23 2b       	or	r18, r19
    12bc:	09 f0       	breq	.+2      	; 0x12c0 <OS_Start+0x7b8>
    12be:	40 cf       	rjmp	.-384    	; 0x1140 <OS_Start+0x638>
    12c0:	02 cf       	rjmp	.-508    	; 0x10c6 <OS_Start+0x5be>
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <OS_Start+0x7c4>
    12c8:	7c 83       	std	Y+4, r23	; 0x04
    12ca:	6b 83       	std	Y+3, r22	; 0x03
    12cc:	ed e9       	ldi	r30, 0x9D	; 157
    12ce:	f3 e0       	ldi	r31, 0x03	; 3
    12d0:	20 81       	ld	r18, Z
    12d2:	31 81       	ldd	r19, Z+1	; 0x01
    12d4:	42 17       	cp	r20, r18
    12d6:	53 07       	cpc	r21, r19
    12d8:	39 f0       	breq	.+14     	; 0x12e8 <OS_Start+0x7e0>
    12da:	eb eb       	ldi	r30, 0xBB	; 187
    12dc:	f4 e0       	ldi	r31, 0x04	; 4
    12de:	94 01       	movw	r18, r8
    12e0:	ab 81       	ldd	r26, Y+3	; 0x03
    12e2:	bc 81       	ldd	r27, Y+4	; 0x04
    12e4:	bc 01       	movw	r22, r24
    12e6:	66 cf       	rjmp	.-308    	; 0x11b4 <OS_Start+0x6ac>
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	03 c0       	rjmp	.+6      	; 0x12f4 <OS_Start+0x7ec>
    12ee:	bc 83       	std	Y+4, r27	; 0x04
    12f0:	ab 83       	std	Y+3, r26	; 0x03
    12f2:	cb 01       	movw	r24, r22
    12f4:	2a 9d       	mul	r18, r10
    12f6:	a0 01       	movw	r20, r0
    12f8:	2b 9d       	mul	r18, r11
    12fa:	50 0d       	add	r21, r0
    12fc:	3a 9d       	mul	r19, r10
    12fe:	50 0d       	add	r21, r0
    1300:	11 24       	eor	r1, r1
    1302:	49 57       	subi	r20, 0x79	; 121
    1304:	5d 4f       	sbci	r21, 0xFD	; 253
    1306:	fa 01       	movw	r30, r20
    1308:	ec 5f       	subi	r30, 0xFC	; 252
    130a:	fe 4f       	sbci	r31, 0xFE	; 254
    130c:	61 e0       	ldi	r22, 0x01	; 1
    130e:	60 83       	st	Z, r22
    1310:	72 96       	adiw	r30, 0x12	; 18
    1312:	31 82       	std	Z+1, r3	; 0x01
    1314:	20 82       	st	Z, r2
    1316:	fc 01       	movw	r30, r24
    1318:	ee 0f       	add	r30, r30
    131a:	ff 1f       	adc	r31, r31
    131c:	ee 0f       	add	r30, r30
    131e:	ff 1f       	adc	r31, r31
    1320:	8e 0f       	add	r24, r30
    1322:	9f 1f       	adc	r25, r31
    1324:	fc 01       	movw	r30, r24
    1326:	e9 5d       	subi	r30, 0xD9	; 217
    1328:	fd 4f       	sbci	r31, 0xFD	; 253
    132a:	14 82       	std	Z+4, r1	; 0x04
    132c:	13 82       	std	Z+3, r1	; 0x03
    132e:	eb 81       	ldd	r30, Y+3	; 0x03
    1330:	fc 81       	ldd	r31, Y+4	; 0x04
    1332:	e9 5f       	subi	r30, 0xF9	; 249
    1334:	fe 4f       	sbci	r31, 0xFE	; 254
    1336:	80 81       	ld	r24, Z
    1338:	91 81       	ldd	r25, Z+1	; 0x01
    133a:	fa 01       	movw	r30, r20
    133c:	e9 5f       	subi	r30, 0xF9	; 249
    133e:	fe 4f       	sbci	r31, 0xFE	; 254
    1340:	40 81       	ld	r20, Z
    1342:	51 81       	ldd	r21, Z+1	; 0x01
    1344:	48 17       	cp	r20, r24
    1346:	59 07       	cpc	r21, r25
    1348:	08 f4       	brcc	.+2      	; 0x134c <OS_Start+0x844>
    134a:	4f cf       	rjmp	.-354    	; 0x11ea <OS_Start+0x6e2>
    134c:	2a cc       	rjmp	.-1964   	; 0xba2 <OS_Start+0x9a>
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	df 91       	pop	r29
    1358:	cf 91       	pop	r28
    135a:	1f 91       	pop	r17
    135c:	0f 91       	pop	r16
    135e:	ff 90       	pop	r15
    1360:	ef 90       	pop	r14
    1362:	df 90       	pop	r13
    1364:	cf 90       	pop	r12
    1366:	bf 90       	pop	r11
    1368:	af 90       	pop	r10
    136a:	9f 90       	pop	r9
    136c:	8f 90       	pop	r8
    136e:	7f 90       	pop	r7
    1370:	6f 90       	pop	r6
    1372:	5f 90       	pop	r5
    1374:	4f 90       	pop	r4
    1376:	3f 90       	pop	r3
    1378:	2f 90       	pop	r2
    137a:	08 95       	ret

0000137c <Task_Create>:
    137c:	20 91 23 02 	lds	r18, 0x0223
    1380:	30 91 24 02 	lds	r19, 0x0224
    1384:	23 2b       	or	r18, r19
    1386:	f1 f0       	breq	.+60     	; 0x13c4 <Task_Create+0x48>
    1388:	f8 94       	cli
    138a:	20 91 25 02 	lds	r18, 0x0225
    138e:	30 91 26 02 	lds	r19, 0x0226
    1392:	f9 01       	movw	r30, r18
    1394:	e3 5f       	subi	r30, 0xF3	; 243
    1396:	fe 4f       	sbci	r31, 0xFE	; 254
    1398:	a1 e0       	ldi	r26, 0x01	; 1
    139a:	a0 83       	st	Z, r26
    139c:	32 97       	sbiw	r30, 0x02	; 2
    139e:	91 83       	std	Z+1, r25	; 0x01
    13a0:	80 83       	st	Z, r24
    13a2:	36 97       	sbiw	r30, 0x06	; 6
    13a4:	71 83       	std	Z+1, r23	; 0x01
    13a6:	60 83       	st	Z, r22
    13a8:	34 96       	adiw	r30, 0x04	; 4
    13aa:	51 83       	std	Z+1, r21	; 0x01
    13ac:	40 83       	st	Z, r20
    13ae:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    13b2:	e0 91 25 02 	lds	r30, 0x0225
    13b6:	f0 91 26 02 	lds	r31, 0x0226
    13ba:	e2 5f       	subi	r30, 0xF2	; 242
    13bc:	fe 4f       	sbci	r31, 0xFE	; 254
    13be:	80 81       	ld	r24, Z
    13c0:	91 81       	ldd	r25, Z+1	; 0x01
    13c2:	08 95       	ret
    13c4:	98 c9       	rjmp	.-3280   	; 0x6f6 <Kernel_Create_Task>
    13c6:	08 95       	ret

000013c8 <Task_Next>:
    13c8:	80 91 23 02 	lds	r24, 0x0223
    13cc:	90 91 24 02 	lds	r25, 0x0224
    13d0:	89 2b       	or	r24, r25
    13d2:	59 f0       	breq	.+22     	; 0x13ea <Task_Next+0x22>
    13d4:	f8 94       	cli
    13d6:	e0 91 25 02 	lds	r30, 0x0225
    13da:	f0 91 26 02 	lds	r31, 0x0226
    13de:	e3 5f       	subi	r30, 0xF3	; 243
    13e0:	fe 4f       	sbci	r31, 0xFE	; 254
    13e2:	82 e0       	ldi	r24, 0x02	; 2
    13e4:	80 83       	st	Z, r24
    13e6:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <Enter_Kernel>
    13ea:	08 95       	ret

000013ec <setup>:
  * Setup pins and timers
  */
void setup() {
	/** For testing */
	/** pin 47 */
	init_LED_PORTL_pin2();
    13ec:	0e 94 84 01 	call	0x308	; 0x308 <init_LED_PORTL_pin2>

	/** pin 43 */
	init_LED_PORTL_pin6();
    13f0:	0e 94 90 01 	call	0x320	; 0x320 <init_LED_PORTL_pin6>

	/** pin 44 */
	init_LED_PORTL_pin5();
    13f4:	0e 94 8a 01 	call	0x314	; 0x314 <init_LED_PORTL_pin5>

	/** pin 49 */
	init_LED_PORTL_pin0();
    13f8:	0e 94 78 01 	call	0x2f0	; 0x2f0 <init_LED_PORTL_pin0>

	/** pin 48 */
	init_LED_PORTL_pin1();
    13fc:	0e 94 7e 01 	call	0x2fc	; 0x2fc <init_LED_PORTL_pin1>

	/** initialize Timer1 16 bit timer */
	Disable_Interrupt();
    1400:	f8 94       	cli

	/** Timer 1 */
	TCCR1A = 0;                 /** Set TCCR1A register to 0 */
    1402:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;                 /** Set TCCR1B register to 0 */
    1406:	e1 e8       	ldi	r30, 0x81	; 129
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	10 82       	st	Z, r1

	TCNT1 = 0;                  /** Initialize counter to 0 */
    140c:	10 92 85 00 	sts	0x0085, r1
    1410:	10 92 84 00 	sts	0x0084, r1

	OCR1A = 624;                /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
    1414:	80 e7       	ldi	r24, 0x70	; 112
    1416:	92 e0       	ldi	r25, 0x02	; 2
    1418:	90 93 89 00 	sts	0x0089, r25
    141c:	80 93 88 00 	sts	0x0088, r24

	TCCR1B |= (1 << WGM12);     /** Turns on CTC mode (TOP is now OCR1A) */
    1420:	80 81       	ld	r24, Z
    1422:	88 60       	ori	r24, 0x08	; 8
    1424:	80 83       	st	Z, r24

	TCCR1B |= (1 << CS12);      /** Prescaler 256 */
    1426:	80 81       	ld	r24, Z
    1428:	84 60       	ori	r24, 0x04	; 4
    142a:	80 83       	st	Z, r24

	TIMSK1 |= (1 << OCIE1A);    /** Enable timer compare interrupt */
    142c:	ef e6       	ldi	r30, 0x6F	; 111
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	82 60       	ori	r24, 0x02	; 2
    1434:	80 83       	st	Z, r24

	/** Timer 3 */
	TCCR3A = 0;                 /** Set TCCR0A register to 0 */
    1436:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0;                 /** Set TCCR0B register to 0 */
    143a:	e1 e9       	ldi	r30, 0x91	; 145
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	10 82       	st	Z, r1

	TCNT3 = 0;                  /** Initialize counter to 0 */
    1440:	10 92 95 00 	sts	0x0095, r1
    1444:	10 92 94 00 	sts	0x0094, r1

	OCR3A = 62499;              /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
    1448:	83 e2       	ldi	r24, 0x23	; 35
    144a:	94 ef       	ldi	r25, 0xF4	; 244
    144c:	90 93 99 00 	sts	0x0099, r25
    1450:	80 93 98 00 	sts	0x0098, r24

	TCCR3B |= (1 << WGM32);     /** Turns on CTC mode (TOP is now OCR1A) */
    1454:	80 81       	ld	r24, Z
    1456:	88 60       	ori	r24, 0x08	; 8
    1458:	80 83       	st	Z, r24

	TCCR3B |= (1 << CS32);      /** Prescaler 1024 */
    145a:	80 81       	ld	r24, Z
    145c:	84 60       	ori	r24, 0x04	; 4
    145e:	80 83       	st	Z, r24

	TIMSK3 = (1 << OCIE3A);
    1460:	82 e0       	ldi	r24, 0x02	; 2
    1462:	80 93 71 00 	sts	0x0071, r24

	Enable_Interrupt();
    1466:	78 94       	sei
    1468:	08 95       	ret

0000146a <__vector_17>:
}

/**
  * ISR for timer1
  */
ISR(TIMER1_COMPA_vect) {
    146a:	1f 92       	push	r1
    146c:	0f 92       	push	r0
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	0f 92       	push	r0
    1472:	11 24       	eor	r1, r1
    1474:	0b b6       	in	r0, 0x3b	; 59
    1476:	0f 92       	push	r0
    1478:	df 92       	push	r13
    147a:	ef 92       	push	r14
    147c:	ff 92       	push	r15
    147e:	0f 93       	push	r16
    1480:	1f 93       	push	r17
    1482:	2f 93       	push	r18
    1484:	3f 93       	push	r19
    1486:	4f 93       	push	r20
    1488:	5f 93       	push	r21
    148a:	6f 93       	push	r22
    148c:	7f 93       	push	r23
    148e:	8f 93       	push	r24
    1490:	9f 93       	push	r25
    1492:	af 93       	push	r26
    1494:	bf 93       	push	r27
    1496:	ef 93       	push	r30
    1498:	ff 93       	push	r31
    149a:	cf 93       	push	r28
    149c:	df 93       	push	r29
    149e:	00 d0       	rcall	.+0      	; 0x14a0 <__vector_17+0x36>
    14a0:	1f 92       	push	r1
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
    14a6:	80 91 15 02 	lds	r24, 0x0215
    14aa:	90 91 16 02 	lds	r25, 0x0216
    14ae:	01 97       	sbiw	r24, 0x01	; 1
    14b0:	9a 83       	std	Y+2, r25	; 0x02
    14b2:	89 83       	std	Y+1, r24	; 0x01
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	9a 81       	ldd	r25, Y+2	; 0x02
    14b8:	99 23       	and	r25, r25
    14ba:	0c f4       	brge	.+2      	; 0x14be <__vector_17+0x54>
    14bc:	8f c0       	rjmp	.+286    	; 0x15dc <__vector_17+0x172>
		if ((SleepQueue[i]->wakeTickOverflow <= tickOverflowCount) && (SleepQueue[i]->wakeTick <= (TCNT3/625))) {
    14be:	e9 81       	ldd	r30, Y+1	; 0x01
    14c0:	fa 81       	ldd	r31, Y+2	; 0x02
    14c2:	ee 0f       	add	r30, r30
    14c4:	ff 1f       	adc	r31, r31
    14c6:	e3 54       	subi	r30, 0x43	; 67
    14c8:	fb 4e       	sbci	r31, 0xEB	; 235
    14ca:	01 90       	ld	r0, Z+
    14cc:	f0 81       	ld	r31, Z
    14ce:	e0 2d       	mov	r30, r0
    14d0:	e0 5f       	subi	r30, 0xF0	; 240
    14d2:	fe 4f       	sbci	r31, 0xFE	; 254
    14d4:	20 81       	ld	r18, Z
    14d6:	31 81       	ldd	r19, Z+1	; 0x01
    14d8:	80 91 19 02 	lds	r24, 0x0219
    14dc:	90 91 1a 02 	lds	r25, 0x021A
    14e0:	82 17       	cp	r24, r18
    14e2:	93 07       	cpc	r25, r19
    14e4:	08 f4       	brcc	.+2      	; 0x14e8 <__vector_17+0x7e>
    14e6:	7a c0       	rjmp	.+244    	; 0x15dc <__vector_17+0x172>
    14e8:	e9 81       	ldd	r30, Y+1	; 0x01
    14ea:	fa 81       	ldd	r31, Y+2	; 0x02
    14ec:	ee 0f       	add	r30, r30
    14ee:	ff 1f       	adc	r31, r31
    14f0:	e3 54       	subi	r30, 0x43	; 67
    14f2:	fb 4e       	sbci	r31, 0xEB	; 235
    14f4:	01 90       	ld	r0, Z+
    14f6:	f0 81       	ld	r31, Z
    14f8:	e0 2d       	mov	r30, r0
    14fa:	ee 5e       	subi	r30, 0xEE	; 238
    14fc:	fe 4f       	sbci	r31, 0xFE	; 254
    14fe:	20 81       	ld	r18, Z
    1500:	31 81       	ldd	r19, Z+1	; 0x01
    1502:	80 91 94 00 	lds	r24, 0x0094
    1506:	90 91 95 00 	lds	r25, 0x0095
    150a:	61 e7       	ldi	r22, 0x71	; 113
    150c:	72 e0       	ldi	r23, 0x02	; 2
    150e:	e7 d5       	rcall	.+3022   	; 0x20de <__udivmodhi4>
    1510:	62 17       	cp	r22, r18
    1512:	73 07       	cpc	r23, r19
    1514:	60 f5       	brcc	.+88     	; 0x156e <__vector_17+0x104>
    1516:	62 c0       	rjmp	.+196    	; 0x15dc <__vector_17+0x172>
    1518:	e9 81       	ldd	r30, Y+1	; 0x01
    151a:	fa 81       	ldd	r31, Y+2	; 0x02
    151c:	ee 0f       	add	r30, r30
    151e:	ff 1f       	adc	r31, r31
    1520:	e3 54       	subi	r30, 0x43	; 67
    1522:	fb 4e       	sbci	r31, 0xEB	; 235
    1524:	01 90       	ld	r0, Z+
    1526:	f0 81       	ld	r31, Z
    1528:	e0 2d       	mov	r30, r0
    152a:	e0 5f       	subi	r30, 0xF0	; 240
    152c:	fe 4f       	sbci	r31, 0xFE	; 254
    152e:	20 81       	ld	r18, Z
    1530:	31 81       	ldd	r19, Z+1	; 0x01
    1532:	80 91 19 02 	lds	r24, 0x0219
    1536:	90 91 1a 02 	lds	r25, 0x021A
    153a:	82 17       	cp	r24, r18
    153c:	93 07       	cpc	r25, r19
    153e:	08 f4       	brcc	.+2      	; 0x1542 <__vector_17+0xd8>
    1540:	4d c0       	rjmp	.+154    	; 0x15dc <__vector_17+0x172>
    1542:	e9 81       	ldd	r30, Y+1	; 0x01
    1544:	fa 81       	ldd	r31, Y+2	; 0x02
    1546:	ee 0f       	add	r30, r30
    1548:	ff 1f       	adc	r31, r31
    154a:	e3 54       	subi	r30, 0x43	; 67
    154c:	fb 4e       	sbci	r31, 0xEB	; 235
    154e:	01 90       	ld	r0, Z+
    1550:	f0 81       	ld	r31, Z
    1552:	e0 2d       	mov	r30, r0
    1554:	ee 5e       	subi	r30, 0xEE	; 238
    1556:	fe 4f       	sbci	r31, 0xFE	; 254
    1558:	20 81       	ld	r18, Z
    155a:	31 81       	ldd	r19, Z+1	; 0x01
    155c:	f7 01       	movw	r30, r14
    155e:	80 81       	ld	r24, Z
    1560:	91 81       	ldd	r25, Z+1	; 0x01
    1562:	b8 01       	movw	r22, r16
    1564:	bc d5       	rcall	.+2936   	; 0x20de <__udivmodhi4>
    1566:	62 17       	cp	r22, r18
    1568:	73 07       	cpc	r23, r19
    156a:	50 f4       	brcc	.+20     	; 0x1580 <__vector_17+0x116>
    156c:	37 c0       	rjmp	.+110    	; 0x15dc <__vector_17+0x172>
			volatile PD *p = dequeue(&SleepQueue, &SQCount);
			p->state = READY;
    156e:	dd 24       	eor	r13, r13
    1570:	d3 94       	inc	r13
ISR(TIMER1_COMPA_vect) {

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
		if ((SleepQueue[i]->wakeTickOverflow <= tickOverflowCount) && (SleepQueue[i]->wakeTick <= (TCNT3/625))) {
    1572:	0f 2e       	mov	r0, r31
    1574:	f4 e9       	ldi	r31, 0x94	; 148
    1576:	ef 2e       	mov	r14, r31
    1578:	f1 2c       	mov	r15, r1
    157a:	f0 2d       	mov	r31, r0
    157c:	01 e7       	ldi	r16, 0x71	; 113
    157e:	12 e0       	ldi	r17, 0x02	; 2
			volatile PD *p = dequeue(&SleepQueue, &SQCount);
    1580:	65 e1       	ldi	r22, 0x15	; 21
    1582:	72 e0       	ldi	r23, 0x02	; 2
    1584:	8d eb       	ldi	r24, 0xBD	; 189
    1586:	94 e1       	ldi	r25, 0x14	; 20
    1588:	38 d2       	rcall	.+1136   	; 0x19fa <dequeue>
    158a:	9c 83       	std	Y+4, r25	; 0x04
    158c:	8b 83       	std	Y+3, r24	; 0x03
			p->state = READY;
    158e:	fc 01       	movw	r30, r24
    1590:	ec 5f       	subi	r30, 0xFC	; 252
    1592:	fe 4f       	sbci	r31, 0xFE	; 254
    1594:	d0 82       	st	Z, r13
			enqueueRQ(&p, &ReadyQueue, &RQCount);
    1596:	47 e1       	ldi	r20, 0x17	; 23
    1598:	52 e0       	ldi	r21, 0x02	; 2
    159a:	6d ed       	ldi	r22, 0xDD	; 221
    159c:	74 e1       	ldi	r23, 0x14	; 20
    159e:	ce 01       	movw	r24, r28
    15a0:	03 96       	adiw	r24, 0x03	; 3
    15a2:	08 d1       	rcall	.+528    	; 0x17b4 <enqueueRQ>
			if (p->inheritedPy < Cp->inheritedPy) {
    15a4:	eb 81       	ldd	r30, Y+3	; 0x03
    15a6:	fc 81       	ldd	r31, Y+4	; 0x04
    15a8:	e9 5f       	subi	r30, 0xF9	; 249
    15aa:	fe 4f       	sbci	r31, 0xFE	; 254
    15ac:	20 81       	ld	r18, Z
    15ae:	31 81       	ldd	r19, Z+1	; 0x01
    15b0:	e0 91 25 02 	lds	r30, 0x0225
    15b4:	f0 91 26 02 	lds	r31, 0x0226
    15b8:	e9 5f       	subi	r30, 0xF9	; 249
    15ba:	fe 4f       	sbci	r31, 0xFE	; 254
    15bc:	80 81       	ld	r24, Z
    15be:	91 81       	ldd	r25, Z+1	; 0x01
    15c0:	28 17       	cp	r18, r24
    15c2:	39 07       	cpc	r19, r25
    15c4:	08 f4       	brcc	.+2      	; 0x15c8 <__vector_17+0x15e>
				Task_Next();
    15c6:	00 df       	rcall	.-512    	; 0x13c8 <Task_Next>
  */
ISR(TIMER1_COMPA_vect) {

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	9a 81       	ldd	r25, Y+2	; 0x02
    15cc:	01 97       	sbiw	r24, 0x01	; 1
    15ce:	9a 83       	std	Y+2, r25	; 0x02
    15d0:	89 83       	std	Y+1, r24	; 0x01
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	9a 81       	ldd	r25, Y+2	; 0x02
    15d6:	99 23       	and	r25, r25
    15d8:	0c f0       	brlt	.+2      	; 0x15dc <__vector_17+0x172>
    15da:	9e cf       	rjmp	.-196    	; 0x1518 <__vector_17+0xae>
			break;
		}
	}

	//Task_Next();
}
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	df 91       	pop	r29
    15e6:	cf 91       	pop	r28
    15e8:	ff 91       	pop	r31
    15ea:	ef 91       	pop	r30
    15ec:	bf 91       	pop	r27
    15ee:	af 91       	pop	r26
    15f0:	9f 91       	pop	r25
    15f2:	8f 91       	pop	r24
    15f4:	7f 91       	pop	r23
    15f6:	6f 91       	pop	r22
    15f8:	5f 91       	pop	r21
    15fa:	4f 91       	pop	r20
    15fc:	3f 91       	pop	r19
    15fe:	2f 91       	pop	r18
    1600:	1f 91       	pop	r17
    1602:	0f 91       	pop	r16
    1604:	ff 90       	pop	r15
    1606:	ef 90       	pop	r14
    1608:	df 90       	pop	r13
    160a:	0f 90       	pop	r0
    160c:	0b be       	out	0x3b, r0	; 59
    160e:	0f 90       	pop	r0
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	0f 90       	pop	r0
    1614:	1f 90       	pop	r1
    1616:	18 95       	reti

00001618 <__vector_32>:

/**
  * ISR for timer3
  */
ISR(TIMER3_COMPA_vect) {
    1618:	1f 92       	push	r1
    161a:	0f 92       	push	r0
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	0f 92       	push	r0
    1620:	11 24       	eor	r1, r1
    1622:	8f 93       	push	r24
    1624:	9f 93       	push	r25
	tickOverflowCount += 1;
    1626:	80 91 19 02 	lds	r24, 0x0219
    162a:	90 91 1a 02 	lds	r25, 0x021A
    162e:	01 96       	adiw	r24, 0x01	; 1
    1630:	90 93 1a 02 	sts	0x021A, r25
    1634:	80 93 19 02 	sts	0x0219, r24
}
    1638:	9f 91       	pop	r25
    163a:	8f 91       	pop	r24
    163c:	0f 90       	pop	r0
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	0f 90       	pop	r0
    1642:	1f 90       	pop	r1
    1644:	18 95       	reti

00001646 <Basic_Init>:

void Basic_Init() {
	Roomba_Init();
    1646:	02 d3       	rcall	.+1540   	; 0x1c4c <Roomba_Init>
	adc_init();
    1648:	0e 94 4b 01 	call	0x296	; 0x296 <adc_init>
	//portL2_Mutex = Mutex_Init();
	//portL6_Mutex = Mutex_Init();
	//e1 = Event_Init();
	//e2 = Event_Init();
	DDRD |= (1<<PD7);
    164c:	57 9a       	sbi	0x0a, 7	; 10
	DDRG |= (1<<PG2);
    164e:	9a 9a       	sbi	0x13, 2	; 19
	PORTD &= ~(1<<PD7);
    1650:	5f 98       	cbi	0x0b, 7	; 11
	PORTG &= ~(1<<PG2);
    1652:	a2 98       	cbi	0x14, 2	; 20
	Task_Terminate();
    1654:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <Task_Terminate>
    1658:	08 95       	ret

0000165a <main>:

/**
  * This function boots the OS and creates the first task: a_main
  */
void main() {
	setup();
    165a:	c8 de       	rcall	.-624    	; 0x13ec <setup>
	
	OS_Init();
    165c:	a8 d8       	rcall	.-3760   	; 0x7ae <OS_Init>
	Basic_Init();
    165e:	f3 df       	rcall	.-26     	; 0x1646 <Basic_Init>
	Task_Create(a_main, 0, 1);
    1660:	41 e0       	ldi	r20, 0x01	; 1
    1662:	50 e0       	ldi	r21, 0x00	; 0
    1664:	60 e0       	ldi	r22, 0x00	; 0
    1666:	70 e0       	ldi	r23, 0x00	; 0
    1668:	86 ec       	ldi	r24, 0xC6	; 198
    166a:	92 e0       	ldi	r25, 0x02	; 2
    166c:	87 de       	rcall	.-754    	; 0x137c <Task_Create>
	OS_Start();
    166e:	4c ca       	rjmp	.-2920   	; 0xb08 <OS_Start>
    1670:	08 95       	ret

00001672 <enqueueWQ>:
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
}

void enqueueWQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    1672:	cf 93       	push	r28
    1674:	df 93       	push	r29
    1676:	ea 01       	movw	r28, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    1678:	28 81       	ld	r18, Y
    167a:	39 81       	ldd	r19, Y+1	; 0x01
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
}

void enqueueWQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    167c:	2f 30       	cpi	r18, 0x0F	; 15
    167e:	31 05       	cpc	r19, r1
    1680:	29 f1       	breq	.+74     	; 0x16cc <enqueueWQ+0x5a>
        return;
    }

    int i = (*QCount) - 1;
    1682:	e8 81       	ld	r30, Y
    1684:	f9 81       	ldd	r31, Y+1	; 0x01
    1686:	9f 01       	movw	r18, r30
    1688:	21 50       	subi	r18, 0x01	; 1
    168a:	31 09       	sbc	r19, r1

    while(i >= 0) {
    168c:	72 f0       	brmi	.+28     	; 0x16aa <enqueueWQ+0x38>
    168e:	ee 0f       	add	r30, r30
    1690:	ff 1f       	adc	r31, r31
    1692:	e6 0f       	add	r30, r22
    1694:	f7 1f       	adc	r31, r23
    1696:	db 01       	movw	r26, r22
        Queue[i+1] = Queue[i];
    1698:	32 91       	ld	r19, -Z
    169a:	22 91       	ld	r18, -Z
    169c:	33 83       	std	Z+3, r19	; 0x03
    169e:	22 83       	std	Z+2, r18	; 0x02
        return;
    }

    int i = (*QCount) - 1;

    while(i >= 0) {
    16a0:	ea 17       	cp	r30, r26
    16a2:	fb 07       	cpc	r31, r27
    16a4:	c9 f7       	brne	.-14     	; 0x1698 <enqueueWQ+0x26>
        Queue[i+1] = Queue[i];
        i--;
    16a6:	2f ef       	ldi	r18, 0xFF	; 255
    16a8:	3f ef       	ldi	r19, 0xFF	; 255
    }

    Queue[i+1] = *p;
    16aa:	fc 01       	movw	r30, r24
    16ac:	80 81       	ld	r24, Z
    16ae:	91 81       	ldd	r25, Z+1	; 0x01
    16b0:	2f 5f       	subi	r18, 0xFF	; 255
    16b2:	3f 4f       	sbci	r19, 0xFF	; 255
    16b4:	22 0f       	add	r18, r18
    16b6:	33 1f       	adc	r19, r19
    16b8:	fb 01       	movw	r30, r22
    16ba:	e2 0f       	add	r30, r18
    16bc:	f3 1f       	adc	r31, r19
    16be:	91 83       	std	Z+1, r25	; 0x01
    16c0:	80 83       	st	Z, r24
    (*QCount)++;
    16c2:	88 81       	ld	r24, Y
    16c4:	99 81       	ldd	r25, Y+1	; 0x01
    16c6:	01 96       	adiw	r24, 0x01	; 1
    16c8:	99 83       	std	Y+1, r25	; 0x01
    16ca:	88 83       	st	Y, r24
}
    16cc:	df 91       	pop	r29
    16ce:	cf 91       	pop	r28
    16d0:	08 95       	ret

000016d2 <enqueueSQ>:

void enqueueSQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    16d2:	cf 92       	push	r12
    16d4:	df 92       	push	r13
    16d6:	ef 92       	push	r14
    16d8:	ff 92       	push	r15
    16da:	0f 93       	push	r16
    16dc:	1f 93       	push	r17
    16de:	cf 93       	push	r28
    16e0:	df 93       	push	r29

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    16e2:	ea 01       	movw	r28, r20
    16e4:	28 81       	ld	r18, Y
    16e6:	39 81       	ldd	r19, Y+1	; 0x01
    Queue[i+1] = *p;
    (*QCount)++;
}

void enqueueSQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    16e8:	2f 30       	cpi	r18, 0x0F	; 15
    16ea:	31 05       	cpc	r19, r1
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <enqueueSQ+0x1e>
    16ee:	59 c0       	rjmp	.+178    	; 0x17a2 <enqueueSQ+0xd0>
        return;
    }

    int i = (*QCount) - 1;
    16f0:	a8 81       	ld	r26, Y
    16f2:	b9 81       	ldd	r27, Y+1	; 0x01
    16f4:	11 97       	sbiw	r26, 0x01	; 1

    volatile PD *new = *p;
    16f6:	fc 01       	movw	r30, r24
    16f8:	c0 80       	ld	r12, Z
    16fa:	d1 80       	ldd	r13, Z+1	; 0x01

    volatile PD *temp = Queue[i];
    16fc:	fd 01       	movw	r30, r26
    16fe:	ee 0f       	add	r30, r30
    1700:	ff 1f       	adc	r31, r31
    1702:	eb 01       	movw	r28, r22
    1704:	ce 0f       	add	r28, r30
    1706:	df 1f       	adc	r29, r31
    1708:	28 81       	ld	r18, Y
    170a:	39 81       	ldd	r19, Y+1	; 0x01

    while(i >= 0 && ((new->wakeTickOverflow > temp->wakeTickOverflow) || ((new->wakeTickOverflow >= temp->wakeTickOverflow) && (new->wakeTick >= temp->wakeTick)))) {
    170c:	bb 23       	and	r27, r27
    170e:	cc f1       	brlt	.+114    	; 0x1782 <enqueueSQ+0xb0>
    1710:	fe 01       	movw	r30, r28
    1712:	76 01       	movw	r14, r12
    1714:	c0 ef       	ldi	r28, 0xF0	; 240
    1716:	ec 1a       	sub	r14, r28
    1718:	ce ef       	ldi	r28, 0xFE	; 254
    171a:	fc 0a       	sbc	r15, r28
    171c:	de ee       	ldi	r29, 0xEE	; 238
    171e:	cd 1a       	sub	r12, r29
    1720:	de ef       	ldi	r29, 0xFE	; 254
    1722:	dd 0a       	sbc	r13, r29
    1724:	0b c0       	rjmp	.+22     	; 0x173c <enqueueSQ+0x6a>
        Queue[i+1] = Queue[i];
    1726:	20 81       	ld	r18, Z
    1728:	31 81       	ldd	r19, Z+1	; 0x01
    172a:	33 83       	std	Z+3, r19	; 0x03
    172c:	22 83       	std	Z+2, r18	; 0x02
        i--;
    172e:	11 97       	sbiw	r26, 0x01	; 1
        temp = Queue[i];
    1730:	32 91       	ld	r19, -Z
    1732:	22 91       	ld	r18, -Z

    volatile PD *new = *p;

    volatile PD *temp = Queue[i];

    while(i >= 0 && ((new->wakeTickOverflow > temp->wakeTickOverflow) || ((new->wakeTickOverflow >= temp->wakeTickOverflow) && (new->wakeTick >= temp->wakeTick)))) {
    1734:	af 3f       	cpi	r26, 0xFF	; 255
    1736:	cf ef       	ldi	r28, 0xFF	; 255
    1738:	bc 07       	cpc	r27, r28
    173a:	19 f1       	breq	.+70     	; 0x1782 <enqueueSQ+0xb0>
    173c:	e7 01       	movw	r28, r14
    173e:	08 81       	ld	r16, Y
    1740:	19 81       	ldd	r17, Y+1	; 0x01
    1742:	e9 01       	movw	r28, r18
    1744:	c0 5f       	subi	r28, 0xF0	; 240
    1746:	de 4f       	sbci	r29, 0xFE	; 254
    1748:	09 90       	ld	r0, Y+
    174a:	d8 81       	ld	r29, Y
    174c:	c0 2d       	mov	r28, r0
    174e:	c0 17       	cp	r28, r16
    1750:	d1 07       	cpc	r29, r17
    1752:	48 f3       	brcs	.-46     	; 0x1726 <enqueueSQ+0x54>
    1754:	e7 01       	movw	r28, r14
    1756:	08 81       	ld	r16, Y
    1758:	19 81       	ldd	r17, Y+1	; 0x01
    175a:	e9 01       	movw	r28, r18
    175c:	c0 5f       	subi	r28, 0xF0	; 240
    175e:	de 4f       	sbci	r29, 0xFE	; 254
    1760:	09 90       	ld	r0, Y+
    1762:	d8 81       	ld	r29, Y
    1764:	c0 2d       	mov	r28, r0
    1766:	0c 17       	cp	r16, r28
    1768:	1d 07       	cpc	r17, r29
    176a:	58 f0       	brcs	.+22     	; 0x1782 <enqueueSQ+0xb0>
    176c:	e6 01       	movw	r28, r12
    176e:	08 81       	ld	r16, Y
    1770:	19 81       	ldd	r17, Y+1	; 0x01
    1772:	2e 5e       	subi	r18, 0xEE	; 238
    1774:	3e 4f       	sbci	r19, 0xFE	; 254
    1776:	e9 01       	movw	r28, r18
    1778:	28 81       	ld	r18, Y
    177a:	39 81       	ldd	r19, Y+1	; 0x01
    177c:	02 17       	cp	r16, r18
    177e:	13 07       	cpc	r17, r19
    1780:	90 f6       	brcc	.-92     	; 0x1726 <enqueueSQ+0x54>
        Queue[i+1] = Queue[i];
        i--;
        temp = Queue[i];
    }

    Queue[i+1] = *p;
    1782:	fc 01       	movw	r30, r24
    1784:	80 81       	ld	r24, Z
    1786:	91 81       	ldd	r25, Z+1	; 0x01
    1788:	11 96       	adiw	r26, 0x01	; 1
    178a:	aa 0f       	add	r26, r26
    178c:	bb 1f       	adc	r27, r27
    178e:	a6 0f       	add	r26, r22
    1790:	b7 1f       	adc	r27, r23
    1792:	8d 93       	st	X+, r24
    1794:	9c 93       	st	X, r25
    (*QCount)++;
    1796:	ea 01       	movw	r28, r20
    1798:	88 81       	ld	r24, Y
    179a:	99 81       	ldd	r25, Y+1	; 0x01
    179c:	01 96       	adiw	r24, 0x01	; 1
    179e:	99 83       	std	Y+1, r25	; 0x01
    17a0:	88 83       	st	Y, r24
}
    17a2:	df 91       	pop	r29
    17a4:	cf 91       	pop	r28
    17a6:	1f 91       	pop	r17
    17a8:	0f 91       	pop	r16
    17aa:	ff 90       	pop	r15
    17ac:	ef 90       	pop	r14
    17ae:	df 90       	pop	r13
    17b0:	cf 90       	pop	r12
    17b2:	08 95       	ret

000017b4 <enqueueRQ>:

/*
 *  Insert into the queue sorted by priority
 */
void enqueueRQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    17b4:	cf 92       	push	r12
    17b6:	df 92       	push	r13
    17b8:	ef 92       	push	r14
    17ba:	ff 92       	push	r15
    17bc:	0f 93       	push	r16
    17be:	1f 93       	push	r17
    17c0:	cf 93       	push	r28
    17c2:	df 93       	push	r29
    17c4:	6a 01       	movw	r12, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    17c6:	ea 01       	movw	r28, r20
    17c8:	28 81       	ld	r18, Y
    17ca:	39 81       	ldd	r19, Y+1	; 0x01

/*
 *  Insert into the queue sorted by priority
 */
void enqueueRQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    17cc:	2f 30       	cpi	r18, 0x0F	; 15
    17ce:	31 05       	cpc	r19, r1
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <enqueueRQ+0x20>
    17d2:	4a c0       	rjmp	.+148    	; 0x1868 <enqueueRQ+0xb4>
        return;
    }

    int i = (*QCount) - 1;
    17d4:	28 81       	ld	r18, Y
    17d6:	39 81       	ldd	r19, Y+1	; 0x01
    17d8:	21 50       	subi	r18, 0x01	; 1
    17da:	31 09       	sbc	r19, r1

    volatile PD *new = *p;
    17dc:	fc 01       	movw	r30, r24
    17de:	00 81       	ld	r16, Z
    17e0:	11 81       	ldd	r17, Z+1	; 0x01

    volatile PD *temp = Queue[i];
    17e2:	f9 01       	movw	r30, r18
    17e4:	ee 0f       	add	r30, r30
    17e6:	ff 1f       	adc	r31, r31
    17e8:	db 01       	movw	r26, r22
    17ea:	ae 0f       	add	r26, r30
    17ec:	bf 1f       	adc	r27, r31
    17ee:	4d 91       	ld	r20, X+
    17f0:	5c 91       	ld	r21, X

    while(i >= 0 && (new->inheritedPy >= temp->inheritedPy)) {
    17f2:	33 23       	and	r19, r19
    17f4:	3c f1       	brlt	.+78     	; 0x1844 <enqueueRQ+0x90>
    17f6:	d8 01       	movw	r26, r16
    17f8:	a9 5f       	subi	r26, 0xF9	; 249
    17fa:	be 4f       	sbci	r27, 0xFE	; 254
    17fc:	ed 90       	ld	r14, X+
    17fe:	fc 90       	ld	r15, X
    1800:	da 01       	movw	r26, r20
    1802:	a9 5f       	subi	r26, 0xF9	; 249
    1804:	be 4f       	sbci	r27, 0xFE	; 254
    1806:	4d 91       	ld	r20, X+
    1808:	5c 91       	ld	r21, X
    180a:	e4 16       	cp	r14, r20
    180c:	f5 06       	cpc	r15, r21
    180e:	d0 f0       	brcs	.+52     	; 0x1844 <enqueueRQ+0x90>
    1810:	e6 0f       	add	r30, r22
    1812:	f7 1f       	adc	r31, r23
    1814:	09 5f       	subi	r16, 0xF9	; 249
    1816:	1e 4f       	sbci	r17, 0xFE	; 254
        Queue[i+1] = Queue[i];
    1818:	a0 81       	ld	r26, Z
    181a:	b1 81       	ldd	r27, Z+1	; 0x01
    181c:	b3 83       	std	Z+3, r27	; 0x03
    181e:	a2 83       	std	Z+2, r26	; 0x02
        i--;
    1820:	21 50       	subi	r18, 0x01	; 1
    1822:	31 09       	sbc	r19, r1
        temp = Queue[i];
    1824:	b2 91       	ld	r27, -Z
    1826:	a2 91       	ld	r26, -Z

    volatile PD *new = *p;

    volatile PD *temp = Queue[i];

    while(i >= 0 && (new->inheritedPy >= temp->inheritedPy)) {
    1828:	2f 3f       	cpi	r18, 0xFF	; 255
    182a:	4f ef       	ldi	r20, 0xFF	; 255
    182c:	34 07       	cpc	r19, r20
    182e:	51 f0       	breq	.+20     	; 0x1844 <enqueueRQ+0x90>
    1830:	e8 01       	movw	r28, r16
    1832:	e8 80       	ld	r14, Y
    1834:	f9 80       	ldd	r15, Y+1	; 0x01
    1836:	a9 5f       	subi	r26, 0xF9	; 249
    1838:	be 4f       	sbci	r27, 0xFE	; 254
    183a:	4d 91       	ld	r20, X+
    183c:	5c 91       	ld	r21, X
    183e:	e4 16       	cp	r14, r20
    1840:	f5 06       	cpc	r15, r21
    1842:	50 f7       	brcc	.-44     	; 0x1818 <enqueueRQ+0x64>
        Queue[i+1] = Queue[i];
        i--;
        temp = Queue[i];
    }

    Queue[i+1] = *p;
    1844:	fc 01       	movw	r30, r24
    1846:	80 81       	ld	r24, Z
    1848:	91 81       	ldd	r25, Z+1	; 0x01
    184a:	2f 5f       	subi	r18, 0xFF	; 255
    184c:	3f 4f       	sbci	r19, 0xFF	; 255
    184e:	22 0f       	add	r18, r18
    1850:	33 1f       	adc	r19, r19
    1852:	fb 01       	movw	r30, r22
    1854:	e2 0f       	add	r30, r18
    1856:	f3 1f       	adc	r31, r19
    1858:	91 83       	std	Z+1, r25	; 0x01
    185a:	80 83       	st	Z, r24
    (*QCount)++;
    185c:	e6 01       	movw	r28, r12
    185e:	88 81       	ld	r24, Y
    1860:	99 81       	ldd	r25, Y+1	; 0x01
    1862:	01 96       	adiw	r24, 0x01	; 1
    1864:	99 83       	std	Y+1, r25	; 0x01
    1866:	88 83       	st	Y, r24
}
    1868:	df 91       	pop	r29
    186a:	cf 91       	pop	r28
    186c:	1f 91       	pop	r17
    186e:	0f 91       	pop	r16
    1870:	ff 90       	pop	r15
    1872:	ef 90       	pop	r14
    1874:	df 90       	pop	r13
    1876:	cf 90       	pop	r12
    1878:	08 95       	ret

0000187a <dequeueWQ>:

/*
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {
    187a:	0f 93       	push	r16
    187c:	1f 93       	push	r17
    187e:	cf 93       	push	r28
    1880:	df 93       	push	r29

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    1882:	eb 01       	movw	r28, r22
    1884:	28 81       	ld	r18, Y
    1886:	39 81       	ldd	r19, Y+1	; 0x01
/*
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {

    if(isEmpty(QCount)) {
    1888:	23 2b       	or	r18, r19
    188a:	09 f4       	brne	.+2      	; 0x188e <dequeueWQ+0x14>
    188c:	54 c0       	rjmp	.+168    	; 0x1936 <dequeueWQ+0xbc>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
    188e:	28 81       	ld	r18, Y
    1890:	39 81       	ldd	r19, Y+1	; 0x01
    1892:	21 50       	subi	r18, 0x01	; 1
    1894:	31 09       	sbc	r19, r1
    1896:	0a f4       	brpl	.+2      	; 0x189a <dequeueWQ+0x20>
    1898:	51 c0       	rjmp	.+162    	; 0x193c <dequeueWQ+0xc2>
        if(Queue[i]->m == m){
    189a:	e9 01       	movw	r28, r18
    189c:	cc 0f       	add	r28, r28
    189e:	dd 1f       	adc	r29, r29
    18a0:	fc 01       	movw	r30, r24
    18a2:	ec 0f       	add	r30, r28
    18a4:	fd 1f       	adc	r31, r29
    18a6:	a0 81       	ld	r26, Z
    18a8:	b1 81       	ldd	r27, Z+1	; 0x01
    18aa:	fd 01       	movw	r30, r26
    18ac:	ec 5e       	subi	r30, 0xEC	; 236
    18ae:	fe 4f       	sbci	r31, 0xFE	; 254
    18b0:	01 90       	ld	r0, Z+
    18b2:	f0 81       	ld	r31, Z
    18b4:	e0 2d       	mov	r30, r0
    18b6:	e4 17       	cp	r30, r20
    18b8:	f5 07       	cpc	r31, r21
    18ba:	81 f4       	brne	.+32     	; 0x18dc <dequeueWQ+0x62>
    18bc:	0a c0       	rjmp	.+20     	; 0x18d2 <dequeueWQ+0x58>
    18be:	ba 91       	ld	r27, -Y
    18c0:	aa 91       	ld	r26, -Y
    18c2:	fd 01       	movw	r30, r26
    18c4:	ec 5e       	subi	r30, 0xEC	; 236
    18c6:	fe 4f       	sbci	r31, 0xFE	; 254
    18c8:	00 81       	ld	r16, Z
    18ca:	11 81       	ldd	r17, Z+1	; 0x01
    18cc:	04 17       	cp	r16, r20
    18ce:	15 07       	cpc	r17, r21
    18d0:	39 f4       	brne	.+14     	; 0x18e0 <dequeueWQ+0x66>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
    18d2:	10 97       	sbiw	r26, 0x00	; 0
    18d4:	59 f4       	brne	.+22     	; 0x18ec <dequeueWQ+0x72>
            i++;
        }
        (*QCount)--;
    }

    return result;
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	32 c0       	rjmp	.+100    	; 0x1940 <dequeueWQ+0xc6>
    18dc:	c8 0f       	add	r28, r24
    18de:	d9 1f       	adc	r29, r25
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
    18e0:	21 50       	subi	r18, 0x01	; 1
    18e2:	31 09       	sbc	r19, r1
    18e4:	60 f7       	brcc	.-40     	; 0x18be <dequeueWQ+0x44>
            i++;
        }
        (*QCount)--;
    }

    return result;
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	2a c0       	rjmp	.+84     	; 0x1940 <dequeueWQ+0xc6>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i<(*QCount)-1) {
    18ec:	eb 01       	movw	r28, r22
    18ee:	48 81       	ld	r20, Y
    18f0:	59 81       	ldd	r21, Y+1	; 0x01
    18f2:	41 50       	subi	r20, 0x01	; 1
    18f4:	51 09       	sbc	r21, r1
    18f6:	24 17       	cp	r18, r20
    18f8:	35 07       	cpc	r19, r21
    18fa:	a4 f4       	brge	.+40     	; 0x1924 <dequeueWQ+0xaa>
    18fc:	a9 01       	movw	r20, r18
    18fe:	44 0f       	add	r20, r20
    1900:	55 1f       	adc	r21, r21
    1902:	fc 01       	movw	r30, r24
    1904:	e4 0f       	add	r30, r20
    1906:	f5 1f       	adc	r31, r21
            Queue[i] = Queue[i+1];
    1908:	82 81       	ldd	r24, Z+2	; 0x02
    190a:	93 81       	ldd	r25, Z+3	; 0x03
    190c:	81 93       	st	Z+, r24
    190e:	91 93       	st	Z+, r25
            i++;
    1910:	2f 5f       	subi	r18, 0xFF	; 255
    1912:	3f 4f       	sbci	r19, 0xFF	; 255
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i<(*QCount)-1) {
    1914:	eb 01       	movw	r28, r22
    1916:	48 81       	ld	r20, Y
    1918:	59 81       	ldd	r21, Y+1	; 0x01
    191a:	41 50       	subi	r20, 0x01	; 1
    191c:	51 09       	sbc	r21, r1
    191e:	24 17       	cp	r18, r20
    1920:	35 07       	cpc	r19, r21
    1922:	94 f3       	brlt	.-28     	; 0x1908 <dequeueWQ+0x8e>
            Queue[i] = Queue[i+1];
            i++;
        }
        (*QCount)--;
    1924:	fb 01       	movw	r30, r22
    1926:	80 81       	ld	r24, Z
    1928:	91 81       	ldd	r25, Z+1	; 0x01
    192a:	01 97       	sbiw	r24, 0x01	; 1
    192c:	91 83       	std	Z+1, r25	; 0x01
    192e:	80 83       	st	Z, r24

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
        if(Queue[i]->m == m){
            result = Queue[i];
    1930:	8a 2f       	mov	r24, r26
    1932:	9b 2f       	mov	r25, r27
    1934:	05 c0       	rjmp	.+10     	; 0x1940 <dequeueWQ+0xc6>
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {

    if(isEmpty(QCount)) {
        return NULL;
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <dequeueWQ+0xc6>
            i++;
        }
        (*QCount)--;
    }

    return result;
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	90 e0       	ldi	r25, 0x00	; 0
}
    1940:	df 91       	pop	r29
    1942:	cf 91       	pop	r28
    1944:	1f 91       	pop	r17
    1946:	0f 91       	pop	r16
    1948:	08 95       	ret

0000194a <dequeueRQ>:

/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {
    194a:	cf 93       	push	r28
    194c:	df 93       	push	r29
    194e:	eb 01       	movw	r28, r22

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    1950:	28 81       	ld	r18, Y
    1952:	39 81       	ldd	r19, Y+1	; 0x01
/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
    1954:	23 2b       	or	r18, r19
    1956:	09 f4       	brne	.+2      	; 0x195a <dequeueRQ+0x10>
    1958:	48 c0       	rjmp	.+144    	; 0x19ea <dequeueRQ+0xa0>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
    195a:	e8 81       	ld	r30, Y
    195c:	f9 81       	ldd	r31, Y+1	; 0x01
    195e:	9f 01       	movw	r18, r30
    1960:	21 50       	subi	r18, 0x01	; 1
    1962:	31 09       	sbc	r19, r1
    1964:	0a f4       	brpl	.+2      	; 0x1968 <dequeueRQ+0x1e>
    1966:	44 c0       	rjmp	.+136    	; 0x19f0 <dequeueRQ+0xa6>
    1968:	ee 0f       	add	r30, r30
    196a:	ff 1f       	adc	r31, r31
    196c:	e8 0f       	add	r30, r24
    196e:	f9 1f       	adc	r31, r25
        if((Queue[i]->suspended == 0) && (Queue[i]->state == READY)) {
    1970:	52 91       	ld	r21, -Z
    1972:	42 91       	ld	r20, -Z
    1974:	da 01       	movw	r26, r20
    1976:	a6 5e       	subi	r26, 0xE6	; 230
    1978:	be 4f       	sbci	r27, 0xFE	; 254
    197a:	6d 91       	ld	r22, X+
    197c:	7c 91       	ld	r23, X
    197e:	11 97       	sbiw	r26, 0x01	; 1
    1980:	67 2b       	or	r22, r23
    1982:	59 f4       	brne	.+22     	; 0x199a <dequeueRQ+0x50>
    1984:	56 97       	sbiw	r26, 0x16	; 22
    1986:	6c 91       	ld	r22, X
    1988:	61 30       	cpi	r22, 0x01	; 1
    198a:	39 f4       	brne	.+14     	; 0x199a <dequeueRQ+0x50>
    198c:	f9 01       	movw	r30, r18
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
    198e:	41 15       	cp	r20, r1
    1990:	51 05       	cpc	r21, r1
    1992:	49 f4       	brne	.+18     	; 0x19a6 <dequeueRQ+0x5c>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	2d c0       	rjmp	.+90     	; 0x19f4 <dequeueRQ+0xaa>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
    199a:	21 50       	subi	r18, 0x01	; 1
    199c:	31 09       	sbc	r19, r1
    199e:	40 f7       	brcc	.-48     	; 0x1970 <dequeueRQ+0x26>
            i++;
        }
        (*QCount)--;
    }

    return result;
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	27 c0       	rjmp	.+78     	; 0x19f4 <dequeueRQ+0xaa>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i < (*QCount)-1) {
    19a6:	68 81       	ld	r22, Y
    19a8:	79 81       	ldd	r23, Y+1	; 0x01
    19aa:	61 50       	subi	r22, 0x01	; 1
    19ac:	71 09       	sbc	r23, r1
    19ae:	26 17       	cp	r18, r22
    19b0:	37 07       	cpc	r19, r23
    19b2:	9c f4       	brge	.+38     	; 0x19da <dequeueRQ+0x90>
    19b4:	ee 0f       	add	r30, r30
    19b6:	ff 1f       	adc	r31, r31
    19b8:	dc 01       	movw	r26, r24
    19ba:	ae 0f       	add	r26, r30
    19bc:	bf 1f       	adc	r27, r31
            Queue[i] = Queue[i+1];
    19be:	12 96       	adiw	r26, 0x02	; 2
    19c0:	8d 91       	ld	r24, X+
    19c2:	9c 91       	ld	r25, X
    19c4:	13 97       	sbiw	r26, 0x03	; 3
    19c6:	8d 93       	st	X+, r24
    19c8:	9d 93       	st	X+, r25
            i++;
    19ca:	2f 5f       	subi	r18, 0xFF	; 255
    19cc:	3f 4f       	sbci	r19, 0xFF	; 255
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i < (*QCount)-1) {
    19ce:	e8 81       	ld	r30, Y
    19d0:	f9 81       	ldd	r31, Y+1	; 0x01
    19d2:	31 97       	sbiw	r30, 0x01	; 1
    19d4:	2e 17       	cp	r18, r30
    19d6:	3f 07       	cpc	r19, r31
    19d8:	94 f3       	brlt	.-28     	; 0x19be <dequeueRQ+0x74>
            Queue[i] = Queue[i+1];
            i++;
        }
        (*QCount)--;
    19da:	88 81       	ld	r24, Y
    19dc:	99 81       	ldd	r25, Y+1	; 0x01
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	99 83       	std	Y+1, r25	; 0x01
    19e2:	88 83       	st	Y, r24
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
        if((Queue[i]->suspended == 0) && (Queue[i]->state == READY)) {
    19e4:	84 2f       	mov	r24, r20
    19e6:	95 2f       	mov	r25, r21
    19e8:	05 c0       	rjmp	.+10     	; 0x19f4 <dequeueRQ+0xaa>
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
        return NULL;
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	02 c0       	rjmp	.+4      	; 0x19f4 <dequeueRQ+0xaa>
            i++;
        }
        (*QCount)--;
    }

    return result;
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	90 e0       	ldi	r25, 0x00	; 0
}
    19f4:	df 91       	pop	r29
    19f6:	cf 91       	pop	r28
    19f8:	08 95       	ret

000019fa <dequeue>:

/*
 *  Return the first element of the queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
    19fa:	db 01       	movw	r26, r22

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    19fc:	2d 91       	ld	r18, X+
    19fe:	3c 91       	ld	r19, X
    1a00:	11 97       	sbiw	r26, 0x01	; 1
/*
 *  Return the first element of the queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
    1a02:	23 2b       	or	r18, r19
    1a04:	a9 f0       	breq	.+42     	; 0x1a30 <dequeue+0x36>
        return;
    }

    volatile PD *result = (Queue[(*QCount)-1]);
    1a06:	2d 91       	ld	r18, X+
    1a08:	3c 91       	ld	r19, X
    1a0a:	11 97       	sbiw	r26, 0x01	; 1
    1a0c:	f9 01       	movw	r30, r18
    1a0e:	e1 50       	subi	r30, 0x01	; 1
    1a10:	f0 48       	sbci	r31, 0x80	; 128
    1a12:	ee 0f       	add	r30, r30
    1a14:	ff 1f       	adc	r31, r31
    1a16:	e8 0f       	add	r30, r24
    1a18:	f9 1f       	adc	r31, r25
    1a1a:	80 81       	ld	r24, Z
    1a1c:	91 81       	ldd	r25, Z+1	; 0x01
    (*QCount)--;
    1a1e:	2d 91       	ld	r18, X+
    1a20:	3c 91       	ld	r19, X
    1a22:	11 97       	sbiw	r26, 0x01	; 1
    1a24:	21 50       	subi	r18, 0x01	; 1
    1a26:	31 09       	sbc	r19, r1
    1a28:	11 96       	adiw	r26, 0x01	; 1
    1a2a:	3c 93       	st	X, r19
    1a2c:	2e 93       	st	-X, r18
    1a2e:	08 95       	ret

    return result;
}
    1a30:	08 95       	ret

00001a32 <_get_status>:
	}

	wh = (16 - weight) * 100;
	wh /= 16;
	return wh;
}
    1a32:	2d 98       	cbi	0x05, 5	; 5
    1a34:	8f ef       	ldi	r24, 0xFF	; 255
    1a36:	04 d1       	rcall	.+520    	; 0x1c40 <SPI_Write_Byte>
    1a38:	2d 9a       	sbi	0x05, 5	; 5
    1a3a:	08 95       	ret

00001a3c <_set_register>:
    1a3c:	0f 93       	push	r16
    1a3e:	1f 93       	push	r17
    1a40:	cf 93       	push	r28
    1a42:	df 93       	push	r29
    1a44:	8b 01       	movw	r16, r22
    1a46:	d4 2f       	mov	r29, r20
    1a48:	2d 98       	cbi	0x05, 5	; 5
    1a4a:	8f 71       	andi	r24, 0x1F	; 31
    1a4c:	80 62       	ori	r24, 0x20	; 32
    1a4e:	f8 d0       	rcall	.+496    	; 0x1c40 <SPI_Write_Byte>
    1a50:	c8 2f       	mov	r28, r24
    1a52:	6d 2f       	mov	r22, r29
    1a54:	c8 01       	movw	r24, r16
    1a56:	e1 d0       	rcall	.+450    	; 0x1c1a <SPI_Write_Block>
    1a58:	2d 9a       	sbi	0x05, 5	; 5
    1a5a:	8c 2f       	mov	r24, r28
    1a5c:	df 91       	pop	r29
    1a5e:	cf 91       	pop	r28
    1a60:	1f 91       	pop	r17
    1a62:	0f 91       	pop	r16
    1a64:	08 95       	ret

00001a66 <_get_register>:
    1a66:	0f 93       	push	r16
    1a68:	1f 93       	push	r17
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	eb 01       	movw	r28, r22
    1a70:	14 2f       	mov	r17, r20
    1a72:	44 23       	and	r20, r20
    1a74:	69 f0       	breq	.+26     	; 0x1a90 <_get_register+0x2a>
    1a76:	fb 01       	movw	r30, r22
    1a78:	2f ef       	ldi	r18, 0xFF	; 255
    1a7a:	24 0f       	add	r18, r20
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	2f 5f       	subi	r18, 0xFF	; 255
    1a80:	3f 4f       	sbci	r19, 0xFF	; 255
    1a82:	26 0f       	add	r18, r22
    1a84:	37 1f       	adc	r19, r23
    1a86:	9f ef       	ldi	r25, 0xFF	; 255
    1a88:	91 93       	st	Z+, r25
    1a8a:	e2 17       	cp	r30, r18
    1a8c:	f3 07       	cpc	r31, r19
    1a8e:	e1 f7       	brne	.-8      	; 0x1a88 <_get_register+0x22>
    1a90:	2d 98       	cbi	0x05, 5	; 5
    1a92:	8f 71       	andi	r24, 0x1F	; 31
    1a94:	d5 d0       	rcall	.+426    	; 0x1c40 <SPI_Write_Byte>
    1a96:	08 2f       	mov	r16, r24
    1a98:	41 2f       	mov	r20, r17
    1a9a:	be 01       	movw	r22, r28
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	a5 d0       	rcall	.+330    	; 0x1bec <SPI_ReadWrite_Block>
    1aa2:	2d 9a       	sbi	0x05, 5	; 5
    1aa4:	80 2f       	mov	r24, r16
    1aa6:	df 91       	pop	r29
    1aa8:	cf 91       	pop	r28
    1aaa:	1f 91       	pop	r17
    1aac:	0f 91       	pop	r16
    1aae:	08 95       	ret

00001ab0 <_set_rx_mode>:
    1ab0:	cf 93       	push	r28
    1ab2:	df 93       	push	r29
    1ab4:	1f 92       	push	r1
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	41 e0       	ldi	r20, 0x01	; 1
    1abc:	be 01       	movw	r22, r28
    1abe:	6f 5f       	subi	r22, 0xFF	; 255
    1ac0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	d0 df       	rcall	.-96     	; 0x1a66 <_get_register>
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
    1ac8:	80 fd       	sbrc	r24, 0
    1aca:	10 c0       	rjmp	.+32     	; 0x1aec <_set_rx_mode+0x3c>
    1acc:	81 60       	ori	r24, 0x01	; 1
    1ace:	89 83       	std	Y+1, r24	; 0x01
    1ad0:	41 e0       	ldi	r20, 0x01	; 1
    1ad2:	be 01       	movw	r22, r28
    1ad4:	6f 5f       	subi	r22, 0xFF	; 255
    1ad6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
    1ada:	b0 df       	rcall	.-160    	; 0x1a3c <_set_register>
    1adc:	85 e1       	ldi	r24, 0x15	; 21
    1ade:	8a 95       	dec	r24
    1ae0:	f1 f7       	brne	.-4      	; 0x1ade <_set_rx_mode+0x2e>
    1ae2:	00 c0       	rjmp	.+0      	; 0x1ae4 <_set_rx_mode+0x34>
    1ae4:	85 e1       	ldi	r24, 0x15	; 21
    1ae6:	8a 95       	dec	r24
    1ae8:	f1 f7       	brne	.-4      	; 0x1ae6 <_set_rx_mode+0x36>
    1aea:	00 c0       	rjmp	.+0      	; 0x1aec <_set_rx_mode+0x3c>
    1aec:	0f 90       	pop	r0
    1aee:	df 91       	pop	r29
    1af0:	cf 91       	pop	r28
    1af2:	08 95       	ret

00001af4 <_reset_pipe0_address>:
    1af4:	80 91 0a 02 	lds	r24, 0x020A
    1af8:	88 23       	and	r24, r24
    1afa:	29 f0       	breq	.+10     	; 0x1b06 <_reset_pipe0_address+0x12>
    1afc:	45 e0       	ldi	r20, 0x05	; 5
    1afe:	65 e0       	ldi	r22, 0x05	; 5
    1b00:	72 e0       	ldi	r23, 0x02	; 2
    1b02:	8a e0       	ldi	r24, 0x0A	; 10
    1b04:	9b cf       	rjmp	.-202    	; 0x1a3c <_set_register>
    1b06:	08 95       	ret

00001b08 <__vector_1>:

// Interrupt handler
ISR(INT0_vect)
{
    1b08:	1f 92       	push	r1
    1b0a:	0f 92       	push	r0
    1b0c:	0f b6       	in	r0, 0x3f	; 63
    1b0e:	0f 92       	push	r0
    1b10:	11 24       	eor	r1, r1
    1b12:	0b b6       	in	r0, 0x3b	; 59
    1b14:	0f 92       	push	r0
    1b16:	2f 93       	push	r18
    1b18:	3f 93       	push	r19
    1b1a:	4f 93       	push	r20
    1b1c:	5f 93       	push	r21
    1b1e:	6f 93       	push	r22
    1b20:	7f 93       	push	r23
    1b22:	8f 93       	push	r24
    1b24:	9f 93       	push	r25
    1b26:	af 93       	push	r26
    1b28:	bf 93       	push	r27
    1b2a:	ef 93       	push	r30
    1b2c:	ff 93       	push	r31
    1b2e:	cf 93       	push	r28
    1b30:	df 93       	push	r29
    1b32:	1f 92       	push	r1
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;
    uint8_t pipe_number;

    RADIO_CE_LOW();
    1b38:	2c 98       	cbi	0x05, 4	; 5

    status = _get_status();
    1b3a:	7b df       	rcall	.-266    	; 0x1a32 <_get_status>
    1b3c:	89 83       	std	Y+1, r24	; 0x01

    if (status & _BV(RX_DR)) {
    1b3e:	86 ff       	sbrs	r24, 6
    1b40:	04 c0       	rjmp	.+8      	; 0x1b4a <__vector_1+0x42>
        pipe_number =  (status & 0xE) >> 1;
    1b42:	8e 70       	andi	r24, 0x0E	; 14
        radio_rxhandler(pipe_number);
    1b44:	86 95       	lsr	r24
    1b46:	0e 94 66 01 	call	0x2cc	; 0x2cc <radio_rxhandler>
    }

    // We can get the TX_DS or the MAX_RT interrupt, but not both.
    if (status & _BV(TX_DS)) {
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	85 ff       	sbrs	r24, 5
    1b4e:	1b c0       	rjmp	.+54     	; 0x1b86 <__vector_1+0x7e>
    	// if there's nothing left to transmit, switch back to receive mode.
        transmit_lock = 0;
    1b50:	10 92 21 15 	sts	0x1521, r1
        _reset_pipe0_address();
    1b54:	cf df       	rcall	.-98     	; 0x1af4 <_reset_pipe0_address>
        _set_rx_mode();
    1b56:	ac df       	rcall	.-168    	; 0x1ab0 <_set_rx_mode>

        // indicate in the history that a packet was transmitted successfully by appending a 1.
        tx_history <<= 1;
    1b58:	80 91 03 02 	lds	r24, 0x0203
    1b5c:	90 91 04 02 	lds	r25, 0x0204
    1b60:	88 0f       	add	r24, r24
    1b62:	99 1f       	adc	r25, r25
    1b64:	90 93 04 02 	sts	0x0204, r25
    1b68:	80 93 03 02 	sts	0x0203, r24
        tx_history |= 1;
    1b6c:	80 91 03 02 	lds	r24, 0x0203
    1b70:	90 91 04 02 	lds	r25, 0x0204
    1b74:	81 60       	ori	r24, 0x01	; 1
    1b76:	90 93 04 02 	sts	0x0204, r25
    1b7a:	80 93 03 02 	sts	0x0203, r24
        tx_last_status = RADIO_TX_SUCCESS;
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	80 93 02 02 	sts	0x0202, r24
    1b84:	14 c0       	rjmp	.+40     	; 0x1bae <__vector_1+0xa6>
    } else if (status & _BV(MAX_RT)) {
    1b86:	84 ff       	sbrs	r24, 4
    1b88:	12 c0       	rjmp	.+36     	; 0x1bae <__vector_1+0xa6>
        // enable SPI
       // RADIO_CSN_LOW();


        // flush the failed packet (it stays in the Tx FIFO; we could try to resend it by setting CE high)
        SPI_Write_Byte( FLUSH_TX );
    1b8a:	81 ee       	ldi	r24, 0xE1	; 225
    1b8c:	59 d0       	rcall	.+178    	; 0x1c40 <SPI_Write_Byte>

        // resynch SPI
        //RADIO_CSN_HIGH();

        transmit_lock = 0;
    1b8e:	10 92 21 15 	sts	0x1521, r1
        _reset_pipe0_address();
    1b92:	b0 df       	rcall	.-160    	; 0x1af4 <_reset_pipe0_address>
        _set_rx_mode();
    1b94:	8d df       	rcall	.-230    	; 0x1ab0 <_set_rx_mode>

        // indicate in the history that a packet was dropped by appending a 0.
        tx_history <<= 1;
    1b96:	80 91 03 02 	lds	r24, 0x0203
    1b9a:	90 91 04 02 	lds	r25, 0x0204
    1b9e:	88 0f       	add	r24, r24
    1ba0:	99 1f       	adc	r25, r25
    1ba2:	90 93 04 02 	sts	0x0204, r25
    1ba6:	80 93 03 02 	sts	0x0203, r24
        tx_last_status = RADIO_TX_MAX_RT;
    1baa:	10 92 02 02 	sts	0x0202, r1
    }

    // clear the interrupt flags.
	status = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
    1bae:	80 e7       	ldi	r24, 0x70	; 112
    1bb0:	89 83       	std	Y+1, r24	; 0x01
	_set_register(STATUS, &status, 1);
    1bb2:	41 e0       	ldi	r20, 0x01	; 1
    1bb4:	be 01       	movw	r22, r28
    1bb6:	6f 5f       	subi	r22, 0xFF	; 255
    1bb8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bba:	87 e0       	ldi	r24, 0x07	; 7
    1bbc:	3f df       	rcall	.-386    	; 0x1a3c <_set_register>

    RADIO_CE_HIGH();
    1bbe:	2c 9a       	sbi	0x05, 4	; 5
}
    1bc0:	0f 90       	pop	r0
    1bc2:	df 91       	pop	r29
    1bc4:	cf 91       	pop	r28
    1bc6:	ff 91       	pop	r31
    1bc8:	ef 91       	pop	r30
    1bca:	bf 91       	pop	r27
    1bcc:	af 91       	pop	r26
    1bce:	9f 91       	pop	r25
    1bd0:	8f 91       	pop	r24
    1bd2:	7f 91       	pop	r23
    1bd4:	6f 91       	pop	r22
    1bd6:	5f 91       	pop	r21
    1bd8:	4f 91       	pop	r20
    1bda:	3f 91       	pop	r19
    1bdc:	2f 91       	pop	r18
    1bde:	0f 90       	pop	r0
    1be0:	0b be       	out	0x3b, r0	; 59
    1be2:	0f 90       	pop	r0
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	0f 90       	pop	r0
    1be8:	1f 90       	pop	r1
    1bea:	18 95       	reti

00001bec <SPI_ReadWrite_Block>:
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1bec:	44 23       	and	r20, r20
    1bee:	a1 f0       	breq	.+40     	; 0x1c18 <SPI_ReadWrite_Block+0x2c>
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	a6 2f       	mov	r26, r22
    1bf4:	b7 2f       	mov	r27, r23
    1bf6:	41 50       	subi	r20, 0x01	; 1
    1bf8:	24 2f       	mov	r18, r20
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	2f 5f       	subi	r18, 0xFF	; 255
    1bfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1c00:	28 0f       	add	r18, r24
    1c02:	39 1f       	adc	r19, r25
          SPDR = data[i];
    1c04:	91 91       	ld	r25, Z+
    1c06:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1c08:	0d b4       	in	r0, 0x2d	; 45
    1c0a:	07 fe       	sbrs	r0, 7
    1c0c:	fd cf       	rjmp	.-6      	; 0x1c08 <SPI_ReadWrite_Block+0x1c>
          buffer[i] = SPDR;
    1c0e:	9e b5       	in	r25, 0x2e	; 46
    1c10:	9d 93       	st	X+, r25
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1c12:	e2 17       	cp	r30, r18
    1c14:	f3 07       	cpc	r31, r19
    1c16:	b1 f7       	brne	.-20     	; 0x1c04 <SPI_ReadWrite_Block+0x18>
    1c18:	08 95       	ret

00001c1a <SPI_Write_Block>:
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1c1a:	66 23       	and	r22, r22
    1c1c:	81 f0       	breq	.+32     	; 0x1c3e <SPI_Write_Block+0x24>
    1c1e:	fc 01       	movw	r30, r24
    1c20:	61 50       	subi	r22, 0x01	; 1
    1c22:	26 2f       	mov	r18, r22
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	2f 5f       	subi	r18, 0xFF	; 255
    1c28:	3f 4f       	sbci	r19, 0xFF	; 255
    1c2a:	28 0f       	add	r18, r24
    1c2c:	39 1f       	adc	r19, r25
          SPDR = data[i];
    1c2e:	91 91       	ld	r25, Z+
    1c30:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1c32:	0d b4       	in	r0, 0x2d	; 45
    1c34:	07 fe       	sbrs	r0, 7
    1c36:	fd cf       	rjmp	.-6      	; 0x1c32 <SPI_Write_Block+0x18>
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1c38:	e2 17       	cp	r30, r18
    1c3a:	f3 07       	cpc	r31, r19
    1c3c:	c1 f7       	brne	.-16     	; 0x1c2e <SPI_Write_Block+0x14>
    1c3e:	08 95       	ret

00001c40 <SPI_Write_Byte>:
    }
}

uint8_t SPI_Write_Byte(uint8_t byte)
{
    SPDR = byte;
    1c40:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
    1c42:	0d b4       	in	r0, 0x2d	; 45
    1c44:	07 fe       	sbrs	r0, 7
    1c46:	fd cf       	rjmp	.-6      	; 0x1c42 <SPI_Write_Byte+0x2>
    return SPDR;
    1c48:	8e b5       	in	r24, 0x2e	; 46
}
    1c4a:	08 95       	ret

00001c4c <Roomba_Init>:
		return;
	}

	state = newState;
	_delay_ms(20);
}
    1c4c:	3d 9a       	sbi	0x07, 5	; 7
    1c4e:	45 98       	cbi	0x08, 5	; 8
    1c50:	2f ef       	ldi	r18, 0xFF	; 255
    1c52:	39 e6       	ldi	r19, 0x69	; 105
    1c54:	88 e1       	ldi	r24, 0x18	; 24
    1c56:	21 50       	subi	r18, 0x01	; 1
    1c58:	30 40       	sbci	r19, 0x00	; 0
    1c5a:	80 40       	sbci	r24, 0x00	; 0
    1c5c:	e1 f7       	brne	.-8      	; 0x1c56 <Roomba_Init+0xa>
    1c5e:	00 c0       	rjmp	.+0      	; 0x1c60 <Roomba_Init+0x14>
    1c60:	00 00       	nop
    1c62:	45 9a       	sbi	0x08, 5	; 8
    1c64:	9f ef       	ldi	r25, 0xFF	; 255
    1c66:	27 ea       	ldi	r18, 0xA7	; 167
    1c68:	31 e6       	ldi	r19, 0x61	; 97
    1c6a:	91 50       	subi	r25, 0x01	; 1
    1c6c:	20 40       	sbci	r18, 0x00	; 0
    1c6e:	30 40       	sbci	r19, 0x00	; 0
    1c70:	e1 f7       	brne	.-8      	; 0x1c6a <Roomba_Init+0x1e>
    1c72:	00 c0       	rjmp	.+0      	; 0x1c74 <Roomba_Init+0x28>
    1c74:	00 00       	nop
    1c76:	83 e0       	ldi	r24, 0x03	; 3
    1c78:	45 98       	cbi	0x08, 5	; 8
    1c7a:	9f ef       	ldi	r25, 0xFF	; 255
    1c7c:	20 e7       	ldi	r18, 0x70	; 112
    1c7e:	32 e0       	ldi	r19, 0x02	; 2
    1c80:	91 50       	subi	r25, 0x01	; 1
    1c82:	20 40       	sbci	r18, 0x00	; 0
    1c84:	30 40       	sbci	r19, 0x00	; 0
    1c86:	e1 f7       	brne	.-8      	; 0x1c80 <Roomba_Init+0x34>
    1c88:	00 c0       	rjmp	.+0      	; 0x1c8a <Roomba_Init+0x3e>
    1c8a:	00 00       	nop
    1c8c:	45 9a       	sbi	0x08, 5	; 8
    1c8e:	9f ef       	ldi	r25, 0xFF	; 255
    1c90:	20 e7       	ldi	r18, 0x70	; 112
    1c92:	32 e0       	ldi	r19, 0x02	; 2
    1c94:	91 50       	subi	r25, 0x01	; 1
    1c96:	20 40       	sbci	r18, 0x00	; 0
    1c98:	30 40       	sbci	r19, 0x00	; 0
    1c9a:	e1 f7       	brne	.-8      	; 0x1c94 <Roomba_Init+0x48>
    1c9c:	00 c0       	rjmp	.+0      	; 0x1c9e <Roomba_Init+0x52>
    1c9e:	00 00       	nop
    1ca0:	81 50       	subi	r24, 0x01	; 1
    1ca2:	51 f7       	brne	.-44     	; 0x1c78 <Roomba_Init+0x2c>
    1ca4:	45 d0       	rcall	.+138    	; 0x1d30 <uart_init>
    1ca6:	60 e0       	ldi	r22, 0x00	; 0
    1ca8:	70 e0       	ldi	r23, 0x00	; 0
    1caa:	80 e8       	ldi	r24, 0x80	; 128
    1cac:	61 d0       	rcall	.+194    	; 0x1d70 <uart_putchar>
    1cae:	8f ef       	ldi	r24, 0xFF	; 255
    1cb0:	99 ef       	ldi	r25, 0xF9	; 249
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	81 50       	subi	r24, 0x01	; 1
    1cb6:	90 40       	sbci	r25, 0x00	; 0
    1cb8:	20 40       	sbci	r18, 0x00	; 0
    1cba:	e1 f7       	brne	.-8      	; 0x1cb4 <Roomba_Init+0x68>
    1cbc:	00 c0       	rjmp	.+0      	; 0x1cbe <Roomba_Init+0x72>
    1cbe:	00 00       	nop
    1cc0:	3f ef       	ldi	r19, 0xFF	; 255
    1cc2:	81 ee       	ldi	r24, 0xE1	; 225
    1cc4:	94 e0       	ldi	r25, 0x04	; 4
    1cc6:	31 50       	subi	r19, 0x01	; 1
    1cc8:	80 40       	sbci	r24, 0x00	; 0
    1cca:	90 40       	sbci	r25, 0x00	; 0
    1ccc:	e1 f7       	brne	.-8      	; 0x1cc6 <Roomba_Init+0x7a>
    1cce:	00 c0       	rjmp	.+0      	; 0x1cd0 <Roomba_Init+0x84>
    1cd0:	00 00       	nop
    1cd2:	60 e0       	ldi	r22, 0x00	; 0
    1cd4:	70 e0       	ldi	r23, 0x00	; 0
    1cd6:	82 e8       	ldi	r24, 0x82	; 130
    1cd8:	4b d0       	rcall	.+150    	; 0x1d70 <uart_putchar>
    1cda:	2f ef       	ldi	r18, 0xFF	; 255
    1cdc:	39 ef       	ldi	r19, 0xF9	; 249
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	21 50       	subi	r18, 0x01	; 1
    1ce2:	30 40       	sbci	r19, 0x00	; 0
    1ce4:	80 40       	sbci	r24, 0x00	; 0
    1ce6:	e1 f7       	brne	.-8      	; 0x1ce0 <Roomba_Init+0x94>
    1ce8:	00 c0       	rjmp	.+0      	; 0x1cea <Roomba_Init+0x9e>
    1cea:	00 00       	nop
    1cec:	08 95       	ret

00001cee <Roomba_Drive>:

void Roomba_Drive( int16_t velocity, int16_t radius )
{
    1cee:	0f 93       	push	r16
    1cf0:	1f 93       	push	r17
    1cf2:	cf 93       	push	r28
    1cf4:	df 93       	push	r29
    1cf6:	18 2f       	mov	r17, r24
    1cf8:	09 2f       	mov	r16, r25
    1cfa:	c6 2f       	mov	r28, r22
    1cfc:	d7 2f       	mov	r29, r23
	uart_putchar(DRIVE, ROOMBA_UART);
    1cfe:	60 e0       	ldi	r22, 0x00	; 0
    1d00:	70 e0       	ldi	r23, 0x00	; 0
    1d02:	89 e8       	ldi	r24, 0x89	; 137
    1d04:	35 d0       	rcall	.+106    	; 0x1d70 <uart_putchar>
	uart_putchar(HIGH_BYTE(velocity), ROOMBA_UART);
    1d06:	60 e0       	ldi	r22, 0x00	; 0
    1d08:	70 e0       	ldi	r23, 0x00	; 0
    1d0a:	80 2f       	mov	r24, r16
    1d0c:	31 d0       	rcall	.+98     	; 0x1d70 <uart_putchar>
	uart_putchar(LOW_BYTE(velocity), ROOMBA_UART);
    1d0e:	60 e0       	ldi	r22, 0x00	; 0
    1d10:	70 e0       	ldi	r23, 0x00	; 0
    1d12:	81 2f       	mov	r24, r17
    1d14:	2d d0       	rcall	.+90     	; 0x1d70 <uart_putchar>
	uart_putchar(HIGH_BYTE(radius), ROOMBA_UART);
    1d16:	60 e0       	ldi	r22, 0x00	; 0
    1d18:	70 e0       	ldi	r23, 0x00	; 0
    1d1a:	8d 2f       	mov	r24, r29
    1d1c:	29 d0       	rcall	.+82     	; 0x1d70 <uart_putchar>
	uart_putchar(LOW_BYTE(radius), ROOMBA_UART);
    1d1e:	60 e0       	ldi	r22, 0x00	; 0
    1d20:	70 e0       	ldi	r23, 0x00	; 0
    1d22:	8c 2f       	mov	r24, r28
    1d24:	25 d0       	rcall	.+74     	; 0x1d70 <uart_putchar>
}
    1d26:	df 91       	pop	r29
    1d28:	cf 91       	pop	r28
    1d2a:	1f 91       	pop	r17
    1d2c:	0f 91       	pop	r16
    1d2e:	08 95       	ret

00001d30 <uart_init>:
		uart_putchar(*string, uart);
		string++;
	}
	
	
}
    1d30:	22 e0       	ldi	r18, 0x02	; 2
    1d32:	20 93 c0 00 	sts	0x00C0, r18
    1d36:	98 e9       	ldi	r25, 0x98	; 152
    1d38:	90 93 c1 00 	sts	0x00C1, r25
    1d3c:	86 e0       	ldi	r24, 0x06	; 6
    1d3e:	80 93 c2 00 	sts	0x00C2, r24
    1d42:	20 93 c8 00 	sts	0x00C8, r18
    1d46:	90 93 c9 00 	sts	0x00C9, r25
    1d4a:	80 93 ca 00 	sts	0x00CA, r24
    1d4e:	8f ec       	ldi	r24, 0xCF	; 207
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	90 93 cd 00 	sts	0x00CD, r25
    1d56:	80 93 cc 00 	sts	0x00CC, r24
    1d5a:	87 e6       	ldi	r24, 0x67	; 103
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	90 93 c5 00 	sts	0x00C5, r25
    1d62:	80 93 c4 00 	sts	0x00C4, r24
    1d66:	10 92 68 14 	sts	0x1468, r1
    1d6a:	10 92 67 14 	sts	0x1467, r1
    1d6e:	08 95       	ret

00001d70 <uart_putchar>:
    1d70:	67 2b       	or	r22, r23
    1d72:	41 f0       	breq	.+16     	; 0x1d84 <uart_putchar+0x14>
    1d74:	e8 ec       	ldi	r30, 0xC8	; 200
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	90 81       	ld	r25, Z
    1d7a:	95 ff       	sbrs	r25, 5
    1d7c:	fd cf       	rjmp	.-6      	; 0x1d78 <uart_putchar+0x8>
    1d7e:	80 93 ce 00 	sts	0x00CE, r24
    1d82:	08 95       	ret
    1d84:	e0 ec       	ldi	r30, 0xC0	; 192
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	90 81       	ld	r25, Z
    1d8a:	95 ff       	sbrs	r25, 5
    1d8c:	fd cf       	rjmp	.-6      	; 0x1d88 <uart_putchar+0x18>
    1d8e:	80 93 c6 00 	sts	0x00C6, r24
    1d92:	08 95       	ret

00001d94 <uart_get_byte>:
    1d94:	80 32       	cpi	r24, 0x20	; 32
    1d96:	91 05       	cpc	r25, r1
    1d98:	64 f4       	brge	.+24     	; 0x1db2 <uart_get_byte+0x1e>
    1d9a:	67 2b       	or	r22, r23
    1d9c:	29 f0       	breq	.+10     	; 0x1da8 <uart_get_byte+0x14>
    1d9e:	fc 01       	movw	r30, r24
    1da0:	e7 59       	subi	r30, 0x97	; 151
    1da2:	fb 4e       	sbci	r31, 0xEB	; 235
    1da4:	80 81       	ld	r24, Z
    1da6:	08 95       	ret
    1da8:	fc 01       	movw	r30, r24
    1daa:	e7 57       	subi	r30, 0x77	; 119
    1dac:	fb 4e       	sbci	r31, 0xEB	; 235
    1dae:	80 81       	ld	r24, Z
    1db0:	08 95       	ret
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	08 95       	ret

00001db6 <uart_bytes_received>:
    1db6:	01 97       	sbiw	r24, 0x01	; 1
    1db8:	19 f4       	brne	.+6      	; 0x1dc0 <uart_bytes_received+0xa>
    1dba:	80 91 67 14 	lds	r24, 0x1467
    1dbe:	08 95       	ret
    1dc0:	80 91 68 14 	lds	r24, 0x1468
    1dc4:	08 95       	ret

00001dc6 <uart_reset_receive>:
    1dc6:	01 97       	sbiw	r24, 0x01	; 1
    1dc8:	19 f4       	brne	.+6      	; 0x1dd0 <uart_reset_receive+0xa>
    1dca:	10 92 67 14 	sts	0x1467, r1
    1dce:	08 95       	ret
    1dd0:	10 92 68 14 	sts	0x1468, r1
    1dd4:	08 95       	ret

00001dd6 <__vector_25>:
/**
 * UART receive byte ISR
 */
ISR(USART0_RX_vect)
{
    1dd6:	1f 92       	push	r1
    1dd8:	0f 92       	push	r0
    1dda:	0f b6       	in	r0, 0x3f	; 63
    1ddc:	0f 92       	push	r0
    1dde:	11 24       	eor	r1, r1
    1de0:	0b b6       	in	r0, 0x3b	; 59
    1de2:	0f 92       	push	r0
    1de4:	8f 93       	push	r24
    1de6:	9f 93       	push	r25
    1de8:	ef 93       	push	r30
    1dea:	ff 93       	push	r31
	while(!(UCSR0A & (1<<RXC0)));
    1dec:	e0 ec       	ldi	r30, 0xC0	; 192
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	80 81       	ld	r24, Z
    1df2:	88 23       	and	r24, r24
    1df4:	ec f7       	brge	.-6      	; 0x1df0 <__vector_25+0x1a>
    uart_buffer[uart_buffer_index] = UDR0;
    1df6:	e0 91 68 14 	lds	r30, 0x1468
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 91 c6 00 	lds	r24, 0x00C6
    1e00:	e7 57       	subi	r30, 0x77	; 119
    1e02:	fb 4e       	sbci	r31, 0xEB	; 235
    1e04:	80 83       	st	Z, r24
    uart_buffer_index = (uart_buffer_index + 1) % UART_BUFFER_SIZE;
    1e06:	80 91 68 14 	lds	r24, 0x1468
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	01 96       	adiw	r24, 0x01	; 1
    1e0e:	8f 71       	andi	r24, 0x1F	; 31
    1e10:	90 78       	andi	r25, 0x80	; 128
    1e12:	99 23       	and	r25, r25
    1e14:	24 f4       	brge	.+8      	; 0x1e1e <__vector_25+0x48>
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	80 6e       	ori	r24, 0xE0	; 224
    1e1a:	9f 6f       	ori	r25, 0xFF	; 255
    1e1c:	01 96       	adiw	r24, 0x01	; 1
    1e1e:	80 93 68 14 	sts	0x1468, r24
}
    1e22:	ff 91       	pop	r31
    1e24:	ef 91       	pop	r30
    1e26:	9f 91       	pop	r25
    1e28:	8f 91       	pop	r24
    1e2a:	0f 90       	pop	r0
    1e2c:	0b be       	out	0x3b, r0	; 59
    1e2e:	0f 90       	pop	r0
    1e30:	0f be       	out	0x3f, r0	; 63
    1e32:	0f 90       	pop	r0
    1e34:	1f 90       	pop	r1
    1e36:	18 95       	reti

00001e38 <__vector_36>:

/**
 * UART receive byte ISR
 */
ISR(USART1_RX_vect)
{
    1e38:	1f 92       	push	r1
    1e3a:	0f 92       	push	r0
    1e3c:	0f b6       	in	r0, 0x3f	; 63
    1e3e:	0f 92       	push	r0
    1e40:	11 24       	eor	r1, r1
    1e42:	0b b6       	in	r0, 0x3b	; 59
    1e44:	0f 92       	push	r0
    1e46:	8f 93       	push	r24
    1e48:	9f 93       	push	r25
    1e4a:	ef 93       	push	r30
    1e4c:	ff 93       	push	r31
	while(!(UCSR1A & (1<<RXC1)));
    1e4e:	e8 ec       	ldi	r30, 0xC8	; 200
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	88 23       	and	r24, r24
    1e56:	ec f7       	brge	.-6      	; 0x1e52 <__vector_36+0x1a>
    uart_buffer_1[uart_buffer_1_index] = UDR1;
    1e58:	e0 91 67 14 	lds	r30, 0x1467
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 91 ce 00 	lds	r24, 0x00CE
    1e62:	e7 59       	subi	r30, 0x97	; 151
    1e64:	fb 4e       	sbci	r31, 0xEB	; 235
    1e66:	80 83       	st	Z, r24
    uart_buffer_1_index = (uart_buffer_1_index + 1) % UART_BUFFER_SIZE;
    1e68:	80 91 67 14 	lds	r24, 0x1467
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	01 96       	adiw	r24, 0x01	; 1
    1e70:	8f 71       	andi	r24, 0x1F	; 31
    1e72:	90 78       	andi	r25, 0x80	; 128
    1e74:	99 23       	and	r25, r25
    1e76:	24 f4       	brge	.+8      	; 0x1e80 <__vector_36+0x48>
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	80 6e       	ori	r24, 0xE0	; 224
    1e7c:	9f 6f       	ori	r25, 0xFF	; 255
    1e7e:	01 96       	adiw	r24, 0x01	; 1
    1e80:	80 93 67 14 	sts	0x1467, r24
}
    1e84:	ff 91       	pop	r31
    1e86:	ef 91       	pop	r30
    1e88:	9f 91       	pop	r25
    1e8a:	8f 91       	pop	r24
    1e8c:	0f 90       	pop	r0
    1e8e:	0b be       	out	0x3b, r0	; 59
    1e90:	0f 90       	pop	r0
    1e92:	0f be       	out	0x3f, r0	; 63
    1e94:	0f 90       	pop	r0
    1e96:	1f 90       	pop	r1
    1e98:	18 95       	reti

00001e9a <__fixsfsi>:
    1e9a:	04 d0       	rcall	.+8      	; 0x1ea4 <__fixunssfsi>
    1e9c:	68 94       	set
    1e9e:	b1 11       	cpse	r27, r1
    1ea0:	8d c0       	rjmp	.+282    	; 0x1fbc <__fp_szero>
    1ea2:	08 95       	ret

00001ea4 <__fixunssfsi>:
    1ea4:	70 d0       	rcall	.+224    	; 0x1f86 <__fp_splitA>
    1ea6:	88 f0       	brcs	.+34     	; 0x1eca <__fixunssfsi+0x26>
    1ea8:	9f 57       	subi	r25, 0x7F	; 127
    1eaa:	90 f0       	brcs	.+36     	; 0x1ed0 <__fixunssfsi+0x2c>
    1eac:	b9 2f       	mov	r27, r25
    1eae:	99 27       	eor	r25, r25
    1eb0:	b7 51       	subi	r27, 0x17	; 23
    1eb2:	a0 f0       	brcs	.+40     	; 0x1edc <__fixunssfsi+0x38>
    1eb4:	d1 f0       	breq	.+52     	; 0x1eea <__fixunssfsi+0x46>
    1eb6:	66 0f       	add	r22, r22
    1eb8:	77 1f       	adc	r23, r23
    1eba:	88 1f       	adc	r24, r24
    1ebc:	99 1f       	adc	r25, r25
    1ebe:	1a f0       	brmi	.+6      	; 0x1ec6 <__fixunssfsi+0x22>
    1ec0:	ba 95       	dec	r27
    1ec2:	c9 f7       	brne	.-14     	; 0x1eb6 <__fixunssfsi+0x12>
    1ec4:	12 c0       	rjmp	.+36     	; 0x1eea <__fixunssfsi+0x46>
    1ec6:	b1 30       	cpi	r27, 0x01	; 1
    1ec8:	81 f0       	breq	.+32     	; 0x1eea <__fixunssfsi+0x46>
    1eca:	77 d0       	rcall	.+238    	; 0x1fba <__fp_zero>
    1ecc:	b1 e0       	ldi	r27, 0x01	; 1
    1ece:	08 95       	ret
    1ed0:	74 c0       	rjmp	.+232    	; 0x1fba <__fp_zero>
    1ed2:	67 2f       	mov	r22, r23
    1ed4:	78 2f       	mov	r23, r24
    1ed6:	88 27       	eor	r24, r24
    1ed8:	b8 5f       	subi	r27, 0xF8	; 248
    1eda:	39 f0       	breq	.+14     	; 0x1eea <__fixunssfsi+0x46>
    1edc:	b9 3f       	cpi	r27, 0xF9	; 249
    1ede:	cc f3       	brlt	.-14     	; 0x1ed2 <__fixunssfsi+0x2e>
    1ee0:	86 95       	lsr	r24
    1ee2:	77 95       	ror	r23
    1ee4:	67 95       	ror	r22
    1ee6:	b3 95       	inc	r27
    1ee8:	d9 f7       	brne	.-10     	; 0x1ee0 <__fixunssfsi+0x3c>
    1eea:	3e f4       	brtc	.+14     	; 0x1efa <__fixunssfsi+0x56>
    1eec:	90 95       	com	r25
    1eee:	80 95       	com	r24
    1ef0:	70 95       	com	r23
    1ef2:	61 95       	neg	r22
    1ef4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ef8:	9f 4f       	sbci	r25, 0xFF	; 255
    1efa:	08 95       	ret

00001efc <__floatunsisf>:
    1efc:	e8 94       	clt
    1efe:	09 c0       	rjmp	.+18     	; 0x1f12 <__floatsisf+0x12>

00001f00 <__floatsisf>:
    1f00:	97 fb       	bst	r25, 7
    1f02:	3e f4       	brtc	.+14     	; 0x1f12 <__floatsisf+0x12>
    1f04:	90 95       	com	r25
    1f06:	80 95       	com	r24
    1f08:	70 95       	com	r23
    1f0a:	61 95       	neg	r22
    1f0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f0e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f10:	9f 4f       	sbci	r25, 0xFF	; 255
    1f12:	99 23       	and	r25, r25
    1f14:	a9 f0       	breq	.+42     	; 0x1f40 <__floatsisf+0x40>
    1f16:	f9 2f       	mov	r31, r25
    1f18:	96 e9       	ldi	r25, 0x96	; 150
    1f1a:	bb 27       	eor	r27, r27
    1f1c:	93 95       	inc	r25
    1f1e:	f6 95       	lsr	r31
    1f20:	87 95       	ror	r24
    1f22:	77 95       	ror	r23
    1f24:	67 95       	ror	r22
    1f26:	b7 95       	ror	r27
    1f28:	f1 11       	cpse	r31, r1
    1f2a:	f8 cf       	rjmp	.-16     	; 0x1f1c <__floatsisf+0x1c>
    1f2c:	fa f4       	brpl	.+62     	; 0x1f6c <__floatsisf+0x6c>
    1f2e:	bb 0f       	add	r27, r27
    1f30:	11 f4       	brne	.+4      	; 0x1f36 <__floatsisf+0x36>
    1f32:	60 ff       	sbrs	r22, 0
    1f34:	1b c0       	rjmp	.+54     	; 0x1f6c <__floatsisf+0x6c>
    1f36:	6f 5f       	subi	r22, 0xFF	; 255
    1f38:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f3e:	16 c0       	rjmp	.+44     	; 0x1f6c <__floatsisf+0x6c>
    1f40:	88 23       	and	r24, r24
    1f42:	11 f0       	breq	.+4      	; 0x1f48 <__floatsisf+0x48>
    1f44:	96 e9       	ldi	r25, 0x96	; 150
    1f46:	11 c0       	rjmp	.+34     	; 0x1f6a <__floatsisf+0x6a>
    1f48:	77 23       	and	r23, r23
    1f4a:	21 f0       	breq	.+8      	; 0x1f54 <__floatsisf+0x54>
    1f4c:	9e e8       	ldi	r25, 0x8E	; 142
    1f4e:	87 2f       	mov	r24, r23
    1f50:	76 2f       	mov	r23, r22
    1f52:	05 c0       	rjmp	.+10     	; 0x1f5e <__floatsisf+0x5e>
    1f54:	66 23       	and	r22, r22
    1f56:	71 f0       	breq	.+28     	; 0x1f74 <__floatsisf+0x74>
    1f58:	96 e8       	ldi	r25, 0x86	; 134
    1f5a:	86 2f       	mov	r24, r22
    1f5c:	70 e0       	ldi	r23, 0x00	; 0
    1f5e:	60 e0       	ldi	r22, 0x00	; 0
    1f60:	2a f0       	brmi	.+10     	; 0x1f6c <__floatsisf+0x6c>
    1f62:	9a 95       	dec	r25
    1f64:	66 0f       	add	r22, r22
    1f66:	77 1f       	adc	r23, r23
    1f68:	88 1f       	adc	r24, r24
    1f6a:	da f7       	brpl	.-10     	; 0x1f62 <__floatsisf+0x62>
    1f6c:	88 0f       	add	r24, r24
    1f6e:	96 95       	lsr	r25
    1f70:	87 95       	ror	r24
    1f72:	97 f9       	bld	r25, 7
    1f74:	08 95       	ret

00001f76 <__fp_split3>:
    1f76:	57 fd       	sbrc	r21, 7
    1f78:	90 58       	subi	r25, 0x80	; 128
    1f7a:	44 0f       	add	r20, r20
    1f7c:	55 1f       	adc	r21, r21
    1f7e:	59 f0       	breq	.+22     	; 0x1f96 <__fp_splitA+0x10>
    1f80:	5f 3f       	cpi	r21, 0xFF	; 255
    1f82:	71 f0       	breq	.+28     	; 0x1fa0 <__fp_splitA+0x1a>
    1f84:	47 95       	ror	r20

00001f86 <__fp_splitA>:
    1f86:	88 0f       	add	r24, r24
    1f88:	97 fb       	bst	r25, 7
    1f8a:	99 1f       	adc	r25, r25
    1f8c:	61 f0       	breq	.+24     	; 0x1fa6 <__fp_splitA+0x20>
    1f8e:	9f 3f       	cpi	r25, 0xFF	; 255
    1f90:	79 f0       	breq	.+30     	; 0x1fb0 <__fp_splitA+0x2a>
    1f92:	87 95       	ror	r24
    1f94:	08 95       	ret
    1f96:	12 16       	cp	r1, r18
    1f98:	13 06       	cpc	r1, r19
    1f9a:	14 06       	cpc	r1, r20
    1f9c:	55 1f       	adc	r21, r21
    1f9e:	f2 cf       	rjmp	.-28     	; 0x1f84 <__fp_split3+0xe>
    1fa0:	46 95       	lsr	r20
    1fa2:	f1 df       	rcall	.-30     	; 0x1f86 <__fp_splitA>
    1fa4:	08 c0       	rjmp	.+16     	; 0x1fb6 <__fp_splitA+0x30>
    1fa6:	16 16       	cp	r1, r22
    1fa8:	17 06       	cpc	r1, r23
    1faa:	18 06       	cpc	r1, r24
    1fac:	99 1f       	adc	r25, r25
    1fae:	f1 cf       	rjmp	.-30     	; 0x1f92 <__fp_splitA+0xc>
    1fb0:	86 95       	lsr	r24
    1fb2:	71 05       	cpc	r23, r1
    1fb4:	61 05       	cpc	r22, r1
    1fb6:	08 94       	sec
    1fb8:	08 95       	ret

00001fba <__fp_zero>:
    1fba:	e8 94       	clt

00001fbc <__fp_szero>:
    1fbc:	bb 27       	eor	r27, r27
    1fbe:	66 27       	eor	r22, r22
    1fc0:	77 27       	eor	r23, r23
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	97 f9       	bld	r25, 7
    1fc6:	08 95       	ret

00001fc8 <__mulsf3>:
    1fc8:	0b d0       	rcall	.+22     	; 0x1fe0 <__mulsf3x>
    1fca:	78 c0       	rjmp	.+240    	; 0x20bc <__fp_round>
    1fcc:	69 d0       	rcall	.+210    	; 0x20a0 <__fp_pscA>
    1fce:	28 f0       	brcs	.+10     	; 0x1fda <__mulsf3+0x12>
    1fd0:	6e d0       	rcall	.+220    	; 0x20ae <__fp_pscB>
    1fd2:	18 f0       	brcs	.+6      	; 0x1fda <__mulsf3+0x12>
    1fd4:	95 23       	and	r25, r21
    1fd6:	09 f0       	breq	.+2      	; 0x1fda <__mulsf3+0x12>
    1fd8:	5a c0       	rjmp	.+180    	; 0x208e <__fp_inf>
    1fda:	5f c0       	rjmp	.+190    	; 0x209a <__fp_nan>
    1fdc:	11 24       	eor	r1, r1
    1fde:	ee cf       	rjmp	.-36     	; 0x1fbc <__fp_szero>

00001fe0 <__mulsf3x>:
    1fe0:	ca df       	rcall	.-108    	; 0x1f76 <__fp_split3>
    1fe2:	a0 f3       	brcs	.-24     	; 0x1fcc <__mulsf3+0x4>

00001fe4 <__mulsf3_pse>:
    1fe4:	95 9f       	mul	r25, r21
    1fe6:	d1 f3       	breq	.-12     	; 0x1fdc <__mulsf3+0x14>
    1fe8:	95 0f       	add	r25, r21
    1fea:	50 e0       	ldi	r21, 0x00	; 0
    1fec:	55 1f       	adc	r21, r21
    1fee:	62 9f       	mul	r22, r18
    1ff0:	f0 01       	movw	r30, r0
    1ff2:	72 9f       	mul	r23, r18
    1ff4:	bb 27       	eor	r27, r27
    1ff6:	f0 0d       	add	r31, r0
    1ff8:	b1 1d       	adc	r27, r1
    1ffa:	63 9f       	mul	r22, r19
    1ffc:	aa 27       	eor	r26, r26
    1ffe:	f0 0d       	add	r31, r0
    2000:	b1 1d       	adc	r27, r1
    2002:	aa 1f       	adc	r26, r26
    2004:	64 9f       	mul	r22, r20
    2006:	66 27       	eor	r22, r22
    2008:	b0 0d       	add	r27, r0
    200a:	a1 1d       	adc	r26, r1
    200c:	66 1f       	adc	r22, r22
    200e:	82 9f       	mul	r24, r18
    2010:	22 27       	eor	r18, r18
    2012:	b0 0d       	add	r27, r0
    2014:	a1 1d       	adc	r26, r1
    2016:	62 1f       	adc	r22, r18
    2018:	73 9f       	mul	r23, r19
    201a:	b0 0d       	add	r27, r0
    201c:	a1 1d       	adc	r26, r1
    201e:	62 1f       	adc	r22, r18
    2020:	83 9f       	mul	r24, r19
    2022:	a0 0d       	add	r26, r0
    2024:	61 1d       	adc	r22, r1
    2026:	22 1f       	adc	r18, r18
    2028:	74 9f       	mul	r23, r20
    202a:	33 27       	eor	r19, r19
    202c:	a0 0d       	add	r26, r0
    202e:	61 1d       	adc	r22, r1
    2030:	23 1f       	adc	r18, r19
    2032:	84 9f       	mul	r24, r20
    2034:	60 0d       	add	r22, r0
    2036:	21 1d       	adc	r18, r1
    2038:	82 2f       	mov	r24, r18
    203a:	76 2f       	mov	r23, r22
    203c:	6a 2f       	mov	r22, r26
    203e:	11 24       	eor	r1, r1
    2040:	9f 57       	subi	r25, 0x7F	; 127
    2042:	50 40       	sbci	r21, 0x00	; 0
    2044:	8a f0       	brmi	.+34     	; 0x2068 <__mulsf3_pse+0x84>
    2046:	e1 f0       	breq	.+56     	; 0x2080 <__mulsf3_pse+0x9c>
    2048:	88 23       	and	r24, r24
    204a:	4a f0       	brmi	.+18     	; 0x205e <__mulsf3_pse+0x7a>
    204c:	ee 0f       	add	r30, r30
    204e:	ff 1f       	adc	r31, r31
    2050:	bb 1f       	adc	r27, r27
    2052:	66 1f       	adc	r22, r22
    2054:	77 1f       	adc	r23, r23
    2056:	88 1f       	adc	r24, r24
    2058:	91 50       	subi	r25, 0x01	; 1
    205a:	50 40       	sbci	r21, 0x00	; 0
    205c:	a9 f7       	brne	.-22     	; 0x2048 <__mulsf3_pse+0x64>
    205e:	9e 3f       	cpi	r25, 0xFE	; 254
    2060:	51 05       	cpc	r21, r1
    2062:	70 f0       	brcs	.+28     	; 0x2080 <__mulsf3_pse+0x9c>
    2064:	14 c0       	rjmp	.+40     	; 0x208e <__fp_inf>
    2066:	aa cf       	rjmp	.-172    	; 0x1fbc <__fp_szero>
    2068:	5f 3f       	cpi	r21, 0xFF	; 255
    206a:	ec f3       	brlt	.-6      	; 0x2066 <__mulsf3_pse+0x82>
    206c:	98 3e       	cpi	r25, 0xE8	; 232
    206e:	dc f3       	brlt	.-10     	; 0x2066 <__mulsf3_pse+0x82>
    2070:	86 95       	lsr	r24
    2072:	77 95       	ror	r23
    2074:	67 95       	ror	r22
    2076:	b7 95       	ror	r27
    2078:	f7 95       	ror	r31
    207a:	e7 95       	ror	r30
    207c:	9f 5f       	subi	r25, 0xFF	; 255
    207e:	c1 f7       	brne	.-16     	; 0x2070 <__mulsf3_pse+0x8c>
    2080:	fe 2b       	or	r31, r30
    2082:	88 0f       	add	r24, r24
    2084:	91 1d       	adc	r25, r1
    2086:	96 95       	lsr	r25
    2088:	87 95       	ror	r24
    208a:	97 f9       	bld	r25, 7
    208c:	08 95       	ret

0000208e <__fp_inf>:
    208e:	97 f9       	bld	r25, 7
    2090:	9f 67       	ori	r25, 0x7F	; 127
    2092:	80 e8       	ldi	r24, 0x80	; 128
    2094:	70 e0       	ldi	r23, 0x00	; 0
    2096:	60 e0       	ldi	r22, 0x00	; 0
    2098:	08 95       	ret

0000209a <__fp_nan>:
    209a:	9f ef       	ldi	r25, 0xFF	; 255
    209c:	80 ec       	ldi	r24, 0xC0	; 192
    209e:	08 95       	ret

000020a0 <__fp_pscA>:
    20a0:	00 24       	eor	r0, r0
    20a2:	0a 94       	dec	r0
    20a4:	16 16       	cp	r1, r22
    20a6:	17 06       	cpc	r1, r23
    20a8:	18 06       	cpc	r1, r24
    20aa:	09 06       	cpc	r0, r25
    20ac:	08 95       	ret

000020ae <__fp_pscB>:
    20ae:	00 24       	eor	r0, r0
    20b0:	0a 94       	dec	r0
    20b2:	12 16       	cp	r1, r18
    20b4:	13 06       	cpc	r1, r19
    20b6:	14 06       	cpc	r1, r20
    20b8:	05 06       	cpc	r0, r21
    20ba:	08 95       	ret

000020bc <__fp_round>:
    20bc:	09 2e       	mov	r0, r25
    20be:	03 94       	inc	r0
    20c0:	00 0c       	add	r0, r0
    20c2:	11 f4       	brne	.+4      	; 0x20c8 <__fp_round+0xc>
    20c4:	88 23       	and	r24, r24
    20c6:	52 f0       	brmi	.+20     	; 0x20dc <__fp_round+0x20>
    20c8:	bb 0f       	add	r27, r27
    20ca:	40 f4       	brcc	.+16     	; 0x20dc <__fp_round+0x20>
    20cc:	bf 2b       	or	r27, r31
    20ce:	11 f4       	brne	.+4      	; 0x20d4 <__fp_round+0x18>
    20d0:	60 ff       	sbrs	r22, 0
    20d2:	04 c0       	rjmp	.+8      	; 0x20dc <__fp_round+0x20>
    20d4:	6f 5f       	subi	r22, 0xFF	; 255
    20d6:	7f 4f       	sbci	r23, 0xFF	; 255
    20d8:	8f 4f       	sbci	r24, 0xFF	; 255
    20da:	9f 4f       	sbci	r25, 0xFF	; 255
    20dc:	08 95       	ret

000020de <__udivmodhi4>:
    20de:	aa 1b       	sub	r26, r26
    20e0:	bb 1b       	sub	r27, r27
    20e2:	51 e1       	ldi	r21, 0x11	; 17
    20e4:	07 c0       	rjmp	.+14     	; 0x20f4 <__udivmodhi4_ep>

000020e6 <__udivmodhi4_loop>:
    20e6:	aa 1f       	adc	r26, r26
    20e8:	bb 1f       	adc	r27, r27
    20ea:	a6 17       	cp	r26, r22
    20ec:	b7 07       	cpc	r27, r23
    20ee:	10 f0       	brcs	.+4      	; 0x20f4 <__udivmodhi4_ep>
    20f0:	a6 1b       	sub	r26, r22
    20f2:	b7 0b       	sbc	r27, r23

000020f4 <__udivmodhi4_ep>:
    20f4:	88 1f       	adc	r24, r24
    20f6:	99 1f       	adc	r25, r25
    20f8:	5a 95       	dec	r21
    20fa:	a9 f7       	brne	.-22     	; 0x20e6 <__udivmodhi4_loop>
    20fc:	80 95       	com	r24
    20fe:	90 95       	com	r25
    2100:	bc 01       	movw	r22, r24
    2102:	cd 01       	movw	r24, r26
    2104:	08 95       	ret

00002106 <__divmodhi4>:
    2106:	97 fb       	bst	r25, 7
    2108:	07 2e       	mov	r0, r23
    210a:	16 f4       	brtc	.+4      	; 0x2110 <__divmodhi4+0xa>
    210c:	00 94       	com	r0
    210e:	06 d0       	rcall	.+12     	; 0x211c <__divmodhi4_neg1>
    2110:	77 fd       	sbrc	r23, 7
    2112:	08 d0       	rcall	.+16     	; 0x2124 <__divmodhi4_neg2>
    2114:	e4 df       	rcall	.-56     	; 0x20de <__udivmodhi4>
    2116:	07 fc       	sbrc	r0, 7
    2118:	05 d0       	rcall	.+10     	; 0x2124 <__divmodhi4_neg2>
    211a:	3e f4       	brtc	.+14     	; 0x212a <__divmodhi4_exit>

0000211c <__divmodhi4_neg1>:
    211c:	90 95       	com	r25
    211e:	81 95       	neg	r24
    2120:	9f 4f       	sbci	r25, 0xFF	; 255
    2122:	08 95       	ret

00002124 <__divmodhi4_neg2>:
    2124:	70 95       	com	r23
    2126:	61 95       	neg	r22
    2128:	7f 4f       	sbci	r23, 0xFF	; 255

0000212a <__divmodhi4_exit>:
    212a:	08 95       	ret

0000212c <__tablejump2__>:
    212c:	ee 0f       	add	r30, r30
    212e:	ff 1f       	adc	r31, r31
    2130:	88 1f       	adc	r24, r24
    2132:	8b bf       	out	0x3b, r24	; 59
    2134:	07 90       	elpm	r0, Z+
    2136:	f6 91       	elpm	r31, Z
    2138:	e0 2d       	mov	r30, r0
    213a:	19 94       	eijmp

0000213c <_exit>:
    213c:	f8 94       	cli

0000213e <__stop_program>:
    213e:	ff cf       	rjmp	.-2      	; 0x213e <__stop_program>
