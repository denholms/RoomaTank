
roomba.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800200  00002228  000022bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002228  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000132a  0080022e  0080022e  000022ea  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000022ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002348  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00002388  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027a3  00000000  00000000  000025f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b29  00000000  00000000  00004d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017d1  00000000  00000000  000058c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006b0  00000000  00000000  00007098  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000931  00000000  00000000  00007748  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b9d  00000000  00000000  00008079  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  00009c16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c0       	rjmp	.+252    	; 0xfe <__ctors_end>
       2:	00 00       	nop
       4:	9d c0       	rjmp	.+314    	; 0x140 <__bad_interrupt>
       6:	00 00       	nop
       8:	9b c0       	rjmp	.+310    	; 0x140 <__bad_interrupt>
       a:	00 00       	nop
       c:	99 c0       	rjmp	.+306    	; 0x140 <__bad_interrupt>
       e:	00 00       	nop
      10:	97 c0       	rjmp	.+302    	; 0x140 <__bad_interrupt>
      12:	00 00       	nop
      14:	95 c0       	rjmp	.+298    	; 0x140 <__bad_interrupt>
      16:	00 00       	nop
      18:	93 c0       	rjmp	.+294    	; 0x140 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	91 c0       	rjmp	.+290    	; 0x140 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8f c0       	rjmp	.+286    	; 0x140 <__bad_interrupt>
      22:	00 00       	nop
      24:	8d c0       	rjmp	.+282    	; 0x140 <__bad_interrupt>
      26:	00 00       	nop
      28:	8b c0       	rjmp	.+278    	; 0x140 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	89 c0       	rjmp	.+274    	; 0x140 <__bad_interrupt>
      2e:	00 00       	nop
      30:	87 c0       	rjmp	.+270    	; 0x140 <__bad_interrupt>
      32:	00 00       	nop
      34:	85 c0       	rjmp	.+266    	; 0x140 <__bad_interrupt>
      36:	00 00       	nop
      38:	83 c0       	rjmp	.+262    	; 0x140 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	81 c0       	rjmp	.+258    	; 0x140 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7f c0       	rjmp	.+254    	; 0x140 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 86 0a 	jmp	0x150c	; 0x150c <__vector_17>
      48:	7b c0       	rjmp	.+246    	; 0x140 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	79 c0       	rjmp	.+242    	; 0x140 <__bad_interrupt>
      4e:	00 00       	nop
      50:	77 c0       	rjmp	.+238    	; 0x140 <__bad_interrupt>
      52:	00 00       	nop
      54:	75 c0       	rjmp	.+234    	; 0x140 <__bad_interrupt>
      56:	00 00       	nop
      58:	73 c0       	rjmp	.+230    	; 0x140 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	71 c0       	rjmp	.+226    	; 0x140 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6f c0       	rjmp	.+222    	; 0x140 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 cb 0d 	jmp	0x1b96	; 0x1b96 <__vector_25>
      68:	6b c0       	rjmp	.+214    	; 0x140 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	69 c0       	rjmp	.+210    	; 0x140 <__bad_interrupt>
      6e:	00 00       	nop
      70:	67 c0       	rjmp	.+206    	; 0x140 <__bad_interrupt>
      72:	00 00       	nop
      74:	65 c0       	rjmp	.+202    	; 0x140 <__bad_interrupt>
      76:	00 00       	nop
      78:	63 c0       	rjmp	.+198    	; 0x140 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	61 c0       	rjmp	.+194    	; 0x140 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__vector_32>
      84:	5d c0       	rjmp	.+186    	; 0x140 <__bad_interrupt>
      86:	00 00       	nop
      88:	5b c0       	rjmp	.+182    	; 0x140 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	59 c0       	rjmp	.+178    	; 0x140 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 fc 0d 	jmp	0x1bf8	; 0x1bf8 <__vector_36>
      94:	55 c0       	rjmp	.+170    	; 0x140 <__bad_interrupt>
      96:	00 00       	nop
      98:	53 c0       	rjmp	.+166    	; 0x140 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	51 c0       	rjmp	.+162    	; 0x140 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4f c0       	rjmp	.+158    	; 0x140 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4d c0       	rjmp	.+154    	; 0x140 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4b c0       	rjmp	.+150    	; 0x140 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	49 c0       	rjmp	.+146    	; 0x140 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	47 c0       	rjmp	.+142    	; 0x140 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	45 c0       	rjmp	.+138    	; 0x140 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	43 c0       	rjmp	.+134    	; 0x140 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	41 c0       	rjmp	.+130    	; 0x140 <__bad_interrupt>
      be:	00 00       	nop
      c0:	3f c0       	rjmp	.+126    	; 0x140 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3d c0       	rjmp	.+122    	; 0x140 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3b c0       	rjmp	.+118    	; 0x140 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	39 c0       	rjmp	.+114    	; 0x140 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	37 c0       	rjmp	.+110    	; 0x140 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	35 c0       	rjmp	.+106    	; 0x140 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	33 c0       	rjmp	.+102    	; 0x140 <__bad_interrupt>
      da:	00 00       	nop
      dc:	31 c0       	rjmp	.+98     	; 0x140 <__bad_interrupt>
      de:	00 00       	nop
      e0:	2f c0       	rjmp	.+94     	; 0x140 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	61 06       	cpc	r6, r17
      e6:	47 06       	cpc	r4, r23
      e8:	61 06       	cpc	r6, r17
      ea:	70 06       	cpc	r7, r16
      ec:	15 07       	cpc	r17, r21
      ee:	7f 06       	cpc	r7, r31
      f0:	38 06       	cpc	r3, r24
      f2:	68 07       	cpc	r22, r24
      f4:	9d 07       	cpc	r25, r29
      f6:	3f 08       	sbc	r3, r15
      f8:	41 08       	sbc	r4, r1
      fa:	77 08       	sbc	r7, r7
      fc:	e2 08       	sbc	r14, r2

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d1 e2       	ldi	r29, 0x21	; 33
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0c bf       	out	0x3c, r16	; 60

0000010e <__do_copy_data>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a0 e0       	ldi	r26, 0x00	; 0
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	e8 e2       	ldi	r30, 0x28	; 40
     116:	f2 e2       	ldi	r31, 0x22	; 34
     118:	00 e0       	ldi	r16, 0x00	; 0
     11a:	0b bf       	out	0x3b, r16	; 59
     11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x14>
     11e:	07 90       	elpm	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	ae 32       	cpi	r26, 0x2E	; 46
     124:	b1 07       	cpc	r27, r17
     126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0x10>

00000128 <__do_clear_bss>:
     128:	25 e1       	ldi	r18, 0x15	; 21
     12a:	ae e2       	ldi	r26, 0x2E	; 46
     12c:	b2 e0       	ldi	r27, 0x02	; 2
     12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
     130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
     132:	a8 35       	cpi	r26, 0x58	; 88
     134:	b2 07       	cpc	r27, r18
     136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>
     138:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <main>
     13c:	0c 94 12 11 	jmp	0x2224	; 0x2224 <_exit>

00000140 <__bad_interrupt>:
     140:	5f cf       	rjmp	.-322    	; 0x0 <__vectors>

00000142 <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
     142:	0f 92       	push	r0
     144:	1f 92       	push	r1
     146:	2f 92       	push	r2
     148:	3f 92       	push	r3
     14a:	4f 92       	push	r4
     14c:	5f 92       	push	r5
     14e:	6f 92       	push	r6
     150:	7f 92       	push	r7
     152:	8f 92       	push	r8
     154:	9f 92       	push	r9
     156:	af 92       	push	r10
     158:	bf 92       	push	r11
     15a:	cf 92       	push	r12
     15c:	df 92       	push	r13
     15e:	ef 92       	push	r14
     160:	ff 92       	push	r15
     162:	0f 93       	push	r16
     164:	1f 93       	push	r17
     166:	2f 93       	push	r18
     168:	3f 93       	push	r19
     16a:	4f 93       	push	r20
     16c:	5f 93       	push	r21
     16e:	6f 93       	push	r22
     170:	7f 93       	push	r23
     172:	8f 93       	push	r24
     174:	9f 93       	push	r25
     176:	af 93       	push	r26
     178:	bf 93       	push	r27
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	ef 93       	push	r30
     180:	ff 93       	push	r31
     182:	0f b7       	in	r16, 0x3f	; 63
     184:	0f 93       	push	r16
     186:	fc b7       	in	r31, 0x3c	; 60
     188:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
     18a:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     18c:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
     18e:	e0 93 56 15 	sts	0x1556, r30
        sts  KernelSp+1, r31
     192:	f0 93 57 15 	sts	0x1557, r31
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
     196:	e0 91 34 15 	lds	r30, 0x1534
        lds  r31, CurrentSp+1
     19a:	f0 91 35 15 	lds	r31, 0x1535
        out  SPL, r30
     19e:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     1a0:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
     1a2:	ff 91       	pop	r31
     1a4:	fc bf       	out	0x3c, r31	; 60
     1a6:	0f 91       	pop	r16
     1a8:	0f bf       	out	0x3f, r16	; 63
     1aa:	ff 91       	pop	r31
     1ac:	ef 91       	pop	r30
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	bf 91       	pop	r27
     1b4:	af 91       	pop	r26
     1b6:	9f 91       	pop	r25
     1b8:	8f 91       	pop	r24
     1ba:	7f 91       	pop	r23
     1bc:	6f 91       	pop	r22
     1be:	5f 91       	pop	r21
     1c0:	4f 91       	pop	r20
     1c2:	3f 91       	pop	r19
     1c4:	2f 91       	pop	r18
     1c6:	1f 91       	pop	r17
     1c8:	0f 91       	pop	r16
     1ca:	ff 90       	pop	r15
     1cc:	ef 90       	pop	r14
     1ce:	df 90       	pop	r13
     1d0:	cf 90       	pop	r12
     1d2:	bf 90       	pop	r11
     1d4:	af 90       	pop	r10
     1d6:	9f 90       	pop	r9
     1d8:	8f 90       	pop	r8
     1da:	7f 90       	pop	r7
     1dc:	6f 90       	pop	r6
     1de:	5f 90       	pop	r5
     1e0:	4f 90       	pop	r4
     1e2:	3f 90       	pop	r3
     1e4:	2f 90       	pop	r2
     1e6:	1f 90       	pop	r1
     1e8:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
     1ea:	18 95       	reti

000001ec <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
     1ec:	0f 92       	push	r0
     1ee:	1f 92       	push	r1
     1f0:	2f 92       	push	r2
     1f2:	3f 92       	push	r3
     1f4:	4f 92       	push	r4
     1f6:	5f 92       	push	r5
     1f8:	6f 92       	push	r6
     1fa:	7f 92       	push	r7
     1fc:	8f 92       	push	r8
     1fe:	9f 92       	push	r9
     200:	af 92       	push	r10
     202:	bf 92       	push	r11
     204:	cf 92       	push	r12
     206:	df 92       	push	r13
     208:	ef 92       	push	r14
     20a:	ff 92       	push	r15
     20c:	0f 93       	push	r16
     20e:	1f 93       	push	r17
     210:	2f 93       	push	r18
     212:	3f 93       	push	r19
     214:	4f 93       	push	r20
     216:	5f 93       	push	r21
     218:	6f 93       	push	r22
     21a:	7f 93       	push	r23
     21c:	8f 93       	push	r24
     21e:	9f 93       	push	r25
     220:	af 93       	push	r26
     222:	bf 93       	push	r27
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	ef 93       	push	r30
     22a:	ff 93       	push	r31
     22c:	0f b7       	in	r16, 0x3f	; 63
     22e:	0f 93       	push	r16
     230:	fc b7       	in	r31, 0x3c	; 60
     232:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
     234:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     236:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
     238:	e0 93 34 15 	sts	0x1534, r30
        sts  CurrentSp+1, r31
     23c:	f0 93 35 15 	sts	0x1535, r31
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
     240:	e0 91 56 15 	lds	r30, 0x1556
        lds  r31, KernelSp+1
     244:	f0 91 57 15 	lds	r31, 0x1557
        out  SPL, r30
     248:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     24a:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
     24c:	ff 91       	pop	r31
     24e:	fc bf       	out	0x3c, r31	; 60
     250:	0f 91       	pop	r16
     252:	0f bf       	out	0x3f, r16	; 63
     254:	ff 91       	pop	r31
     256:	ef 91       	pop	r30
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	bf 91       	pop	r27
     25e:	af 91       	pop	r26
     260:	9f 91       	pop	r25
     262:	8f 91       	pop	r24
     264:	7f 91       	pop	r23
     266:	6f 91       	pop	r22
     268:	5f 91       	pop	r21
     26a:	4f 91       	pop	r20
     26c:	3f 91       	pop	r19
     26e:	2f 91       	pop	r18
     270:	1f 91       	pop	r17
     272:	0f 91       	pop	r16
     274:	ff 90       	pop	r15
     276:	ef 90       	pop	r14
     278:	df 90       	pop	r13
     27a:	cf 90       	pop	r12
     27c:	bf 90       	pop	r11
     27e:	af 90       	pop	r10
     280:	9f 90       	pop	r9
     282:	8f 90       	pop	r8
     284:	7f 90       	pop	r7
     286:	6f 90       	pop	r6
     288:	5f 90       	pop	r5
     28a:	4f 90       	pop	r4
     28c:	3f 90       	pop	r3
     28e:	2f 90       	pop	r2
     290:	1f 90       	pop	r1
     292:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
     294:	08 95       	ret

00000296 <adc_init>:

// initialize adc
void adc_init()
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
     296:	80 e4       	ldi	r24, 0x40	; 64
     298:	80 93 7c 00 	sts	0x007C, r24
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     29c:	87 e8       	ldi	r24, 0x87	; 135
     29e:	80 93 7a 00 	sts	0x007A, r24
     2a2:	08 95       	ret

000002a4 <adc_read>:
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     2a4:	ec e7       	ldi	r30, 0x7C	; 124
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	90 81       	ld	r25, Z
uint16_t adc_read(uint8_t ch)
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
     2aa:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     2ac:	98 7f       	andi	r25, 0xF8	; 248
     2ae:	89 2b       	or	r24, r25
     2b0:	80 83       	st	Z, r24
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
     2b2:	ea e7       	ldi	r30, 0x7A	; 122
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	80 81       	ld	r24, Z
     2b8:	80 64       	ori	r24, 0x40	; 64
     2ba:	80 83       	st	Z, r24
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
     2bc:	80 81       	ld	r24, Z
     2be:	86 fd       	sbrc	r24, 6
     2c0:	fd cf       	rjmp	.-6      	; 0x2bc <adc_read+0x18>
	
	return (ADC);
     2c2:	80 91 78 00 	lds	r24, 0x0078
     2c6:	90 91 79 00 	lds	r25, 0x0079
}
     2ca:	08 95       	ret

000002cc <lcd_nibble>:

void lcd_blank( uint8_t len )                   // blank n digits
{
  while( len-- )
    lcd_putchar( ' ' );
}
     2cc:	e2 e0       	ldi	r30, 0x02	; 2
     2ce:	f1 e0       	ldi	r31, 0x01	; 1
     2d0:	90 81       	ld	r25, Z
     2d2:	9f 7e       	andi	r25, 0xEF	; 239
     2d4:	90 83       	st	Z, r25
     2d6:	88 23       	and	r24, r24
     2d8:	1c f4       	brge	.+6      	; 0x2e0 <lcd_nibble+0x14>
     2da:	90 81       	ld	r25, Z
     2dc:	90 61       	ori	r25, 0x10	; 16
     2de:	90 83       	st	Z, r25
     2e0:	e2 e0       	ldi	r30, 0x02	; 2
     2e2:	f1 e0       	ldi	r31, 0x01	; 1
     2e4:	90 81       	ld	r25, Z
     2e6:	97 7f       	andi	r25, 0xF7	; 247
     2e8:	90 83       	st	Z, r25
     2ea:	86 ff       	sbrs	r24, 6
     2ec:	03 c0       	rjmp	.+6      	; 0x2f4 <lcd_nibble+0x28>
     2ee:	90 81       	ld	r25, Z
     2f0:	98 60       	ori	r25, 0x08	; 8
     2f2:	90 83       	st	Z, r25
     2f4:	73 98       	cbi	0x0e, 3	; 14
     2f6:	85 fd       	sbrc	r24, 5
     2f8:	73 9a       	sbi	0x0e, 3	; 14
     2fa:	a5 98       	cbi	0x14, 5	; 20
     2fc:	84 fd       	sbrc	r24, 4
     2fe:	a5 9a       	sbi	0x14, 5	; 20
     300:	e2 e0       	ldi	r30, 0x02	; 2
     302:	f1 e0       	ldi	r31, 0x01	; 1
     304:	80 81       	ld	r24, Z
     306:	80 64       	ori	r24, 0x40	; 64
     308:	80 83       	st	Z, r24
     30a:	85 e0       	ldi	r24, 0x05	; 5
     30c:	8a 95       	dec	r24
     30e:	f1 f7       	brne	.-4      	; 0x30c <lcd_nibble+0x40>
     310:	00 00       	nop
     312:	80 81       	ld	r24, Z
     314:	8f 7b       	andi	r24, 0xBF	; 191
     316:	80 83       	st	Z, r24
     318:	08 95       	ret

0000031a <lcd_command>:
     31a:	cf 93       	push	r28
     31c:	c8 2f       	mov	r28, r24
     31e:	e2 e0       	ldi	r30, 0x02	; 2
     320:	f1 e0       	ldi	r31, 0x01	; 1
     322:	80 81       	ld	r24, Z
     324:	8f 7d       	andi	r24, 0xDF	; 223
     326:	80 83       	st	Z, r24
     328:	8c 2f       	mov	r24, r28
     32a:	d0 df       	rcall	.-96     	; 0x2cc <lcd_nibble>
     32c:	8c 2f       	mov	r24, r28
     32e:	82 95       	swap	r24
     330:	80 7f       	andi	r24, 0xF0	; 240
     332:	cc df       	rcall	.-104    	; 0x2cc <lcd_nibble>
     334:	87 ec       	ldi	r24, 0xC7	; 199
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	01 97       	sbiw	r24, 0x01	; 1
     33a:	f1 f7       	brne	.-4      	; 0x338 <lcd_command+0x1e>
     33c:	00 c0       	rjmp	.+0      	; 0x33e <lcd_command+0x24>
     33e:	00 00       	nop
     340:	c4 30       	cpi	r28, 0x04	; 4
     342:	18 f0       	brcs	.+6      	; 0x34a <lcd_command+0x30>
     344:	c0 38       	cpi	r28, 0x80	; 128
     346:	50 f0       	brcs	.+20     	; 0x35c <lcd_command+0x42>
     348:	07 c0       	rjmp	.+14     	; 0x358 <lcd_command+0x3e>
     34a:	8f e3       	ldi	r24, 0x3F	; 63
     34c:	9f e1       	ldi	r25, 0x1F	; 31
     34e:	01 97       	sbiw	r24, 0x01	; 1
     350:	f1 f7       	brne	.-4      	; 0x34e <lcd_command+0x34>
     352:	00 c0       	rjmp	.+0      	; 0x354 <lcd_command+0x3a>
     354:	00 00       	nop
     356:	c0 e8       	ldi	r28, 0x80	; 128
     358:	c0 93 00 02 	sts	0x0200, r28
     35c:	cf 91       	pop	r28
     35e:	08 95       	ret

00000360 <lcd_putchar>:
     360:	cf 93       	push	r28
     362:	c8 2f       	mov	r28, r24
     364:	e2 e0       	ldi	r30, 0x02	; 2
     366:	f1 e0       	ldi	r31, 0x01	; 1
     368:	80 81       	ld	r24, Z
     36a:	80 62       	ori	r24, 0x20	; 32
     36c:	80 83       	st	Z, r24
     36e:	8c 2f       	mov	r24, r28
     370:	ad df       	rcall	.-166    	; 0x2cc <lcd_nibble>
     372:	8c 2f       	mov	r24, r28
     374:	82 95       	swap	r24
     376:	80 7f       	andi	r24, 0xF0	; 240
     378:	a9 df       	rcall	.-174    	; 0x2cc <lcd_nibble>
     37a:	87 ec       	ldi	r24, 0xC7	; 199
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	01 97       	sbiw	r24, 0x01	; 1
     380:	f1 f7       	brne	.-4      	; 0x37e <lcd_putchar+0x1e>
     382:	00 c0       	rjmp	.+0      	; 0x384 <lcd_putchar+0x24>
     384:	00 00       	nop
     386:	80 91 00 02 	lds	r24, 0x0200
     38a:	8f 5f       	subi	r24, 0xFF	; 255
     38c:	80 93 00 02 	sts	0x0200, r24
     390:	80 39       	cpi	r24, 0x90	; 144
     392:	21 f0       	breq	.+8      	; 0x39c <lcd_putchar+0x3c>
     394:	80 3d       	cpi	r24, 0xD0	; 208
     396:	21 f4       	brne	.+8      	; 0x3a0 <lcd_putchar+0x40>
     398:	80 e8       	ldi	r24, 0x80	; 128
     39a:	01 c0       	rjmp	.+2      	; 0x39e <lcd_putchar+0x3e>
     39c:	80 ec       	ldi	r24, 0xC0	; 192
     39e:	bd df       	rcall	.-134    	; 0x31a <lcd_command>
     3a0:	cf 91       	pop	r28
     3a2:	08 95       	ret

000003a4 <lcd_puts>:
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	ec 01       	movw	r28, r24
     3aa:	88 81       	ld	r24, Y
     3ac:	88 23       	and	r24, r24
     3ae:	29 f0       	breq	.+10     	; 0x3ba <lcd_puts+0x16>
     3b0:	21 96       	adiw	r28, 0x01	; 1
     3b2:	d6 df       	rcall	.-84     	; 0x360 <lcd_putchar>
     3b4:	89 91       	ld	r24, Y+
     3b6:	81 11       	cpse	r24, r1
     3b8:	fc cf       	rjmp	.-8      	; 0x3b2 <lcd_puts+0xe>
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	08 95       	ret

000003c0 <lcd_init>:


void lcd_init( void )
{
  LCD_DDR_D4 = 1;                               // enable output pins
     3c0:	9d 9a       	sbi	0x13, 5	; 19
  LCD_DDR_D5 = 1;
     3c2:	6b 9a       	sbi	0x0d, 3	; 13
  LCD_DDR_D6 = 1;
     3c4:	e1 e0       	ldi	r30, 0x01	; 1
     3c6:	f1 e0       	ldi	r31, 0x01	; 1
     3c8:	80 81       	ld	r24, Z
     3ca:	88 60       	ori	r24, 0x08	; 8
     3cc:	80 83       	st	Z, r24
  LCD_DDR_D7 = 1;
     3ce:	80 81       	ld	r24, Z
     3d0:	80 61       	ori	r24, 0x10	; 16
     3d2:	80 83       	st	Z, r24
  LCD_DDR_RS = 1;
     3d4:	80 81       	ld	r24, Z
     3d6:	80 62       	ori	r24, 0x20	; 32
     3d8:	80 83       	st	Z, r24
  LCD_DDR_E0 = 1;
     3da:	80 81       	ld	r24, Z
     3dc:	80 64       	ori	r24, 0x40	; 64
     3de:	80 83       	st	Z, r24
  LCD_E0 = 0;
     3e0:	e2 e0       	ldi	r30, 0x02	; 2
     3e2:	f1 e0       	ldi	r31, 0x01	; 1
     3e4:	80 81       	ld	r24, Z
     3e6:	8f 7b       	andi	r24, 0xBF	; 191
     3e8:	80 83       	st	Z, r24
  LCD_RS = 0;                                   // send commands
     3ea:	80 81       	ld	r24, Z
     3ec:	8f 7d       	andi	r24, 0xDF	; 223
     3ee:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3f0:	8f e5       	ldi	r24, 0x5F	; 95
     3f2:	9a ee       	ldi	r25, 0xEA	; 234
     3f4:	01 97       	sbiw	r24, 0x01	; 1
     3f6:	f1 f7       	brne	.-4      	; 0x3f4 <lcd_init+0x34>
     3f8:	00 c0       	rjmp	.+0      	; 0x3fa <lcd_init+0x3a>
     3fa:	00 00       	nop

  _delay_ms( 15 );
  lcd_nibble( 0x30 );
     3fc:	80 e3       	ldi	r24, 0x30	; 48
     3fe:	66 df       	rcall	.-308    	; 0x2cc <lcd_nibble>
     400:	8f e0       	ldi	r24, 0x0F	; 15
     402:	90 e4       	ldi	r25, 0x40	; 64
     404:	01 97       	sbiw	r24, 0x01	; 1
     406:	f1 f7       	brne	.-4      	; 0x404 <lcd_init+0x44>
     408:	00 c0       	rjmp	.+0      	; 0x40a <lcd_init+0x4a>
     40a:	00 00       	nop
  _delay_ms( 4.1 );
  lcd_nibble( 0x30 );
     40c:	80 e3       	ldi	r24, 0x30	; 48
     40e:	5e df       	rcall	.-324    	; 0x2cc <lcd_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     410:	8f e8       	ldi	r24, 0x8F	; 143
     412:	91 e0       	ldi	r25, 0x01	; 1
     414:	01 97       	sbiw	r24, 0x01	; 1
     416:	f1 f7       	brne	.-4      	; 0x414 <lcd_init+0x54>
     418:	00 c0       	rjmp	.+0      	; 0x41a <lcd_init+0x5a>
     41a:	00 00       	nop
  _delay_us( 100 );
  lcd_nibble( 0x30 );
     41c:	80 e3       	ldi	r24, 0x30	; 48
     41e:	56 df       	rcall	.-340    	; 0x2cc <lcd_nibble>
     420:	87 ec       	ldi	r24, 0xC7	; 199
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	01 97       	sbiw	r24, 0x01	; 1
     426:	f1 f7       	brne	.-4      	; 0x424 <lcd_init+0x64>
     428:	00 c0       	rjmp	.+0      	; 0x42a <lcd_init+0x6a>
     42a:	00 00       	nop
  _delay_us( LCD_TIME_DAT );
  lcd_nibble( 0x20 );                           // 4 bit mode
     42c:	80 e2       	ldi	r24, 0x20	; 32
     42e:	4e df       	rcall	.-356    	; 0x2cc <lcd_nibble>
     430:	87 ec       	ldi	r24, 0xC7	; 199
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	01 97       	sbiw	r24, 0x01	; 1
     436:	f1 f7       	brne	.-4      	; 0x434 <lcd_init+0x74>
     438:	00 c0       	rjmp	.+0      	; 0x43a <lcd_init+0x7a>
     43a:	00 00       	nop
  _delay_us( LCD_TIME_DAT );
#if LCD_LINE == 1
  lcd_command( 0x20 );                          // 1 line
#else
  lcd_command( 0x28 );                          // 2 lines 5*7
     43c:	88 e2       	ldi	r24, 0x28	; 40
     43e:	6d df       	rcall	.-294    	; 0x31a <lcd_command>
#endif
  lcd_command( 0x08 );                          // display off
     440:	88 e0       	ldi	r24, 0x08	; 8
     442:	6b df       	rcall	.-298    	; 0x31a <lcd_command>
  lcd_command( 0x01 );                          // display clear
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	69 df       	rcall	.-302    	; 0x31a <lcd_command>
  lcd_command( 0x06 );                          // cursor increment
     448:	86 e0       	ldi	r24, 0x06	; 6
     44a:	67 df       	rcall	.-306    	; 0x31a <lcd_command>
  lcd_command( 0x0C );                          // on, no cursor, no blink
     44c:	8c e0       	ldi	r24, 0x0C	; 12
     44e:	65 cf       	rjmp	.-310    	; 0x31a <lcd_command>
     450:	08 95       	ret

00000452 <Idle>:


uint8_t ButtonRead(){
	
	return (1<<BT)&BTPIN;	
}
     452:	ff cf       	rjmp	.-2      	; 0x452 <Idle>

00000454 <Poll_Joystick>:
     454:	0f 2e       	mov	r0, r31
     456:	f6 e6       	ldi	r31, 0x66	; 102
     458:	2f 2e       	mov	r2, r31
     45a:	f0 2d       	mov	r31, r0
     45c:	0f 2e       	mov	r0, r31
     45e:	ff e6       	ldi	r31, 0x6F	; 111
     460:	3f 2e       	mov	r3, r31
     462:	f0 2d       	mov	r31, r0
     464:	0f 2e       	mov	r0, r31
     466:	f9 e0       	ldi	r31, 0x09	; 9
     468:	6f 2e       	mov	r6, r31
     46a:	f2 e0       	ldi	r31, 0x02	; 2
     46c:	7f 2e       	mov	r7, r31
     46e:	f0 2d       	mov	r31, r0
     470:	c3 ed       	ldi	r28, 0xD3	; 211
     472:	d4 e1       	ldi	r29, 0x14	; 20
     474:	0f 2e       	mov	r0, r31
     476:	f2 e0       	ldi	r31, 0x02	; 2
     478:	af 2e       	mov	r10, r31
     47a:	f2 e0       	ldi	r31, 0x02	; 2
     47c:	bf 2e       	mov	r11, r31
     47e:	f0 2d       	mov	r31, r0
     480:	0f 2e       	mov	r0, r31
     482:	f0 e1       	ldi	r31, 0x10	; 16
     484:	8f 2e       	mov	r8, r31
     486:	f2 e0       	ldi	r31, 0x02	; 2
     488:	9f 2e       	mov	r9, r31
     48a:	f0 2d       	mov	r31, r0
     48c:	0f 2e       	mov	r0, r31
     48e:	f5 e2       	ldi	r31, 0x25	; 37
     490:	cf 2e       	mov	r12, r31
     492:	f2 e0       	ldi	r31, 0x02	; 2
     494:	df 2e       	mov	r13, r31
     496:	f0 2d       	mov	r31, r0
     498:	0d ed       	ldi	r16, 0xDD	; 221
     49a:	14 e1       	ldi	r17, 0x14	; 20
     49c:	0f 2e       	mov	r0, r31
     49e:	fe e1       	ldi	r31, 0x1E	; 30
     4a0:	ef 2e       	mov	r14, r31
     4a2:	f2 e0       	ldi	r31, 0x02	; 2
     4a4:	ff 2e       	mov	r15, r31
     4a6:	f0 2d       	mov	r31, r0
     4a8:	83 e0       	ldi	r24, 0x03	; 3
     4aa:	fc de       	rcall	.-520    	; 0x2a4 <adc_read>
     4ac:	58 2e       	mov	r5, r24
     4ae:	49 2e       	mov	r4, r25
     4b0:	87 e0       	ldi	r24, 0x07	; 7
     4b2:	f8 de       	rcall	.-528    	; 0x2a4 <adc_read>
     4b4:	90 93 d2 14 	sts	0x14D2, r25
     4b8:	80 93 d1 14 	sts	0x14D1, r24
     4bc:	85 e0       	ldi	r24, 0x05	; 5
     4be:	f2 de       	rcall	.-540    	; 0x2a4 <adc_read>
     4c0:	90 93 c6 14 	sts	0x14C6, r25
     4c4:	80 93 c5 14 	sts	0x14C5, r24
     4c8:	89 b1       	in	r24, 0x09	; 9
     4ca:	80 78       	andi	r24, 0x80	; 128
     4cc:	80 93 c4 14 	sts	0x14C4, r24
     4d0:	88 23       	and	r24, r24
     4d2:	1c f0       	brlt	.+6      	; 0x4da <Poll_Joystick+0x86>
     4d4:	30 92 01 02 	sts	0x0201, r3
     4d8:	02 c0       	rjmp	.+4      	; 0x4de <Poll_Joystick+0x8a>
     4da:	20 92 01 02 	sts	0x0201, r2
     4de:	80 91 d1 14 	lds	r24, 0x14D1
     4e2:	90 91 d2 14 	lds	r25, 0x14D2
     4e6:	8d 3b       	cpi	r24, 0xBD	; 189
     4e8:	22 e0       	ldi	r18, 0x02	; 2
     4ea:	92 07       	cpc	r25, r18
     4ec:	88 f0       	brcs	.+34     	; 0x510 <Poll_Joystick+0xbc>
     4ee:	80 91 01 02 	lds	r24, 0x0201
     4f2:	1f 92       	push	r1
     4f4:	8f 93       	push	r24
     4f6:	bf 92       	push	r11
     4f8:	af 92       	push	r10
     4fa:	df 93       	push	r29
     4fc:	cf 93       	push	r28
     4fe:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <sprintf>
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	13 c0       	rjmp	.+38     	; 0x536 <Poll_Joystick+0xe2>
     510:	8c 32       	cpi	r24, 0x2C	; 44
     512:	91 40       	sbci	r25, 0x01	; 1
     514:	80 f4       	brcc	.+32     	; 0x536 <Poll_Joystick+0xe2>
     516:	80 91 01 02 	lds	r24, 0x0201
     51a:	1f 92       	push	r1
     51c:	8f 93       	push	r24
     51e:	7f 92       	push	r7
     520:	6f 92       	push	r6
     522:	df 93       	push	r29
     524:	cf 93       	push	r28
     526:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <sprintf>
     52a:	0f 90       	pop	r0
     52c:	0f 90       	pop	r0
     52e:	0f 90       	pop	r0
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	80 91 c5 14 	lds	r24, 0x14C5
     53a:	90 91 c6 14 	lds	r25, 0x14C6
     53e:	8d 3b       	cpi	r24, 0xBD	; 189
     540:	a2 e0       	ldi	r26, 0x02	; 2
     542:	9a 07       	cpc	r25, r26
     544:	88 f0       	brcs	.+34     	; 0x568 <Poll_Joystick+0x114>
     546:	80 91 01 02 	lds	r24, 0x0201
     54a:	1f 92       	push	r1
     54c:	8f 93       	push	r24
     54e:	9f 92       	push	r9
     550:	8f 92       	push	r8
     552:	df 93       	push	r29
     554:	cf 93       	push	r28
     556:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <sprintf>
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	15 c0       	rjmp	.+42     	; 0x592 <Poll_Joystick+0x13e>
     568:	8c 32       	cpi	r24, 0x2C	; 44
     56a:	91 40       	sbci	r25, 0x01	; 1
     56c:	90 f4       	brcc	.+36     	; 0x592 <Poll_Joystick+0x13e>
     56e:	80 91 01 02 	lds	r24, 0x0201
     572:	1f 92       	push	r1
     574:	8f 93       	push	r24
     576:	a7 e1       	ldi	r26, 0x17	; 23
     578:	b2 e0       	ldi	r27, 0x02	; 2
     57a:	bf 93       	push	r27
     57c:	af 93       	push	r26
     57e:	df 93       	push	r29
     580:	cf 93       	push	r28
     582:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <sprintf>
     586:	0f 90       	pop	r0
     588:	0f 90       	pop	r0
     58a:	0f 90       	pop	r0
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
     592:	80 e8       	ldi	r24, 0x80	; 128
     594:	c2 de       	rcall	.-636    	; 0x31a <lcd_command>
     596:	4f 92       	push	r4
     598:	5f 92       	push	r5
     59a:	df 92       	push	r13
     59c:	cf 92       	push	r12
     59e:	1f 93       	push	r17
     5a0:	0f 93       	push	r16
     5a2:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <sprintf>
     5a6:	c8 01       	movw	r24, r16
     5a8:	fd de       	rcall	.-518    	; 0x3a4 <lcd_puts>
     5aa:	80 ec       	ldi	r24, 0xC0	; 192
     5ac:	b6 de       	rcall	.-660    	; 0x31a <lcd_command>
     5ae:	ce 01       	movw	r24, r28
     5b0:	f9 de       	rcall	.-526    	; 0x3a4 <lcd_puts>
     5b2:	61 e0       	ldi	r22, 0x01	; 1
     5b4:	70 e0       	ldi	r23, 0x00	; 0
     5b6:	ce 01       	movw	r24, r28
     5b8:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <uart_send_string>
     5bc:	80 91 01 02 	lds	r24, 0x0201
     5c0:	1f 92       	push	r1
     5c2:	8f 93       	push	r24
     5c4:	ff 92       	push	r15
     5c6:	ef 92       	push	r14
     5c8:	df 93       	push	r29
     5ca:	cf 93       	push	r28
     5cc:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <sprintf>
     5d0:	2f ef       	ldi	r18, 0xFF	; 255
     5d2:	89 ef       	ldi	r24, 0xF9	; 249
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	21 50       	subi	r18, 0x01	; 1
     5d8:	80 40       	sbci	r24, 0x00	; 0
     5da:	90 40       	sbci	r25, 0x00	; 0
     5dc:	e1 f7       	brne	.-8      	; 0x5d6 <Poll_Joystick+0x182>
     5de:	00 c0       	rjmp	.+0      	; 0x5e0 <Poll_Joystick+0x18c>
     5e0:	00 00       	nop
     5e2:	ad b7       	in	r26, 0x3d	; 61
     5e4:	be b7       	in	r27, 0x3e	; 62
     5e6:	1c 96       	adiw	r26, 0x0c	; 12
     5e8:	0f b6       	in	r0, 0x3f	; 63
     5ea:	f8 94       	cli
     5ec:	be bf       	out	0x3e, r27	; 62
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	ad bf       	out	0x3d, r26	; 61
     5f2:	5a cf       	rjmp	.-332    	; 0x4a8 <Poll_Joystick+0x54>

000005f4 <ButtonInit>:
     5f4:	6f 98       	cbi	0x0d, 7	; 13
     5f6:	5f 9a       	sbi	0x0b, 7	; 11
     5f8:	08 95       	ret

000005fa <Init_All>:
     5fa:	fc df       	rcall	.-8      	; 0x5f4 <ButtonInit>
     5fc:	e4 d6       	rcall	.+3528   	; 0x13c6 <Mutex_Init>
     5fe:	90 93 ce 14 	sts	0x14CE, r25
     602:	80 93 cd 14 	sts	0x14CD, r24
     606:	df d6       	rcall	.+3518   	; 0x13c6 <Mutex_Init>
     608:	90 93 ef 14 	sts	0x14EF, r25
     60c:	80 93 ee 14 	sts	0x14EE, r24
     610:	f5 d6       	rcall	.+3562   	; 0x13fc <Event_Init>
     612:	90 93 f3 14 	sts	0x14F3, r25
     616:	80 93 f2 14 	sts	0x14F2, r24
     61a:	f0 d6       	rcall	.+3552   	; 0x13fc <Event_Init>
     61c:	90 93 da 14 	sts	0x14DA, r25
     620:	80 93 d9 14 	sts	0x14D9, r24
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <uart_init>
     62a:	35 de       	rcall	.-918    	; 0x296 <adc_init>
     62c:	c9 de       	rcall	.-622    	; 0x3c0 <lcd_init>
     62e:	24 c0       	rjmp	.+72     	; 0x678 <Task_Terminate>
     630:	08 95       	ret

00000632 <a_main>:
// Creates the required tasks and then terminates
void a_main() {


	
    InitPID = Task_Create(Init_All,0,1);
     632:	41 e0       	ldi	r20, 0x01	; 1
     634:	50 e0       	ldi	r21, 0x00	; 0
     636:	60 e0       	ldi	r22, 0x00	; 0
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	8d ef       	ldi	r24, 0xFD	; 253
     63c:	92 e0       	ldi	r25, 0x02	; 2
     63e:	f9 d6       	rcall	.+3570   	; 0x1432 <Task_Create>
     640:	90 93 f1 14 	sts	0x14F1, r25
     644:	80 93 f0 14 	sts	0x14F0, r24
	PollPID = Task_Create(Poll_Joystick, 1, 1);
     648:	41 e0       	ldi	r20, 0x01	; 1
     64a:	50 e0       	ldi	r21, 0x00	; 0
     64c:	61 e0       	ldi	r22, 0x01	; 1
     64e:	70 e0       	ldi	r23, 0x00	; 0
     650:	8a e2       	ldi	r24, 0x2A	; 42
     652:	92 e0       	ldi	r25, 0x02	; 2
     654:	ee d6       	rcall	.+3548   	; 0x1432 <Task_Create>
     656:	90 93 cc 14 	sts	0x14CC, r25
     65a:	80 93 cb 14 	sts	0x14CB, r24
	IdlePID = Task_Create(Idle, 8, 1);
     65e:	41 e0       	ldi	r20, 0x01	; 1
     660:	50 e0       	ldi	r21, 0x00	; 0
     662:	68 e0       	ldi	r22, 0x08	; 8
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	89 e2       	ldi	r24, 0x29	; 41
     668:	92 e0       	ldi	r25, 0x02	; 2
     66a:	e3 d6       	rcall	.+3526   	; 0x1432 <Task_Create>
     66c:	90 93 ca 14 	sts	0x14CA, r25
     670:	80 93 c9 14 	sts	0x14C9, r24
	Task_Terminate();
     674:	01 c0       	rjmp	.+2      	; 0x678 <Task_Terminate>
     676:	08 95       	ret

00000678 <Task_Terminate>:
/**
  * Application level task getarg to return intiial arg value
  */
int Task_GetArg(PID p) {
	return (Cp->arg);
}
     678:	80 91 3e 02 	lds	r24, 0x023E
     67c:	90 91 3f 02 	lds	r25, 0x023F
     680:	89 2b       	or	r24, r25
     682:	51 f0       	breq	.+20     	; 0x698 <Task_Terminate+0x20>
     684:	f8 94       	cli
     686:	e0 91 40 02 	lds	r30, 0x0240
     68a:	f0 91 41 02 	lds	r31, 0x0241
     68e:	e3 5f       	subi	r30, 0xF3	; 243
     690:	fe 4f       	sbci	r31, 0xFE	; 254
     692:	84 e0       	ldi	r24, 0x04	; 4
     694:	80 83       	st	Z, r24
     696:	aa cd       	rjmp	.-1196   	; 0x1ec <Enter_Kernel>
     698:	08 95       	ret

0000069a <Kernel_Create_Task_At>:
     69a:	ef 92       	push	r14
     69c:	ff 92       	push	r15
     69e:	0f 93       	push	r16
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	1f 92       	push	r1
     6a8:	1f 92       	push	r1
     6aa:	cd b7       	in	r28, 0x3d	; 61
     6ac:	de b7       	in	r29, 0x3e	; 62
     6ae:	9a 83       	std	Y+2, r25	; 0x02
     6b0:	89 83       	std	Y+1, r24	; 0x01
     6b2:	dc 01       	movw	r26, r24
     6b4:	7c 01       	movw	r14, r24
     6b6:	04 e0       	ldi	r16, 0x04	; 4
     6b8:	e0 0e       	add	r14, r16
     6ba:	f1 1c       	adc	r15, r1
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	f7 01       	movw	r30, r14
     6c2:	8c 01       	movw	r16, r24
     6c4:	11 92       	st	Z+, r1
     6c6:	01 50       	subi	r16, 0x01	; 1
     6c8:	10 40       	sbci	r17, 0x00	; 0
     6ca:	e1 f7       	brne	.-8      	; 0x6c4 <Kernel_Create_Task_At+0x2a>
     6cc:	fd 01       	movw	r30, r26
     6ce:	ed 5f       	subi	r30, 0xFD	; 253
     6d0:	fe 4f       	sbci	r31, 0xFE	; 254
     6d2:	8c e3       	ldi	r24, 0x3C	; 60
     6d4:	93 e0       	ldi	r25, 0x03	; 3
     6d6:	80 83       	st	Z, r24
     6d8:	31 97       	sbiw	r30, 0x01	; 1
     6da:	90 83       	st	Z, r25
     6dc:	31 97       	sbiw	r30, 0x01	; 1
     6de:	60 83       	st	Z, r22
     6e0:	31 97       	sbiw	r30, 0x01	; 1
     6e2:	70 83       	st	Z, r23
     6e4:	31 97       	sbiw	r30, 0x01	; 1
     6e6:	10 82       	st	Z, r1
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	92 93       	st	-Z, r25
     6ec:	9f 5f       	subi	r25, 0xFF	; 255
     6ee:	92 32       	cpi	r25, 0x22	; 34
     6f0:	e1 f7       	brne	.-8      	; 0x6ea <Kernel_Create_Task_At+0x50>
     6f2:	a4 52       	subi	r26, 0x24	; 36
     6f4:	bf 4f       	sbci	r27, 0xFF	; 255
     6f6:	e9 81       	ldd	r30, Y+1	; 0x01
     6f8:	fa 81       	ldd	r31, Y+2	; 0x02
     6fa:	b3 83       	std	Z+3, r27	; 0x03
     6fc:	a2 83       	std	Z+2, r26	; 0x02
     6fe:	df 01       	movw	r26, r30
     700:	a5 5f       	subi	r26, 0xF5	; 245
     702:	be 4f       	sbci	r27, 0xFE	; 254
     704:	11 96       	adiw	r26, 0x01	; 1
     706:	7c 93       	st	X, r23
     708:	6e 93       	st	-X, r22
     70a:	12 96       	adiw	r26, 0x02	; 2
     70c:	1c 92       	st	X, r1
     70e:	80 91 3a 02 	lds	r24, 0x023A
     712:	90 91 3b 02 	lds	r25, 0x023B
     716:	91 83       	std	Z+1, r25	; 0x01
     718:	80 83       	st	Z, r24
     71a:	89 81       	ldd	r24, Y+1	; 0x01
     71c:	9a 81       	ldd	r25, Y+2	; 0x02
     71e:	fc 01       	movw	r30, r24
     720:	eb 5f       	subi	r30, 0xFB	; 251
     722:	fe 4f       	sbci	r31, 0xFE	; 254
     724:	51 83       	std	Z+1, r21	; 0x01
     726:	40 83       	st	Z, r20
     728:	32 96       	adiw	r30, 0x02	; 2
     72a:	51 83       	std	Z+1, r21	; 0x01
     72c:	40 83       	st	Z, r20
     72e:	32 96       	adiw	r30, 0x02	; 2
     730:	31 83       	std	Z+1, r19	; 0x01
     732:	20 83       	st	Z, r18
     734:	71 96       	adiw	r30, 0x11	; 17
     736:	11 82       	std	Z+1, r1	; 0x01
     738:	10 82       	st	Z, r1
     73a:	34 97       	sbiw	r30, 0x04	; 4
     73c:	23 e6       	ldi	r18, 0x63	; 99
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	31 83       	std	Z+1, r19	; 0x01
     742:	20 83       	st	Z, r18
     744:	20 91 3c 02 	lds	r18, 0x023C
     748:	30 91 3d 02 	lds	r19, 0x023D
     74c:	2f 5f       	subi	r18, 0xFF	; 255
     74e:	3f 4f       	sbci	r19, 0xFF	; 255
     750:	30 93 3d 02 	sts	0x023D, r19
     754:	20 93 3c 02 	sts	0x023C, r18
     758:	20 91 3a 02 	lds	r18, 0x023A
     75c:	30 91 3b 02 	lds	r19, 0x023B
     760:	2f 5f       	subi	r18, 0xFF	; 255
     762:	3f 4f       	sbci	r19, 0xFF	; 255
     764:	30 93 3b 02 	sts	0x023B, r19
     768:	20 93 3a 02 	sts	0x023A, r18
     76c:	72 97       	sbiw	r30, 0x12	; 18
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	80 83       	st	Z, r24
     772:	42 e3       	ldi	r20, 0x32	; 50
     774:	52 e0       	ldi	r21, 0x02	; 2
     776:	64 e1       	ldi	r22, 0x14	; 20
     778:	75 e1       	ldi	r23, 0x15	; 21
     77a:	ce 01       	movw	r24, r28
     77c:	01 96       	adiw	r24, 0x01	; 1
     77e:	0e 94 20 0c 	call	0x1840	; 0x1840 <enqueueRQ>
     782:	e9 81       	ldd	r30, Y+1	; 0x01
     784:	fa 81       	ldd	r31, Y+2	; 0x02
     786:	80 81       	ld	r24, Z
     788:	91 81       	ldd	r25, Z+1	; 0x01
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	1f 91       	pop	r17
     794:	0f 91       	pop	r16
     796:	ff 90       	pop	r15
     798:	ef 90       	pop	r14
     79a:	08 95       	ret

0000079c <Kernel_Create_Task>:
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	ec 01       	movw	r28, r24
     7a2:	80 91 3c 02 	lds	r24, 0x023C
     7a6:	90 91 3d 02 	lds	r25, 0x023D
     7aa:	40 97       	sbiw	r24, 0x10	; 16
     7ac:	21 f1       	breq	.+72     	; 0x7f6 <Kernel_Create_Task+0x5a>
     7ae:	80 91 a6 03 	lds	r24, 0x03A6
     7b2:	88 23       	and	r24, r24
     7b4:	71 f0       	breq	.+28     	; 0x7d2 <Kernel_Create_Task+0x36>
     7b6:	a4 ec       	ldi	r26, 0xC4	; 196
     7b8:	b4 e0       	ldi	r27, 0x04	; 4
     7ba:	e1 e0       	ldi	r30, 0x01	; 1
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	9c 91       	ld	r25, X
     7c0:	99 23       	and	r25, r25
     7c2:	49 f0       	breq	.+18     	; 0x7d6 <Kernel_Create_Task+0x3a>
     7c4:	31 96       	adiw	r30, 0x01	; 1
     7c6:	a2 5e       	subi	r26, 0xE2	; 226
     7c8:	be 4f       	sbci	r27, 0xFE	; 254
     7ca:	e0 31       	cpi	r30, 0x10	; 16
     7cc:	f1 05       	cpc	r31, r1
     7ce:	b9 f7       	brne	.-18     	; 0x7be <Kernel_Create_Task+0x22>
     7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <Kernel_Create_Task+0x3a>
     7d2:	e0 e0       	ldi	r30, 0x00	; 0
     7d4:	f0 e0       	ldi	r31, 0x00	; 0
     7d6:	9a 01       	movw	r18, r20
     7d8:	ab 01       	movw	r20, r22
     7da:	be 01       	movw	r22, r28
     7dc:	ae e1       	ldi	r26, 0x1E	; 30
     7de:	b1 e0       	ldi	r27, 0x01	; 1
     7e0:	ea 9f       	mul	r30, r26
     7e2:	c0 01       	movw	r24, r0
     7e4:	eb 9f       	mul	r30, r27
     7e6:	90 0d       	add	r25, r0
     7e8:	fa 9f       	mul	r31, r26
     7ea:	90 0d       	add	r25, r0
     7ec:	11 24       	eor	r1, r1
     7ee:	8e 55       	subi	r24, 0x5E	; 94
     7f0:	9d 4f       	sbci	r25, 0xFD	; 253
     7f2:	53 df       	rcall	.-346    	; 0x69a <Kernel_Create_Task_At>
     7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <Kernel_Create_Task+0x5a>
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	08 95       	ret

000007fc <Kernel_Init_Mutex_At>:
     7fc:	fc 01       	movw	r30, r24
     7fe:	80 91 38 02 	lds	r24, 0x0238
     802:	90 91 39 02 	lds	r25, 0x0239
     806:	91 83       	std	Z+1, r25	; 0x01
     808:	80 83       	st	Z, r24
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	82 83       	std	Z+2, r24	; 0x02
     80e:	80 91 38 02 	lds	r24, 0x0238
     812:	90 91 39 02 	lds	r25, 0x0239
     816:	01 96       	adiw	r24, 0x01	; 1
     818:	90 93 39 02 	sts	0x0239, r25
     81c:	80 93 38 02 	sts	0x0238, r24
     820:	80 81       	ld	r24, Z
     822:	91 81       	ldd	r25, Z+1	; 0x01
     824:	08 95       	ret

00000826 <Kernel_Init_Event_At>:
     826:	fc 01       	movw	r30, r24
     828:	80 91 36 02 	lds	r24, 0x0236
     82c:	90 91 37 02 	lds	r25, 0x0237
     830:	91 83       	std	Z+1, r25	; 0x01
     832:	80 83       	st	Z, r24
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	82 83       	std	Z+2, r24	; 0x02
     838:	14 82       	std	Z+4, r1	; 0x04
     83a:	13 82       	std	Z+3, r1	; 0x03
     83c:	80 91 36 02 	lds	r24, 0x0236
     840:	90 91 37 02 	lds	r25, 0x0237
     844:	01 96       	adiw	r24, 0x01	; 1
     846:	90 93 37 02 	sts	0x0237, r25
     84a:	80 93 36 02 	sts	0x0236, r24
     84e:	80 81       	ld	r24, Z
     850:	91 81       	ldd	r25, Z+1	; 0x01
     852:	08 95       	ret

00000854 <OS_Init>:
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	10 92 3d 02 	sts	0x023D, r1
     85c:	10 92 3c 02 	sts	0x023C, r1
     860:	10 92 3f 02 	sts	0x023F, r1
     864:	10 92 3e 02 	sts	0x023E, r1
     868:	10 92 39 02 	sts	0x0239, r1
     86c:	10 92 38 02 	sts	0x0238, r1
     870:	10 92 37 02 	sts	0x0237, r1
     874:	10 92 36 02 	sts	0x0236, r1
     878:	10 92 3b 02 	sts	0x023B, r1
     87c:	10 92 3a 02 	sts	0x023A, r1
     880:	e2 ea       	ldi	r30, 0xA2	; 162
     882:	f2 e0       	ldi	r31, 0x02	; 2
     884:	a6 ea       	ldi	r26, 0xA6	; 166
     886:	b3 e0       	ldi	r27, 0x03	; 3
     888:	42 e8       	ldi	r20, 0x82	; 130
     88a:	54 e1       	ldi	r21, 0x14	; 20
     88c:	2e e1       	ldi	r18, 0x1E	; 30
     88e:	31 e0       	ldi	r19, 0x01	; 1
     890:	83 e6       	ldi	r24, 0x63	; 99
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	ef 01       	movw	r28, r30
     896:	b9 01       	movw	r22, r18
     898:	19 92       	st	Y+, r1
     89a:	61 50       	subi	r22, 0x01	; 1
     89c:	70 40       	sbci	r23, 0x00	; 0
     89e:	e1 f7       	brne	.-8      	; 0x898 <OS_Init+0x44>
     8a0:	1c 92       	st	X, r1
     8a2:	53 96       	adiw	r26, 0x13	; 19
     8a4:	9c 93       	st	X, r25
     8a6:	8e 93       	st	-X, r24
     8a8:	52 97       	sbiw	r26, 0x12	; 18
     8aa:	11 82       	std	Z+1, r1	; 0x01
     8ac:	10 82       	st	Z, r1
     8ae:	e2 5e       	subi	r30, 0xE2	; 226
     8b0:	fe 4f       	sbci	r31, 0xFE	; 254
     8b2:	a2 5e       	subi	r26, 0xE2	; 226
     8b4:	be 4f       	sbci	r27, 0xFE	; 254
     8b6:	e4 17       	cp	r30, r20
     8b8:	f5 07       	cpc	r31, r21
     8ba:	61 f7       	brne	.-40     	; 0x894 <OS_Init+0x40>
     8bc:	ec e6       	ldi	r30, 0x6C	; 108
     8be:	f2 e0       	ldi	r31, 0x02	; 2
     8c0:	24 ea       	ldi	r18, 0xA4	; 164
     8c2:	32 e0       	ldi	r19, 0x02	; 2
     8c4:	87 e0       	ldi	r24, 0x07	; 7
     8c6:	df 01       	movw	r26, r30
     8c8:	12 97       	sbiw	r26, 0x02	; 2
     8ca:	ed 01       	movw	r28, r26
     8cc:	68 2f       	mov	r22, r24
     8ce:	19 92       	st	Y+, r1
     8d0:	6a 95       	dec	r22
     8d2:	e9 f7       	brne	.-6      	; 0x8ce <OS_Init+0x7a>
     8d4:	10 82       	st	Z, r1
     8d6:	37 96       	adiw	r30, 0x07	; 7
     8d8:	e2 17       	cp	r30, r18
     8da:	f3 07       	cpc	r31, r19
     8dc:	a1 f7       	brne	.-24     	; 0x8c6 <OS_Init+0x72>
     8de:	e4 e4       	ldi	r30, 0x44	; 68
     8e0:	f2 e0       	ldi	r31, 0x02	; 2
     8e2:	2c e6       	ldi	r18, 0x6C	; 108
     8e4:	32 e0       	ldi	r19, 0x02	; 2
     8e6:	85 e0       	ldi	r24, 0x05	; 5
     8e8:	df 01       	movw	r26, r30
     8ea:	12 97       	sbiw	r26, 0x02	; 2
     8ec:	ed 01       	movw	r28, r26
     8ee:	68 2f       	mov	r22, r24
     8f0:	19 92       	st	Y+, r1
     8f2:	6a 95       	dec	r22
     8f4:	e9 f7       	brne	.-6      	; 0x8f0 <OS_Init+0x9c>
     8f6:	10 82       	st	Z, r1
     8f8:	35 96       	adiw	r30, 0x05	; 5
     8fa:	e2 17       	cp	r30, r18
     8fc:	f3 07       	cpc	r31, r19
     8fe:	a1 f7       	brne	.-24     	; 0x8e8 <OS_Init+0x94>
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	08 95       	ret

00000906 <OS_Abort>:
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	0e 94 12 11 	call	0x2224	; 0x2224 <_exit>

0000090e <Dispatch>:
     90e:	62 e3       	ldi	r22, 0x32	; 50
     910:	72 e0       	ldi	r23, 0x02	; 2
     912:	84 e1       	ldi	r24, 0x14	; 20
     914:	95 e1       	ldi	r25, 0x15	; 21
     916:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <dequeueRQ>
     91a:	fc 01       	movw	r30, r24
     91c:	90 93 41 02 	sts	0x0241, r25
     920:	80 93 40 02 	sts	0x0240, r24
     924:	89 2b       	or	r24, r25
     926:	09 f4       	brne	.+2      	; 0x92a <Dispatch+0x1c>
     928:	ee df       	rcall	.-36     	; 0x906 <OS_Abort>
     92a:	82 81       	ldd	r24, Z+2	; 0x02
     92c:	93 81       	ldd	r25, Z+3	; 0x03
     92e:	90 93 35 15 	sts	0x1535, r25
     932:	80 93 34 15 	sts	0x1534, r24
     936:	82 e0       	ldi	r24, 0x02	; 2
     938:	df 01       	movw	r26, r30
     93a:	ac 5f       	subi	r26, 0xFC	; 252
     93c:	be 4f       	sbci	r27, 0xFE	; 254
     93e:	8c 93       	st	X, r24
     940:	80 81       	ld	r24, Z
     942:	91 81       	ldd	r25, Z+1	; 0x01
     944:	02 97       	sbiw	r24, 0x02	; 2
     946:	30 f0       	brcs	.+12     	; 0x954 <Dispatch+0x46>
     948:	80 81       	ld	r24, Z
     94a:	91 81       	ldd	r25, Z+1	; 0x01
     94c:	02 97       	sbiw	r24, 0x02	; 2
     94e:	11 f0       	breq	.+4      	; 0x954 <Dispatch+0x46>
     950:	80 81       	ld	r24, Z
     952:	91 81       	ldd	r25, Z+1	; 0x01
     954:	08 95       	ret

00000956 <Kernel_Unlock_Mutex>:
     956:	0f 93       	push	r16
     958:	1f 93       	push	r17
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	1f 92       	push	r1
     960:	1f 92       	push	r1
     962:	cd b7       	in	r28, 0x3d	; 61
     964:	de b7       	in	r29, 0x3e	; 62
     966:	a0 91 40 02 	lds	r26, 0x0240
     96a:	b0 91 41 02 	lds	r27, 0x0241
     96e:	fd 01       	movw	r30, r26
     970:	ec 5e       	subi	r30, 0xEC	; 236
     972:	fe 4f       	sbci	r31, 0xFE	; 254
     974:	40 81       	ld	r20, Z
     976:	51 81       	ldd	r21, Z+1	; 0x01
     978:	ea e6       	ldi	r30, 0x6A	; 106
     97a:	f2 e0       	ldi	r31, 0x02	; 2
     97c:	00 e0       	ldi	r16, 0x00	; 0
     97e:	10 e0       	ldi	r17, 0x00	; 0
     980:	80 81       	ld	r24, Z
     982:	91 81       	ldd	r25, Z+1	; 0x01
     984:	84 17       	cp	r24, r20
     986:	95 07       	cpc	r25, r21
     988:	39 f0       	breq	.+14     	; 0x998 <Kernel_Unlock_Mutex+0x42>
     98a:	0f 5f       	subi	r16, 0xFF	; 255
     98c:	1f 4f       	sbci	r17, 0xFF	; 255
     98e:	37 96       	adiw	r30, 0x07	; 7
     990:	08 30       	cpi	r16, 0x08	; 8
     992:	11 05       	cpc	r17, r1
     994:	a9 f7       	brne	.-22     	; 0x980 <Kernel_Unlock_Mutex+0x2a>
     996:	eb c0       	rjmp	.+470    	; 0xb6e <Kernel_Unlock_Mutex+0x218>
     998:	8d 91       	ld	r24, X+
     99a:	9c 91       	ld	r25, X
     99c:	11 97       	sbiw	r26, 0x01	; 1
     99e:	27 e0       	ldi	r18, 0x07	; 7
     9a0:	20 9f       	mul	r18, r16
     9a2:	f0 01       	movw	r30, r0
     9a4:	21 9f       	mul	r18, r17
     9a6:	f0 0d       	add	r31, r0
     9a8:	11 24       	eor	r1, r1
     9aa:	e6 59       	subi	r30, 0x96	; 150
     9ac:	fd 4f       	sbci	r31, 0xFD	; 253
     9ae:	23 81       	ldd	r18, Z+3	; 0x03
     9b0:	34 81       	ldd	r19, Z+4	; 0x04
     9b2:	28 17       	cp	r18, r24
     9b4:	39 07       	cpc	r19, r25
     9b6:	09 f0       	breq	.+2      	; 0x9ba <Kernel_Unlock_Mutex+0x64>
     9b8:	da c0       	rjmp	.+436    	; 0xb6e <Kernel_Unlock_Mutex+0x218>
     9ba:	ac 5f       	subi	r26, 0xFC	; 252
     9bc:	be 4f       	sbci	r27, 0xFE	; 254
     9be:	8c 91       	ld	r24, X
     9c0:	86 30       	cpi	r24, 0x06	; 6
     9c2:	09 f0       	breq	.+2      	; 0x9c6 <Kernel_Unlock_Mutex+0x70>
     9c4:	4d c0       	rjmp	.+154    	; 0xa60 <Kernel_Unlock_Mutex+0x10a>
     9c6:	6e e2       	ldi	r22, 0x2E	; 46
     9c8:	72 e0       	ldi	r23, 0x02	; 2
     9ca:	86 e3       	ldi	r24, 0x36	; 54
     9cc:	95 e1       	ldi	r25, 0x15	; 21
     9ce:	9b d7       	rcall	.+3894   	; 0x1906 <dequeueWQ>
     9d0:	9a 83       	std	Y+2, r25	; 0x02
     9d2:	89 83       	std	Y+1, r24	; 0x01
     9d4:	00 97       	sbiw	r24, 0x00	; 0
     9d6:	79 f4       	brne	.+30     	; 0x9f6 <Kernel_Unlock_Mutex+0xa0>
     9d8:	87 e0       	ldi	r24, 0x07	; 7
     9da:	80 9f       	mul	r24, r16
     9dc:	f0 01       	movw	r30, r0
     9de:	81 9f       	mul	r24, r17
     9e0:	f0 0d       	add	r31, r0
     9e2:	11 24       	eor	r1, r1
     9e4:	e6 59       	subi	r30, 0x96	; 150
     9e6:	fd 4f       	sbci	r31, 0xFD	; 253
     9e8:	16 82       	std	Z+6, r1	; 0x06
     9ea:	15 82       	std	Z+5, r1	; 0x05
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	82 83       	std	Z+2, r24	; 0x02
     9f0:	14 82       	std	Z+4, r1	; 0x04
     9f2:	13 82       	std	Z+3, r1	; 0x03
     9f4:	bc c0       	rjmp	.+376    	; 0xb6e <Kernel_Unlock_Mutex+0x218>
     9f6:	27 e0       	ldi	r18, 0x07	; 7
     9f8:	20 9f       	mul	r18, r16
     9fa:	f0 01       	movw	r30, r0
     9fc:	21 9f       	mul	r18, r17
     9fe:	f0 0d       	add	r31, r0
     a00:	11 24       	eor	r1, r1
     a02:	e6 59       	subi	r30, 0x96	; 150
     a04:	fd 4f       	sbci	r31, 0xFD	; 253
     a06:	21 e0       	ldi	r18, 0x01	; 1
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	36 83       	std	Z+6, r19	; 0x06
     a0c:	25 83       	std	Z+5, r18	; 0x05
     a0e:	dc 01       	movw	r26, r24
     a10:	2d 91       	ld	r18, X+
     a12:	3c 91       	ld	r19, X
     a14:	34 83       	std	Z+4, r19	; 0x04
     a16:	23 83       	std	Z+3, r18	; 0x03
     a18:	20 91 40 02 	lds	r18, 0x0240
     a1c:	30 91 41 02 	lds	r19, 0x0241
     a20:	d9 01       	movw	r26, r18
     a22:	a9 5f       	subi	r26, 0xF9	; 249
     a24:	be 4f       	sbci	r27, 0xFE	; 254
     a26:	4d 91       	ld	r20, X+
     a28:	5c 91       	ld	r21, X
     a2a:	11 97       	sbiw	r26, 0x01	; 1
     a2c:	fc 01       	movw	r30, r24
     a2e:	e9 5f       	subi	r30, 0xF9	; 249
     a30:	fe 4f       	sbci	r31, 0xFE	; 254
     a32:	51 83       	std	Z+1, r21	; 0x01
     a34:	40 83       	st	Z, r20
     a36:	33 97       	sbiw	r30, 0x03	; 3
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	80 83       	st	Z, r24
     a3c:	f9 01       	movw	r30, r18
     a3e:	eb 5f       	subi	r30, 0xFB	; 251
     a40:	fe 4f       	sbci	r31, 0xFE	; 254
     a42:	40 81       	ld	r20, Z
     a44:	51 81       	ldd	r21, Z+1	; 0x01
     a46:	11 96       	adiw	r26, 0x01	; 1
     a48:	5c 93       	st	X, r21
     a4a:	4e 93       	st	-X, r20
     a4c:	31 97       	sbiw	r30, 0x01	; 1
     a4e:	80 83       	st	Z, r24
     a50:	42 e3       	ldi	r20, 0x32	; 50
     a52:	52 e0       	ldi	r21, 0x02	; 2
     a54:	64 e1       	ldi	r22, 0x14	; 20
     a56:	75 e1       	ldi	r23, 0x15	; 21
     a58:	ce 01       	movw	r24, r28
     a5a:	01 96       	adiw	r24, 0x01	; 1
     a5c:	f1 d6       	rcall	.+3554   	; 0x1840 <enqueueRQ>
     a5e:	87 c0       	rjmp	.+270    	; 0xb6e <Kernel_Unlock_Mutex+0x218>
     a60:	87 e0       	ldi	r24, 0x07	; 7
     a62:	80 9f       	mul	r24, r16
     a64:	f0 01       	movw	r30, r0
     a66:	81 9f       	mul	r24, r17
     a68:	f0 0d       	add	r31, r0
     a6a:	11 24       	eor	r1, r1
     a6c:	e6 59       	subi	r30, 0x96	; 150
     a6e:	fd 4f       	sbci	r31, 0xFD	; 253
     a70:	85 81       	ldd	r24, Z+5	; 0x05
     a72:	96 81       	ldd	r25, Z+6	; 0x06
     a74:	82 30       	cpi	r24, 0x02	; 2
     a76:	91 05       	cpc	r25, r1
     a78:	60 f0       	brcs	.+24     	; 0xa92 <Kernel_Unlock_Mutex+0x13c>
     a7a:	27 e0       	ldi	r18, 0x07	; 7
     a7c:	20 9f       	mul	r18, r16
     a7e:	f0 01       	movw	r30, r0
     a80:	21 9f       	mul	r18, r17
     a82:	f0 0d       	add	r31, r0
     a84:	11 24       	eor	r1, r1
     a86:	e6 59       	subi	r30, 0x96	; 150
     a88:	fd 4f       	sbci	r31, 0xFD	; 253
     a8a:	01 97       	sbiw	r24, 0x01	; 1
     a8c:	96 83       	std	Z+6, r25	; 0x06
     a8e:	85 83       	std	Z+5, r24	; 0x05
     a90:	6e c0       	rjmp	.+220    	; 0xb6e <Kernel_Unlock_Mutex+0x218>
     a92:	6e e2       	ldi	r22, 0x2E	; 46
     a94:	72 e0       	ldi	r23, 0x02	; 2
     a96:	86 e3       	ldi	r24, 0x36	; 54
     a98:	95 e1       	ldi	r25, 0x15	; 21
     a9a:	35 d7       	rcall	.+3690   	; 0x1906 <dequeueWQ>
     a9c:	9a 83       	std	Y+2, r25	; 0x02
     a9e:	89 83       	std	Y+1, r24	; 0x01
     aa0:	00 97       	sbiw	r24, 0x00	; 0
     aa2:	49 f5       	brne	.+82     	; 0xaf6 <Kernel_Unlock_Mutex+0x1a0>
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	80 9f       	mul	r24, r16
     aa8:	f0 01       	movw	r30, r0
     aaa:	81 9f       	mul	r24, r17
     aac:	f0 0d       	add	r31, r0
     aae:	11 24       	eor	r1, r1
     ab0:	e6 59       	subi	r30, 0x96	; 150
     ab2:	fd 4f       	sbci	r31, 0xFD	; 253
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	82 83       	std	Z+2, r24	; 0x02
     ab8:	16 82       	std	Z+6, r1	; 0x06
     aba:	15 82       	std	Z+5, r1	; 0x05
     abc:	14 82       	std	Z+4, r1	; 0x04
     abe:	13 82       	std	Z+3, r1	; 0x03
     ac0:	e0 91 40 02 	lds	r30, 0x0240
     ac4:	f0 91 41 02 	lds	r31, 0x0241
     ac8:	df 01       	movw	r26, r30
     aca:	ab 5f       	subi	r26, 0xFB	; 251
     acc:	be 4f       	sbci	r27, 0xFE	; 254
     ace:	8d 91       	ld	r24, X+
     ad0:	9c 91       	ld	r25, X
     ad2:	11 97       	sbiw	r26, 0x01	; 1
     ad4:	12 96       	adiw	r26, 0x02	; 2
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	9c 93       	st	X, r25
     ada:	8e 93       	st	-X, r24
     adc:	80 81       	ld	r24, Z
     ade:	91 81       	ldd	r25, Z+1	; 0x01
     ae0:	02 97       	sbiw	r24, 0x02	; 2
     ae2:	08 f4       	brcc	.+2      	; 0xae6 <Kernel_Unlock_Mutex+0x190>
     ae4:	44 c0       	rjmp	.+136    	; 0xb6e <Kernel_Unlock_Mutex+0x218>
     ae6:	80 81       	ld	r24, Z
     ae8:	91 81       	ldd	r25, Z+1	; 0x01
     aea:	02 97       	sbiw	r24, 0x02	; 2
     aec:	09 f4       	brne	.+2      	; 0xaf0 <Kernel_Unlock_Mutex+0x19a>
     aee:	3f c0       	rjmp	.+126    	; 0xb6e <Kernel_Unlock_Mutex+0x218>
     af0:	80 81       	ld	r24, Z
     af2:	91 81       	ldd	r25, Z+1	; 0x01
     af4:	3c c0       	rjmp	.+120    	; 0xb6e <Kernel_Unlock_Mutex+0x218>
     af6:	27 e0       	ldi	r18, 0x07	; 7
     af8:	20 9f       	mul	r18, r16
     afa:	f0 01       	movw	r30, r0
     afc:	21 9f       	mul	r18, r17
     afe:	f0 0d       	add	r31, r0
     b00:	11 24       	eor	r1, r1
     b02:	e6 59       	subi	r30, 0x96	; 150
     b04:	fd 4f       	sbci	r31, 0xFD	; 253
     b06:	21 e0       	ldi	r18, 0x01	; 1
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	36 83       	std	Z+6, r19	; 0x06
     b0c:	25 83       	std	Z+5, r18	; 0x05
     b0e:	dc 01       	movw	r26, r24
     b10:	2d 91       	ld	r18, X+
     b12:	3c 91       	ld	r19, X
     b14:	34 83       	std	Z+4, r19	; 0x04
     b16:	23 83       	std	Z+3, r18	; 0x03
     b18:	20 91 40 02 	lds	r18, 0x0240
     b1c:	30 91 41 02 	lds	r19, 0x0241
     b20:	d9 01       	movw	r26, r18
     b22:	a9 5f       	subi	r26, 0xF9	; 249
     b24:	be 4f       	sbci	r27, 0xFE	; 254
     b26:	4d 91       	ld	r20, X+
     b28:	5c 91       	ld	r21, X
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	fc 01       	movw	r30, r24
     b2e:	e9 5f       	subi	r30, 0xF9	; 249
     b30:	fe 4f       	sbci	r31, 0xFE	; 254
     b32:	51 83       	std	Z+1, r21	; 0x01
     b34:	40 83       	st	Z, r20
     b36:	33 97       	sbiw	r30, 0x03	; 3
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	80 83       	st	Z, r24
     b3c:	f9 01       	movw	r30, r18
     b3e:	eb 5f       	subi	r30, 0xFB	; 251
     b40:	fe 4f       	sbci	r31, 0xFE	; 254
     b42:	40 81       	ld	r20, Z
     b44:	51 81       	ldd	r21, Z+1	; 0x01
     b46:	11 96       	adiw	r26, 0x01	; 1
     b48:	5c 93       	st	X, r21
     b4a:	4e 93       	st	-X, r20
     b4c:	31 97       	sbiw	r30, 0x01	; 1
     b4e:	80 83       	st	Z, r24
     b50:	42 e3       	ldi	r20, 0x32	; 50
     b52:	52 e0       	ldi	r21, 0x02	; 2
     b54:	64 e1       	ldi	r22, 0x14	; 20
     b56:	75 e1       	ldi	r23, 0x15	; 21
     b58:	ce 01       	movw	r24, r28
     b5a:	01 96       	adiw	r24, 0x01	; 1
     b5c:	71 d6       	rcall	.+3298   	; 0x1840 <enqueueRQ>
     b5e:	42 e3       	ldi	r20, 0x32	; 50
     b60:	52 e0       	ldi	r21, 0x02	; 2
     b62:	64 e1       	ldi	r22, 0x14	; 20
     b64:	75 e1       	ldi	r23, 0x15	; 21
     b66:	80 e4       	ldi	r24, 0x40	; 64
     b68:	92 e0       	ldi	r25, 0x02	; 2
     b6a:	6a d6       	rcall	.+3284   	; 0x1840 <enqueueRQ>
     b6c:	d0 de       	rcall	.-608    	; 0x90e <Dispatch>
     b6e:	0f 90       	pop	r0
     b70:	0f 90       	pop	r0
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	08 95       	ret

00000b7c <OS_Start>:
     b7c:	2f 92       	push	r2
     b7e:	3f 92       	push	r3
     b80:	4f 92       	push	r4
     b82:	5f 92       	push	r5
     b84:	6f 92       	push	r6
     b86:	7f 92       	push	r7
     b88:	8f 92       	push	r8
     b8a:	9f 92       	push	r9
     b8c:	af 92       	push	r10
     b8e:	bf 92       	push	r11
     b90:	cf 92       	push	r12
     b92:	df 92       	push	r13
     b94:	ef 92       	push	r14
     b96:	ff 92       	push	r15
     b98:	0f 93       	push	r16
     b9a:	1f 93       	push	r17
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	00 d0       	rcall	.+0      	; 0xba2 <OS_Start+0x26>
     ba2:	1f 92       	push	r1
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	80 91 3e 02 	lds	r24, 0x023E
     bac:	90 91 3f 02 	lds	r25, 0x023F
     bb0:	89 2b       	or	r24, r25
     bb2:	09 f0       	breq	.+2      	; 0xbb6 <OS_Start+0x3a>
     bb4:	f1 c3       	rjmp	.+2018   	; 0x1398 <OS_Start+0x81c>
     bb6:	80 91 3c 02 	lds	r24, 0x023C
     bba:	90 91 3d 02 	lds	r25, 0x023D
     bbe:	89 2b       	or	r24, r25
     bc0:	09 f4       	brne	.+2      	; 0xbc4 <OS_Start+0x48>
     bc2:	ea c3       	rjmp	.+2004   	; 0x1398 <OS_Start+0x81c>
     bc4:	f8 94       	cli
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	90 93 3f 02 	sts	0x023F, r25
     bce:	80 93 3e 02 	sts	0x023E, r24
     bd2:	9d de       	rcall	.-710    	; 0x90e <Dispatch>
     bd4:	0f 2e       	mov	r0, r31
     bd6:	f2 e4       	ldi	r31, 0x42	; 66
     bd8:	ef 2e       	mov	r14, r31
     bda:	f2 e0       	ldi	r31, 0x02	; 2
     bdc:	ff 2e       	mov	r15, r31
     bde:	f0 2d       	mov	r31, r0
     be0:	0f 2e       	mov	r0, r31
     be2:	fe e1       	ldi	r31, 0x1E	; 30
     be4:	af 2e       	mov	r10, r31
     be6:	bb 24       	eor	r11, r11
     be8:	b3 94       	inc	r11
     bea:	f0 2d       	mov	r31, r0
     bec:	0f 2e       	mov	r0, r31
     bee:	f3 e6       	ldi	r31, 0x63	; 99
     bf0:	2f 2e       	mov	r2, r31
     bf2:	31 2c       	mov	r3, r1
     bf4:	f0 2d       	mov	r31, r0
     bf6:	88 24       	eor	r8, r8
     bf8:	83 94       	inc	r8
     bfa:	91 2c       	mov	r9, r1
     bfc:	0f 2e       	mov	r0, r31
     bfe:	fa e6       	ldi	r31, 0x6A	; 106
     c00:	cf 2e       	mov	r12, r31
     c02:	f2 e0       	ldi	r31, 0x02	; 2
     c04:	df 2e       	mov	r13, r31
     c06:	f0 2d       	mov	r31, r0
     c08:	02 ea       	ldi	r16, 0xA2	; 162
     c0a:	12 e0       	ldi	r17, 0x02	; 2
     c0c:	0f 2e       	mov	r0, r31
     c0e:	fa e0       	ldi	r31, 0x0A	; 10
     c10:	6f 2e       	mov	r6, r31
     c12:	71 2c       	mov	r7, r1
     c14:	f0 2d       	mov	r31, r0
     c16:	e0 91 40 02 	lds	r30, 0x0240
     c1a:	f0 91 41 02 	lds	r31, 0x0241
     c1e:	df 01       	movw	r26, r30
     c20:	a3 5f       	subi	r26, 0xF3	; 243
     c22:	be 4f       	sbci	r27, 0xFE	; 254
     c24:	1c 92       	st	X, r1
     c26:	82 81       	ldd	r24, Z+2	; 0x02
     c28:	93 81       	ldd	r25, Z+3	; 0x03
     c2a:	90 93 35 15 	sts	0x1535, r25
     c2e:	80 93 34 15 	sts	0x1534, r24
     c32:	87 da       	rcall	.-2802   	; 0x142 <CSwitch>
     c34:	80 91 40 02 	lds	r24, 0x0240
     c38:	90 91 41 02 	lds	r25, 0x0241
     c3c:	9c 83       	std	Y+4, r25	; 0x04
     c3e:	8b 83       	std	Y+3, r24	; 0x03
     c40:	80 91 34 15 	lds	r24, 0x1534
     c44:	90 91 35 15 	lds	r25, 0x1535
     c48:	ab 81       	ldd	r26, Y+3	; 0x03
     c4a:	bc 81       	ldd	r27, Y+4	; 0x04
     c4c:	13 96       	adiw	r26, 0x03	; 3
     c4e:	9c 93       	st	X, r25
     c50:	8e 93       	st	-X, r24
     c52:	12 97       	sbiw	r26, 0x02	; 2
     c54:	fd 01       	movw	r30, r26
     c56:	e3 5f       	subi	r30, 0xF3	; 243
     c58:	fe 4f       	sbci	r31, 0xFE	; 254
     c5a:	e0 81       	ld	r30, Z
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	ed 30       	cpi	r30, 0x0D	; 13
     c60:	f1 05       	cpc	r31, r1
     c62:	c8 f6       	brcc	.-78     	; 0xc16 <OS_Start+0x9a>
     c64:	88 27       	eor	r24, r24
     c66:	ee 58       	subi	r30, 0x8E	; 142
     c68:	ff 4f       	sbci	r31, 0xFF	; 255
     c6a:	8f 4f       	sbci	r24, 0xFF	; 255
     c6c:	0c 94 41 0e 	jmp	0x1c82	; 0x1c82 <__tablejump2__>
     c70:	eb 81       	ldd	r30, Y+3	; 0x03
     c72:	fc 81       	ldd	r31, Y+4	; 0x04
     c74:	e4 5e       	subi	r30, 0xE4	; 228
     c76:	fe 4f       	sbci	r31, 0xFE	; 254
     c78:	80 81       	ld	r24, Z
     c7a:	91 81       	ldd	r25, Z+1	; 0x01
     c7c:	e2 ea       	ldi	r30, 0xA2	; 162
     c7e:	f2 e0       	ldi	r31, 0x02	; 2
     c80:	20 81       	ld	r18, Z
     c82:	31 81       	ldd	r19, Z+1	; 0x01
     c84:	28 17       	cp	r18, r24
     c86:	39 07       	cpc	r19, r25
     c88:	09 f0       	breq	.+2      	; 0xc8c <OS_Start+0x110>
     c8a:	89 c0       	rjmp	.+274    	; 0xd9e <OS_Start+0x222>
     c8c:	01 c3       	rjmp	.+1538   	; 0x1290 <OS_Start+0x714>
     c8e:	eb 81       	ldd	r30, Y+3	; 0x03
     c90:	fc 81       	ldd	r31, Y+4	; 0x04
     c92:	e7 5f       	subi	r30, 0xF7	; 247
     c94:	fe 4f       	sbci	r31, 0xFE	; 254
     c96:	40 81       	ld	r20, Z
     c98:	51 81       	ldd	r21, Z+1	; 0x01
     c9a:	eb 81       	ldd	r30, Y+3	; 0x03
     c9c:	fc 81       	ldd	r31, Y+4	; 0x04
     c9e:	eb 5f       	subi	r30, 0xFB	; 251
     ca0:	fe 4f       	sbci	r31, 0xFE	; 254
     ca2:	60 81       	ld	r22, Z
     ca4:	71 81       	ldd	r23, Z+1	; 0x01
     ca6:	eb 81       	ldd	r30, Y+3	; 0x03
     ca8:	fc 81       	ldd	r31, Y+4	; 0x04
     caa:	e5 5f       	subi	r30, 0xF5	; 245
     cac:	fe 4f       	sbci	r31, 0xFE	; 254
     cae:	80 81       	ld	r24, Z
     cb0:	91 81       	ldd	r25, Z+1	; 0x01
     cb2:	74 dd       	rcall	.-1304   	; 0x79c <Kernel_Create_Task>
     cb4:	eb 81       	ldd	r30, Y+3	; 0x03
     cb6:	fc 81       	ldd	r31, Y+4	; 0x04
     cb8:	e2 5f       	subi	r30, 0xF2	; 242
     cba:	fe 4f       	sbci	r31, 0xFE	; 254
     cbc:	91 83       	std	Z+1, r25	; 0x01
     cbe:	80 83       	st	Z, r24
     cc0:	aa cf       	rjmp	.-172    	; 0xc16 <OS_Start+0x9a>
     cc2:	eb 81       	ldd	r30, Y+3	; 0x03
     cc4:	fc 81       	ldd	r31, Y+4	; 0x04
     cc6:	ec 5f       	subi	r30, 0xFC	; 252
     cc8:	fe 4f       	sbci	r31, 0xFE	; 254
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	80 83       	st	Z, r24
     cce:	42 e3       	ldi	r20, 0x32	; 50
     cd0:	52 e0       	ldi	r21, 0x02	; 2
     cd2:	64 e1       	ldi	r22, 0x14	; 20
     cd4:	75 e1       	ldi	r23, 0x15	; 21
     cd6:	80 e4       	ldi	r24, 0x40	; 64
     cd8:	92 e0       	ldi	r25, 0x02	; 2
     cda:	b2 d5       	rcall	.+2916   	; 0x1840 <enqueueRQ>
     cdc:	18 de       	rcall	.-976    	; 0x90e <Dispatch>
     cde:	9b cf       	rjmp	.-202    	; 0xc16 <OS_Start+0x9a>
     ce0:	eb 81       	ldd	r30, Y+3	; 0x03
     ce2:	fc 81       	ldd	r31, Y+4	; 0x04
     ce4:	ec 5f       	subi	r30, 0xFC	; 252
     ce6:	fe 4f       	sbci	r31, 0xFE	; 254
     ce8:	83 e0       	ldi	r24, 0x03	; 3
     cea:	80 83       	st	Z, r24
     cec:	40 e3       	ldi	r20, 0x30	; 48
     cee:	52 e0       	ldi	r21, 0x02	; 2
     cf0:	64 ef       	ldi	r22, 0xF4	; 244
     cf2:	74 e1       	ldi	r23, 0x14	; 20
     cf4:	80 e4       	ldi	r24, 0x40	; 64
     cf6:	92 e0       	ldi	r25, 0x02	; 2
     cf8:	32 d5       	rcall	.+2660   	; 0x175e <enqueueSQ>
     cfa:	09 de       	rcall	.-1006   	; 0x90e <Dispatch>
     cfc:	8c cf       	rjmp	.-232    	; 0xc16 <OS_Start+0x9a>
     cfe:	ab 81       	ldd	r26, Y+3	; 0x03
     d00:	bc 81       	ldd	r27, Y+4	; 0x04
     d02:	2d 91       	ld	r18, X+
     d04:	3c 91       	ld	r19, X
     d06:	11 97       	sbiw	r26, 0x01	; 1
     d08:	fd 01       	movw	r30, r26
     d0a:	e4 5e       	subi	r30, 0xE4	; 228
     d0c:	fe 4f       	sbci	r31, 0xFE	; 254
     d0e:	80 81       	ld	r24, Z
     d10:	91 81       	ldd	r25, Z+1	; 0x01
     d12:	28 17       	cp	r18, r24
     d14:	39 07       	cpc	r19, r25
     d16:	51 f0       	breq	.+20     	; 0xd2c <OS_Start+0x1b0>
     d18:	80 81       	ld	r24, Z
     d1a:	91 81       	ldd	r25, Z+1	; 0x01
     d1c:	e2 ea       	ldi	r30, 0xA2	; 162
     d1e:	f2 e0       	ldi	r31, 0x02	; 2
     d20:	20 81       	ld	r18, Z
     d22:	31 81       	ldd	r19, Z+1	; 0x01
     d24:	28 17       	cp	r18, r24
     d26:	39 07       	cpc	r19, r25
     d28:	41 f4       	brne	.+16     	; 0xd3a <OS_Start+0x1be>
     d2a:	a1 c2       	rjmp	.+1346   	; 0x126e <OS_Start+0x6f2>
     d2c:	eb 81       	ldd	r30, Y+3	; 0x03
     d2e:	fc 81       	ldd	r31, Y+4	; 0x04
     d30:	e6 5e       	subi	r30, 0xE6	; 230
     d32:	fe 4f       	sbci	r31, 0xFE	; 254
     d34:	91 82       	std	Z+1, r9	; 0x01
     d36:	80 82       	st	Z, r8
     d38:	1a c0       	rjmp	.+52     	; 0xd6e <OS_Start+0x1f2>
     d3a:	e0 ec       	ldi	r30, 0xC0	; 192
     d3c:	f3 e0       	ldi	r31, 0x03	; 3
     d3e:	c4 01       	movw	r24, r8
     d40:	ab 81       	ldd	r26, Y+3	; 0x03
     d42:	bc 81       	ldd	r27, Y+4	; 0x04
     d44:	a4 5e       	subi	r26, 0xE4	; 228
     d46:	be 4f       	sbci	r27, 0xFE	; 254
     d48:	6b 81       	ldd	r22, Y+3	; 0x03
     d4a:	7c 81       	ldd	r23, Y+4	; 0x04
     d4c:	2d 91       	ld	r18, X+
     d4e:	3c 91       	ld	r19, X
     d50:	11 97       	sbiw	r26, 0x01	; 1
     d52:	40 81       	ld	r20, Z
     d54:	51 81       	ldd	r21, Z+1	; 0x01
     d56:	42 17       	cp	r20, r18
     d58:	53 07       	cpc	r21, r19
     d5a:	09 f4       	brne	.+2      	; 0xd5e <OS_Start+0x1e2>
     d5c:	8b c2       	rjmp	.+1302   	; 0x1274 <OS_Start+0x6f8>
     d5e:	01 96       	adiw	r24, 0x01	; 1
     d60:	e2 5e       	subi	r30, 0xE2	; 226
     d62:	fe 4f       	sbci	r31, 0xFE	; 254
     d64:	80 31       	cpi	r24, 0x10	; 16
     d66:	91 05       	cpc	r25, r1
     d68:	89 f7       	brne	.-30     	; 0xd4c <OS_Start+0x1d0>
     d6a:	7c 83       	std	Y+4, r23	; 0x04
     d6c:	6b 83       	std	Y+3, r22	; 0x03
     d6e:	eb 81       	ldd	r30, Y+3	; 0x03
     d70:	fc 81       	ldd	r31, Y+4	; 0x04
     d72:	e6 5e       	subi	r30, 0xE6	; 230
     d74:	fe 4f       	sbci	r31, 0xFE	; 254
     d76:	80 81       	ld	r24, Z
     d78:	91 81       	ldd	r25, Z+1	; 0x01
     d7a:	89 2b       	or	r24, r25
     d7c:	09 f4       	brne	.+2      	; 0xd80 <OS_Start+0x204>
     d7e:	4b cf       	rjmp	.-362    	; 0xc16 <OS_Start+0x9a>
     d80:	eb 81       	ldd	r30, Y+3	; 0x03
     d82:	fc 81       	ldd	r31, Y+4	; 0x04
     d84:	ec 5f       	subi	r30, 0xFC	; 252
     d86:	fe 4f       	sbci	r31, 0xFE	; 254
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	80 83       	st	Z, r24
     d8c:	42 e3       	ldi	r20, 0x32	; 50
     d8e:	52 e0       	ldi	r21, 0x02	; 2
     d90:	64 e1       	ldi	r22, 0x14	; 20
     d92:	75 e1       	ldi	r23, 0x15	; 21
     d94:	80 e4       	ldi	r24, 0x40	; 64
     d96:	92 e0       	ldi	r25, 0x02	; 2
     d98:	53 d5       	rcall	.+2726   	; 0x1840 <enqueueRQ>
     d9a:	b9 dd       	rcall	.-1166   	; 0x90e <Dispatch>
     d9c:	3c cf       	rjmp	.-392    	; 0xc16 <OS_Start+0x9a>
     d9e:	e0 ec       	ldi	r30, 0xC0	; 192
     da0:	f3 e0       	ldi	r31, 0x03	; 3
     da2:	c4 01       	movw	r24, r8
     da4:	ab 81       	ldd	r26, Y+3	; 0x03
     da6:	bc 81       	ldd	r27, Y+4	; 0x04
     da8:	a4 5e       	subi	r26, 0xE4	; 228
     daa:	be 4f       	sbci	r27, 0xFE	; 254
     dac:	6b 81       	ldd	r22, Y+3	; 0x03
     dae:	7c 81       	ldd	r23, Y+4	; 0x04
     db0:	2d 91       	ld	r18, X+
     db2:	3c 91       	ld	r19, X
     db4:	11 97       	sbiw	r26, 0x01	; 1
     db6:	40 81       	ld	r20, Z
     db8:	51 81       	ldd	r21, Z+1	; 0x01
     dba:	42 17       	cp	r20, r18
     dbc:	53 07       	cpc	r21, r19
     dbe:	09 f4       	brne	.+2      	; 0xdc2 <OS_Start+0x246>
     dc0:	6a c2       	rjmp	.+1236   	; 0x1296 <OS_Start+0x71a>
     dc2:	01 96       	adiw	r24, 0x01	; 1
     dc4:	e2 5e       	subi	r30, 0xE2	; 226
     dc6:	fe 4f       	sbci	r31, 0xFE	; 254
     dc8:	80 31       	cpi	r24, 0x10	; 16
     dca:	91 05       	cpc	r25, r1
     dcc:	89 f7       	brne	.-30     	; 0xdb0 <OS_Start+0x234>
     dce:	23 cf       	rjmp	.-442    	; 0xc16 <OS_Start+0x9a>
     dd0:	8a 9d       	mul	r24, r10
     dd2:	90 01       	movw	r18, r0
     dd4:	8b 9d       	mul	r24, r11
     dd6:	30 0d       	add	r19, r0
     dd8:	9a 9d       	mul	r25, r10
     dda:	30 0d       	add	r19, r0
     ddc:	11 24       	eor	r1, r1
     dde:	c9 01       	movw	r24, r18
     de0:	8e 55       	subi	r24, 0x5E	; 94
     de2:	9d 4f       	sbci	r25, 0xFD	; 253
     de4:	fc 01       	movw	r30, r24
     de6:	e6 5e       	subi	r30, 0xE6	; 230
     de8:	fe 4f       	sbci	r31, 0xFE	; 254
     dea:	11 82       	std	Z+1, r1	; 0x01
     dec:	10 82       	st	Z, r1
     dee:	eb 81       	ldd	r30, Y+3	; 0x03
     df0:	fc 81       	ldd	r31, Y+4	; 0x04
     df2:	e9 5f       	subi	r30, 0xF9	; 249
     df4:	fe 4f       	sbci	r31, 0xFE	; 254
     df6:	20 81       	ld	r18, Z
     df8:	31 81       	ldd	r19, Z+1	; 0x01
     dfa:	fc 01       	movw	r30, r24
     dfc:	e9 5f       	subi	r30, 0xF9	; 249
     dfe:	fe 4f       	sbci	r31, 0xFE	; 254
     e00:	80 81       	ld	r24, Z
     e02:	91 81       	ldd	r25, Z+1	; 0x01
     e04:	82 17       	cp	r24, r18
     e06:	93 07       	cpc	r25, r19
     e08:	08 f0       	brcs	.+2      	; 0xe0c <OS_Start+0x290>
     e0a:	05 cf       	rjmp	.-502    	; 0xc16 <OS_Start+0x9a>
     e0c:	eb 81       	ldd	r30, Y+3	; 0x03
     e0e:	fc 81       	ldd	r31, Y+4	; 0x04
     e10:	ec 5f       	subi	r30, 0xFC	; 252
     e12:	fe 4f       	sbci	r31, 0xFE	; 254
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	80 83       	st	Z, r24
     e18:	42 e3       	ldi	r20, 0x32	; 50
     e1a:	52 e0       	ldi	r21, 0x02	; 2
     e1c:	64 e1       	ldi	r22, 0x14	; 20
     e1e:	75 e1       	ldi	r23, 0x15	; 21
     e20:	80 e4       	ldi	r24, 0x40	; 64
     e22:	92 e0       	ldi	r25, 0x02	; 2
     e24:	0d d5       	rcall	.+2586   	; 0x1840 <enqueueRQ>
     e26:	73 dd       	rcall	.-1306   	; 0x90e <Dispatch>
     e28:	f6 ce       	rjmp	.-532    	; 0xc16 <OS_Start+0x9a>
     e2a:	eb 81       	ldd	r30, Y+3	; 0x03
     e2c:	fc 81       	ldd	r31, Y+4	; 0x04
     e2e:	e9 5f       	subi	r30, 0xF9	; 249
     e30:	fe 4f       	sbci	r31, 0xFE	; 254
     e32:	11 82       	std	Z+1, r1	; 0x01
     e34:	10 82       	st	Z, r1
     e36:	eb 81       	ldd	r30, Y+3	; 0x03
     e38:	fc 81       	ldd	r31, Y+4	; 0x04
     e3a:	eb 5f       	subi	r30, 0xFB	; 251
     e3c:	fe 4f       	sbci	r31, 0xFE	; 254
     e3e:	11 82       	std	Z+1, r1	; 0x01
     e40:	10 82       	st	Z, r1
     e42:	eb 81       	ldd	r30, Y+3	; 0x03
     e44:	fc 81       	ldd	r31, Y+4	; 0x04
     e46:	ec 5f       	subi	r30, 0xFC	; 252
     e48:	fe 4f       	sbci	r31, 0xFE	; 254
     e4a:	86 e0       	ldi	r24, 0x06	; 6
     e4c:	80 83       	st	Z, r24
     e4e:	dc 82       	std	Y+4, r13	; 0x04
     e50:	cb 82       	std	Y+3, r12	; 0x03
     e52:	e0 91 40 02 	lds	r30, 0x0240
     e56:	f0 91 41 02 	lds	r31, 0x0241
     e5a:	80 81       	ld	r24, Z
     e5c:	91 81       	ldd	r25, Z+1	; 0x01
     e5e:	ab 81       	ldd	r26, Y+3	; 0x03
     e60:	bc 81       	ldd	r27, Y+4	; 0x04
     e62:	13 96       	adiw	r26, 0x03	; 3
     e64:	2d 91       	ld	r18, X+
     e66:	3c 91       	ld	r19, X
     e68:	14 97       	sbiw	r26, 0x04	; 4
     e6a:	28 17       	cp	r18, r24
     e6c:	39 07       	cpc	r19, r25
     e6e:	39 f4       	brne	.+14     	; 0xe7e <OS_Start+0x302>
     e70:	8d 91       	ld	r24, X+
     e72:	9c 91       	ld	r25, X
     e74:	ec 5e       	subi	r30, 0xEC	; 236
     e76:	fe 4f       	sbci	r31, 0xFE	; 254
     e78:	91 83       	std	Z+1, r25	; 0x01
     e7a:	80 83       	st	Z, r24
     e7c:	6c dd       	rcall	.-1320   	; 0x956 <Kernel_Unlock_Mutex>
     e7e:	eb 81       	ldd	r30, Y+3	; 0x03
     e80:	fc 81       	ldd	r31, Y+4	; 0x04
     e82:	37 96       	adiw	r30, 0x07	; 7
     e84:	fc 83       	std	Y+4, r31	; 0x04
     e86:	eb 83       	std	Y+3, r30	; 0x03
     e88:	e0 17       	cp	r30, r16
     e8a:	f1 07       	cpc	r31, r17
     e8c:	11 f7       	brne	.-60     	; 0xe52 <OS_Start+0x2d6>
     e8e:	e0 91 40 02 	lds	r30, 0x0240
     e92:	f0 91 41 02 	lds	r31, 0x0241
     e96:	df 01       	movw	r26, r30
     e98:	ac 5f       	subi	r26, 0xFC	; 252
     e9a:	be 4f       	sbci	r27, 0xFE	; 254
     e9c:	1c 92       	st	X, r1
     e9e:	52 96       	adiw	r26, 0x12	; 18
     ea0:	11 96       	adiw	r26, 0x01	; 1
     ea2:	3c 92       	st	X, r3
     ea4:	2e 92       	st	-X, r2
     ea6:	1f 97       	sbiw	r26, 0x0f	; 15
     ea8:	11 96       	adiw	r26, 0x01	; 1
     eaa:	7c 92       	st	X, r7
     eac:	6e 92       	st	-X, r6
     eae:	12 97       	sbiw	r26, 0x02	; 2
     eb0:	11 96       	adiw	r26, 0x01	; 1
     eb2:	7c 92       	st	X, r7
     eb4:	6e 92       	st	-X, r6
     eb6:	11 82       	std	Z+1, r1	; 0x01
     eb8:	10 82       	st	Z, r1
     eba:	80 91 3c 02 	lds	r24, 0x023C
     ebe:	90 91 3d 02 	lds	r25, 0x023D
     ec2:	01 97       	sbiw	r24, 0x01	; 1
     ec4:	90 93 3d 02 	sts	0x023D, r25
     ec8:	80 93 3c 02 	sts	0x023C, r24
     ecc:	20 dd       	rcall	.-1472   	; 0x90e <Dispatch>
     ece:	a3 ce       	rjmp	.-698    	; 0xc16 <OS_Start+0x9a>
     ed0:	80 91 38 02 	lds	r24, 0x0238
     ed4:	90 91 39 02 	lds	r25, 0x0239
     ed8:	08 97       	sbiw	r24, 0x08	; 8
     eda:	41 f1       	breq	.+80     	; 0xf2c <OS_Start+0x3b0>
     edc:	d6 01       	movw	r26, r12
     ede:	12 96       	adiw	r26, 0x02	; 2
     ee0:	8c 91       	ld	r24, X
     ee2:	88 23       	and	r24, r24
     ee4:	89 f0       	breq	.+34     	; 0xf08 <OS_Start+0x38c>
     ee6:	e3 e7       	ldi	r30, 0x73	; 115
     ee8:	f2 e0       	ldi	r31, 0x02	; 2
     eea:	94 01       	movw	r18, r8
     eec:	4b 81       	ldd	r20, Y+3	; 0x03
     eee:	5c 81       	ldd	r21, Y+4	; 0x04
     ef0:	80 81       	ld	r24, Z
     ef2:	88 23       	and	r24, r24
     ef4:	61 f0       	breq	.+24     	; 0xf0e <OS_Start+0x392>
     ef6:	2f 5f       	subi	r18, 0xFF	; 255
     ef8:	3f 4f       	sbci	r19, 0xFF	; 255
     efa:	37 96       	adiw	r30, 0x07	; 7
     efc:	28 30       	cpi	r18, 0x08	; 8
     efe:	31 05       	cpc	r19, r1
     f00:	b9 f7       	brne	.-18     	; 0xef0 <OS_Start+0x374>
     f02:	5c 83       	std	Y+4, r21	; 0x04
     f04:	4b 83       	std	Y+3, r20	; 0x03
     f06:	05 c0       	rjmp	.+10     	; 0xf12 <OS_Start+0x396>
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <OS_Start+0x396>
     f0e:	5c 83       	std	Y+4, r21	; 0x04
     f10:	4b 83       	std	Y+3, r20	; 0x03
     f12:	c9 01       	movw	r24, r18
     f14:	88 0f       	add	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	82 1b       	sub	r24, r18
     f22:	93 0b       	sbc	r25, r19
     f24:	86 59       	subi	r24, 0x96	; 150
     f26:	9d 4f       	sbci	r25, 0xFD	; 253
     f28:	69 dc       	rcall	.-1838   	; 0x7fc <Kernel_Init_Mutex_At>
     f2a:	2c 01       	movw	r4, r24
     f2c:	eb 81       	ldd	r30, Y+3	; 0x03
     f2e:	fc 81       	ldd	r31, Y+4	; 0x04
     f30:	e2 5f       	subi	r30, 0xF2	; 242
     f32:	fe 4f       	sbci	r31, 0xFE	; 254
     f34:	51 82       	std	Z+1, r5	; 0x01
     f36:	40 82       	st	Z, r4
     f38:	6e ce       	rjmp	.-804    	; 0xc16 <OS_Start+0x9a>
     f3a:	eb 81       	ldd	r30, Y+3	; 0x03
     f3c:	fc 81       	ldd	r31, Y+4	; 0x04
     f3e:	ec 5e       	subi	r30, 0xEC	; 236
     f40:	fe 4f       	sbci	r31, 0xFE	; 254
     f42:	40 81       	ld	r20, Z
     f44:	51 81       	ldd	r21, Z+1	; 0x01
     f46:	f6 01       	movw	r30, r12
     f48:	80 81       	ld	r24, Z
     f4a:	91 81       	ldd	r25, Z+1	; 0x01
     f4c:	48 17       	cp	r20, r24
     f4e:	59 07       	cpc	r21, r25
     f50:	09 f4       	brne	.+2      	; 0xf54 <OS_Start+0x3d8>
     f52:	b3 c1       	rjmp	.+870    	; 0x12ba <OS_Start+0x73e>
     f54:	c4 01       	movw	r24, r8
     f56:	6b 81       	ldd	r22, Y+3	; 0x03
     f58:	7c 81       	ldd	r23, Y+4	; 0x04
     f5a:	27 81       	ldd	r18, Z+7	; 0x07
     f5c:	30 85       	ldd	r19, Z+8	; 0x08
     f5e:	42 17       	cp	r20, r18
     f60:	53 07       	cpc	r21, r19
     f62:	09 f4       	brne	.+2      	; 0xf66 <OS_Start+0x3ea>
     f64:	ad c1       	rjmp	.+858    	; 0x12c0 <OS_Start+0x744>
     f66:	01 96       	adiw	r24, 0x01	; 1
     f68:	37 96       	adiw	r30, 0x07	; 7
     f6a:	88 30       	cpi	r24, 0x08	; 8
     f6c:	91 05       	cpc	r25, r1
     f6e:	a9 f7       	brne	.-22     	; 0xf5a <OS_Start+0x3de>
     f70:	52 ce       	rjmp	.-860    	; 0xc16 <OS_Start+0x9a>
     f72:	fc 01       	movw	r30, r24
     f74:	ee 0f       	add	r30, r30
     f76:	ff 1f       	adc	r31, r31
     f78:	ee 0f       	add	r30, r30
     f7a:	ff 1f       	adc	r31, r31
     f7c:	ee 0f       	add	r30, r30
     f7e:	ff 1f       	adc	r31, r31
     f80:	e8 1b       	sub	r30, r24
     f82:	f9 0b       	sbc	r31, r25
     f84:	e6 59       	subi	r30, 0x96	; 150
     f86:	fd 4f       	sbci	r31, 0xFD	; 253
     f88:	82 e0       	ldi	r24, 0x02	; 2
     f8a:	82 83       	std	Z+2, r24	; 0x02
     f8c:	ab 81       	ldd	r26, Y+3	; 0x03
     f8e:	bc 81       	ldd	r27, Y+4	; 0x04
     f90:	8d 91       	ld	r24, X+
     f92:	9c 91       	ld	r25, X
     f94:	94 83       	std	Z+4, r25	; 0x04
     f96:	83 83       	std	Z+3, r24	; 0x03
     f98:	85 81       	ldd	r24, Z+5	; 0x05
     f9a:	96 81       	ldd	r25, Z+6	; 0x06
     f9c:	01 96       	adiw	r24, 0x01	; 1
     f9e:	96 83       	std	Z+6, r25	; 0x06
     fa0:	85 83       	std	Z+5, r24	; 0x05
     fa2:	39 ce       	rjmp	.-910    	; 0xc16 <OS_Start+0x9a>
     fa4:	fc 01       	movw	r30, r24
     fa6:	ee 0f       	add	r30, r30
     fa8:	ff 1f       	adc	r31, r31
     faa:	ee 0f       	add	r30, r30
     fac:	ff 1f       	adc	r31, r31
     fae:	ee 0f       	add	r30, r30
     fb0:	ff 1f       	adc	r31, r31
     fb2:	e8 1b       	sub	r30, r24
     fb4:	f9 0b       	sbc	r31, r25
     fb6:	e6 59       	subi	r30, 0x96	; 150
     fb8:	fd 4f       	sbci	r31, 0xFD	; 253
     fba:	23 81       	ldd	r18, Z+3	; 0x03
     fbc:	34 81       	ldd	r19, Z+4	; 0x04
     fbe:	eb 81       	ldd	r30, Y+3	; 0x03
     fc0:	fc 81       	ldd	r31, Y+4	; 0x04
     fc2:	40 81       	ld	r20, Z
     fc4:	51 81       	ldd	r21, Z+1	; 0x01
     fc6:	24 17       	cp	r18, r20
     fc8:	35 07       	cpc	r19, r21
     fca:	89 f4       	brne	.+34     	; 0xfee <OS_Start+0x472>
     fcc:	fc 01       	movw	r30, r24
     fce:	ee 0f       	add	r30, r30
     fd0:	ff 1f       	adc	r31, r31
     fd2:	ee 0f       	add	r30, r30
     fd4:	ff 1f       	adc	r31, r31
     fd6:	ee 0f       	add	r30, r30
     fd8:	ff 1f       	adc	r31, r31
     fda:	e8 1b       	sub	r30, r24
     fdc:	f9 0b       	sbc	r31, r25
     fde:	e6 59       	subi	r30, 0x96	; 150
     fe0:	fd 4f       	sbci	r31, 0xFD	; 253
     fe2:	85 81       	ldd	r24, Z+5	; 0x05
     fe4:	96 81       	ldd	r25, Z+6	; 0x06
     fe6:	01 96       	adiw	r24, 0x01	; 1
     fe8:	96 83       	std	Z+6, r25	; 0x06
     fea:	85 83       	std	Z+5, r24	; 0x05
     fec:	14 ce       	rjmp	.-984    	; 0xc16 <OS_Start+0x9a>
     fee:	e2 ea       	ldi	r30, 0xA2	; 162
     ff0:	f2 e0       	ldi	r31, 0x02	; 2
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	6b 81       	ldd	r22, Y+3	; 0x03
     ff8:	7c 81       	ldd	r23, Y+4	; 0x04
     ffa:	40 81       	ld	r20, Z
     ffc:	51 81       	ldd	r21, Z+1	; 0x01
     ffe:	24 17       	cp	r18, r20
    1000:	35 07       	cpc	r19, r21
    1002:	19 f4       	brne	.+6      	; 0x100a <OS_Start+0x48e>
    1004:	21 15       	cp	r18, r1
    1006:	31 05       	cpc	r19, r1
    1008:	31 f4       	brne	.+12     	; 0x1016 <OS_Start+0x49a>
    100a:	01 96       	adiw	r24, 0x01	; 1
    100c:	e2 5e       	subi	r30, 0xE2	; 226
    100e:	fe 4f       	sbci	r31, 0xFE	; 254
    1010:	80 31       	cpi	r24, 0x10	; 16
    1012:	91 05       	cpc	r25, r1
    1014:	91 f7       	brne	.-28     	; 0xffa <OS_Start+0x47e>
    1016:	7c 83       	std	Y+4, r23	; 0x04
    1018:	6b 83       	std	Y+3, r22	; 0x03
    101a:	fb 01       	movw	r30, r22
    101c:	e9 5f       	subi	r30, 0xF9	; 249
    101e:	fe 4f       	sbci	r31, 0xFE	; 254
    1020:	20 81       	ld	r18, Z
    1022:	31 81       	ldd	r19, Z+1	; 0x01
    1024:	8a 9d       	mul	r24, r10
    1026:	f0 01       	movw	r30, r0
    1028:	8b 9d       	mul	r24, r11
    102a:	f0 0d       	add	r31, r0
    102c:	9a 9d       	mul	r25, r10
    102e:	f0 0d       	add	r31, r0
    1030:	11 24       	eor	r1, r1
    1032:	e7 55       	subi	r30, 0x57	; 87
    1034:	fc 4f       	sbci	r31, 0xFC	; 252
    1036:	40 81       	ld	r20, Z
    1038:	51 81       	ldd	r21, Z+1	; 0x01
    103a:	24 17       	cp	r18, r20
    103c:	35 07       	cpc	r19, r21
    103e:	80 f4       	brcc	.+32     	; 0x1060 <OS_Start+0x4e4>
    1040:	fb 01       	movw	r30, r22
    1042:	e9 5f       	subi	r30, 0xF9	; 249
    1044:	fe 4f       	sbci	r31, 0xFE	; 254
    1046:	20 81       	ld	r18, Z
    1048:	31 81       	ldd	r19, Z+1	; 0x01
    104a:	8a 9d       	mul	r24, r10
    104c:	f0 01       	movw	r30, r0
    104e:	8b 9d       	mul	r24, r11
    1050:	f0 0d       	add	r31, r0
    1052:	9a 9d       	mul	r25, r10
    1054:	f0 0d       	add	r31, r0
    1056:	11 24       	eor	r1, r1
    1058:	e7 55       	subi	r30, 0x57	; 87
    105a:	fc 4f       	sbci	r31, 0xFC	; 252
    105c:	31 83       	std	Z+1, r19	; 0x01
    105e:	20 83       	st	Z, r18
    1060:	eb 81       	ldd	r30, Y+3	; 0x03
    1062:	fc 81       	ldd	r31, Y+4	; 0x04
    1064:	ec 5f       	subi	r30, 0xFC	; 252
    1066:	fe 4f       	sbci	r31, 0xFE	; 254
    1068:	84 e0       	ldi	r24, 0x04	; 4
    106a:	80 83       	st	Z, r24
    106c:	4e e2       	ldi	r20, 0x2E	; 46
    106e:	52 e0       	ldi	r21, 0x02	; 2
    1070:	66 e3       	ldi	r22, 0x36	; 54
    1072:	75 e1       	ldi	r23, 0x15	; 21
    1074:	80 e4       	ldi	r24, 0x40	; 64
    1076:	92 e0       	ldi	r25, 0x02	; 2
    1078:	42 d3       	rcall	.+1668   	; 0x16fe <enqueueWQ>
    107a:	49 dc       	rcall	.-1902   	; 0x90e <Dispatch>
    107c:	cc cd       	rjmp	.-1128   	; 0xc16 <OS_Start+0x9a>
    107e:	6b dc       	rcall	.-1834   	; 0x956 <Kernel_Unlock_Mutex>
    1080:	ca cd       	rjmp	.-1132   	; 0xc16 <OS_Start+0x9a>
    1082:	80 91 36 02 	lds	r24, 0x0236
    1086:	90 91 37 02 	lds	r25, 0x0237
    108a:	08 97       	sbiw	r24, 0x08	; 8
    108c:	31 f1       	breq	.+76     	; 0x10da <OS_Start+0x55e>
    108e:	d7 01       	movw	r26, r14
    1090:	12 96       	adiw	r26, 0x02	; 2
    1092:	8c 91       	ld	r24, X
    1094:	88 23       	and	r24, r24
    1096:	81 f0       	breq	.+32     	; 0x10b8 <OS_Start+0x53c>
    1098:	e9 e4       	ldi	r30, 0x49	; 73
    109a:	f2 e0       	ldi	r31, 0x02	; 2
    109c:	c4 01       	movw	r24, r8
    109e:	4b 81       	ldd	r20, Y+3	; 0x03
    10a0:	5c 81       	ldd	r21, Y+4	; 0x04
    10a2:	20 81       	ld	r18, Z
    10a4:	22 23       	and	r18, r18
    10a6:	59 f0       	breq	.+22     	; 0x10be <OS_Start+0x542>
    10a8:	01 96       	adiw	r24, 0x01	; 1
    10aa:	35 96       	adiw	r30, 0x05	; 5
    10ac:	88 30       	cpi	r24, 0x08	; 8
    10ae:	91 05       	cpc	r25, r1
    10b0:	c1 f7       	brne	.-16     	; 0x10a2 <OS_Start+0x526>
    10b2:	5c 83       	std	Y+4, r21	; 0x04
    10b4:	4b 83       	std	Y+3, r20	; 0x03
    10b6:	05 c0       	rjmp	.+10     	; 0x10c2 <OS_Start+0x546>
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <OS_Start+0x546>
    10be:	5c 83       	std	Y+4, r21	; 0x04
    10c0:	4b 83       	std	Y+3, r20	; 0x03
    10c2:	9c 01       	movw	r18, r24
    10c4:	22 0f       	add	r18, r18
    10c6:	33 1f       	adc	r19, r19
    10c8:	22 0f       	add	r18, r18
    10ca:	33 1f       	adc	r19, r19
    10cc:	82 0f       	add	r24, r18
    10ce:	93 1f       	adc	r25, r19
    10d0:	8e 5b       	subi	r24, 0xBE	; 190
    10d2:	9d 4f       	sbci	r25, 0xFD	; 253
    10d4:	a8 db       	rcall	.-2224   	; 0x826 <Kernel_Init_Event_At>
    10d6:	9a 83       	std	Y+2, r25	; 0x02
    10d8:	89 83       	std	Y+1, r24	; 0x01
    10da:	ab 81       	ldd	r26, Y+3	; 0x03
    10dc:	bc 81       	ldd	r27, Y+4	; 0x04
    10de:	a2 5f       	subi	r26, 0xF2	; 242
    10e0:	be 4f       	sbci	r27, 0xFE	; 254
    10e2:	e9 81       	ldd	r30, Y+1	; 0x01
    10e4:	fa 81       	ldd	r31, Y+2	; 0x02
    10e6:	11 96       	adiw	r26, 0x01	; 1
    10e8:	fc 93       	st	X, r31
    10ea:	ee 93       	st	-X, r30
    10ec:	94 cd       	rjmp	.-1240   	; 0xc16 <OS_Start+0x9a>
    10ee:	eb 81       	ldd	r30, Y+3	; 0x03
    10f0:	fc 81       	ldd	r31, Y+4	; 0x04
    10f2:	e8 5e       	subi	r30, 0xE8	; 232
    10f4:	fe 4f       	sbci	r31, 0xFE	; 254
    10f6:	40 81       	ld	r20, Z
    10f8:	51 81       	ldd	r21, Z+1	; 0x01
    10fa:	d7 01       	movw	r26, r14
    10fc:	8d 91       	ld	r24, X+
    10fe:	9c 91       	ld	r25, X
    1100:	48 17       	cp	r20, r24
    1102:	59 07       	cpc	r21, r25
    1104:	09 f4       	brne	.+2      	; 0x1108 <OS_Start+0x58c>
    1106:	ee c0       	rjmp	.+476    	; 0x12e4 <OS_Start+0x768>
    1108:	f7 01       	movw	r30, r14
    110a:	c4 01       	movw	r24, r8
    110c:	6b 81       	ldd	r22, Y+3	; 0x03
    110e:	7c 81       	ldd	r23, Y+4	; 0x04
    1110:	25 81       	ldd	r18, Z+5	; 0x05
    1112:	36 81       	ldd	r19, Z+6	; 0x06
    1114:	42 17       	cp	r20, r18
    1116:	53 07       	cpc	r21, r19
    1118:	09 f4       	brne	.+2      	; 0x111c <OS_Start+0x5a0>
    111a:	e7 c0       	rjmp	.+462    	; 0x12ea <OS_Start+0x76e>
    111c:	01 96       	adiw	r24, 0x01	; 1
    111e:	35 96       	adiw	r30, 0x05	; 5
    1120:	88 30       	cpi	r24, 0x08	; 8
    1122:	91 05       	cpc	r25, r1
    1124:	a9 f7       	brne	.-22     	; 0x1110 <OS_Start+0x594>
    1126:	3d c0       	rjmp	.+122    	; 0x11a2 <OS_Start+0x626>
    1128:	fc 01       	movw	r30, r24
    112a:	ee 0f       	add	r30, r30
    112c:	ff 1f       	adc	r31, r31
    112e:	ee 0f       	add	r30, r30
    1130:	ff 1f       	adc	r31, r31
    1132:	e8 0f       	add	r30, r24
    1134:	f9 1f       	adc	r31, r25
    1136:	ee 5b       	subi	r30, 0xBE	; 190
    1138:	fd 4f       	sbci	r31, 0xFD	; 253
    113a:	22 81       	ldd	r18, Z+2	; 0x02
    113c:	22 30       	cpi	r18, 0x02	; 2
    113e:	69 f4       	brne	.+26     	; 0x115a <OS_Start+0x5de>
    1140:	fc 01       	movw	r30, r24
    1142:	ee 0f       	add	r30, r30
    1144:	ff 1f       	adc	r31, r31
    1146:	ee 0f       	add	r30, r30
    1148:	ff 1f       	adc	r31, r31
    114a:	8e 0f       	add	r24, r30
    114c:	9f 1f       	adc	r25, r31
    114e:	fc 01       	movw	r30, r24
    1150:	ee 5b       	subi	r30, 0xBE	; 190
    1152:	fd 4f       	sbci	r31, 0xFD	; 253
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	82 83       	std	Z+2, r24	; 0x02
    1158:	24 c0       	rjmp	.+72     	; 0x11a2 <OS_Start+0x626>
    115a:	eb 81       	ldd	r30, Y+3	; 0x03
    115c:	fc 81       	ldd	r31, Y+4	; 0x04
    115e:	ea 5e       	subi	r30, 0xEA	; 234
    1160:	fe 4f       	sbci	r31, 0xFE	; 254
    1162:	51 83       	std	Z+1, r21	; 0x01
    1164:	40 83       	st	Z, r20
    1166:	eb 81       	ldd	r30, Y+3	; 0x03
    1168:	fc 81       	ldd	r31, Y+4	; 0x04
    116a:	20 81       	ld	r18, Z
    116c:	31 81       	ldd	r19, Z+1	; 0x01
    116e:	fc 01       	movw	r30, r24
    1170:	ee 0f       	add	r30, r30
    1172:	ff 1f       	adc	r31, r31
    1174:	ee 0f       	add	r30, r30
    1176:	ff 1f       	adc	r31, r31
    1178:	8e 0f       	add	r24, r30
    117a:	9f 1f       	adc	r25, r31
    117c:	fc 01       	movw	r30, r24
    117e:	ee 5b       	subi	r30, 0xBE	; 190
    1180:	fd 4f       	sbci	r31, 0xFD	; 253
    1182:	34 83       	std	Z+4, r19	; 0x04
    1184:	23 83       	std	Z+3, r18	; 0x03
    1186:	eb 81       	ldd	r30, Y+3	; 0x03
    1188:	fc 81       	ldd	r31, Y+4	; 0x04
    118a:	ec 5f       	subi	r30, 0xFC	; 252
    118c:	fe 4f       	sbci	r31, 0xFE	; 254
    118e:	85 e0       	ldi	r24, 0x05	; 5
    1190:	80 83       	st	Z, r24
    1192:	42 e3       	ldi	r20, 0x32	; 50
    1194:	52 e0       	ldi	r21, 0x02	; 2
    1196:	64 e1       	ldi	r22, 0x14	; 20
    1198:	75 e1       	ldi	r23, 0x15	; 21
    119a:	80 e4       	ldi	r24, 0x40	; 64
    119c:	92 e0       	ldi	r25, 0x02	; 2
    119e:	50 d3       	rcall	.+1696   	; 0x1840 <enqueueRQ>
    11a0:	b6 db       	rcall	.-2196   	; 0x90e <Dispatch>
    11a2:	e0 91 40 02 	lds	r30, 0x0240
    11a6:	f0 91 41 02 	lds	r31, 0x0241
    11aa:	80 81       	ld	r24, Z
    11ac:	91 81       	ldd	r25, Z+1	; 0x01
    11ae:	02 97       	sbiw	r24, 0x02	; 2
    11b0:	08 f4       	brcc	.+2      	; 0x11b4 <OS_Start+0x638>
    11b2:	31 cd       	rjmp	.-1438   	; 0xc16 <OS_Start+0x9a>
    11b4:	80 81       	ld	r24, Z
    11b6:	91 81       	ldd	r25, Z+1	; 0x01
    11b8:	02 97       	sbiw	r24, 0x02	; 2
    11ba:	09 f4       	brne	.+2      	; 0x11be <OS_Start+0x642>
    11bc:	2c cd       	rjmp	.-1448   	; 0xc16 <OS_Start+0x9a>
    11be:	80 81       	ld	r24, Z
    11c0:	91 81       	ldd	r25, Z+1	; 0x01
    11c2:	29 cd       	rjmp	.-1454   	; 0xc16 <OS_Start+0x9a>
    11c4:	eb 81       	ldd	r30, Y+3	; 0x03
    11c6:	fc 81       	ldd	r31, Y+4	; 0x04
    11c8:	e8 5e       	subi	r30, 0xE8	; 232
    11ca:	fe 4f       	sbci	r31, 0xFE	; 254
    11cc:	40 81       	ld	r20, Z
    11ce:	51 81       	ldd	r21, Z+1	; 0x01
    11d0:	d7 01       	movw	r26, r14
    11d2:	8d 91       	ld	r24, X+
    11d4:	9c 91       	ld	r25, X
    11d6:	48 17       	cp	r20, r24
    11d8:	59 07       	cpc	r21, r25
    11da:	09 f4       	brne	.+2      	; 0x11de <OS_Start+0x662>
    11dc:	97 c0       	rjmp	.+302    	; 0x130c <OS_Start+0x790>
    11de:	f7 01       	movw	r30, r14
    11e0:	c4 01       	movw	r24, r8
    11e2:	6b 81       	ldd	r22, Y+3	; 0x03
    11e4:	7c 81       	ldd	r23, Y+4	; 0x04
    11e6:	25 81       	ldd	r18, Z+5	; 0x05
    11e8:	36 81       	ldd	r19, Z+6	; 0x06
    11ea:	42 17       	cp	r20, r18
    11ec:	53 07       	cpc	r21, r19
    11ee:	09 f4       	brne	.+2      	; 0x11f2 <OS_Start+0x676>
    11f0:	90 c0       	rjmp	.+288    	; 0x1312 <OS_Start+0x796>
    11f2:	01 96       	adiw	r24, 0x01	; 1
    11f4:	35 96       	adiw	r30, 0x05	; 5
    11f6:	88 30       	cpi	r24, 0x08	; 8
    11f8:	91 05       	cpc	r25, r1
    11fa:	a9 f7       	brne	.-22     	; 0x11e6 <OS_Start+0x66a>
    11fc:	0c cd       	rjmp	.-1512   	; 0xc16 <OS_Start+0x9a>
    11fe:	80 81       	ld	r24, Z
    1200:	91 81       	ldd	r25, Z+1	; 0x01
    1202:	48 17       	cp	r20, r24
    1204:	59 07       	cpc	r21, r25
    1206:	09 f4       	brne	.+2      	; 0x120a <OS_Start+0x68e>
    1208:	97 c0       	rjmp	.+302    	; 0x1338 <OS_Start+0x7bc>
    120a:	2f 5f       	subi	r18, 0xFF	; 255
    120c:	3f 4f       	sbci	r19, 0xFF	; 255
    120e:	e2 5e       	subi	r30, 0xE2	; 226
    1210:	fe 4f       	sbci	r31, 0xFE	; 254
    1212:	20 31       	cpi	r18, 0x10	; 16
    1214:	31 05       	cpc	r19, r1
    1216:	99 f7       	brne	.-26     	; 0x11fe <OS_Start+0x682>
    1218:	cb 01       	movw	r24, r22
    121a:	fb 01       	movw	r30, r22
    121c:	ee 0f       	add	r30, r30
    121e:	ff 1f       	adc	r31, r31
    1220:	ee 0f       	add	r30, r30
    1222:	ff 1f       	adc	r31, r31
    1224:	8e 0f       	add	r24, r30
    1226:	9f 1f       	adc	r25, r31
    1228:	fc 01       	movw	r30, r24
    122a:	ee 5b       	subi	r30, 0xBE	; 190
    122c:	fd 4f       	sbci	r31, 0xFD	; 253
    122e:	82 e0       	ldi	r24, 0x02	; 2
    1230:	82 83       	std	Z+2, r24	; 0x02
    1232:	f1 cc       	rjmp	.-1566   	; 0xc16 <OS_Start+0x9a>
    1234:	2a 9d       	mul	r18, r10
    1236:	f0 01       	movw	r30, r0
    1238:	2b 9d       	mul	r18, r11
    123a:	f0 0d       	add	r31, r0
    123c:	3a 9d       	mul	r19, r10
    123e:	f0 0d       	add	r31, r0
    1240:	11 24       	eor	r1, r1
    1242:	e4 54       	subi	r30, 0x44	; 68
    1244:	fc 4f       	sbci	r31, 0xFC	; 252
    1246:	80 81       	ld	r24, Z
    1248:	91 81       	ldd	r25, Z+1	; 0x01
    124a:	89 2b       	or	r24, r25
    124c:	09 f0       	breq	.+2      	; 0x1250 <OS_Start+0x6d4>
    124e:	e3 cc       	rjmp	.-1594   	; 0xc16 <OS_Start+0x9a>
    1250:	eb 81       	ldd	r30, Y+3	; 0x03
    1252:	fc 81       	ldd	r31, Y+4	; 0x04
    1254:	ec 5f       	subi	r30, 0xFC	; 252
    1256:	fe 4f       	sbci	r31, 0xFE	; 254
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	80 83       	st	Z, r24
    125c:	42 e3       	ldi	r20, 0x32	; 50
    125e:	52 e0       	ldi	r21, 0x02	; 2
    1260:	64 e1       	ldi	r22, 0x14	; 20
    1262:	75 e1       	ldi	r23, 0x15	; 21
    1264:	80 e4       	ldi	r24, 0x40	; 64
    1266:	92 e0       	ldi	r25, 0x02	; 2
    1268:	eb d2       	rcall	.+1494   	; 0x1840 <enqueueRQ>
    126a:	51 db       	rcall	.-2398   	; 0x90e <Dispatch>
    126c:	d4 cc       	rjmp	.-1624   	; 0xc16 <OS_Start+0x9a>
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <OS_Start+0x6fc>
    1274:	7c 83       	std	Y+4, r23	; 0x04
    1276:	6b 83       	std	Y+3, r22	; 0x03
    1278:	8a 9d       	mul	r24, r10
    127a:	f0 01       	movw	r30, r0
    127c:	8b 9d       	mul	r24, r11
    127e:	f0 0d       	add	r31, r0
    1280:	9a 9d       	mul	r25, r10
    1282:	f0 0d       	add	r31, r0
    1284:	11 24       	eor	r1, r1
    1286:	e4 54       	subi	r30, 0x44	; 68
    1288:	fc 4f       	sbci	r31, 0xFC	; 252
    128a:	91 82       	std	Z+1, r9	; 0x01
    128c:	80 82       	st	Z, r8
    128e:	6f cd       	rjmp	.-1314   	; 0xd6e <OS_Start+0x1f2>
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	02 c0       	rjmp	.+4      	; 0x129a <OS_Start+0x71e>
    1296:	7c 83       	std	Y+4, r23	; 0x04
    1298:	6b 83       	std	Y+3, r22	; 0x03
    129a:	8a 9d       	mul	r24, r10
    129c:	f0 01       	movw	r30, r0
    129e:	8b 9d       	mul	r24, r11
    12a0:	f0 0d       	add	r31, r0
    12a2:	9a 9d       	mul	r25, r10
    12a4:	f0 0d       	add	r31, r0
    12a6:	11 24       	eor	r1, r1
    12a8:	e4 54       	subi	r30, 0x44	; 68
    12aa:	fc 4f       	sbci	r31, 0xFC	; 252
    12ac:	20 81       	ld	r18, Z
    12ae:	31 81       	ldd	r19, Z+1	; 0x01
    12b0:	21 30       	cpi	r18, 0x01	; 1
    12b2:	31 05       	cpc	r19, r1
    12b4:	09 f0       	breq	.+2      	; 0x12b8 <OS_Start+0x73c>
    12b6:	af cc       	rjmp	.-1698   	; 0xc16 <OS_Start+0x9a>
    12b8:	8b cd       	rjmp	.-1258   	; 0xdd0 <OS_Start+0x254>
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <OS_Start+0x748>
    12c0:	7c 83       	std	Y+4, r23	; 0x04
    12c2:	6b 83       	std	Y+3, r22	; 0x03
    12c4:	fc 01       	movw	r30, r24
    12c6:	ee 0f       	add	r30, r30
    12c8:	ff 1f       	adc	r31, r31
    12ca:	ee 0f       	add	r30, r30
    12cc:	ff 1f       	adc	r31, r31
    12ce:	ee 0f       	add	r30, r30
    12d0:	ff 1f       	adc	r31, r31
    12d2:	e8 1b       	sub	r30, r24
    12d4:	f9 0b       	sbc	r31, r25
    12d6:	e6 59       	subi	r30, 0x96	; 150
    12d8:	fd 4f       	sbci	r31, 0xFD	; 253
    12da:	22 81       	ldd	r18, Z+2	; 0x02
    12dc:	21 30       	cpi	r18, 0x01	; 1
    12de:	09 f0       	breq	.+2      	; 0x12e2 <OS_Start+0x766>
    12e0:	61 ce       	rjmp	.-830    	; 0xfa4 <OS_Start+0x428>
    12e2:	47 ce       	rjmp	.-882    	; 0xf72 <OS_Start+0x3f6>
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <OS_Start+0x772>
    12ea:	7c 83       	std	Y+4, r23	; 0x04
    12ec:	6b 83       	std	Y+3, r22	; 0x03
    12ee:	fc 01       	movw	r30, r24
    12f0:	ee 0f       	add	r30, r30
    12f2:	ff 1f       	adc	r31, r31
    12f4:	ee 0f       	add	r30, r30
    12f6:	ff 1f       	adc	r31, r31
    12f8:	e8 0f       	add	r30, r24
    12fa:	f9 1f       	adc	r31, r25
    12fc:	ee 5b       	subi	r30, 0xBE	; 190
    12fe:	fd 4f       	sbci	r31, 0xFD	; 253
    1300:	23 81       	ldd	r18, Z+3	; 0x03
    1302:	34 81       	ldd	r19, Z+4	; 0x04
    1304:	23 2b       	or	r18, r19
    1306:	09 f0       	breq	.+2      	; 0x130a <OS_Start+0x78e>
    1308:	4c cf       	rjmp	.-360    	; 0x11a2 <OS_Start+0x626>
    130a:	0e cf       	rjmp	.-484    	; 0x1128 <OS_Start+0x5ac>
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <OS_Start+0x79a>
    1312:	7c 83       	std	Y+4, r23	; 0x04
    1314:	6b 83       	std	Y+3, r22	; 0x03
    1316:	e8 eb       	ldi	r30, 0xB8	; 184
    1318:	f3 e0       	ldi	r31, 0x03	; 3
    131a:	20 81       	ld	r18, Z
    131c:	31 81       	ldd	r19, Z+1	; 0x01
    131e:	42 17       	cp	r20, r18
    1320:	53 07       	cpc	r21, r19
    1322:	39 f0       	breq	.+14     	; 0x1332 <OS_Start+0x7b6>
    1324:	e6 ed       	ldi	r30, 0xD6	; 214
    1326:	f4 e0       	ldi	r31, 0x04	; 4
    1328:	94 01       	movw	r18, r8
    132a:	ab 81       	ldd	r26, Y+3	; 0x03
    132c:	bc 81       	ldd	r27, Y+4	; 0x04
    132e:	bc 01       	movw	r22, r24
    1330:	66 cf       	rjmp	.-308    	; 0x11fe <OS_Start+0x682>
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	03 c0       	rjmp	.+6      	; 0x133e <OS_Start+0x7c2>
    1338:	bc 83       	std	Y+4, r27	; 0x04
    133a:	ab 83       	std	Y+3, r26	; 0x03
    133c:	cb 01       	movw	r24, r22
    133e:	2a 9d       	mul	r18, r10
    1340:	a0 01       	movw	r20, r0
    1342:	2b 9d       	mul	r18, r11
    1344:	50 0d       	add	r21, r0
    1346:	3a 9d       	mul	r19, r10
    1348:	50 0d       	add	r21, r0
    134a:	11 24       	eor	r1, r1
    134c:	4e 55       	subi	r20, 0x5E	; 94
    134e:	5d 4f       	sbci	r21, 0xFD	; 253
    1350:	fa 01       	movw	r30, r20
    1352:	ec 5f       	subi	r30, 0xFC	; 252
    1354:	fe 4f       	sbci	r31, 0xFE	; 254
    1356:	61 e0       	ldi	r22, 0x01	; 1
    1358:	60 83       	st	Z, r22
    135a:	72 96       	adiw	r30, 0x12	; 18
    135c:	31 82       	std	Z+1, r3	; 0x01
    135e:	20 82       	st	Z, r2
    1360:	fc 01       	movw	r30, r24
    1362:	ee 0f       	add	r30, r30
    1364:	ff 1f       	adc	r31, r31
    1366:	ee 0f       	add	r30, r30
    1368:	ff 1f       	adc	r31, r31
    136a:	8e 0f       	add	r24, r30
    136c:	9f 1f       	adc	r25, r31
    136e:	fc 01       	movw	r30, r24
    1370:	ee 5b       	subi	r30, 0xBE	; 190
    1372:	fd 4f       	sbci	r31, 0xFD	; 253
    1374:	14 82       	std	Z+4, r1	; 0x04
    1376:	13 82       	std	Z+3, r1	; 0x03
    1378:	eb 81       	ldd	r30, Y+3	; 0x03
    137a:	fc 81       	ldd	r31, Y+4	; 0x04
    137c:	e9 5f       	subi	r30, 0xF9	; 249
    137e:	fe 4f       	sbci	r31, 0xFE	; 254
    1380:	80 81       	ld	r24, Z
    1382:	91 81       	ldd	r25, Z+1	; 0x01
    1384:	fa 01       	movw	r30, r20
    1386:	e9 5f       	subi	r30, 0xF9	; 249
    1388:	fe 4f       	sbci	r31, 0xFE	; 254
    138a:	40 81       	ld	r20, Z
    138c:	51 81       	ldd	r21, Z+1	; 0x01
    138e:	48 17       	cp	r20, r24
    1390:	59 07       	cpc	r21, r25
    1392:	08 f4       	brcc	.+2      	; 0x1396 <OS_Start+0x81a>
    1394:	4f cf       	rjmp	.-354    	; 0x1234 <OS_Start+0x6b8>
    1396:	3f cc       	rjmp	.-1922   	; 0xc16 <OS_Start+0x9a>
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	1f 91       	pop	r17
    13a6:	0f 91       	pop	r16
    13a8:	ff 90       	pop	r15
    13aa:	ef 90       	pop	r14
    13ac:	df 90       	pop	r13
    13ae:	cf 90       	pop	r12
    13b0:	bf 90       	pop	r11
    13b2:	af 90       	pop	r10
    13b4:	9f 90       	pop	r9
    13b6:	8f 90       	pop	r8
    13b8:	7f 90       	pop	r7
    13ba:	6f 90       	pop	r6
    13bc:	5f 90       	pop	r5
    13be:	4f 90       	pop	r4
    13c0:	3f 90       	pop	r3
    13c2:	2f 90       	pop	r2
    13c4:	08 95       	ret

000013c6 <Mutex_Init>:
    13c6:	80 91 3e 02 	lds	r24, 0x023E
    13ca:	90 91 3f 02 	lds	r25, 0x023F
    13ce:	89 2b       	or	r24, r25
    13d0:	a1 f0       	breq	.+40     	; 0x13fa <Mutex_Init+0x34>
    13d2:	f8 94       	cli
    13d4:	e0 91 40 02 	lds	r30, 0x0240
    13d8:	f0 91 41 02 	lds	r31, 0x0241
    13dc:	e3 5f       	subi	r30, 0xF3	; 243
    13de:	fe 4f       	sbci	r31, 0xFE	; 254
    13e0:	87 e0       	ldi	r24, 0x07	; 7
    13e2:	80 83       	st	Z, r24
    13e4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    13e8:	e0 91 40 02 	lds	r30, 0x0240
    13ec:	f0 91 41 02 	lds	r31, 0x0241
    13f0:	e2 5f       	subi	r30, 0xF2	; 242
    13f2:	fe 4f       	sbci	r31, 0xFE	; 254
    13f4:	80 81       	ld	r24, Z
    13f6:	91 81       	ldd	r25, Z+1	; 0x01
    13f8:	08 95       	ret
    13fa:	08 95       	ret

000013fc <Event_Init>:
    13fc:	80 91 3e 02 	lds	r24, 0x023E
    1400:	90 91 3f 02 	lds	r25, 0x023F
    1404:	89 2b       	or	r24, r25
    1406:	a1 f0       	breq	.+40     	; 0x1430 <Event_Init+0x34>
    1408:	f8 94       	cli
    140a:	e0 91 40 02 	lds	r30, 0x0240
    140e:	f0 91 41 02 	lds	r31, 0x0241
    1412:	e3 5f       	subi	r30, 0xF3	; 243
    1414:	fe 4f       	sbci	r31, 0xFE	; 254
    1416:	8a e0       	ldi	r24, 0x0A	; 10
    1418:	80 83       	st	Z, r24
    141a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    141e:	e0 91 40 02 	lds	r30, 0x0240
    1422:	f0 91 41 02 	lds	r31, 0x0241
    1426:	e2 5f       	subi	r30, 0xF2	; 242
    1428:	fe 4f       	sbci	r31, 0xFE	; 254
    142a:	80 81       	ld	r24, Z
    142c:	91 81       	ldd	r25, Z+1	; 0x01
    142e:	08 95       	ret
    1430:	08 95       	ret

00001432 <Task_Create>:
    1432:	20 91 3e 02 	lds	r18, 0x023E
    1436:	30 91 3f 02 	lds	r19, 0x023F
    143a:	23 2b       	or	r18, r19
    143c:	f1 f0       	breq	.+60     	; 0x147a <Task_Create+0x48>
    143e:	f8 94       	cli
    1440:	20 91 40 02 	lds	r18, 0x0240
    1444:	30 91 41 02 	lds	r19, 0x0241
    1448:	f9 01       	movw	r30, r18
    144a:	e3 5f       	subi	r30, 0xF3	; 243
    144c:	fe 4f       	sbci	r31, 0xFE	; 254
    144e:	a1 e0       	ldi	r26, 0x01	; 1
    1450:	a0 83       	st	Z, r26
    1452:	32 97       	sbiw	r30, 0x02	; 2
    1454:	91 83       	std	Z+1, r25	; 0x01
    1456:	80 83       	st	Z, r24
    1458:	36 97       	sbiw	r30, 0x06	; 6
    145a:	71 83       	std	Z+1, r23	; 0x01
    145c:	60 83       	st	Z, r22
    145e:	34 96       	adiw	r30, 0x04	; 4
    1460:	51 83       	std	Z+1, r21	; 0x01
    1462:	40 83       	st	Z, r20
    1464:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    1468:	e0 91 40 02 	lds	r30, 0x0240
    146c:	f0 91 41 02 	lds	r31, 0x0241
    1470:	e2 5f       	subi	r30, 0xF2	; 242
    1472:	fe 4f       	sbci	r31, 0xFE	; 254
    1474:	80 81       	ld	r24, Z
    1476:	91 81       	ldd	r25, Z+1	; 0x01
    1478:	08 95       	ret
    147a:	90 c9       	rjmp	.-3296   	; 0x79c <Kernel_Create_Task>
    147c:	08 95       	ret

0000147e <Task_Next>:
    147e:	80 91 3e 02 	lds	r24, 0x023E
    1482:	90 91 3f 02 	lds	r25, 0x023F
    1486:	89 2b       	or	r24, r25
    1488:	59 f0       	breq	.+22     	; 0x14a0 <Task_Next+0x22>
    148a:	f8 94       	cli
    148c:	e0 91 40 02 	lds	r30, 0x0240
    1490:	f0 91 41 02 	lds	r31, 0x0241
    1494:	e3 5f       	subi	r30, 0xF3	; 243
    1496:	fe 4f       	sbci	r31, 0xFE	; 254
    1498:	82 e0       	ldi	r24, 0x02	; 2
    149a:	80 83       	st	Z, r24
    149c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <Enter_Kernel>
    14a0:	08 95       	ret

000014a2 <setup>:

	/** pin 48 */
	//init_LED_PORTL_pin1();

	/** initialize Timer1 16 bit timer */
	Disable_Interrupt();
    14a2:	f8 94       	cli

	/** Timer 1 */
	TCCR1A = 0;                 /** Set TCCR1A register to 0 */
    14a4:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;                 /** Set TCCR1B register to 0 */
    14a8:	e1 e8       	ldi	r30, 0x81	; 129
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	10 82       	st	Z, r1

	TCNT1 = 0;                  /** Initialize counter to 0 */
    14ae:	10 92 85 00 	sts	0x0085, r1
    14b2:	10 92 84 00 	sts	0x0084, r1

	OCR1A = 624;                /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
    14b6:	80 e7       	ldi	r24, 0x70	; 112
    14b8:	92 e0       	ldi	r25, 0x02	; 2
    14ba:	90 93 89 00 	sts	0x0089, r25
    14be:	80 93 88 00 	sts	0x0088, r24

	TCCR1B |= (1 << WGM12);     /** Turns on CTC mode (TOP is now OCR1A) */
    14c2:	80 81       	ld	r24, Z
    14c4:	88 60       	ori	r24, 0x08	; 8
    14c6:	80 83       	st	Z, r24

	TCCR1B |= (1 << CS12);      /** Prescaler 256 */
    14c8:	80 81       	ld	r24, Z
    14ca:	84 60       	ori	r24, 0x04	; 4
    14cc:	80 83       	st	Z, r24

	TIMSK1 |= (1 << OCIE1A);    /** Enable timer compare interrupt */
    14ce:	ef e6       	ldi	r30, 0x6F	; 111
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	82 60       	ori	r24, 0x02	; 2
    14d6:	80 83       	st	Z, r24

	/** Timer 3 */
	TCCR3A = 0;                 /** Set TCCR0A register to 0 */
    14d8:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0;                 /** Set TCCR0B register to 0 */
    14dc:	e1 e9       	ldi	r30, 0x91	; 145
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	10 82       	st	Z, r1

	TCNT3 = 0;                  /** Initialize counter to 0 */
    14e2:	10 92 95 00 	sts	0x0095, r1
    14e6:	10 92 94 00 	sts	0x0094, r1

	OCR3A = 62499;              /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
    14ea:	83 e2       	ldi	r24, 0x23	; 35
    14ec:	94 ef       	ldi	r25, 0xF4	; 244
    14ee:	90 93 99 00 	sts	0x0099, r25
    14f2:	80 93 98 00 	sts	0x0098, r24

	TCCR3B |= (1 << WGM32);     /** Turns on CTC mode (TOP is now OCR1A) */
    14f6:	80 81       	ld	r24, Z
    14f8:	88 60       	ori	r24, 0x08	; 8
    14fa:	80 83       	st	Z, r24

	TCCR3B |= (1 << CS32);      /** Prescaler 1024 */
    14fc:	80 81       	ld	r24, Z
    14fe:	84 60       	ori	r24, 0x04	; 4
    1500:	80 83       	st	Z, r24

	TIMSK3 = (1 << OCIE3A);
    1502:	82 e0       	ldi	r24, 0x02	; 2
    1504:	80 93 71 00 	sts	0x0071, r24

	Enable_Interrupt();
    1508:	78 94       	sei
    150a:	08 95       	ret

0000150c <__vector_17>:
}

/**
  * ISR for timer1
  */
ISR(TIMER1_COMPA_vect) {
    150c:	1f 92       	push	r1
    150e:	0f 92       	push	r0
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	0f 92       	push	r0
    1514:	11 24       	eor	r1, r1
    1516:	0b b6       	in	r0, 0x3b	; 59
    1518:	0f 92       	push	r0
    151a:	df 92       	push	r13
    151c:	ef 92       	push	r14
    151e:	ff 92       	push	r15
    1520:	0f 93       	push	r16
    1522:	1f 93       	push	r17
    1524:	2f 93       	push	r18
    1526:	3f 93       	push	r19
    1528:	4f 93       	push	r20
    152a:	5f 93       	push	r21
    152c:	6f 93       	push	r22
    152e:	7f 93       	push	r23
    1530:	8f 93       	push	r24
    1532:	9f 93       	push	r25
    1534:	af 93       	push	r26
    1536:	bf 93       	push	r27
    1538:	ef 93       	push	r30
    153a:	ff 93       	push	r31
    153c:	cf 93       	push	r28
    153e:	df 93       	push	r29
    1540:	00 d0       	rcall	.+0      	; 0x1542 <__vector_17+0x36>
    1542:	1f 92       	push	r1
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
    1548:	80 91 30 02 	lds	r24, 0x0230
    154c:	90 91 31 02 	lds	r25, 0x0231
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	9a 83       	std	Y+2, r25	; 0x02
    1554:	89 83       	std	Y+1, r24	; 0x01
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	9a 81       	ldd	r25, Y+2	; 0x02
    155a:	99 23       	and	r25, r25
    155c:	0c f4       	brge	.+2      	; 0x1560 <__vector_17+0x54>
    155e:	8f c0       	rjmp	.+286    	; 0x167e <__vector_17+0x172>
		if ((SleepQueue[i]->wakeTickOverflow <= tickOverflowCount) && (SleepQueue[i]->wakeTick <= (TCNT3/625))) {
    1560:	e9 81       	ldd	r30, Y+1	; 0x01
    1562:	fa 81       	ldd	r31, Y+2	; 0x02
    1564:	ee 0f       	add	r30, r30
    1566:	ff 1f       	adc	r31, r31
    1568:	ec 50       	subi	r30, 0x0C	; 12
    156a:	fb 4e       	sbci	r31, 0xEB	; 235
    156c:	01 90       	ld	r0, Z+
    156e:	f0 81       	ld	r31, Z
    1570:	e0 2d       	mov	r30, r0
    1572:	e0 5f       	subi	r30, 0xF0	; 240
    1574:	fe 4f       	sbci	r31, 0xFE	; 254
    1576:	20 81       	ld	r18, Z
    1578:	31 81       	ldd	r19, Z+1	; 0x01
    157a:	80 91 34 02 	lds	r24, 0x0234
    157e:	90 91 35 02 	lds	r25, 0x0235
    1582:	82 17       	cp	r24, r18
    1584:	93 07       	cpc	r25, r19
    1586:	08 f4       	brcc	.+2      	; 0x158a <__vector_17+0x7e>
    1588:	7a c0       	rjmp	.+244    	; 0x167e <__vector_17+0x172>
    158a:	e9 81       	ldd	r30, Y+1	; 0x01
    158c:	fa 81       	ldd	r31, Y+2	; 0x02
    158e:	ee 0f       	add	r30, r30
    1590:	ff 1f       	adc	r31, r31
    1592:	ec 50       	subi	r30, 0x0C	; 12
    1594:	fb 4e       	sbci	r31, 0xEB	; 235
    1596:	01 90       	ld	r0, Z+
    1598:	f0 81       	ld	r31, Z
    159a:	e0 2d       	mov	r30, r0
    159c:	ee 5e       	subi	r30, 0xEE	; 238
    159e:	fe 4f       	sbci	r31, 0xFE	; 254
    15a0:	20 81       	ld	r18, Z
    15a2:	31 81       	ldd	r19, Z+1	; 0x01
    15a4:	80 91 94 00 	lds	r24, 0x0094
    15a8:	90 91 95 00 	lds	r25, 0x0095
    15ac:	61 e7       	ldi	r22, 0x71	; 113
    15ae:	72 e0       	ldi	r23, 0x02	; 2
    15b0:	54 d3       	rcall	.+1704   	; 0x1c5a <__udivmodhi4>
    15b2:	62 17       	cp	r22, r18
    15b4:	73 07       	cpc	r23, r19
    15b6:	60 f5       	brcc	.+88     	; 0x1610 <__vector_17+0x104>
    15b8:	62 c0       	rjmp	.+196    	; 0x167e <__vector_17+0x172>
    15ba:	e9 81       	ldd	r30, Y+1	; 0x01
    15bc:	fa 81       	ldd	r31, Y+2	; 0x02
    15be:	ee 0f       	add	r30, r30
    15c0:	ff 1f       	adc	r31, r31
    15c2:	ec 50       	subi	r30, 0x0C	; 12
    15c4:	fb 4e       	sbci	r31, 0xEB	; 235
    15c6:	01 90       	ld	r0, Z+
    15c8:	f0 81       	ld	r31, Z
    15ca:	e0 2d       	mov	r30, r0
    15cc:	e0 5f       	subi	r30, 0xF0	; 240
    15ce:	fe 4f       	sbci	r31, 0xFE	; 254
    15d0:	20 81       	ld	r18, Z
    15d2:	31 81       	ldd	r19, Z+1	; 0x01
    15d4:	80 91 34 02 	lds	r24, 0x0234
    15d8:	90 91 35 02 	lds	r25, 0x0235
    15dc:	82 17       	cp	r24, r18
    15de:	93 07       	cpc	r25, r19
    15e0:	08 f4       	brcc	.+2      	; 0x15e4 <__vector_17+0xd8>
    15e2:	4d c0       	rjmp	.+154    	; 0x167e <__vector_17+0x172>
    15e4:	e9 81       	ldd	r30, Y+1	; 0x01
    15e6:	fa 81       	ldd	r31, Y+2	; 0x02
    15e8:	ee 0f       	add	r30, r30
    15ea:	ff 1f       	adc	r31, r31
    15ec:	ec 50       	subi	r30, 0x0C	; 12
    15ee:	fb 4e       	sbci	r31, 0xEB	; 235
    15f0:	01 90       	ld	r0, Z+
    15f2:	f0 81       	ld	r31, Z
    15f4:	e0 2d       	mov	r30, r0
    15f6:	ee 5e       	subi	r30, 0xEE	; 238
    15f8:	fe 4f       	sbci	r31, 0xFE	; 254
    15fa:	20 81       	ld	r18, Z
    15fc:	31 81       	ldd	r19, Z+1	; 0x01
    15fe:	f7 01       	movw	r30, r14
    1600:	80 81       	ld	r24, Z
    1602:	91 81       	ldd	r25, Z+1	; 0x01
    1604:	b8 01       	movw	r22, r16
    1606:	29 d3       	rcall	.+1618   	; 0x1c5a <__udivmodhi4>
    1608:	62 17       	cp	r22, r18
    160a:	73 07       	cpc	r23, r19
    160c:	50 f4       	brcc	.+20     	; 0x1622 <__vector_17+0x116>
    160e:	37 c0       	rjmp	.+110    	; 0x167e <__vector_17+0x172>
			volatile PD *p = dequeue(&SleepQueue, &SQCount);
			p->state = READY;
    1610:	dd 24       	eor	r13, r13
    1612:	d3 94       	inc	r13
ISR(TIMER1_COMPA_vect) {

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
		if ((SleepQueue[i]->wakeTickOverflow <= tickOverflowCount) && (SleepQueue[i]->wakeTick <= (TCNT3/625))) {
    1614:	0f 2e       	mov	r0, r31
    1616:	f4 e9       	ldi	r31, 0x94	; 148
    1618:	ef 2e       	mov	r14, r31
    161a:	f1 2c       	mov	r15, r1
    161c:	f0 2d       	mov	r31, r0
    161e:	01 e7       	ldi	r16, 0x71	; 113
    1620:	12 e0       	ldi	r17, 0x02	; 2
			volatile PD *p = dequeue(&SleepQueue, &SQCount);
    1622:	60 e3       	ldi	r22, 0x30	; 48
    1624:	72 e0       	ldi	r23, 0x02	; 2
    1626:	84 ef       	ldi	r24, 0xF4	; 244
    1628:	94 e1       	ldi	r25, 0x14	; 20
    162a:	2d d2       	rcall	.+1114   	; 0x1a86 <dequeue>
    162c:	9c 83       	std	Y+4, r25	; 0x04
    162e:	8b 83       	std	Y+3, r24	; 0x03
			p->state = READY;
    1630:	fc 01       	movw	r30, r24
    1632:	ec 5f       	subi	r30, 0xFC	; 252
    1634:	fe 4f       	sbci	r31, 0xFE	; 254
    1636:	d0 82       	st	Z, r13
			enqueueRQ(&p, &ReadyQueue, &RQCount);
    1638:	42 e3       	ldi	r20, 0x32	; 50
    163a:	52 e0       	ldi	r21, 0x02	; 2
    163c:	64 e1       	ldi	r22, 0x14	; 20
    163e:	75 e1       	ldi	r23, 0x15	; 21
    1640:	ce 01       	movw	r24, r28
    1642:	03 96       	adiw	r24, 0x03	; 3
    1644:	fd d0       	rcall	.+506    	; 0x1840 <enqueueRQ>
			
			if (p->inheritedPy < Cp->inheritedPy)
    1646:	eb 81       	ldd	r30, Y+3	; 0x03
    1648:	fc 81       	ldd	r31, Y+4	; 0x04
    164a:	e9 5f       	subi	r30, 0xF9	; 249
    164c:	fe 4f       	sbci	r31, 0xFE	; 254
    164e:	20 81       	ld	r18, Z
    1650:	31 81       	ldd	r19, Z+1	; 0x01
    1652:	e0 91 40 02 	lds	r30, 0x0240
    1656:	f0 91 41 02 	lds	r31, 0x0241
    165a:	e9 5f       	subi	r30, 0xF9	; 249
    165c:	fe 4f       	sbci	r31, 0xFE	; 254
    165e:	80 81       	ld	r24, Z
    1660:	91 81       	ldd	r25, Z+1	; 0x01
    1662:	28 17       	cp	r18, r24
    1664:	39 07       	cpc	r19, r25
    1666:	08 f4       	brcc	.+2      	; 0x166a <__vector_17+0x15e>
			
			{
				Task_Next();
    1668:	0a df       	rcall	.-492    	; 0x147e <Task_Next>
  */
ISR(TIMER1_COMPA_vect) {

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	9a 81       	ldd	r25, Y+2	; 0x02
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	9a 83       	std	Y+2, r25	; 0x02
    1672:	89 83       	std	Y+1, r24	; 0x01
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	9a 81       	ldd	r25, Y+2	; 0x02
    1678:	99 23       	and	r25, r25
    167a:	0c f0       	brlt	.+2      	; 0x167e <__vector_17+0x172>
    167c:	9e cf       	rjmp	.-196    	; 0x15ba <__vector_17+0xae>
			break;
		}
	}

	//Task_Next();
}
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	ff 91       	pop	r31
    168c:	ef 91       	pop	r30
    168e:	bf 91       	pop	r27
    1690:	af 91       	pop	r26
    1692:	9f 91       	pop	r25
    1694:	8f 91       	pop	r24
    1696:	7f 91       	pop	r23
    1698:	6f 91       	pop	r22
    169a:	5f 91       	pop	r21
    169c:	4f 91       	pop	r20
    169e:	3f 91       	pop	r19
    16a0:	2f 91       	pop	r18
    16a2:	1f 91       	pop	r17
    16a4:	0f 91       	pop	r16
    16a6:	ff 90       	pop	r15
    16a8:	ef 90       	pop	r14
    16aa:	df 90       	pop	r13
    16ac:	0f 90       	pop	r0
    16ae:	0b be       	out	0x3b, r0	; 59
    16b0:	0f 90       	pop	r0
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	0f 90       	pop	r0
    16b6:	1f 90       	pop	r1
    16b8:	18 95       	reti

000016ba <__vector_32>:

/**
  * ISR for timer3
  */
ISR(TIMER3_COMPA_vect) {
    16ba:	1f 92       	push	r1
    16bc:	0f 92       	push	r0
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	0f 92       	push	r0
    16c2:	11 24       	eor	r1, r1
    16c4:	8f 93       	push	r24
    16c6:	9f 93       	push	r25
	tickOverflowCount += 1;
    16c8:	80 91 34 02 	lds	r24, 0x0234
    16cc:	90 91 35 02 	lds	r25, 0x0235
    16d0:	01 96       	adiw	r24, 0x01	; 1
    16d2:	90 93 35 02 	sts	0x0235, r25
    16d6:	80 93 34 02 	sts	0x0234, r24
}
    16da:	9f 91       	pop	r25
    16dc:	8f 91       	pop	r24
    16de:	0f 90       	pop	r0
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	0f 90       	pop	r0
    16e4:	1f 90       	pop	r1
    16e6:	18 95       	reti

000016e8 <main>:

/**
  * This function boots the OS and creates the first task: a_main
  */
void main() {
	setup();
    16e8:	dc de       	rcall	.-584    	; 0x14a2 <setup>
	
	OS_Init();
    16ea:	b4 d8       	rcall	.-3736   	; 0x854 <OS_Init>
	Task_Create(a_main, 1, 1);
    16ec:	41 e0       	ldi	r20, 0x01	; 1
    16ee:	50 e0       	ldi	r21, 0x00	; 0
    16f0:	61 e0       	ldi	r22, 0x01	; 1
    16f2:	70 e0       	ldi	r23, 0x00	; 0
    16f4:	89 e1       	ldi	r24, 0x19	; 25
    16f6:	93 e0       	ldi	r25, 0x03	; 3
    16f8:	9c de       	rcall	.-712    	; 0x1432 <Task_Create>
	OS_Start();
    16fa:	40 ca       	rjmp	.-2944   	; 0xb7c <OS_Start>
    16fc:	08 95       	ret

000016fe <enqueueWQ>:
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
}

void enqueueWQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    16fe:	cf 93       	push	r28
    1700:	df 93       	push	r29
    1702:	ea 01       	movw	r28, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    1704:	28 81       	ld	r18, Y
    1706:	39 81       	ldd	r19, Y+1	; 0x01
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
}

void enqueueWQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    1708:	2f 30       	cpi	r18, 0x0F	; 15
    170a:	31 05       	cpc	r19, r1
    170c:	29 f1       	breq	.+74     	; 0x1758 <enqueueWQ+0x5a>
        return;
    }

    int i = (*QCount) - 1;
    170e:	e8 81       	ld	r30, Y
    1710:	f9 81       	ldd	r31, Y+1	; 0x01
    1712:	9f 01       	movw	r18, r30
    1714:	21 50       	subi	r18, 0x01	; 1
    1716:	31 09       	sbc	r19, r1

    while(i >= 0) {
    1718:	72 f0       	brmi	.+28     	; 0x1736 <enqueueWQ+0x38>
    171a:	ee 0f       	add	r30, r30
    171c:	ff 1f       	adc	r31, r31
    171e:	e6 0f       	add	r30, r22
    1720:	f7 1f       	adc	r31, r23
    1722:	db 01       	movw	r26, r22
        Queue[i+1] = Queue[i];
    1724:	32 91       	ld	r19, -Z
    1726:	22 91       	ld	r18, -Z
    1728:	33 83       	std	Z+3, r19	; 0x03
    172a:	22 83       	std	Z+2, r18	; 0x02
        return;
    }

    int i = (*QCount) - 1;

    while(i >= 0) {
    172c:	ea 17       	cp	r30, r26
    172e:	fb 07       	cpc	r31, r27
    1730:	c9 f7       	brne	.-14     	; 0x1724 <enqueueWQ+0x26>
        Queue[i+1] = Queue[i];
        i--;
    1732:	2f ef       	ldi	r18, 0xFF	; 255
    1734:	3f ef       	ldi	r19, 0xFF	; 255
    }

    Queue[i+1] = *p;
    1736:	fc 01       	movw	r30, r24
    1738:	80 81       	ld	r24, Z
    173a:	91 81       	ldd	r25, Z+1	; 0x01
    173c:	2f 5f       	subi	r18, 0xFF	; 255
    173e:	3f 4f       	sbci	r19, 0xFF	; 255
    1740:	22 0f       	add	r18, r18
    1742:	33 1f       	adc	r19, r19
    1744:	fb 01       	movw	r30, r22
    1746:	e2 0f       	add	r30, r18
    1748:	f3 1f       	adc	r31, r19
    174a:	91 83       	std	Z+1, r25	; 0x01
    174c:	80 83       	st	Z, r24
    (*QCount)++;
    174e:	88 81       	ld	r24, Y
    1750:	99 81       	ldd	r25, Y+1	; 0x01
    1752:	01 96       	adiw	r24, 0x01	; 1
    1754:	99 83       	std	Y+1, r25	; 0x01
    1756:	88 83       	st	Y, r24
}
    1758:	df 91       	pop	r29
    175a:	cf 91       	pop	r28
    175c:	08 95       	ret

0000175e <enqueueSQ>:

void enqueueSQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    175e:	cf 92       	push	r12
    1760:	df 92       	push	r13
    1762:	ef 92       	push	r14
    1764:	ff 92       	push	r15
    1766:	0f 93       	push	r16
    1768:	1f 93       	push	r17
    176a:	cf 93       	push	r28
    176c:	df 93       	push	r29

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    176e:	ea 01       	movw	r28, r20
    1770:	28 81       	ld	r18, Y
    1772:	39 81       	ldd	r19, Y+1	; 0x01
    Queue[i+1] = *p;
    (*QCount)++;
}

void enqueueSQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    1774:	2f 30       	cpi	r18, 0x0F	; 15
    1776:	31 05       	cpc	r19, r1
    1778:	09 f4       	brne	.+2      	; 0x177c <enqueueSQ+0x1e>
    177a:	59 c0       	rjmp	.+178    	; 0x182e <enqueueSQ+0xd0>
        return;
    }

    int i = (*QCount) - 1;
    177c:	a8 81       	ld	r26, Y
    177e:	b9 81       	ldd	r27, Y+1	; 0x01
    1780:	11 97       	sbiw	r26, 0x01	; 1

    volatile PD *new = *p;
    1782:	fc 01       	movw	r30, r24
    1784:	c0 80       	ld	r12, Z
    1786:	d1 80       	ldd	r13, Z+1	; 0x01

    volatile PD *temp = Queue[i];
    1788:	fd 01       	movw	r30, r26
    178a:	ee 0f       	add	r30, r30
    178c:	ff 1f       	adc	r31, r31
    178e:	eb 01       	movw	r28, r22
    1790:	ce 0f       	add	r28, r30
    1792:	df 1f       	adc	r29, r31
    1794:	28 81       	ld	r18, Y
    1796:	39 81       	ldd	r19, Y+1	; 0x01

    while(i >= 0 && ((new->wakeTickOverflow > temp->wakeTickOverflow) || ((new->wakeTickOverflow >= temp->wakeTickOverflow) && (new->wakeTick >= temp->wakeTick)))) {
    1798:	bb 23       	and	r27, r27
    179a:	cc f1       	brlt	.+114    	; 0x180e <enqueueSQ+0xb0>
    179c:	fe 01       	movw	r30, r28
    179e:	76 01       	movw	r14, r12
    17a0:	c0 ef       	ldi	r28, 0xF0	; 240
    17a2:	ec 1a       	sub	r14, r28
    17a4:	ce ef       	ldi	r28, 0xFE	; 254
    17a6:	fc 0a       	sbc	r15, r28
    17a8:	de ee       	ldi	r29, 0xEE	; 238
    17aa:	cd 1a       	sub	r12, r29
    17ac:	de ef       	ldi	r29, 0xFE	; 254
    17ae:	dd 0a       	sbc	r13, r29
    17b0:	0b c0       	rjmp	.+22     	; 0x17c8 <enqueueSQ+0x6a>
        Queue[i+1] = Queue[i];
    17b2:	20 81       	ld	r18, Z
    17b4:	31 81       	ldd	r19, Z+1	; 0x01
    17b6:	33 83       	std	Z+3, r19	; 0x03
    17b8:	22 83       	std	Z+2, r18	; 0x02
        i--;
    17ba:	11 97       	sbiw	r26, 0x01	; 1
        temp = Queue[i];
    17bc:	32 91       	ld	r19, -Z
    17be:	22 91       	ld	r18, -Z

    volatile PD *new = *p;

    volatile PD *temp = Queue[i];

    while(i >= 0 && ((new->wakeTickOverflow > temp->wakeTickOverflow) || ((new->wakeTickOverflow >= temp->wakeTickOverflow) && (new->wakeTick >= temp->wakeTick)))) {
    17c0:	af 3f       	cpi	r26, 0xFF	; 255
    17c2:	cf ef       	ldi	r28, 0xFF	; 255
    17c4:	bc 07       	cpc	r27, r28
    17c6:	19 f1       	breq	.+70     	; 0x180e <enqueueSQ+0xb0>
    17c8:	e7 01       	movw	r28, r14
    17ca:	08 81       	ld	r16, Y
    17cc:	19 81       	ldd	r17, Y+1	; 0x01
    17ce:	e9 01       	movw	r28, r18
    17d0:	c0 5f       	subi	r28, 0xF0	; 240
    17d2:	de 4f       	sbci	r29, 0xFE	; 254
    17d4:	09 90       	ld	r0, Y+
    17d6:	d8 81       	ld	r29, Y
    17d8:	c0 2d       	mov	r28, r0
    17da:	c0 17       	cp	r28, r16
    17dc:	d1 07       	cpc	r29, r17
    17de:	48 f3       	brcs	.-46     	; 0x17b2 <enqueueSQ+0x54>
    17e0:	e7 01       	movw	r28, r14
    17e2:	08 81       	ld	r16, Y
    17e4:	19 81       	ldd	r17, Y+1	; 0x01
    17e6:	e9 01       	movw	r28, r18
    17e8:	c0 5f       	subi	r28, 0xF0	; 240
    17ea:	de 4f       	sbci	r29, 0xFE	; 254
    17ec:	09 90       	ld	r0, Y+
    17ee:	d8 81       	ld	r29, Y
    17f0:	c0 2d       	mov	r28, r0
    17f2:	0c 17       	cp	r16, r28
    17f4:	1d 07       	cpc	r17, r29
    17f6:	58 f0       	brcs	.+22     	; 0x180e <enqueueSQ+0xb0>
    17f8:	e6 01       	movw	r28, r12
    17fa:	08 81       	ld	r16, Y
    17fc:	19 81       	ldd	r17, Y+1	; 0x01
    17fe:	2e 5e       	subi	r18, 0xEE	; 238
    1800:	3e 4f       	sbci	r19, 0xFE	; 254
    1802:	e9 01       	movw	r28, r18
    1804:	28 81       	ld	r18, Y
    1806:	39 81       	ldd	r19, Y+1	; 0x01
    1808:	02 17       	cp	r16, r18
    180a:	13 07       	cpc	r17, r19
    180c:	90 f6       	brcc	.-92     	; 0x17b2 <enqueueSQ+0x54>
        Queue[i+1] = Queue[i];
        i--;
        temp = Queue[i];
    }

    Queue[i+1] = *p;
    180e:	fc 01       	movw	r30, r24
    1810:	80 81       	ld	r24, Z
    1812:	91 81       	ldd	r25, Z+1	; 0x01
    1814:	11 96       	adiw	r26, 0x01	; 1
    1816:	aa 0f       	add	r26, r26
    1818:	bb 1f       	adc	r27, r27
    181a:	a6 0f       	add	r26, r22
    181c:	b7 1f       	adc	r27, r23
    181e:	8d 93       	st	X+, r24
    1820:	9c 93       	st	X, r25
    (*QCount)++;
    1822:	ea 01       	movw	r28, r20
    1824:	88 81       	ld	r24, Y
    1826:	99 81       	ldd	r25, Y+1	; 0x01
    1828:	01 96       	adiw	r24, 0x01	; 1
    182a:	99 83       	std	Y+1, r25	; 0x01
    182c:	88 83       	st	Y, r24
}
    182e:	df 91       	pop	r29
    1830:	cf 91       	pop	r28
    1832:	1f 91       	pop	r17
    1834:	0f 91       	pop	r16
    1836:	ff 90       	pop	r15
    1838:	ef 90       	pop	r14
    183a:	df 90       	pop	r13
    183c:	cf 90       	pop	r12
    183e:	08 95       	ret

00001840 <enqueueRQ>:

/*
 *  Insert into the queue sorted by priority
 */
void enqueueRQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    1840:	cf 92       	push	r12
    1842:	df 92       	push	r13
    1844:	ef 92       	push	r14
    1846:	ff 92       	push	r15
    1848:	0f 93       	push	r16
    184a:	1f 93       	push	r17
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
    1850:	6a 01       	movw	r12, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    1852:	ea 01       	movw	r28, r20
    1854:	28 81       	ld	r18, Y
    1856:	39 81       	ldd	r19, Y+1	; 0x01

/*
 *  Insert into the queue sorted by priority
 */
void enqueueRQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    1858:	2f 30       	cpi	r18, 0x0F	; 15
    185a:	31 05       	cpc	r19, r1
    185c:	09 f4       	brne	.+2      	; 0x1860 <enqueueRQ+0x20>
    185e:	4a c0       	rjmp	.+148    	; 0x18f4 <enqueueRQ+0xb4>
        return;
    }

    int i = (*QCount) - 1;
    1860:	28 81       	ld	r18, Y
    1862:	39 81       	ldd	r19, Y+1	; 0x01
    1864:	21 50       	subi	r18, 0x01	; 1
    1866:	31 09       	sbc	r19, r1

    volatile PD *new = *p;
    1868:	fc 01       	movw	r30, r24
    186a:	00 81       	ld	r16, Z
    186c:	11 81       	ldd	r17, Z+1	; 0x01

    volatile PD *temp = Queue[i];
    186e:	f9 01       	movw	r30, r18
    1870:	ee 0f       	add	r30, r30
    1872:	ff 1f       	adc	r31, r31
    1874:	db 01       	movw	r26, r22
    1876:	ae 0f       	add	r26, r30
    1878:	bf 1f       	adc	r27, r31
    187a:	4d 91       	ld	r20, X+
    187c:	5c 91       	ld	r21, X

    while(i >= 0 && (new->inheritedPy >= temp->inheritedPy)) {
    187e:	33 23       	and	r19, r19
    1880:	3c f1       	brlt	.+78     	; 0x18d0 <enqueueRQ+0x90>
    1882:	d8 01       	movw	r26, r16
    1884:	a9 5f       	subi	r26, 0xF9	; 249
    1886:	be 4f       	sbci	r27, 0xFE	; 254
    1888:	ed 90       	ld	r14, X+
    188a:	fc 90       	ld	r15, X
    188c:	da 01       	movw	r26, r20
    188e:	a9 5f       	subi	r26, 0xF9	; 249
    1890:	be 4f       	sbci	r27, 0xFE	; 254
    1892:	4d 91       	ld	r20, X+
    1894:	5c 91       	ld	r21, X
    1896:	e4 16       	cp	r14, r20
    1898:	f5 06       	cpc	r15, r21
    189a:	d0 f0       	brcs	.+52     	; 0x18d0 <enqueueRQ+0x90>
    189c:	e6 0f       	add	r30, r22
    189e:	f7 1f       	adc	r31, r23
    18a0:	09 5f       	subi	r16, 0xF9	; 249
    18a2:	1e 4f       	sbci	r17, 0xFE	; 254
        Queue[i+1] = Queue[i];
    18a4:	a0 81       	ld	r26, Z
    18a6:	b1 81       	ldd	r27, Z+1	; 0x01
    18a8:	b3 83       	std	Z+3, r27	; 0x03
    18aa:	a2 83       	std	Z+2, r26	; 0x02
        i--;
    18ac:	21 50       	subi	r18, 0x01	; 1
    18ae:	31 09       	sbc	r19, r1
        temp = Queue[i];
    18b0:	b2 91       	ld	r27, -Z
    18b2:	a2 91       	ld	r26, -Z

    volatile PD *new = *p;

    volatile PD *temp = Queue[i];

    while(i >= 0 && (new->inheritedPy >= temp->inheritedPy)) {
    18b4:	2f 3f       	cpi	r18, 0xFF	; 255
    18b6:	4f ef       	ldi	r20, 0xFF	; 255
    18b8:	34 07       	cpc	r19, r20
    18ba:	51 f0       	breq	.+20     	; 0x18d0 <enqueueRQ+0x90>
    18bc:	e8 01       	movw	r28, r16
    18be:	e8 80       	ld	r14, Y
    18c0:	f9 80       	ldd	r15, Y+1	; 0x01
    18c2:	a9 5f       	subi	r26, 0xF9	; 249
    18c4:	be 4f       	sbci	r27, 0xFE	; 254
    18c6:	4d 91       	ld	r20, X+
    18c8:	5c 91       	ld	r21, X
    18ca:	e4 16       	cp	r14, r20
    18cc:	f5 06       	cpc	r15, r21
    18ce:	50 f7       	brcc	.-44     	; 0x18a4 <enqueueRQ+0x64>
        Queue[i+1] = Queue[i];
        i--;
        temp = Queue[i];
    }

    Queue[i+1] = *p;
    18d0:	fc 01       	movw	r30, r24
    18d2:	80 81       	ld	r24, Z
    18d4:	91 81       	ldd	r25, Z+1	; 0x01
    18d6:	2f 5f       	subi	r18, 0xFF	; 255
    18d8:	3f 4f       	sbci	r19, 0xFF	; 255
    18da:	22 0f       	add	r18, r18
    18dc:	33 1f       	adc	r19, r19
    18de:	fb 01       	movw	r30, r22
    18e0:	e2 0f       	add	r30, r18
    18e2:	f3 1f       	adc	r31, r19
    18e4:	91 83       	std	Z+1, r25	; 0x01
    18e6:	80 83       	st	Z, r24
    (*QCount)++;
    18e8:	e6 01       	movw	r28, r12
    18ea:	88 81       	ld	r24, Y
    18ec:	99 81       	ldd	r25, Y+1	; 0x01
    18ee:	01 96       	adiw	r24, 0x01	; 1
    18f0:	99 83       	std	Y+1, r25	; 0x01
    18f2:	88 83       	st	Y, r24
}
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	1f 91       	pop	r17
    18fa:	0f 91       	pop	r16
    18fc:	ff 90       	pop	r15
    18fe:	ef 90       	pop	r14
    1900:	df 90       	pop	r13
    1902:	cf 90       	pop	r12
    1904:	08 95       	ret

00001906 <dequeueWQ>:

/*
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {
    1906:	0f 93       	push	r16
    1908:	1f 93       	push	r17
    190a:	cf 93       	push	r28
    190c:	df 93       	push	r29

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    190e:	eb 01       	movw	r28, r22
    1910:	28 81       	ld	r18, Y
    1912:	39 81       	ldd	r19, Y+1	; 0x01
/*
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {

    if(isEmpty(QCount)) {
    1914:	23 2b       	or	r18, r19
    1916:	09 f4       	brne	.+2      	; 0x191a <dequeueWQ+0x14>
    1918:	54 c0       	rjmp	.+168    	; 0x19c2 <dequeueWQ+0xbc>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
    191a:	28 81       	ld	r18, Y
    191c:	39 81       	ldd	r19, Y+1	; 0x01
    191e:	21 50       	subi	r18, 0x01	; 1
    1920:	31 09       	sbc	r19, r1
    1922:	0a f4       	brpl	.+2      	; 0x1926 <dequeueWQ+0x20>
    1924:	51 c0       	rjmp	.+162    	; 0x19c8 <dequeueWQ+0xc2>
        if(Queue[i]->m == m){
    1926:	e9 01       	movw	r28, r18
    1928:	cc 0f       	add	r28, r28
    192a:	dd 1f       	adc	r29, r29
    192c:	fc 01       	movw	r30, r24
    192e:	ec 0f       	add	r30, r28
    1930:	fd 1f       	adc	r31, r29
    1932:	a0 81       	ld	r26, Z
    1934:	b1 81       	ldd	r27, Z+1	; 0x01
    1936:	fd 01       	movw	r30, r26
    1938:	ec 5e       	subi	r30, 0xEC	; 236
    193a:	fe 4f       	sbci	r31, 0xFE	; 254
    193c:	01 90       	ld	r0, Z+
    193e:	f0 81       	ld	r31, Z
    1940:	e0 2d       	mov	r30, r0
    1942:	e4 17       	cp	r30, r20
    1944:	f5 07       	cpc	r31, r21
    1946:	81 f4       	brne	.+32     	; 0x1968 <dequeueWQ+0x62>
    1948:	0a c0       	rjmp	.+20     	; 0x195e <dequeueWQ+0x58>
    194a:	ba 91       	ld	r27, -Y
    194c:	aa 91       	ld	r26, -Y
    194e:	fd 01       	movw	r30, r26
    1950:	ec 5e       	subi	r30, 0xEC	; 236
    1952:	fe 4f       	sbci	r31, 0xFE	; 254
    1954:	00 81       	ld	r16, Z
    1956:	11 81       	ldd	r17, Z+1	; 0x01
    1958:	04 17       	cp	r16, r20
    195a:	15 07       	cpc	r17, r21
    195c:	39 f4       	brne	.+14     	; 0x196c <dequeueWQ+0x66>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
    195e:	10 97       	sbiw	r26, 0x00	; 0
    1960:	59 f4       	brne	.+22     	; 0x1978 <dequeueWQ+0x72>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	32 c0       	rjmp	.+100    	; 0x19cc <dequeueWQ+0xc6>
    1968:	c8 0f       	add	r28, r24
    196a:	d9 1f       	adc	r29, r25
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
    196c:	21 50       	subi	r18, 0x01	; 1
    196e:	31 09       	sbc	r19, r1
    1970:	60 f7       	brcc	.-40     	; 0x194a <dequeueWQ+0x44>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	2a c0       	rjmp	.+84     	; 0x19cc <dequeueWQ+0xc6>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i<(*QCount)-1) {
    1978:	eb 01       	movw	r28, r22
    197a:	48 81       	ld	r20, Y
    197c:	59 81       	ldd	r21, Y+1	; 0x01
    197e:	41 50       	subi	r20, 0x01	; 1
    1980:	51 09       	sbc	r21, r1
    1982:	24 17       	cp	r18, r20
    1984:	35 07       	cpc	r19, r21
    1986:	a4 f4       	brge	.+40     	; 0x19b0 <dequeueWQ+0xaa>
    1988:	a9 01       	movw	r20, r18
    198a:	44 0f       	add	r20, r20
    198c:	55 1f       	adc	r21, r21
    198e:	fc 01       	movw	r30, r24
    1990:	e4 0f       	add	r30, r20
    1992:	f5 1f       	adc	r31, r21
            Queue[i] = Queue[i+1];
    1994:	82 81       	ldd	r24, Z+2	; 0x02
    1996:	93 81       	ldd	r25, Z+3	; 0x03
    1998:	81 93       	st	Z+, r24
    199a:	91 93       	st	Z+, r25
            i++;
    199c:	2f 5f       	subi	r18, 0xFF	; 255
    199e:	3f 4f       	sbci	r19, 0xFF	; 255
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i<(*QCount)-1) {
    19a0:	eb 01       	movw	r28, r22
    19a2:	48 81       	ld	r20, Y
    19a4:	59 81       	ldd	r21, Y+1	; 0x01
    19a6:	41 50       	subi	r20, 0x01	; 1
    19a8:	51 09       	sbc	r21, r1
    19aa:	24 17       	cp	r18, r20
    19ac:	35 07       	cpc	r19, r21
    19ae:	94 f3       	brlt	.-28     	; 0x1994 <dequeueWQ+0x8e>
            Queue[i] = Queue[i+1];
            i++;
        }
        (*QCount)--;
    19b0:	fb 01       	movw	r30, r22
    19b2:	80 81       	ld	r24, Z
    19b4:	91 81       	ldd	r25, Z+1	; 0x01
    19b6:	01 97       	sbiw	r24, 0x01	; 1
    19b8:	91 83       	std	Z+1, r25	; 0x01
    19ba:	80 83       	st	Z, r24

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
        if(Queue[i]->m == m){
            result = Queue[i];
    19bc:	8a 2f       	mov	r24, r26
    19be:	9b 2f       	mov	r25, r27
    19c0:	05 c0       	rjmp	.+10     	; 0x19cc <dequeueWQ+0xc6>
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {

    if(isEmpty(QCount)) {
        return NULL;
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <dequeueWQ+0xc6>
            i++;
        }
        (*QCount)--;
    }

    return result;
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	90 e0       	ldi	r25, 0x00	; 0
}
    19cc:	df 91       	pop	r29
    19ce:	cf 91       	pop	r28
    19d0:	1f 91       	pop	r17
    19d2:	0f 91       	pop	r16
    19d4:	08 95       	ret

000019d6 <dequeueRQ>:

/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {
    19d6:	cf 93       	push	r28
    19d8:	df 93       	push	r29
    19da:	eb 01       	movw	r28, r22

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    19dc:	28 81       	ld	r18, Y
    19de:	39 81       	ldd	r19, Y+1	; 0x01
/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
    19e0:	23 2b       	or	r18, r19
    19e2:	09 f4       	brne	.+2      	; 0x19e6 <dequeueRQ+0x10>
    19e4:	48 c0       	rjmp	.+144    	; 0x1a76 <dequeueRQ+0xa0>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
    19e6:	e8 81       	ld	r30, Y
    19e8:	f9 81       	ldd	r31, Y+1	; 0x01
    19ea:	9f 01       	movw	r18, r30
    19ec:	21 50       	subi	r18, 0x01	; 1
    19ee:	31 09       	sbc	r19, r1
    19f0:	0a f4       	brpl	.+2      	; 0x19f4 <dequeueRQ+0x1e>
    19f2:	44 c0       	rjmp	.+136    	; 0x1a7c <dequeueRQ+0xa6>
    19f4:	ee 0f       	add	r30, r30
    19f6:	ff 1f       	adc	r31, r31
    19f8:	e8 0f       	add	r30, r24
    19fa:	f9 1f       	adc	r31, r25
        if((Queue[i]->suspended == 0) && (Queue[i]->state == READY)) {
    19fc:	52 91       	ld	r21, -Z
    19fe:	42 91       	ld	r20, -Z
    1a00:	da 01       	movw	r26, r20
    1a02:	a6 5e       	subi	r26, 0xE6	; 230
    1a04:	be 4f       	sbci	r27, 0xFE	; 254
    1a06:	6d 91       	ld	r22, X+
    1a08:	7c 91       	ld	r23, X
    1a0a:	11 97       	sbiw	r26, 0x01	; 1
    1a0c:	67 2b       	or	r22, r23
    1a0e:	59 f4       	brne	.+22     	; 0x1a26 <dequeueRQ+0x50>
    1a10:	56 97       	sbiw	r26, 0x16	; 22
    1a12:	6c 91       	ld	r22, X
    1a14:	61 30       	cpi	r22, 0x01	; 1
    1a16:	39 f4       	brne	.+14     	; 0x1a26 <dequeueRQ+0x50>
    1a18:	f9 01       	movw	r30, r18
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
    1a1a:	41 15       	cp	r20, r1
    1a1c:	51 05       	cpc	r21, r1
    1a1e:	49 f4       	brne	.+18     	; 0x1a32 <dequeueRQ+0x5c>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	2d c0       	rjmp	.+90     	; 0x1a80 <dequeueRQ+0xaa>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
    1a26:	21 50       	subi	r18, 0x01	; 1
    1a28:	31 09       	sbc	r19, r1
    1a2a:	40 f7       	brcc	.-48     	; 0x19fc <dequeueRQ+0x26>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	27 c0       	rjmp	.+78     	; 0x1a80 <dequeueRQ+0xaa>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i < (*QCount)-1) {
    1a32:	68 81       	ld	r22, Y
    1a34:	79 81       	ldd	r23, Y+1	; 0x01
    1a36:	61 50       	subi	r22, 0x01	; 1
    1a38:	71 09       	sbc	r23, r1
    1a3a:	26 17       	cp	r18, r22
    1a3c:	37 07       	cpc	r19, r23
    1a3e:	9c f4       	brge	.+38     	; 0x1a66 <dequeueRQ+0x90>
    1a40:	ee 0f       	add	r30, r30
    1a42:	ff 1f       	adc	r31, r31
    1a44:	dc 01       	movw	r26, r24
    1a46:	ae 0f       	add	r26, r30
    1a48:	bf 1f       	adc	r27, r31
            Queue[i] = Queue[i+1];
    1a4a:	12 96       	adiw	r26, 0x02	; 2
    1a4c:	8d 91       	ld	r24, X+
    1a4e:	9c 91       	ld	r25, X
    1a50:	13 97       	sbiw	r26, 0x03	; 3
    1a52:	8d 93       	st	X+, r24
    1a54:	9d 93       	st	X+, r25
            i++;
    1a56:	2f 5f       	subi	r18, 0xFF	; 255
    1a58:	3f 4f       	sbci	r19, 0xFF	; 255
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i < (*QCount)-1) {
    1a5a:	e8 81       	ld	r30, Y
    1a5c:	f9 81       	ldd	r31, Y+1	; 0x01
    1a5e:	31 97       	sbiw	r30, 0x01	; 1
    1a60:	2e 17       	cp	r18, r30
    1a62:	3f 07       	cpc	r19, r31
    1a64:	94 f3       	brlt	.-28     	; 0x1a4a <dequeueRQ+0x74>
            Queue[i] = Queue[i+1];
            i++;
        }
        (*QCount)--;
    1a66:	88 81       	ld	r24, Y
    1a68:	99 81       	ldd	r25, Y+1	; 0x01
    1a6a:	01 97       	sbiw	r24, 0x01	; 1
    1a6c:	99 83       	std	Y+1, r25	; 0x01
    1a6e:	88 83       	st	Y, r24
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
        if((Queue[i]->suspended == 0) && (Queue[i]->state == READY)) {
    1a70:	84 2f       	mov	r24, r20
    1a72:	95 2f       	mov	r25, r21
    1a74:	05 c0       	rjmp	.+10     	; 0x1a80 <dequeueRQ+0xaa>
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
        return NULL;
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <dequeueRQ+0xaa>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
}
    1a80:	df 91       	pop	r29
    1a82:	cf 91       	pop	r28
    1a84:	08 95       	ret

00001a86 <dequeue>:

/*
 *  Return the first element of the queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
    1a86:	db 01       	movw	r26, r22

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    1a88:	2d 91       	ld	r18, X+
    1a8a:	3c 91       	ld	r19, X
    1a8c:	11 97       	sbiw	r26, 0x01	; 1
/*
 *  Return the first element of the queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
    1a8e:	23 2b       	or	r18, r19
    1a90:	a9 f0       	breq	.+42     	; 0x1abc <dequeue+0x36>
        return;
    }

    volatile PD *result = (Queue[(*QCount)-1]);
    1a92:	2d 91       	ld	r18, X+
    1a94:	3c 91       	ld	r19, X
    1a96:	11 97       	sbiw	r26, 0x01	; 1
    1a98:	f9 01       	movw	r30, r18
    1a9a:	e1 50       	subi	r30, 0x01	; 1
    1a9c:	f0 48       	sbci	r31, 0x80	; 128
    1a9e:	ee 0f       	add	r30, r30
    1aa0:	ff 1f       	adc	r31, r31
    1aa2:	e8 0f       	add	r30, r24
    1aa4:	f9 1f       	adc	r31, r25
    1aa6:	80 81       	ld	r24, Z
    1aa8:	91 81       	ldd	r25, Z+1	; 0x01
    (*QCount)--;
    1aaa:	2d 91       	ld	r18, X+
    1aac:	3c 91       	ld	r19, X
    1aae:	11 97       	sbiw	r26, 0x01	; 1
    1ab0:	21 50       	subi	r18, 0x01	; 1
    1ab2:	31 09       	sbc	r19, r1
    1ab4:	11 96       	adiw	r26, 0x01	; 1
    1ab6:	3c 93       	st	X, r19
    1ab8:	2e 93       	st	-X, r18
    1aba:	08 95       	ret

    return result;
}
    1abc:	08 95       	ret

00001abe <uart_init>:
void uart_reset_receive(int uart)
{
	if (uart) {
		uart_buffer_1_index = 0;
	} else {
		uart_buffer_index = 0;
    1abe:	e4 e6       	ldi	r30, 0x64	; 100
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	90 81       	ld	r25, Z
    1ac4:	9d 7f       	andi	r25, 0xFD	; 253
    1ac6:	90 83       	st	Z, r25
    1ac8:	32 e0       	ldi	r19, 0x02	; 2
    1aca:	30 93 c0 00 	sts	0x00C0, r19
    1ace:	28 e9       	ldi	r18, 0x98	; 152
    1ad0:	20 93 c1 00 	sts	0x00C1, r18
    1ad4:	96 e0       	ldi	r25, 0x06	; 6
    1ad6:	90 93 c2 00 	sts	0x00C2, r25
    1ada:	30 93 c8 00 	sts	0x00C8, r19
    1ade:	20 93 c9 00 	sts	0x00C9, r18
    1ae2:	90 93 ca 00 	sts	0x00CA, r25
    1ae6:	27 e6       	ldi	r18, 0x67	; 103
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	30 93 c5 00 	sts	0x00C5, r19
    1aee:	20 93 c4 00 	sts	0x00C4, r18
    1af2:	2f ec       	ldi	r18, 0xCF	; 207
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	30 93 cd 00 	sts	0x00CD, r19
    1afa:	20 93 cc 00 	sts	0x00CC, r18
    1afe:	81 30       	cpi	r24, 0x01	; 1
    1b00:	59 f0       	breq	.+22     	; 0x1b18 <uart_init+0x5a>
    1b02:	18 f0       	brcs	.+6      	; 0x1b0a <uart_init+0x4c>
    1b04:	82 30       	cpi	r24, 0x02	; 2
    1b06:	79 f0       	breq	.+30     	; 0x1b26 <uart_init+0x68>
    1b08:	15 c0       	rjmp	.+42     	; 0x1b34 <uart_init+0x76>
    1b0a:	87 e6       	ldi	r24, 0x67	; 103
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	90 93 c5 00 	sts	0x00C5, r25
    1b12:	80 93 c4 00 	sts	0x00C4, r24
    1b16:	14 c0       	rjmp	.+40     	; 0x1b40 <uart_init+0x82>
    1b18:	83 e3       	ldi	r24, 0x33	; 51
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	90 93 c5 00 	sts	0x00C5, r25
    1b20:	80 93 c4 00 	sts	0x00C4, r24
    1b24:	0d c0       	rjmp	.+26     	; 0x1b40 <uart_init+0x82>
    1b26:	82 e2       	ldi	r24, 0x22	; 34
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	90 93 c5 00 	sts	0x00C5, r25
    1b2e:	80 93 c4 00 	sts	0x00C4, r24
    1b32:	06 c0       	rjmp	.+12     	; 0x1b40 <uart_init+0x82>
    1b34:	87 e6       	ldi	r24, 0x67	; 103
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	90 93 c5 00 	sts	0x00C5, r25
    1b3c:	80 93 c4 00 	sts	0x00C4, r24
    1b40:	10 92 83 14 	sts	0x1483, r1
    1b44:	10 92 82 14 	sts	0x1482, r1
    1b48:	08 95       	ret

00001b4a <uart_putchar>:
    1b4a:	67 2b       	or	r22, r23
    1b4c:	41 f0       	breq	.+16     	; 0x1b5e <uart_putchar+0x14>
    1b4e:	e8 ec       	ldi	r30, 0xC8	; 200
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	90 81       	ld	r25, Z
    1b54:	95 ff       	sbrs	r25, 5
    1b56:	fd cf       	rjmp	.-6      	; 0x1b52 <uart_putchar+0x8>
    1b58:	80 93 ce 00 	sts	0x00CE, r24
    1b5c:	08 95       	ret
    1b5e:	e0 ec       	ldi	r30, 0xC0	; 192
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	90 81       	ld	r25, Z
    1b64:	95 ff       	sbrs	r25, 5
    1b66:	fd cf       	rjmp	.-6      	; 0x1b62 <uart_putchar+0x18>
    1b68:	80 93 c6 00 	sts	0x00C6, r24
    1b6c:	08 95       	ret

00001b6e <uart_send_string>:
	}
}
void uart_send_string(char *string, int uart){
    1b6e:	0f 93       	push	r16
    1b70:	1f 93       	push	r17
    1b72:	cf 93       	push	r28
    1b74:	df 93       	push	r29
    1b76:	ec 01       	movw	r28, r24
	
	while (*string != '\0')
    1b78:	88 81       	ld	r24, Y
    1b7a:	88 23       	and	r24, r24
    1b7c:	39 f0       	breq	.+14     	; 0x1b8c <uart_send_string+0x1e>
    1b7e:	8b 01       	movw	r16, r22
    1b80:	21 96       	adiw	r28, 0x01	; 1
	{
		uart_putchar(*string, uart);
    1b82:	b8 01       	movw	r22, r16
    1b84:	e2 df       	rcall	.-60     	; 0x1b4a <uart_putchar>
		uart_buffer_index = 0;
	}
}
void uart_send_string(char *string, int uart){
	
	while (*string != '\0')
    1b86:	89 91       	ld	r24, Y+
    1b88:	81 11       	cpse	r24, r1
    1b8a:	fb cf       	rjmp	.-10     	; 0x1b82 <uart_send_string+0x14>
		uart_putchar(*string, uart);
		string++;
	}
	
	
}
    1b8c:	df 91       	pop	r29
    1b8e:	cf 91       	pop	r28
    1b90:	1f 91       	pop	r17
    1b92:	0f 91       	pop	r16
    1b94:	08 95       	ret

00001b96 <__vector_25>:
/**
 * UART receive byte ISR
 */
ISR(USART0_RX_vect)
{
    1b96:	1f 92       	push	r1
    1b98:	0f 92       	push	r0
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	0f 92       	push	r0
    1b9e:	11 24       	eor	r1, r1
    1ba0:	0b b6       	in	r0, 0x3b	; 59
    1ba2:	0f 92       	push	r0
    1ba4:	8f 93       	push	r24
    1ba6:	9f 93       	push	r25
    1ba8:	ef 93       	push	r30
    1baa:	ff 93       	push	r31
	while(!(UCSR0A & (1<<RXC0)));
    1bac:	e0 ec       	ldi	r30, 0xC0	; 192
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	88 23       	and	r24, r24
    1bb4:	ec f7       	brge	.-6      	; 0x1bb0 <__vector_25+0x1a>
    uart_buffer[uart_buffer_index] = UDR0;
    1bb6:	e0 91 83 14 	lds	r30, 0x1483
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 91 c6 00 	lds	r24, 0x00C6
    1bc0:	ec 55       	subi	r30, 0x5C	; 92
    1bc2:	fb 4e       	sbci	r31, 0xEB	; 235
    1bc4:	80 83       	st	Z, r24
    uart_buffer_index = (uart_buffer_index + 1) % UART_BUFFER_SIZE;
    1bc6:	80 91 83 14 	lds	r24, 0x1483
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	01 96       	adiw	r24, 0x01	; 1
    1bce:	8f 71       	andi	r24, 0x1F	; 31
    1bd0:	90 78       	andi	r25, 0x80	; 128
    1bd2:	99 23       	and	r25, r25
    1bd4:	24 f4       	brge	.+8      	; 0x1bde <__vector_25+0x48>
    1bd6:	01 97       	sbiw	r24, 0x01	; 1
    1bd8:	80 6e       	ori	r24, 0xE0	; 224
    1bda:	9f 6f       	ori	r25, 0xFF	; 255
    1bdc:	01 96       	adiw	r24, 0x01	; 1
    1bde:	80 93 83 14 	sts	0x1483, r24
}
    1be2:	ff 91       	pop	r31
    1be4:	ef 91       	pop	r30
    1be6:	9f 91       	pop	r25
    1be8:	8f 91       	pop	r24
    1bea:	0f 90       	pop	r0
    1bec:	0b be       	out	0x3b, r0	; 59
    1bee:	0f 90       	pop	r0
    1bf0:	0f be       	out	0x3f, r0	; 63
    1bf2:	0f 90       	pop	r0
    1bf4:	1f 90       	pop	r1
    1bf6:	18 95       	reti

00001bf8 <__vector_36>:

/**
 * UART receive byte ISR
 */
ISR(USART1_RX_vect)
{
    1bf8:	1f 92       	push	r1
    1bfa:	0f 92       	push	r0
    1bfc:	0f b6       	in	r0, 0x3f	; 63
    1bfe:	0f 92       	push	r0
    1c00:	11 24       	eor	r1, r1
    1c02:	0b b6       	in	r0, 0x3b	; 59
    1c04:	0f 92       	push	r0
    1c06:	8f 93       	push	r24
    1c08:	9f 93       	push	r25
    1c0a:	ef 93       	push	r30
    1c0c:	ff 93       	push	r31
	while(!(UCSR1A & (1<<RXC1)));
    1c0e:	e8 ec       	ldi	r30, 0xC8	; 200
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	88 23       	and	r24, r24
    1c16:	ec f7       	brge	.-6      	; 0x1c12 <__vector_36+0x1a>
    uart_buffer_1[uart_buffer_1_index] = UDR1;
    1c18:	e0 91 82 14 	lds	r30, 0x1482
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 91 ce 00 	lds	r24, 0x00CE
    1c22:	ec 57       	subi	r30, 0x7C	; 124
    1c24:	fb 4e       	sbci	r31, 0xEB	; 235
    1c26:	80 83       	st	Z, r24
    uart_buffer_1_index = (uart_buffer_1_index + 1) % UART_BUFFER_SIZE;
    1c28:	80 91 82 14 	lds	r24, 0x1482
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	01 96       	adiw	r24, 0x01	; 1
    1c30:	8f 71       	andi	r24, 0x1F	; 31
    1c32:	90 78       	andi	r25, 0x80	; 128
    1c34:	99 23       	and	r25, r25
    1c36:	24 f4       	brge	.+8      	; 0x1c40 <__vector_36+0x48>
    1c38:	01 97       	sbiw	r24, 0x01	; 1
    1c3a:	80 6e       	ori	r24, 0xE0	; 224
    1c3c:	9f 6f       	ori	r25, 0xFF	; 255
    1c3e:	01 96       	adiw	r24, 0x01	; 1
    1c40:	80 93 82 14 	sts	0x1482, r24
}
    1c44:	ff 91       	pop	r31
    1c46:	ef 91       	pop	r30
    1c48:	9f 91       	pop	r25
    1c4a:	8f 91       	pop	r24
    1c4c:	0f 90       	pop	r0
    1c4e:	0b be       	out	0x3b, r0	; 59
    1c50:	0f 90       	pop	r0
    1c52:	0f be       	out	0x3f, r0	; 63
    1c54:	0f 90       	pop	r0
    1c56:	1f 90       	pop	r1
    1c58:	18 95       	reti

00001c5a <__udivmodhi4>:
    1c5a:	aa 1b       	sub	r26, r26
    1c5c:	bb 1b       	sub	r27, r27
    1c5e:	51 e1       	ldi	r21, 0x11	; 17
    1c60:	07 c0       	rjmp	.+14     	; 0x1c70 <__udivmodhi4_ep>

00001c62 <__udivmodhi4_loop>:
    1c62:	aa 1f       	adc	r26, r26
    1c64:	bb 1f       	adc	r27, r27
    1c66:	a6 17       	cp	r26, r22
    1c68:	b7 07       	cpc	r27, r23
    1c6a:	10 f0       	brcs	.+4      	; 0x1c70 <__udivmodhi4_ep>
    1c6c:	a6 1b       	sub	r26, r22
    1c6e:	b7 0b       	sbc	r27, r23

00001c70 <__udivmodhi4_ep>:
    1c70:	88 1f       	adc	r24, r24
    1c72:	99 1f       	adc	r25, r25
    1c74:	5a 95       	dec	r21
    1c76:	a9 f7       	brne	.-22     	; 0x1c62 <__udivmodhi4_loop>
    1c78:	80 95       	com	r24
    1c7a:	90 95       	com	r25
    1c7c:	bc 01       	movw	r22, r24
    1c7e:	cd 01       	movw	r24, r26
    1c80:	08 95       	ret

00001c82 <__tablejump2__>:
    1c82:	ee 0f       	add	r30, r30
    1c84:	ff 1f       	adc	r31, r31
    1c86:	88 1f       	adc	r24, r24
    1c88:	8b bf       	out	0x3b, r24	; 59
    1c8a:	07 90       	elpm	r0, Z+
    1c8c:	f6 91       	elpm	r31, Z
    1c8e:	e0 2d       	mov	r30, r0
    1c90:	19 94       	eijmp

00001c92 <sprintf>:
    1c92:	0f 93       	push	r16
    1c94:	1f 93       	push	r17
    1c96:	cf 93       	push	r28
    1c98:	df 93       	push	r29
    1c9a:	cd b7       	in	r28, 0x3d	; 61
    1c9c:	de b7       	in	r29, 0x3e	; 62
    1c9e:	2e 97       	sbiw	r28, 0x0e	; 14
    1ca0:	0f b6       	in	r0, 0x3f	; 63
    1ca2:	f8 94       	cli
    1ca4:	de bf       	out	0x3e, r29	; 62
    1ca6:	0f be       	out	0x3f, r0	; 63
    1ca8:	cd bf       	out	0x3d, r28	; 61
    1caa:	0e 89       	ldd	r16, Y+22	; 0x16
    1cac:	1f 89       	ldd	r17, Y+23	; 0x17
    1cae:	86 e0       	ldi	r24, 0x06	; 6
    1cb0:	8c 83       	std	Y+4, r24	; 0x04
    1cb2:	1a 83       	std	Y+2, r17	; 0x02
    1cb4:	09 83       	std	Y+1, r16	; 0x01
    1cb6:	8f ef       	ldi	r24, 0xFF	; 255
    1cb8:	9f e7       	ldi	r25, 0x7F	; 127
    1cba:	9e 83       	std	Y+6, r25	; 0x06
    1cbc:	8d 83       	std	Y+5, r24	; 0x05
    1cbe:	ae 01       	movw	r20, r28
    1cc0:	46 5e       	subi	r20, 0xE6	; 230
    1cc2:	5f 4f       	sbci	r21, 0xFF	; 255
    1cc4:	68 8d       	ldd	r22, Y+24	; 0x18
    1cc6:	79 8d       	ldd	r23, Y+25	; 0x19
    1cc8:	ce 01       	movw	r24, r28
    1cca:	01 96       	adiw	r24, 0x01	; 1
    1ccc:	11 d0       	rcall	.+34     	; 0x1cf0 <vfprintf>
    1cce:	2f 81       	ldd	r18, Y+7	; 0x07
    1cd0:	38 85       	ldd	r19, Y+8	; 0x08
    1cd2:	f8 01       	movw	r30, r16
    1cd4:	e2 0f       	add	r30, r18
    1cd6:	f3 1f       	adc	r31, r19
    1cd8:	10 82       	st	Z, r1
    1cda:	2e 96       	adiw	r28, 0x0e	; 14
    1cdc:	0f b6       	in	r0, 0x3f	; 63
    1cde:	f8 94       	cli
    1ce0:	de bf       	out	0x3e, r29	; 62
    1ce2:	0f be       	out	0x3f, r0	; 63
    1ce4:	cd bf       	out	0x3d, r28	; 61
    1ce6:	df 91       	pop	r29
    1ce8:	cf 91       	pop	r28
    1cea:	1f 91       	pop	r17
    1cec:	0f 91       	pop	r16
    1cee:	08 95       	ret

00001cf0 <vfprintf>:
    1cf0:	2f 92       	push	r2
    1cf2:	3f 92       	push	r3
    1cf4:	4f 92       	push	r4
    1cf6:	5f 92       	push	r5
    1cf8:	6f 92       	push	r6
    1cfa:	7f 92       	push	r7
    1cfc:	8f 92       	push	r8
    1cfe:	9f 92       	push	r9
    1d00:	af 92       	push	r10
    1d02:	bf 92       	push	r11
    1d04:	cf 92       	push	r12
    1d06:	df 92       	push	r13
    1d08:	ef 92       	push	r14
    1d0a:	ff 92       	push	r15
    1d0c:	0f 93       	push	r16
    1d0e:	1f 93       	push	r17
    1d10:	cf 93       	push	r28
    1d12:	df 93       	push	r29
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    1d18:	2c 97       	sbiw	r28, 0x0c	; 12
    1d1a:	0f b6       	in	r0, 0x3f	; 63
    1d1c:	f8 94       	cli
    1d1e:	de bf       	out	0x3e, r29	; 62
    1d20:	0f be       	out	0x3f, r0	; 63
    1d22:	cd bf       	out	0x3d, r28	; 61
    1d24:	7c 01       	movw	r14, r24
    1d26:	6b 01       	movw	r12, r22
    1d28:	8a 01       	movw	r16, r20
    1d2a:	fc 01       	movw	r30, r24
    1d2c:	17 82       	std	Z+7, r1	; 0x07
    1d2e:	16 82       	std	Z+6, r1	; 0x06
    1d30:	83 81       	ldd	r24, Z+3	; 0x03
    1d32:	81 ff       	sbrs	r24, 1
    1d34:	b0 c1       	rjmp	.+864    	; 0x2096 <vfprintf+0x3a6>
    1d36:	ce 01       	movw	r24, r28
    1d38:	01 96       	adiw	r24, 0x01	; 1
    1d3a:	4c 01       	movw	r8, r24
    1d3c:	f7 01       	movw	r30, r14
    1d3e:	93 81       	ldd	r25, Z+3	; 0x03
    1d40:	f6 01       	movw	r30, r12
    1d42:	93 fd       	sbrc	r25, 3
    1d44:	85 91       	lpm	r24, Z+
    1d46:	93 ff       	sbrs	r25, 3
    1d48:	81 91       	ld	r24, Z+
    1d4a:	6f 01       	movw	r12, r30
    1d4c:	88 23       	and	r24, r24
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <vfprintf+0x62>
    1d50:	9e c1       	rjmp	.+828    	; 0x208e <vfprintf+0x39e>
    1d52:	85 32       	cpi	r24, 0x25	; 37
    1d54:	39 f4       	brne	.+14     	; 0x1d64 <vfprintf+0x74>
    1d56:	93 fd       	sbrc	r25, 3
    1d58:	85 91       	lpm	r24, Z+
    1d5a:	93 ff       	sbrs	r25, 3
    1d5c:	81 91       	ld	r24, Z+
    1d5e:	6f 01       	movw	r12, r30
    1d60:	85 32       	cpi	r24, 0x25	; 37
    1d62:	21 f4       	brne	.+8      	; 0x1d6c <vfprintf+0x7c>
    1d64:	b7 01       	movw	r22, r14
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	c7 d1       	rcall	.+910    	; 0x20f8 <fputc>
    1d6a:	e8 cf       	rjmp	.-48     	; 0x1d3c <vfprintf+0x4c>
    1d6c:	51 2c       	mov	r5, r1
    1d6e:	31 2c       	mov	r3, r1
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	20 32       	cpi	r18, 0x20	; 32
    1d74:	a0 f4       	brcc	.+40     	; 0x1d9e <vfprintf+0xae>
    1d76:	8b 32       	cpi	r24, 0x2B	; 43
    1d78:	69 f0       	breq	.+26     	; 0x1d94 <vfprintf+0xa4>
    1d7a:	30 f4       	brcc	.+12     	; 0x1d88 <vfprintf+0x98>
    1d7c:	80 32       	cpi	r24, 0x20	; 32
    1d7e:	59 f0       	breq	.+22     	; 0x1d96 <vfprintf+0xa6>
    1d80:	83 32       	cpi	r24, 0x23	; 35
    1d82:	69 f4       	brne	.+26     	; 0x1d9e <vfprintf+0xae>
    1d84:	20 61       	ori	r18, 0x10	; 16
    1d86:	2c c0       	rjmp	.+88     	; 0x1de0 <vfprintf+0xf0>
    1d88:	8d 32       	cpi	r24, 0x2D	; 45
    1d8a:	39 f0       	breq	.+14     	; 0x1d9a <vfprintf+0xaa>
    1d8c:	80 33       	cpi	r24, 0x30	; 48
    1d8e:	39 f4       	brne	.+14     	; 0x1d9e <vfprintf+0xae>
    1d90:	21 60       	ori	r18, 0x01	; 1
    1d92:	26 c0       	rjmp	.+76     	; 0x1de0 <vfprintf+0xf0>
    1d94:	22 60       	ori	r18, 0x02	; 2
    1d96:	24 60       	ori	r18, 0x04	; 4
    1d98:	23 c0       	rjmp	.+70     	; 0x1de0 <vfprintf+0xf0>
    1d9a:	28 60       	ori	r18, 0x08	; 8
    1d9c:	21 c0       	rjmp	.+66     	; 0x1de0 <vfprintf+0xf0>
    1d9e:	27 fd       	sbrc	r18, 7
    1da0:	27 c0       	rjmp	.+78     	; 0x1df0 <vfprintf+0x100>
    1da2:	30 ed       	ldi	r19, 0xD0	; 208
    1da4:	38 0f       	add	r19, r24
    1da6:	3a 30       	cpi	r19, 0x0A	; 10
    1da8:	78 f4       	brcc	.+30     	; 0x1dc8 <vfprintf+0xd8>
    1daa:	26 ff       	sbrs	r18, 6
    1dac:	06 c0       	rjmp	.+12     	; 0x1dba <vfprintf+0xca>
    1dae:	fa e0       	ldi	r31, 0x0A	; 10
    1db0:	5f 9e       	mul	r5, r31
    1db2:	30 0d       	add	r19, r0
    1db4:	11 24       	eor	r1, r1
    1db6:	53 2e       	mov	r5, r19
    1db8:	13 c0       	rjmp	.+38     	; 0x1de0 <vfprintf+0xf0>
    1dba:	8a e0       	ldi	r24, 0x0A	; 10
    1dbc:	38 9e       	mul	r3, r24
    1dbe:	30 0d       	add	r19, r0
    1dc0:	11 24       	eor	r1, r1
    1dc2:	33 2e       	mov	r3, r19
    1dc4:	20 62       	ori	r18, 0x20	; 32
    1dc6:	0c c0       	rjmp	.+24     	; 0x1de0 <vfprintf+0xf0>
    1dc8:	8e 32       	cpi	r24, 0x2E	; 46
    1dca:	21 f4       	brne	.+8      	; 0x1dd4 <vfprintf+0xe4>
    1dcc:	26 fd       	sbrc	r18, 6
    1dce:	5f c1       	rjmp	.+702    	; 0x208e <vfprintf+0x39e>
    1dd0:	20 64       	ori	r18, 0x40	; 64
    1dd2:	06 c0       	rjmp	.+12     	; 0x1de0 <vfprintf+0xf0>
    1dd4:	8c 36       	cpi	r24, 0x6C	; 108
    1dd6:	11 f4       	brne	.+4      	; 0x1ddc <vfprintf+0xec>
    1dd8:	20 68       	ori	r18, 0x80	; 128
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <vfprintf+0xf0>
    1ddc:	88 36       	cpi	r24, 0x68	; 104
    1dde:	41 f4       	brne	.+16     	; 0x1df0 <vfprintf+0x100>
    1de0:	f6 01       	movw	r30, r12
    1de2:	93 fd       	sbrc	r25, 3
    1de4:	85 91       	lpm	r24, Z+
    1de6:	93 ff       	sbrs	r25, 3
    1de8:	81 91       	ld	r24, Z+
    1dea:	6f 01       	movw	r12, r30
    1dec:	81 11       	cpse	r24, r1
    1dee:	c1 cf       	rjmp	.-126    	; 0x1d72 <vfprintf+0x82>
    1df0:	98 2f       	mov	r25, r24
    1df2:	9f 7d       	andi	r25, 0xDF	; 223
    1df4:	95 54       	subi	r25, 0x45	; 69
    1df6:	93 30       	cpi	r25, 0x03	; 3
    1df8:	28 f4       	brcc	.+10     	; 0x1e04 <vfprintf+0x114>
    1dfa:	0c 5f       	subi	r16, 0xFC	; 252
    1dfc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dfe:	ff e3       	ldi	r31, 0x3F	; 63
    1e00:	f9 83       	std	Y+1, r31	; 0x01
    1e02:	0d c0       	rjmp	.+26     	; 0x1e1e <vfprintf+0x12e>
    1e04:	83 36       	cpi	r24, 0x63	; 99
    1e06:	31 f0       	breq	.+12     	; 0x1e14 <vfprintf+0x124>
    1e08:	83 37       	cpi	r24, 0x73	; 115
    1e0a:	71 f0       	breq	.+28     	; 0x1e28 <vfprintf+0x138>
    1e0c:	83 35       	cpi	r24, 0x53	; 83
    1e0e:	09 f0       	breq	.+2      	; 0x1e12 <vfprintf+0x122>
    1e10:	57 c0       	rjmp	.+174    	; 0x1ec0 <vfprintf+0x1d0>
    1e12:	21 c0       	rjmp	.+66     	; 0x1e56 <vfprintf+0x166>
    1e14:	f8 01       	movw	r30, r16
    1e16:	80 81       	ld	r24, Z
    1e18:	89 83       	std	Y+1, r24	; 0x01
    1e1a:	0e 5f       	subi	r16, 0xFE	; 254
    1e1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e1e:	44 24       	eor	r4, r4
    1e20:	43 94       	inc	r4
    1e22:	51 2c       	mov	r5, r1
    1e24:	54 01       	movw	r10, r8
    1e26:	14 c0       	rjmp	.+40     	; 0x1e50 <vfprintf+0x160>
    1e28:	38 01       	movw	r6, r16
    1e2a:	f2 e0       	ldi	r31, 0x02	; 2
    1e2c:	6f 0e       	add	r6, r31
    1e2e:	71 1c       	adc	r7, r1
    1e30:	f8 01       	movw	r30, r16
    1e32:	a0 80       	ld	r10, Z
    1e34:	b1 80       	ldd	r11, Z+1	; 0x01
    1e36:	26 ff       	sbrs	r18, 6
    1e38:	03 c0       	rjmp	.+6      	; 0x1e40 <vfprintf+0x150>
    1e3a:	65 2d       	mov	r22, r5
    1e3c:	70 e0       	ldi	r23, 0x00	; 0
    1e3e:	02 c0       	rjmp	.+4      	; 0x1e44 <vfprintf+0x154>
    1e40:	6f ef       	ldi	r22, 0xFF	; 255
    1e42:	7f ef       	ldi	r23, 0xFF	; 255
    1e44:	c5 01       	movw	r24, r10
    1e46:	2c 87       	std	Y+12, r18	; 0x0c
    1e48:	4c d1       	rcall	.+664    	; 0x20e2 <strnlen>
    1e4a:	2c 01       	movw	r4, r24
    1e4c:	83 01       	movw	r16, r6
    1e4e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e50:	2f 77       	andi	r18, 0x7F	; 127
    1e52:	22 2e       	mov	r2, r18
    1e54:	16 c0       	rjmp	.+44     	; 0x1e82 <vfprintf+0x192>
    1e56:	38 01       	movw	r6, r16
    1e58:	f2 e0       	ldi	r31, 0x02	; 2
    1e5a:	6f 0e       	add	r6, r31
    1e5c:	71 1c       	adc	r7, r1
    1e5e:	f8 01       	movw	r30, r16
    1e60:	a0 80       	ld	r10, Z
    1e62:	b1 80       	ldd	r11, Z+1	; 0x01
    1e64:	26 ff       	sbrs	r18, 6
    1e66:	03 c0       	rjmp	.+6      	; 0x1e6e <vfprintf+0x17e>
    1e68:	65 2d       	mov	r22, r5
    1e6a:	70 e0       	ldi	r23, 0x00	; 0
    1e6c:	02 c0       	rjmp	.+4      	; 0x1e72 <vfprintf+0x182>
    1e6e:	6f ef       	ldi	r22, 0xFF	; 255
    1e70:	7f ef       	ldi	r23, 0xFF	; 255
    1e72:	c5 01       	movw	r24, r10
    1e74:	2c 87       	std	Y+12, r18	; 0x0c
    1e76:	2a d1       	rcall	.+596    	; 0x20cc <strnlen_P>
    1e78:	2c 01       	movw	r4, r24
    1e7a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e7c:	20 68       	ori	r18, 0x80	; 128
    1e7e:	22 2e       	mov	r2, r18
    1e80:	83 01       	movw	r16, r6
    1e82:	23 fc       	sbrc	r2, 3
    1e84:	19 c0       	rjmp	.+50     	; 0x1eb8 <vfprintf+0x1c8>
    1e86:	83 2d       	mov	r24, r3
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	48 16       	cp	r4, r24
    1e8c:	59 06       	cpc	r5, r25
    1e8e:	a0 f4       	brcc	.+40     	; 0x1eb8 <vfprintf+0x1c8>
    1e90:	b7 01       	movw	r22, r14
    1e92:	80 e2       	ldi	r24, 0x20	; 32
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	30 d1       	rcall	.+608    	; 0x20f8 <fputc>
    1e98:	3a 94       	dec	r3
    1e9a:	f5 cf       	rjmp	.-22     	; 0x1e86 <vfprintf+0x196>
    1e9c:	f5 01       	movw	r30, r10
    1e9e:	27 fc       	sbrc	r2, 7
    1ea0:	85 91       	lpm	r24, Z+
    1ea2:	27 fe       	sbrs	r2, 7
    1ea4:	81 91       	ld	r24, Z+
    1ea6:	5f 01       	movw	r10, r30
    1ea8:	b7 01       	movw	r22, r14
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	25 d1       	rcall	.+586    	; 0x20f8 <fputc>
    1eae:	31 10       	cpse	r3, r1
    1eb0:	3a 94       	dec	r3
    1eb2:	f1 e0       	ldi	r31, 0x01	; 1
    1eb4:	4f 1a       	sub	r4, r31
    1eb6:	51 08       	sbc	r5, r1
    1eb8:	41 14       	cp	r4, r1
    1eba:	51 04       	cpc	r5, r1
    1ebc:	79 f7       	brne	.-34     	; 0x1e9c <vfprintf+0x1ac>
    1ebe:	de c0       	rjmp	.+444    	; 0x207c <vfprintf+0x38c>
    1ec0:	84 36       	cpi	r24, 0x64	; 100
    1ec2:	11 f0       	breq	.+4      	; 0x1ec8 <vfprintf+0x1d8>
    1ec4:	89 36       	cpi	r24, 0x69	; 105
    1ec6:	31 f5       	brne	.+76     	; 0x1f14 <vfprintf+0x224>
    1ec8:	f8 01       	movw	r30, r16
    1eca:	27 ff       	sbrs	r18, 7
    1ecc:	07 c0       	rjmp	.+14     	; 0x1edc <vfprintf+0x1ec>
    1ece:	60 81       	ld	r22, Z
    1ed0:	71 81       	ldd	r23, Z+1	; 0x01
    1ed2:	82 81       	ldd	r24, Z+2	; 0x02
    1ed4:	93 81       	ldd	r25, Z+3	; 0x03
    1ed6:	0c 5f       	subi	r16, 0xFC	; 252
    1ed8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eda:	08 c0       	rjmp	.+16     	; 0x1eec <vfprintf+0x1fc>
    1edc:	60 81       	ld	r22, Z
    1ede:	71 81       	ldd	r23, Z+1	; 0x01
    1ee0:	07 2e       	mov	r0, r23
    1ee2:	00 0c       	add	r0, r0
    1ee4:	88 0b       	sbc	r24, r24
    1ee6:	99 0b       	sbc	r25, r25
    1ee8:	0e 5f       	subi	r16, 0xFE	; 254
    1eea:	1f 4f       	sbci	r17, 0xFF	; 255
    1eec:	2f 76       	andi	r18, 0x6F	; 111
    1eee:	72 2e       	mov	r7, r18
    1ef0:	97 ff       	sbrs	r25, 7
    1ef2:	09 c0       	rjmp	.+18     	; 0x1f06 <vfprintf+0x216>
    1ef4:	90 95       	com	r25
    1ef6:	80 95       	com	r24
    1ef8:	70 95       	com	r23
    1efa:	61 95       	neg	r22
    1efc:	7f 4f       	sbci	r23, 0xFF	; 255
    1efe:	8f 4f       	sbci	r24, 0xFF	; 255
    1f00:	9f 4f       	sbci	r25, 0xFF	; 255
    1f02:	20 68       	ori	r18, 0x80	; 128
    1f04:	72 2e       	mov	r7, r18
    1f06:	2a e0       	ldi	r18, 0x0A	; 10
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	a4 01       	movw	r20, r8
    1f0c:	2d d1       	rcall	.+602    	; 0x2168 <__ultoa_invert>
    1f0e:	a8 2e       	mov	r10, r24
    1f10:	a8 18       	sub	r10, r8
    1f12:	43 c0       	rjmp	.+134    	; 0x1f9a <vfprintf+0x2aa>
    1f14:	85 37       	cpi	r24, 0x75	; 117
    1f16:	29 f4       	brne	.+10     	; 0x1f22 <vfprintf+0x232>
    1f18:	2f 7e       	andi	r18, 0xEF	; 239
    1f1a:	b2 2e       	mov	r11, r18
    1f1c:	2a e0       	ldi	r18, 0x0A	; 10
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	25 c0       	rjmp	.+74     	; 0x1f6c <vfprintf+0x27c>
    1f22:	f2 2f       	mov	r31, r18
    1f24:	f9 7f       	andi	r31, 0xF9	; 249
    1f26:	bf 2e       	mov	r11, r31
    1f28:	8f 36       	cpi	r24, 0x6F	; 111
    1f2a:	c1 f0       	breq	.+48     	; 0x1f5c <vfprintf+0x26c>
    1f2c:	18 f4       	brcc	.+6      	; 0x1f34 <vfprintf+0x244>
    1f2e:	88 35       	cpi	r24, 0x58	; 88
    1f30:	79 f0       	breq	.+30     	; 0x1f50 <vfprintf+0x260>
    1f32:	ad c0       	rjmp	.+346    	; 0x208e <vfprintf+0x39e>
    1f34:	80 37       	cpi	r24, 0x70	; 112
    1f36:	19 f0       	breq	.+6      	; 0x1f3e <vfprintf+0x24e>
    1f38:	88 37       	cpi	r24, 0x78	; 120
    1f3a:	21 f0       	breq	.+8      	; 0x1f44 <vfprintf+0x254>
    1f3c:	a8 c0       	rjmp	.+336    	; 0x208e <vfprintf+0x39e>
    1f3e:	2f 2f       	mov	r18, r31
    1f40:	20 61       	ori	r18, 0x10	; 16
    1f42:	b2 2e       	mov	r11, r18
    1f44:	b4 fe       	sbrs	r11, 4
    1f46:	0d c0       	rjmp	.+26     	; 0x1f62 <vfprintf+0x272>
    1f48:	8b 2d       	mov	r24, r11
    1f4a:	84 60       	ori	r24, 0x04	; 4
    1f4c:	b8 2e       	mov	r11, r24
    1f4e:	09 c0       	rjmp	.+18     	; 0x1f62 <vfprintf+0x272>
    1f50:	24 ff       	sbrs	r18, 4
    1f52:	0a c0       	rjmp	.+20     	; 0x1f68 <vfprintf+0x278>
    1f54:	9f 2f       	mov	r25, r31
    1f56:	96 60       	ori	r25, 0x06	; 6
    1f58:	b9 2e       	mov	r11, r25
    1f5a:	06 c0       	rjmp	.+12     	; 0x1f68 <vfprintf+0x278>
    1f5c:	28 e0       	ldi	r18, 0x08	; 8
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	05 c0       	rjmp	.+10     	; 0x1f6c <vfprintf+0x27c>
    1f62:	20 e1       	ldi	r18, 0x10	; 16
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	02 c0       	rjmp	.+4      	; 0x1f6c <vfprintf+0x27c>
    1f68:	20 e1       	ldi	r18, 0x10	; 16
    1f6a:	32 e0       	ldi	r19, 0x02	; 2
    1f6c:	f8 01       	movw	r30, r16
    1f6e:	b7 fe       	sbrs	r11, 7
    1f70:	07 c0       	rjmp	.+14     	; 0x1f80 <vfprintf+0x290>
    1f72:	60 81       	ld	r22, Z
    1f74:	71 81       	ldd	r23, Z+1	; 0x01
    1f76:	82 81       	ldd	r24, Z+2	; 0x02
    1f78:	93 81       	ldd	r25, Z+3	; 0x03
    1f7a:	0c 5f       	subi	r16, 0xFC	; 252
    1f7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f7e:	06 c0       	rjmp	.+12     	; 0x1f8c <vfprintf+0x29c>
    1f80:	60 81       	ld	r22, Z
    1f82:	71 81       	ldd	r23, Z+1	; 0x01
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	0e 5f       	subi	r16, 0xFE	; 254
    1f8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8c:	a4 01       	movw	r20, r8
    1f8e:	ec d0       	rcall	.+472    	; 0x2168 <__ultoa_invert>
    1f90:	a8 2e       	mov	r10, r24
    1f92:	a8 18       	sub	r10, r8
    1f94:	fb 2d       	mov	r31, r11
    1f96:	ff 77       	andi	r31, 0x7F	; 127
    1f98:	7f 2e       	mov	r7, r31
    1f9a:	76 fe       	sbrs	r7, 6
    1f9c:	0b c0       	rjmp	.+22     	; 0x1fb4 <vfprintf+0x2c4>
    1f9e:	37 2d       	mov	r19, r7
    1fa0:	3e 7f       	andi	r19, 0xFE	; 254
    1fa2:	a5 14       	cp	r10, r5
    1fa4:	50 f4       	brcc	.+20     	; 0x1fba <vfprintf+0x2ca>
    1fa6:	74 fe       	sbrs	r7, 4
    1fa8:	0a c0       	rjmp	.+20     	; 0x1fbe <vfprintf+0x2ce>
    1faa:	72 fc       	sbrc	r7, 2
    1fac:	08 c0       	rjmp	.+16     	; 0x1fbe <vfprintf+0x2ce>
    1fae:	37 2d       	mov	r19, r7
    1fb0:	3e 7e       	andi	r19, 0xEE	; 238
    1fb2:	05 c0       	rjmp	.+10     	; 0x1fbe <vfprintf+0x2ce>
    1fb4:	ba 2c       	mov	r11, r10
    1fb6:	37 2d       	mov	r19, r7
    1fb8:	03 c0       	rjmp	.+6      	; 0x1fc0 <vfprintf+0x2d0>
    1fba:	ba 2c       	mov	r11, r10
    1fbc:	01 c0       	rjmp	.+2      	; 0x1fc0 <vfprintf+0x2d0>
    1fbe:	b5 2c       	mov	r11, r5
    1fc0:	34 ff       	sbrs	r19, 4
    1fc2:	0d c0       	rjmp	.+26     	; 0x1fde <vfprintf+0x2ee>
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	ea 0d       	add	r30, r10
    1fc8:	f1 1d       	adc	r31, r1
    1fca:	80 81       	ld	r24, Z
    1fcc:	80 33       	cpi	r24, 0x30	; 48
    1fce:	11 f4       	brne	.+4      	; 0x1fd4 <vfprintf+0x2e4>
    1fd0:	39 7e       	andi	r19, 0xE9	; 233
    1fd2:	09 c0       	rjmp	.+18     	; 0x1fe6 <vfprintf+0x2f6>
    1fd4:	32 ff       	sbrs	r19, 2
    1fd6:	06 c0       	rjmp	.+12     	; 0x1fe4 <vfprintf+0x2f4>
    1fd8:	b3 94       	inc	r11
    1fda:	b3 94       	inc	r11
    1fdc:	04 c0       	rjmp	.+8      	; 0x1fe6 <vfprintf+0x2f6>
    1fde:	83 2f       	mov	r24, r19
    1fe0:	86 78       	andi	r24, 0x86	; 134
    1fe2:	09 f0       	breq	.+2      	; 0x1fe6 <vfprintf+0x2f6>
    1fe4:	b3 94       	inc	r11
    1fe6:	33 fd       	sbrc	r19, 3
    1fe8:	12 c0       	rjmp	.+36     	; 0x200e <vfprintf+0x31e>
    1fea:	30 ff       	sbrs	r19, 0
    1fec:	06 c0       	rjmp	.+12     	; 0x1ffa <vfprintf+0x30a>
    1fee:	5a 2c       	mov	r5, r10
    1ff0:	b3 14       	cp	r11, r3
    1ff2:	18 f4       	brcc	.+6      	; 0x1ffa <vfprintf+0x30a>
    1ff4:	53 0c       	add	r5, r3
    1ff6:	5b 18       	sub	r5, r11
    1ff8:	b3 2c       	mov	r11, r3
    1ffa:	b3 14       	cp	r11, r3
    1ffc:	60 f4       	brcc	.+24     	; 0x2016 <vfprintf+0x326>
    1ffe:	b7 01       	movw	r22, r14
    2000:	80 e2       	ldi	r24, 0x20	; 32
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	3c 87       	std	Y+12, r19	; 0x0c
    2006:	78 d0       	rcall	.+240    	; 0x20f8 <fputc>
    2008:	b3 94       	inc	r11
    200a:	3c 85       	ldd	r19, Y+12	; 0x0c
    200c:	f6 cf       	rjmp	.-20     	; 0x1ffa <vfprintf+0x30a>
    200e:	b3 14       	cp	r11, r3
    2010:	10 f4       	brcc	.+4      	; 0x2016 <vfprintf+0x326>
    2012:	3b 18       	sub	r3, r11
    2014:	01 c0       	rjmp	.+2      	; 0x2018 <vfprintf+0x328>
    2016:	31 2c       	mov	r3, r1
    2018:	34 ff       	sbrs	r19, 4
    201a:	11 c0       	rjmp	.+34     	; 0x203e <vfprintf+0x34e>
    201c:	b7 01       	movw	r22, r14
    201e:	80 e3       	ldi	r24, 0x30	; 48
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	3c 87       	std	Y+12, r19	; 0x0c
    2024:	69 d0       	rcall	.+210    	; 0x20f8 <fputc>
    2026:	3c 85       	ldd	r19, Y+12	; 0x0c
    2028:	32 ff       	sbrs	r19, 2
    202a:	16 c0       	rjmp	.+44     	; 0x2058 <vfprintf+0x368>
    202c:	31 fd       	sbrc	r19, 1
    202e:	03 c0       	rjmp	.+6      	; 0x2036 <vfprintf+0x346>
    2030:	88 e7       	ldi	r24, 0x78	; 120
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	02 c0       	rjmp	.+4      	; 0x203a <vfprintf+0x34a>
    2036:	88 e5       	ldi	r24, 0x58	; 88
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	b7 01       	movw	r22, r14
    203c:	0c c0       	rjmp	.+24     	; 0x2056 <vfprintf+0x366>
    203e:	83 2f       	mov	r24, r19
    2040:	86 78       	andi	r24, 0x86	; 134
    2042:	51 f0       	breq	.+20     	; 0x2058 <vfprintf+0x368>
    2044:	31 ff       	sbrs	r19, 1
    2046:	02 c0       	rjmp	.+4      	; 0x204c <vfprintf+0x35c>
    2048:	8b e2       	ldi	r24, 0x2B	; 43
    204a:	01 c0       	rjmp	.+2      	; 0x204e <vfprintf+0x35e>
    204c:	80 e2       	ldi	r24, 0x20	; 32
    204e:	37 fd       	sbrc	r19, 7
    2050:	8d e2       	ldi	r24, 0x2D	; 45
    2052:	b7 01       	movw	r22, r14
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	50 d0       	rcall	.+160    	; 0x20f8 <fputc>
    2058:	a5 14       	cp	r10, r5
    205a:	30 f4       	brcc	.+12     	; 0x2068 <vfprintf+0x378>
    205c:	b7 01       	movw	r22, r14
    205e:	80 e3       	ldi	r24, 0x30	; 48
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	4a d0       	rcall	.+148    	; 0x20f8 <fputc>
    2064:	5a 94       	dec	r5
    2066:	f8 cf       	rjmp	.-16     	; 0x2058 <vfprintf+0x368>
    2068:	aa 94       	dec	r10
    206a:	f4 01       	movw	r30, r8
    206c:	ea 0d       	add	r30, r10
    206e:	f1 1d       	adc	r31, r1
    2070:	80 81       	ld	r24, Z
    2072:	b7 01       	movw	r22, r14
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	40 d0       	rcall	.+128    	; 0x20f8 <fputc>
    2078:	a1 10       	cpse	r10, r1
    207a:	f6 cf       	rjmp	.-20     	; 0x2068 <vfprintf+0x378>
    207c:	33 20       	and	r3, r3
    207e:	09 f4       	brne	.+2      	; 0x2082 <vfprintf+0x392>
    2080:	5d ce       	rjmp	.-838    	; 0x1d3c <vfprintf+0x4c>
    2082:	b7 01       	movw	r22, r14
    2084:	80 e2       	ldi	r24, 0x20	; 32
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	37 d0       	rcall	.+110    	; 0x20f8 <fputc>
    208a:	3a 94       	dec	r3
    208c:	f7 cf       	rjmp	.-18     	; 0x207c <vfprintf+0x38c>
    208e:	f7 01       	movw	r30, r14
    2090:	86 81       	ldd	r24, Z+6	; 0x06
    2092:	97 81       	ldd	r25, Z+7	; 0x07
    2094:	02 c0       	rjmp	.+4      	; 0x209a <vfprintf+0x3aa>
    2096:	8f ef       	ldi	r24, 0xFF	; 255
    2098:	9f ef       	ldi	r25, 0xFF	; 255
    209a:	2c 96       	adiw	r28, 0x0c	; 12
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	f8 94       	cli
    20a0:	de bf       	out	0x3e, r29	; 62
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	cd bf       	out	0x3d, r28	; 61
    20a6:	df 91       	pop	r29
    20a8:	cf 91       	pop	r28
    20aa:	1f 91       	pop	r17
    20ac:	0f 91       	pop	r16
    20ae:	ff 90       	pop	r15
    20b0:	ef 90       	pop	r14
    20b2:	df 90       	pop	r13
    20b4:	cf 90       	pop	r12
    20b6:	bf 90       	pop	r11
    20b8:	af 90       	pop	r10
    20ba:	9f 90       	pop	r9
    20bc:	8f 90       	pop	r8
    20be:	7f 90       	pop	r7
    20c0:	6f 90       	pop	r6
    20c2:	5f 90       	pop	r5
    20c4:	4f 90       	pop	r4
    20c6:	3f 90       	pop	r3
    20c8:	2f 90       	pop	r2
    20ca:	08 95       	ret

000020cc <strnlen_P>:
    20cc:	fc 01       	movw	r30, r24
    20ce:	05 90       	lpm	r0, Z+
    20d0:	61 50       	subi	r22, 0x01	; 1
    20d2:	70 40       	sbci	r23, 0x00	; 0
    20d4:	01 10       	cpse	r0, r1
    20d6:	d8 f7       	brcc	.-10     	; 0x20ce <strnlen_P+0x2>
    20d8:	80 95       	com	r24
    20da:	90 95       	com	r25
    20dc:	8e 0f       	add	r24, r30
    20de:	9f 1f       	adc	r25, r31
    20e0:	08 95       	ret

000020e2 <strnlen>:
    20e2:	fc 01       	movw	r30, r24
    20e4:	61 50       	subi	r22, 0x01	; 1
    20e6:	70 40       	sbci	r23, 0x00	; 0
    20e8:	01 90       	ld	r0, Z+
    20ea:	01 10       	cpse	r0, r1
    20ec:	d8 f7       	brcc	.-10     	; 0x20e4 <strnlen+0x2>
    20ee:	80 95       	com	r24
    20f0:	90 95       	com	r25
    20f2:	8e 0f       	add	r24, r30
    20f4:	9f 1f       	adc	r25, r31
    20f6:	08 95       	ret

000020f8 <fputc>:
    20f8:	0f 93       	push	r16
    20fa:	1f 93       	push	r17
    20fc:	cf 93       	push	r28
    20fe:	df 93       	push	r29
    2100:	fb 01       	movw	r30, r22
    2102:	23 81       	ldd	r18, Z+3	; 0x03
    2104:	21 fd       	sbrc	r18, 1
    2106:	03 c0       	rjmp	.+6      	; 0x210e <fputc+0x16>
    2108:	8f ef       	ldi	r24, 0xFF	; 255
    210a:	9f ef       	ldi	r25, 0xFF	; 255
    210c:	28 c0       	rjmp	.+80     	; 0x215e <fputc+0x66>
    210e:	22 ff       	sbrs	r18, 2
    2110:	16 c0       	rjmp	.+44     	; 0x213e <fputc+0x46>
    2112:	46 81       	ldd	r20, Z+6	; 0x06
    2114:	57 81       	ldd	r21, Z+7	; 0x07
    2116:	24 81       	ldd	r18, Z+4	; 0x04
    2118:	35 81       	ldd	r19, Z+5	; 0x05
    211a:	42 17       	cp	r20, r18
    211c:	53 07       	cpc	r21, r19
    211e:	44 f4       	brge	.+16     	; 0x2130 <fputc+0x38>
    2120:	a0 81       	ld	r26, Z
    2122:	b1 81       	ldd	r27, Z+1	; 0x01
    2124:	9d 01       	movw	r18, r26
    2126:	2f 5f       	subi	r18, 0xFF	; 255
    2128:	3f 4f       	sbci	r19, 0xFF	; 255
    212a:	31 83       	std	Z+1, r19	; 0x01
    212c:	20 83       	st	Z, r18
    212e:	8c 93       	st	X, r24
    2130:	26 81       	ldd	r18, Z+6	; 0x06
    2132:	37 81       	ldd	r19, Z+7	; 0x07
    2134:	2f 5f       	subi	r18, 0xFF	; 255
    2136:	3f 4f       	sbci	r19, 0xFF	; 255
    2138:	37 83       	std	Z+7, r19	; 0x07
    213a:	26 83       	std	Z+6, r18	; 0x06
    213c:	10 c0       	rjmp	.+32     	; 0x215e <fputc+0x66>
    213e:	eb 01       	movw	r28, r22
    2140:	09 2f       	mov	r16, r25
    2142:	18 2f       	mov	r17, r24
    2144:	00 84       	ldd	r0, Z+8	; 0x08
    2146:	f1 85       	ldd	r31, Z+9	; 0x09
    2148:	e0 2d       	mov	r30, r0
    214a:	19 95       	eicall
    214c:	89 2b       	or	r24, r25
    214e:	e1 f6       	brne	.-72     	; 0x2108 <fputc+0x10>
    2150:	8e 81       	ldd	r24, Y+6	; 0x06
    2152:	9f 81       	ldd	r25, Y+7	; 0x07
    2154:	01 96       	adiw	r24, 0x01	; 1
    2156:	9f 83       	std	Y+7, r25	; 0x07
    2158:	8e 83       	std	Y+6, r24	; 0x06
    215a:	81 2f       	mov	r24, r17
    215c:	90 2f       	mov	r25, r16
    215e:	df 91       	pop	r29
    2160:	cf 91       	pop	r28
    2162:	1f 91       	pop	r17
    2164:	0f 91       	pop	r16
    2166:	08 95       	ret

00002168 <__ultoa_invert>:
    2168:	fa 01       	movw	r30, r20
    216a:	aa 27       	eor	r26, r26
    216c:	28 30       	cpi	r18, 0x08	; 8
    216e:	51 f1       	breq	.+84     	; 0x21c4 <__ultoa_invert+0x5c>
    2170:	20 31       	cpi	r18, 0x10	; 16
    2172:	81 f1       	breq	.+96     	; 0x21d4 <__ultoa_invert+0x6c>
    2174:	e8 94       	clt
    2176:	6f 93       	push	r22
    2178:	6e 7f       	andi	r22, 0xFE	; 254
    217a:	6e 5f       	subi	r22, 0xFE	; 254
    217c:	7f 4f       	sbci	r23, 0xFF	; 255
    217e:	8f 4f       	sbci	r24, 0xFF	; 255
    2180:	9f 4f       	sbci	r25, 0xFF	; 255
    2182:	af 4f       	sbci	r26, 0xFF	; 255
    2184:	b1 e0       	ldi	r27, 0x01	; 1
    2186:	3e d0       	rcall	.+124    	; 0x2204 <__stack+0x5>
    2188:	b4 e0       	ldi	r27, 0x04	; 4
    218a:	3c d0       	rcall	.+120    	; 0x2204 <__stack+0x5>
    218c:	67 0f       	add	r22, r23
    218e:	78 1f       	adc	r23, r24
    2190:	89 1f       	adc	r24, r25
    2192:	9a 1f       	adc	r25, r26
    2194:	a1 1d       	adc	r26, r1
    2196:	68 0f       	add	r22, r24
    2198:	79 1f       	adc	r23, r25
    219a:	8a 1f       	adc	r24, r26
    219c:	91 1d       	adc	r25, r1
    219e:	a1 1d       	adc	r26, r1
    21a0:	6a 0f       	add	r22, r26
    21a2:	71 1d       	adc	r23, r1
    21a4:	81 1d       	adc	r24, r1
    21a6:	91 1d       	adc	r25, r1
    21a8:	a1 1d       	adc	r26, r1
    21aa:	20 d0       	rcall	.+64     	; 0x21ec <__ultoa_invert+0x84>
    21ac:	09 f4       	brne	.+2      	; 0x21b0 <__ultoa_invert+0x48>
    21ae:	68 94       	set
    21b0:	3f 91       	pop	r19
    21b2:	2a e0       	ldi	r18, 0x0A	; 10
    21b4:	26 9f       	mul	r18, r22
    21b6:	11 24       	eor	r1, r1
    21b8:	30 19       	sub	r19, r0
    21ba:	30 5d       	subi	r19, 0xD0	; 208
    21bc:	31 93       	st	Z+, r19
    21be:	de f6       	brtc	.-74     	; 0x2176 <__ultoa_invert+0xe>
    21c0:	cf 01       	movw	r24, r30
    21c2:	08 95       	ret
    21c4:	46 2f       	mov	r20, r22
    21c6:	47 70       	andi	r20, 0x07	; 7
    21c8:	40 5d       	subi	r20, 0xD0	; 208
    21ca:	41 93       	st	Z+, r20
    21cc:	b3 e0       	ldi	r27, 0x03	; 3
    21ce:	0f d0       	rcall	.+30     	; 0x21ee <__ultoa_invert+0x86>
    21d0:	c9 f7       	brne	.-14     	; 0x21c4 <__ultoa_invert+0x5c>
    21d2:	f6 cf       	rjmp	.-20     	; 0x21c0 <__ultoa_invert+0x58>
    21d4:	46 2f       	mov	r20, r22
    21d6:	4f 70       	andi	r20, 0x0F	; 15
    21d8:	40 5d       	subi	r20, 0xD0	; 208
    21da:	4a 33       	cpi	r20, 0x3A	; 58
    21dc:	18 f0       	brcs	.+6      	; 0x21e4 <__ultoa_invert+0x7c>
    21de:	49 5d       	subi	r20, 0xD9	; 217
    21e0:	31 fd       	sbrc	r19, 1
    21e2:	40 52       	subi	r20, 0x20	; 32
    21e4:	41 93       	st	Z+, r20
    21e6:	02 d0       	rcall	.+4      	; 0x21ec <__ultoa_invert+0x84>
    21e8:	a9 f7       	brne	.-22     	; 0x21d4 <__ultoa_invert+0x6c>
    21ea:	ea cf       	rjmp	.-44     	; 0x21c0 <__ultoa_invert+0x58>
    21ec:	b4 e0       	ldi	r27, 0x04	; 4
    21ee:	a6 95       	lsr	r26
    21f0:	97 95       	ror	r25
    21f2:	87 95       	ror	r24
    21f4:	77 95       	ror	r23
    21f6:	67 95       	ror	r22
    21f8:	ba 95       	dec	r27
    21fa:	c9 f7       	brne	.-14     	; 0x21ee <__ultoa_invert+0x86>
    21fc:	00 97       	sbiw	r24, 0x00	; 0
    21fe:	61 05       	cpc	r22, r1
    2200:	71 05       	cpc	r23, r1
    2202:	08 95       	ret
    2204:	9b 01       	movw	r18, r22
    2206:	ac 01       	movw	r20, r24
    2208:	0a 2e       	mov	r0, r26
    220a:	06 94       	lsr	r0
    220c:	57 95       	ror	r21
    220e:	47 95       	ror	r20
    2210:	37 95       	ror	r19
    2212:	27 95       	ror	r18
    2214:	ba 95       	dec	r27
    2216:	c9 f7       	brne	.-14     	; 0x220a <__stack+0xb>
    2218:	62 0f       	add	r22, r18
    221a:	73 1f       	adc	r23, r19
    221c:	84 1f       	adc	r24, r20
    221e:	95 1f       	adc	r25, r21
    2220:	a0 1d       	adc	r26, r0
    2222:	08 95       	ret

00002224 <_exit>:
    2224:	f8 94       	cli

00002226 <__stop_program>:
    2226:	ff cf       	rjmp	.-2      	; 0x2226 <__stop_program>
