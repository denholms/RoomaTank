
roomba.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800200  00001fc6  0000205a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fc6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000014da  0080022a  0080022a  00002084  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002084  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000020b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004b8  00000000  00000000  000020f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000057fe  00000000  00000000  000025b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000151e  00000000  00000000  00007dae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002bb5  00000000  00000000  000092cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c5c  00000000  00000000  0000be84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000142d  00000000  00000000  0000cae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000030b5  00000000  00000000  0000df0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004d8  00000000  00000000  00010fc2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c0       	rjmp	.+252    	; 0xfe <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 71 0d 	jmp	0x1ae2	; 0x1ae2 <__vector_1>
       8:	9b c0       	rjmp	.+310    	; 0x140 <__bad_interrupt>
       a:	00 00       	nop
       c:	99 c0       	rjmp	.+306    	; 0x140 <__bad_interrupt>
       e:	00 00       	nop
      10:	97 c0       	rjmp	.+302    	; 0x140 <__bad_interrupt>
      12:	00 00       	nop
      14:	95 c0       	rjmp	.+298    	; 0x140 <__bad_interrupt>
      16:	00 00       	nop
      18:	93 c0       	rjmp	.+294    	; 0x140 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	91 c0       	rjmp	.+290    	; 0x140 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8f c0       	rjmp	.+286    	; 0x140 <__bad_interrupt>
      22:	00 00       	nop
      24:	8d c0       	rjmp	.+282    	; 0x140 <__bad_interrupt>
      26:	00 00       	nop
      28:	8b c0       	rjmp	.+278    	; 0x140 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	89 c0       	rjmp	.+274    	; 0x140 <__bad_interrupt>
      2e:	00 00       	nop
      30:	87 c0       	rjmp	.+270    	; 0x140 <__bad_interrupt>
      32:	00 00       	nop
      34:	85 c0       	rjmp	.+266    	; 0x140 <__bad_interrupt>
      36:	00 00       	nop
      38:	83 c0       	rjmp	.+262    	; 0x140 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	81 c0       	rjmp	.+258    	; 0x140 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7f c0       	rjmp	.+254    	; 0x140 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 3f 0a 	jmp	0x147e	; 0x147e <__vector_17>
      48:	7b c0       	rjmp	.+246    	; 0x140 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	79 c0       	rjmp	.+242    	; 0x140 <__bad_interrupt>
      4e:	00 00       	nop
      50:	77 c0       	rjmp	.+238    	; 0x140 <__bad_interrupt>
      52:	00 00       	nop
      54:	75 c0       	rjmp	.+234    	; 0x140 <__bad_interrupt>
      56:	00 00       	nop
      58:	73 c0       	rjmp	.+230    	; 0x140 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	71 c0       	rjmp	.+226    	; 0x140 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6f c0       	rjmp	.+222    	; 0x140 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 ad 0e 	jmp	0x1d5a	; 0x1d5a <__vector_25>
      68:	0c 94 e6 0e 	jmp	0x1dcc	; 0x1dcc <__vector_26>
      6c:	69 c0       	rjmp	.+210    	; 0x140 <__bad_interrupt>
      6e:	00 00       	nop
      70:	67 c0       	rjmp	.+206    	; 0x140 <__bad_interrupt>
      72:	00 00       	nop
      74:	65 c0       	rjmp	.+202    	; 0x140 <__bad_interrupt>
      76:	00 00       	nop
      78:	63 c0       	rjmp	.+198    	; 0x140 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	61 c0       	rjmp	.+194    	; 0x140 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 04 0b 	jmp	0x1608	; 0x1608 <__vector_32>
      84:	5d c0       	rjmp	.+186    	; 0x140 <__bad_interrupt>
      86:	00 00       	nop
      88:	5b c0       	rjmp	.+182    	; 0x140 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	59 c0       	rjmp	.+178    	; 0x140 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 5c 0f 	jmp	0x1eb8	; 0x1eb8 <__vector_36>
      94:	0c 94 95 0f 	jmp	0x1f2a	; 0x1f2a <__vector_37>
      98:	53 c0       	rjmp	.+166    	; 0x140 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	51 c0       	rjmp	.+162    	; 0x140 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4f c0       	rjmp	.+158    	; 0x140 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4d c0       	rjmp	.+154    	; 0x140 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4b c0       	rjmp	.+150    	; 0x140 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	49 c0       	rjmp	.+146    	; 0x140 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	47 c0       	rjmp	.+142    	; 0x140 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	45 c0       	rjmp	.+138    	; 0x140 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	43 c0       	rjmp	.+134    	; 0x140 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	41 c0       	rjmp	.+130    	; 0x140 <__bad_interrupt>
      be:	00 00       	nop
      c0:	3f c0       	rjmp	.+126    	; 0x140 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3d c0       	rjmp	.+122    	; 0x140 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3b c0       	rjmp	.+118    	; 0x140 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	39 c0       	rjmp	.+114    	; 0x140 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	37 c0       	rjmp	.+110    	; 0x140 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	35 c0       	rjmp	.+106    	; 0x140 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	33 c0       	rjmp	.+102    	; 0x140 <__bad_interrupt>
      da:	00 00       	nop
      dc:	31 c0       	rjmp	.+98     	; 0x140 <__bad_interrupt>
      de:	00 00       	nop
      e0:	2f c0       	rjmp	.+94     	; 0x140 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	09 06       	cpc	r0, r25
      e6:	ef 05       	cpc	r30, r15
      e8:	09 06       	cpc	r0, r25
      ea:	18 06       	cpc	r1, r24
      ec:	bd 06       	cpc	r11, r29
      ee:	27 06       	cpc	r2, r23
      f0:	e0 05       	cpc	r30, r0
      f2:	10 07       	cpc	r17, r16
      f4:	45 07       	cpc	r20, r21
      f6:	e7 07       	cpc	r30, r23
      f8:	e9 07       	cpc	r30, r25
      fa:	1f 08       	sbc	r1, r15
      fc:	96 08       	sbc	r9, r6

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d1 e2       	ldi	r29, 0x21	; 33
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0c bf       	out	0x3c, r16	; 60

0000010e <__do_copy_data>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a0 e0       	ldi	r26, 0x00	; 0
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	e6 ec       	ldi	r30, 0xC6	; 198
     116:	ff e1       	ldi	r31, 0x1F	; 31
     118:	00 e0       	ldi	r16, 0x00	; 0
     11a:	0b bf       	out	0x3b, r16	; 59
     11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x14>
     11e:	07 90       	elpm	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	aa 32       	cpi	r26, 0x2A	; 42
     124:	b1 07       	cpc	r27, r17
     126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0x10>

00000128 <__do_clear_bss>:
     128:	27 e1       	ldi	r18, 0x17	; 23
     12a:	aa e2       	ldi	r26, 0x2A	; 42
     12c:	b2 e0       	ldi	r27, 0x02	; 2
     12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
     130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
     132:	a4 30       	cpi	r26, 0x04	; 4
     134:	b2 07       	cpc	r27, r18
     136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>
     138:	0e 94 1b 0b 	call	0x1636	; 0x1636 <main>
     13c:	0c 94 e1 0f 	jmp	0x1fc2	; 0x1fc2 <_exit>

00000140 <__bad_interrupt>:
     140:	5f cf       	rjmp	.-322    	; 0x0 <__vectors>

00000142 <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
     142:	0f 92       	push	r0
     144:	1f 92       	push	r1
     146:	2f 92       	push	r2
     148:	3f 92       	push	r3
     14a:	4f 92       	push	r4
     14c:	5f 92       	push	r5
     14e:	6f 92       	push	r6
     150:	7f 92       	push	r7
     152:	8f 92       	push	r8
     154:	9f 92       	push	r9
     156:	af 92       	push	r10
     158:	bf 92       	push	r11
     15a:	cf 92       	push	r12
     15c:	df 92       	push	r13
     15e:	ef 92       	push	r14
     160:	ff 92       	push	r15
     162:	0f 93       	push	r16
     164:	1f 93       	push	r17
     166:	2f 93       	push	r18
     168:	3f 93       	push	r19
     16a:	4f 93       	push	r20
     16c:	5f 93       	push	r21
     16e:	6f 93       	push	r22
     170:	7f 93       	push	r23
     172:	8f 93       	push	r24
     174:	9f 93       	push	r25
     176:	af 93       	push	r26
     178:	bf 93       	push	r27
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	ef 93       	push	r30
     180:	ff 93       	push	r31
     182:	0f b7       	in	r16, 0x3f	; 63
     184:	0f 93       	push	r16
     186:	fc b7       	in	r31, 0x3c	; 60
     188:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
     18a:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     18c:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
     18e:	e0 93 01 17 	sts	0x1701, r30
        sts  KernelSp+1, r31
     192:	f0 93 02 17 	sts	0x1702, r31
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
     196:	e0 91 df 16 	lds	r30, 0x16DF
        lds  r31, CurrentSp+1
     19a:	f0 91 e0 16 	lds	r31, 0x16E0
        out  SPL, r30
     19e:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     1a0:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
     1a2:	ff 91       	pop	r31
     1a4:	fc bf       	out	0x3c, r31	; 60
     1a6:	0f 91       	pop	r16
     1a8:	0f bf       	out	0x3f, r16	; 63
     1aa:	ff 91       	pop	r31
     1ac:	ef 91       	pop	r30
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	bf 91       	pop	r27
     1b4:	af 91       	pop	r26
     1b6:	9f 91       	pop	r25
     1b8:	8f 91       	pop	r24
     1ba:	7f 91       	pop	r23
     1bc:	6f 91       	pop	r22
     1be:	5f 91       	pop	r21
     1c0:	4f 91       	pop	r20
     1c2:	3f 91       	pop	r19
     1c4:	2f 91       	pop	r18
     1c6:	1f 91       	pop	r17
     1c8:	0f 91       	pop	r16
     1ca:	ff 90       	pop	r15
     1cc:	ef 90       	pop	r14
     1ce:	df 90       	pop	r13
     1d0:	cf 90       	pop	r12
     1d2:	bf 90       	pop	r11
     1d4:	af 90       	pop	r10
     1d6:	9f 90       	pop	r9
     1d8:	8f 90       	pop	r8
     1da:	7f 90       	pop	r7
     1dc:	6f 90       	pop	r6
     1de:	5f 90       	pop	r5
     1e0:	4f 90       	pop	r4
     1e2:	3f 90       	pop	r3
     1e4:	2f 90       	pop	r2
     1e6:	1f 90       	pop	r1
     1e8:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
     1ea:	18 95       	reti

000001ec <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
     1ec:	0f 92       	push	r0
     1ee:	1f 92       	push	r1
     1f0:	2f 92       	push	r2
     1f2:	3f 92       	push	r3
     1f4:	4f 92       	push	r4
     1f6:	5f 92       	push	r5
     1f8:	6f 92       	push	r6
     1fa:	7f 92       	push	r7
     1fc:	8f 92       	push	r8
     1fe:	9f 92       	push	r9
     200:	af 92       	push	r10
     202:	bf 92       	push	r11
     204:	cf 92       	push	r12
     206:	df 92       	push	r13
     208:	ef 92       	push	r14
     20a:	ff 92       	push	r15
     20c:	0f 93       	push	r16
     20e:	1f 93       	push	r17
     210:	2f 93       	push	r18
     212:	3f 93       	push	r19
     214:	4f 93       	push	r20
     216:	5f 93       	push	r21
     218:	6f 93       	push	r22
     21a:	7f 93       	push	r23
     21c:	8f 93       	push	r24
     21e:	9f 93       	push	r25
     220:	af 93       	push	r26
     222:	bf 93       	push	r27
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	ef 93       	push	r30
     22a:	ff 93       	push	r31
     22c:	0f b7       	in	r16, 0x3f	; 63
     22e:	0f 93       	push	r16
     230:	fc b7       	in	r31, 0x3c	; 60
     232:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
     234:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     236:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
     238:	e0 93 df 16 	sts	0x16DF, r30
        sts  CurrentSp+1, r31
     23c:	f0 93 e0 16 	sts	0x16E0, r31
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
     240:	e0 91 01 17 	lds	r30, 0x1701
        lds  r31, KernelSp+1
     244:	f0 91 02 17 	lds	r31, 0x1702
        out  SPL, r30
     248:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     24a:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
     24c:	ff 91       	pop	r31
     24e:	fc bf       	out	0x3c, r31	; 60
     250:	0f 91       	pop	r16
     252:	0f bf       	out	0x3f, r16	; 63
     254:	ff 91       	pop	r31
     256:	ef 91       	pop	r30
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	bf 91       	pop	r27
     25e:	af 91       	pop	r26
     260:	9f 91       	pop	r25
     262:	8f 91       	pop	r24
     264:	7f 91       	pop	r23
     266:	6f 91       	pop	r22
     268:	5f 91       	pop	r21
     26a:	4f 91       	pop	r20
     26c:	3f 91       	pop	r19
     26e:	2f 91       	pop	r18
     270:	1f 91       	pop	r17
     272:	0f 91       	pop	r16
     274:	ff 90       	pop	r15
     276:	ef 90       	pop	r14
     278:	df 90       	pop	r13
     27a:	cf 90       	pop	r12
     27c:	bf 90       	pop	r11
     27e:	af 90       	pop	r10
     280:	9f 90       	pop	r9
     282:	8f 90       	pop	r8
     284:	7f 90       	pop	r7
     286:	6f 90       	pop	r6
     288:	5f 90       	pop	r5
     28a:	4f 90       	pop	r4
     28c:	3f 90       	pop	r3
     28e:	2f 90       	pop	r2
     290:	1f 90       	pop	r1
     292:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
     294:	08 95       	ret

00000296 <adc_init>:

// initialize adc
void adc_init()
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
     296:	80 e4       	ldi	r24, 0x40	; 64
     298:	80 93 7c 00 	sts	0x007C, r24
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     29c:	87 e8       	ldi	r24, 0x87	; 135
     29e:	80 93 7a 00 	sts	0x007A, r24
     2a2:	08 95       	ret

000002a4 <adc_read>:
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     2a4:	ec e7       	ldi	r30, 0x7C	; 124
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	90 81       	ld	r25, Z
uint16_t adc_read(uint8_t ch)
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
     2aa:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     2ac:	98 7f       	andi	r25, 0xF8	; 248
     2ae:	89 2b       	or	r24, r25
     2b0:	80 83       	st	Z, r24
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
     2b2:	ea e7       	ldi	r30, 0x7A	; 122
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	80 81       	ld	r24, Z
     2b8:	80 64       	ori	r24, 0x40	; 64
     2ba:	80 83       	st	Z, r24
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
     2bc:	80 81       	ld	r24, Z
     2be:	86 fd       	sbrc	r24, 6
     2c0:	fd cf       	rjmp	.-6      	; 0x2bc <adc_read+0x18>
	
	return (ADC);
     2c2:	80 91 78 00 	lds	r24, 0x0078
     2c6:	90 91 79 00 	lds	r25, 0x0079
}
     2ca:	08 95       	ret

000002cc <radio_rxhandler>:
	return 0;
}

void radio_rxhandler(uint8_t pipenumber)
{
	rxflag = 1;
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	80 93 2a 02 	sts	0x022A, r24
	PORTL ^= _BV(PL7);
     2d2:	eb e0       	ldi	r30, 0x0B	; 11
     2d4:	f1 e0       	ldi	r31, 0x01	; 1
     2d6:	80 81       	ld	r24, Z
     2d8:	80 58       	subi	r24, 0x80	; 128
     2da:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2dc:	83 ed       	ldi	r24, 0xD3	; 211
     2de:	90 e3       	ldi	r25, 0x30	; 48
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <radio_rxhandler+0x14>
     2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <radio_rxhandler+0x1a>
     2e6:	00 00       	nop
	_delay_ms(50);
	PORTL ^= _BV(PL7);
     2e8:	80 81       	ld	r24, Z
     2ea:	80 58       	subi	r24, 0x80	; 128
     2ec:	80 83       	st	Z, r24
     2ee:	08 95       	ret

000002f0 <lcd_nibble>:
uint8_t lcd_pos = LCD_LINE1;


static void lcd_nibble( uint8_t d )
{
  LCD_D7 = 0; if( d & 1<<7 ) LCD_D7 = 1;
     2f0:	e2 e0       	ldi	r30, 0x02	; 2
     2f2:	f1 e0       	ldi	r31, 0x01	; 1
     2f4:	90 81       	ld	r25, Z
     2f6:	9f 7e       	andi	r25, 0xEF	; 239
     2f8:	90 83       	st	Z, r25
     2fa:	88 23       	and	r24, r24
     2fc:	1c f4       	brge	.+6      	; 0x304 <lcd_nibble+0x14>
     2fe:	90 81       	ld	r25, Z
     300:	90 61       	ori	r25, 0x10	; 16
     302:	90 83       	st	Z, r25
  LCD_D6 = 0; if( d & 1<<6 ) LCD_D6 = 1;
     304:	e2 e0       	ldi	r30, 0x02	; 2
     306:	f1 e0       	ldi	r31, 0x01	; 1
     308:	90 81       	ld	r25, Z
     30a:	97 7f       	andi	r25, 0xF7	; 247
     30c:	90 83       	st	Z, r25
     30e:	86 ff       	sbrs	r24, 6
     310:	03 c0       	rjmp	.+6      	; 0x318 <lcd_nibble+0x28>
     312:	90 81       	ld	r25, Z
     314:	98 60       	ori	r25, 0x08	; 8
     316:	90 83       	st	Z, r25
  LCD_D5 = 0; if( d & 1<<5 ) LCD_D5 = 1;
     318:	73 98       	cbi	0x0e, 3	; 14
     31a:	85 fd       	sbrc	r24, 5
     31c:	73 9a       	sbi	0x0e, 3	; 14
  LCD_D4 = 0; if( d & 1<<4 ) LCD_D4 = 1;
     31e:	a5 98       	cbi	0x14, 5	; 20
     320:	84 fd       	sbrc	r24, 4
     322:	a5 9a       	sbi	0x14, 5	; 20
  LCD_E0 = 1;
     324:	e2 e0       	ldi	r30, 0x02	; 2
     326:	f1 e0       	ldi	r31, 0x01	; 1
     328:	80 81       	ld	r24, Z
     32a:	80 64       	ori	r24, 0x40	; 64
     32c:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     32e:	85 e0       	ldi	r24, 0x05	; 5
     330:	8a 95       	dec	r24
     332:	f1 f7       	brne	.-4      	; 0x330 <lcd_nibble+0x40>
     334:	00 00       	nop
  _delay_us( LCD_TIME_ENA );
  LCD_E0 = 0;
     336:	80 81       	ld	r24, Z
     338:	8f 7b       	andi	r24, 0xBF	; 191
     33a:	80 83       	st	Z, r24
     33c:	08 95       	ret

0000033e <lcd_command>:
  _delay_us( LCD_TIME_DAT );
}


void lcd_command( uint8_t d )
{
     33e:	cf 93       	push	r28
     340:	c8 2f       	mov	r28, r24
  LCD_RS = 0;
     342:	e2 e0       	ldi	r30, 0x02	; 2
     344:	f1 e0       	ldi	r31, 0x01	; 1
     346:	80 81       	ld	r24, Z
     348:	8f 7d       	andi	r24, 0xDF	; 223
     34a:	80 83       	st	Z, r24
}
		

static void lcd_byte( uint8_t d )
{
  lcd_nibble( d );
     34c:	8c 2f       	mov	r24, r28
     34e:	d0 df       	rcall	.-96     	; 0x2f0 <lcd_nibble>
  lcd_nibble( d<<4 );
     350:	8c 2f       	mov	r24, r28
     352:	82 95       	swap	r24
     354:	80 7f       	andi	r24, 0xF0	; 240
     356:	cc df       	rcall	.-104    	; 0x2f0 <lcd_nibble>
     358:	87 ec       	ldi	r24, 0xC7	; 199
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	01 97       	sbiw	r24, 0x01	; 1
     35e:	f1 f7       	brne	.-4      	; 0x35c <lcd_command+0x1e>
     360:	00 c0       	rjmp	.+0      	; 0x362 <lcd_command+0x24>
     362:	00 00       	nop

void lcd_command( uint8_t d )
{
  LCD_RS = 0;
  lcd_byte( d );
  switch( d ){
     364:	c4 30       	cpi	r28, 0x04	; 4
     366:	18 f0       	brcs	.+6      	; 0x36e <lcd_command+0x30>
     368:	c0 38       	cpi	r28, 0x80	; 128
     36a:	50 f0       	brcs	.+20     	; 0x380 <lcd_command+0x42>
     36c:	07 c0       	rjmp	.+14     	; 0x37c <lcd_command+0x3e>
     36e:	8f e3       	ldi	r24, 0x3F	; 63
     370:	9f e1       	ldi	r25, 0x1F	; 31
     372:	01 97       	sbiw	r24, 0x01	; 1
     374:	f1 f7       	brne	.-4      	; 0x372 <lcd_command+0x34>
     376:	00 c0       	rjmp	.+0      	; 0x378 <lcd_command+0x3a>
     378:	00 00       	nop
    case 0 ... 3:                       // on longer commands
      _delay_us( LCD_TIME_CLR );
      d = LCD_LINE1;
     37a:	c0 e8       	ldi	r28, 0x80	; 128
    case 0x80 ... 0xFF:                 // set position
      lcd_pos = d;
     37c:	c0 93 00 02 	sts	0x0200, r28
  }
}
     380:	cf 91       	pop	r28
     382:	08 95       	ret

00000384 <lcd_putchar>:


void lcd_putchar( uint8_t d )
{
     384:	cf 93       	push	r28
     386:	c8 2f       	mov	r28, r24
  LCD_RS = 1;
     388:	e2 e0       	ldi	r30, 0x02	; 2
     38a:	f1 e0       	ldi	r31, 0x01	; 1
     38c:	80 81       	ld	r24, Z
     38e:	80 62       	ori	r24, 0x20	; 32
     390:	80 83       	st	Z, r24
}
		

static void lcd_byte( uint8_t d )
{
  lcd_nibble( d );
     392:	8c 2f       	mov	r24, r28
     394:	ad df       	rcall	.-166    	; 0x2f0 <lcd_nibble>
  lcd_nibble( d<<4 );
     396:	8c 2f       	mov	r24, r28
     398:	82 95       	swap	r24
     39a:	80 7f       	andi	r24, 0xF0	; 240
     39c:	a9 df       	rcall	.-174    	; 0x2f0 <lcd_nibble>
     39e:	87 ec       	ldi	r24, 0xC7	; 199
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	01 97       	sbiw	r24, 0x01	; 1
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <lcd_putchar+0x1e>
     3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <lcd_putchar+0x24>
     3a8:	00 00       	nop

void lcd_putchar( uint8_t d )
{
  LCD_RS = 1;
  lcd_byte( d );
  switch( ++lcd_pos ){
     3aa:	80 91 00 02 	lds	r24, 0x0200
     3ae:	8f 5f       	subi	r24, 0xFF	; 255
     3b0:	80 93 00 02 	sts	0x0200, r24
     3b4:	80 39       	cpi	r24, 0x90	; 144
     3b6:	21 f0       	breq	.+8      	; 0x3c0 <lcd_putchar+0x3c>
     3b8:	80 3d       	cpi	r24, 0xD0	; 208
     3ba:	21 f4       	brne	.+8      	; 0x3c4 <lcd_putchar+0x40>
      break;
    case LCD_LINE4 + LCD_COLUMN:
#endif
#endif
#endif
      d = LCD_LINE1;
     3bc:	80 e8       	ldi	r24, 0x80	; 128
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <lcd_putchar+0x3e>
  LCD_RS = 1;
  lcd_byte( d );
  switch( ++lcd_pos ){
    case LCD_LINE1 + LCD_COLUMN:
#ifdef LCD_LINE2
      d = LCD_LINE2;
     3c0:	80 ec       	ldi	r24, 0xC0	; 192
      d = LCD_LINE1;
      break;
    default: 
      return;
  }
  lcd_command( d );
     3c2:	bd df       	rcall	.-134    	; 0x33e <lcd_command>
}
     3c4:	cf 91       	pop	r28
     3c6:	08 95       	ret

000003c8 <lcd_puts>:


void lcd_puts( void *s )                        // display string from SRAM
{
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	ec 01       	movw	r28, r24
  for( uint8_t *s1 = s; *s1; s1++ )             // until zero byte
     3ce:	88 81       	ld	r24, Y
     3d0:	88 23       	and	r24, r24
     3d2:	29 f0       	breq	.+10     	; 0x3de <lcd_puts+0x16>
     3d4:	21 96       	adiw	r28, 0x01	; 1
    lcd_putchar( *s1 );
     3d6:	d6 df       	rcall	.-84     	; 0x384 <lcd_putchar>
}


void lcd_puts( void *s )                        // display string from SRAM
{
  for( uint8_t *s1 = s; *s1; s1++ )             // until zero byte
     3d8:	89 91       	ld	r24, Y+
     3da:	81 11       	cpse	r24, r1
     3dc:	fc cf       	rjmp	.-8      	; 0x3d6 <lcd_puts+0xe>
    lcd_putchar( *s1 );
}
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	08 95       	ret

000003e4 <lcd_blank>:


void lcd_blank( uint8_t len )                   // blank n digits
{
     3e4:	cf 93       	push	r28
  while( len-- )
     3e6:	88 23       	and	r24, r24
     3e8:	29 f0       	breq	.+10     	; 0x3f4 <lcd_blank+0x10>
     3ea:	c8 2f       	mov	r28, r24
    lcd_putchar( ' ' );
     3ec:	80 e2       	ldi	r24, 0x20	; 32
     3ee:	ca df       	rcall	.-108    	; 0x384 <lcd_putchar>
     3f0:	c1 50       	subi	r28, 0x01	; 1
}


void lcd_blank( uint8_t len )                   // blank n digits
{
  while( len-- )
     3f2:	e1 f7       	brne	.-8      	; 0x3ec <lcd_blank+0x8>
    lcd_putchar( ' ' );
}
     3f4:	cf 91       	pop	r28
     3f6:	08 95       	ret

000003f8 <lcd_init>:


void lcd_init( void )
{
  LCD_DDR_D4 = 1;                               // enable output pins
     3f8:	9d 9a       	sbi	0x13, 5	; 19
  LCD_DDR_D5 = 1;
     3fa:	6b 9a       	sbi	0x0d, 3	; 13
  LCD_DDR_D6 = 1;
     3fc:	e1 e0       	ldi	r30, 0x01	; 1
     3fe:	f1 e0       	ldi	r31, 0x01	; 1
     400:	80 81       	ld	r24, Z
     402:	88 60       	ori	r24, 0x08	; 8
     404:	80 83       	st	Z, r24
  LCD_DDR_D7 = 1;
     406:	80 81       	ld	r24, Z
     408:	80 61       	ori	r24, 0x10	; 16
     40a:	80 83       	st	Z, r24
  LCD_DDR_RS = 1;
     40c:	80 81       	ld	r24, Z
     40e:	80 62       	ori	r24, 0x20	; 32
     410:	80 83       	st	Z, r24
  LCD_DDR_E0 = 1;
     412:	80 81       	ld	r24, Z
     414:	80 64       	ori	r24, 0x40	; 64
     416:	80 83       	st	Z, r24
  LCD_E0 = 0;
     418:	e2 e0       	ldi	r30, 0x02	; 2
     41a:	f1 e0       	ldi	r31, 0x01	; 1
     41c:	80 81       	ld	r24, Z
     41e:	8f 7b       	andi	r24, 0xBF	; 191
     420:	80 83       	st	Z, r24
  LCD_RS = 0;                                   // send commands
     422:	80 81       	ld	r24, Z
     424:	8f 7d       	andi	r24, 0xDF	; 223
     426:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     428:	8f e5       	ldi	r24, 0x5F	; 95
     42a:	9a ee       	ldi	r25, 0xEA	; 234
     42c:	01 97       	sbiw	r24, 0x01	; 1
     42e:	f1 f7       	brne	.-4      	; 0x42c <lcd_init+0x34>
     430:	00 c0       	rjmp	.+0      	; 0x432 <lcd_init+0x3a>
     432:	00 00       	nop

  _delay_ms( 15 );
  lcd_nibble( 0x30 );
     434:	80 e3       	ldi	r24, 0x30	; 48
     436:	5c df       	rcall	.-328    	; 0x2f0 <lcd_nibble>
     438:	8f e0       	ldi	r24, 0x0F	; 15
     43a:	90 e4       	ldi	r25, 0x40	; 64
     43c:	01 97       	sbiw	r24, 0x01	; 1
     43e:	f1 f7       	brne	.-4      	; 0x43c <lcd_init+0x44>
     440:	00 c0       	rjmp	.+0      	; 0x442 <lcd_init+0x4a>
     442:	00 00       	nop
  _delay_ms( 4.1 );
  lcd_nibble( 0x30 );
     444:	80 e3       	ldi	r24, 0x30	; 48
     446:	54 df       	rcall	.-344    	; 0x2f0 <lcd_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     448:	8f e8       	ldi	r24, 0x8F	; 143
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	01 97       	sbiw	r24, 0x01	; 1
     44e:	f1 f7       	brne	.-4      	; 0x44c <lcd_init+0x54>
     450:	00 c0       	rjmp	.+0      	; 0x452 <lcd_init+0x5a>
     452:	00 00       	nop
  _delay_us( 100 );
  lcd_nibble( 0x30 );
     454:	80 e3       	ldi	r24, 0x30	; 48
     456:	4c df       	rcall	.-360    	; 0x2f0 <lcd_nibble>
     458:	87 ec       	ldi	r24, 0xC7	; 199
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <lcd_init+0x64>
     460:	00 c0       	rjmp	.+0      	; 0x462 <lcd_init+0x6a>
     462:	00 00       	nop
  _delay_us( LCD_TIME_DAT );
  lcd_nibble( 0x20 );                           // 4 bit mode
     464:	80 e2       	ldi	r24, 0x20	; 32
     466:	44 df       	rcall	.-376    	; 0x2f0 <lcd_nibble>
     468:	87 ec       	ldi	r24, 0xC7	; 199
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	01 97       	sbiw	r24, 0x01	; 1
     46e:	f1 f7       	brne	.-4      	; 0x46c <lcd_init+0x74>
     470:	00 c0       	rjmp	.+0      	; 0x472 <lcd_init+0x7a>
     472:	00 00       	nop
  _delay_us( LCD_TIME_DAT );
#if LCD_LINE == 1
  lcd_command( 0x20 );                          // 1 line
#else
  lcd_command( 0x28 );                          // 2 lines 5*7
     474:	88 e2       	ldi	r24, 0x28	; 40
     476:	63 df       	rcall	.-314    	; 0x33e <lcd_command>
#endif
  lcd_command( 0x08 );                          // display off
     478:	88 e0       	ldi	r24, 0x08	; 8
     47a:	61 df       	rcall	.-318    	; 0x33e <lcd_command>
  lcd_command( 0x01 );                          // display clear
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	5f df       	rcall	.-322    	; 0x33e <lcd_command>
  lcd_command( 0x06 );                          // cursor increment
     480:	86 e0       	ldi	r24, 0x06	; 6
     482:	5d df       	rcall	.-326    	; 0x33e <lcd_command>
  lcd_command( 0x0C );                          // on, no cursor, no blink
     484:	8c e0       	ldi	r24, 0x0C	; 12
     486:	5b cf       	rjmp	.-330    	; 0x33e <lcd_command>
     488:	08 95       	ret

0000048a <init_LED_PORTL_pin0>:
void init_LED_PORTL_pin6(void) {
    DDRL |= _BV(DDL6);
}

void init_LED_PORTL_pin7(void) {
    DDRL |= _BV(DDL7);
     48a:	ea e0       	ldi	r30, 0x0A	; 10
     48c:	f1 e0       	ldi	r31, 0x01	; 1
     48e:	80 81       	ld	r24, Z
     490:	81 60       	ori	r24, 0x01	; 1
     492:	80 83       	st	Z, r24
     494:	08 95       	ret

00000496 <init_LED_PORTL_pin1>:
     496:	ea e0       	ldi	r30, 0x0A	; 10
     498:	f1 e0       	ldi	r31, 0x01	; 1
     49a:	80 81       	ld	r24, Z
     49c:	82 60       	ori	r24, 0x02	; 2
     49e:	80 83       	st	Z, r24
     4a0:	08 95       	ret

000004a2 <init_LED_PORTL_pin2>:
     4a2:	ea e0       	ldi	r30, 0x0A	; 10
     4a4:	f1 e0       	ldi	r31, 0x01	; 1
     4a6:	80 81       	ld	r24, Z
     4a8:	84 60       	ori	r24, 0x04	; 4
     4aa:	80 83       	st	Z, r24
     4ac:	08 95       	ret

000004ae <init_LED_PORTL_pin5>:
     4ae:	ea e0       	ldi	r30, 0x0A	; 10
     4b0:	f1 e0       	ldi	r31, 0x01	; 1
     4b2:	80 81       	ld	r24, Z
     4b4:	80 62       	ori	r24, 0x20	; 32
     4b6:	80 83       	st	Z, r24
     4b8:	08 95       	ret

000004ba <init_LED_PORTL_pin6>:
     4ba:	ea e0       	ldi	r30, 0x0A	; 10
     4bc:	f1 e0       	ldi	r31, 0x01	; 1
     4be:	80 81       	ld	r24, Z
     4c0:	80 64       	ori	r24, 0x40	; 64
     4c2:	80 83       	st	Z, r24
     4c4:	08 95       	ret

000004c6 <enable_LED>:
}

void enable_LED(unsigned int mask) {
    PORTL |= _BV(mask);
     4c6:	eb e0       	ldi	r30, 0x0B	; 11
     4c8:	f1 e0       	ldi	r31, 0x01	; 1
     4ca:	90 81       	ld	r25, Z
     4cc:	21 e0       	ldi	r18, 0x01	; 1
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <enable_LED+0x10>
     4d2:	22 0f       	add	r18, r18
     4d4:	33 1f       	adc	r19, r19
     4d6:	8a 95       	dec	r24
     4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <enable_LED+0xc>
     4da:	29 2b       	or	r18, r25
     4dc:	20 83       	st	Z, r18
     4de:	08 95       	ret

000004e0 <disable_LED>:
}

void disable_LED(unsigned int mask) {
    PORTL &= ~_BV(mask);
     4e0:	eb e0       	ldi	r30, 0x0B	; 11
     4e2:	f1 e0       	ldi	r31, 0x01	; 1
     4e4:	90 81       	ld	r25, Z
     4e6:	21 e0       	ldi	r18, 0x01	; 1
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <disable_LED+0x10>
     4ec:	22 0f       	add	r18, r18
     4ee:	33 1f       	adc	r19, r19
     4f0:	8a 95       	dec	r24
     4f2:	e2 f7       	brpl	.-8      	; 0x4ec <disable_LED+0xc>
     4f4:	20 95       	com	r18
     4f6:	29 23       	and	r18, r25
     4f8:	20 83       	st	Z, r18
     4fa:	08 95       	ret

000004fc <Init_Task>:
	//uart0_init(UART_19200);
	
	//uart0_putc(148);
	//uart0_putc(1);
	//uart0_putc(13);
	Roomba_PlaySong(2);
     4fc:	21 9a       	sbi	0x04, 1	; 4
     4fe:	29 9a       	sbi	0x05, 1	; 5
     500:	88 e0       	ldi	r24, 0x08	; 8
     502:	70 df       	rcall	.-288    	; 0x3e4 <lcd_blank>
     504:	80 e1       	ldi	r24, 0x10	; 16
     506:	92 e0       	ldi	r25, 0x02	; 2
     508:	5f df       	rcall	.-322    	; 0x3c8 <lcd_puts>
     50a:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <Roomba_Init>
     50e:	08 95       	ret

00000510 <a_main>:

// Application level main function
// Creates the required tasks and then terminates
void a_main() {
	char line[16];
	portL2_Mutex = Mutex_Init();
     510:	0e d7       	rcall	.+3612   	; 0x132e <Mutex_Init>
     512:	90 93 94 16 	sts	0x1694, r25
     516:	80 93 93 16 	sts	0x1693, r24
	portL6_Mutex = Mutex_Init();
     51a:	09 d7       	rcall	.+3602   	; 0x132e <Mutex_Init>
     51c:	90 93 9a 16 	sts	0x169A, r25
     520:	80 93 99 16 	sts	0x1699, r24
	uint16_t adc_test;
	e1 = Event_Init();
     524:	1f d7       	rcall	.+3646   	; 0x1364 <Event_Init>
     526:	90 93 9e 16 	sts	0x169E, r25
     52a:	80 93 9d 16 	sts	0x169D, r24
	e2 = Event_Init();
     52e:	1a d7       	rcall	.+3636   	; 0x1364 <Event_Init>
     530:	90 93 98 16 	sts	0x1698, r25
     534:	80 93 97 16 	sts	0x1697, r24
	adc_init();
     538:	ae de       	rcall	.-676    	; 0x296 <adc_init>
	
	//PongPID = Task_Create(Pong, 8, 1);
	//PingPID = Task_Create(Ping, 8, 1);
	//IdlePID = Task_Create(Idle, MINPRIORITY, 1);
	lcd_init(); // initialized the LCD
     53a:	5e df       	rcall	.-324    	; 0x3f8 <lcd_init>
	DDRB |= (1<<DDB4); // enable output mode of Digital Pin 10 (PORTB Pin 4) for backlit control
     53c:	24 9a       	sbi	0x04, 4	; 4
	PORTB |= (1<<DDB4); // enable back light
     53e:	2c 9a       	sbi	0x05, 4	; 5
	adc_test = adc_read(7);
     540:	87 e0       	ldi	r24, 0x07	; 7
     542:	b0 de       	rcall	.-672    	; 0x2a4 <adc_read>
	//sprintf(line, "ADC: %4d", adc_test);
	//lcd_puts(line);
	
	
	Init_Task();
     544:	db df       	rcall	.-74     	; 0x4fc <Init_Task>
	Roomba_Drive(100, 0x8000);
     546:	60 e0       	ldi	r22, 0x00	; 0
     548:	70 e8       	ldi	r23, 0x80	; 128
     54a:	84 e6       	ldi	r24, 0x64	; 100
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <Roomba_Drive>
	//Poll_Roomba_Data();
	
	for (;;)
	{
		Roomba_PlaySong(1);
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <Roomba_PlaySong>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     55a:	2f ef       	ldi	r18, 0xFF	; 255
     55c:	83 ec       	ldi	r24, 0xC3	; 195
     55e:	99 e0       	ldi	r25, 0x09	; 9
     560:	21 50       	subi	r18, 0x01	; 1
     562:	80 40       	sbci	r24, 0x00	; 0
     564:	90 40       	sbci	r25, 0x00	; 0
     566:	e1 f7       	brne	.-8      	; 0x560 <a_main+0x50>
     568:	00 c0       	rjmp	.+0      	; 0x56a <a_main+0x5a>
     56a:	00 00       	nop
		_delay_ms(200);
		PORTB &= ~(1<<PB1);
     56c:	29 98       	cbi	0x05, 1	; 5
     56e:	2f ef       	ldi	r18, 0xFF	; 255
     570:	83 ec       	ldi	r24, 0xC3	; 195
     572:	99 e0       	ldi	r25, 0x09	; 9
     574:	21 50       	subi	r18, 0x01	; 1
     576:	80 40       	sbci	r24, 0x00	; 0
     578:	90 40       	sbci	r25, 0x00	; 0
     57a:	e1 f7       	brne	.-8      	; 0x574 <a_main+0x64>
     57c:	00 c0       	rjmp	.+0      	; 0x57e <a_main+0x6e>
     57e:	00 00       	nop
		_delay_ms(200);
		PORTB |= (1<<PB1);
     580:	29 9a       	sbi	0x05, 1	; 5
	}
     582:	e7 cf       	rjmp	.-50     	; 0x552 <a_main+0x42>

00000584 <Task_Terminate>:
/**
  * Application level task getarg to return intiial arg value
  */
int Task_GetArg(PID p) {
	return (Cp->arg);
}
     584:	80 91 3b 02 	lds	r24, 0x023B
     588:	90 91 3c 02 	lds	r25, 0x023C
     58c:	89 2b       	or	r24, r25
     58e:	51 f0       	breq	.+20     	; 0x5a4 <Task_Terminate+0x20>
     590:	f8 94       	cli
     592:	e0 91 3d 02 	lds	r30, 0x023D
     596:	f0 91 3e 02 	lds	r31, 0x023E
     59a:	e3 5f       	subi	r30, 0xF3	; 243
     59c:	fe 4f       	sbci	r31, 0xFE	; 254
     59e:	84 e0       	ldi	r24, 0x04	; 4
     5a0:	80 83       	st	Z, r24
     5a2:	24 ce       	rjmp	.-952    	; 0x1ec <Enter_Kernel>
     5a4:	08 95       	ret

000005a6 <Kernel_Create_Task_At>:
     5a6:	ef 92       	push	r14
     5a8:	ff 92       	push	r15
     5aa:	0f 93       	push	r16
     5ac:	1f 93       	push	r17
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	1f 92       	push	r1
     5b4:	1f 92       	push	r1
     5b6:	cd b7       	in	r28, 0x3d	; 61
     5b8:	de b7       	in	r29, 0x3e	; 62
     5ba:	9a 83       	std	Y+2, r25	; 0x02
     5bc:	89 83       	std	Y+1, r24	; 0x01
     5be:	dc 01       	movw	r26, r24
     5c0:	7c 01       	movw	r14, r24
     5c2:	04 e0       	ldi	r16, 0x04	; 4
     5c4:	e0 0e       	add	r14, r16
     5c6:	f1 1c       	adc	r15, r1
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	f7 01       	movw	r30, r14
     5ce:	8c 01       	movw	r16, r24
     5d0:	11 92       	st	Z+, r1
     5d2:	01 50       	subi	r16, 0x01	; 1
     5d4:	10 40       	sbci	r17, 0x00	; 0
     5d6:	e1 f7       	brne	.-8      	; 0x5d0 <Kernel_Create_Task_At+0x2a>
     5d8:	fd 01       	movw	r30, r26
     5da:	ed 5f       	subi	r30, 0xFD	; 253
     5dc:	fe 4f       	sbci	r31, 0xFE	; 254
     5de:	82 ec       	ldi	r24, 0xC2	; 194
     5e0:	92 e0       	ldi	r25, 0x02	; 2
     5e2:	80 83       	st	Z, r24
     5e4:	31 97       	sbiw	r30, 0x01	; 1
     5e6:	90 83       	st	Z, r25
     5e8:	31 97       	sbiw	r30, 0x01	; 1
     5ea:	60 83       	st	Z, r22
     5ec:	31 97       	sbiw	r30, 0x01	; 1
     5ee:	70 83       	st	Z, r23
     5f0:	31 97       	sbiw	r30, 0x01	; 1
     5f2:	10 82       	st	Z, r1
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	92 93       	st	-Z, r25
     5f8:	9f 5f       	subi	r25, 0xFF	; 255
     5fa:	92 32       	cpi	r25, 0x22	; 34
     5fc:	e1 f7       	brne	.-8      	; 0x5f6 <Kernel_Create_Task_At+0x50>
     5fe:	a4 52       	subi	r26, 0x24	; 36
     600:	bf 4f       	sbci	r27, 0xFF	; 255
     602:	e9 81       	ldd	r30, Y+1	; 0x01
     604:	fa 81       	ldd	r31, Y+2	; 0x02
     606:	b3 83       	std	Z+3, r27	; 0x03
     608:	a2 83       	std	Z+2, r26	; 0x02
     60a:	df 01       	movw	r26, r30
     60c:	a5 5f       	subi	r26, 0xF5	; 245
     60e:	be 4f       	sbci	r27, 0xFE	; 254
     610:	11 96       	adiw	r26, 0x01	; 1
     612:	7c 93       	st	X, r23
     614:	6e 93       	st	-X, r22
     616:	12 96       	adiw	r26, 0x02	; 2
     618:	1c 92       	st	X, r1
     61a:	80 91 37 02 	lds	r24, 0x0237
     61e:	90 91 38 02 	lds	r25, 0x0238
     622:	91 83       	std	Z+1, r25	; 0x01
     624:	80 83       	st	Z, r24
     626:	89 81       	ldd	r24, Y+1	; 0x01
     628:	9a 81       	ldd	r25, Y+2	; 0x02
     62a:	fc 01       	movw	r30, r24
     62c:	eb 5f       	subi	r30, 0xFB	; 251
     62e:	fe 4f       	sbci	r31, 0xFE	; 254
     630:	51 83       	std	Z+1, r21	; 0x01
     632:	40 83       	st	Z, r20
     634:	32 96       	adiw	r30, 0x02	; 2
     636:	51 83       	std	Z+1, r21	; 0x01
     638:	40 83       	st	Z, r20
     63a:	32 96       	adiw	r30, 0x02	; 2
     63c:	31 83       	std	Z+1, r19	; 0x01
     63e:	20 83       	st	Z, r18
     640:	71 96       	adiw	r30, 0x11	; 17
     642:	11 82       	std	Z+1, r1	; 0x01
     644:	10 82       	st	Z, r1
     646:	34 97       	sbiw	r30, 0x04	; 4
     648:	23 e6       	ldi	r18, 0x63	; 99
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	31 83       	std	Z+1, r19	; 0x01
     64e:	20 83       	st	Z, r18
     650:	20 91 39 02 	lds	r18, 0x0239
     654:	30 91 3a 02 	lds	r19, 0x023A
     658:	2f 5f       	subi	r18, 0xFF	; 255
     65a:	3f 4f       	sbci	r19, 0xFF	; 255
     65c:	30 93 3a 02 	sts	0x023A, r19
     660:	20 93 39 02 	sts	0x0239, r18
     664:	20 91 37 02 	lds	r18, 0x0237
     668:	30 91 38 02 	lds	r19, 0x0238
     66c:	2f 5f       	subi	r18, 0xFF	; 255
     66e:	3f 4f       	sbci	r19, 0xFF	; 255
     670:	30 93 38 02 	sts	0x0238, r19
     674:	20 93 37 02 	sts	0x0237, r18
     678:	72 97       	sbiw	r30, 0x12	; 18
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	80 83       	st	Z, r24
     67e:	4f e2       	ldi	r20, 0x2F	; 47
     680:	52 e0       	ldi	r21, 0x02	; 2
     682:	6f eb       	ldi	r22, 0xBF	; 191
     684:	76 e1       	ldi	r23, 0x16	; 22
     686:	ce 01       	movw	r24, r28
     688:	01 96       	adiw	r24, 0x01	; 1
     68a:	0e 94 c7 0b 	call	0x178e	; 0x178e <enqueueRQ>
     68e:	e9 81       	ldd	r30, Y+1	; 0x01
     690:	fa 81       	ldd	r31, Y+2	; 0x02
     692:	80 81       	ld	r24, Z
     694:	91 81       	ldd	r25, Z+1	; 0x01
     696:	0f 90       	pop	r0
     698:	0f 90       	pop	r0
     69a:	df 91       	pop	r29
     69c:	cf 91       	pop	r28
     69e:	1f 91       	pop	r17
     6a0:	0f 91       	pop	r16
     6a2:	ff 90       	pop	r15
     6a4:	ef 90       	pop	r14
     6a6:	08 95       	ret

000006a8 <Kernel_Create_Task>:
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	ec 01       	movw	r28, r24
     6ae:	80 91 39 02 	lds	r24, 0x0239
     6b2:	90 91 3a 02 	lds	r25, 0x023A
     6b6:	40 97       	sbiw	r24, 0x10	; 16
     6b8:	21 f1       	breq	.+72     	; 0x702 <Kernel_Create_Task+0x5a>
     6ba:	80 91 a3 03 	lds	r24, 0x03A3
     6be:	88 23       	and	r24, r24
     6c0:	71 f0       	breq	.+28     	; 0x6de <Kernel_Create_Task+0x36>
     6c2:	a1 ec       	ldi	r26, 0xC1	; 193
     6c4:	b4 e0       	ldi	r27, 0x04	; 4
     6c6:	e1 e0       	ldi	r30, 0x01	; 1
     6c8:	f0 e0       	ldi	r31, 0x00	; 0
     6ca:	9c 91       	ld	r25, X
     6cc:	99 23       	and	r25, r25
     6ce:	49 f0       	breq	.+18     	; 0x6e2 <Kernel_Create_Task+0x3a>
     6d0:	31 96       	adiw	r30, 0x01	; 1
     6d2:	a2 5e       	subi	r26, 0xE2	; 226
     6d4:	be 4f       	sbci	r27, 0xFE	; 254
     6d6:	e0 31       	cpi	r30, 0x10	; 16
     6d8:	f1 05       	cpc	r31, r1
     6da:	b9 f7       	brne	.-18     	; 0x6ca <Kernel_Create_Task+0x22>
     6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <Kernel_Create_Task+0x3a>
     6de:	e0 e0       	ldi	r30, 0x00	; 0
     6e0:	f0 e0       	ldi	r31, 0x00	; 0
     6e2:	9a 01       	movw	r18, r20
     6e4:	ab 01       	movw	r20, r22
     6e6:	be 01       	movw	r22, r28
     6e8:	ae e1       	ldi	r26, 0x1E	; 30
     6ea:	b1 e0       	ldi	r27, 0x01	; 1
     6ec:	ea 9f       	mul	r30, r26
     6ee:	c0 01       	movw	r24, r0
     6f0:	eb 9f       	mul	r30, r27
     6f2:	90 0d       	add	r25, r0
     6f4:	fa 9f       	mul	r31, r26
     6f6:	90 0d       	add	r25, r0
     6f8:	11 24       	eor	r1, r1
     6fa:	81 56       	subi	r24, 0x61	; 97
     6fc:	9d 4f       	sbci	r25, 0xFD	; 253
     6fe:	53 df       	rcall	.-346    	; 0x5a6 <Kernel_Create_Task_At>
     700:	00 c0       	rjmp	.+0      	; 0x702 <Kernel_Create_Task+0x5a>
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	08 95       	ret

00000708 <Kernel_Init_Mutex_At>:
     708:	fc 01       	movw	r30, r24
     70a:	80 91 35 02 	lds	r24, 0x0235
     70e:	90 91 36 02 	lds	r25, 0x0236
     712:	91 83       	std	Z+1, r25	; 0x01
     714:	80 83       	st	Z, r24
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	82 83       	std	Z+2, r24	; 0x02
     71a:	80 91 35 02 	lds	r24, 0x0235
     71e:	90 91 36 02 	lds	r25, 0x0236
     722:	01 96       	adiw	r24, 0x01	; 1
     724:	90 93 36 02 	sts	0x0236, r25
     728:	80 93 35 02 	sts	0x0235, r24
     72c:	80 81       	ld	r24, Z
     72e:	91 81       	ldd	r25, Z+1	; 0x01
     730:	08 95       	ret

00000732 <Kernel_Init_Event_At>:
     732:	fc 01       	movw	r30, r24
     734:	80 91 33 02 	lds	r24, 0x0233
     738:	90 91 34 02 	lds	r25, 0x0234
     73c:	91 83       	std	Z+1, r25	; 0x01
     73e:	80 83       	st	Z, r24
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	82 83       	std	Z+2, r24	; 0x02
     744:	14 82       	std	Z+4, r1	; 0x04
     746:	13 82       	std	Z+3, r1	; 0x03
     748:	80 91 33 02 	lds	r24, 0x0233
     74c:	90 91 34 02 	lds	r25, 0x0234
     750:	01 96       	adiw	r24, 0x01	; 1
     752:	90 93 34 02 	sts	0x0234, r25
     756:	80 93 33 02 	sts	0x0233, r24
     75a:	80 81       	ld	r24, Z
     75c:	91 81       	ldd	r25, Z+1	; 0x01
     75e:	08 95       	ret

00000760 <OS_Init>:
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
     764:	10 92 3a 02 	sts	0x023A, r1
     768:	10 92 39 02 	sts	0x0239, r1
     76c:	10 92 3c 02 	sts	0x023C, r1
     770:	10 92 3b 02 	sts	0x023B, r1
     774:	10 92 36 02 	sts	0x0236, r1
     778:	10 92 35 02 	sts	0x0235, r1
     77c:	10 92 34 02 	sts	0x0234, r1
     780:	10 92 33 02 	sts	0x0233, r1
     784:	10 92 38 02 	sts	0x0238, r1
     788:	10 92 37 02 	sts	0x0237, r1
     78c:	ef e9       	ldi	r30, 0x9F	; 159
     78e:	f2 e0       	ldi	r31, 0x02	; 2
     790:	a3 ea       	ldi	r26, 0xA3	; 163
     792:	b3 e0       	ldi	r27, 0x03	; 3
     794:	4f e7       	ldi	r20, 0x7F	; 127
     796:	54 e1       	ldi	r21, 0x14	; 20
     798:	2e e1       	ldi	r18, 0x1E	; 30
     79a:	31 e0       	ldi	r19, 0x01	; 1
     79c:	83 e6       	ldi	r24, 0x63	; 99
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	ef 01       	movw	r28, r30
     7a2:	b9 01       	movw	r22, r18
     7a4:	19 92       	st	Y+, r1
     7a6:	61 50       	subi	r22, 0x01	; 1
     7a8:	70 40       	sbci	r23, 0x00	; 0
     7aa:	e1 f7       	brne	.-8      	; 0x7a4 <OS_Init+0x44>
     7ac:	1c 92       	st	X, r1
     7ae:	53 96       	adiw	r26, 0x13	; 19
     7b0:	9c 93       	st	X, r25
     7b2:	8e 93       	st	-X, r24
     7b4:	52 97       	sbiw	r26, 0x12	; 18
     7b6:	11 82       	std	Z+1, r1	; 0x01
     7b8:	10 82       	st	Z, r1
     7ba:	e2 5e       	subi	r30, 0xE2	; 226
     7bc:	fe 4f       	sbci	r31, 0xFE	; 254
     7be:	a2 5e       	subi	r26, 0xE2	; 226
     7c0:	be 4f       	sbci	r27, 0xFE	; 254
     7c2:	e4 17       	cp	r30, r20
     7c4:	f5 07       	cpc	r31, r21
     7c6:	61 f7       	brne	.-40     	; 0x7a0 <OS_Init+0x40>
     7c8:	e9 e6       	ldi	r30, 0x69	; 105
     7ca:	f2 e0       	ldi	r31, 0x02	; 2
     7cc:	21 ea       	ldi	r18, 0xA1	; 161
     7ce:	32 e0       	ldi	r19, 0x02	; 2
     7d0:	87 e0       	ldi	r24, 0x07	; 7
     7d2:	df 01       	movw	r26, r30
     7d4:	12 97       	sbiw	r26, 0x02	; 2
     7d6:	ed 01       	movw	r28, r26
     7d8:	68 2f       	mov	r22, r24
     7da:	19 92       	st	Y+, r1
     7dc:	6a 95       	dec	r22
     7de:	e9 f7       	brne	.-6      	; 0x7da <OS_Init+0x7a>
     7e0:	10 82       	st	Z, r1
     7e2:	37 96       	adiw	r30, 0x07	; 7
     7e4:	e2 17       	cp	r30, r18
     7e6:	f3 07       	cpc	r31, r19
     7e8:	a1 f7       	brne	.-24     	; 0x7d2 <OS_Init+0x72>
     7ea:	e1 e4       	ldi	r30, 0x41	; 65
     7ec:	f2 e0       	ldi	r31, 0x02	; 2
     7ee:	29 e6       	ldi	r18, 0x69	; 105
     7f0:	32 e0       	ldi	r19, 0x02	; 2
     7f2:	85 e0       	ldi	r24, 0x05	; 5
     7f4:	df 01       	movw	r26, r30
     7f6:	12 97       	sbiw	r26, 0x02	; 2
     7f8:	ed 01       	movw	r28, r26
     7fa:	68 2f       	mov	r22, r24
     7fc:	19 92       	st	Y+, r1
     7fe:	6a 95       	dec	r22
     800:	e9 f7       	brne	.-6      	; 0x7fc <OS_Init+0x9c>
     802:	10 82       	st	Z, r1
     804:	35 96       	adiw	r30, 0x05	; 5
     806:	e2 17       	cp	r30, r18
     808:	f3 07       	cpc	r31, r19
     80a:	a1 f7       	brne	.-24     	; 0x7f4 <OS_Init+0x94>
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	08 95       	ret

00000812 <OS_Abort>:
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <_exit>

0000081a <Dispatch>:
     81a:	6f e2       	ldi	r22, 0x2F	; 47
     81c:	72 e0       	ldi	r23, 0x02	; 2
     81e:	8f eb       	ldi	r24, 0xBF	; 191
     820:	96 e1       	ldi	r25, 0x16	; 22
     822:	0e 94 92 0c 	call	0x1924	; 0x1924 <dequeueRQ>
     826:	fc 01       	movw	r30, r24
     828:	90 93 3e 02 	sts	0x023E, r25
     82c:	80 93 3d 02 	sts	0x023D, r24
     830:	89 2b       	or	r24, r25
     832:	09 f4       	brne	.+2      	; 0x836 <Dispatch+0x1c>
     834:	ee df       	rcall	.-36     	; 0x812 <OS_Abort>
     836:	82 81       	ldd	r24, Z+2	; 0x02
     838:	93 81       	ldd	r25, Z+3	; 0x03
     83a:	90 93 e0 16 	sts	0x16E0, r25
     83e:	80 93 df 16 	sts	0x16DF, r24
     842:	82 e0       	ldi	r24, 0x02	; 2
     844:	df 01       	movw	r26, r30
     846:	ac 5f       	subi	r26, 0xFC	; 252
     848:	be 4f       	sbci	r27, 0xFE	; 254
     84a:	8c 93       	st	X, r24
     84c:	80 81       	ld	r24, Z
     84e:	91 81       	ldd	r25, Z+1	; 0x01
     850:	02 97       	sbiw	r24, 0x02	; 2
     852:	20 f4       	brcc	.+8      	; 0x85c <Dispatch+0x42>
     854:	82 e0       	ldi	r24, 0x02	; 2
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	36 ce       	rjmp	.-916    	; 0x4c6 <enable_LED>
     85a:	08 95       	ret
     85c:	80 81       	ld	r24, Z
     85e:	91 81       	ldd	r25, Z+1	; 0x01
     860:	02 97       	sbiw	r24, 0x02	; 2
     862:	21 f4       	brne	.+8      	; 0x86c <Dispatch+0x52>
     864:	85 e0       	ldi	r24, 0x05	; 5
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	2e ce       	rjmp	.-932    	; 0x4c6 <enable_LED>
     86a:	08 95       	ret
     86c:	80 81       	ld	r24, Z
     86e:	91 81       	ldd	r25, Z+1	; 0x01
     870:	03 97       	sbiw	r24, 0x03	; 3
     872:	19 f4       	brne	.+6      	; 0x87a <Dispatch+0x60>
     874:	86 e0       	ldi	r24, 0x06	; 6
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	26 ce       	rjmp	.-948    	; 0x4c6 <enable_LED>
     87a:	08 95       	ret

0000087c <Kernel_Unlock_Mutex>:
     87c:	0f 93       	push	r16
     87e:	1f 93       	push	r17
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
     884:	1f 92       	push	r1
     886:	1f 92       	push	r1
     888:	cd b7       	in	r28, 0x3d	; 61
     88a:	de b7       	in	r29, 0x3e	; 62
     88c:	a0 91 3d 02 	lds	r26, 0x023D
     890:	b0 91 3e 02 	lds	r27, 0x023E
     894:	fd 01       	movw	r30, r26
     896:	ec 5e       	subi	r30, 0xEC	; 236
     898:	fe 4f       	sbci	r31, 0xFE	; 254
     89a:	40 81       	ld	r20, Z
     89c:	51 81       	ldd	r21, Z+1	; 0x01
     89e:	e7 e6       	ldi	r30, 0x67	; 103
     8a0:	f2 e0       	ldi	r31, 0x02	; 2
     8a2:	00 e0       	ldi	r16, 0x00	; 0
     8a4:	10 e0       	ldi	r17, 0x00	; 0
     8a6:	80 81       	ld	r24, Z
     8a8:	91 81       	ldd	r25, Z+1	; 0x01
     8aa:	84 17       	cp	r24, r20
     8ac:	95 07       	cpc	r25, r21
     8ae:	39 f0       	breq	.+14     	; 0x8be <Kernel_Unlock_Mutex+0x42>
     8b0:	0f 5f       	subi	r16, 0xFF	; 255
     8b2:	1f 4f       	sbci	r17, 0xFF	; 255
     8b4:	37 96       	adiw	r30, 0x07	; 7
     8b6:	08 30       	cpi	r16, 0x08	; 8
     8b8:	11 05       	cpc	r17, r1
     8ba:	a9 f7       	brne	.-22     	; 0x8a6 <Kernel_Unlock_Mutex+0x2a>
     8bc:	f7 c0       	rjmp	.+494    	; 0xaac <Kernel_Unlock_Mutex+0x230>
     8be:	8d 91       	ld	r24, X+
     8c0:	9c 91       	ld	r25, X
     8c2:	11 97       	sbiw	r26, 0x01	; 1
     8c4:	27 e0       	ldi	r18, 0x07	; 7
     8c6:	20 9f       	mul	r18, r16
     8c8:	f0 01       	movw	r30, r0
     8ca:	21 9f       	mul	r18, r17
     8cc:	f0 0d       	add	r31, r0
     8ce:	11 24       	eor	r1, r1
     8d0:	e9 59       	subi	r30, 0x99	; 153
     8d2:	fd 4f       	sbci	r31, 0xFD	; 253
     8d4:	23 81       	ldd	r18, Z+3	; 0x03
     8d6:	34 81       	ldd	r19, Z+4	; 0x04
     8d8:	28 17       	cp	r18, r24
     8da:	39 07       	cpc	r19, r25
     8dc:	09 f0       	breq	.+2      	; 0x8e0 <Kernel_Unlock_Mutex+0x64>
     8de:	e6 c0       	rjmp	.+460    	; 0xaac <Kernel_Unlock_Mutex+0x230>
     8e0:	ac 5f       	subi	r26, 0xFC	; 252
     8e2:	be 4f       	sbci	r27, 0xFE	; 254
     8e4:	8c 91       	ld	r24, X
     8e6:	86 30       	cpi	r24, 0x06	; 6
     8e8:	09 f0       	breq	.+2      	; 0x8ec <Kernel_Unlock_Mutex+0x70>
     8ea:	4d c0       	rjmp	.+154    	; 0x986 <Kernel_Unlock_Mutex+0x10a>
     8ec:	6b e2       	ldi	r22, 0x2B	; 43
     8ee:	72 e0       	ldi	r23, 0x02	; 2
     8f0:	81 ee       	ldi	r24, 0xE1	; 225
     8f2:	96 e1       	ldi	r25, 0x16	; 22
     8f4:	af d7       	rcall	.+3934   	; 0x1854 <dequeueWQ>
     8f6:	9a 83       	std	Y+2, r25	; 0x02
     8f8:	89 83       	std	Y+1, r24	; 0x01
     8fa:	00 97       	sbiw	r24, 0x00	; 0
     8fc:	79 f4       	brne	.+30     	; 0x91c <Kernel_Unlock_Mutex+0xa0>
     8fe:	87 e0       	ldi	r24, 0x07	; 7
     900:	80 9f       	mul	r24, r16
     902:	f0 01       	movw	r30, r0
     904:	81 9f       	mul	r24, r17
     906:	f0 0d       	add	r31, r0
     908:	11 24       	eor	r1, r1
     90a:	e9 59       	subi	r30, 0x99	; 153
     90c:	fd 4f       	sbci	r31, 0xFD	; 253
     90e:	16 82       	std	Z+6, r1	; 0x06
     910:	15 82       	std	Z+5, r1	; 0x05
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	82 83       	std	Z+2, r24	; 0x02
     916:	14 82       	std	Z+4, r1	; 0x04
     918:	13 82       	std	Z+3, r1	; 0x03
     91a:	c8 c0       	rjmp	.+400    	; 0xaac <Kernel_Unlock_Mutex+0x230>
     91c:	27 e0       	ldi	r18, 0x07	; 7
     91e:	20 9f       	mul	r18, r16
     920:	f0 01       	movw	r30, r0
     922:	21 9f       	mul	r18, r17
     924:	f0 0d       	add	r31, r0
     926:	11 24       	eor	r1, r1
     928:	e9 59       	subi	r30, 0x99	; 153
     92a:	fd 4f       	sbci	r31, 0xFD	; 253
     92c:	21 e0       	ldi	r18, 0x01	; 1
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	36 83       	std	Z+6, r19	; 0x06
     932:	25 83       	std	Z+5, r18	; 0x05
     934:	dc 01       	movw	r26, r24
     936:	2d 91       	ld	r18, X+
     938:	3c 91       	ld	r19, X
     93a:	34 83       	std	Z+4, r19	; 0x04
     93c:	23 83       	std	Z+3, r18	; 0x03
     93e:	20 91 3d 02 	lds	r18, 0x023D
     942:	30 91 3e 02 	lds	r19, 0x023E
     946:	d9 01       	movw	r26, r18
     948:	a9 5f       	subi	r26, 0xF9	; 249
     94a:	be 4f       	sbci	r27, 0xFE	; 254
     94c:	4d 91       	ld	r20, X+
     94e:	5c 91       	ld	r21, X
     950:	11 97       	sbiw	r26, 0x01	; 1
     952:	fc 01       	movw	r30, r24
     954:	e9 5f       	subi	r30, 0xF9	; 249
     956:	fe 4f       	sbci	r31, 0xFE	; 254
     958:	51 83       	std	Z+1, r21	; 0x01
     95a:	40 83       	st	Z, r20
     95c:	33 97       	sbiw	r30, 0x03	; 3
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	80 83       	st	Z, r24
     962:	f9 01       	movw	r30, r18
     964:	eb 5f       	subi	r30, 0xFB	; 251
     966:	fe 4f       	sbci	r31, 0xFE	; 254
     968:	40 81       	ld	r20, Z
     96a:	51 81       	ldd	r21, Z+1	; 0x01
     96c:	11 96       	adiw	r26, 0x01	; 1
     96e:	5c 93       	st	X, r21
     970:	4e 93       	st	-X, r20
     972:	31 97       	sbiw	r30, 0x01	; 1
     974:	80 83       	st	Z, r24
     976:	4f e2       	ldi	r20, 0x2F	; 47
     978:	52 e0       	ldi	r21, 0x02	; 2
     97a:	6f eb       	ldi	r22, 0xBF	; 191
     97c:	76 e1       	ldi	r23, 0x16	; 22
     97e:	ce 01       	movw	r24, r28
     980:	01 96       	adiw	r24, 0x01	; 1
     982:	05 d7       	rcall	.+3594   	; 0x178e <enqueueRQ>
     984:	93 c0       	rjmp	.+294    	; 0xaac <Kernel_Unlock_Mutex+0x230>
     986:	87 e0       	ldi	r24, 0x07	; 7
     988:	80 9f       	mul	r24, r16
     98a:	f0 01       	movw	r30, r0
     98c:	81 9f       	mul	r24, r17
     98e:	f0 0d       	add	r31, r0
     990:	11 24       	eor	r1, r1
     992:	e9 59       	subi	r30, 0x99	; 153
     994:	fd 4f       	sbci	r31, 0xFD	; 253
     996:	85 81       	ldd	r24, Z+5	; 0x05
     998:	96 81       	ldd	r25, Z+6	; 0x06
     99a:	82 30       	cpi	r24, 0x02	; 2
     99c:	91 05       	cpc	r25, r1
     99e:	60 f0       	brcs	.+24     	; 0x9b8 <Kernel_Unlock_Mutex+0x13c>
     9a0:	27 e0       	ldi	r18, 0x07	; 7
     9a2:	20 9f       	mul	r18, r16
     9a4:	f0 01       	movw	r30, r0
     9a6:	21 9f       	mul	r18, r17
     9a8:	f0 0d       	add	r31, r0
     9aa:	11 24       	eor	r1, r1
     9ac:	e9 59       	subi	r30, 0x99	; 153
     9ae:	fd 4f       	sbci	r31, 0xFD	; 253
     9b0:	01 97       	sbiw	r24, 0x01	; 1
     9b2:	96 83       	std	Z+6, r25	; 0x06
     9b4:	85 83       	std	Z+5, r24	; 0x05
     9b6:	7a c0       	rjmp	.+244    	; 0xaac <Kernel_Unlock_Mutex+0x230>
     9b8:	6b e2       	ldi	r22, 0x2B	; 43
     9ba:	72 e0       	ldi	r23, 0x02	; 2
     9bc:	81 ee       	ldi	r24, 0xE1	; 225
     9be:	96 e1       	ldi	r25, 0x16	; 22
     9c0:	49 d7       	rcall	.+3730   	; 0x1854 <dequeueWQ>
     9c2:	9a 83       	std	Y+2, r25	; 0x02
     9c4:	89 83       	std	Y+1, r24	; 0x01
     9c6:	00 97       	sbiw	r24, 0x00	; 0
     9c8:	a9 f5       	brne	.+106    	; 0xa34 <Kernel_Unlock_Mutex+0x1b8>
     9ca:	87 e0       	ldi	r24, 0x07	; 7
     9cc:	80 9f       	mul	r24, r16
     9ce:	f0 01       	movw	r30, r0
     9d0:	81 9f       	mul	r24, r17
     9d2:	f0 0d       	add	r31, r0
     9d4:	11 24       	eor	r1, r1
     9d6:	e9 59       	subi	r30, 0x99	; 153
     9d8:	fd 4f       	sbci	r31, 0xFD	; 253
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	82 83       	std	Z+2, r24	; 0x02
     9de:	16 82       	std	Z+6, r1	; 0x06
     9e0:	15 82       	std	Z+5, r1	; 0x05
     9e2:	14 82       	std	Z+4, r1	; 0x04
     9e4:	13 82       	std	Z+3, r1	; 0x03
     9e6:	e0 91 3d 02 	lds	r30, 0x023D
     9ea:	f0 91 3e 02 	lds	r31, 0x023E
     9ee:	df 01       	movw	r26, r30
     9f0:	ab 5f       	subi	r26, 0xFB	; 251
     9f2:	be 4f       	sbci	r27, 0xFE	; 254
     9f4:	8d 91       	ld	r24, X+
     9f6:	9c 91       	ld	r25, X
     9f8:	11 97       	sbiw	r26, 0x01	; 1
     9fa:	12 96       	adiw	r26, 0x02	; 2
     9fc:	11 96       	adiw	r26, 0x01	; 1
     9fe:	9c 93       	st	X, r25
     a00:	8e 93       	st	-X, r24
     a02:	80 81       	ld	r24, Z
     a04:	91 81       	ldd	r25, Z+1	; 0x01
     a06:	02 97       	sbiw	r24, 0x02	; 2
     a08:	20 f4       	brcc	.+8      	; 0xa12 <Kernel_Unlock_Mutex+0x196>
     a0a:	82 e0       	ldi	r24, 0x02	; 2
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	5b dd       	rcall	.-1354   	; 0x4c6 <enable_LED>
     a10:	4d c0       	rjmp	.+154    	; 0xaac <Kernel_Unlock_Mutex+0x230>
     a12:	80 81       	ld	r24, Z
     a14:	91 81       	ldd	r25, Z+1	; 0x01
     a16:	02 97       	sbiw	r24, 0x02	; 2
     a18:	21 f4       	brne	.+8      	; 0xa22 <Kernel_Unlock_Mutex+0x1a6>
     a1a:	85 e0       	ldi	r24, 0x05	; 5
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	53 dd       	rcall	.-1370   	; 0x4c6 <enable_LED>
     a20:	45 c0       	rjmp	.+138    	; 0xaac <Kernel_Unlock_Mutex+0x230>
     a22:	80 81       	ld	r24, Z
     a24:	91 81       	ldd	r25, Z+1	; 0x01
     a26:	03 97       	sbiw	r24, 0x03	; 3
     a28:	09 f0       	breq	.+2      	; 0xa2c <Kernel_Unlock_Mutex+0x1b0>
     a2a:	40 c0       	rjmp	.+128    	; 0xaac <Kernel_Unlock_Mutex+0x230>
     a2c:	86 e0       	ldi	r24, 0x06	; 6
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	4a dd       	rcall	.-1388   	; 0x4c6 <enable_LED>
     a32:	3c c0       	rjmp	.+120    	; 0xaac <Kernel_Unlock_Mutex+0x230>
     a34:	27 e0       	ldi	r18, 0x07	; 7
     a36:	20 9f       	mul	r18, r16
     a38:	f0 01       	movw	r30, r0
     a3a:	21 9f       	mul	r18, r17
     a3c:	f0 0d       	add	r31, r0
     a3e:	11 24       	eor	r1, r1
     a40:	e9 59       	subi	r30, 0x99	; 153
     a42:	fd 4f       	sbci	r31, 0xFD	; 253
     a44:	21 e0       	ldi	r18, 0x01	; 1
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	36 83       	std	Z+6, r19	; 0x06
     a4a:	25 83       	std	Z+5, r18	; 0x05
     a4c:	dc 01       	movw	r26, r24
     a4e:	2d 91       	ld	r18, X+
     a50:	3c 91       	ld	r19, X
     a52:	34 83       	std	Z+4, r19	; 0x04
     a54:	23 83       	std	Z+3, r18	; 0x03
     a56:	20 91 3d 02 	lds	r18, 0x023D
     a5a:	30 91 3e 02 	lds	r19, 0x023E
     a5e:	d9 01       	movw	r26, r18
     a60:	a9 5f       	subi	r26, 0xF9	; 249
     a62:	be 4f       	sbci	r27, 0xFE	; 254
     a64:	4d 91       	ld	r20, X+
     a66:	5c 91       	ld	r21, X
     a68:	11 97       	sbiw	r26, 0x01	; 1
     a6a:	fc 01       	movw	r30, r24
     a6c:	e9 5f       	subi	r30, 0xF9	; 249
     a6e:	fe 4f       	sbci	r31, 0xFE	; 254
     a70:	51 83       	std	Z+1, r21	; 0x01
     a72:	40 83       	st	Z, r20
     a74:	33 97       	sbiw	r30, 0x03	; 3
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	80 83       	st	Z, r24
     a7a:	f9 01       	movw	r30, r18
     a7c:	eb 5f       	subi	r30, 0xFB	; 251
     a7e:	fe 4f       	sbci	r31, 0xFE	; 254
     a80:	40 81       	ld	r20, Z
     a82:	51 81       	ldd	r21, Z+1	; 0x01
     a84:	11 96       	adiw	r26, 0x01	; 1
     a86:	5c 93       	st	X, r21
     a88:	4e 93       	st	-X, r20
     a8a:	31 97       	sbiw	r30, 0x01	; 1
     a8c:	80 83       	st	Z, r24
     a8e:	4f e2       	ldi	r20, 0x2F	; 47
     a90:	52 e0       	ldi	r21, 0x02	; 2
     a92:	6f eb       	ldi	r22, 0xBF	; 191
     a94:	76 e1       	ldi	r23, 0x16	; 22
     a96:	ce 01       	movw	r24, r28
     a98:	01 96       	adiw	r24, 0x01	; 1
     a9a:	79 d6       	rcall	.+3314   	; 0x178e <enqueueRQ>
     a9c:	4f e2       	ldi	r20, 0x2F	; 47
     a9e:	52 e0       	ldi	r21, 0x02	; 2
     aa0:	6f eb       	ldi	r22, 0xBF	; 191
     aa2:	76 e1       	ldi	r23, 0x16	; 22
     aa4:	8d e3       	ldi	r24, 0x3D	; 61
     aa6:	92 e0       	ldi	r25, 0x02	; 2
     aa8:	72 d6       	rcall	.+3300   	; 0x178e <enqueueRQ>
     aaa:	b7 de       	rcall	.-658    	; 0x81a <Dispatch>
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	1f 91       	pop	r17
     ab6:	0f 91       	pop	r16
     ab8:	08 95       	ret

00000aba <OS_Start>:
     aba:	2f 92       	push	r2
     abc:	3f 92       	push	r3
     abe:	4f 92       	push	r4
     ac0:	5f 92       	push	r5
     ac2:	6f 92       	push	r6
     ac4:	7f 92       	push	r7
     ac6:	8f 92       	push	r8
     ac8:	9f 92       	push	r9
     aca:	af 92       	push	r10
     acc:	bf 92       	push	r11
     ace:	cf 92       	push	r12
     ad0:	df 92       	push	r13
     ad2:	ef 92       	push	r14
     ad4:	ff 92       	push	r15
     ad6:	0f 93       	push	r16
     ad8:	1f 93       	push	r17
     ada:	cf 93       	push	r28
     adc:	df 93       	push	r29
     ade:	00 d0       	rcall	.+0      	; 0xae0 <OS_Start+0x26>
     ae0:	1f 92       	push	r1
     ae2:	cd b7       	in	r28, 0x3d	; 61
     ae4:	de b7       	in	r29, 0x3e	; 62
     ae6:	80 91 3b 02 	lds	r24, 0x023B
     aea:	90 91 3c 02 	lds	r25, 0x023C
     aee:	89 2b       	or	r24, r25
     af0:	09 f0       	breq	.+2      	; 0xaf4 <OS_Start+0x3a>
     af2:	06 c4       	rjmp	.+2060   	; 0x1300 <OS_Start+0x846>
     af4:	80 91 39 02 	lds	r24, 0x0239
     af8:	90 91 3a 02 	lds	r25, 0x023A
     afc:	89 2b       	or	r24, r25
     afe:	09 f4       	brne	.+2      	; 0xb02 <OS_Start+0x48>
     b00:	ff c3       	rjmp	.+2046   	; 0x1300 <OS_Start+0x846>
     b02:	f8 94       	cli
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	90 93 3c 02 	sts	0x023C, r25
     b0c:	80 93 3b 02 	sts	0x023B, r24
     b10:	84 de       	rcall	.-760    	; 0x81a <Dispatch>
     b12:	0f 2e       	mov	r0, r31
     b14:	ff e3       	ldi	r31, 0x3F	; 63
     b16:	ef 2e       	mov	r14, r31
     b18:	f2 e0       	ldi	r31, 0x02	; 2
     b1a:	ff 2e       	mov	r15, r31
     b1c:	f0 2d       	mov	r31, r0
     b1e:	0f 2e       	mov	r0, r31
     b20:	fe e1       	ldi	r31, 0x1E	; 30
     b22:	af 2e       	mov	r10, r31
     b24:	bb 24       	eor	r11, r11
     b26:	b3 94       	inc	r11
     b28:	f0 2d       	mov	r31, r0
     b2a:	0f 2e       	mov	r0, r31
     b2c:	f3 e6       	ldi	r31, 0x63	; 99
     b2e:	2f 2e       	mov	r2, r31
     b30:	31 2c       	mov	r3, r1
     b32:	f0 2d       	mov	r31, r0
     b34:	88 24       	eor	r8, r8
     b36:	83 94       	inc	r8
     b38:	91 2c       	mov	r9, r1
     b3a:	0f 2e       	mov	r0, r31
     b3c:	f7 e6       	ldi	r31, 0x67	; 103
     b3e:	cf 2e       	mov	r12, r31
     b40:	f2 e0       	ldi	r31, 0x02	; 2
     b42:	df 2e       	mov	r13, r31
     b44:	f0 2d       	mov	r31, r0
     b46:	0f e9       	ldi	r16, 0x9F	; 159
     b48:	12 e0       	ldi	r17, 0x02	; 2
     b4a:	0f 2e       	mov	r0, r31
     b4c:	fa e0       	ldi	r31, 0x0A	; 10
     b4e:	6f 2e       	mov	r6, r31
     b50:	71 2c       	mov	r7, r1
     b52:	f0 2d       	mov	r31, r0
     b54:	e0 91 3d 02 	lds	r30, 0x023D
     b58:	f0 91 3e 02 	lds	r31, 0x023E
     b5c:	df 01       	movw	r26, r30
     b5e:	a3 5f       	subi	r26, 0xF3	; 243
     b60:	be 4f       	sbci	r27, 0xFE	; 254
     b62:	1c 92       	st	X, r1
     b64:	82 81       	ldd	r24, Z+2	; 0x02
     b66:	93 81       	ldd	r25, Z+3	; 0x03
     b68:	90 93 e0 16 	sts	0x16E0, r25
     b6c:	80 93 df 16 	sts	0x16DF, r24
     b70:	e8 da       	rcall	.-2608   	; 0x142 <CSwitch>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	b4 dc       	rcall	.-1688   	; 0x4e0 <disable_LED>
     b78:	85 e0       	ldi	r24, 0x05	; 5
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	b1 dc       	rcall	.-1694   	; 0x4e0 <disable_LED>
     b7e:	86 e0       	ldi	r24, 0x06	; 6
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	ae dc       	rcall	.-1700   	; 0x4e0 <disable_LED>
     b84:	80 91 3d 02 	lds	r24, 0x023D
     b88:	90 91 3e 02 	lds	r25, 0x023E
     b8c:	9c 83       	std	Y+4, r25	; 0x04
     b8e:	8b 83       	std	Y+3, r24	; 0x03
     b90:	80 91 df 16 	lds	r24, 0x16DF
     b94:	90 91 e0 16 	lds	r25, 0x16E0
     b98:	ab 81       	ldd	r26, Y+3	; 0x03
     b9a:	bc 81       	ldd	r27, Y+4	; 0x04
     b9c:	13 96       	adiw	r26, 0x03	; 3
     b9e:	9c 93       	st	X, r25
     ba0:	8e 93       	st	-X, r24
     ba2:	12 97       	sbiw	r26, 0x02	; 2
     ba4:	fd 01       	movw	r30, r26
     ba6:	e3 5f       	subi	r30, 0xF3	; 243
     ba8:	fe 4f       	sbci	r31, 0xFE	; 254
     baa:	e0 81       	ld	r30, Z
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	ed 30       	cpi	r30, 0x0D	; 13
     bb0:	f1 05       	cpc	r31, r1
     bb2:	80 f6       	brcc	.-96     	; 0xb54 <OS_Start+0x9a>
     bb4:	88 27       	eor	r24, r24
     bb6:	ee 58       	subi	r30, 0x8E	; 142
     bb8:	ff 4f       	sbci	r31, 0xFF	; 255
     bba:	8f 4f       	sbci	r24, 0xFF	; 255
     bbc:	0c 94 d9 0f 	jmp	0x1fb2	; 0x1fb2 <__tablejump2__>
     bc0:	eb 81       	ldd	r30, Y+3	; 0x03
     bc2:	fc 81       	ldd	r31, Y+4	; 0x04
     bc4:	e4 5e       	subi	r30, 0xE4	; 228
     bc6:	fe 4f       	sbci	r31, 0xFE	; 254
     bc8:	80 81       	ld	r24, Z
     bca:	91 81       	ldd	r25, Z+1	; 0x01
     bcc:	ef e9       	ldi	r30, 0x9F	; 159
     bce:	f2 e0       	ldi	r31, 0x02	; 2
     bd0:	20 81       	ld	r18, Z
     bd2:	31 81       	ldd	r19, Z+1	; 0x01
     bd4:	28 17       	cp	r18, r24
     bd6:	39 07       	cpc	r19, r25
     bd8:	09 f0       	breq	.+2      	; 0xbdc <OS_Start+0x122>
     bda:	89 c0       	rjmp	.+274    	; 0xcee <OS_Start+0x234>
     bdc:	0d c3       	rjmp	.+1562   	; 0x11f8 <OS_Start+0x73e>
     bde:	eb 81       	ldd	r30, Y+3	; 0x03
     be0:	fc 81       	ldd	r31, Y+4	; 0x04
     be2:	e7 5f       	subi	r30, 0xF7	; 247
     be4:	fe 4f       	sbci	r31, 0xFE	; 254
     be6:	40 81       	ld	r20, Z
     be8:	51 81       	ldd	r21, Z+1	; 0x01
     bea:	eb 81       	ldd	r30, Y+3	; 0x03
     bec:	fc 81       	ldd	r31, Y+4	; 0x04
     bee:	eb 5f       	subi	r30, 0xFB	; 251
     bf0:	fe 4f       	sbci	r31, 0xFE	; 254
     bf2:	60 81       	ld	r22, Z
     bf4:	71 81       	ldd	r23, Z+1	; 0x01
     bf6:	eb 81       	ldd	r30, Y+3	; 0x03
     bf8:	fc 81       	ldd	r31, Y+4	; 0x04
     bfa:	e5 5f       	subi	r30, 0xF5	; 245
     bfc:	fe 4f       	sbci	r31, 0xFE	; 254
     bfe:	80 81       	ld	r24, Z
     c00:	91 81       	ldd	r25, Z+1	; 0x01
     c02:	52 dd       	rcall	.-1372   	; 0x6a8 <Kernel_Create_Task>
     c04:	eb 81       	ldd	r30, Y+3	; 0x03
     c06:	fc 81       	ldd	r31, Y+4	; 0x04
     c08:	e2 5f       	subi	r30, 0xF2	; 242
     c0a:	fe 4f       	sbci	r31, 0xFE	; 254
     c0c:	91 83       	std	Z+1, r25	; 0x01
     c0e:	80 83       	st	Z, r24
     c10:	a1 cf       	rjmp	.-190    	; 0xb54 <OS_Start+0x9a>
     c12:	eb 81       	ldd	r30, Y+3	; 0x03
     c14:	fc 81       	ldd	r31, Y+4	; 0x04
     c16:	ec 5f       	subi	r30, 0xFC	; 252
     c18:	fe 4f       	sbci	r31, 0xFE	; 254
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	80 83       	st	Z, r24
     c1e:	4f e2       	ldi	r20, 0x2F	; 47
     c20:	52 e0       	ldi	r21, 0x02	; 2
     c22:	6f eb       	ldi	r22, 0xBF	; 191
     c24:	76 e1       	ldi	r23, 0x16	; 22
     c26:	8d e3       	ldi	r24, 0x3D	; 61
     c28:	92 e0       	ldi	r25, 0x02	; 2
     c2a:	b1 d5       	rcall	.+2914   	; 0x178e <enqueueRQ>
     c2c:	f6 dd       	rcall	.-1044   	; 0x81a <Dispatch>
     c2e:	92 cf       	rjmp	.-220    	; 0xb54 <OS_Start+0x9a>
     c30:	eb 81       	ldd	r30, Y+3	; 0x03
     c32:	fc 81       	ldd	r31, Y+4	; 0x04
     c34:	ec 5f       	subi	r30, 0xFC	; 252
     c36:	fe 4f       	sbci	r31, 0xFE	; 254
     c38:	83 e0       	ldi	r24, 0x03	; 3
     c3a:	80 83       	st	Z, r24
     c3c:	4d e2       	ldi	r20, 0x2D	; 45
     c3e:	52 e0       	ldi	r21, 0x02	; 2
     c40:	6f e9       	ldi	r22, 0x9F	; 159
     c42:	76 e1       	ldi	r23, 0x16	; 22
     c44:	8d e3       	ldi	r24, 0x3D	; 61
     c46:	92 e0       	ldi	r25, 0x02	; 2
     c48:	31 d5       	rcall	.+2658   	; 0x16ac <enqueueSQ>
     c4a:	e7 dd       	rcall	.-1074   	; 0x81a <Dispatch>
     c4c:	83 cf       	rjmp	.-250    	; 0xb54 <OS_Start+0x9a>
     c4e:	ab 81       	ldd	r26, Y+3	; 0x03
     c50:	bc 81       	ldd	r27, Y+4	; 0x04
     c52:	2d 91       	ld	r18, X+
     c54:	3c 91       	ld	r19, X
     c56:	11 97       	sbiw	r26, 0x01	; 1
     c58:	fd 01       	movw	r30, r26
     c5a:	e4 5e       	subi	r30, 0xE4	; 228
     c5c:	fe 4f       	sbci	r31, 0xFE	; 254
     c5e:	80 81       	ld	r24, Z
     c60:	91 81       	ldd	r25, Z+1	; 0x01
     c62:	28 17       	cp	r18, r24
     c64:	39 07       	cpc	r19, r25
     c66:	51 f0       	breq	.+20     	; 0xc7c <OS_Start+0x1c2>
     c68:	80 81       	ld	r24, Z
     c6a:	91 81       	ldd	r25, Z+1	; 0x01
     c6c:	ef e9       	ldi	r30, 0x9F	; 159
     c6e:	f2 e0       	ldi	r31, 0x02	; 2
     c70:	20 81       	ld	r18, Z
     c72:	31 81       	ldd	r19, Z+1	; 0x01
     c74:	28 17       	cp	r18, r24
     c76:	39 07       	cpc	r19, r25
     c78:	41 f4       	brne	.+16     	; 0xc8a <OS_Start+0x1d0>
     c7a:	ad c2       	rjmp	.+1370   	; 0x11d6 <OS_Start+0x71c>
     c7c:	eb 81       	ldd	r30, Y+3	; 0x03
     c7e:	fc 81       	ldd	r31, Y+4	; 0x04
     c80:	e6 5e       	subi	r30, 0xE6	; 230
     c82:	fe 4f       	sbci	r31, 0xFE	; 254
     c84:	91 82       	std	Z+1, r9	; 0x01
     c86:	80 82       	st	Z, r8
     c88:	1a c0       	rjmp	.+52     	; 0xcbe <OS_Start+0x204>
     c8a:	ed eb       	ldi	r30, 0xBD	; 189
     c8c:	f3 e0       	ldi	r31, 0x03	; 3
     c8e:	c4 01       	movw	r24, r8
     c90:	ab 81       	ldd	r26, Y+3	; 0x03
     c92:	bc 81       	ldd	r27, Y+4	; 0x04
     c94:	a4 5e       	subi	r26, 0xE4	; 228
     c96:	be 4f       	sbci	r27, 0xFE	; 254
     c98:	6b 81       	ldd	r22, Y+3	; 0x03
     c9a:	7c 81       	ldd	r23, Y+4	; 0x04
     c9c:	2d 91       	ld	r18, X+
     c9e:	3c 91       	ld	r19, X
     ca0:	11 97       	sbiw	r26, 0x01	; 1
     ca2:	40 81       	ld	r20, Z
     ca4:	51 81       	ldd	r21, Z+1	; 0x01
     ca6:	42 17       	cp	r20, r18
     ca8:	53 07       	cpc	r21, r19
     caa:	09 f4       	brne	.+2      	; 0xcae <OS_Start+0x1f4>
     cac:	97 c2       	rjmp	.+1326   	; 0x11dc <OS_Start+0x722>
     cae:	01 96       	adiw	r24, 0x01	; 1
     cb0:	e2 5e       	subi	r30, 0xE2	; 226
     cb2:	fe 4f       	sbci	r31, 0xFE	; 254
     cb4:	80 31       	cpi	r24, 0x10	; 16
     cb6:	91 05       	cpc	r25, r1
     cb8:	89 f7       	brne	.-30     	; 0xc9c <OS_Start+0x1e2>
     cba:	7c 83       	std	Y+4, r23	; 0x04
     cbc:	6b 83       	std	Y+3, r22	; 0x03
     cbe:	eb 81       	ldd	r30, Y+3	; 0x03
     cc0:	fc 81       	ldd	r31, Y+4	; 0x04
     cc2:	e6 5e       	subi	r30, 0xE6	; 230
     cc4:	fe 4f       	sbci	r31, 0xFE	; 254
     cc6:	80 81       	ld	r24, Z
     cc8:	91 81       	ldd	r25, Z+1	; 0x01
     cca:	89 2b       	or	r24, r25
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <OS_Start+0x216>
     cce:	42 cf       	rjmp	.-380    	; 0xb54 <OS_Start+0x9a>
     cd0:	eb 81       	ldd	r30, Y+3	; 0x03
     cd2:	fc 81       	ldd	r31, Y+4	; 0x04
     cd4:	ec 5f       	subi	r30, 0xFC	; 252
     cd6:	fe 4f       	sbci	r31, 0xFE	; 254
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	80 83       	st	Z, r24
     cdc:	4f e2       	ldi	r20, 0x2F	; 47
     cde:	52 e0       	ldi	r21, 0x02	; 2
     ce0:	6f eb       	ldi	r22, 0xBF	; 191
     ce2:	76 e1       	ldi	r23, 0x16	; 22
     ce4:	8d e3       	ldi	r24, 0x3D	; 61
     ce6:	92 e0       	ldi	r25, 0x02	; 2
     ce8:	52 d5       	rcall	.+2724   	; 0x178e <enqueueRQ>
     cea:	97 dd       	rcall	.-1234   	; 0x81a <Dispatch>
     cec:	33 cf       	rjmp	.-410    	; 0xb54 <OS_Start+0x9a>
     cee:	ed eb       	ldi	r30, 0xBD	; 189
     cf0:	f3 e0       	ldi	r31, 0x03	; 3
     cf2:	c4 01       	movw	r24, r8
     cf4:	ab 81       	ldd	r26, Y+3	; 0x03
     cf6:	bc 81       	ldd	r27, Y+4	; 0x04
     cf8:	a4 5e       	subi	r26, 0xE4	; 228
     cfa:	be 4f       	sbci	r27, 0xFE	; 254
     cfc:	6b 81       	ldd	r22, Y+3	; 0x03
     cfe:	7c 81       	ldd	r23, Y+4	; 0x04
     d00:	2d 91       	ld	r18, X+
     d02:	3c 91       	ld	r19, X
     d04:	11 97       	sbiw	r26, 0x01	; 1
     d06:	40 81       	ld	r20, Z
     d08:	51 81       	ldd	r21, Z+1	; 0x01
     d0a:	42 17       	cp	r20, r18
     d0c:	53 07       	cpc	r21, r19
     d0e:	09 f4       	brne	.+2      	; 0xd12 <OS_Start+0x258>
     d10:	76 c2       	rjmp	.+1260   	; 0x11fe <OS_Start+0x744>
     d12:	01 96       	adiw	r24, 0x01	; 1
     d14:	e2 5e       	subi	r30, 0xE2	; 226
     d16:	fe 4f       	sbci	r31, 0xFE	; 254
     d18:	80 31       	cpi	r24, 0x10	; 16
     d1a:	91 05       	cpc	r25, r1
     d1c:	89 f7       	brne	.-30     	; 0xd00 <OS_Start+0x246>
     d1e:	1a cf       	rjmp	.-460    	; 0xb54 <OS_Start+0x9a>
     d20:	8a 9d       	mul	r24, r10
     d22:	90 01       	movw	r18, r0
     d24:	8b 9d       	mul	r24, r11
     d26:	30 0d       	add	r19, r0
     d28:	9a 9d       	mul	r25, r10
     d2a:	30 0d       	add	r19, r0
     d2c:	11 24       	eor	r1, r1
     d2e:	c9 01       	movw	r24, r18
     d30:	81 56       	subi	r24, 0x61	; 97
     d32:	9d 4f       	sbci	r25, 0xFD	; 253
     d34:	fc 01       	movw	r30, r24
     d36:	e6 5e       	subi	r30, 0xE6	; 230
     d38:	fe 4f       	sbci	r31, 0xFE	; 254
     d3a:	11 82       	std	Z+1, r1	; 0x01
     d3c:	10 82       	st	Z, r1
     d3e:	eb 81       	ldd	r30, Y+3	; 0x03
     d40:	fc 81       	ldd	r31, Y+4	; 0x04
     d42:	e9 5f       	subi	r30, 0xF9	; 249
     d44:	fe 4f       	sbci	r31, 0xFE	; 254
     d46:	20 81       	ld	r18, Z
     d48:	31 81       	ldd	r19, Z+1	; 0x01
     d4a:	fc 01       	movw	r30, r24
     d4c:	e9 5f       	subi	r30, 0xF9	; 249
     d4e:	fe 4f       	sbci	r31, 0xFE	; 254
     d50:	80 81       	ld	r24, Z
     d52:	91 81       	ldd	r25, Z+1	; 0x01
     d54:	82 17       	cp	r24, r18
     d56:	93 07       	cpc	r25, r19
     d58:	08 f0       	brcs	.+2      	; 0xd5c <OS_Start+0x2a2>
     d5a:	fc ce       	rjmp	.-520    	; 0xb54 <OS_Start+0x9a>
     d5c:	eb 81       	ldd	r30, Y+3	; 0x03
     d5e:	fc 81       	ldd	r31, Y+4	; 0x04
     d60:	ec 5f       	subi	r30, 0xFC	; 252
     d62:	fe 4f       	sbci	r31, 0xFE	; 254
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	80 83       	st	Z, r24
     d68:	4f e2       	ldi	r20, 0x2F	; 47
     d6a:	52 e0       	ldi	r21, 0x02	; 2
     d6c:	6f eb       	ldi	r22, 0xBF	; 191
     d6e:	76 e1       	ldi	r23, 0x16	; 22
     d70:	8d e3       	ldi	r24, 0x3D	; 61
     d72:	92 e0       	ldi	r25, 0x02	; 2
     d74:	0c d5       	rcall	.+2584   	; 0x178e <enqueueRQ>
     d76:	51 dd       	rcall	.-1374   	; 0x81a <Dispatch>
     d78:	ed ce       	rjmp	.-550    	; 0xb54 <OS_Start+0x9a>
     d7a:	eb 81       	ldd	r30, Y+3	; 0x03
     d7c:	fc 81       	ldd	r31, Y+4	; 0x04
     d7e:	e9 5f       	subi	r30, 0xF9	; 249
     d80:	fe 4f       	sbci	r31, 0xFE	; 254
     d82:	11 82       	std	Z+1, r1	; 0x01
     d84:	10 82       	st	Z, r1
     d86:	eb 81       	ldd	r30, Y+3	; 0x03
     d88:	fc 81       	ldd	r31, Y+4	; 0x04
     d8a:	eb 5f       	subi	r30, 0xFB	; 251
     d8c:	fe 4f       	sbci	r31, 0xFE	; 254
     d8e:	11 82       	std	Z+1, r1	; 0x01
     d90:	10 82       	st	Z, r1
     d92:	eb 81       	ldd	r30, Y+3	; 0x03
     d94:	fc 81       	ldd	r31, Y+4	; 0x04
     d96:	ec 5f       	subi	r30, 0xFC	; 252
     d98:	fe 4f       	sbci	r31, 0xFE	; 254
     d9a:	86 e0       	ldi	r24, 0x06	; 6
     d9c:	80 83       	st	Z, r24
     d9e:	dc 82       	std	Y+4, r13	; 0x04
     da0:	cb 82       	std	Y+3, r12	; 0x03
     da2:	e0 91 3d 02 	lds	r30, 0x023D
     da6:	f0 91 3e 02 	lds	r31, 0x023E
     daa:	80 81       	ld	r24, Z
     dac:	91 81       	ldd	r25, Z+1	; 0x01
     dae:	ab 81       	ldd	r26, Y+3	; 0x03
     db0:	bc 81       	ldd	r27, Y+4	; 0x04
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	2d 91       	ld	r18, X+
     db6:	3c 91       	ld	r19, X
     db8:	14 97       	sbiw	r26, 0x04	; 4
     dba:	28 17       	cp	r18, r24
     dbc:	39 07       	cpc	r19, r25
     dbe:	39 f4       	brne	.+14     	; 0xdce <OS_Start+0x314>
     dc0:	8d 91       	ld	r24, X+
     dc2:	9c 91       	ld	r25, X
     dc4:	ec 5e       	subi	r30, 0xEC	; 236
     dc6:	fe 4f       	sbci	r31, 0xFE	; 254
     dc8:	91 83       	std	Z+1, r25	; 0x01
     dca:	80 83       	st	Z, r24
     dcc:	57 dd       	rcall	.-1362   	; 0x87c <Kernel_Unlock_Mutex>
     dce:	eb 81       	ldd	r30, Y+3	; 0x03
     dd0:	fc 81       	ldd	r31, Y+4	; 0x04
     dd2:	37 96       	adiw	r30, 0x07	; 7
     dd4:	fc 83       	std	Y+4, r31	; 0x04
     dd6:	eb 83       	std	Y+3, r30	; 0x03
     dd8:	e0 17       	cp	r30, r16
     dda:	f1 07       	cpc	r31, r17
     ddc:	11 f7       	brne	.-60     	; 0xda2 <OS_Start+0x2e8>
     dde:	e0 91 3d 02 	lds	r30, 0x023D
     de2:	f0 91 3e 02 	lds	r31, 0x023E
     de6:	df 01       	movw	r26, r30
     de8:	ac 5f       	subi	r26, 0xFC	; 252
     dea:	be 4f       	sbci	r27, 0xFE	; 254
     dec:	1c 92       	st	X, r1
     dee:	52 96       	adiw	r26, 0x12	; 18
     df0:	11 96       	adiw	r26, 0x01	; 1
     df2:	3c 92       	st	X, r3
     df4:	2e 92       	st	-X, r2
     df6:	1f 97       	sbiw	r26, 0x0f	; 15
     df8:	11 96       	adiw	r26, 0x01	; 1
     dfa:	7c 92       	st	X, r7
     dfc:	6e 92       	st	-X, r6
     dfe:	12 97       	sbiw	r26, 0x02	; 2
     e00:	11 96       	adiw	r26, 0x01	; 1
     e02:	7c 92       	st	X, r7
     e04:	6e 92       	st	-X, r6
     e06:	11 82       	std	Z+1, r1	; 0x01
     e08:	10 82       	st	Z, r1
     e0a:	80 91 39 02 	lds	r24, 0x0239
     e0e:	90 91 3a 02 	lds	r25, 0x023A
     e12:	01 97       	sbiw	r24, 0x01	; 1
     e14:	90 93 3a 02 	sts	0x023A, r25
     e18:	80 93 39 02 	sts	0x0239, r24
     e1c:	fe dc       	rcall	.-1540   	; 0x81a <Dispatch>
     e1e:	9a ce       	rjmp	.-716    	; 0xb54 <OS_Start+0x9a>
     e20:	80 91 35 02 	lds	r24, 0x0235
     e24:	90 91 36 02 	lds	r25, 0x0236
     e28:	08 97       	sbiw	r24, 0x08	; 8
     e2a:	41 f1       	breq	.+80     	; 0xe7c <OS_Start+0x3c2>
     e2c:	d6 01       	movw	r26, r12
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	8c 91       	ld	r24, X
     e32:	88 23       	and	r24, r24
     e34:	89 f0       	breq	.+34     	; 0xe58 <OS_Start+0x39e>
     e36:	e0 e7       	ldi	r30, 0x70	; 112
     e38:	f2 e0       	ldi	r31, 0x02	; 2
     e3a:	94 01       	movw	r18, r8
     e3c:	4b 81       	ldd	r20, Y+3	; 0x03
     e3e:	5c 81       	ldd	r21, Y+4	; 0x04
     e40:	80 81       	ld	r24, Z
     e42:	88 23       	and	r24, r24
     e44:	61 f0       	breq	.+24     	; 0xe5e <OS_Start+0x3a4>
     e46:	2f 5f       	subi	r18, 0xFF	; 255
     e48:	3f 4f       	sbci	r19, 0xFF	; 255
     e4a:	37 96       	adiw	r30, 0x07	; 7
     e4c:	28 30       	cpi	r18, 0x08	; 8
     e4e:	31 05       	cpc	r19, r1
     e50:	b9 f7       	brne	.-18     	; 0xe40 <OS_Start+0x386>
     e52:	5c 83       	std	Y+4, r21	; 0x04
     e54:	4b 83       	std	Y+3, r20	; 0x03
     e56:	05 c0       	rjmp	.+10     	; 0xe62 <OS_Start+0x3a8>
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <OS_Start+0x3a8>
     e5e:	5c 83       	std	Y+4, r21	; 0x04
     e60:	4b 83       	std	Y+3, r20	; 0x03
     e62:	c9 01       	movw	r24, r18
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	82 1b       	sub	r24, r18
     e72:	93 0b       	sbc	r25, r19
     e74:	89 59       	subi	r24, 0x99	; 153
     e76:	9d 4f       	sbci	r25, 0xFD	; 253
     e78:	47 dc       	rcall	.-1906   	; 0x708 <Kernel_Init_Mutex_At>
     e7a:	2c 01       	movw	r4, r24
     e7c:	eb 81       	ldd	r30, Y+3	; 0x03
     e7e:	fc 81       	ldd	r31, Y+4	; 0x04
     e80:	e2 5f       	subi	r30, 0xF2	; 242
     e82:	fe 4f       	sbci	r31, 0xFE	; 254
     e84:	51 82       	std	Z+1, r5	; 0x01
     e86:	40 82       	st	Z, r4
     e88:	65 ce       	rjmp	.-822    	; 0xb54 <OS_Start+0x9a>
     e8a:	eb 81       	ldd	r30, Y+3	; 0x03
     e8c:	fc 81       	ldd	r31, Y+4	; 0x04
     e8e:	ec 5e       	subi	r30, 0xEC	; 236
     e90:	fe 4f       	sbci	r31, 0xFE	; 254
     e92:	40 81       	ld	r20, Z
     e94:	51 81       	ldd	r21, Z+1	; 0x01
     e96:	f6 01       	movw	r30, r12
     e98:	80 81       	ld	r24, Z
     e9a:	91 81       	ldd	r25, Z+1	; 0x01
     e9c:	48 17       	cp	r20, r24
     e9e:	59 07       	cpc	r21, r25
     ea0:	09 f4       	brne	.+2      	; 0xea4 <OS_Start+0x3ea>
     ea2:	bf c1       	rjmp	.+894    	; 0x1222 <OS_Start+0x768>
     ea4:	c4 01       	movw	r24, r8
     ea6:	6b 81       	ldd	r22, Y+3	; 0x03
     ea8:	7c 81       	ldd	r23, Y+4	; 0x04
     eaa:	27 81       	ldd	r18, Z+7	; 0x07
     eac:	30 85       	ldd	r19, Z+8	; 0x08
     eae:	42 17       	cp	r20, r18
     eb0:	53 07       	cpc	r21, r19
     eb2:	09 f4       	brne	.+2      	; 0xeb6 <OS_Start+0x3fc>
     eb4:	b9 c1       	rjmp	.+882    	; 0x1228 <OS_Start+0x76e>
     eb6:	01 96       	adiw	r24, 0x01	; 1
     eb8:	37 96       	adiw	r30, 0x07	; 7
     eba:	88 30       	cpi	r24, 0x08	; 8
     ebc:	91 05       	cpc	r25, r1
     ebe:	a9 f7       	brne	.-22     	; 0xeaa <OS_Start+0x3f0>
     ec0:	49 ce       	rjmp	.-878    	; 0xb54 <OS_Start+0x9a>
     ec2:	fc 01       	movw	r30, r24
     ec4:	ee 0f       	add	r30, r30
     ec6:	ff 1f       	adc	r31, r31
     ec8:	ee 0f       	add	r30, r30
     eca:	ff 1f       	adc	r31, r31
     ecc:	ee 0f       	add	r30, r30
     ece:	ff 1f       	adc	r31, r31
     ed0:	e8 1b       	sub	r30, r24
     ed2:	f9 0b       	sbc	r31, r25
     ed4:	e9 59       	subi	r30, 0x99	; 153
     ed6:	fd 4f       	sbci	r31, 0xFD	; 253
     ed8:	82 e0       	ldi	r24, 0x02	; 2
     eda:	82 83       	std	Z+2, r24	; 0x02
     edc:	ab 81       	ldd	r26, Y+3	; 0x03
     ede:	bc 81       	ldd	r27, Y+4	; 0x04
     ee0:	8d 91       	ld	r24, X+
     ee2:	9c 91       	ld	r25, X
     ee4:	94 83       	std	Z+4, r25	; 0x04
     ee6:	83 83       	std	Z+3, r24	; 0x03
     ee8:	85 81       	ldd	r24, Z+5	; 0x05
     eea:	96 81       	ldd	r25, Z+6	; 0x06
     eec:	01 96       	adiw	r24, 0x01	; 1
     eee:	96 83       	std	Z+6, r25	; 0x06
     ef0:	85 83       	std	Z+5, r24	; 0x05
     ef2:	30 ce       	rjmp	.-928    	; 0xb54 <OS_Start+0x9a>
     ef4:	fc 01       	movw	r30, r24
     ef6:	ee 0f       	add	r30, r30
     ef8:	ff 1f       	adc	r31, r31
     efa:	ee 0f       	add	r30, r30
     efc:	ff 1f       	adc	r31, r31
     efe:	ee 0f       	add	r30, r30
     f00:	ff 1f       	adc	r31, r31
     f02:	e8 1b       	sub	r30, r24
     f04:	f9 0b       	sbc	r31, r25
     f06:	e9 59       	subi	r30, 0x99	; 153
     f08:	fd 4f       	sbci	r31, 0xFD	; 253
     f0a:	23 81       	ldd	r18, Z+3	; 0x03
     f0c:	34 81       	ldd	r19, Z+4	; 0x04
     f0e:	eb 81       	ldd	r30, Y+3	; 0x03
     f10:	fc 81       	ldd	r31, Y+4	; 0x04
     f12:	40 81       	ld	r20, Z
     f14:	51 81       	ldd	r21, Z+1	; 0x01
     f16:	24 17       	cp	r18, r20
     f18:	35 07       	cpc	r19, r21
     f1a:	89 f4       	brne	.+34     	; 0xf3e <OS_Start+0x484>
     f1c:	fc 01       	movw	r30, r24
     f1e:	ee 0f       	add	r30, r30
     f20:	ff 1f       	adc	r31, r31
     f22:	ee 0f       	add	r30, r30
     f24:	ff 1f       	adc	r31, r31
     f26:	ee 0f       	add	r30, r30
     f28:	ff 1f       	adc	r31, r31
     f2a:	e8 1b       	sub	r30, r24
     f2c:	f9 0b       	sbc	r31, r25
     f2e:	e9 59       	subi	r30, 0x99	; 153
     f30:	fd 4f       	sbci	r31, 0xFD	; 253
     f32:	85 81       	ldd	r24, Z+5	; 0x05
     f34:	96 81       	ldd	r25, Z+6	; 0x06
     f36:	01 96       	adiw	r24, 0x01	; 1
     f38:	96 83       	std	Z+6, r25	; 0x06
     f3a:	85 83       	std	Z+5, r24	; 0x05
     f3c:	0b ce       	rjmp	.-1002   	; 0xb54 <OS_Start+0x9a>
     f3e:	ef e9       	ldi	r30, 0x9F	; 159
     f40:	f2 e0       	ldi	r31, 0x02	; 2
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	6b 81       	ldd	r22, Y+3	; 0x03
     f48:	7c 81       	ldd	r23, Y+4	; 0x04
     f4a:	40 81       	ld	r20, Z
     f4c:	51 81       	ldd	r21, Z+1	; 0x01
     f4e:	24 17       	cp	r18, r20
     f50:	35 07       	cpc	r19, r21
     f52:	19 f4       	brne	.+6      	; 0xf5a <OS_Start+0x4a0>
     f54:	21 15       	cp	r18, r1
     f56:	31 05       	cpc	r19, r1
     f58:	31 f4       	brne	.+12     	; 0xf66 <OS_Start+0x4ac>
     f5a:	01 96       	adiw	r24, 0x01	; 1
     f5c:	e2 5e       	subi	r30, 0xE2	; 226
     f5e:	fe 4f       	sbci	r31, 0xFE	; 254
     f60:	80 31       	cpi	r24, 0x10	; 16
     f62:	91 05       	cpc	r25, r1
     f64:	91 f7       	brne	.-28     	; 0xf4a <OS_Start+0x490>
     f66:	7c 83       	std	Y+4, r23	; 0x04
     f68:	6b 83       	std	Y+3, r22	; 0x03
     f6a:	fb 01       	movw	r30, r22
     f6c:	e9 5f       	subi	r30, 0xF9	; 249
     f6e:	fe 4f       	sbci	r31, 0xFE	; 254
     f70:	20 81       	ld	r18, Z
     f72:	31 81       	ldd	r19, Z+1	; 0x01
     f74:	8a 9d       	mul	r24, r10
     f76:	f0 01       	movw	r30, r0
     f78:	8b 9d       	mul	r24, r11
     f7a:	f0 0d       	add	r31, r0
     f7c:	9a 9d       	mul	r25, r10
     f7e:	f0 0d       	add	r31, r0
     f80:	11 24       	eor	r1, r1
     f82:	ea 55       	subi	r30, 0x5A	; 90
     f84:	fc 4f       	sbci	r31, 0xFC	; 252
     f86:	40 81       	ld	r20, Z
     f88:	51 81       	ldd	r21, Z+1	; 0x01
     f8a:	24 17       	cp	r18, r20
     f8c:	35 07       	cpc	r19, r21
     f8e:	80 f4       	brcc	.+32     	; 0xfb0 <OS_Start+0x4f6>
     f90:	fb 01       	movw	r30, r22
     f92:	e9 5f       	subi	r30, 0xF9	; 249
     f94:	fe 4f       	sbci	r31, 0xFE	; 254
     f96:	20 81       	ld	r18, Z
     f98:	31 81       	ldd	r19, Z+1	; 0x01
     f9a:	8a 9d       	mul	r24, r10
     f9c:	f0 01       	movw	r30, r0
     f9e:	8b 9d       	mul	r24, r11
     fa0:	f0 0d       	add	r31, r0
     fa2:	9a 9d       	mul	r25, r10
     fa4:	f0 0d       	add	r31, r0
     fa6:	11 24       	eor	r1, r1
     fa8:	ea 55       	subi	r30, 0x5A	; 90
     faa:	fc 4f       	sbci	r31, 0xFC	; 252
     fac:	31 83       	std	Z+1, r19	; 0x01
     fae:	20 83       	st	Z, r18
     fb0:	eb 81       	ldd	r30, Y+3	; 0x03
     fb2:	fc 81       	ldd	r31, Y+4	; 0x04
     fb4:	ec 5f       	subi	r30, 0xFC	; 252
     fb6:	fe 4f       	sbci	r31, 0xFE	; 254
     fb8:	84 e0       	ldi	r24, 0x04	; 4
     fba:	80 83       	st	Z, r24
     fbc:	4b e2       	ldi	r20, 0x2B	; 43
     fbe:	52 e0       	ldi	r21, 0x02	; 2
     fc0:	61 ee       	ldi	r22, 0xE1	; 225
     fc2:	76 e1       	ldi	r23, 0x16	; 22
     fc4:	8d e3       	ldi	r24, 0x3D	; 61
     fc6:	92 e0       	ldi	r25, 0x02	; 2
     fc8:	41 d3       	rcall	.+1666   	; 0x164c <enqueueWQ>
     fca:	27 dc       	rcall	.-1970   	; 0x81a <Dispatch>
     fcc:	c3 cd       	rjmp	.-1146   	; 0xb54 <OS_Start+0x9a>
     fce:	56 dc       	rcall	.-1876   	; 0x87c <Kernel_Unlock_Mutex>
     fd0:	c1 cd       	rjmp	.-1150   	; 0xb54 <OS_Start+0x9a>
     fd2:	80 91 33 02 	lds	r24, 0x0233
     fd6:	90 91 34 02 	lds	r25, 0x0234
     fda:	08 97       	sbiw	r24, 0x08	; 8
     fdc:	31 f1       	breq	.+76     	; 0x102a <OS_Start+0x570>
     fde:	d7 01       	movw	r26, r14
     fe0:	12 96       	adiw	r26, 0x02	; 2
     fe2:	8c 91       	ld	r24, X
     fe4:	88 23       	and	r24, r24
     fe6:	81 f0       	breq	.+32     	; 0x1008 <OS_Start+0x54e>
     fe8:	e6 e4       	ldi	r30, 0x46	; 70
     fea:	f2 e0       	ldi	r31, 0x02	; 2
     fec:	c4 01       	movw	r24, r8
     fee:	4b 81       	ldd	r20, Y+3	; 0x03
     ff0:	5c 81       	ldd	r21, Y+4	; 0x04
     ff2:	20 81       	ld	r18, Z
     ff4:	22 23       	and	r18, r18
     ff6:	59 f0       	breq	.+22     	; 0x100e <OS_Start+0x554>
     ff8:	01 96       	adiw	r24, 0x01	; 1
     ffa:	35 96       	adiw	r30, 0x05	; 5
     ffc:	88 30       	cpi	r24, 0x08	; 8
     ffe:	91 05       	cpc	r25, r1
    1000:	c1 f7       	brne	.-16     	; 0xff2 <OS_Start+0x538>
    1002:	5c 83       	std	Y+4, r21	; 0x04
    1004:	4b 83       	std	Y+3, r20	; 0x03
    1006:	05 c0       	rjmp	.+10     	; 0x1012 <OS_Start+0x558>
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <OS_Start+0x558>
    100e:	5c 83       	std	Y+4, r21	; 0x04
    1010:	4b 83       	std	Y+3, r20	; 0x03
    1012:	9c 01       	movw	r18, r24
    1014:	22 0f       	add	r18, r18
    1016:	33 1f       	adc	r19, r19
    1018:	22 0f       	add	r18, r18
    101a:	33 1f       	adc	r19, r19
    101c:	82 0f       	add	r24, r18
    101e:	93 1f       	adc	r25, r19
    1020:	81 5c       	subi	r24, 0xC1	; 193
    1022:	9d 4f       	sbci	r25, 0xFD	; 253
    1024:	86 db       	rcall	.-2292   	; 0x732 <Kernel_Init_Event_At>
    1026:	9a 83       	std	Y+2, r25	; 0x02
    1028:	89 83       	std	Y+1, r24	; 0x01
    102a:	ab 81       	ldd	r26, Y+3	; 0x03
    102c:	bc 81       	ldd	r27, Y+4	; 0x04
    102e:	a2 5f       	subi	r26, 0xF2	; 242
    1030:	be 4f       	sbci	r27, 0xFE	; 254
    1032:	e9 81       	ldd	r30, Y+1	; 0x01
    1034:	fa 81       	ldd	r31, Y+2	; 0x02
    1036:	11 96       	adiw	r26, 0x01	; 1
    1038:	fc 93       	st	X, r31
    103a:	ee 93       	st	-X, r30
    103c:	8b cd       	rjmp	.-1258   	; 0xb54 <OS_Start+0x9a>
    103e:	eb 81       	ldd	r30, Y+3	; 0x03
    1040:	fc 81       	ldd	r31, Y+4	; 0x04
    1042:	e8 5e       	subi	r30, 0xE8	; 232
    1044:	fe 4f       	sbci	r31, 0xFE	; 254
    1046:	40 81       	ld	r20, Z
    1048:	51 81       	ldd	r21, Z+1	; 0x01
    104a:	d7 01       	movw	r26, r14
    104c:	8d 91       	ld	r24, X+
    104e:	9c 91       	ld	r25, X
    1050:	48 17       	cp	r20, r24
    1052:	59 07       	cpc	r21, r25
    1054:	09 f4       	brne	.+2      	; 0x1058 <OS_Start+0x59e>
    1056:	fa c0       	rjmp	.+500    	; 0x124c <OS_Start+0x792>
    1058:	f7 01       	movw	r30, r14
    105a:	c4 01       	movw	r24, r8
    105c:	6b 81       	ldd	r22, Y+3	; 0x03
    105e:	7c 81       	ldd	r23, Y+4	; 0x04
    1060:	25 81       	ldd	r18, Z+5	; 0x05
    1062:	36 81       	ldd	r19, Z+6	; 0x06
    1064:	42 17       	cp	r20, r18
    1066:	53 07       	cpc	r21, r19
    1068:	09 f4       	brne	.+2      	; 0x106c <OS_Start+0x5b2>
    106a:	f3 c0       	rjmp	.+486    	; 0x1252 <OS_Start+0x798>
    106c:	01 96       	adiw	r24, 0x01	; 1
    106e:	35 96       	adiw	r30, 0x05	; 5
    1070:	88 30       	cpi	r24, 0x08	; 8
    1072:	91 05       	cpc	r25, r1
    1074:	a9 f7       	brne	.-22     	; 0x1060 <OS_Start+0x5a6>
    1076:	3d c0       	rjmp	.+122    	; 0x10f2 <OS_Start+0x638>
    1078:	fc 01       	movw	r30, r24
    107a:	ee 0f       	add	r30, r30
    107c:	ff 1f       	adc	r31, r31
    107e:	ee 0f       	add	r30, r30
    1080:	ff 1f       	adc	r31, r31
    1082:	e8 0f       	add	r30, r24
    1084:	f9 1f       	adc	r31, r25
    1086:	e1 5c       	subi	r30, 0xC1	; 193
    1088:	fd 4f       	sbci	r31, 0xFD	; 253
    108a:	22 81       	ldd	r18, Z+2	; 0x02
    108c:	22 30       	cpi	r18, 0x02	; 2
    108e:	69 f4       	brne	.+26     	; 0x10aa <OS_Start+0x5f0>
    1090:	fc 01       	movw	r30, r24
    1092:	ee 0f       	add	r30, r30
    1094:	ff 1f       	adc	r31, r31
    1096:	ee 0f       	add	r30, r30
    1098:	ff 1f       	adc	r31, r31
    109a:	8e 0f       	add	r24, r30
    109c:	9f 1f       	adc	r25, r31
    109e:	fc 01       	movw	r30, r24
    10a0:	e1 5c       	subi	r30, 0xC1	; 193
    10a2:	fd 4f       	sbci	r31, 0xFD	; 253
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	82 83       	std	Z+2, r24	; 0x02
    10a8:	24 c0       	rjmp	.+72     	; 0x10f2 <OS_Start+0x638>
    10aa:	eb 81       	ldd	r30, Y+3	; 0x03
    10ac:	fc 81       	ldd	r31, Y+4	; 0x04
    10ae:	ea 5e       	subi	r30, 0xEA	; 234
    10b0:	fe 4f       	sbci	r31, 0xFE	; 254
    10b2:	51 83       	std	Z+1, r21	; 0x01
    10b4:	40 83       	st	Z, r20
    10b6:	eb 81       	ldd	r30, Y+3	; 0x03
    10b8:	fc 81       	ldd	r31, Y+4	; 0x04
    10ba:	20 81       	ld	r18, Z
    10bc:	31 81       	ldd	r19, Z+1	; 0x01
    10be:	fc 01       	movw	r30, r24
    10c0:	ee 0f       	add	r30, r30
    10c2:	ff 1f       	adc	r31, r31
    10c4:	ee 0f       	add	r30, r30
    10c6:	ff 1f       	adc	r31, r31
    10c8:	8e 0f       	add	r24, r30
    10ca:	9f 1f       	adc	r25, r31
    10cc:	fc 01       	movw	r30, r24
    10ce:	e1 5c       	subi	r30, 0xC1	; 193
    10d0:	fd 4f       	sbci	r31, 0xFD	; 253
    10d2:	34 83       	std	Z+4, r19	; 0x04
    10d4:	23 83       	std	Z+3, r18	; 0x03
    10d6:	eb 81       	ldd	r30, Y+3	; 0x03
    10d8:	fc 81       	ldd	r31, Y+4	; 0x04
    10da:	ec 5f       	subi	r30, 0xFC	; 252
    10dc:	fe 4f       	sbci	r31, 0xFE	; 254
    10de:	85 e0       	ldi	r24, 0x05	; 5
    10e0:	80 83       	st	Z, r24
    10e2:	4f e2       	ldi	r20, 0x2F	; 47
    10e4:	52 e0       	ldi	r21, 0x02	; 2
    10e6:	6f eb       	ldi	r22, 0xBF	; 191
    10e8:	76 e1       	ldi	r23, 0x16	; 22
    10ea:	8d e3       	ldi	r24, 0x3D	; 61
    10ec:	92 e0       	ldi	r25, 0x02	; 2
    10ee:	4f d3       	rcall	.+1694   	; 0x178e <enqueueRQ>
    10f0:	94 db       	rcall	.-2264   	; 0x81a <Dispatch>
    10f2:	e0 91 3d 02 	lds	r30, 0x023D
    10f6:	f0 91 3e 02 	lds	r31, 0x023E
    10fa:	80 81       	ld	r24, Z
    10fc:	91 81       	ldd	r25, Z+1	; 0x01
    10fe:	02 97       	sbiw	r24, 0x02	; 2
    1100:	20 f4       	brcc	.+8      	; 0x110a <OS_Start+0x650>
    1102:	82 e0       	ldi	r24, 0x02	; 2
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	df d9       	rcall	.-3138   	; 0x4c6 <enable_LED>
    1108:	25 cd       	rjmp	.-1462   	; 0xb54 <OS_Start+0x9a>
    110a:	80 81       	ld	r24, Z
    110c:	91 81       	ldd	r25, Z+1	; 0x01
    110e:	02 97       	sbiw	r24, 0x02	; 2
    1110:	21 f4       	brne	.+8      	; 0x111a <OS_Start+0x660>
    1112:	85 e0       	ldi	r24, 0x05	; 5
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	d7 d9       	rcall	.-3154   	; 0x4c6 <enable_LED>
    1118:	1d cd       	rjmp	.-1478   	; 0xb54 <OS_Start+0x9a>
    111a:	80 81       	ld	r24, Z
    111c:	91 81       	ldd	r25, Z+1	; 0x01
    111e:	03 97       	sbiw	r24, 0x03	; 3
    1120:	09 f0       	breq	.+2      	; 0x1124 <OS_Start+0x66a>
    1122:	18 cd       	rjmp	.-1488   	; 0xb54 <OS_Start+0x9a>
    1124:	86 e0       	ldi	r24, 0x06	; 6
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	ce d9       	rcall	.-3172   	; 0x4c6 <enable_LED>
    112a:	14 cd       	rjmp	.-1496   	; 0xb54 <OS_Start+0x9a>
    112c:	eb 81       	ldd	r30, Y+3	; 0x03
    112e:	fc 81       	ldd	r31, Y+4	; 0x04
    1130:	e8 5e       	subi	r30, 0xE8	; 232
    1132:	fe 4f       	sbci	r31, 0xFE	; 254
    1134:	40 81       	ld	r20, Z
    1136:	51 81       	ldd	r21, Z+1	; 0x01
    1138:	d7 01       	movw	r26, r14
    113a:	8d 91       	ld	r24, X+
    113c:	9c 91       	ld	r25, X
    113e:	48 17       	cp	r20, r24
    1140:	59 07       	cpc	r21, r25
    1142:	09 f4       	brne	.+2      	; 0x1146 <OS_Start+0x68c>
    1144:	97 c0       	rjmp	.+302    	; 0x1274 <OS_Start+0x7ba>
    1146:	f7 01       	movw	r30, r14
    1148:	c4 01       	movw	r24, r8
    114a:	6b 81       	ldd	r22, Y+3	; 0x03
    114c:	7c 81       	ldd	r23, Y+4	; 0x04
    114e:	25 81       	ldd	r18, Z+5	; 0x05
    1150:	36 81       	ldd	r19, Z+6	; 0x06
    1152:	42 17       	cp	r20, r18
    1154:	53 07       	cpc	r21, r19
    1156:	09 f4       	brne	.+2      	; 0x115a <OS_Start+0x6a0>
    1158:	90 c0       	rjmp	.+288    	; 0x127a <OS_Start+0x7c0>
    115a:	01 96       	adiw	r24, 0x01	; 1
    115c:	35 96       	adiw	r30, 0x05	; 5
    115e:	88 30       	cpi	r24, 0x08	; 8
    1160:	91 05       	cpc	r25, r1
    1162:	a9 f7       	brne	.-22     	; 0x114e <OS_Start+0x694>
    1164:	f7 cc       	rjmp	.-1554   	; 0xb54 <OS_Start+0x9a>
    1166:	80 81       	ld	r24, Z
    1168:	91 81       	ldd	r25, Z+1	; 0x01
    116a:	48 17       	cp	r20, r24
    116c:	59 07       	cpc	r21, r25
    116e:	09 f4       	brne	.+2      	; 0x1172 <OS_Start+0x6b8>
    1170:	97 c0       	rjmp	.+302    	; 0x12a0 <OS_Start+0x7e6>
    1172:	2f 5f       	subi	r18, 0xFF	; 255
    1174:	3f 4f       	sbci	r19, 0xFF	; 255
    1176:	e2 5e       	subi	r30, 0xE2	; 226
    1178:	fe 4f       	sbci	r31, 0xFE	; 254
    117a:	20 31       	cpi	r18, 0x10	; 16
    117c:	31 05       	cpc	r19, r1
    117e:	99 f7       	brne	.-26     	; 0x1166 <OS_Start+0x6ac>
    1180:	cb 01       	movw	r24, r22
    1182:	fb 01       	movw	r30, r22
    1184:	ee 0f       	add	r30, r30
    1186:	ff 1f       	adc	r31, r31
    1188:	ee 0f       	add	r30, r30
    118a:	ff 1f       	adc	r31, r31
    118c:	8e 0f       	add	r24, r30
    118e:	9f 1f       	adc	r25, r31
    1190:	fc 01       	movw	r30, r24
    1192:	e1 5c       	subi	r30, 0xC1	; 193
    1194:	fd 4f       	sbci	r31, 0xFD	; 253
    1196:	82 e0       	ldi	r24, 0x02	; 2
    1198:	82 83       	std	Z+2, r24	; 0x02
    119a:	dc cc       	rjmp	.-1608   	; 0xb54 <OS_Start+0x9a>
    119c:	2a 9d       	mul	r18, r10
    119e:	f0 01       	movw	r30, r0
    11a0:	2b 9d       	mul	r18, r11
    11a2:	f0 0d       	add	r31, r0
    11a4:	3a 9d       	mul	r19, r10
    11a6:	f0 0d       	add	r31, r0
    11a8:	11 24       	eor	r1, r1
    11aa:	e7 54       	subi	r30, 0x47	; 71
    11ac:	fc 4f       	sbci	r31, 0xFC	; 252
    11ae:	80 81       	ld	r24, Z
    11b0:	91 81       	ldd	r25, Z+1	; 0x01
    11b2:	89 2b       	or	r24, r25
    11b4:	09 f0       	breq	.+2      	; 0x11b8 <OS_Start+0x6fe>
    11b6:	ce cc       	rjmp	.-1636   	; 0xb54 <OS_Start+0x9a>
    11b8:	eb 81       	ldd	r30, Y+3	; 0x03
    11ba:	fc 81       	ldd	r31, Y+4	; 0x04
    11bc:	ec 5f       	subi	r30, 0xFC	; 252
    11be:	fe 4f       	sbci	r31, 0xFE	; 254
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	80 83       	st	Z, r24
    11c4:	4f e2       	ldi	r20, 0x2F	; 47
    11c6:	52 e0       	ldi	r21, 0x02	; 2
    11c8:	6f eb       	ldi	r22, 0xBF	; 191
    11ca:	76 e1       	ldi	r23, 0x16	; 22
    11cc:	8d e3       	ldi	r24, 0x3D	; 61
    11ce:	92 e0       	ldi	r25, 0x02	; 2
    11d0:	de d2       	rcall	.+1468   	; 0x178e <enqueueRQ>
    11d2:	23 db       	rcall	.-2490   	; 0x81a <Dispatch>
    11d4:	bf cc       	rjmp	.-1666   	; 0xb54 <OS_Start+0x9a>
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <OS_Start+0x726>
    11dc:	7c 83       	std	Y+4, r23	; 0x04
    11de:	6b 83       	std	Y+3, r22	; 0x03
    11e0:	8a 9d       	mul	r24, r10
    11e2:	f0 01       	movw	r30, r0
    11e4:	8b 9d       	mul	r24, r11
    11e6:	f0 0d       	add	r31, r0
    11e8:	9a 9d       	mul	r25, r10
    11ea:	f0 0d       	add	r31, r0
    11ec:	11 24       	eor	r1, r1
    11ee:	e7 54       	subi	r30, 0x47	; 71
    11f0:	fc 4f       	sbci	r31, 0xFC	; 252
    11f2:	91 82       	std	Z+1, r9	; 0x01
    11f4:	80 82       	st	Z, r8
    11f6:	63 cd       	rjmp	.-1338   	; 0xcbe <OS_Start+0x204>
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <OS_Start+0x748>
    11fe:	7c 83       	std	Y+4, r23	; 0x04
    1200:	6b 83       	std	Y+3, r22	; 0x03
    1202:	8a 9d       	mul	r24, r10
    1204:	f0 01       	movw	r30, r0
    1206:	8b 9d       	mul	r24, r11
    1208:	f0 0d       	add	r31, r0
    120a:	9a 9d       	mul	r25, r10
    120c:	f0 0d       	add	r31, r0
    120e:	11 24       	eor	r1, r1
    1210:	e7 54       	subi	r30, 0x47	; 71
    1212:	fc 4f       	sbci	r31, 0xFC	; 252
    1214:	20 81       	ld	r18, Z
    1216:	31 81       	ldd	r19, Z+1	; 0x01
    1218:	21 30       	cpi	r18, 0x01	; 1
    121a:	31 05       	cpc	r19, r1
    121c:	09 f0       	breq	.+2      	; 0x1220 <OS_Start+0x766>
    121e:	9a cc       	rjmp	.-1740   	; 0xb54 <OS_Start+0x9a>
    1220:	7f cd       	rjmp	.-1282   	; 0xd20 <OS_Start+0x266>
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	02 c0       	rjmp	.+4      	; 0x122c <OS_Start+0x772>
    1228:	7c 83       	std	Y+4, r23	; 0x04
    122a:	6b 83       	std	Y+3, r22	; 0x03
    122c:	fc 01       	movw	r30, r24
    122e:	ee 0f       	add	r30, r30
    1230:	ff 1f       	adc	r31, r31
    1232:	ee 0f       	add	r30, r30
    1234:	ff 1f       	adc	r31, r31
    1236:	ee 0f       	add	r30, r30
    1238:	ff 1f       	adc	r31, r31
    123a:	e8 1b       	sub	r30, r24
    123c:	f9 0b       	sbc	r31, r25
    123e:	e9 59       	subi	r30, 0x99	; 153
    1240:	fd 4f       	sbci	r31, 0xFD	; 253
    1242:	22 81       	ldd	r18, Z+2	; 0x02
    1244:	21 30       	cpi	r18, 0x01	; 1
    1246:	09 f0       	breq	.+2      	; 0x124a <OS_Start+0x790>
    1248:	55 ce       	rjmp	.-854    	; 0xef4 <OS_Start+0x43a>
    124a:	3b ce       	rjmp	.-906    	; 0xec2 <OS_Start+0x408>
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <OS_Start+0x79c>
    1252:	7c 83       	std	Y+4, r23	; 0x04
    1254:	6b 83       	std	Y+3, r22	; 0x03
    1256:	fc 01       	movw	r30, r24
    1258:	ee 0f       	add	r30, r30
    125a:	ff 1f       	adc	r31, r31
    125c:	ee 0f       	add	r30, r30
    125e:	ff 1f       	adc	r31, r31
    1260:	e8 0f       	add	r30, r24
    1262:	f9 1f       	adc	r31, r25
    1264:	e1 5c       	subi	r30, 0xC1	; 193
    1266:	fd 4f       	sbci	r31, 0xFD	; 253
    1268:	23 81       	ldd	r18, Z+3	; 0x03
    126a:	34 81       	ldd	r19, Z+4	; 0x04
    126c:	23 2b       	or	r18, r19
    126e:	09 f0       	breq	.+2      	; 0x1272 <OS_Start+0x7b8>
    1270:	40 cf       	rjmp	.-384    	; 0x10f2 <OS_Start+0x638>
    1272:	02 cf       	rjmp	.-508    	; 0x1078 <OS_Start+0x5be>
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	02 c0       	rjmp	.+4      	; 0x127e <OS_Start+0x7c4>
    127a:	7c 83       	std	Y+4, r23	; 0x04
    127c:	6b 83       	std	Y+3, r22	; 0x03
    127e:	e5 eb       	ldi	r30, 0xB5	; 181
    1280:	f3 e0       	ldi	r31, 0x03	; 3
    1282:	20 81       	ld	r18, Z
    1284:	31 81       	ldd	r19, Z+1	; 0x01
    1286:	42 17       	cp	r20, r18
    1288:	53 07       	cpc	r21, r19
    128a:	39 f0       	breq	.+14     	; 0x129a <OS_Start+0x7e0>
    128c:	e3 ed       	ldi	r30, 0xD3	; 211
    128e:	f4 e0       	ldi	r31, 0x04	; 4
    1290:	94 01       	movw	r18, r8
    1292:	ab 81       	ldd	r26, Y+3	; 0x03
    1294:	bc 81       	ldd	r27, Y+4	; 0x04
    1296:	bc 01       	movw	r22, r24
    1298:	66 cf       	rjmp	.-308    	; 0x1166 <OS_Start+0x6ac>
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	03 c0       	rjmp	.+6      	; 0x12a6 <OS_Start+0x7ec>
    12a0:	bc 83       	std	Y+4, r27	; 0x04
    12a2:	ab 83       	std	Y+3, r26	; 0x03
    12a4:	cb 01       	movw	r24, r22
    12a6:	2a 9d       	mul	r18, r10
    12a8:	a0 01       	movw	r20, r0
    12aa:	2b 9d       	mul	r18, r11
    12ac:	50 0d       	add	r21, r0
    12ae:	3a 9d       	mul	r19, r10
    12b0:	50 0d       	add	r21, r0
    12b2:	11 24       	eor	r1, r1
    12b4:	41 56       	subi	r20, 0x61	; 97
    12b6:	5d 4f       	sbci	r21, 0xFD	; 253
    12b8:	fa 01       	movw	r30, r20
    12ba:	ec 5f       	subi	r30, 0xFC	; 252
    12bc:	fe 4f       	sbci	r31, 0xFE	; 254
    12be:	61 e0       	ldi	r22, 0x01	; 1
    12c0:	60 83       	st	Z, r22
    12c2:	72 96       	adiw	r30, 0x12	; 18
    12c4:	31 82       	std	Z+1, r3	; 0x01
    12c6:	20 82       	st	Z, r2
    12c8:	fc 01       	movw	r30, r24
    12ca:	ee 0f       	add	r30, r30
    12cc:	ff 1f       	adc	r31, r31
    12ce:	ee 0f       	add	r30, r30
    12d0:	ff 1f       	adc	r31, r31
    12d2:	8e 0f       	add	r24, r30
    12d4:	9f 1f       	adc	r25, r31
    12d6:	fc 01       	movw	r30, r24
    12d8:	e1 5c       	subi	r30, 0xC1	; 193
    12da:	fd 4f       	sbci	r31, 0xFD	; 253
    12dc:	14 82       	std	Z+4, r1	; 0x04
    12de:	13 82       	std	Z+3, r1	; 0x03
    12e0:	eb 81       	ldd	r30, Y+3	; 0x03
    12e2:	fc 81       	ldd	r31, Y+4	; 0x04
    12e4:	e9 5f       	subi	r30, 0xF9	; 249
    12e6:	fe 4f       	sbci	r31, 0xFE	; 254
    12e8:	80 81       	ld	r24, Z
    12ea:	91 81       	ldd	r25, Z+1	; 0x01
    12ec:	fa 01       	movw	r30, r20
    12ee:	e9 5f       	subi	r30, 0xF9	; 249
    12f0:	fe 4f       	sbci	r31, 0xFE	; 254
    12f2:	40 81       	ld	r20, Z
    12f4:	51 81       	ldd	r21, Z+1	; 0x01
    12f6:	48 17       	cp	r20, r24
    12f8:	59 07       	cpc	r21, r25
    12fa:	08 f4       	brcc	.+2      	; 0x12fe <OS_Start+0x844>
    12fc:	4f cf       	rjmp	.-354    	; 0x119c <OS_Start+0x6e2>
    12fe:	2a cc       	rjmp	.-1964   	; 0xb54 <OS_Start+0x9a>
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	df 91       	pop	r29
    130a:	cf 91       	pop	r28
    130c:	1f 91       	pop	r17
    130e:	0f 91       	pop	r16
    1310:	ff 90       	pop	r15
    1312:	ef 90       	pop	r14
    1314:	df 90       	pop	r13
    1316:	cf 90       	pop	r12
    1318:	bf 90       	pop	r11
    131a:	af 90       	pop	r10
    131c:	9f 90       	pop	r9
    131e:	8f 90       	pop	r8
    1320:	7f 90       	pop	r7
    1322:	6f 90       	pop	r6
    1324:	5f 90       	pop	r5
    1326:	4f 90       	pop	r4
    1328:	3f 90       	pop	r3
    132a:	2f 90       	pop	r2
    132c:	08 95       	ret

0000132e <Mutex_Init>:
    132e:	80 91 3b 02 	lds	r24, 0x023B
    1332:	90 91 3c 02 	lds	r25, 0x023C
    1336:	89 2b       	or	r24, r25
    1338:	a1 f0       	breq	.+40     	; 0x1362 <Mutex_Init+0x34>
    133a:	f8 94       	cli
    133c:	e0 91 3d 02 	lds	r30, 0x023D
    1340:	f0 91 3e 02 	lds	r31, 0x023E
    1344:	e3 5f       	subi	r30, 0xF3	; 243
    1346:	fe 4f       	sbci	r31, 0xFE	; 254
    1348:	87 e0       	ldi	r24, 0x07	; 7
    134a:	80 83       	st	Z, r24
    134c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    1350:	e0 91 3d 02 	lds	r30, 0x023D
    1354:	f0 91 3e 02 	lds	r31, 0x023E
    1358:	e2 5f       	subi	r30, 0xF2	; 242
    135a:	fe 4f       	sbci	r31, 0xFE	; 254
    135c:	80 81       	ld	r24, Z
    135e:	91 81       	ldd	r25, Z+1	; 0x01
    1360:	08 95       	ret
    1362:	08 95       	ret

00001364 <Event_Init>:
    1364:	80 91 3b 02 	lds	r24, 0x023B
    1368:	90 91 3c 02 	lds	r25, 0x023C
    136c:	89 2b       	or	r24, r25
    136e:	a1 f0       	breq	.+40     	; 0x1398 <Event_Init+0x34>
    1370:	f8 94       	cli
    1372:	e0 91 3d 02 	lds	r30, 0x023D
    1376:	f0 91 3e 02 	lds	r31, 0x023E
    137a:	e3 5f       	subi	r30, 0xF3	; 243
    137c:	fe 4f       	sbci	r31, 0xFE	; 254
    137e:	8a e0       	ldi	r24, 0x0A	; 10
    1380:	80 83       	st	Z, r24
    1382:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    1386:	e0 91 3d 02 	lds	r30, 0x023D
    138a:	f0 91 3e 02 	lds	r31, 0x023E
    138e:	e2 5f       	subi	r30, 0xF2	; 242
    1390:	fe 4f       	sbci	r31, 0xFE	; 254
    1392:	80 81       	ld	r24, Z
    1394:	91 81       	ldd	r25, Z+1	; 0x01
    1396:	08 95       	ret
    1398:	08 95       	ret

0000139a <Task_Create>:
    139a:	20 91 3b 02 	lds	r18, 0x023B
    139e:	30 91 3c 02 	lds	r19, 0x023C
    13a2:	23 2b       	or	r18, r19
    13a4:	f1 f0       	breq	.+60     	; 0x13e2 <Task_Create+0x48>
    13a6:	f8 94       	cli
    13a8:	20 91 3d 02 	lds	r18, 0x023D
    13ac:	30 91 3e 02 	lds	r19, 0x023E
    13b0:	f9 01       	movw	r30, r18
    13b2:	e3 5f       	subi	r30, 0xF3	; 243
    13b4:	fe 4f       	sbci	r31, 0xFE	; 254
    13b6:	a1 e0       	ldi	r26, 0x01	; 1
    13b8:	a0 83       	st	Z, r26
    13ba:	32 97       	sbiw	r30, 0x02	; 2
    13bc:	91 83       	std	Z+1, r25	; 0x01
    13be:	80 83       	st	Z, r24
    13c0:	36 97       	sbiw	r30, 0x06	; 6
    13c2:	71 83       	std	Z+1, r23	; 0x01
    13c4:	60 83       	st	Z, r22
    13c6:	34 96       	adiw	r30, 0x04	; 4
    13c8:	51 83       	std	Z+1, r21	; 0x01
    13ca:	40 83       	st	Z, r20
    13cc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    13d0:	e0 91 3d 02 	lds	r30, 0x023D
    13d4:	f0 91 3e 02 	lds	r31, 0x023E
    13d8:	e2 5f       	subi	r30, 0xF2	; 242
    13da:	fe 4f       	sbci	r31, 0xFE	; 254
    13dc:	80 81       	ld	r24, Z
    13de:	91 81       	ldd	r25, Z+1	; 0x01
    13e0:	08 95       	ret
    13e2:	62 c9       	rjmp	.-3388   	; 0x6a8 <Kernel_Create_Task>
    13e4:	08 95       	ret

000013e6 <Task_Next>:
    13e6:	80 91 3b 02 	lds	r24, 0x023B
    13ea:	90 91 3c 02 	lds	r25, 0x023C
    13ee:	89 2b       	or	r24, r25
    13f0:	59 f0       	breq	.+22     	; 0x1408 <Task_Next+0x22>
    13f2:	f8 94       	cli
    13f4:	e0 91 3d 02 	lds	r30, 0x023D
    13f8:	f0 91 3e 02 	lds	r31, 0x023E
    13fc:	e3 5f       	subi	r30, 0xF3	; 243
    13fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1400:	82 e0       	ldi	r24, 0x02	; 2
    1402:	80 83       	st	Z, r24
    1404:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <Enter_Kernel>
    1408:	08 95       	ret

0000140a <setup>:
  * Setup pins and timers
  */
void setup() {
	/** For testing */
	/** pin 47 */
	init_LED_PORTL_pin2();
    140a:	4b d8       	rcall	.-3946   	; 0x4a2 <init_LED_PORTL_pin2>

	/** pin 43 */
	init_LED_PORTL_pin6();
    140c:	56 d8       	rcall	.-3924   	; 0x4ba <init_LED_PORTL_pin6>

	/** pin 44 */
	init_LED_PORTL_pin5();
    140e:	4f d8       	rcall	.-3938   	; 0x4ae <init_LED_PORTL_pin5>

	/** pin 49 */
	init_LED_PORTL_pin0();
    1410:	3c d8       	rcall	.-3976   	; 0x48a <init_LED_PORTL_pin0>

	/** pin 48 */
	init_LED_PORTL_pin1();
    1412:	41 d8       	rcall	.-3966   	; 0x496 <init_LED_PORTL_pin1>

	/** initialize Timer1 16 bit timer */
	Disable_Interrupt();
    1414:	f8 94       	cli

	/** Timer 1 */
	TCCR1A = 0;                 /** Set TCCR1A register to 0 */
    1416:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;                 /** Set TCCR1B register to 0 */
    141a:	e1 e8       	ldi	r30, 0x81	; 129
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	10 82       	st	Z, r1

	TCNT1 = 0;                  /** Initialize counter to 0 */
    1420:	10 92 85 00 	sts	0x0085, r1
    1424:	10 92 84 00 	sts	0x0084, r1

	OCR1A = 624;                /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
    1428:	80 e7       	ldi	r24, 0x70	; 112
    142a:	92 e0       	ldi	r25, 0x02	; 2
    142c:	90 93 89 00 	sts	0x0089, r25
    1430:	80 93 88 00 	sts	0x0088, r24

	TCCR1B |= (1 << WGM12);     /** Turns on CTC mode (TOP is now OCR1A) */
    1434:	80 81       	ld	r24, Z
    1436:	88 60       	ori	r24, 0x08	; 8
    1438:	80 83       	st	Z, r24

	TCCR1B |= (1 << CS12);      /** Prescaler 256 */
    143a:	80 81       	ld	r24, Z
    143c:	84 60       	ori	r24, 0x04	; 4
    143e:	80 83       	st	Z, r24

	TIMSK1 |= (1 << OCIE1A);    /** Enable timer compare interrupt */
    1440:	ef e6       	ldi	r30, 0x6F	; 111
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	82 60       	ori	r24, 0x02	; 2
    1448:	80 83       	st	Z, r24

	/** Timer 3 */
	TCCR3A = 0;                 /** Set TCCR0A register to 0 */
    144a:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0;                 /** Set TCCR0B register to 0 */
    144e:	e1 e9       	ldi	r30, 0x91	; 145
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	10 82       	st	Z, r1

	TCNT3 = 0;                  /** Initialize counter to 0 */
    1454:	10 92 95 00 	sts	0x0095, r1
    1458:	10 92 94 00 	sts	0x0094, r1

	OCR3A = 62499;              /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
    145c:	83 e2       	ldi	r24, 0x23	; 35
    145e:	94 ef       	ldi	r25, 0xF4	; 244
    1460:	90 93 99 00 	sts	0x0099, r25
    1464:	80 93 98 00 	sts	0x0098, r24

	TCCR3B |= (1 << WGM32);     /** Turns on CTC mode (TOP is now OCR1A) */
    1468:	80 81       	ld	r24, Z
    146a:	88 60       	ori	r24, 0x08	; 8
    146c:	80 83       	st	Z, r24

	TCCR3B |= (1 << CS32);      /** Prescaler 1024 */
    146e:	80 81       	ld	r24, Z
    1470:	84 60       	ori	r24, 0x04	; 4
    1472:	80 83       	st	Z, r24

	TIMSK3 = (1 << OCIE3A);
    1474:	82 e0       	ldi	r24, 0x02	; 2
    1476:	80 93 71 00 	sts	0x0071, r24

	Enable_Interrupt();
    147a:	78 94       	sei
    147c:	08 95       	ret

0000147e <__vector_17>:
}

/**
  * ISR for timer1
  */
ISR(TIMER1_COMPA_vect) {
    147e:	1f 92       	push	r1
    1480:	0f 92       	push	r0
    1482:	0f b6       	in	r0, 0x3f	; 63
    1484:	0f 92       	push	r0
    1486:	11 24       	eor	r1, r1
    1488:	0b b6       	in	r0, 0x3b	; 59
    148a:	0f 92       	push	r0
    148c:	df 92       	push	r13
    148e:	ef 92       	push	r14
    1490:	ff 92       	push	r15
    1492:	0f 93       	push	r16
    1494:	1f 93       	push	r17
    1496:	2f 93       	push	r18
    1498:	3f 93       	push	r19
    149a:	4f 93       	push	r20
    149c:	5f 93       	push	r21
    149e:	6f 93       	push	r22
    14a0:	7f 93       	push	r23
    14a2:	8f 93       	push	r24
    14a4:	9f 93       	push	r25
    14a6:	af 93       	push	r26
    14a8:	bf 93       	push	r27
    14aa:	ef 93       	push	r30
    14ac:	ff 93       	push	r31
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	00 d0       	rcall	.+0      	; 0x14b4 <__vector_17+0x36>
    14b4:	1f 92       	push	r1
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
    14ba:	80 91 2d 02 	lds	r24, 0x022D
    14be:	90 91 2e 02 	lds	r25, 0x022E
    14c2:	01 97       	sbiw	r24, 0x01	; 1
    14c4:	9a 83       	std	Y+2, r25	; 0x02
    14c6:	89 83       	std	Y+1, r24	; 0x01
    14c8:	89 81       	ldd	r24, Y+1	; 0x01
    14ca:	9a 81       	ldd	r25, Y+2	; 0x02
    14cc:	99 23       	and	r25, r25
    14ce:	0c f4       	brge	.+2      	; 0x14d2 <__vector_17+0x54>
    14d0:	7c c0       	rjmp	.+248    	; 0x15ca <__vector_17+0x14c>
		if ((SleepQueue[i]->wakeTickOverflow <= tickOverflowCount) && (SleepQueue[i]->wakeTick <= (TCNT3/625))) {
    14d2:	e9 81       	ldd	r30, Y+1	; 0x01
    14d4:	fa 81       	ldd	r31, Y+2	; 0x02
    14d6:	ee 0f       	add	r30, r30
    14d8:	ff 1f       	adc	r31, r31
    14da:	e1 56       	subi	r30, 0x61	; 97
    14dc:	f9 4e       	sbci	r31, 0xE9	; 233
    14de:	01 90       	ld	r0, Z+
    14e0:	f0 81       	ld	r31, Z
    14e2:	e0 2d       	mov	r30, r0
    14e4:	e0 5f       	subi	r30, 0xF0	; 240
    14e6:	fe 4f       	sbci	r31, 0xFE	; 254
    14e8:	20 81       	ld	r18, Z
    14ea:	31 81       	ldd	r19, Z+1	; 0x01
    14ec:	80 91 31 02 	lds	r24, 0x0231
    14f0:	90 91 32 02 	lds	r25, 0x0232
    14f4:	82 17       	cp	r24, r18
    14f6:	93 07       	cpc	r25, r19
    14f8:	08 f4       	brcc	.+2      	; 0x14fc <__vector_17+0x7e>
    14fa:	67 c0       	rjmp	.+206    	; 0x15ca <__vector_17+0x14c>
    14fc:	e9 81       	ldd	r30, Y+1	; 0x01
    14fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1500:	ee 0f       	add	r30, r30
    1502:	ff 1f       	adc	r31, r31
    1504:	e1 56       	subi	r30, 0x61	; 97
    1506:	f9 4e       	sbci	r31, 0xE9	; 233
    1508:	01 90       	ld	r0, Z+
    150a:	f0 81       	ld	r31, Z
    150c:	e0 2d       	mov	r30, r0
    150e:	ee 5e       	subi	r30, 0xEE	; 238
    1510:	fe 4f       	sbci	r31, 0xFE	; 254
    1512:	20 81       	ld	r18, Z
    1514:	31 81       	ldd	r19, Z+1	; 0x01
    1516:	80 91 94 00 	lds	r24, 0x0094
    151a:	90 91 95 00 	lds	r25, 0x0095
    151e:	61 e7       	ldi	r22, 0x71	; 113
    1520:	72 e0       	ldi	r23, 0x02	; 2
    1522:	33 d5       	rcall	.+2662   	; 0x1f8a <__udivmodhi4>
    1524:	62 17       	cp	r22, r18
    1526:	73 07       	cpc	r23, r19
    1528:	58 f5       	brcc	.+86     	; 0x1580 <__vector_17+0x102>
    152a:	4f c0       	rjmp	.+158    	; 0x15ca <__vector_17+0x14c>
    152c:	e9 81       	ldd	r30, Y+1	; 0x01
    152e:	fa 81       	ldd	r31, Y+2	; 0x02
    1530:	ee 0f       	add	r30, r30
    1532:	ff 1f       	adc	r31, r31
    1534:	e1 56       	subi	r30, 0x61	; 97
    1536:	f9 4e       	sbci	r31, 0xE9	; 233
    1538:	01 90       	ld	r0, Z+
    153a:	f0 81       	ld	r31, Z
    153c:	e0 2d       	mov	r30, r0
    153e:	e0 5f       	subi	r30, 0xF0	; 240
    1540:	fe 4f       	sbci	r31, 0xFE	; 254
    1542:	20 81       	ld	r18, Z
    1544:	31 81       	ldd	r19, Z+1	; 0x01
    1546:	80 91 31 02 	lds	r24, 0x0231
    154a:	90 91 32 02 	lds	r25, 0x0232
    154e:	82 17       	cp	r24, r18
    1550:	93 07       	cpc	r25, r19
    1552:	d8 f1       	brcs	.+118    	; 0x15ca <__vector_17+0x14c>
    1554:	e9 81       	ldd	r30, Y+1	; 0x01
    1556:	fa 81       	ldd	r31, Y+2	; 0x02
    1558:	ee 0f       	add	r30, r30
    155a:	ff 1f       	adc	r31, r31
    155c:	e1 56       	subi	r30, 0x61	; 97
    155e:	f9 4e       	sbci	r31, 0xE9	; 233
    1560:	01 90       	ld	r0, Z+
    1562:	f0 81       	ld	r31, Z
    1564:	e0 2d       	mov	r30, r0
    1566:	ee 5e       	subi	r30, 0xEE	; 238
    1568:	fe 4f       	sbci	r31, 0xFE	; 254
    156a:	20 81       	ld	r18, Z
    156c:	31 81       	ldd	r19, Z+1	; 0x01
    156e:	f7 01       	movw	r30, r14
    1570:	80 81       	ld	r24, Z
    1572:	91 81       	ldd	r25, Z+1	; 0x01
    1574:	b8 01       	movw	r22, r16
    1576:	09 d5       	rcall	.+2578   	; 0x1f8a <__udivmodhi4>
    1578:	62 17       	cp	r22, r18
    157a:	73 07       	cpc	r23, r19
    157c:	50 f4       	brcc	.+20     	; 0x1592 <__vector_17+0x114>
    157e:	25 c0       	rjmp	.+74     	; 0x15ca <__vector_17+0x14c>
			volatile PD *p = dequeue(&SleepQueue, &SQCount);
			p->state = READY;
    1580:	dd 24       	eor	r13, r13
    1582:	d3 94       	inc	r13
ISR(TIMER1_COMPA_vect) {

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
		if ((SleepQueue[i]->wakeTickOverflow <= tickOverflowCount) && (SleepQueue[i]->wakeTick <= (TCNT3/625))) {
    1584:	0f 2e       	mov	r0, r31
    1586:	f4 e9       	ldi	r31, 0x94	; 148
    1588:	ef 2e       	mov	r14, r31
    158a:	f1 2c       	mov	r15, r1
    158c:	f0 2d       	mov	r31, r0
    158e:	01 e7       	ldi	r16, 0x71	; 113
    1590:	12 e0       	ldi	r17, 0x02	; 2
			volatile PD *p = dequeue(&SleepQueue, &SQCount);
    1592:	6d e2       	ldi	r22, 0x2D	; 45
    1594:	72 e0       	ldi	r23, 0x02	; 2
    1596:	8f e9       	ldi	r24, 0x9F	; 159
    1598:	96 e1       	ldi	r25, 0x16	; 22
    159a:	1c d2       	rcall	.+1080   	; 0x19d4 <dequeue>
    159c:	9c 83       	std	Y+4, r25	; 0x04
    159e:	8b 83       	std	Y+3, r24	; 0x03
			p->state = READY;
    15a0:	fc 01       	movw	r30, r24
    15a2:	ec 5f       	subi	r30, 0xFC	; 252
    15a4:	fe 4f       	sbci	r31, 0xFE	; 254
    15a6:	d0 82       	st	Z, r13
			enqueueRQ(&p, &ReadyQueue, &RQCount);
    15a8:	4f e2       	ldi	r20, 0x2F	; 47
    15aa:	52 e0       	ldi	r21, 0x02	; 2
    15ac:	6f eb       	ldi	r22, 0xBF	; 191
    15ae:	76 e1       	ldi	r23, 0x16	; 22
    15b0:	ce 01       	movw	r24, r28
    15b2:	03 96       	adiw	r24, 0x03	; 3
    15b4:	ec d0       	rcall	.+472    	; 0x178e <enqueueRQ>
  */
ISR(TIMER1_COMPA_vect) {

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
    15b8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ba:	01 97       	sbiw	r24, 0x01	; 1
    15bc:	9a 83       	std	Y+2, r25	; 0x02
    15be:	89 83       	std	Y+1, r24	; 0x01
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	9a 81       	ldd	r25, Y+2	; 0x02
    15c4:	99 23       	and	r25, r25
    15c6:	0c f0       	brlt	.+2      	; 0x15ca <__vector_17+0x14c>
    15c8:	b1 cf       	rjmp	.-158    	; 0x152c <__vector_17+0xae>
		else {
			break;
		}
	}

	Task_Next();
    15ca:	0d df       	rcall	.-486    	; 0x13e6 <Task_Next>
}
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	df 91       	pop	r29
    15d6:	cf 91       	pop	r28
    15d8:	ff 91       	pop	r31
    15da:	ef 91       	pop	r30
    15dc:	bf 91       	pop	r27
    15de:	af 91       	pop	r26
    15e0:	9f 91       	pop	r25
    15e2:	8f 91       	pop	r24
    15e4:	7f 91       	pop	r23
    15e6:	6f 91       	pop	r22
    15e8:	5f 91       	pop	r21
    15ea:	4f 91       	pop	r20
    15ec:	3f 91       	pop	r19
    15ee:	2f 91       	pop	r18
    15f0:	1f 91       	pop	r17
    15f2:	0f 91       	pop	r16
    15f4:	ff 90       	pop	r15
    15f6:	ef 90       	pop	r14
    15f8:	df 90       	pop	r13
    15fa:	0f 90       	pop	r0
    15fc:	0b be       	out	0x3b, r0	; 59
    15fe:	0f 90       	pop	r0
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	0f 90       	pop	r0
    1604:	1f 90       	pop	r1
    1606:	18 95       	reti

00001608 <__vector_32>:

/**
  * ISR for timer3
  */
ISR(TIMER3_COMPA_vect) {
    1608:	1f 92       	push	r1
    160a:	0f 92       	push	r0
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	0f 92       	push	r0
    1610:	11 24       	eor	r1, r1
    1612:	8f 93       	push	r24
    1614:	9f 93       	push	r25
	tickOverflowCount += 1;
    1616:	80 91 31 02 	lds	r24, 0x0231
    161a:	90 91 32 02 	lds	r25, 0x0232
    161e:	01 96       	adiw	r24, 0x01	; 1
    1620:	90 93 32 02 	sts	0x0232, r25
    1624:	80 93 31 02 	sts	0x0231, r24
}
    1628:	9f 91       	pop	r25
    162a:	8f 91       	pop	r24
    162c:	0f 90       	pop	r0
    162e:	0f be       	out	0x3f, r0	; 63
    1630:	0f 90       	pop	r0
    1632:	1f 90       	pop	r1
    1634:	18 95       	reti

00001636 <main>:

/**
  * This function boots the OS and creates the first task: a_main
  */
void main() {
	setup();
    1636:	e9 de       	rcall	.-558    	; 0x140a <setup>
	
	OS_Init();
    1638:	93 d8       	rcall	.-3802   	; 0x760 <OS_Init>
	Task_Create(a_main, 0, 1);
    163a:	41 e0       	ldi	r20, 0x01	; 1
    163c:	50 e0       	ldi	r21, 0x00	; 0
    163e:	60 e0       	ldi	r22, 0x00	; 0
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	88 e8       	ldi	r24, 0x88	; 136
    1644:	92 e0       	ldi	r25, 0x02	; 2
    1646:	a9 de       	rcall	.-686    	; 0x139a <Task_Create>
	OS_Start();
    1648:	38 ca       	rjmp	.-2960   	; 0xaba <OS_Start>
    164a:	08 95       	ret

0000164c <enqueueWQ>:
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
}

void enqueueWQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    164c:	cf 93       	push	r28
    164e:	df 93       	push	r29
    1650:	ea 01       	movw	r28, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    1652:	28 81       	ld	r18, Y
    1654:	39 81       	ldd	r19, Y+1	; 0x01
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
}

void enqueueWQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    1656:	2f 30       	cpi	r18, 0x0F	; 15
    1658:	31 05       	cpc	r19, r1
    165a:	29 f1       	breq	.+74     	; 0x16a6 <enqueueWQ+0x5a>
        return;
    }

    int i = (*QCount) - 1;
    165c:	e8 81       	ld	r30, Y
    165e:	f9 81       	ldd	r31, Y+1	; 0x01
    1660:	9f 01       	movw	r18, r30
    1662:	21 50       	subi	r18, 0x01	; 1
    1664:	31 09       	sbc	r19, r1

    while(i >= 0) {
    1666:	72 f0       	brmi	.+28     	; 0x1684 <enqueueWQ+0x38>
    1668:	ee 0f       	add	r30, r30
    166a:	ff 1f       	adc	r31, r31
    166c:	e6 0f       	add	r30, r22
    166e:	f7 1f       	adc	r31, r23
    1670:	db 01       	movw	r26, r22
        Queue[i+1] = Queue[i];
    1672:	32 91       	ld	r19, -Z
    1674:	22 91       	ld	r18, -Z
    1676:	33 83       	std	Z+3, r19	; 0x03
    1678:	22 83       	std	Z+2, r18	; 0x02
        return;
    }

    int i = (*QCount) - 1;

    while(i >= 0) {
    167a:	ea 17       	cp	r30, r26
    167c:	fb 07       	cpc	r31, r27
    167e:	c9 f7       	brne	.-14     	; 0x1672 <enqueueWQ+0x26>
        Queue[i+1] = Queue[i];
        i--;
    1680:	2f ef       	ldi	r18, 0xFF	; 255
    1682:	3f ef       	ldi	r19, 0xFF	; 255
    }

    Queue[i+1] = *p;
    1684:	fc 01       	movw	r30, r24
    1686:	80 81       	ld	r24, Z
    1688:	91 81       	ldd	r25, Z+1	; 0x01
    168a:	2f 5f       	subi	r18, 0xFF	; 255
    168c:	3f 4f       	sbci	r19, 0xFF	; 255
    168e:	22 0f       	add	r18, r18
    1690:	33 1f       	adc	r19, r19
    1692:	fb 01       	movw	r30, r22
    1694:	e2 0f       	add	r30, r18
    1696:	f3 1f       	adc	r31, r19
    1698:	91 83       	std	Z+1, r25	; 0x01
    169a:	80 83       	st	Z, r24
    (*QCount)++;
    169c:	88 81       	ld	r24, Y
    169e:	99 81       	ldd	r25, Y+1	; 0x01
    16a0:	01 96       	adiw	r24, 0x01	; 1
    16a2:	99 83       	std	Y+1, r25	; 0x01
    16a4:	88 83       	st	Y, r24
}
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	08 95       	ret

000016ac <enqueueSQ>:

void enqueueSQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    16ac:	cf 92       	push	r12
    16ae:	df 92       	push	r13
    16b0:	ef 92       	push	r14
    16b2:	ff 92       	push	r15
    16b4:	0f 93       	push	r16
    16b6:	1f 93       	push	r17
    16b8:	cf 93       	push	r28
    16ba:	df 93       	push	r29

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    16bc:	ea 01       	movw	r28, r20
    16be:	28 81       	ld	r18, Y
    16c0:	39 81       	ldd	r19, Y+1	; 0x01
    Queue[i+1] = *p;
    (*QCount)++;
}

void enqueueSQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    16c2:	2f 30       	cpi	r18, 0x0F	; 15
    16c4:	31 05       	cpc	r19, r1
    16c6:	09 f4       	brne	.+2      	; 0x16ca <enqueueSQ+0x1e>
    16c8:	59 c0       	rjmp	.+178    	; 0x177c <enqueueSQ+0xd0>
        return;
    }

    int i = (*QCount) - 1;
    16ca:	a8 81       	ld	r26, Y
    16cc:	b9 81       	ldd	r27, Y+1	; 0x01
    16ce:	11 97       	sbiw	r26, 0x01	; 1

    volatile PD *new = *p;
    16d0:	fc 01       	movw	r30, r24
    16d2:	c0 80       	ld	r12, Z
    16d4:	d1 80       	ldd	r13, Z+1	; 0x01

    volatile PD *temp = Queue[i];
    16d6:	fd 01       	movw	r30, r26
    16d8:	ee 0f       	add	r30, r30
    16da:	ff 1f       	adc	r31, r31
    16dc:	eb 01       	movw	r28, r22
    16de:	ce 0f       	add	r28, r30
    16e0:	df 1f       	adc	r29, r31
    16e2:	28 81       	ld	r18, Y
    16e4:	39 81       	ldd	r19, Y+1	; 0x01

    while(i >= 0 && ((new->wakeTickOverflow > temp->wakeTickOverflow) || ((new->wakeTickOverflow >= temp->wakeTickOverflow) && (new->wakeTick >= temp->wakeTick)))) {
    16e6:	bb 23       	and	r27, r27
    16e8:	cc f1       	brlt	.+114    	; 0x175c <enqueueSQ+0xb0>
    16ea:	fe 01       	movw	r30, r28
    16ec:	76 01       	movw	r14, r12
    16ee:	c0 ef       	ldi	r28, 0xF0	; 240
    16f0:	ec 1a       	sub	r14, r28
    16f2:	ce ef       	ldi	r28, 0xFE	; 254
    16f4:	fc 0a       	sbc	r15, r28
    16f6:	de ee       	ldi	r29, 0xEE	; 238
    16f8:	cd 1a       	sub	r12, r29
    16fa:	de ef       	ldi	r29, 0xFE	; 254
    16fc:	dd 0a       	sbc	r13, r29
    16fe:	0b c0       	rjmp	.+22     	; 0x1716 <enqueueSQ+0x6a>
        Queue[i+1] = Queue[i];
    1700:	20 81       	ld	r18, Z
    1702:	31 81       	ldd	r19, Z+1	; 0x01
    1704:	33 83       	std	Z+3, r19	; 0x03
    1706:	22 83       	std	Z+2, r18	; 0x02
        i--;
    1708:	11 97       	sbiw	r26, 0x01	; 1
        temp = Queue[i];
    170a:	32 91       	ld	r19, -Z
    170c:	22 91       	ld	r18, -Z

    volatile PD *new = *p;

    volatile PD *temp = Queue[i];

    while(i >= 0 && ((new->wakeTickOverflow > temp->wakeTickOverflow) || ((new->wakeTickOverflow >= temp->wakeTickOverflow) && (new->wakeTick >= temp->wakeTick)))) {
    170e:	af 3f       	cpi	r26, 0xFF	; 255
    1710:	cf ef       	ldi	r28, 0xFF	; 255
    1712:	bc 07       	cpc	r27, r28
    1714:	19 f1       	breq	.+70     	; 0x175c <enqueueSQ+0xb0>
    1716:	e7 01       	movw	r28, r14
    1718:	08 81       	ld	r16, Y
    171a:	19 81       	ldd	r17, Y+1	; 0x01
    171c:	e9 01       	movw	r28, r18
    171e:	c0 5f       	subi	r28, 0xF0	; 240
    1720:	de 4f       	sbci	r29, 0xFE	; 254
    1722:	09 90       	ld	r0, Y+
    1724:	d8 81       	ld	r29, Y
    1726:	c0 2d       	mov	r28, r0
    1728:	c0 17       	cp	r28, r16
    172a:	d1 07       	cpc	r29, r17
    172c:	48 f3       	brcs	.-46     	; 0x1700 <enqueueSQ+0x54>
    172e:	e7 01       	movw	r28, r14
    1730:	08 81       	ld	r16, Y
    1732:	19 81       	ldd	r17, Y+1	; 0x01
    1734:	e9 01       	movw	r28, r18
    1736:	c0 5f       	subi	r28, 0xF0	; 240
    1738:	de 4f       	sbci	r29, 0xFE	; 254
    173a:	09 90       	ld	r0, Y+
    173c:	d8 81       	ld	r29, Y
    173e:	c0 2d       	mov	r28, r0
    1740:	0c 17       	cp	r16, r28
    1742:	1d 07       	cpc	r17, r29
    1744:	58 f0       	brcs	.+22     	; 0x175c <enqueueSQ+0xb0>
    1746:	e6 01       	movw	r28, r12
    1748:	08 81       	ld	r16, Y
    174a:	19 81       	ldd	r17, Y+1	; 0x01
    174c:	2e 5e       	subi	r18, 0xEE	; 238
    174e:	3e 4f       	sbci	r19, 0xFE	; 254
    1750:	e9 01       	movw	r28, r18
    1752:	28 81       	ld	r18, Y
    1754:	39 81       	ldd	r19, Y+1	; 0x01
    1756:	02 17       	cp	r16, r18
    1758:	13 07       	cpc	r17, r19
    175a:	90 f6       	brcc	.-92     	; 0x1700 <enqueueSQ+0x54>
        Queue[i+1] = Queue[i];
        i--;
        temp = Queue[i];
    }

    Queue[i+1] = *p;
    175c:	fc 01       	movw	r30, r24
    175e:	80 81       	ld	r24, Z
    1760:	91 81       	ldd	r25, Z+1	; 0x01
    1762:	11 96       	adiw	r26, 0x01	; 1
    1764:	aa 0f       	add	r26, r26
    1766:	bb 1f       	adc	r27, r27
    1768:	a6 0f       	add	r26, r22
    176a:	b7 1f       	adc	r27, r23
    176c:	8d 93       	st	X+, r24
    176e:	9c 93       	st	X, r25
    (*QCount)++;
    1770:	ea 01       	movw	r28, r20
    1772:	88 81       	ld	r24, Y
    1774:	99 81       	ldd	r25, Y+1	; 0x01
    1776:	01 96       	adiw	r24, 0x01	; 1
    1778:	99 83       	std	Y+1, r25	; 0x01
    177a:	88 83       	st	Y, r24
}
    177c:	df 91       	pop	r29
    177e:	cf 91       	pop	r28
    1780:	1f 91       	pop	r17
    1782:	0f 91       	pop	r16
    1784:	ff 90       	pop	r15
    1786:	ef 90       	pop	r14
    1788:	df 90       	pop	r13
    178a:	cf 90       	pop	r12
    178c:	08 95       	ret

0000178e <enqueueRQ>:

/*
 *  Insert into the queue sorted by priority
 */
void enqueueRQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    178e:	cf 92       	push	r12
    1790:	df 92       	push	r13
    1792:	ef 92       	push	r14
    1794:	ff 92       	push	r15
    1796:	0f 93       	push	r16
    1798:	1f 93       	push	r17
    179a:	cf 93       	push	r28
    179c:	df 93       	push	r29
    179e:	6a 01       	movw	r12, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    17a0:	ea 01       	movw	r28, r20
    17a2:	28 81       	ld	r18, Y
    17a4:	39 81       	ldd	r19, Y+1	; 0x01

/*
 *  Insert into the queue sorted by priority
 */
void enqueueRQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    17a6:	2f 30       	cpi	r18, 0x0F	; 15
    17a8:	31 05       	cpc	r19, r1
    17aa:	09 f4       	brne	.+2      	; 0x17ae <enqueueRQ+0x20>
    17ac:	4a c0       	rjmp	.+148    	; 0x1842 <enqueueRQ+0xb4>
        return;
    }

    int i = (*QCount) - 1;
    17ae:	28 81       	ld	r18, Y
    17b0:	39 81       	ldd	r19, Y+1	; 0x01
    17b2:	21 50       	subi	r18, 0x01	; 1
    17b4:	31 09       	sbc	r19, r1

    volatile PD *new = *p;
    17b6:	fc 01       	movw	r30, r24
    17b8:	00 81       	ld	r16, Z
    17ba:	11 81       	ldd	r17, Z+1	; 0x01

    volatile PD *temp = Queue[i];
    17bc:	f9 01       	movw	r30, r18
    17be:	ee 0f       	add	r30, r30
    17c0:	ff 1f       	adc	r31, r31
    17c2:	db 01       	movw	r26, r22
    17c4:	ae 0f       	add	r26, r30
    17c6:	bf 1f       	adc	r27, r31
    17c8:	4d 91       	ld	r20, X+
    17ca:	5c 91       	ld	r21, X

    while(i >= 0 && (new->inheritedPy >= temp->inheritedPy)) {
    17cc:	33 23       	and	r19, r19
    17ce:	3c f1       	brlt	.+78     	; 0x181e <enqueueRQ+0x90>
    17d0:	d8 01       	movw	r26, r16
    17d2:	a9 5f       	subi	r26, 0xF9	; 249
    17d4:	be 4f       	sbci	r27, 0xFE	; 254
    17d6:	ed 90       	ld	r14, X+
    17d8:	fc 90       	ld	r15, X
    17da:	da 01       	movw	r26, r20
    17dc:	a9 5f       	subi	r26, 0xF9	; 249
    17de:	be 4f       	sbci	r27, 0xFE	; 254
    17e0:	4d 91       	ld	r20, X+
    17e2:	5c 91       	ld	r21, X
    17e4:	e4 16       	cp	r14, r20
    17e6:	f5 06       	cpc	r15, r21
    17e8:	d0 f0       	brcs	.+52     	; 0x181e <enqueueRQ+0x90>
    17ea:	e6 0f       	add	r30, r22
    17ec:	f7 1f       	adc	r31, r23
    17ee:	09 5f       	subi	r16, 0xF9	; 249
    17f0:	1e 4f       	sbci	r17, 0xFE	; 254
        Queue[i+1] = Queue[i];
    17f2:	a0 81       	ld	r26, Z
    17f4:	b1 81       	ldd	r27, Z+1	; 0x01
    17f6:	b3 83       	std	Z+3, r27	; 0x03
    17f8:	a2 83       	std	Z+2, r26	; 0x02
        i--;
    17fa:	21 50       	subi	r18, 0x01	; 1
    17fc:	31 09       	sbc	r19, r1
        temp = Queue[i];
    17fe:	b2 91       	ld	r27, -Z
    1800:	a2 91       	ld	r26, -Z

    volatile PD *new = *p;

    volatile PD *temp = Queue[i];

    while(i >= 0 && (new->inheritedPy >= temp->inheritedPy)) {
    1802:	2f 3f       	cpi	r18, 0xFF	; 255
    1804:	4f ef       	ldi	r20, 0xFF	; 255
    1806:	34 07       	cpc	r19, r20
    1808:	51 f0       	breq	.+20     	; 0x181e <enqueueRQ+0x90>
    180a:	e8 01       	movw	r28, r16
    180c:	e8 80       	ld	r14, Y
    180e:	f9 80       	ldd	r15, Y+1	; 0x01
    1810:	a9 5f       	subi	r26, 0xF9	; 249
    1812:	be 4f       	sbci	r27, 0xFE	; 254
    1814:	4d 91       	ld	r20, X+
    1816:	5c 91       	ld	r21, X
    1818:	e4 16       	cp	r14, r20
    181a:	f5 06       	cpc	r15, r21
    181c:	50 f7       	brcc	.-44     	; 0x17f2 <enqueueRQ+0x64>
        Queue[i+1] = Queue[i];
        i--;
        temp = Queue[i];
    }

    Queue[i+1] = *p;
    181e:	fc 01       	movw	r30, r24
    1820:	80 81       	ld	r24, Z
    1822:	91 81       	ldd	r25, Z+1	; 0x01
    1824:	2f 5f       	subi	r18, 0xFF	; 255
    1826:	3f 4f       	sbci	r19, 0xFF	; 255
    1828:	22 0f       	add	r18, r18
    182a:	33 1f       	adc	r19, r19
    182c:	fb 01       	movw	r30, r22
    182e:	e2 0f       	add	r30, r18
    1830:	f3 1f       	adc	r31, r19
    1832:	91 83       	std	Z+1, r25	; 0x01
    1834:	80 83       	st	Z, r24
    (*QCount)++;
    1836:	e6 01       	movw	r28, r12
    1838:	88 81       	ld	r24, Y
    183a:	99 81       	ldd	r25, Y+1	; 0x01
    183c:	01 96       	adiw	r24, 0x01	; 1
    183e:	99 83       	std	Y+1, r25	; 0x01
    1840:	88 83       	st	Y, r24
}
    1842:	df 91       	pop	r29
    1844:	cf 91       	pop	r28
    1846:	1f 91       	pop	r17
    1848:	0f 91       	pop	r16
    184a:	ff 90       	pop	r15
    184c:	ef 90       	pop	r14
    184e:	df 90       	pop	r13
    1850:	cf 90       	pop	r12
    1852:	08 95       	ret

00001854 <dequeueWQ>:

/*
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {
    1854:	0f 93       	push	r16
    1856:	1f 93       	push	r17
    1858:	cf 93       	push	r28
    185a:	df 93       	push	r29

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    185c:	eb 01       	movw	r28, r22
    185e:	28 81       	ld	r18, Y
    1860:	39 81       	ldd	r19, Y+1	; 0x01
/*
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {

    if(isEmpty(QCount)) {
    1862:	23 2b       	or	r18, r19
    1864:	09 f4       	brne	.+2      	; 0x1868 <dequeueWQ+0x14>
    1866:	54 c0       	rjmp	.+168    	; 0x1910 <dequeueWQ+0xbc>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
    1868:	28 81       	ld	r18, Y
    186a:	39 81       	ldd	r19, Y+1	; 0x01
    186c:	21 50       	subi	r18, 0x01	; 1
    186e:	31 09       	sbc	r19, r1
    1870:	0a f4       	brpl	.+2      	; 0x1874 <dequeueWQ+0x20>
    1872:	51 c0       	rjmp	.+162    	; 0x1916 <dequeueWQ+0xc2>
        if(Queue[i]->m == m){
    1874:	e9 01       	movw	r28, r18
    1876:	cc 0f       	add	r28, r28
    1878:	dd 1f       	adc	r29, r29
    187a:	fc 01       	movw	r30, r24
    187c:	ec 0f       	add	r30, r28
    187e:	fd 1f       	adc	r31, r29
    1880:	a0 81       	ld	r26, Z
    1882:	b1 81       	ldd	r27, Z+1	; 0x01
    1884:	fd 01       	movw	r30, r26
    1886:	ec 5e       	subi	r30, 0xEC	; 236
    1888:	fe 4f       	sbci	r31, 0xFE	; 254
    188a:	01 90       	ld	r0, Z+
    188c:	f0 81       	ld	r31, Z
    188e:	e0 2d       	mov	r30, r0
    1890:	e4 17       	cp	r30, r20
    1892:	f5 07       	cpc	r31, r21
    1894:	81 f4       	brne	.+32     	; 0x18b6 <dequeueWQ+0x62>
    1896:	0a c0       	rjmp	.+20     	; 0x18ac <dequeueWQ+0x58>
    1898:	ba 91       	ld	r27, -Y
    189a:	aa 91       	ld	r26, -Y
    189c:	fd 01       	movw	r30, r26
    189e:	ec 5e       	subi	r30, 0xEC	; 236
    18a0:	fe 4f       	sbci	r31, 0xFE	; 254
    18a2:	00 81       	ld	r16, Z
    18a4:	11 81       	ldd	r17, Z+1	; 0x01
    18a6:	04 17       	cp	r16, r20
    18a8:	15 07       	cpc	r17, r21
    18aa:	39 f4       	brne	.+14     	; 0x18ba <dequeueWQ+0x66>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
    18ac:	10 97       	sbiw	r26, 0x00	; 0
    18ae:	59 f4       	brne	.+22     	; 0x18c6 <dequeueWQ+0x72>
            i++;
        }
        (*QCount)--;
    }

    return result;
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	32 c0       	rjmp	.+100    	; 0x191a <dequeueWQ+0xc6>
    18b6:	c8 0f       	add	r28, r24
    18b8:	d9 1f       	adc	r29, r25
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
    18ba:	21 50       	subi	r18, 0x01	; 1
    18bc:	31 09       	sbc	r19, r1
    18be:	60 f7       	brcc	.-40     	; 0x1898 <dequeueWQ+0x44>
            i++;
        }
        (*QCount)--;
    }

    return result;
    18c0:	80 e0       	ldi	r24, 0x00	; 0
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	2a c0       	rjmp	.+84     	; 0x191a <dequeueWQ+0xc6>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i<(*QCount)-1) {
    18c6:	eb 01       	movw	r28, r22
    18c8:	48 81       	ld	r20, Y
    18ca:	59 81       	ldd	r21, Y+1	; 0x01
    18cc:	41 50       	subi	r20, 0x01	; 1
    18ce:	51 09       	sbc	r21, r1
    18d0:	24 17       	cp	r18, r20
    18d2:	35 07       	cpc	r19, r21
    18d4:	a4 f4       	brge	.+40     	; 0x18fe <dequeueWQ+0xaa>
    18d6:	a9 01       	movw	r20, r18
    18d8:	44 0f       	add	r20, r20
    18da:	55 1f       	adc	r21, r21
    18dc:	fc 01       	movw	r30, r24
    18de:	e4 0f       	add	r30, r20
    18e0:	f5 1f       	adc	r31, r21
            Queue[i] = Queue[i+1];
    18e2:	82 81       	ldd	r24, Z+2	; 0x02
    18e4:	93 81       	ldd	r25, Z+3	; 0x03
    18e6:	81 93       	st	Z+, r24
    18e8:	91 93       	st	Z+, r25
            i++;
    18ea:	2f 5f       	subi	r18, 0xFF	; 255
    18ec:	3f 4f       	sbci	r19, 0xFF	; 255
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i<(*QCount)-1) {
    18ee:	eb 01       	movw	r28, r22
    18f0:	48 81       	ld	r20, Y
    18f2:	59 81       	ldd	r21, Y+1	; 0x01
    18f4:	41 50       	subi	r20, 0x01	; 1
    18f6:	51 09       	sbc	r21, r1
    18f8:	24 17       	cp	r18, r20
    18fa:	35 07       	cpc	r19, r21
    18fc:	94 f3       	brlt	.-28     	; 0x18e2 <dequeueWQ+0x8e>
            Queue[i] = Queue[i+1];
            i++;
        }
        (*QCount)--;
    18fe:	fb 01       	movw	r30, r22
    1900:	80 81       	ld	r24, Z
    1902:	91 81       	ldd	r25, Z+1	; 0x01
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	91 83       	std	Z+1, r25	; 0x01
    1908:	80 83       	st	Z, r24

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
        if(Queue[i]->m == m){
            result = Queue[i];
    190a:	8a 2f       	mov	r24, r26
    190c:	9b 2f       	mov	r25, r27
    190e:	05 c0       	rjmp	.+10     	; 0x191a <dequeueWQ+0xc6>
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {

    if(isEmpty(QCount)) {
        return NULL;
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	02 c0       	rjmp	.+4      	; 0x191a <dequeueWQ+0xc6>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	90 e0       	ldi	r25, 0x00	; 0
}
    191a:	df 91       	pop	r29
    191c:	cf 91       	pop	r28
    191e:	1f 91       	pop	r17
    1920:	0f 91       	pop	r16
    1922:	08 95       	ret

00001924 <dequeueRQ>:

/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {
    1924:	cf 93       	push	r28
    1926:	df 93       	push	r29
    1928:	eb 01       	movw	r28, r22

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    192a:	28 81       	ld	r18, Y
    192c:	39 81       	ldd	r19, Y+1	; 0x01
/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
    192e:	23 2b       	or	r18, r19
    1930:	09 f4       	brne	.+2      	; 0x1934 <dequeueRQ+0x10>
    1932:	48 c0       	rjmp	.+144    	; 0x19c4 <dequeueRQ+0xa0>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
    1934:	e8 81       	ld	r30, Y
    1936:	f9 81       	ldd	r31, Y+1	; 0x01
    1938:	9f 01       	movw	r18, r30
    193a:	21 50       	subi	r18, 0x01	; 1
    193c:	31 09       	sbc	r19, r1
    193e:	0a f4       	brpl	.+2      	; 0x1942 <dequeueRQ+0x1e>
    1940:	44 c0       	rjmp	.+136    	; 0x19ca <dequeueRQ+0xa6>
    1942:	ee 0f       	add	r30, r30
    1944:	ff 1f       	adc	r31, r31
    1946:	e8 0f       	add	r30, r24
    1948:	f9 1f       	adc	r31, r25
        if((Queue[i]->suspended == 0) && (Queue[i]->state == READY)) {
    194a:	52 91       	ld	r21, -Z
    194c:	42 91       	ld	r20, -Z
    194e:	da 01       	movw	r26, r20
    1950:	a6 5e       	subi	r26, 0xE6	; 230
    1952:	be 4f       	sbci	r27, 0xFE	; 254
    1954:	6d 91       	ld	r22, X+
    1956:	7c 91       	ld	r23, X
    1958:	11 97       	sbiw	r26, 0x01	; 1
    195a:	67 2b       	or	r22, r23
    195c:	59 f4       	brne	.+22     	; 0x1974 <dequeueRQ+0x50>
    195e:	56 97       	sbiw	r26, 0x16	; 22
    1960:	6c 91       	ld	r22, X
    1962:	61 30       	cpi	r22, 0x01	; 1
    1964:	39 f4       	brne	.+14     	; 0x1974 <dequeueRQ+0x50>
    1966:	f9 01       	movw	r30, r18
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
    1968:	41 15       	cp	r20, r1
    196a:	51 05       	cpc	r21, r1
    196c:	49 f4       	brne	.+18     	; 0x1980 <dequeueRQ+0x5c>
            i++;
        }
        (*QCount)--;
    }

    return result;
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	2d c0       	rjmp	.+90     	; 0x19ce <dequeueRQ+0xaa>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
    1974:	21 50       	subi	r18, 0x01	; 1
    1976:	31 09       	sbc	r19, r1
    1978:	40 f7       	brcc	.-48     	; 0x194a <dequeueRQ+0x26>
            i++;
        }
        (*QCount)--;
    }

    return result;
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	27 c0       	rjmp	.+78     	; 0x19ce <dequeueRQ+0xaa>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i < (*QCount)-1) {
    1980:	68 81       	ld	r22, Y
    1982:	79 81       	ldd	r23, Y+1	; 0x01
    1984:	61 50       	subi	r22, 0x01	; 1
    1986:	71 09       	sbc	r23, r1
    1988:	26 17       	cp	r18, r22
    198a:	37 07       	cpc	r19, r23
    198c:	9c f4       	brge	.+38     	; 0x19b4 <dequeueRQ+0x90>
    198e:	ee 0f       	add	r30, r30
    1990:	ff 1f       	adc	r31, r31
    1992:	dc 01       	movw	r26, r24
    1994:	ae 0f       	add	r26, r30
    1996:	bf 1f       	adc	r27, r31
            Queue[i] = Queue[i+1];
    1998:	12 96       	adiw	r26, 0x02	; 2
    199a:	8d 91       	ld	r24, X+
    199c:	9c 91       	ld	r25, X
    199e:	13 97       	sbiw	r26, 0x03	; 3
    19a0:	8d 93       	st	X+, r24
    19a2:	9d 93       	st	X+, r25
            i++;
    19a4:	2f 5f       	subi	r18, 0xFF	; 255
    19a6:	3f 4f       	sbci	r19, 0xFF	; 255
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i < (*QCount)-1) {
    19a8:	e8 81       	ld	r30, Y
    19aa:	f9 81       	ldd	r31, Y+1	; 0x01
    19ac:	31 97       	sbiw	r30, 0x01	; 1
    19ae:	2e 17       	cp	r18, r30
    19b0:	3f 07       	cpc	r19, r31
    19b2:	94 f3       	brlt	.-28     	; 0x1998 <dequeueRQ+0x74>
            Queue[i] = Queue[i+1];
            i++;
        }
        (*QCount)--;
    19b4:	88 81       	ld	r24, Y
    19b6:	99 81       	ldd	r25, Y+1	; 0x01
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	99 83       	std	Y+1, r25	; 0x01
    19bc:	88 83       	st	Y, r24
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
        if((Queue[i]->suspended == 0) && (Queue[i]->state == READY)) {
    19be:	84 2f       	mov	r24, r20
    19c0:	95 2f       	mov	r25, r21
    19c2:	05 c0       	rjmp	.+10     	; 0x19ce <dequeueRQ+0xaa>
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
        return NULL;
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <dequeueRQ+0xaa>
            i++;
        }
        (*QCount)--;
    }

    return result;
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	90 e0       	ldi	r25, 0x00	; 0
}
    19ce:	df 91       	pop	r29
    19d0:	cf 91       	pop	r28
    19d2:	08 95       	ret

000019d4 <dequeue>:

/*
 *  Return the first element of the queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
    19d4:	db 01       	movw	r26, r22

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    19d6:	2d 91       	ld	r18, X+
    19d8:	3c 91       	ld	r19, X
    19da:	11 97       	sbiw	r26, 0x01	; 1
/*
 *  Return the first element of the queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
    19dc:	23 2b       	or	r18, r19
    19de:	a9 f0       	breq	.+42     	; 0x1a0a <dequeue+0x36>
        return;
    }

    volatile PD *result = (Queue[(*QCount)-1]);
    19e0:	2d 91       	ld	r18, X+
    19e2:	3c 91       	ld	r19, X
    19e4:	11 97       	sbiw	r26, 0x01	; 1
    19e6:	f9 01       	movw	r30, r18
    19e8:	e1 50       	subi	r30, 0x01	; 1
    19ea:	f0 48       	sbci	r31, 0x80	; 128
    19ec:	ee 0f       	add	r30, r30
    19ee:	ff 1f       	adc	r31, r31
    19f0:	e8 0f       	add	r30, r24
    19f2:	f9 1f       	adc	r31, r25
    19f4:	80 81       	ld	r24, Z
    19f6:	91 81       	ldd	r25, Z+1	; 0x01
    (*QCount)--;
    19f8:	2d 91       	ld	r18, X+
    19fa:	3c 91       	ld	r19, X
    19fc:	11 97       	sbiw	r26, 0x01	; 1
    19fe:	21 50       	subi	r18, 0x01	; 1
    1a00:	31 09       	sbc	r19, r1
    1a02:	11 96       	adiw	r26, 0x01	; 1
    1a04:	3c 93       	st	X, r19
    1a06:	2e 93       	st	-X, r18
    1a08:	08 95       	ret

    return result;
}
    1a0a:	08 95       	ret

00001a0c <_get_status>:
	}

	wh = (16 - weight) * 100;
	wh /= 16;
	return wh;
}
    1a0c:	2d 98       	cbi	0x05, 5	; 5
    1a0e:	8f ef       	ldi	r24, 0xFF	; 255
    1a10:	04 d1       	rcall	.+520    	; 0x1c1a <SPI_Write_Byte>
    1a12:	2d 9a       	sbi	0x05, 5	; 5
    1a14:	08 95       	ret

00001a16 <_set_register>:
    1a16:	0f 93       	push	r16
    1a18:	1f 93       	push	r17
    1a1a:	cf 93       	push	r28
    1a1c:	df 93       	push	r29
    1a1e:	8b 01       	movw	r16, r22
    1a20:	d4 2f       	mov	r29, r20
    1a22:	2d 98       	cbi	0x05, 5	; 5
    1a24:	8f 71       	andi	r24, 0x1F	; 31
    1a26:	80 62       	ori	r24, 0x20	; 32
    1a28:	f8 d0       	rcall	.+496    	; 0x1c1a <SPI_Write_Byte>
    1a2a:	c8 2f       	mov	r28, r24
    1a2c:	6d 2f       	mov	r22, r29
    1a2e:	c8 01       	movw	r24, r16
    1a30:	e1 d0       	rcall	.+450    	; 0x1bf4 <SPI_Write_Block>
    1a32:	2d 9a       	sbi	0x05, 5	; 5
    1a34:	8c 2f       	mov	r24, r28
    1a36:	df 91       	pop	r29
    1a38:	cf 91       	pop	r28
    1a3a:	1f 91       	pop	r17
    1a3c:	0f 91       	pop	r16
    1a3e:	08 95       	ret

00001a40 <_get_register>:
    1a40:	0f 93       	push	r16
    1a42:	1f 93       	push	r17
    1a44:	cf 93       	push	r28
    1a46:	df 93       	push	r29
    1a48:	eb 01       	movw	r28, r22
    1a4a:	14 2f       	mov	r17, r20
    1a4c:	44 23       	and	r20, r20
    1a4e:	69 f0       	breq	.+26     	; 0x1a6a <_get_register+0x2a>
    1a50:	fb 01       	movw	r30, r22
    1a52:	2f ef       	ldi	r18, 0xFF	; 255
    1a54:	24 0f       	add	r18, r20
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	2f 5f       	subi	r18, 0xFF	; 255
    1a5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a5c:	26 0f       	add	r18, r22
    1a5e:	37 1f       	adc	r19, r23
    1a60:	9f ef       	ldi	r25, 0xFF	; 255
    1a62:	91 93       	st	Z+, r25
    1a64:	e2 17       	cp	r30, r18
    1a66:	f3 07       	cpc	r31, r19
    1a68:	e1 f7       	brne	.-8      	; 0x1a62 <_get_register+0x22>
    1a6a:	2d 98       	cbi	0x05, 5	; 5
    1a6c:	8f 71       	andi	r24, 0x1F	; 31
    1a6e:	d5 d0       	rcall	.+426    	; 0x1c1a <SPI_Write_Byte>
    1a70:	08 2f       	mov	r16, r24
    1a72:	41 2f       	mov	r20, r17
    1a74:	be 01       	movw	r22, r28
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	a5 d0       	rcall	.+330    	; 0x1bc6 <SPI_ReadWrite_Block>
    1a7c:	2d 9a       	sbi	0x05, 5	; 5
    1a7e:	80 2f       	mov	r24, r16
    1a80:	df 91       	pop	r29
    1a82:	cf 91       	pop	r28
    1a84:	1f 91       	pop	r17
    1a86:	0f 91       	pop	r16
    1a88:	08 95       	ret

00001a8a <_set_rx_mode>:
    1a8a:	cf 93       	push	r28
    1a8c:	df 93       	push	r29
    1a8e:	1f 92       	push	r1
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
    1a94:	41 e0       	ldi	r20, 0x01	; 1
    1a96:	be 01       	movw	r22, r28
    1a98:	6f 5f       	subi	r22, 0xFF	; 255
    1a9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	d0 df       	rcall	.-96     	; 0x1a40 <_get_register>
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
    1aa2:	80 fd       	sbrc	r24, 0
    1aa4:	10 c0       	rjmp	.+32     	; 0x1ac6 <_set_rx_mode+0x3c>
    1aa6:	81 60       	ori	r24, 0x01	; 1
    1aa8:	89 83       	std	Y+1, r24	; 0x01
    1aaa:	41 e0       	ldi	r20, 0x01	; 1
    1aac:	be 01       	movw	r22, r28
    1aae:	6f 5f       	subi	r22, 0xFF	; 255
    1ab0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	b0 df       	rcall	.-160    	; 0x1a16 <_set_register>
    1ab6:	85 e1       	ldi	r24, 0x15	; 21
    1ab8:	8a 95       	dec	r24
    1aba:	f1 f7       	brne	.-4      	; 0x1ab8 <_set_rx_mode+0x2e>
    1abc:	00 c0       	rjmp	.+0      	; 0x1abe <_set_rx_mode+0x34>
    1abe:	85 e1       	ldi	r24, 0x15	; 21
    1ac0:	8a 95       	dec	r24
    1ac2:	f1 f7       	brne	.-4      	; 0x1ac0 <_set_rx_mode+0x36>
    1ac4:	00 c0       	rjmp	.+0      	; 0x1ac6 <_set_rx_mode+0x3c>
    1ac6:	0f 90       	pop	r0
    1ac8:	df 91       	pop	r29
    1aca:	cf 91       	pop	r28
    1acc:	08 95       	ret

00001ace <_reset_pipe0_address>:
    1ace:	80 91 09 02 	lds	r24, 0x0209
    1ad2:	88 23       	and	r24, r24
    1ad4:	29 f0       	breq	.+10     	; 0x1ae0 <_reset_pipe0_address+0x12>
    1ad6:	45 e0       	ldi	r20, 0x05	; 5
    1ad8:	64 e0       	ldi	r22, 0x04	; 4
    1ada:	72 e0       	ldi	r23, 0x02	; 2
    1adc:	8a e0       	ldi	r24, 0x0A	; 10
    1ade:	9b cf       	rjmp	.-202    	; 0x1a16 <_set_register>
    1ae0:	08 95       	ret

00001ae2 <__vector_1>:

// Interrupt handler
ISR(INT0_vect)
{
    1ae2:	1f 92       	push	r1
    1ae4:	0f 92       	push	r0
    1ae6:	0f b6       	in	r0, 0x3f	; 63
    1ae8:	0f 92       	push	r0
    1aea:	11 24       	eor	r1, r1
    1aec:	0b b6       	in	r0, 0x3b	; 59
    1aee:	0f 92       	push	r0
    1af0:	2f 93       	push	r18
    1af2:	3f 93       	push	r19
    1af4:	4f 93       	push	r20
    1af6:	5f 93       	push	r21
    1af8:	6f 93       	push	r22
    1afa:	7f 93       	push	r23
    1afc:	8f 93       	push	r24
    1afe:	9f 93       	push	r25
    1b00:	af 93       	push	r26
    1b02:	bf 93       	push	r27
    1b04:	ef 93       	push	r30
    1b06:	ff 93       	push	r31
    1b08:	cf 93       	push	r28
    1b0a:	df 93       	push	r29
    1b0c:	1f 92       	push	r1
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;
    uint8_t pipe_number;

    RADIO_CE_LOW();
    1b12:	2c 98       	cbi	0x05, 4	; 5

    status = _get_status();
    1b14:	7b df       	rcall	.-266    	; 0x1a0c <_get_status>
    1b16:	89 83       	std	Y+1, r24	; 0x01

    if (status & _BV(RX_DR)) {
    1b18:	86 ff       	sbrs	r24, 6
    1b1a:	04 c0       	rjmp	.+8      	; 0x1b24 <__vector_1+0x42>
        pipe_number =  (status & 0xE) >> 1;
    1b1c:	8e 70       	andi	r24, 0x0E	; 14
        radio_rxhandler(pipe_number);
    1b1e:	86 95       	lsr	r24
    1b20:	0e 94 66 01 	call	0x2cc	; 0x2cc <radio_rxhandler>
    }

    // We can get the TX_DS or the MAX_RT interrupt, but not both.
    if (status & _BV(TX_DS)) {
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	85 ff       	sbrs	r24, 5
    1b28:	1b c0       	rjmp	.+54     	; 0x1b60 <__vector_1+0x7e>
    	// if there's nothing left to transmit, switch back to receive mode.
        transmit_lock = 0;
    1b2a:	10 92 03 17 	sts	0x1703, r1
        _reset_pipe0_address();
    1b2e:	cf df       	rcall	.-98     	; 0x1ace <_reset_pipe0_address>
        _set_rx_mode();
    1b30:	ac df       	rcall	.-168    	; 0x1a8a <_set_rx_mode>

        // indicate in the history that a packet was transmitted successfully by appending a 1.
        tx_history <<= 1;
    1b32:	80 91 02 02 	lds	r24, 0x0202
    1b36:	90 91 03 02 	lds	r25, 0x0203
    1b3a:	88 0f       	add	r24, r24
    1b3c:	99 1f       	adc	r25, r25
    1b3e:	90 93 03 02 	sts	0x0203, r25
    1b42:	80 93 02 02 	sts	0x0202, r24
        tx_history |= 1;
    1b46:	80 91 02 02 	lds	r24, 0x0202
    1b4a:	90 91 03 02 	lds	r25, 0x0203
    1b4e:	81 60       	ori	r24, 0x01	; 1
    1b50:	90 93 03 02 	sts	0x0203, r25
    1b54:	80 93 02 02 	sts	0x0202, r24
        tx_last_status = RADIO_TX_SUCCESS;
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	80 93 01 02 	sts	0x0201, r24
    1b5e:	14 c0       	rjmp	.+40     	; 0x1b88 <__vector_1+0xa6>
    } else if (status & _BV(MAX_RT)) {
    1b60:	84 ff       	sbrs	r24, 4
    1b62:	12 c0       	rjmp	.+36     	; 0x1b88 <__vector_1+0xa6>
        // enable SPI
       // RADIO_CSN_LOW();


        // flush the failed packet (it stays in the Tx FIFO; we could try to resend it by setting CE high)
        SPI_Write_Byte( FLUSH_TX );
    1b64:	81 ee       	ldi	r24, 0xE1	; 225
    1b66:	59 d0       	rcall	.+178    	; 0x1c1a <SPI_Write_Byte>

        // resynch SPI
        //RADIO_CSN_HIGH();

        transmit_lock = 0;
    1b68:	10 92 03 17 	sts	0x1703, r1
        _reset_pipe0_address();
    1b6c:	b0 df       	rcall	.-160    	; 0x1ace <_reset_pipe0_address>
        _set_rx_mode();
    1b6e:	8d df       	rcall	.-230    	; 0x1a8a <_set_rx_mode>

        // indicate in the history that a packet was dropped by appending a 0.
        tx_history <<= 1;
    1b70:	80 91 02 02 	lds	r24, 0x0202
    1b74:	90 91 03 02 	lds	r25, 0x0203
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	90 93 03 02 	sts	0x0203, r25
    1b80:	80 93 02 02 	sts	0x0202, r24
        tx_last_status = RADIO_TX_MAX_RT;
    1b84:	10 92 01 02 	sts	0x0201, r1
    }

    // clear the interrupt flags.
	status = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
    1b88:	80 e7       	ldi	r24, 0x70	; 112
    1b8a:	89 83       	std	Y+1, r24	; 0x01
	_set_register(STATUS, &status, 1);
    1b8c:	41 e0       	ldi	r20, 0x01	; 1
    1b8e:	be 01       	movw	r22, r28
    1b90:	6f 5f       	subi	r22, 0xFF	; 255
    1b92:	7f 4f       	sbci	r23, 0xFF	; 255
    1b94:	87 e0       	ldi	r24, 0x07	; 7
    1b96:	3f df       	rcall	.-386    	; 0x1a16 <_set_register>

    RADIO_CE_HIGH();
    1b98:	2c 9a       	sbi	0x05, 4	; 5
}
    1b9a:	0f 90       	pop	r0
    1b9c:	df 91       	pop	r29
    1b9e:	cf 91       	pop	r28
    1ba0:	ff 91       	pop	r31
    1ba2:	ef 91       	pop	r30
    1ba4:	bf 91       	pop	r27
    1ba6:	af 91       	pop	r26
    1ba8:	9f 91       	pop	r25
    1baa:	8f 91       	pop	r24
    1bac:	7f 91       	pop	r23
    1bae:	6f 91       	pop	r22
    1bb0:	5f 91       	pop	r21
    1bb2:	4f 91       	pop	r20
    1bb4:	3f 91       	pop	r19
    1bb6:	2f 91       	pop	r18
    1bb8:	0f 90       	pop	r0
    1bba:	0b be       	out	0x3b, r0	; 59
    1bbc:	0f 90       	pop	r0
    1bbe:	0f be       	out	0x3f, r0	; 63
    1bc0:	0f 90       	pop	r0
    1bc2:	1f 90       	pop	r1
    1bc4:	18 95       	reti

00001bc6 <SPI_ReadWrite_Block>:
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1bc6:	44 23       	and	r20, r20
    1bc8:	a1 f0       	breq	.+40     	; 0x1bf2 <SPI_ReadWrite_Block+0x2c>
    1bca:	fc 01       	movw	r30, r24
    1bcc:	a6 2f       	mov	r26, r22
    1bce:	b7 2f       	mov	r27, r23
    1bd0:	41 50       	subi	r20, 0x01	; 1
    1bd2:	24 2f       	mov	r18, r20
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	2f 5f       	subi	r18, 0xFF	; 255
    1bd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bda:	28 0f       	add	r18, r24
    1bdc:	39 1f       	adc	r19, r25
          SPDR = data[i];
    1bde:	91 91       	ld	r25, Z+
    1be0:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1be2:	0d b4       	in	r0, 0x2d	; 45
    1be4:	07 fe       	sbrs	r0, 7
    1be6:	fd cf       	rjmp	.-6      	; 0x1be2 <SPI_ReadWrite_Block+0x1c>
          buffer[i] = SPDR;
    1be8:	9e b5       	in	r25, 0x2e	; 46
    1bea:	9d 93       	st	X+, r25
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1bec:	e2 17       	cp	r30, r18
    1bee:	f3 07       	cpc	r31, r19
    1bf0:	b1 f7       	brne	.-20     	; 0x1bde <SPI_ReadWrite_Block+0x18>
    1bf2:	08 95       	ret

00001bf4 <SPI_Write_Block>:
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1bf4:	66 23       	and	r22, r22
    1bf6:	81 f0       	breq	.+32     	; 0x1c18 <SPI_Write_Block+0x24>
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	61 50       	subi	r22, 0x01	; 1
    1bfc:	26 2f       	mov	r18, r22
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	2f 5f       	subi	r18, 0xFF	; 255
    1c02:	3f 4f       	sbci	r19, 0xFF	; 255
    1c04:	28 0f       	add	r18, r24
    1c06:	39 1f       	adc	r19, r25
          SPDR = data[i];
    1c08:	91 91       	ld	r25, Z+
    1c0a:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1c0c:	0d b4       	in	r0, 0x2d	; 45
    1c0e:	07 fe       	sbrs	r0, 7
    1c10:	fd cf       	rjmp	.-6      	; 0x1c0c <SPI_Write_Block+0x18>
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1c12:	e2 17       	cp	r30, r18
    1c14:	f3 07       	cpc	r31, r19
    1c16:	c1 f7       	brne	.-16     	; 0x1c08 <SPI_Write_Block+0x14>
    1c18:	08 95       	ret

00001c1a <SPI_Write_Byte>:
    }
}

uint8_t SPI_Write_Byte(uint8_t byte)
{
    SPDR = byte;
    1c1a:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
    1c1c:	0d b4       	in	r0, 0x2d	; 45
    1c1e:	07 fe       	sbrs	r0, 7
    1c20:	fd cf       	rjmp	.-6      	; 0x1c1c <SPI_Write_Byte+0x2>
    return SPDR;
    1c22:	8e b5       	in	r24, 0x2e	; 46
}
    1c24:	08 95       	ret

00001c26 <update_leds>:
	for (i=0; i<numNotes; i++)
	{
		uart0_putc(notes[i]);
		uart0_putc(notelengths[i]);
	}
}
    1c26:	cf 93       	push	r28
    1c28:	20 91 84 14 	lds	r18, 0x1484
    1c2c:	80 e1       	ldi	r24, 0x10	; 16
    1c2e:	28 9f       	mul	r18, r24
    1c30:	90 01       	movw	r18, r0
    1c32:	11 24       	eor	r1, r1
    1c34:	80 91 83 14 	lds	r24, 0x1483
    1c38:	88 0f       	add	r24, r24
    1c3a:	88 0f       	add	r24, r24
    1c3c:	88 0f       	add	r24, r24
    1c3e:	82 2b       	or	r24, r18
    1c40:	20 91 80 14 	lds	r18, 0x1480
    1c44:	98 2f       	mov	r25, r24
    1c46:	92 2b       	or	r25, r18
    1c48:	c0 91 82 14 	lds	r28, 0x1482
    1c4c:	cc 0f       	add	r28, r28
    1c4e:	cc 0f       	add	r28, r28
    1c50:	8c 2f       	mov	r24, r28
    1c52:	89 2b       	or	r24, r25
    1c54:	c0 91 81 14 	lds	r28, 0x1481
    1c58:	cc 0f       	add	r28, r28
    1c5a:	c8 2b       	or	r28, r24
    1c5c:	8b e8       	ldi	r24, 0x8B	; 139
    1c5e:	13 d1       	rcall	.+550    	; 0x1e86 <uart0_putc>
    1c60:	8c 2f       	mov	r24, r28
    1c62:	11 d1       	rcall	.+546    	; 0x1e86 <uart0_putc>
    1c64:	80 91 7f 14 	lds	r24, 0x147F
    1c68:	0e d1       	rcall	.+540    	; 0x1e86 <uart0_putc>
    1c6a:	80 91 0f 02 	lds	r24, 0x020F
    1c6e:	0b d1       	rcall	.+534    	; 0x1e86 <uart0_putc>
    1c70:	cf 91       	pop	r28
    1c72:	08 95       	ret

00001c74 <Roomba_Init>:
    1c74:	3d 9a       	sbi	0x07, 5	; 7
    1c76:	45 98       	cbi	0x08, 5	; 8
    1c78:	2f ef       	ldi	r18, 0xFF	; 255
    1c7a:	39 e6       	ldi	r19, 0x69	; 105
    1c7c:	88 e1       	ldi	r24, 0x18	; 24
    1c7e:	21 50       	subi	r18, 0x01	; 1
    1c80:	30 40       	sbci	r19, 0x00	; 0
    1c82:	80 40       	sbci	r24, 0x00	; 0
    1c84:	e1 f7       	brne	.-8      	; 0x1c7e <Roomba_Init+0xa>
    1c86:	00 c0       	rjmp	.+0      	; 0x1c88 <Roomba_Init+0x14>
    1c88:	00 00       	nop
    1c8a:	45 9a       	sbi	0x08, 5	; 8
    1c8c:	9f ef       	ldi	r25, 0xFF	; 255
    1c8e:	27 ea       	ldi	r18, 0xA7	; 167
    1c90:	31 e6       	ldi	r19, 0x61	; 97
    1c92:	91 50       	subi	r25, 0x01	; 1
    1c94:	20 40       	sbci	r18, 0x00	; 0
    1c96:	30 40       	sbci	r19, 0x00	; 0
    1c98:	e1 f7       	brne	.-8      	; 0x1c92 <Roomba_Init+0x1e>
    1c9a:	00 c0       	rjmp	.+0      	; 0x1c9c <Roomba_Init+0x28>
    1c9c:	00 00       	nop
    1c9e:	83 e0       	ldi	r24, 0x03	; 3
    1ca0:	45 98       	cbi	0x08, 5	; 8
    1ca2:	9f ef       	ldi	r25, 0xFF	; 255
    1ca4:	20 e7       	ldi	r18, 0x70	; 112
    1ca6:	32 e0       	ldi	r19, 0x02	; 2
    1ca8:	91 50       	subi	r25, 0x01	; 1
    1caa:	20 40       	sbci	r18, 0x00	; 0
    1cac:	30 40       	sbci	r19, 0x00	; 0
    1cae:	e1 f7       	brne	.-8      	; 0x1ca8 <Roomba_Init+0x34>
    1cb0:	00 c0       	rjmp	.+0      	; 0x1cb2 <Roomba_Init+0x3e>
    1cb2:	00 00       	nop
    1cb4:	45 9a       	sbi	0x08, 5	; 8
    1cb6:	9f ef       	ldi	r25, 0xFF	; 255
    1cb8:	20 e7       	ldi	r18, 0x70	; 112
    1cba:	32 e0       	ldi	r19, 0x02	; 2
    1cbc:	91 50       	subi	r25, 0x01	; 1
    1cbe:	20 40       	sbci	r18, 0x00	; 0
    1cc0:	30 40       	sbci	r19, 0x00	; 0
    1cc2:	e1 f7       	brne	.-8      	; 0x1cbc <Roomba_Init+0x48>
    1cc4:	00 c0       	rjmp	.+0      	; 0x1cc6 <Roomba_Init+0x52>
    1cc6:	00 00       	nop
    1cc8:	81 50       	subi	r24, 0x01	; 1
    1cca:	51 f7       	brne	.-44     	; 0x1ca0 <Roomba_Init+0x2c>
    1ccc:	af d0       	rcall	.+350    	; 0x1e2c <uart0_init>
    1cce:	80 e8       	ldi	r24, 0x80	; 128
    1cd0:	da d0       	rcall	.+436    	; 0x1e86 <uart0_putc>
    1cd2:	8f ef       	ldi	r24, 0xFF	; 255
    1cd4:	99 ef       	ldi	r25, 0xF9	; 249
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	81 50       	subi	r24, 0x01	; 1
    1cda:	90 40       	sbci	r25, 0x00	; 0
    1cdc:	20 40       	sbci	r18, 0x00	; 0
    1cde:	e1 f7       	brne	.-8      	; 0x1cd8 <Roomba_Init+0x64>
    1ce0:	00 c0       	rjmp	.+0      	; 0x1ce2 <Roomba_Init+0x6e>
    1ce2:	00 00       	nop
    1ce4:	81 e8       	ldi	r24, 0x81	; 129
    1ce6:	cf d0       	rcall	.+414    	; 0x1e86 <uart0_putc>
    1ce8:	89 e0       	ldi	r24, 0x09	; 9
    1cea:	cd d0       	rcall	.+410    	; 0x1e86 <uart0_putc>
    1cec:	3f ef       	ldi	r19, 0xFF	; 255
    1cee:	81 ee       	ldi	r24, 0xE1	; 225
    1cf0:	94 e0       	ldi	r25, 0x04	; 4
    1cf2:	31 50       	subi	r19, 0x01	; 1
    1cf4:	80 40       	sbci	r24, 0x00	; 0
    1cf6:	90 40       	sbci	r25, 0x00	; 0
    1cf8:	e1 f7       	brne	.-8      	; 0x1cf2 <Roomba_Init+0x7e>
    1cfa:	00 c0       	rjmp	.+0      	; 0x1cfc <Roomba_Init+0x88>
    1cfc:	00 00       	nop
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	95 d0       	rcall	.+298    	; 0x1e2c <uart0_init>
    1d02:	82 e8       	ldi	r24, 0x82	; 130
    1d04:	c0 d0       	rcall	.+384    	; 0x1e86 <uart0_putc>
    1d06:	2f ef       	ldi	r18, 0xFF	; 255
    1d08:	39 ef       	ldi	r19, 0xF9	; 249
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	21 50       	subi	r18, 0x01	; 1
    1d0e:	30 40       	sbci	r19, 0x00	; 0
    1d10:	80 40       	sbci	r24, 0x00	; 0
    1d12:	e1 f7       	brne	.-8      	; 0x1d0c <Roomba_Init+0x98>
    1d14:	00 c0       	rjmp	.+0      	; 0x1d16 <Roomba_Init+0xa2>
    1d16:	00 00       	nop
    1d18:	86 cf       	rjmp	.-244    	; 0x1c26 <update_leds>
    1d1a:	08 95       	ret

00001d1c <Roomba_Drive>:
    1d1c:	0f 93       	push	r16
    1d1e:	1f 93       	push	r17
    1d20:	cf 93       	push	r28
    1d22:	df 93       	push	r29
    1d24:	18 2f       	mov	r17, r24
    1d26:	09 2f       	mov	r16, r25
    1d28:	c6 2f       	mov	r28, r22
    1d2a:	d7 2f       	mov	r29, r23
    1d2c:	89 e8       	ldi	r24, 0x89	; 137
    1d2e:	ab d0       	rcall	.+342    	; 0x1e86 <uart0_putc>
    1d30:	80 2f       	mov	r24, r16
    1d32:	a9 d0       	rcall	.+338    	; 0x1e86 <uart0_putc>
    1d34:	81 2f       	mov	r24, r17
    1d36:	a7 d0       	rcall	.+334    	; 0x1e86 <uart0_putc>
    1d38:	8d 2f       	mov	r24, r29
    1d3a:	a5 d0       	rcall	.+330    	; 0x1e86 <uart0_putc>
    1d3c:	8c 2f       	mov	r24, r28
    1d3e:	a3 d0       	rcall	.+326    	; 0x1e86 <uart0_putc>
    1d40:	df 91       	pop	r29
    1d42:	cf 91       	pop	r28
    1d44:	1f 91       	pop	r17
    1d46:	0f 91       	pop	r16
    1d48:	08 95       	ret

00001d4a <Roomba_PlaySong>:

void Roomba_PlaySong(int songNum)
{
    1d4a:	cf 93       	push	r28
    1d4c:	c8 2f       	mov	r28, r24
	uart0_putc(PLAY);
    1d4e:	8d e8       	ldi	r24, 0x8D	; 141
    1d50:	9a d0       	rcall	.+308    	; 0x1e86 <uart0_putc>
	uart0_putc(songNum);
    1d52:	8c 2f       	mov	r24, r28
    1d54:	98 d0       	rcall	.+304    	; 0x1e86 <uart0_putc>
	
}
    1d56:	cf 91       	pop	r28
    1d58:	08 95       	ret

00001d5a <__vector_25>:
Input:    None
Returns:  None
**************************************************************************/
void uart0_flush(void)
{
	UART_RxHead = UART_RxTail;
    1d5a:	1f 92       	push	r1
    1d5c:	0f 92       	push	r0
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	0f 92       	push	r0
    1d62:	11 24       	eor	r1, r1
    1d64:	0b b6       	in	r0, 0x3b	; 59
    1d66:	0f 92       	push	r0
    1d68:	2f 93       	push	r18
    1d6a:	3f 93       	push	r19
    1d6c:	4f 93       	push	r20
    1d6e:	5f 93       	push	r21
    1d70:	8f 93       	push	r24
    1d72:	9f 93       	push	r25
    1d74:	ef 93       	push	r30
    1d76:	ff 93       	push	r31
    1d78:	20 91 c0 00 	lds	r18, 0x00C0
    1d7c:	30 91 c6 00 	lds	r19, 0x00C6
    1d80:	28 71       	andi	r18, 0x18	; 24
    1d82:	80 91 8c 15 	lds	r24, 0x158C
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	01 96       	adiw	r24, 0x01	; 1
    1d8a:	8f 77       	andi	r24, 0x7F	; 127
    1d8c:	99 27       	eor	r25, r25
    1d8e:	40 91 8b 15 	lds	r20, 0x158B
    1d92:	50 e0       	ldi	r21, 0x00	; 0
    1d94:	48 17       	cp	r20, r24
    1d96:	59 07       	cpc	r21, r25
    1d98:	39 f0       	breq	.+14     	; 0x1da8 <__vector_25+0x4e>
    1d9a:	80 93 8c 15 	sts	0x158C, r24
    1d9e:	fc 01       	movw	r30, r24
    1da0:	e1 57       	subi	r30, 0x71	; 113
    1da2:	fa 4e       	sbci	r31, 0xEA	; 234
    1da4:	30 83       	st	Z, r19
    1da6:	01 c0       	rjmp	.+2      	; 0x1daa <__vector_25+0x50>
    1da8:	22 e0       	ldi	r18, 0x02	; 2
    1daa:	20 93 8a 15 	sts	0x158A, r18
    1dae:	ff 91       	pop	r31
    1db0:	ef 91       	pop	r30
    1db2:	9f 91       	pop	r25
    1db4:	8f 91       	pop	r24
    1db6:	5f 91       	pop	r21
    1db8:	4f 91       	pop	r20
    1dba:	3f 91       	pop	r19
    1dbc:	2f 91       	pop	r18
    1dbe:	0f 90       	pop	r0
    1dc0:	0b be       	out	0x3b, r0	; 59
    1dc2:	0f 90       	pop	r0
    1dc4:	0f be       	out	0x3f, r0	; 63
    1dc6:	0f 90       	pop	r0
    1dc8:	1f 90       	pop	r1
    1dca:	18 95       	reti

00001dcc <__vector_26>:
    1dcc:	1f 92       	push	r1
    1dce:	0f 92       	push	r0
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	0f 92       	push	r0
    1dd4:	11 24       	eor	r1, r1
    1dd6:	0b b6       	in	r0, 0x3b	; 59
    1dd8:	0f 92       	push	r0
    1dda:	8f 93       	push	r24
    1ddc:	9f 93       	push	r25
    1dde:	ef 93       	push	r30
    1de0:	ff 93       	push	r31
    1de2:	90 91 8e 15 	lds	r25, 0x158E
    1de6:	80 91 8d 15 	lds	r24, 0x158D
    1dea:	98 17       	cp	r25, r24
    1dec:	79 f0       	breq	.+30     	; 0x1e0c <__vector_26+0x40>
    1dee:	80 91 8d 15 	lds	r24, 0x158D
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	01 96       	adiw	r24, 0x01	; 1
    1df6:	8f 77       	andi	r24, 0x7F	; 127
    1df8:	99 27       	eor	r25, r25
    1dfa:	80 93 8d 15 	sts	0x158D, r24
    1dfe:	fc 01       	movw	r30, r24
    1e00:	e1 5f       	subi	r30, 0xF1	; 241
    1e02:	f9 4e       	sbci	r31, 0xE9	; 233
    1e04:	80 81       	ld	r24, Z
    1e06:	80 93 c6 00 	sts	0x00C6, r24
    1e0a:	05 c0       	rjmp	.+10     	; 0x1e16 <__vector_26+0x4a>
    1e0c:	e1 ec       	ldi	r30, 0xC1	; 193
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	8f 7d       	andi	r24, 0xDF	; 223
    1e14:	80 83       	st	Z, r24
    1e16:	ff 91       	pop	r31
    1e18:	ef 91       	pop	r30
    1e1a:	9f 91       	pop	r25
    1e1c:	8f 91       	pop	r24
    1e1e:	0f 90       	pop	r0
    1e20:	0b be       	out	0x3b, r0	; 59
    1e22:	0f 90       	pop	r0
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	0f 90       	pop	r0
    1e28:	1f 90       	pop	r1
    1e2a:	18 95       	reti

00001e2c <uart0_init>:
    1e2c:	10 92 8e 15 	sts	0x158E, r1
    1e30:	10 92 8d 15 	sts	0x158D, r1
    1e34:	10 92 8c 15 	sts	0x158C, r1
    1e38:	10 92 8b 15 	sts	0x158B, r1
    1e3c:	81 30       	cpi	r24, 0x01	; 1
    1e3e:	41 f0       	breq	.+16     	; 0x1e50 <uart0_init+0x24>
    1e40:	18 f0       	brcs	.+6      	; 0x1e48 <uart0_init+0x1c>
    1e42:	82 30       	cpi	r24, 0x02	; 2
    1e44:	49 f0       	breq	.+18     	; 0x1e58 <uart0_init+0x2c>
    1e46:	0c c0       	rjmp	.+24     	; 0x1e60 <uart0_init+0x34>
    1e48:	87 e6       	ldi	r24, 0x67	; 103
    1e4a:	80 93 c4 00 	sts	0x00C4, r24
    1e4e:	0b c0       	rjmp	.+22     	; 0x1e66 <uart0_init+0x3a>
    1e50:	83 e3       	ldi	r24, 0x33	; 51
    1e52:	80 93 c4 00 	sts	0x00C4, r24
    1e56:	07 c0       	rjmp	.+14     	; 0x1e66 <uart0_init+0x3a>
    1e58:	82 e2       	ldi	r24, 0x22	; 34
    1e5a:	80 93 c4 00 	sts	0x00C4, r24
    1e5e:	03 c0       	rjmp	.+6      	; 0x1e66 <uart0_init+0x3a>
    1e60:	87 e6       	ldi	r24, 0x67	; 103
    1e62:	80 93 c4 00 	sts	0x00C4, r24
    1e66:	80 91 c5 00 	lds	r24, 0x00C5
    1e6a:	80 91 c4 00 	lds	r24, 0x00C4
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	80 93 c5 00 	sts	0x00C5, r24
    1e74:	10 92 c4 00 	sts	0x00C4, r1
    1e78:	88 e9       	ldi	r24, 0x98	; 152
    1e7a:	80 93 c1 00 	sts	0x00C1, r24
    1e7e:	86 e0       	ldi	r24, 0x06	; 6
    1e80:	80 93 c2 00 	sts	0x00C2, r24
    1e84:	08 95       	ret

00001e86 <uart0_putc>:
    1e86:	40 91 8e 15 	lds	r20, 0x158E
    1e8a:	50 e0       	ldi	r21, 0x00	; 0
    1e8c:	4f 5f       	subi	r20, 0xFF	; 255
    1e8e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e90:	4f 77       	andi	r20, 0x7F	; 127
    1e92:	55 27       	eor	r21, r21
    1e94:	20 91 8d 15 	lds	r18, 0x158D
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	24 17       	cp	r18, r20
    1e9c:	35 07       	cpc	r19, r21
    1e9e:	d1 f3       	breq	.-12     	; 0x1e94 <uart0_putc+0xe>
    1ea0:	fa 01       	movw	r30, r20
    1ea2:	e1 5f       	subi	r30, 0xF1	; 241
    1ea4:	f9 4e       	sbci	r31, 0xE9	; 233
    1ea6:	80 83       	st	Z, r24
    1ea8:	40 93 8e 15 	sts	0x158E, r20
    1eac:	e1 ec       	ldi	r30, 0xC1	; 193
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	80 62       	ori	r24, 0x20	; 32
    1eb4:	80 83       	st	Z, r24
    1eb6:	08 95       	ret

00001eb8 <__vector_36>:
ISR(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
    1eb8:	1f 92       	push	r1
    1eba:	0f 92       	push	r0
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	0f 92       	push	r0
    1ec0:	11 24       	eor	r1, r1
    1ec2:	0b b6       	in	r0, 0x3b	; 59
    1ec4:	0f 92       	push	r0
    1ec6:	2f 93       	push	r18
    1ec8:	3f 93       	push	r19
    1eca:	4f 93       	push	r20
    1ecc:	5f 93       	push	r21
    1ece:	8f 93       	push	r24
    1ed0:	9f 93       	push	r25
    1ed2:	ef 93       	push	r30
    1ed4:	ff 93       	push	r31
	uint8_t data;
	uint8_t usr;
	uint8_t lastRxError;

	/* read UART status register and UART data register */
	usr  = UART1_STATUS;
    1ed6:	20 91 c8 00 	lds	r18, 0x00C8
	data = UART1_DATA;
    1eda:	30 91 ce 00 	lds	r19, 0x00CE

	/* */
	lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
    1ede:	28 71       	andi	r18, 0x18	; 24

	/* calculate buffer index */
	tmphead = ( UART1_RxHead + 1) & UART_RX1_BUFFER_MASK;
    1ee0:	80 91 87 14 	lds	r24, 0x1487
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	01 96       	adiw	r24, 0x01	; 1
    1ee8:	8f 77       	andi	r24, 0x7F	; 127
    1eea:	99 27       	eor	r25, r25

	if ( tmphead == UART1_RxTail ) {
    1eec:	40 91 86 14 	lds	r20, 0x1486
    1ef0:	50 e0       	ldi	r21, 0x00	; 0
    1ef2:	48 17       	cp	r20, r24
    1ef4:	59 07       	cpc	r21, r25
    1ef6:	39 f0       	breq	.+14     	; 0x1f06 <__vector_36+0x4e>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
	} else {
		/* store new index */
		UART1_RxHead = tmphead;
    1ef8:	80 93 87 14 	sts	0x1487, r24
		/* store received data in buffer */
		UART1_RxBuf[tmphead] = data;
    1efc:	fc 01       	movw	r30, r24
    1efe:	e6 57       	subi	r30, 0x76	; 118
    1f00:	fb 4e       	sbci	r31, 0xEB	; 235
    1f02:	30 83       	st	Z, r19
    1f04:	01 c0       	rjmp	.+2      	; 0x1f08 <__vector_36+0x50>
	/* calculate buffer index */
	tmphead = ( UART1_RxHead + 1) & UART_RX1_BUFFER_MASK;

	if ( tmphead == UART1_RxTail ) {
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
    1f06:	22 e0       	ldi	r18, 0x02	; 2
		/* store new index */
		UART1_RxHead = tmphead;
		/* store received data in buffer */
		UART1_RxBuf[tmphead] = data;
	}
	UART1_LastRxError = lastRxError;
    1f08:	20 93 85 14 	sts	0x1485, r18
}
    1f0c:	ff 91       	pop	r31
    1f0e:	ef 91       	pop	r30
    1f10:	9f 91       	pop	r25
    1f12:	8f 91       	pop	r24
    1f14:	5f 91       	pop	r21
    1f16:	4f 91       	pop	r20
    1f18:	3f 91       	pop	r19
    1f1a:	2f 91       	pop	r18
    1f1c:	0f 90       	pop	r0
    1f1e:	0b be       	out	0x3b, r0	; 59
    1f20:	0f 90       	pop	r0
    1f22:	0f be       	out	0x3f, r0	; 63
    1f24:	0f 90       	pop	r0
    1f26:	1f 90       	pop	r1
    1f28:	18 95       	reti

00001f2a <__vector_37>:
ISR(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
    1f2a:	1f 92       	push	r1
    1f2c:	0f 92       	push	r0
    1f2e:	0f b6       	in	r0, 0x3f	; 63
    1f30:	0f 92       	push	r0
    1f32:	11 24       	eor	r1, r1
    1f34:	0b b6       	in	r0, 0x3b	; 59
    1f36:	0f 92       	push	r0
    1f38:	8f 93       	push	r24
    1f3a:	9f 93       	push	r25
    1f3c:	ef 93       	push	r30
    1f3e:	ff 93       	push	r31
	uint16_t tmptail;

	if ( UART1_TxHead != UART1_TxTail) {
    1f40:	90 91 89 14 	lds	r25, 0x1489
    1f44:	80 91 88 14 	lds	r24, 0x1488
    1f48:	98 17       	cp	r25, r24
    1f4a:	79 f0       	breq	.+30     	; 0x1f6a <__vector_37+0x40>
		/* calculate and store new buffer index */
		tmptail = (UART1_TxTail + 1) & UART_TX1_BUFFER_MASK;
    1f4c:	80 91 88 14 	lds	r24, 0x1488
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	01 96       	adiw	r24, 0x01	; 1
    1f54:	8f 77       	andi	r24, 0x7F	; 127
    1f56:	99 27       	eor	r25, r25
		UART1_TxTail = tmptail;
    1f58:	80 93 88 14 	sts	0x1488, r24
		/* get one byte from buffer and write it to UART */
		UART1_DATA = UART1_TxBuf[tmptail];  /* start transmission */
    1f5c:	fc 01       	movw	r30, r24
    1f5e:	e6 5f       	subi	r30, 0xF6	; 246
    1f60:	fa 4e       	sbci	r31, 0xEA	; 234
    1f62:	80 81       	ld	r24, Z
    1f64:	80 93 ce 00 	sts	0x00CE, r24
    1f68:	05 c0       	rjmp	.+10     	; 0x1f74 <__vector_37+0x4a>
	} else {
		/* tx buffer empty, disable UDRE interrupt */
		UART1_CONTROL &= ~_BV(UART1_UDRIE);
    1f6a:	e9 ec       	ldi	r30, 0xC9	; 201
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	8f 7d       	andi	r24, 0xDF	; 223
    1f72:	80 83       	st	Z, r24
	}
}
    1f74:	ff 91       	pop	r31
    1f76:	ef 91       	pop	r30
    1f78:	9f 91       	pop	r25
    1f7a:	8f 91       	pop	r24
    1f7c:	0f 90       	pop	r0
    1f7e:	0b be       	out	0x3b, r0	; 59
    1f80:	0f 90       	pop	r0
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	0f 90       	pop	r0
    1f86:	1f 90       	pop	r1
    1f88:	18 95       	reti

00001f8a <__udivmodhi4>:
    1f8a:	aa 1b       	sub	r26, r26
    1f8c:	bb 1b       	sub	r27, r27
    1f8e:	51 e1       	ldi	r21, 0x11	; 17
    1f90:	07 c0       	rjmp	.+14     	; 0x1fa0 <__udivmodhi4_ep>

00001f92 <__udivmodhi4_loop>:
    1f92:	aa 1f       	adc	r26, r26
    1f94:	bb 1f       	adc	r27, r27
    1f96:	a6 17       	cp	r26, r22
    1f98:	b7 07       	cpc	r27, r23
    1f9a:	10 f0       	brcs	.+4      	; 0x1fa0 <__udivmodhi4_ep>
    1f9c:	a6 1b       	sub	r26, r22
    1f9e:	b7 0b       	sbc	r27, r23

00001fa0 <__udivmodhi4_ep>:
    1fa0:	88 1f       	adc	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	5a 95       	dec	r21
    1fa6:	a9 f7       	brne	.-22     	; 0x1f92 <__udivmodhi4_loop>
    1fa8:	80 95       	com	r24
    1faa:	90 95       	com	r25
    1fac:	bc 01       	movw	r22, r24
    1fae:	cd 01       	movw	r24, r26
    1fb0:	08 95       	ret

00001fb2 <__tablejump2__>:
    1fb2:	ee 0f       	add	r30, r30
    1fb4:	ff 1f       	adc	r31, r31
    1fb6:	88 1f       	adc	r24, r24
    1fb8:	8b bf       	out	0x3b, r24	; 59
    1fba:	07 90       	elpm	r0, Z+
    1fbc:	f6 91       	elpm	r31, Z
    1fbe:	e0 2d       	mov	r30, r0
    1fc0:	19 94       	eijmp

00001fc2 <_exit>:
    1fc2:	f8 94       	cli

00001fc4 <__stop_program>:
    1fc4:	ff cf       	rjmp	.-2      	; 0x1fc4 <__stop_program>
