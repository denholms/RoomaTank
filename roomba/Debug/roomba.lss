
roomba.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800200  00002420  000024b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002420  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001324  00800222  00800222  000024d6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000024d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002534  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d0  00000000  00000000  00002578  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004828  00000000  00000000  00002948  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012c1  00000000  00000000  00007170  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000023ef  00000000  00000000  00008431  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009d8  00000000  00000000  0000a820  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000106c  00000000  00000000  0000b1f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000263e  00000000  00000000  0000c264  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e8  00000000  00000000  0000e8a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c0       	rjmp	.+252    	; 0xfe <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__vector_1>
       8:	9b c0       	rjmp	.+310    	; 0x140 <__bad_interrupt>
       a:	00 00       	nop
       c:	99 c0       	rjmp	.+306    	; 0x140 <__bad_interrupt>
       e:	00 00       	nop
      10:	97 c0       	rjmp	.+302    	; 0x140 <__bad_interrupt>
      12:	00 00       	nop
      14:	95 c0       	rjmp	.+298    	; 0x140 <__bad_interrupt>
      16:	00 00       	nop
      18:	93 c0       	rjmp	.+294    	; 0x140 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	91 c0       	rjmp	.+290    	; 0x140 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8f c0       	rjmp	.+286    	; 0x140 <__bad_interrupt>
      22:	00 00       	nop
      24:	8d c0       	rjmp	.+282    	; 0x140 <__bad_interrupt>
      26:	00 00       	nop
      28:	8b c0       	rjmp	.+278    	; 0x140 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	89 c0       	rjmp	.+274    	; 0x140 <__bad_interrupt>
      2e:	00 00       	nop
      30:	87 c0       	rjmp	.+270    	; 0x140 <__bad_interrupt>
      32:	00 00       	nop
      34:	85 c0       	rjmp	.+266    	; 0x140 <__bad_interrupt>
      36:	00 00       	nop
      38:	83 c0       	rjmp	.+262    	; 0x140 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	81 c0       	rjmp	.+258    	; 0x140 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7f c0       	rjmp	.+254    	; 0x140 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 6a 0a 	jmp	0x14d4	; 0x14d4 <__vector_17>
      48:	7b c0       	rjmp	.+246    	; 0x140 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	79 c0       	rjmp	.+242    	; 0x140 <__bad_interrupt>
      4e:	00 00       	nop
      50:	77 c0       	rjmp	.+238    	; 0x140 <__bad_interrupt>
      52:	00 00       	nop
      54:	75 c0       	rjmp	.+234    	; 0x140 <__bad_interrupt>
      56:	00 00       	nop
      58:	73 c0       	rjmp	.+230    	; 0x140 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	71 c0       	rjmp	.+226    	; 0x140 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6f c0       	rjmp	.+222    	; 0x140 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 8a 0e 	jmp	0x1d14	; 0x1d14 <__vector_25>
      68:	6b c0       	rjmp	.+214    	; 0x140 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	69 c0       	rjmp	.+210    	; 0x140 <__bad_interrupt>
      6e:	00 00       	nop
      70:	67 c0       	rjmp	.+206    	; 0x140 <__bad_interrupt>
      72:	00 00       	nop
      74:	65 c0       	rjmp	.+202    	; 0x140 <__bad_interrupt>
      76:	00 00       	nop
      78:	63 c0       	rjmp	.+198    	; 0x140 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	61 c0       	rjmp	.+194    	; 0x140 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <__vector_32>
      84:	5d c0       	rjmp	.+186    	; 0x140 <__bad_interrupt>
      86:	00 00       	nop
      88:	5b c0       	rjmp	.+182    	; 0x140 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	59 c0       	rjmp	.+178    	; 0x140 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 bb 0e 	jmp	0x1d76	; 0x1d76 <__vector_36>
      94:	55 c0       	rjmp	.+170    	; 0x140 <__bad_interrupt>
      96:	00 00       	nop
      98:	53 c0       	rjmp	.+166    	; 0x140 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	51 c0       	rjmp	.+162    	; 0x140 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4f c0       	rjmp	.+158    	; 0x140 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4d c0       	rjmp	.+154    	; 0x140 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4b c0       	rjmp	.+150    	; 0x140 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	49 c0       	rjmp	.+146    	; 0x140 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	47 c0       	rjmp	.+142    	; 0x140 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	45 c0       	rjmp	.+138    	; 0x140 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	43 c0       	rjmp	.+134    	; 0x140 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	41 c0       	rjmp	.+130    	; 0x140 <__bad_interrupt>
      be:	00 00       	nop
      c0:	3f c0       	rjmp	.+126    	; 0x140 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3d c0       	rjmp	.+122    	; 0x140 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3b c0       	rjmp	.+118    	; 0x140 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	39 c0       	rjmp	.+114    	; 0x140 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	37 c0       	rjmp	.+110    	; 0x140 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	35 c0       	rjmp	.+106    	; 0x140 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	33 c0       	rjmp	.+102    	; 0x140 <__bad_interrupt>
      da:	00 00       	nop
      dc:	31 c0       	rjmp	.+98     	; 0x140 <__bad_interrupt>
      de:	00 00       	nop
      e0:	2f c0       	rjmp	.+94     	; 0x140 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	34 06       	cpc	r3, r20
      e6:	1a 06       	cpc	r1, r26
      e8:	34 06       	cpc	r3, r20
      ea:	43 06       	cpc	r4, r19
      ec:	e8 06       	cpc	r14, r24
      ee:	52 06       	cpc	r5, r18
      f0:	0b 06       	cpc	r0, r27
      f2:	3b 07       	cpc	r19, r27
      f4:	70 07       	cpc	r23, r16
      f6:	12 08       	sbc	r1, r2
      f8:	14 08       	sbc	r1, r4
      fa:	4a 08       	sbc	r4, r10
      fc:	c1 08       	sbc	r12, r1

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d1 e2       	ldi	r29, 0x21	; 33
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0c bf       	out	0x3c, r16	; 60

0000010e <__do_copy_data>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a0 e0       	ldi	r26, 0x00	; 0
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	e0 e2       	ldi	r30, 0x20	; 32
     116:	f4 e2       	ldi	r31, 0x24	; 36
     118:	00 e0       	ldi	r16, 0x00	; 0
     11a:	0b bf       	out	0x3b, r16	; 59
     11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x14>
     11e:	07 90       	elpm	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	a2 32       	cpi	r26, 0x22	; 34
     124:	b1 07       	cpc	r27, r17
     126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0x10>

00000128 <__do_clear_bss>:
     128:	25 e1       	ldi	r18, 0x15	; 21
     12a:	a2 e2       	ldi	r26, 0x22	; 34
     12c:	b2 e0       	ldi	r27, 0x02	; 2
     12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
     130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
     132:	a6 34       	cpi	r26, 0x46	; 70
     134:	b2 07       	cpc	r27, r18
     136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>
     138:	0e 94 46 0b 	call	0x168c	; 0x168c <main>
     13c:	0c 94 0e 12 	jmp	0x241c	; 0x241c <_exit>

00000140 <__bad_interrupt>:
     140:	5f cf       	rjmp	.-322    	; 0x0 <__vectors>

00000142 <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
     142:	0f 92       	push	r0
     144:	1f 92       	push	r1
     146:	2f 92       	push	r2
     148:	3f 92       	push	r3
     14a:	4f 92       	push	r4
     14c:	5f 92       	push	r5
     14e:	6f 92       	push	r6
     150:	7f 92       	push	r7
     152:	8f 92       	push	r8
     154:	9f 92       	push	r9
     156:	af 92       	push	r10
     158:	bf 92       	push	r11
     15a:	cf 92       	push	r12
     15c:	df 92       	push	r13
     15e:	ef 92       	push	r14
     160:	ff 92       	push	r15
     162:	0f 93       	push	r16
     164:	1f 93       	push	r17
     166:	2f 93       	push	r18
     168:	3f 93       	push	r19
     16a:	4f 93       	push	r20
     16c:	5f 93       	push	r21
     16e:	6f 93       	push	r22
     170:	7f 93       	push	r23
     172:	8f 93       	push	r24
     174:	9f 93       	push	r25
     176:	af 93       	push	r26
     178:	bf 93       	push	r27
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	ef 93       	push	r30
     180:	ff 93       	push	r31
     182:	0f b7       	in	r16, 0x3f	; 63
     184:	0f 93       	push	r16
     186:	fc b7       	in	r31, 0x3c	; 60
     188:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
     18a:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     18c:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
     18e:	e0 93 43 15 	sts	0x1543, r30
        sts  KernelSp+1, r31
     192:	f0 93 44 15 	sts	0x1544, r31
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
     196:	e0 91 21 15 	lds	r30, 0x1521
        lds  r31, CurrentSp+1
     19a:	f0 91 22 15 	lds	r31, 0x1522
        out  SPL, r30
     19e:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     1a0:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
     1a2:	ff 91       	pop	r31
     1a4:	fc bf       	out	0x3c, r31	; 60
     1a6:	0f 91       	pop	r16
     1a8:	0f bf       	out	0x3f, r16	; 63
     1aa:	ff 91       	pop	r31
     1ac:	ef 91       	pop	r30
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	bf 91       	pop	r27
     1b4:	af 91       	pop	r26
     1b6:	9f 91       	pop	r25
     1b8:	8f 91       	pop	r24
     1ba:	7f 91       	pop	r23
     1bc:	6f 91       	pop	r22
     1be:	5f 91       	pop	r21
     1c0:	4f 91       	pop	r20
     1c2:	3f 91       	pop	r19
     1c4:	2f 91       	pop	r18
     1c6:	1f 91       	pop	r17
     1c8:	0f 91       	pop	r16
     1ca:	ff 90       	pop	r15
     1cc:	ef 90       	pop	r14
     1ce:	df 90       	pop	r13
     1d0:	cf 90       	pop	r12
     1d2:	bf 90       	pop	r11
     1d4:	af 90       	pop	r10
     1d6:	9f 90       	pop	r9
     1d8:	8f 90       	pop	r8
     1da:	7f 90       	pop	r7
     1dc:	6f 90       	pop	r6
     1de:	5f 90       	pop	r5
     1e0:	4f 90       	pop	r4
     1e2:	3f 90       	pop	r3
     1e4:	2f 90       	pop	r2
     1e6:	1f 90       	pop	r1
     1e8:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
     1ea:	18 95       	reti

000001ec <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
     1ec:	0f 92       	push	r0
     1ee:	1f 92       	push	r1
     1f0:	2f 92       	push	r2
     1f2:	3f 92       	push	r3
     1f4:	4f 92       	push	r4
     1f6:	5f 92       	push	r5
     1f8:	6f 92       	push	r6
     1fa:	7f 92       	push	r7
     1fc:	8f 92       	push	r8
     1fe:	9f 92       	push	r9
     200:	af 92       	push	r10
     202:	bf 92       	push	r11
     204:	cf 92       	push	r12
     206:	df 92       	push	r13
     208:	ef 92       	push	r14
     20a:	ff 92       	push	r15
     20c:	0f 93       	push	r16
     20e:	1f 93       	push	r17
     210:	2f 93       	push	r18
     212:	3f 93       	push	r19
     214:	4f 93       	push	r20
     216:	5f 93       	push	r21
     218:	6f 93       	push	r22
     21a:	7f 93       	push	r23
     21c:	8f 93       	push	r24
     21e:	9f 93       	push	r25
     220:	af 93       	push	r26
     222:	bf 93       	push	r27
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	ef 93       	push	r30
     22a:	ff 93       	push	r31
     22c:	0f b7       	in	r16, 0x3f	; 63
     22e:	0f 93       	push	r16
     230:	fc b7       	in	r31, 0x3c	; 60
     232:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
     234:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     236:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
     238:	e0 93 21 15 	sts	0x1521, r30
        sts  CurrentSp+1, r31
     23c:	f0 93 22 15 	sts	0x1522, r31
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
     240:	e0 91 43 15 	lds	r30, 0x1543
        lds  r31, KernelSp+1
     244:	f0 91 44 15 	lds	r31, 0x1544
        out  SPL, r30
     248:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     24a:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
     24c:	ff 91       	pop	r31
     24e:	fc bf       	out	0x3c, r31	; 60
     250:	0f 91       	pop	r16
     252:	0f bf       	out	0x3f, r16	; 63
     254:	ff 91       	pop	r31
     256:	ef 91       	pop	r30
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	bf 91       	pop	r27
     25e:	af 91       	pop	r26
     260:	9f 91       	pop	r25
     262:	8f 91       	pop	r24
     264:	7f 91       	pop	r23
     266:	6f 91       	pop	r22
     268:	5f 91       	pop	r21
     26a:	4f 91       	pop	r20
     26c:	3f 91       	pop	r19
     26e:	2f 91       	pop	r18
     270:	1f 91       	pop	r17
     272:	0f 91       	pop	r16
     274:	ff 90       	pop	r15
     276:	ef 90       	pop	r14
     278:	df 90       	pop	r13
     27a:	cf 90       	pop	r12
     27c:	bf 90       	pop	r11
     27e:	af 90       	pop	r10
     280:	9f 90       	pop	r9
     282:	8f 90       	pop	r8
     284:	7f 90       	pop	r7
     286:	6f 90       	pop	r6
     288:	5f 90       	pop	r5
     28a:	4f 90       	pop	r4
     28c:	3f 90       	pop	r3
     28e:	2f 90       	pop	r2
     290:	1f 90       	pop	r1
     292:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
     294:	08 95       	ret

00000296 <adc_init>:

// initialize adc
void adc_init()
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
     296:	80 e4       	ldi	r24, 0x40	; 64
     298:	80 93 7c 00 	sts	0x007C, r24
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     29c:	87 e8       	ldi	r24, 0x87	; 135
     29e:	80 93 7a 00 	sts	0x007A, r24
     2a2:	08 95       	ret

000002a4 <adc_read>:
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     2a4:	ec e7       	ldi	r30, 0x7C	; 124
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	90 81       	ld	r25, Z
uint16_t adc_read(uint8_t ch)
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
     2aa:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     2ac:	98 7f       	andi	r25, 0xF8	; 248
     2ae:	89 2b       	or	r24, r25
     2b0:	80 83       	st	Z, r24
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
     2b2:	ea e7       	ldi	r30, 0x7A	; 122
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	80 81       	ld	r24, Z
     2b8:	80 64       	ori	r24, 0x40	; 64
     2ba:	80 83       	st	Z, r24
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
     2bc:	80 81       	ld	r24, Z
     2be:	86 fd       	sbrc	r24, 6
     2c0:	fd cf       	rjmp	.-6      	; 0x2bc <adc_read+0x18>
	
	return (ADC);
     2c2:	80 91 78 00 	lds	r24, 0x0078
     2c6:	90 91 79 00 	lds	r25, 0x0079
}
     2ca:	08 95       	ret

000002cc <radio_rxhandler>:
	return 0;
}

void radio_rxhandler(uint8_t pipenumber)
{
	rxflag = 1;
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	80 93 22 02 	sts	0x0222, r24
	PORTL ^= _BV(PL7);
     2d2:	eb e0       	ldi	r30, 0x0B	; 11
     2d4:	f1 e0       	ldi	r31, 0x01	; 1
     2d6:	80 81       	ld	r24, Z
     2d8:	80 58       	subi	r24, 0x80	; 128
     2da:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2dc:	83 ed       	ldi	r24, 0xD3	; 211
     2de:	90 e3       	ldi	r25, 0x30	; 48
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <radio_rxhandler+0x14>
     2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <radio_rxhandler+0x1a>
     2e6:	00 00       	nop
	_delay_ms(50);
	PORTL ^= _BV(PL7);
     2e8:	80 81       	ld	r24, Z
     2ea:	80 58       	subi	r24, 0x80	; 128
     2ec:	80 83       	st	Z, r24
     2ee:	08 95       	ret

000002f0 <lcd_nibble>:

void lcd_blank( uint8_t len )                   // blank n digits
{
  while( len-- )
    lcd_putchar( ' ' );
}
     2f0:	e2 e0       	ldi	r30, 0x02	; 2
     2f2:	f1 e0       	ldi	r31, 0x01	; 1
     2f4:	90 81       	ld	r25, Z
     2f6:	9f 7e       	andi	r25, 0xEF	; 239
     2f8:	90 83       	st	Z, r25
     2fa:	88 23       	and	r24, r24
     2fc:	1c f4       	brge	.+6      	; 0x304 <lcd_nibble+0x14>
     2fe:	90 81       	ld	r25, Z
     300:	90 61       	ori	r25, 0x10	; 16
     302:	90 83       	st	Z, r25
     304:	e2 e0       	ldi	r30, 0x02	; 2
     306:	f1 e0       	ldi	r31, 0x01	; 1
     308:	90 81       	ld	r25, Z
     30a:	97 7f       	andi	r25, 0xF7	; 247
     30c:	90 83       	st	Z, r25
     30e:	86 ff       	sbrs	r24, 6
     310:	03 c0       	rjmp	.+6      	; 0x318 <lcd_nibble+0x28>
     312:	90 81       	ld	r25, Z
     314:	98 60       	ori	r25, 0x08	; 8
     316:	90 83       	st	Z, r25
     318:	73 98       	cbi	0x0e, 3	; 14
     31a:	85 fd       	sbrc	r24, 5
     31c:	73 9a       	sbi	0x0e, 3	; 14
     31e:	a5 98       	cbi	0x14, 5	; 20
     320:	84 fd       	sbrc	r24, 4
     322:	a5 9a       	sbi	0x14, 5	; 20
     324:	e2 e0       	ldi	r30, 0x02	; 2
     326:	f1 e0       	ldi	r31, 0x01	; 1
     328:	80 81       	ld	r24, Z
     32a:	80 64       	ori	r24, 0x40	; 64
     32c:	80 83       	st	Z, r24
     32e:	85 e0       	ldi	r24, 0x05	; 5
     330:	8a 95       	dec	r24
     332:	f1 f7       	brne	.-4      	; 0x330 <lcd_nibble+0x40>
     334:	00 00       	nop
     336:	80 81       	ld	r24, Z
     338:	8f 7b       	andi	r24, 0xBF	; 191
     33a:	80 83       	st	Z, r24
     33c:	08 95       	ret

0000033e <lcd_command>:
     33e:	cf 93       	push	r28
     340:	c8 2f       	mov	r28, r24
     342:	e2 e0       	ldi	r30, 0x02	; 2
     344:	f1 e0       	ldi	r31, 0x01	; 1
     346:	80 81       	ld	r24, Z
     348:	8f 7d       	andi	r24, 0xDF	; 223
     34a:	80 83       	st	Z, r24
     34c:	8c 2f       	mov	r24, r28
     34e:	d0 df       	rcall	.-96     	; 0x2f0 <lcd_nibble>
     350:	8c 2f       	mov	r24, r28
     352:	82 95       	swap	r24
     354:	80 7f       	andi	r24, 0xF0	; 240
     356:	cc df       	rcall	.-104    	; 0x2f0 <lcd_nibble>
     358:	87 ec       	ldi	r24, 0xC7	; 199
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	01 97       	sbiw	r24, 0x01	; 1
     35e:	f1 f7       	brne	.-4      	; 0x35c <lcd_command+0x1e>
     360:	00 c0       	rjmp	.+0      	; 0x362 <lcd_command+0x24>
     362:	00 00       	nop
     364:	c4 30       	cpi	r28, 0x04	; 4
     366:	18 f0       	brcs	.+6      	; 0x36e <lcd_command+0x30>
     368:	c0 38       	cpi	r28, 0x80	; 128
     36a:	50 f0       	brcs	.+20     	; 0x380 <lcd_command+0x42>
     36c:	07 c0       	rjmp	.+14     	; 0x37c <lcd_command+0x3e>
     36e:	8f e3       	ldi	r24, 0x3F	; 63
     370:	9f e1       	ldi	r25, 0x1F	; 31
     372:	01 97       	sbiw	r24, 0x01	; 1
     374:	f1 f7       	brne	.-4      	; 0x372 <lcd_command+0x34>
     376:	00 c0       	rjmp	.+0      	; 0x378 <lcd_command+0x3a>
     378:	00 00       	nop
     37a:	c0 e8       	ldi	r28, 0x80	; 128
     37c:	c0 93 00 02 	sts	0x0200, r28
     380:	cf 91       	pop	r28
     382:	08 95       	ret

00000384 <lcd_putchar>:
     384:	cf 93       	push	r28
     386:	c8 2f       	mov	r28, r24
     388:	e2 e0       	ldi	r30, 0x02	; 2
     38a:	f1 e0       	ldi	r31, 0x01	; 1
     38c:	80 81       	ld	r24, Z
     38e:	80 62       	ori	r24, 0x20	; 32
     390:	80 83       	st	Z, r24
     392:	8c 2f       	mov	r24, r28
     394:	ad df       	rcall	.-166    	; 0x2f0 <lcd_nibble>
     396:	8c 2f       	mov	r24, r28
     398:	82 95       	swap	r24
     39a:	80 7f       	andi	r24, 0xF0	; 240
     39c:	a9 df       	rcall	.-174    	; 0x2f0 <lcd_nibble>
     39e:	87 ec       	ldi	r24, 0xC7	; 199
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	01 97       	sbiw	r24, 0x01	; 1
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <lcd_putchar+0x1e>
     3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <lcd_putchar+0x24>
     3a8:	00 00       	nop
     3aa:	80 91 00 02 	lds	r24, 0x0200
     3ae:	8f 5f       	subi	r24, 0xFF	; 255
     3b0:	80 93 00 02 	sts	0x0200, r24
     3b4:	80 39       	cpi	r24, 0x90	; 144
     3b6:	21 f0       	breq	.+8      	; 0x3c0 <lcd_putchar+0x3c>
     3b8:	80 3d       	cpi	r24, 0xD0	; 208
     3ba:	21 f4       	brne	.+8      	; 0x3c4 <lcd_putchar+0x40>
     3bc:	80 e8       	ldi	r24, 0x80	; 128
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <lcd_putchar+0x3e>
     3c0:	80 ec       	ldi	r24, 0xC0	; 192
     3c2:	bd df       	rcall	.-134    	; 0x33e <lcd_command>
     3c4:	cf 91       	pop	r28
     3c6:	08 95       	ret

000003c8 <lcd_puts>:
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	ec 01       	movw	r28, r24
     3ce:	88 81       	ld	r24, Y
     3d0:	88 23       	and	r24, r24
     3d2:	29 f0       	breq	.+10     	; 0x3de <lcd_puts+0x16>
     3d4:	21 96       	adiw	r28, 0x01	; 1
     3d6:	d6 df       	rcall	.-84     	; 0x384 <lcd_putchar>
     3d8:	89 91       	ld	r24, Y+
     3da:	81 11       	cpse	r24, r1
     3dc:	fc cf       	rjmp	.-8      	; 0x3d6 <lcd_puts+0xe>
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	08 95       	ret

000003e4 <lcd_init>:


void lcd_init( void )
{
  LCD_DDR_D4 = 1;                               // enable output pins
     3e4:	9d 9a       	sbi	0x13, 5	; 19
  LCD_DDR_D5 = 1;
     3e6:	6b 9a       	sbi	0x0d, 3	; 13
  LCD_DDR_D6 = 1;
     3e8:	e1 e0       	ldi	r30, 0x01	; 1
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	80 81       	ld	r24, Z
     3ee:	88 60       	ori	r24, 0x08	; 8
     3f0:	80 83       	st	Z, r24
  LCD_DDR_D7 = 1;
     3f2:	80 81       	ld	r24, Z
     3f4:	80 61       	ori	r24, 0x10	; 16
     3f6:	80 83       	st	Z, r24
  LCD_DDR_RS = 1;
     3f8:	80 81       	ld	r24, Z
     3fa:	80 62       	ori	r24, 0x20	; 32
     3fc:	80 83       	st	Z, r24
  LCD_DDR_E0 = 1;
     3fe:	80 81       	ld	r24, Z
     400:	80 64       	ori	r24, 0x40	; 64
     402:	80 83       	st	Z, r24
  LCD_E0 = 0;
     404:	e2 e0       	ldi	r30, 0x02	; 2
     406:	f1 e0       	ldi	r31, 0x01	; 1
     408:	80 81       	ld	r24, Z
     40a:	8f 7b       	andi	r24, 0xBF	; 191
     40c:	80 83       	st	Z, r24
  LCD_RS = 0;                                   // send commands
     40e:	80 81       	ld	r24, Z
     410:	8f 7d       	andi	r24, 0xDF	; 223
     412:	80 83       	st	Z, r24
     414:	8f e5       	ldi	r24, 0x5F	; 95
     416:	9a ee       	ldi	r25, 0xEA	; 234
     418:	01 97       	sbiw	r24, 0x01	; 1
     41a:	f1 f7       	brne	.-4      	; 0x418 <lcd_init+0x34>
     41c:	00 c0       	rjmp	.+0      	; 0x41e <lcd_init+0x3a>
     41e:	00 00       	nop

  _delay_ms( 15 );
  lcd_nibble( 0x30 );
     420:	80 e3       	ldi	r24, 0x30	; 48
     422:	66 df       	rcall	.-308    	; 0x2f0 <lcd_nibble>
     424:	8f e0       	ldi	r24, 0x0F	; 15
     426:	90 e4       	ldi	r25, 0x40	; 64
     428:	01 97       	sbiw	r24, 0x01	; 1
     42a:	f1 f7       	brne	.-4      	; 0x428 <lcd_init+0x44>
     42c:	00 c0       	rjmp	.+0      	; 0x42e <lcd_init+0x4a>
     42e:	00 00       	nop
  _delay_ms( 4.1 );
  lcd_nibble( 0x30 );
     430:	80 e3       	ldi	r24, 0x30	; 48
     432:	5e df       	rcall	.-324    	; 0x2f0 <lcd_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     434:	8f e8       	ldi	r24, 0x8F	; 143
     436:	91 e0       	ldi	r25, 0x01	; 1
     438:	01 97       	sbiw	r24, 0x01	; 1
     43a:	f1 f7       	brne	.-4      	; 0x438 <lcd_init+0x54>
     43c:	00 c0       	rjmp	.+0      	; 0x43e <lcd_init+0x5a>
     43e:	00 00       	nop
  _delay_us( 100 );
  lcd_nibble( 0x30 );
     440:	80 e3       	ldi	r24, 0x30	; 48
     442:	56 df       	rcall	.-340    	; 0x2f0 <lcd_nibble>
     444:	87 ec       	ldi	r24, 0xC7	; 199
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	01 97       	sbiw	r24, 0x01	; 1
     44a:	f1 f7       	brne	.-4      	; 0x448 <lcd_init+0x64>
     44c:	00 c0       	rjmp	.+0      	; 0x44e <lcd_init+0x6a>
     44e:	00 00       	nop
  _delay_us( LCD_TIME_DAT );
  lcd_nibble( 0x20 );                           // 4 bit mode
     450:	80 e2       	ldi	r24, 0x20	; 32
     452:	4e df       	rcall	.-356    	; 0x2f0 <lcd_nibble>
     454:	87 ec       	ldi	r24, 0xC7	; 199
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	01 97       	sbiw	r24, 0x01	; 1
     45a:	f1 f7       	brne	.-4      	; 0x458 <lcd_init+0x74>
     45c:	00 c0       	rjmp	.+0      	; 0x45e <lcd_init+0x7a>
     45e:	00 00       	nop
  _delay_us( LCD_TIME_DAT );
#if LCD_LINE == 1
  lcd_command( 0x20 );                          // 1 line
#else
  lcd_command( 0x28 );                          // 2 lines 5*7
     460:	88 e2       	ldi	r24, 0x28	; 40
     462:	6d df       	rcall	.-294    	; 0x33e <lcd_command>
#endif
  lcd_command( 0x08 );                          // display off
     464:	88 e0       	ldi	r24, 0x08	; 8
     466:	6b df       	rcall	.-298    	; 0x33e <lcd_command>
  lcd_command( 0x01 );                          // display clear
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	69 df       	rcall	.-302    	; 0x33e <lcd_command>
  lcd_command( 0x06 );                          // cursor increment
     46c:	86 e0       	ldi	r24, 0x06	; 6
     46e:	67 df       	rcall	.-306    	; 0x33e <lcd_command>
  lcd_command( 0x0C );                          // on, no cursor, no blink
     470:	8c e0       	ldi	r24, 0x0C	; 12
     472:	65 cf       	rjmp	.-310    	; 0x33e <lcd_command>
     474:	08 95       	ret

00000476 <init_LED_PORTL_pin0>:
void init_LED_PORTL_pin6(void) {
    DDRL |= _BV(DDL6);
}

void init_LED_PORTL_pin7(void) {
    DDRL |= _BV(DDL7);
     476:	ea e0       	ldi	r30, 0x0A	; 10
     478:	f1 e0       	ldi	r31, 0x01	; 1
     47a:	80 81       	ld	r24, Z
     47c:	81 60       	ori	r24, 0x01	; 1
     47e:	80 83       	st	Z, r24
     480:	08 95       	ret

00000482 <init_LED_PORTL_pin1>:
     482:	ea e0       	ldi	r30, 0x0A	; 10
     484:	f1 e0       	ldi	r31, 0x01	; 1
     486:	80 81       	ld	r24, Z
     488:	82 60       	ori	r24, 0x02	; 2
     48a:	80 83       	st	Z, r24
     48c:	08 95       	ret

0000048e <init_LED_PORTL_pin2>:
     48e:	ea e0       	ldi	r30, 0x0A	; 10
     490:	f1 e0       	ldi	r31, 0x01	; 1
     492:	80 81       	ld	r24, Z
     494:	84 60       	ori	r24, 0x04	; 4
     496:	80 83       	st	Z, r24
     498:	08 95       	ret

0000049a <init_LED_PORTL_pin5>:
     49a:	ea e0       	ldi	r30, 0x0A	; 10
     49c:	f1 e0       	ldi	r31, 0x01	; 1
     49e:	80 81       	ld	r24, Z
     4a0:	80 62       	ori	r24, 0x20	; 32
     4a2:	80 83       	st	Z, r24
     4a4:	08 95       	ret

000004a6 <init_LED_PORTL_pin6>:
     4a6:	ea e0       	ldi	r30, 0x0A	; 10
     4a8:	f1 e0       	ldi	r31, 0x01	; 1
     4aa:	80 81       	ld	r24, Z
     4ac:	80 64       	ori	r24, 0x40	; 64
     4ae:	80 83       	st	Z, r24
     4b0:	08 95       	ret

000004b2 <enable_LED>:
}

void enable_LED(unsigned int mask) {
    PORTL |= _BV(mask);
     4b2:	eb e0       	ldi	r30, 0x0B	; 11
     4b4:	f1 e0       	ldi	r31, 0x01	; 1
     4b6:	90 81       	ld	r25, Z
     4b8:	21 e0       	ldi	r18, 0x01	; 1
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <enable_LED+0x10>
     4be:	22 0f       	add	r18, r18
     4c0:	33 1f       	adc	r19, r19
     4c2:	8a 95       	dec	r24
     4c4:	e2 f7       	brpl	.-8      	; 0x4be <enable_LED+0xc>
     4c6:	29 2b       	or	r18, r25
     4c8:	20 83       	st	Z, r18
     4ca:	08 95       	ret

000004cc <disable_LED>:
}

void disable_LED(unsigned int mask) {
    PORTL &= ~_BV(mask);
     4cc:	eb e0       	ldi	r30, 0x0B	; 11
     4ce:	f1 e0       	ldi	r31, 0x01	; 1
     4d0:	90 81       	ld	r25, Z
     4d2:	21 e0       	ldi	r18, 0x01	; 1
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <disable_LED+0x10>
     4d8:	22 0f       	add	r18, r18
     4da:	33 1f       	adc	r19, r19
     4dc:	8a 95       	dec	r24
     4de:	e2 f7       	brpl	.-8      	; 0x4d8 <disable_LED+0xc>
     4e0:	20 95       	com	r18
     4e2:	29 23       	and	r18, r25
     4e4:	20 83       	st	Z, r18
     4e6:	08 95       	ret

000004e8 <Poll_Joystick>:

void Poll_Roomba_Data()
{
	
	
	Roomba_UpdateSensorPacket(EXTERNAL, &data);
     4e8:	87 e0       	ldi	r24, 0x07	; 7
     4ea:	dc de       	rcall	.-584    	; 0x2a4 <adc_read>
     4ec:	86 e0       	ldi	r24, 0x06	; 6
     4ee:	da de       	rcall	.-588    	; 0x2a4 <adc_read>
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	70 e0       	ldi	r23, 0x00	; 0
     4f4:	87 e1       	ldi	r24, 0x17	; 23
     4f6:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <uart_putchar>
     4fa:	fa cf       	rjmp	.-12     	; 0x4f0 <Poll_Joystick+0x8>

000004fc <a_main>:
	//uart_send_string(buffer, 0);
}

// Application level main function
// Creates the required tasks and then terminates
void a_main() {
     4fc:	ff 92       	push	r15
     4fe:	0f 93       	push	r16
     500:	1f 93       	push	r17
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
     50a:	60 97       	sbiw	r28, 0x10	; 16
     50c:	0f b6       	in	r0, 0x3f	; 63
     50e:	f8 94       	cli
     510:	de bf       	out	0x3e, r29	; 62
     512:	0f be       	out	0x3f, r0	; 63
     514:	cd bf       	out	0x3d, r28	; 61
	char line[16];
	portL2_Mutex = Mutex_Init();
     516:	36 d7       	rcall	.+3692   	; 0x1384 <Mutex_Init>
     518:	90 93 bc 14 	sts	0x14BC, r25
     51c:	80 93 bb 14 	sts	0x14BB, r24
	portL6_Mutex = Mutex_Init();
     520:	31 d7       	rcall	.+3682   	; 0x1384 <Mutex_Init>
     522:	90 93 dc 14 	sts	0x14DC, r25
     526:	80 93 db 14 	sts	0x14DB, r24
	unsigned char jsBtn;
	
	
	e1 = Event_Init();
     52a:	47 d7       	rcall	.+3726   	; 0x13ba <Event_Init>
     52c:	90 93 e0 14 	sts	0x14E0, r25
     530:	80 93 df 14 	sts	0x14DF, r24
	e2 = Event_Init();
     534:	42 d7       	rcall	.+3716   	; 0x13ba <Event_Init>
     536:	90 93 c0 14 	sts	0x14C0, r25
     53a:	80 93 bf 14 	sts	0x14BF, r24
	adc_init();
     53e:	ab de       	rcall	.-682    	; 0x296 <adc_init>
	uint16_t adc_test = adc_read(7);
     540:	87 e0       	ldi	r24, 0x07	; 7
     542:	b0 de       	rcall	.-672    	; 0x2a4 <adc_read>
     544:	18 2f       	mov	r17, r24
     546:	09 2f       	mov	r16, r25
	//PongPID = Task_Create(Pong, 8, 1);
	//PingPID = Task_Create(Ping, 8, 1);
	//IdlePID = Task_Create(Idle, MINPRIORITY, 1);
	lcd_init(); // initialized the LCD
     548:	4d df       	rcall	.-358    	; 0x3e4 <lcd_init>
	lcd_xy(0,0);
     54a:	80 e8       	ldi	r24, 0x80	; 128
     54c:	f8 de       	rcall	.-528    	; 0x33e <lcd_command>
	DDRB |= (1<<DDB4); // enable output mode of Digital Pin 10 (PORTB Pin 4) for backlit control
     54e:	24 9a       	sbi	0x04, 4	; 4
	PORTB |= (1<<DDB4); // enable back light
     550:	2c 9a       	sbi	0x05, 4	; 5
	itoa(adc_test, jsBtn);
     552:	f1 2c       	mov	r15, r1
     554:	6f 2d       	mov	r22, r15
     556:	70 e0       	ldi	r23, 0x00	; 0
     558:	81 2f       	mov	r24, r17
     55a:	90 2f       	mov	r25, r16
     55c:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <itoa>
	sprintf(line, "ADC:%2d", adc_test);
     560:	0f 93       	push	r16
     562:	1f 93       	push	r17
     564:	8f e0       	ldi	r24, 0x0F	; 15
     566:	92 e0       	ldi	r25, 0x02	; 2
     568:	9f 93       	push	r25
     56a:	8f 93       	push	r24
     56c:	8e 01       	movw	r16, r28
     56e:	0f 5f       	subi	r16, 0xFF	; 255
     570:	1f 4f       	sbci	r17, 0xFF	; 255
     572:	1f 93       	push	r17
     574:	0f 93       	push	r16
     576:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <sprintf>
	lcd_puts(line);
     57a:	c8 01       	movw	r24, r16
     57c:	25 df       	rcall	.-438    	; 0x3c8 <lcd_puts>
	lcd_xy(0,1);
     57e:	80 ec       	ldi	r24, 0xC0	; 192
     580:	de de       	rcall	.-580    	; 0x33e <lcd_command>
	sprintf(line, "Laser: %s", jsBtn);
     582:	1f 92       	push	r1
     584:	ff 92       	push	r15
     586:	87 e1       	ldi	r24, 0x17	; 23
     588:	92 e0       	ldi	r25, 0x02	; 2
     58a:	9f 93       	push	r25
     58c:	8f 93       	push	r24
     58e:	1f 93       	push	r17
     590:	0f 93       	push	r16
     592:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <sprintf>
	lcd_puts(line);
     596:	c8 01       	movw	r24, r16
     598:	17 df       	rcall	.-466    	; 0x3c8 <lcd_puts>
	//Roomba_Init();
	uart_init(UART_38400);
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <uart_init>
	
	//Roomba_PlaySong(50);

	
	
	InitPID = Task_Create(Poll_Joystick,0,1);
     5a0:	41 e0       	ldi	r20, 0x01	; 1
     5a2:	50 e0       	ldi	r21, 0x00	; 0
     5a4:	60 e0       	ldi	r22, 0x00	; 0
     5a6:	70 e0       	ldi	r23, 0x00	; 0
     5a8:	84 e7       	ldi	r24, 0x74	; 116
     5aa:	92 e0       	ldi	r25, 0x02	; 2
     5ac:	21 d7       	rcall	.+3650   	; 0x13f0 <Task_Create>
     5ae:	90 93 de 14 	sts	0x14DE, r25
     5b2:	80 93 dd 14 	sts	0x14DD, r24
	//DrivePID = Task_Create(Init_Drive, 8, 1);
	//IdlePID = Task_Create(Idle, 8, 1);
	Task_Terminate();
     5b6:	11 d0       	rcall	.+34     	; 0x5da <Task_Terminate>
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	f8 94       	cli
     5bc:	de bf       	out	0x3e, r29	; 62
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	cd bf       	out	0x3d, r28	; 61
}
     5c2:	60 96       	adiw	r28, 0x10	; 16
     5c4:	0f b6       	in	r0, 0x3f	; 63
     5c6:	f8 94       	cli
     5c8:	de bf       	out	0x3e, r29	; 62
     5ca:	0f be       	out	0x3f, r0	; 63
     5cc:	cd bf       	out	0x3d, r28	; 61
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	1f 91       	pop	r17
     5d4:	0f 91       	pop	r16
     5d6:	ff 90       	pop	r15
     5d8:	08 95       	ret

000005da <Task_Terminate>:
/**
  * Application level task getarg to return intiial arg value
  */
int Task_GetArg(PID p) {
	return (Cp->arg);
}
     5da:	80 91 33 02 	lds	r24, 0x0233
     5de:	90 91 34 02 	lds	r25, 0x0234
     5e2:	89 2b       	or	r24, r25
     5e4:	51 f0       	breq	.+20     	; 0x5fa <Task_Terminate+0x20>
     5e6:	f8 94       	cli
     5e8:	e0 91 35 02 	lds	r30, 0x0235
     5ec:	f0 91 36 02 	lds	r31, 0x0236
     5f0:	e3 5f       	subi	r30, 0xF3	; 243
     5f2:	fe 4f       	sbci	r31, 0xFE	; 254
     5f4:	84 e0       	ldi	r24, 0x04	; 4
     5f6:	80 83       	st	Z, r24
     5f8:	f9 cd       	rjmp	.-1038   	; 0x1ec <Enter_Kernel>
     5fa:	08 95       	ret

000005fc <Kernel_Create_Task_At>:
     5fc:	ef 92       	push	r14
     5fe:	ff 92       	push	r15
     600:	0f 93       	push	r16
     602:	1f 93       	push	r17
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	1f 92       	push	r1
     60a:	1f 92       	push	r1
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
     610:	9a 83       	std	Y+2, r25	; 0x02
     612:	89 83       	std	Y+1, r24	; 0x01
     614:	dc 01       	movw	r26, r24
     616:	7c 01       	movw	r14, r24
     618:	04 e0       	ldi	r16, 0x04	; 4
     61a:	e0 0e       	add	r14, r16
     61c:	f1 1c       	adc	r15, r1
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	91 e0       	ldi	r25, 0x01	; 1
     622:	f7 01       	movw	r30, r14
     624:	8c 01       	movw	r16, r24
     626:	11 92       	st	Z+, r1
     628:	01 50       	subi	r16, 0x01	; 1
     62a:	10 40       	sbci	r17, 0x00	; 0
     62c:	e1 f7       	brne	.-8      	; 0x626 <Kernel_Create_Task_At+0x2a>
     62e:	fd 01       	movw	r30, r26
     630:	ed 5f       	subi	r30, 0xFD	; 253
     632:	fe 4f       	sbci	r31, 0xFE	; 254
     634:	8d ee       	ldi	r24, 0xED	; 237
     636:	92 e0       	ldi	r25, 0x02	; 2
     638:	80 83       	st	Z, r24
     63a:	31 97       	sbiw	r30, 0x01	; 1
     63c:	90 83       	st	Z, r25
     63e:	31 97       	sbiw	r30, 0x01	; 1
     640:	60 83       	st	Z, r22
     642:	31 97       	sbiw	r30, 0x01	; 1
     644:	70 83       	st	Z, r23
     646:	31 97       	sbiw	r30, 0x01	; 1
     648:	10 82       	st	Z, r1
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	92 93       	st	-Z, r25
     64e:	9f 5f       	subi	r25, 0xFF	; 255
     650:	92 32       	cpi	r25, 0x22	; 34
     652:	e1 f7       	brne	.-8      	; 0x64c <Kernel_Create_Task_At+0x50>
     654:	a4 52       	subi	r26, 0x24	; 36
     656:	bf 4f       	sbci	r27, 0xFF	; 255
     658:	e9 81       	ldd	r30, Y+1	; 0x01
     65a:	fa 81       	ldd	r31, Y+2	; 0x02
     65c:	b3 83       	std	Z+3, r27	; 0x03
     65e:	a2 83       	std	Z+2, r26	; 0x02
     660:	df 01       	movw	r26, r30
     662:	a5 5f       	subi	r26, 0xF5	; 245
     664:	be 4f       	sbci	r27, 0xFE	; 254
     666:	11 96       	adiw	r26, 0x01	; 1
     668:	7c 93       	st	X, r23
     66a:	6e 93       	st	-X, r22
     66c:	12 96       	adiw	r26, 0x02	; 2
     66e:	1c 92       	st	X, r1
     670:	80 91 2f 02 	lds	r24, 0x022F
     674:	90 91 30 02 	lds	r25, 0x0230
     678:	91 83       	std	Z+1, r25	; 0x01
     67a:	80 83       	st	Z, r24
     67c:	89 81       	ldd	r24, Y+1	; 0x01
     67e:	9a 81       	ldd	r25, Y+2	; 0x02
     680:	fc 01       	movw	r30, r24
     682:	eb 5f       	subi	r30, 0xFB	; 251
     684:	fe 4f       	sbci	r31, 0xFE	; 254
     686:	51 83       	std	Z+1, r21	; 0x01
     688:	40 83       	st	Z, r20
     68a:	32 96       	adiw	r30, 0x02	; 2
     68c:	51 83       	std	Z+1, r21	; 0x01
     68e:	40 83       	st	Z, r20
     690:	32 96       	adiw	r30, 0x02	; 2
     692:	31 83       	std	Z+1, r19	; 0x01
     694:	20 83       	st	Z, r18
     696:	71 96       	adiw	r30, 0x11	; 17
     698:	11 82       	std	Z+1, r1	; 0x01
     69a:	10 82       	st	Z, r1
     69c:	34 97       	sbiw	r30, 0x04	; 4
     69e:	23 e6       	ldi	r18, 0x63	; 99
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	31 83       	std	Z+1, r19	; 0x01
     6a4:	20 83       	st	Z, r18
     6a6:	20 91 31 02 	lds	r18, 0x0231
     6aa:	30 91 32 02 	lds	r19, 0x0232
     6ae:	2f 5f       	subi	r18, 0xFF	; 255
     6b0:	3f 4f       	sbci	r19, 0xFF	; 255
     6b2:	30 93 32 02 	sts	0x0232, r19
     6b6:	20 93 31 02 	sts	0x0231, r18
     6ba:	20 91 2f 02 	lds	r18, 0x022F
     6be:	30 91 30 02 	lds	r19, 0x0230
     6c2:	2f 5f       	subi	r18, 0xFF	; 255
     6c4:	3f 4f       	sbci	r19, 0xFF	; 255
     6c6:	30 93 30 02 	sts	0x0230, r19
     6ca:	20 93 2f 02 	sts	0x022F, r18
     6ce:	72 97       	sbiw	r30, 0x12	; 18
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	80 83       	st	Z, r24
     6d4:	47 e2       	ldi	r20, 0x27	; 39
     6d6:	52 e0       	ldi	r21, 0x02	; 2
     6d8:	61 e0       	ldi	r22, 0x01	; 1
     6da:	75 e1       	ldi	r23, 0x15	; 21
     6dc:	ce 01       	movw	r24, r28
     6de:	01 96       	adiw	r24, 0x01	; 1
     6e0:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <enqueueRQ>
     6e4:	e9 81       	ldd	r30, Y+1	; 0x01
     6e6:	fa 81       	ldd	r31, Y+2	; 0x02
     6e8:	80 81       	ld	r24, Z
     6ea:	91 81       	ldd	r25, Z+1	; 0x01
     6ec:	0f 90       	pop	r0
     6ee:	0f 90       	pop	r0
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	1f 91       	pop	r17
     6f6:	0f 91       	pop	r16
     6f8:	ff 90       	pop	r15
     6fa:	ef 90       	pop	r14
     6fc:	08 95       	ret

000006fe <Kernel_Create_Task>:
     6fe:	cf 93       	push	r28
     700:	df 93       	push	r29
     702:	ec 01       	movw	r28, r24
     704:	80 91 31 02 	lds	r24, 0x0231
     708:	90 91 32 02 	lds	r25, 0x0232
     70c:	40 97       	sbiw	r24, 0x10	; 16
     70e:	21 f1       	breq	.+72     	; 0x758 <Kernel_Create_Task+0x5a>
     710:	80 91 9b 03 	lds	r24, 0x039B
     714:	88 23       	and	r24, r24
     716:	71 f0       	breq	.+28     	; 0x734 <Kernel_Create_Task+0x36>
     718:	a9 eb       	ldi	r26, 0xB9	; 185
     71a:	b4 e0       	ldi	r27, 0x04	; 4
     71c:	e1 e0       	ldi	r30, 0x01	; 1
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	9c 91       	ld	r25, X
     722:	99 23       	and	r25, r25
     724:	49 f0       	breq	.+18     	; 0x738 <Kernel_Create_Task+0x3a>
     726:	31 96       	adiw	r30, 0x01	; 1
     728:	a2 5e       	subi	r26, 0xE2	; 226
     72a:	be 4f       	sbci	r27, 0xFE	; 254
     72c:	e0 31       	cpi	r30, 0x10	; 16
     72e:	f1 05       	cpc	r31, r1
     730:	b9 f7       	brne	.-18     	; 0x720 <Kernel_Create_Task+0x22>
     732:	02 c0       	rjmp	.+4      	; 0x738 <Kernel_Create_Task+0x3a>
     734:	e0 e0       	ldi	r30, 0x00	; 0
     736:	f0 e0       	ldi	r31, 0x00	; 0
     738:	9a 01       	movw	r18, r20
     73a:	ab 01       	movw	r20, r22
     73c:	be 01       	movw	r22, r28
     73e:	ae e1       	ldi	r26, 0x1E	; 30
     740:	b1 e0       	ldi	r27, 0x01	; 1
     742:	ea 9f       	mul	r30, r26
     744:	c0 01       	movw	r24, r0
     746:	eb 9f       	mul	r30, r27
     748:	90 0d       	add	r25, r0
     74a:	fa 9f       	mul	r31, r26
     74c:	90 0d       	add	r25, r0
     74e:	11 24       	eor	r1, r1
     750:	89 56       	subi	r24, 0x69	; 105
     752:	9d 4f       	sbci	r25, 0xFD	; 253
     754:	53 df       	rcall	.-346    	; 0x5fc <Kernel_Create_Task_At>
     756:	00 c0       	rjmp	.+0      	; 0x758 <Kernel_Create_Task+0x5a>
     758:	df 91       	pop	r29
     75a:	cf 91       	pop	r28
     75c:	08 95       	ret

0000075e <Kernel_Init_Mutex_At>:
     75e:	fc 01       	movw	r30, r24
     760:	80 91 2d 02 	lds	r24, 0x022D
     764:	90 91 2e 02 	lds	r25, 0x022E
     768:	91 83       	std	Z+1, r25	; 0x01
     76a:	80 83       	st	Z, r24
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	82 83       	std	Z+2, r24	; 0x02
     770:	80 91 2d 02 	lds	r24, 0x022D
     774:	90 91 2e 02 	lds	r25, 0x022E
     778:	01 96       	adiw	r24, 0x01	; 1
     77a:	90 93 2e 02 	sts	0x022E, r25
     77e:	80 93 2d 02 	sts	0x022D, r24
     782:	80 81       	ld	r24, Z
     784:	91 81       	ldd	r25, Z+1	; 0x01
     786:	08 95       	ret

00000788 <Kernel_Init_Event_At>:
     788:	fc 01       	movw	r30, r24
     78a:	80 91 2b 02 	lds	r24, 0x022B
     78e:	90 91 2c 02 	lds	r25, 0x022C
     792:	91 83       	std	Z+1, r25	; 0x01
     794:	80 83       	st	Z, r24
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	82 83       	std	Z+2, r24	; 0x02
     79a:	14 82       	std	Z+4, r1	; 0x04
     79c:	13 82       	std	Z+3, r1	; 0x03
     79e:	80 91 2b 02 	lds	r24, 0x022B
     7a2:	90 91 2c 02 	lds	r25, 0x022C
     7a6:	01 96       	adiw	r24, 0x01	; 1
     7a8:	90 93 2c 02 	sts	0x022C, r25
     7ac:	80 93 2b 02 	sts	0x022B, r24
     7b0:	80 81       	ld	r24, Z
     7b2:	91 81       	ldd	r25, Z+1	; 0x01
     7b4:	08 95       	ret

000007b6 <OS_Init>:
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	10 92 32 02 	sts	0x0232, r1
     7be:	10 92 31 02 	sts	0x0231, r1
     7c2:	10 92 34 02 	sts	0x0234, r1
     7c6:	10 92 33 02 	sts	0x0233, r1
     7ca:	10 92 2e 02 	sts	0x022E, r1
     7ce:	10 92 2d 02 	sts	0x022D, r1
     7d2:	10 92 2c 02 	sts	0x022C, r1
     7d6:	10 92 2b 02 	sts	0x022B, r1
     7da:	10 92 30 02 	sts	0x0230, r1
     7de:	10 92 2f 02 	sts	0x022F, r1
     7e2:	e7 e9       	ldi	r30, 0x97	; 151
     7e4:	f2 e0       	ldi	r31, 0x02	; 2
     7e6:	ab e9       	ldi	r26, 0x9B	; 155
     7e8:	b3 e0       	ldi	r27, 0x03	; 3
     7ea:	47 e7       	ldi	r20, 0x77	; 119
     7ec:	54 e1       	ldi	r21, 0x14	; 20
     7ee:	2e e1       	ldi	r18, 0x1E	; 30
     7f0:	31 e0       	ldi	r19, 0x01	; 1
     7f2:	83 e6       	ldi	r24, 0x63	; 99
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	ef 01       	movw	r28, r30
     7f8:	b9 01       	movw	r22, r18
     7fa:	19 92       	st	Y+, r1
     7fc:	61 50       	subi	r22, 0x01	; 1
     7fe:	70 40       	sbci	r23, 0x00	; 0
     800:	e1 f7       	brne	.-8      	; 0x7fa <OS_Init+0x44>
     802:	1c 92       	st	X, r1
     804:	53 96       	adiw	r26, 0x13	; 19
     806:	9c 93       	st	X, r25
     808:	8e 93       	st	-X, r24
     80a:	52 97       	sbiw	r26, 0x12	; 18
     80c:	11 82       	std	Z+1, r1	; 0x01
     80e:	10 82       	st	Z, r1
     810:	e2 5e       	subi	r30, 0xE2	; 226
     812:	fe 4f       	sbci	r31, 0xFE	; 254
     814:	a2 5e       	subi	r26, 0xE2	; 226
     816:	be 4f       	sbci	r27, 0xFE	; 254
     818:	e4 17       	cp	r30, r20
     81a:	f5 07       	cpc	r31, r21
     81c:	61 f7       	brne	.-40     	; 0x7f6 <OS_Init+0x40>
     81e:	e1 e6       	ldi	r30, 0x61	; 97
     820:	f2 e0       	ldi	r31, 0x02	; 2
     822:	29 e9       	ldi	r18, 0x99	; 153
     824:	32 e0       	ldi	r19, 0x02	; 2
     826:	87 e0       	ldi	r24, 0x07	; 7
     828:	df 01       	movw	r26, r30
     82a:	12 97       	sbiw	r26, 0x02	; 2
     82c:	ed 01       	movw	r28, r26
     82e:	68 2f       	mov	r22, r24
     830:	19 92       	st	Y+, r1
     832:	6a 95       	dec	r22
     834:	e9 f7       	brne	.-6      	; 0x830 <OS_Init+0x7a>
     836:	10 82       	st	Z, r1
     838:	37 96       	adiw	r30, 0x07	; 7
     83a:	e2 17       	cp	r30, r18
     83c:	f3 07       	cpc	r31, r19
     83e:	a1 f7       	brne	.-24     	; 0x828 <OS_Init+0x72>
     840:	e9 e3       	ldi	r30, 0x39	; 57
     842:	f2 e0       	ldi	r31, 0x02	; 2
     844:	21 e6       	ldi	r18, 0x61	; 97
     846:	32 e0       	ldi	r19, 0x02	; 2
     848:	85 e0       	ldi	r24, 0x05	; 5
     84a:	df 01       	movw	r26, r30
     84c:	12 97       	sbiw	r26, 0x02	; 2
     84e:	ed 01       	movw	r28, r26
     850:	68 2f       	mov	r22, r24
     852:	19 92       	st	Y+, r1
     854:	6a 95       	dec	r22
     856:	e9 f7       	brne	.-6      	; 0x852 <OS_Init+0x9c>
     858:	10 82       	st	Z, r1
     85a:	35 96       	adiw	r30, 0x05	; 5
     85c:	e2 17       	cp	r30, r18
     85e:	f3 07       	cpc	r31, r19
     860:	a1 f7       	brne	.-24     	; 0x84a <OS_Init+0x94>
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	08 95       	ret

00000868 <OS_Abort>:
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	0e 94 0e 12 	call	0x241c	; 0x241c <_exit>

00000870 <Dispatch>:
     870:	67 e2       	ldi	r22, 0x27	; 39
     872:	72 e0       	ldi	r23, 0x02	; 2
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	95 e1       	ldi	r25, 0x15	; 21
     878:	0e 94 bd 0c 	call	0x197a	; 0x197a <dequeueRQ>
     87c:	fc 01       	movw	r30, r24
     87e:	90 93 36 02 	sts	0x0236, r25
     882:	80 93 35 02 	sts	0x0235, r24
     886:	89 2b       	or	r24, r25
     888:	09 f4       	brne	.+2      	; 0x88c <Dispatch+0x1c>
     88a:	ee df       	rcall	.-36     	; 0x868 <OS_Abort>
     88c:	82 81       	ldd	r24, Z+2	; 0x02
     88e:	93 81       	ldd	r25, Z+3	; 0x03
     890:	90 93 22 15 	sts	0x1522, r25
     894:	80 93 21 15 	sts	0x1521, r24
     898:	82 e0       	ldi	r24, 0x02	; 2
     89a:	df 01       	movw	r26, r30
     89c:	ac 5f       	subi	r26, 0xFC	; 252
     89e:	be 4f       	sbci	r27, 0xFE	; 254
     8a0:	8c 93       	st	X, r24
     8a2:	80 81       	ld	r24, Z
     8a4:	91 81       	ldd	r25, Z+1	; 0x01
     8a6:	02 97       	sbiw	r24, 0x02	; 2
     8a8:	20 f4       	brcc	.+8      	; 0x8b2 <Dispatch+0x42>
     8aa:	82 e0       	ldi	r24, 0x02	; 2
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	01 ce       	rjmp	.-1022   	; 0x4b2 <enable_LED>
     8b0:	08 95       	ret
     8b2:	80 81       	ld	r24, Z
     8b4:	91 81       	ldd	r25, Z+1	; 0x01
     8b6:	02 97       	sbiw	r24, 0x02	; 2
     8b8:	21 f4       	brne	.+8      	; 0x8c2 <Dispatch+0x52>
     8ba:	85 e0       	ldi	r24, 0x05	; 5
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	f9 cd       	rjmp	.-1038   	; 0x4b2 <enable_LED>
     8c0:	08 95       	ret
     8c2:	80 81       	ld	r24, Z
     8c4:	91 81       	ldd	r25, Z+1	; 0x01
     8c6:	03 97       	sbiw	r24, 0x03	; 3
     8c8:	19 f4       	brne	.+6      	; 0x8d0 <Dispatch+0x60>
     8ca:	86 e0       	ldi	r24, 0x06	; 6
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	f1 cd       	rjmp	.-1054   	; 0x4b2 <enable_LED>
     8d0:	08 95       	ret

000008d2 <Kernel_Unlock_Mutex>:
     8d2:	0f 93       	push	r16
     8d4:	1f 93       	push	r17
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
     8da:	1f 92       	push	r1
     8dc:	1f 92       	push	r1
     8de:	cd b7       	in	r28, 0x3d	; 61
     8e0:	de b7       	in	r29, 0x3e	; 62
     8e2:	a0 91 35 02 	lds	r26, 0x0235
     8e6:	b0 91 36 02 	lds	r27, 0x0236
     8ea:	fd 01       	movw	r30, r26
     8ec:	ec 5e       	subi	r30, 0xEC	; 236
     8ee:	fe 4f       	sbci	r31, 0xFE	; 254
     8f0:	40 81       	ld	r20, Z
     8f2:	51 81       	ldd	r21, Z+1	; 0x01
     8f4:	ef e5       	ldi	r30, 0x5F	; 95
     8f6:	f2 e0       	ldi	r31, 0x02	; 2
     8f8:	00 e0       	ldi	r16, 0x00	; 0
     8fa:	10 e0       	ldi	r17, 0x00	; 0
     8fc:	80 81       	ld	r24, Z
     8fe:	91 81       	ldd	r25, Z+1	; 0x01
     900:	84 17       	cp	r24, r20
     902:	95 07       	cpc	r25, r21
     904:	39 f0       	breq	.+14     	; 0x914 <Kernel_Unlock_Mutex+0x42>
     906:	0f 5f       	subi	r16, 0xFF	; 255
     908:	1f 4f       	sbci	r17, 0xFF	; 255
     90a:	37 96       	adiw	r30, 0x07	; 7
     90c:	08 30       	cpi	r16, 0x08	; 8
     90e:	11 05       	cpc	r17, r1
     910:	a9 f7       	brne	.-22     	; 0x8fc <Kernel_Unlock_Mutex+0x2a>
     912:	f7 c0       	rjmp	.+494    	; 0xb02 <Kernel_Unlock_Mutex+0x230>
     914:	8d 91       	ld	r24, X+
     916:	9c 91       	ld	r25, X
     918:	11 97       	sbiw	r26, 0x01	; 1
     91a:	27 e0       	ldi	r18, 0x07	; 7
     91c:	20 9f       	mul	r18, r16
     91e:	f0 01       	movw	r30, r0
     920:	21 9f       	mul	r18, r17
     922:	f0 0d       	add	r31, r0
     924:	11 24       	eor	r1, r1
     926:	e1 5a       	subi	r30, 0xA1	; 161
     928:	fd 4f       	sbci	r31, 0xFD	; 253
     92a:	23 81       	ldd	r18, Z+3	; 0x03
     92c:	34 81       	ldd	r19, Z+4	; 0x04
     92e:	28 17       	cp	r18, r24
     930:	39 07       	cpc	r19, r25
     932:	09 f0       	breq	.+2      	; 0x936 <Kernel_Unlock_Mutex+0x64>
     934:	e6 c0       	rjmp	.+460    	; 0xb02 <Kernel_Unlock_Mutex+0x230>
     936:	ac 5f       	subi	r26, 0xFC	; 252
     938:	be 4f       	sbci	r27, 0xFE	; 254
     93a:	8c 91       	ld	r24, X
     93c:	86 30       	cpi	r24, 0x06	; 6
     93e:	09 f0       	breq	.+2      	; 0x942 <Kernel_Unlock_Mutex+0x70>
     940:	4d c0       	rjmp	.+154    	; 0x9dc <Kernel_Unlock_Mutex+0x10a>
     942:	63 e2       	ldi	r22, 0x23	; 35
     944:	72 e0       	ldi	r23, 0x02	; 2
     946:	83 e2       	ldi	r24, 0x23	; 35
     948:	95 e1       	ldi	r25, 0x15	; 21
     94a:	af d7       	rcall	.+3934   	; 0x18aa <dequeueWQ>
     94c:	9a 83       	std	Y+2, r25	; 0x02
     94e:	89 83       	std	Y+1, r24	; 0x01
     950:	00 97       	sbiw	r24, 0x00	; 0
     952:	79 f4       	brne	.+30     	; 0x972 <Kernel_Unlock_Mutex+0xa0>
     954:	87 e0       	ldi	r24, 0x07	; 7
     956:	80 9f       	mul	r24, r16
     958:	f0 01       	movw	r30, r0
     95a:	81 9f       	mul	r24, r17
     95c:	f0 0d       	add	r31, r0
     95e:	11 24       	eor	r1, r1
     960:	e1 5a       	subi	r30, 0xA1	; 161
     962:	fd 4f       	sbci	r31, 0xFD	; 253
     964:	16 82       	std	Z+6, r1	; 0x06
     966:	15 82       	std	Z+5, r1	; 0x05
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	82 83       	std	Z+2, r24	; 0x02
     96c:	14 82       	std	Z+4, r1	; 0x04
     96e:	13 82       	std	Z+3, r1	; 0x03
     970:	c8 c0       	rjmp	.+400    	; 0xb02 <Kernel_Unlock_Mutex+0x230>
     972:	27 e0       	ldi	r18, 0x07	; 7
     974:	20 9f       	mul	r18, r16
     976:	f0 01       	movw	r30, r0
     978:	21 9f       	mul	r18, r17
     97a:	f0 0d       	add	r31, r0
     97c:	11 24       	eor	r1, r1
     97e:	e1 5a       	subi	r30, 0xA1	; 161
     980:	fd 4f       	sbci	r31, 0xFD	; 253
     982:	21 e0       	ldi	r18, 0x01	; 1
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	36 83       	std	Z+6, r19	; 0x06
     988:	25 83       	std	Z+5, r18	; 0x05
     98a:	dc 01       	movw	r26, r24
     98c:	2d 91       	ld	r18, X+
     98e:	3c 91       	ld	r19, X
     990:	34 83       	std	Z+4, r19	; 0x04
     992:	23 83       	std	Z+3, r18	; 0x03
     994:	20 91 35 02 	lds	r18, 0x0235
     998:	30 91 36 02 	lds	r19, 0x0236
     99c:	d9 01       	movw	r26, r18
     99e:	a9 5f       	subi	r26, 0xF9	; 249
     9a0:	be 4f       	sbci	r27, 0xFE	; 254
     9a2:	4d 91       	ld	r20, X+
     9a4:	5c 91       	ld	r21, X
     9a6:	11 97       	sbiw	r26, 0x01	; 1
     9a8:	fc 01       	movw	r30, r24
     9aa:	e9 5f       	subi	r30, 0xF9	; 249
     9ac:	fe 4f       	sbci	r31, 0xFE	; 254
     9ae:	51 83       	std	Z+1, r21	; 0x01
     9b0:	40 83       	st	Z, r20
     9b2:	33 97       	sbiw	r30, 0x03	; 3
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	80 83       	st	Z, r24
     9b8:	f9 01       	movw	r30, r18
     9ba:	eb 5f       	subi	r30, 0xFB	; 251
     9bc:	fe 4f       	sbci	r31, 0xFE	; 254
     9be:	40 81       	ld	r20, Z
     9c0:	51 81       	ldd	r21, Z+1	; 0x01
     9c2:	11 96       	adiw	r26, 0x01	; 1
     9c4:	5c 93       	st	X, r21
     9c6:	4e 93       	st	-X, r20
     9c8:	31 97       	sbiw	r30, 0x01	; 1
     9ca:	80 83       	st	Z, r24
     9cc:	47 e2       	ldi	r20, 0x27	; 39
     9ce:	52 e0       	ldi	r21, 0x02	; 2
     9d0:	61 e0       	ldi	r22, 0x01	; 1
     9d2:	75 e1       	ldi	r23, 0x15	; 21
     9d4:	ce 01       	movw	r24, r28
     9d6:	01 96       	adiw	r24, 0x01	; 1
     9d8:	05 d7       	rcall	.+3594   	; 0x17e4 <enqueueRQ>
     9da:	93 c0       	rjmp	.+294    	; 0xb02 <Kernel_Unlock_Mutex+0x230>
     9dc:	87 e0       	ldi	r24, 0x07	; 7
     9de:	80 9f       	mul	r24, r16
     9e0:	f0 01       	movw	r30, r0
     9e2:	81 9f       	mul	r24, r17
     9e4:	f0 0d       	add	r31, r0
     9e6:	11 24       	eor	r1, r1
     9e8:	e1 5a       	subi	r30, 0xA1	; 161
     9ea:	fd 4f       	sbci	r31, 0xFD	; 253
     9ec:	85 81       	ldd	r24, Z+5	; 0x05
     9ee:	96 81       	ldd	r25, Z+6	; 0x06
     9f0:	82 30       	cpi	r24, 0x02	; 2
     9f2:	91 05       	cpc	r25, r1
     9f4:	60 f0       	brcs	.+24     	; 0xa0e <Kernel_Unlock_Mutex+0x13c>
     9f6:	27 e0       	ldi	r18, 0x07	; 7
     9f8:	20 9f       	mul	r18, r16
     9fa:	f0 01       	movw	r30, r0
     9fc:	21 9f       	mul	r18, r17
     9fe:	f0 0d       	add	r31, r0
     a00:	11 24       	eor	r1, r1
     a02:	e1 5a       	subi	r30, 0xA1	; 161
     a04:	fd 4f       	sbci	r31, 0xFD	; 253
     a06:	01 97       	sbiw	r24, 0x01	; 1
     a08:	96 83       	std	Z+6, r25	; 0x06
     a0a:	85 83       	std	Z+5, r24	; 0x05
     a0c:	7a c0       	rjmp	.+244    	; 0xb02 <Kernel_Unlock_Mutex+0x230>
     a0e:	63 e2       	ldi	r22, 0x23	; 35
     a10:	72 e0       	ldi	r23, 0x02	; 2
     a12:	83 e2       	ldi	r24, 0x23	; 35
     a14:	95 e1       	ldi	r25, 0x15	; 21
     a16:	49 d7       	rcall	.+3730   	; 0x18aa <dequeueWQ>
     a18:	9a 83       	std	Y+2, r25	; 0x02
     a1a:	89 83       	std	Y+1, r24	; 0x01
     a1c:	00 97       	sbiw	r24, 0x00	; 0
     a1e:	a9 f5       	brne	.+106    	; 0xa8a <Kernel_Unlock_Mutex+0x1b8>
     a20:	87 e0       	ldi	r24, 0x07	; 7
     a22:	80 9f       	mul	r24, r16
     a24:	f0 01       	movw	r30, r0
     a26:	81 9f       	mul	r24, r17
     a28:	f0 0d       	add	r31, r0
     a2a:	11 24       	eor	r1, r1
     a2c:	e1 5a       	subi	r30, 0xA1	; 161
     a2e:	fd 4f       	sbci	r31, 0xFD	; 253
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	82 83       	std	Z+2, r24	; 0x02
     a34:	16 82       	std	Z+6, r1	; 0x06
     a36:	15 82       	std	Z+5, r1	; 0x05
     a38:	14 82       	std	Z+4, r1	; 0x04
     a3a:	13 82       	std	Z+3, r1	; 0x03
     a3c:	e0 91 35 02 	lds	r30, 0x0235
     a40:	f0 91 36 02 	lds	r31, 0x0236
     a44:	df 01       	movw	r26, r30
     a46:	ab 5f       	subi	r26, 0xFB	; 251
     a48:	be 4f       	sbci	r27, 0xFE	; 254
     a4a:	8d 91       	ld	r24, X+
     a4c:	9c 91       	ld	r25, X
     a4e:	11 97       	sbiw	r26, 0x01	; 1
     a50:	12 96       	adiw	r26, 0x02	; 2
     a52:	11 96       	adiw	r26, 0x01	; 1
     a54:	9c 93       	st	X, r25
     a56:	8e 93       	st	-X, r24
     a58:	80 81       	ld	r24, Z
     a5a:	91 81       	ldd	r25, Z+1	; 0x01
     a5c:	02 97       	sbiw	r24, 0x02	; 2
     a5e:	20 f4       	brcc	.+8      	; 0xa68 <Kernel_Unlock_Mutex+0x196>
     a60:	82 e0       	ldi	r24, 0x02	; 2
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	26 dd       	rcall	.-1460   	; 0x4b2 <enable_LED>
     a66:	4d c0       	rjmp	.+154    	; 0xb02 <Kernel_Unlock_Mutex+0x230>
     a68:	80 81       	ld	r24, Z
     a6a:	91 81       	ldd	r25, Z+1	; 0x01
     a6c:	02 97       	sbiw	r24, 0x02	; 2
     a6e:	21 f4       	brne	.+8      	; 0xa78 <Kernel_Unlock_Mutex+0x1a6>
     a70:	85 e0       	ldi	r24, 0x05	; 5
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	1e dd       	rcall	.-1476   	; 0x4b2 <enable_LED>
     a76:	45 c0       	rjmp	.+138    	; 0xb02 <Kernel_Unlock_Mutex+0x230>
     a78:	80 81       	ld	r24, Z
     a7a:	91 81       	ldd	r25, Z+1	; 0x01
     a7c:	03 97       	sbiw	r24, 0x03	; 3
     a7e:	09 f0       	breq	.+2      	; 0xa82 <Kernel_Unlock_Mutex+0x1b0>
     a80:	40 c0       	rjmp	.+128    	; 0xb02 <Kernel_Unlock_Mutex+0x230>
     a82:	86 e0       	ldi	r24, 0x06	; 6
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	15 dd       	rcall	.-1494   	; 0x4b2 <enable_LED>
     a88:	3c c0       	rjmp	.+120    	; 0xb02 <Kernel_Unlock_Mutex+0x230>
     a8a:	27 e0       	ldi	r18, 0x07	; 7
     a8c:	20 9f       	mul	r18, r16
     a8e:	f0 01       	movw	r30, r0
     a90:	21 9f       	mul	r18, r17
     a92:	f0 0d       	add	r31, r0
     a94:	11 24       	eor	r1, r1
     a96:	e1 5a       	subi	r30, 0xA1	; 161
     a98:	fd 4f       	sbci	r31, 0xFD	; 253
     a9a:	21 e0       	ldi	r18, 0x01	; 1
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	36 83       	std	Z+6, r19	; 0x06
     aa0:	25 83       	std	Z+5, r18	; 0x05
     aa2:	dc 01       	movw	r26, r24
     aa4:	2d 91       	ld	r18, X+
     aa6:	3c 91       	ld	r19, X
     aa8:	34 83       	std	Z+4, r19	; 0x04
     aaa:	23 83       	std	Z+3, r18	; 0x03
     aac:	20 91 35 02 	lds	r18, 0x0235
     ab0:	30 91 36 02 	lds	r19, 0x0236
     ab4:	d9 01       	movw	r26, r18
     ab6:	a9 5f       	subi	r26, 0xF9	; 249
     ab8:	be 4f       	sbci	r27, 0xFE	; 254
     aba:	4d 91       	ld	r20, X+
     abc:	5c 91       	ld	r21, X
     abe:	11 97       	sbiw	r26, 0x01	; 1
     ac0:	fc 01       	movw	r30, r24
     ac2:	e9 5f       	subi	r30, 0xF9	; 249
     ac4:	fe 4f       	sbci	r31, 0xFE	; 254
     ac6:	51 83       	std	Z+1, r21	; 0x01
     ac8:	40 83       	st	Z, r20
     aca:	33 97       	sbiw	r30, 0x03	; 3
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	80 83       	st	Z, r24
     ad0:	f9 01       	movw	r30, r18
     ad2:	eb 5f       	subi	r30, 0xFB	; 251
     ad4:	fe 4f       	sbci	r31, 0xFE	; 254
     ad6:	40 81       	ld	r20, Z
     ad8:	51 81       	ldd	r21, Z+1	; 0x01
     ada:	11 96       	adiw	r26, 0x01	; 1
     adc:	5c 93       	st	X, r21
     ade:	4e 93       	st	-X, r20
     ae0:	31 97       	sbiw	r30, 0x01	; 1
     ae2:	80 83       	st	Z, r24
     ae4:	47 e2       	ldi	r20, 0x27	; 39
     ae6:	52 e0       	ldi	r21, 0x02	; 2
     ae8:	61 e0       	ldi	r22, 0x01	; 1
     aea:	75 e1       	ldi	r23, 0x15	; 21
     aec:	ce 01       	movw	r24, r28
     aee:	01 96       	adiw	r24, 0x01	; 1
     af0:	79 d6       	rcall	.+3314   	; 0x17e4 <enqueueRQ>
     af2:	47 e2       	ldi	r20, 0x27	; 39
     af4:	52 e0       	ldi	r21, 0x02	; 2
     af6:	61 e0       	ldi	r22, 0x01	; 1
     af8:	75 e1       	ldi	r23, 0x15	; 21
     afa:	85 e3       	ldi	r24, 0x35	; 53
     afc:	92 e0       	ldi	r25, 0x02	; 2
     afe:	72 d6       	rcall	.+3300   	; 0x17e4 <enqueueRQ>
     b00:	b7 de       	rcall	.-658    	; 0x870 <Dispatch>
     b02:	0f 90       	pop	r0
     b04:	0f 90       	pop	r0
     b06:	df 91       	pop	r29
     b08:	cf 91       	pop	r28
     b0a:	1f 91       	pop	r17
     b0c:	0f 91       	pop	r16
     b0e:	08 95       	ret

00000b10 <OS_Start>:
     b10:	2f 92       	push	r2
     b12:	3f 92       	push	r3
     b14:	4f 92       	push	r4
     b16:	5f 92       	push	r5
     b18:	6f 92       	push	r6
     b1a:	7f 92       	push	r7
     b1c:	8f 92       	push	r8
     b1e:	9f 92       	push	r9
     b20:	af 92       	push	r10
     b22:	bf 92       	push	r11
     b24:	cf 92       	push	r12
     b26:	df 92       	push	r13
     b28:	ef 92       	push	r14
     b2a:	ff 92       	push	r15
     b2c:	0f 93       	push	r16
     b2e:	1f 93       	push	r17
     b30:	cf 93       	push	r28
     b32:	df 93       	push	r29
     b34:	00 d0       	rcall	.+0      	; 0xb36 <OS_Start+0x26>
     b36:	1f 92       	push	r1
     b38:	cd b7       	in	r28, 0x3d	; 61
     b3a:	de b7       	in	r29, 0x3e	; 62
     b3c:	80 91 33 02 	lds	r24, 0x0233
     b40:	90 91 34 02 	lds	r25, 0x0234
     b44:	89 2b       	or	r24, r25
     b46:	09 f0       	breq	.+2      	; 0xb4a <OS_Start+0x3a>
     b48:	06 c4       	rjmp	.+2060   	; 0x1356 <OS_Start+0x846>
     b4a:	80 91 31 02 	lds	r24, 0x0231
     b4e:	90 91 32 02 	lds	r25, 0x0232
     b52:	89 2b       	or	r24, r25
     b54:	09 f4       	brne	.+2      	; 0xb58 <OS_Start+0x48>
     b56:	ff c3       	rjmp	.+2046   	; 0x1356 <OS_Start+0x846>
     b58:	f8 94       	cli
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	90 93 34 02 	sts	0x0234, r25
     b62:	80 93 33 02 	sts	0x0233, r24
     b66:	84 de       	rcall	.-760    	; 0x870 <Dispatch>
     b68:	0f 2e       	mov	r0, r31
     b6a:	f7 e3       	ldi	r31, 0x37	; 55
     b6c:	ef 2e       	mov	r14, r31
     b6e:	f2 e0       	ldi	r31, 0x02	; 2
     b70:	ff 2e       	mov	r15, r31
     b72:	f0 2d       	mov	r31, r0
     b74:	0f 2e       	mov	r0, r31
     b76:	fe e1       	ldi	r31, 0x1E	; 30
     b78:	af 2e       	mov	r10, r31
     b7a:	bb 24       	eor	r11, r11
     b7c:	b3 94       	inc	r11
     b7e:	f0 2d       	mov	r31, r0
     b80:	0f 2e       	mov	r0, r31
     b82:	f3 e6       	ldi	r31, 0x63	; 99
     b84:	2f 2e       	mov	r2, r31
     b86:	31 2c       	mov	r3, r1
     b88:	f0 2d       	mov	r31, r0
     b8a:	88 24       	eor	r8, r8
     b8c:	83 94       	inc	r8
     b8e:	91 2c       	mov	r9, r1
     b90:	0f 2e       	mov	r0, r31
     b92:	ff e5       	ldi	r31, 0x5F	; 95
     b94:	cf 2e       	mov	r12, r31
     b96:	f2 e0       	ldi	r31, 0x02	; 2
     b98:	df 2e       	mov	r13, r31
     b9a:	f0 2d       	mov	r31, r0
     b9c:	07 e9       	ldi	r16, 0x97	; 151
     b9e:	12 e0       	ldi	r17, 0x02	; 2
     ba0:	0f 2e       	mov	r0, r31
     ba2:	fa e0       	ldi	r31, 0x0A	; 10
     ba4:	6f 2e       	mov	r6, r31
     ba6:	71 2c       	mov	r7, r1
     ba8:	f0 2d       	mov	r31, r0
     baa:	e0 91 35 02 	lds	r30, 0x0235
     bae:	f0 91 36 02 	lds	r31, 0x0236
     bb2:	df 01       	movw	r26, r30
     bb4:	a3 5f       	subi	r26, 0xF3	; 243
     bb6:	be 4f       	sbci	r27, 0xFE	; 254
     bb8:	1c 92       	st	X, r1
     bba:	82 81       	ldd	r24, Z+2	; 0x02
     bbc:	93 81       	ldd	r25, Z+3	; 0x03
     bbe:	90 93 22 15 	sts	0x1522, r25
     bc2:	80 93 21 15 	sts	0x1521, r24
     bc6:	bd da       	rcall	.-2694   	; 0x142 <CSwitch>
     bc8:	82 e0       	ldi	r24, 0x02	; 2
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	7f dc       	rcall	.-1794   	; 0x4cc <disable_LED>
     bce:	85 e0       	ldi	r24, 0x05	; 5
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	7c dc       	rcall	.-1800   	; 0x4cc <disable_LED>
     bd4:	86 e0       	ldi	r24, 0x06	; 6
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	79 dc       	rcall	.-1806   	; 0x4cc <disable_LED>
     bda:	80 91 35 02 	lds	r24, 0x0235
     bde:	90 91 36 02 	lds	r25, 0x0236
     be2:	9c 83       	std	Y+4, r25	; 0x04
     be4:	8b 83       	std	Y+3, r24	; 0x03
     be6:	80 91 21 15 	lds	r24, 0x1521
     bea:	90 91 22 15 	lds	r25, 0x1522
     bee:	ab 81       	ldd	r26, Y+3	; 0x03
     bf0:	bc 81       	ldd	r27, Y+4	; 0x04
     bf2:	13 96       	adiw	r26, 0x03	; 3
     bf4:	9c 93       	st	X, r25
     bf6:	8e 93       	st	-X, r24
     bf8:	12 97       	sbiw	r26, 0x02	; 2
     bfa:	fd 01       	movw	r30, r26
     bfc:	e3 5f       	subi	r30, 0xF3	; 243
     bfe:	fe 4f       	sbci	r31, 0xFE	; 254
     c00:	e0 81       	ld	r30, Z
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	ed 30       	cpi	r30, 0x0D	; 13
     c06:	f1 05       	cpc	r31, r1
     c08:	80 f6       	brcc	.-96     	; 0xbaa <OS_Start+0x9a>
     c0a:	88 27       	eor	r24, r24
     c0c:	ee 58       	subi	r30, 0x8E	; 142
     c0e:	ff 4f       	sbci	r31, 0xFF	; 255
     c10:	8f 4f       	sbci	r24, 0xFF	; 255
     c12:	0c 94 00 0f 	jmp	0x1e00	; 0x1e00 <__tablejump2__>
     c16:	eb 81       	ldd	r30, Y+3	; 0x03
     c18:	fc 81       	ldd	r31, Y+4	; 0x04
     c1a:	e4 5e       	subi	r30, 0xE4	; 228
     c1c:	fe 4f       	sbci	r31, 0xFE	; 254
     c1e:	80 81       	ld	r24, Z
     c20:	91 81       	ldd	r25, Z+1	; 0x01
     c22:	e7 e9       	ldi	r30, 0x97	; 151
     c24:	f2 e0       	ldi	r31, 0x02	; 2
     c26:	20 81       	ld	r18, Z
     c28:	31 81       	ldd	r19, Z+1	; 0x01
     c2a:	28 17       	cp	r18, r24
     c2c:	39 07       	cpc	r19, r25
     c2e:	09 f0       	breq	.+2      	; 0xc32 <OS_Start+0x122>
     c30:	89 c0       	rjmp	.+274    	; 0xd44 <OS_Start+0x234>
     c32:	0d c3       	rjmp	.+1562   	; 0x124e <OS_Start+0x73e>
     c34:	eb 81       	ldd	r30, Y+3	; 0x03
     c36:	fc 81       	ldd	r31, Y+4	; 0x04
     c38:	e7 5f       	subi	r30, 0xF7	; 247
     c3a:	fe 4f       	sbci	r31, 0xFE	; 254
     c3c:	40 81       	ld	r20, Z
     c3e:	51 81       	ldd	r21, Z+1	; 0x01
     c40:	eb 81       	ldd	r30, Y+3	; 0x03
     c42:	fc 81       	ldd	r31, Y+4	; 0x04
     c44:	eb 5f       	subi	r30, 0xFB	; 251
     c46:	fe 4f       	sbci	r31, 0xFE	; 254
     c48:	60 81       	ld	r22, Z
     c4a:	71 81       	ldd	r23, Z+1	; 0x01
     c4c:	eb 81       	ldd	r30, Y+3	; 0x03
     c4e:	fc 81       	ldd	r31, Y+4	; 0x04
     c50:	e5 5f       	subi	r30, 0xF5	; 245
     c52:	fe 4f       	sbci	r31, 0xFE	; 254
     c54:	80 81       	ld	r24, Z
     c56:	91 81       	ldd	r25, Z+1	; 0x01
     c58:	52 dd       	rcall	.-1372   	; 0x6fe <Kernel_Create_Task>
     c5a:	eb 81       	ldd	r30, Y+3	; 0x03
     c5c:	fc 81       	ldd	r31, Y+4	; 0x04
     c5e:	e2 5f       	subi	r30, 0xF2	; 242
     c60:	fe 4f       	sbci	r31, 0xFE	; 254
     c62:	91 83       	std	Z+1, r25	; 0x01
     c64:	80 83       	st	Z, r24
     c66:	a1 cf       	rjmp	.-190    	; 0xbaa <OS_Start+0x9a>
     c68:	eb 81       	ldd	r30, Y+3	; 0x03
     c6a:	fc 81       	ldd	r31, Y+4	; 0x04
     c6c:	ec 5f       	subi	r30, 0xFC	; 252
     c6e:	fe 4f       	sbci	r31, 0xFE	; 254
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	80 83       	st	Z, r24
     c74:	47 e2       	ldi	r20, 0x27	; 39
     c76:	52 e0       	ldi	r21, 0x02	; 2
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	75 e1       	ldi	r23, 0x15	; 21
     c7c:	85 e3       	ldi	r24, 0x35	; 53
     c7e:	92 e0       	ldi	r25, 0x02	; 2
     c80:	b1 d5       	rcall	.+2914   	; 0x17e4 <enqueueRQ>
     c82:	f6 dd       	rcall	.-1044   	; 0x870 <Dispatch>
     c84:	92 cf       	rjmp	.-220    	; 0xbaa <OS_Start+0x9a>
     c86:	eb 81       	ldd	r30, Y+3	; 0x03
     c88:	fc 81       	ldd	r31, Y+4	; 0x04
     c8a:	ec 5f       	subi	r30, 0xFC	; 252
     c8c:	fe 4f       	sbci	r31, 0xFE	; 254
     c8e:	83 e0       	ldi	r24, 0x03	; 3
     c90:	80 83       	st	Z, r24
     c92:	45 e2       	ldi	r20, 0x25	; 37
     c94:	52 e0       	ldi	r21, 0x02	; 2
     c96:	61 ee       	ldi	r22, 0xE1	; 225
     c98:	74 e1       	ldi	r23, 0x14	; 20
     c9a:	85 e3       	ldi	r24, 0x35	; 53
     c9c:	92 e0       	ldi	r25, 0x02	; 2
     c9e:	31 d5       	rcall	.+2658   	; 0x1702 <enqueueSQ>
     ca0:	e7 dd       	rcall	.-1074   	; 0x870 <Dispatch>
     ca2:	83 cf       	rjmp	.-250    	; 0xbaa <OS_Start+0x9a>
     ca4:	ab 81       	ldd	r26, Y+3	; 0x03
     ca6:	bc 81       	ldd	r27, Y+4	; 0x04
     ca8:	2d 91       	ld	r18, X+
     caa:	3c 91       	ld	r19, X
     cac:	11 97       	sbiw	r26, 0x01	; 1
     cae:	fd 01       	movw	r30, r26
     cb0:	e4 5e       	subi	r30, 0xE4	; 228
     cb2:	fe 4f       	sbci	r31, 0xFE	; 254
     cb4:	80 81       	ld	r24, Z
     cb6:	91 81       	ldd	r25, Z+1	; 0x01
     cb8:	28 17       	cp	r18, r24
     cba:	39 07       	cpc	r19, r25
     cbc:	51 f0       	breq	.+20     	; 0xcd2 <OS_Start+0x1c2>
     cbe:	80 81       	ld	r24, Z
     cc0:	91 81       	ldd	r25, Z+1	; 0x01
     cc2:	e7 e9       	ldi	r30, 0x97	; 151
     cc4:	f2 e0       	ldi	r31, 0x02	; 2
     cc6:	20 81       	ld	r18, Z
     cc8:	31 81       	ldd	r19, Z+1	; 0x01
     cca:	28 17       	cp	r18, r24
     ccc:	39 07       	cpc	r19, r25
     cce:	41 f4       	brne	.+16     	; 0xce0 <OS_Start+0x1d0>
     cd0:	ad c2       	rjmp	.+1370   	; 0x122c <OS_Start+0x71c>
     cd2:	eb 81       	ldd	r30, Y+3	; 0x03
     cd4:	fc 81       	ldd	r31, Y+4	; 0x04
     cd6:	e6 5e       	subi	r30, 0xE6	; 230
     cd8:	fe 4f       	sbci	r31, 0xFE	; 254
     cda:	91 82       	std	Z+1, r9	; 0x01
     cdc:	80 82       	st	Z, r8
     cde:	1a c0       	rjmp	.+52     	; 0xd14 <OS_Start+0x204>
     ce0:	e5 eb       	ldi	r30, 0xB5	; 181
     ce2:	f3 e0       	ldi	r31, 0x03	; 3
     ce4:	c4 01       	movw	r24, r8
     ce6:	ab 81       	ldd	r26, Y+3	; 0x03
     ce8:	bc 81       	ldd	r27, Y+4	; 0x04
     cea:	a4 5e       	subi	r26, 0xE4	; 228
     cec:	be 4f       	sbci	r27, 0xFE	; 254
     cee:	6b 81       	ldd	r22, Y+3	; 0x03
     cf0:	7c 81       	ldd	r23, Y+4	; 0x04
     cf2:	2d 91       	ld	r18, X+
     cf4:	3c 91       	ld	r19, X
     cf6:	11 97       	sbiw	r26, 0x01	; 1
     cf8:	40 81       	ld	r20, Z
     cfa:	51 81       	ldd	r21, Z+1	; 0x01
     cfc:	42 17       	cp	r20, r18
     cfe:	53 07       	cpc	r21, r19
     d00:	09 f4       	brne	.+2      	; 0xd04 <OS_Start+0x1f4>
     d02:	97 c2       	rjmp	.+1326   	; 0x1232 <OS_Start+0x722>
     d04:	01 96       	adiw	r24, 0x01	; 1
     d06:	e2 5e       	subi	r30, 0xE2	; 226
     d08:	fe 4f       	sbci	r31, 0xFE	; 254
     d0a:	80 31       	cpi	r24, 0x10	; 16
     d0c:	91 05       	cpc	r25, r1
     d0e:	89 f7       	brne	.-30     	; 0xcf2 <OS_Start+0x1e2>
     d10:	7c 83       	std	Y+4, r23	; 0x04
     d12:	6b 83       	std	Y+3, r22	; 0x03
     d14:	eb 81       	ldd	r30, Y+3	; 0x03
     d16:	fc 81       	ldd	r31, Y+4	; 0x04
     d18:	e6 5e       	subi	r30, 0xE6	; 230
     d1a:	fe 4f       	sbci	r31, 0xFE	; 254
     d1c:	80 81       	ld	r24, Z
     d1e:	91 81       	ldd	r25, Z+1	; 0x01
     d20:	89 2b       	or	r24, r25
     d22:	09 f4       	brne	.+2      	; 0xd26 <OS_Start+0x216>
     d24:	42 cf       	rjmp	.-380    	; 0xbaa <OS_Start+0x9a>
     d26:	eb 81       	ldd	r30, Y+3	; 0x03
     d28:	fc 81       	ldd	r31, Y+4	; 0x04
     d2a:	ec 5f       	subi	r30, 0xFC	; 252
     d2c:	fe 4f       	sbci	r31, 0xFE	; 254
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	80 83       	st	Z, r24
     d32:	47 e2       	ldi	r20, 0x27	; 39
     d34:	52 e0       	ldi	r21, 0x02	; 2
     d36:	61 e0       	ldi	r22, 0x01	; 1
     d38:	75 e1       	ldi	r23, 0x15	; 21
     d3a:	85 e3       	ldi	r24, 0x35	; 53
     d3c:	92 e0       	ldi	r25, 0x02	; 2
     d3e:	52 d5       	rcall	.+2724   	; 0x17e4 <enqueueRQ>
     d40:	97 dd       	rcall	.-1234   	; 0x870 <Dispatch>
     d42:	33 cf       	rjmp	.-410    	; 0xbaa <OS_Start+0x9a>
     d44:	e5 eb       	ldi	r30, 0xB5	; 181
     d46:	f3 e0       	ldi	r31, 0x03	; 3
     d48:	c4 01       	movw	r24, r8
     d4a:	ab 81       	ldd	r26, Y+3	; 0x03
     d4c:	bc 81       	ldd	r27, Y+4	; 0x04
     d4e:	a4 5e       	subi	r26, 0xE4	; 228
     d50:	be 4f       	sbci	r27, 0xFE	; 254
     d52:	6b 81       	ldd	r22, Y+3	; 0x03
     d54:	7c 81       	ldd	r23, Y+4	; 0x04
     d56:	2d 91       	ld	r18, X+
     d58:	3c 91       	ld	r19, X
     d5a:	11 97       	sbiw	r26, 0x01	; 1
     d5c:	40 81       	ld	r20, Z
     d5e:	51 81       	ldd	r21, Z+1	; 0x01
     d60:	42 17       	cp	r20, r18
     d62:	53 07       	cpc	r21, r19
     d64:	09 f4       	brne	.+2      	; 0xd68 <OS_Start+0x258>
     d66:	76 c2       	rjmp	.+1260   	; 0x1254 <OS_Start+0x744>
     d68:	01 96       	adiw	r24, 0x01	; 1
     d6a:	e2 5e       	subi	r30, 0xE2	; 226
     d6c:	fe 4f       	sbci	r31, 0xFE	; 254
     d6e:	80 31       	cpi	r24, 0x10	; 16
     d70:	91 05       	cpc	r25, r1
     d72:	89 f7       	brne	.-30     	; 0xd56 <OS_Start+0x246>
     d74:	1a cf       	rjmp	.-460    	; 0xbaa <OS_Start+0x9a>
     d76:	8a 9d       	mul	r24, r10
     d78:	90 01       	movw	r18, r0
     d7a:	8b 9d       	mul	r24, r11
     d7c:	30 0d       	add	r19, r0
     d7e:	9a 9d       	mul	r25, r10
     d80:	30 0d       	add	r19, r0
     d82:	11 24       	eor	r1, r1
     d84:	c9 01       	movw	r24, r18
     d86:	89 56       	subi	r24, 0x69	; 105
     d88:	9d 4f       	sbci	r25, 0xFD	; 253
     d8a:	fc 01       	movw	r30, r24
     d8c:	e6 5e       	subi	r30, 0xE6	; 230
     d8e:	fe 4f       	sbci	r31, 0xFE	; 254
     d90:	11 82       	std	Z+1, r1	; 0x01
     d92:	10 82       	st	Z, r1
     d94:	eb 81       	ldd	r30, Y+3	; 0x03
     d96:	fc 81       	ldd	r31, Y+4	; 0x04
     d98:	e9 5f       	subi	r30, 0xF9	; 249
     d9a:	fe 4f       	sbci	r31, 0xFE	; 254
     d9c:	20 81       	ld	r18, Z
     d9e:	31 81       	ldd	r19, Z+1	; 0x01
     da0:	fc 01       	movw	r30, r24
     da2:	e9 5f       	subi	r30, 0xF9	; 249
     da4:	fe 4f       	sbci	r31, 0xFE	; 254
     da6:	80 81       	ld	r24, Z
     da8:	91 81       	ldd	r25, Z+1	; 0x01
     daa:	82 17       	cp	r24, r18
     dac:	93 07       	cpc	r25, r19
     dae:	08 f0       	brcs	.+2      	; 0xdb2 <OS_Start+0x2a2>
     db0:	fc ce       	rjmp	.-520    	; 0xbaa <OS_Start+0x9a>
     db2:	eb 81       	ldd	r30, Y+3	; 0x03
     db4:	fc 81       	ldd	r31, Y+4	; 0x04
     db6:	ec 5f       	subi	r30, 0xFC	; 252
     db8:	fe 4f       	sbci	r31, 0xFE	; 254
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	80 83       	st	Z, r24
     dbe:	47 e2       	ldi	r20, 0x27	; 39
     dc0:	52 e0       	ldi	r21, 0x02	; 2
     dc2:	61 e0       	ldi	r22, 0x01	; 1
     dc4:	75 e1       	ldi	r23, 0x15	; 21
     dc6:	85 e3       	ldi	r24, 0x35	; 53
     dc8:	92 e0       	ldi	r25, 0x02	; 2
     dca:	0c d5       	rcall	.+2584   	; 0x17e4 <enqueueRQ>
     dcc:	51 dd       	rcall	.-1374   	; 0x870 <Dispatch>
     dce:	ed ce       	rjmp	.-550    	; 0xbaa <OS_Start+0x9a>
     dd0:	eb 81       	ldd	r30, Y+3	; 0x03
     dd2:	fc 81       	ldd	r31, Y+4	; 0x04
     dd4:	e9 5f       	subi	r30, 0xF9	; 249
     dd6:	fe 4f       	sbci	r31, 0xFE	; 254
     dd8:	11 82       	std	Z+1, r1	; 0x01
     dda:	10 82       	st	Z, r1
     ddc:	eb 81       	ldd	r30, Y+3	; 0x03
     dde:	fc 81       	ldd	r31, Y+4	; 0x04
     de0:	eb 5f       	subi	r30, 0xFB	; 251
     de2:	fe 4f       	sbci	r31, 0xFE	; 254
     de4:	11 82       	std	Z+1, r1	; 0x01
     de6:	10 82       	st	Z, r1
     de8:	eb 81       	ldd	r30, Y+3	; 0x03
     dea:	fc 81       	ldd	r31, Y+4	; 0x04
     dec:	ec 5f       	subi	r30, 0xFC	; 252
     dee:	fe 4f       	sbci	r31, 0xFE	; 254
     df0:	86 e0       	ldi	r24, 0x06	; 6
     df2:	80 83       	st	Z, r24
     df4:	dc 82       	std	Y+4, r13	; 0x04
     df6:	cb 82       	std	Y+3, r12	; 0x03
     df8:	e0 91 35 02 	lds	r30, 0x0235
     dfc:	f0 91 36 02 	lds	r31, 0x0236
     e00:	80 81       	ld	r24, Z
     e02:	91 81       	ldd	r25, Z+1	; 0x01
     e04:	ab 81       	ldd	r26, Y+3	; 0x03
     e06:	bc 81       	ldd	r27, Y+4	; 0x04
     e08:	13 96       	adiw	r26, 0x03	; 3
     e0a:	2d 91       	ld	r18, X+
     e0c:	3c 91       	ld	r19, X
     e0e:	14 97       	sbiw	r26, 0x04	; 4
     e10:	28 17       	cp	r18, r24
     e12:	39 07       	cpc	r19, r25
     e14:	39 f4       	brne	.+14     	; 0xe24 <OS_Start+0x314>
     e16:	8d 91       	ld	r24, X+
     e18:	9c 91       	ld	r25, X
     e1a:	ec 5e       	subi	r30, 0xEC	; 236
     e1c:	fe 4f       	sbci	r31, 0xFE	; 254
     e1e:	91 83       	std	Z+1, r25	; 0x01
     e20:	80 83       	st	Z, r24
     e22:	57 dd       	rcall	.-1362   	; 0x8d2 <Kernel_Unlock_Mutex>
     e24:	eb 81       	ldd	r30, Y+3	; 0x03
     e26:	fc 81       	ldd	r31, Y+4	; 0x04
     e28:	37 96       	adiw	r30, 0x07	; 7
     e2a:	fc 83       	std	Y+4, r31	; 0x04
     e2c:	eb 83       	std	Y+3, r30	; 0x03
     e2e:	e0 17       	cp	r30, r16
     e30:	f1 07       	cpc	r31, r17
     e32:	11 f7       	brne	.-60     	; 0xdf8 <OS_Start+0x2e8>
     e34:	e0 91 35 02 	lds	r30, 0x0235
     e38:	f0 91 36 02 	lds	r31, 0x0236
     e3c:	df 01       	movw	r26, r30
     e3e:	ac 5f       	subi	r26, 0xFC	; 252
     e40:	be 4f       	sbci	r27, 0xFE	; 254
     e42:	1c 92       	st	X, r1
     e44:	52 96       	adiw	r26, 0x12	; 18
     e46:	11 96       	adiw	r26, 0x01	; 1
     e48:	3c 92       	st	X, r3
     e4a:	2e 92       	st	-X, r2
     e4c:	1f 97       	sbiw	r26, 0x0f	; 15
     e4e:	11 96       	adiw	r26, 0x01	; 1
     e50:	7c 92       	st	X, r7
     e52:	6e 92       	st	-X, r6
     e54:	12 97       	sbiw	r26, 0x02	; 2
     e56:	11 96       	adiw	r26, 0x01	; 1
     e58:	7c 92       	st	X, r7
     e5a:	6e 92       	st	-X, r6
     e5c:	11 82       	std	Z+1, r1	; 0x01
     e5e:	10 82       	st	Z, r1
     e60:	80 91 31 02 	lds	r24, 0x0231
     e64:	90 91 32 02 	lds	r25, 0x0232
     e68:	01 97       	sbiw	r24, 0x01	; 1
     e6a:	90 93 32 02 	sts	0x0232, r25
     e6e:	80 93 31 02 	sts	0x0231, r24
     e72:	fe dc       	rcall	.-1540   	; 0x870 <Dispatch>
     e74:	9a ce       	rjmp	.-716    	; 0xbaa <OS_Start+0x9a>
     e76:	80 91 2d 02 	lds	r24, 0x022D
     e7a:	90 91 2e 02 	lds	r25, 0x022E
     e7e:	08 97       	sbiw	r24, 0x08	; 8
     e80:	41 f1       	breq	.+80     	; 0xed2 <OS_Start+0x3c2>
     e82:	d6 01       	movw	r26, r12
     e84:	12 96       	adiw	r26, 0x02	; 2
     e86:	8c 91       	ld	r24, X
     e88:	88 23       	and	r24, r24
     e8a:	89 f0       	breq	.+34     	; 0xeae <OS_Start+0x39e>
     e8c:	e8 e6       	ldi	r30, 0x68	; 104
     e8e:	f2 e0       	ldi	r31, 0x02	; 2
     e90:	94 01       	movw	r18, r8
     e92:	4b 81       	ldd	r20, Y+3	; 0x03
     e94:	5c 81       	ldd	r21, Y+4	; 0x04
     e96:	80 81       	ld	r24, Z
     e98:	88 23       	and	r24, r24
     e9a:	61 f0       	breq	.+24     	; 0xeb4 <OS_Start+0x3a4>
     e9c:	2f 5f       	subi	r18, 0xFF	; 255
     e9e:	3f 4f       	sbci	r19, 0xFF	; 255
     ea0:	37 96       	adiw	r30, 0x07	; 7
     ea2:	28 30       	cpi	r18, 0x08	; 8
     ea4:	31 05       	cpc	r19, r1
     ea6:	b9 f7       	brne	.-18     	; 0xe96 <OS_Start+0x386>
     ea8:	5c 83       	std	Y+4, r21	; 0x04
     eaa:	4b 83       	std	Y+3, r20	; 0x03
     eac:	05 c0       	rjmp	.+10     	; 0xeb8 <OS_Start+0x3a8>
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <OS_Start+0x3a8>
     eb4:	5c 83       	std	Y+4, r21	; 0x04
     eb6:	4b 83       	std	Y+3, r20	; 0x03
     eb8:	c9 01       	movw	r24, r18
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	82 1b       	sub	r24, r18
     ec8:	93 0b       	sbc	r25, r19
     eca:	81 5a       	subi	r24, 0xA1	; 161
     ecc:	9d 4f       	sbci	r25, 0xFD	; 253
     ece:	47 dc       	rcall	.-1906   	; 0x75e <Kernel_Init_Mutex_At>
     ed0:	2c 01       	movw	r4, r24
     ed2:	eb 81       	ldd	r30, Y+3	; 0x03
     ed4:	fc 81       	ldd	r31, Y+4	; 0x04
     ed6:	e2 5f       	subi	r30, 0xF2	; 242
     ed8:	fe 4f       	sbci	r31, 0xFE	; 254
     eda:	51 82       	std	Z+1, r5	; 0x01
     edc:	40 82       	st	Z, r4
     ede:	65 ce       	rjmp	.-822    	; 0xbaa <OS_Start+0x9a>
     ee0:	eb 81       	ldd	r30, Y+3	; 0x03
     ee2:	fc 81       	ldd	r31, Y+4	; 0x04
     ee4:	ec 5e       	subi	r30, 0xEC	; 236
     ee6:	fe 4f       	sbci	r31, 0xFE	; 254
     ee8:	40 81       	ld	r20, Z
     eea:	51 81       	ldd	r21, Z+1	; 0x01
     eec:	f6 01       	movw	r30, r12
     eee:	80 81       	ld	r24, Z
     ef0:	91 81       	ldd	r25, Z+1	; 0x01
     ef2:	48 17       	cp	r20, r24
     ef4:	59 07       	cpc	r21, r25
     ef6:	09 f4       	brne	.+2      	; 0xefa <OS_Start+0x3ea>
     ef8:	bf c1       	rjmp	.+894    	; 0x1278 <OS_Start+0x768>
     efa:	c4 01       	movw	r24, r8
     efc:	6b 81       	ldd	r22, Y+3	; 0x03
     efe:	7c 81       	ldd	r23, Y+4	; 0x04
     f00:	27 81       	ldd	r18, Z+7	; 0x07
     f02:	30 85       	ldd	r19, Z+8	; 0x08
     f04:	42 17       	cp	r20, r18
     f06:	53 07       	cpc	r21, r19
     f08:	09 f4       	brne	.+2      	; 0xf0c <OS_Start+0x3fc>
     f0a:	b9 c1       	rjmp	.+882    	; 0x127e <OS_Start+0x76e>
     f0c:	01 96       	adiw	r24, 0x01	; 1
     f0e:	37 96       	adiw	r30, 0x07	; 7
     f10:	88 30       	cpi	r24, 0x08	; 8
     f12:	91 05       	cpc	r25, r1
     f14:	a9 f7       	brne	.-22     	; 0xf00 <OS_Start+0x3f0>
     f16:	49 ce       	rjmp	.-878    	; 0xbaa <OS_Start+0x9a>
     f18:	fc 01       	movw	r30, r24
     f1a:	ee 0f       	add	r30, r30
     f1c:	ff 1f       	adc	r31, r31
     f1e:	ee 0f       	add	r30, r30
     f20:	ff 1f       	adc	r31, r31
     f22:	ee 0f       	add	r30, r30
     f24:	ff 1f       	adc	r31, r31
     f26:	e8 1b       	sub	r30, r24
     f28:	f9 0b       	sbc	r31, r25
     f2a:	e1 5a       	subi	r30, 0xA1	; 161
     f2c:	fd 4f       	sbci	r31, 0xFD	; 253
     f2e:	82 e0       	ldi	r24, 0x02	; 2
     f30:	82 83       	std	Z+2, r24	; 0x02
     f32:	ab 81       	ldd	r26, Y+3	; 0x03
     f34:	bc 81       	ldd	r27, Y+4	; 0x04
     f36:	8d 91       	ld	r24, X+
     f38:	9c 91       	ld	r25, X
     f3a:	94 83       	std	Z+4, r25	; 0x04
     f3c:	83 83       	std	Z+3, r24	; 0x03
     f3e:	85 81       	ldd	r24, Z+5	; 0x05
     f40:	96 81       	ldd	r25, Z+6	; 0x06
     f42:	01 96       	adiw	r24, 0x01	; 1
     f44:	96 83       	std	Z+6, r25	; 0x06
     f46:	85 83       	std	Z+5, r24	; 0x05
     f48:	30 ce       	rjmp	.-928    	; 0xbaa <OS_Start+0x9a>
     f4a:	fc 01       	movw	r30, r24
     f4c:	ee 0f       	add	r30, r30
     f4e:	ff 1f       	adc	r31, r31
     f50:	ee 0f       	add	r30, r30
     f52:	ff 1f       	adc	r31, r31
     f54:	ee 0f       	add	r30, r30
     f56:	ff 1f       	adc	r31, r31
     f58:	e8 1b       	sub	r30, r24
     f5a:	f9 0b       	sbc	r31, r25
     f5c:	e1 5a       	subi	r30, 0xA1	; 161
     f5e:	fd 4f       	sbci	r31, 0xFD	; 253
     f60:	23 81       	ldd	r18, Z+3	; 0x03
     f62:	34 81       	ldd	r19, Z+4	; 0x04
     f64:	eb 81       	ldd	r30, Y+3	; 0x03
     f66:	fc 81       	ldd	r31, Y+4	; 0x04
     f68:	40 81       	ld	r20, Z
     f6a:	51 81       	ldd	r21, Z+1	; 0x01
     f6c:	24 17       	cp	r18, r20
     f6e:	35 07       	cpc	r19, r21
     f70:	89 f4       	brne	.+34     	; 0xf94 <OS_Start+0x484>
     f72:	fc 01       	movw	r30, r24
     f74:	ee 0f       	add	r30, r30
     f76:	ff 1f       	adc	r31, r31
     f78:	ee 0f       	add	r30, r30
     f7a:	ff 1f       	adc	r31, r31
     f7c:	ee 0f       	add	r30, r30
     f7e:	ff 1f       	adc	r31, r31
     f80:	e8 1b       	sub	r30, r24
     f82:	f9 0b       	sbc	r31, r25
     f84:	e1 5a       	subi	r30, 0xA1	; 161
     f86:	fd 4f       	sbci	r31, 0xFD	; 253
     f88:	85 81       	ldd	r24, Z+5	; 0x05
     f8a:	96 81       	ldd	r25, Z+6	; 0x06
     f8c:	01 96       	adiw	r24, 0x01	; 1
     f8e:	96 83       	std	Z+6, r25	; 0x06
     f90:	85 83       	std	Z+5, r24	; 0x05
     f92:	0b ce       	rjmp	.-1002   	; 0xbaa <OS_Start+0x9a>
     f94:	e7 e9       	ldi	r30, 0x97	; 151
     f96:	f2 e0       	ldi	r31, 0x02	; 2
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	6b 81       	ldd	r22, Y+3	; 0x03
     f9e:	7c 81       	ldd	r23, Y+4	; 0x04
     fa0:	40 81       	ld	r20, Z
     fa2:	51 81       	ldd	r21, Z+1	; 0x01
     fa4:	24 17       	cp	r18, r20
     fa6:	35 07       	cpc	r19, r21
     fa8:	19 f4       	brne	.+6      	; 0xfb0 <OS_Start+0x4a0>
     faa:	21 15       	cp	r18, r1
     fac:	31 05       	cpc	r19, r1
     fae:	31 f4       	brne	.+12     	; 0xfbc <OS_Start+0x4ac>
     fb0:	01 96       	adiw	r24, 0x01	; 1
     fb2:	e2 5e       	subi	r30, 0xE2	; 226
     fb4:	fe 4f       	sbci	r31, 0xFE	; 254
     fb6:	80 31       	cpi	r24, 0x10	; 16
     fb8:	91 05       	cpc	r25, r1
     fba:	91 f7       	brne	.-28     	; 0xfa0 <OS_Start+0x490>
     fbc:	7c 83       	std	Y+4, r23	; 0x04
     fbe:	6b 83       	std	Y+3, r22	; 0x03
     fc0:	fb 01       	movw	r30, r22
     fc2:	e9 5f       	subi	r30, 0xF9	; 249
     fc4:	fe 4f       	sbci	r31, 0xFE	; 254
     fc6:	20 81       	ld	r18, Z
     fc8:	31 81       	ldd	r19, Z+1	; 0x01
     fca:	8a 9d       	mul	r24, r10
     fcc:	f0 01       	movw	r30, r0
     fce:	8b 9d       	mul	r24, r11
     fd0:	f0 0d       	add	r31, r0
     fd2:	9a 9d       	mul	r25, r10
     fd4:	f0 0d       	add	r31, r0
     fd6:	11 24       	eor	r1, r1
     fd8:	e2 56       	subi	r30, 0x62	; 98
     fda:	fc 4f       	sbci	r31, 0xFC	; 252
     fdc:	40 81       	ld	r20, Z
     fde:	51 81       	ldd	r21, Z+1	; 0x01
     fe0:	24 17       	cp	r18, r20
     fe2:	35 07       	cpc	r19, r21
     fe4:	80 f4       	brcc	.+32     	; 0x1006 <OS_Start+0x4f6>
     fe6:	fb 01       	movw	r30, r22
     fe8:	e9 5f       	subi	r30, 0xF9	; 249
     fea:	fe 4f       	sbci	r31, 0xFE	; 254
     fec:	20 81       	ld	r18, Z
     fee:	31 81       	ldd	r19, Z+1	; 0x01
     ff0:	8a 9d       	mul	r24, r10
     ff2:	f0 01       	movw	r30, r0
     ff4:	8b 9d       	mul	r24, r11
     ff6:	f0 0d       	add	r31, r0
     ff8:	9a 9d       	mul	r25, r10
     ffa:	f0 0d       	add	r31, r0
     ffc:	11 24       	eor	r1, r1
     ffe:	e2 56       	subi	r30, 0x62	; 98
    1000:	fc 4f       	sbci	r31, 0xFC	; 252
    1002:	31 83       	std	Z+1, r19	; 0x01
    1004:	20 83       	st	Z, r18
    1006:	eb 81       	ldd	r30, Y+3	; 0x03
    1008:	fc 81       	ldd	r31, Y+4	; 0x04
    100a:	ec 5f       	subi	r30, 0xFC	; 252
    100c:	fe 4f       	sbci	r31, 0xFE	; 254
    100e:	84 e0       	ldi	r24, 0x04	; 4
    1010:	80 83       	st	Z, r24
    1012:	43 e2       	ldi	r20, 0x23	; 35
    1014:	52 e0       	ldi	r21, 0x02	; 2
    1016:	63 e2       	ldi	r22, 0x23	; 35
    1018:	75 e1       	ldi	r23, 0x15	; 21
    101a:	85 e3       	ldi	r24, 0x35	; 53
    101c:	92 e0       	ldi	r25, 0x02	; 2
    101e:	41 d3       	rcall	.+1666   	; 0x16a2 <enqueueWQ>
    1020:	27 dc       	rcall	.-1970   	; 0x870 <Dispatch>
    1022:	c3 cd       	rjmp	.-1146   	; 0xbaa <OS_Start+0x9a>
    1024:	56 dc       	rcall	.-1876   	; 0x8d2 <Kernel_Unlock_Mutex>
    1026:	c1 cd       	rjmp	.-1150   	; 0xbaa <OS_Start+0x9a>
    1028:	80 91 2b 02 	lds	r24, 0x022B
    102c:	90 91 2c 02 	lds	r25, 0x022C
    1030:	08 97       	sbiw	r24, 0x08	; 8
    1032:	31 f1       	breq	.+76     	; 0x1080 <OS_Start+0x570>
    1034:	d7 01       	movw	r26, r14
    1036:	12 96       	adiw	r26, 0x02	; 2
    1038:	8c 91       	ld	r24, X
    103a:	88 23       	and	r24, r24
    103c:	81 f0       	breq	.+32     	; 0x105e <OS_Start+0x54e>
    103e:	ee e3       	ldi	r30, 0x3E	; 62
    1040:	f2 e0       	ldi	r31, 0x02	; 2
    1042:	c4 01       	movw	r24, r8
    1044:	4b 81       	ldd	r20, Y+3	; 0x03
    1046:	5c 81       	ldd	r21, Y+4	; 0x04
    1048:	20 81       	ld	r18, Z
    104a:	22 23       	and	r18, r18
    104c:	59 f0       	breq	.+22     	; 0x1064 <OS_Start+0x554>
    104e:	01 96       	adiw	r24, 0x01	; 1
    1050:	35 96       	adiw	r30, 0x05	; 5
    1052:	88 30       	cpi	r24, 0x08	; 8
    1054:	91 05       	cpc	r25, r1
    1056:	c1 f7       	brne	.-16     	; 0x1048 <OS_Start+0x538>
    1058:	5c 83       	std	Y+4, r21	; 0x04
    105a:	4b 83       	std	Y+3, r20	; 0x03
    105c:	05 c0       	rjmp	.+10     	; 0x1068 <OS_Start+0x558>
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <OS_Start+0x558>
    1064:	5c 83       	std	Y+4, r21	; 0x04
    1066:	4b 83       	std	Y+3, r20	; 0x03
    1068:	9c 01       	movw	r18, r24
    106a:	22 0f       	add	r18, r18
    106c:	33 1f       	adc	r19, r19
    106e:	22 0f       	add	r18, r18
    1070:	33 1f       	adc	r19, r19
    1072:	82 0f       	add	r24, r18
    1074:	93 1f       	adc	r25, r19
    1076:	89 5c       	subi	r24, 0xC9	; 201
    1078:	9d 4f       	sbci	r25, 0xFD	; 253
    107a:	86 db       	rcall	.-2292   	; 0x788 <Kernel_Init_Event_At>
    107c:	9a 83       	std	Y+2, r25	; 0x02
    107e:	89 83       	std	Y+1, r24	; 0x01
    1080:	ab 81       	ldd	r26, Y+3	; 0x03
    1082:	bc 81       	ldd	r27, Y+4	; 0x04
    1084:	a2 5f       	subi	r26, 0xF2	; 242
    1086:	be 4f       	sbci	r27, 0xFE	; 254
    1088:	e9 81       	ldd	r30, Y+1	; 0x01
    108a:	fa 81       	ldd	r31, Y+2	; 0x02
    108c:	11 96       	adiw	r26, 0x01	; 1
    108e:	fc 93       	st	X, r31
    1090:	ee 93       	st	-X, r30
    1092:	8b cd       	rjmp	.-1258   	; 0xbaa <OS_Start+0x9a>
    1094:	eb 81       	ldd	r30, Y+3	; 0x03
    1096:	fc 81       	ldd	r31, Y+4	; 0x04
    1098:	e8 5e       	subi	r30, 0xE8	; 232
    109a:	fe 4f       	sbci	r31, 0xFE	; 254
    109c:	40 81       	ld	r20, Z
    109e:	51 81       	ldd	r21, Z+1	; 0x01
    10a0:	d7 01       	movw	r26, r14
    10a2:	8d 91       	ld	r24, X+
    10a4:	9c 91       	ld	r25, X
    10a6:	48 17       	cp	r20, r24
    10a8:	59 07       	cpc	r21, r25
    10aa:	09 f4       	brne	.+2      	; 0x10ae <OS_Start+0x59e>
    10ac:	fa c0       	rjmp	.+500    	; 0x12a2 <OS_Start+0x792>
    10ae:	f7 01       	movw	r30, r14
    10b0:	c4 01       	movw	r24, r8
    10b2:	6b 81       	ldd	r22, Y+3	; 0x03
    10b4:	7c 81       	ldd	r23, Y+4	; 0x04
    10b6:	25 81       	ldd	r18, Z+5	; 0x05
    10b8:	36 81       	ldd	r19, Z+6	; 0x06
    10ba:	42 17       	cp	r20, r18
    10bc:	53 07       	cpc	r21, r19
    10be:	09 f4       	brne	.+2      	; 0x10c2 <OS_Start+0x5b2>
    10c0:	f3 c0       	rjmp	.+486    	; 0x12a8 <OS_Start+0x798>
    10c2:	01 96       	adiw	r24, 0x01	; 1
    10c4:	35 96       	adiw	r30, 0x05	; 5
    10c6:	88 30       	cpi	r24, 0x08	; 8
    10c8:	91 05       	cpc	r25, r1
    10ca:	a9 f7       	brne	.-22     	; 0x10b6 <OS_Start+0x5a6>
    10cc:	3d c0       	rjmp	.+122    	; 0x1148 <OS_Start+0x638>
    10ce:	fc 01       	movw	r30, r24
    10d0:	ee 0f       	add	r30, r30
    10d2:	ff 1f       	adc	r31, r31
    10d4:	ee 0f       	add	r30, r30
    10d6:	ff 1f       	adc	r31, r31
    10d8:	e8 0f       	add	r30, r24
    10da:	f9 1f       	adc	r31, r25
    10dc:	e9 5c       	subi	r30, 0xC9	; 201
    10de:	fd 4f       	sbci	r31, 0xFD	; 253
    10e0:	22 81       	ldd	r18, Z+2	; 0x02
    10e2:	22 30       	cpi	r18, 0x02	; 2
    10e4:	69 f4       	brne	.+26     	; 0x1100 <OS_Start+0x5f0>
    10e6:	fc 01       	movw	r30, r24
    10e8:	ee 0f       	add	r30, r30
    10ea:	ff 1f       	adc	r31, r31
    10ec:	ee 0f       	add	r30, r30
    10ee:	ff 1f       	adc	r31, r31
    10f0:	8e 0f       	add	r24, r30
    10f2:	9f 1f       	adc	r25, r31
    10f4:	fc 01       	movw	r30, r24
    10f6:	e9 5c       	subi	r30, 0xC9	; 201
    10f8:	fd 4f       	sbci	r31, 0xFD	; 253
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	82 83       	std	Z+2, r24	; 0x02
    10fe:	24 c0       	rjmp	.+72     	; 0x1148 <OS_Start+0x638>
    1100:	eb 81       	ldd	r30, Y+3	; 0x03
    1102:	fc 81       	ldd	r31, Y+4	; 0x04
    1104:	ea 5e       	subi	r30, 0xEA	; 234
    1106:	fe 4f       	sbci	r31, 0xFE	; 254
    1108:	51 83       	std	Z+1, r21	; 0x01
    110a:	40 83       	st	Z, r20
    110c:	eb 81       	ldd	r30, Y+3	; 0x03
    110e:	fc 81       	ldd	r31, Y+4	; 0x04
    1110:	20 81       	ld	r18, Z
    1112:	31 81       	ldd	r19, Z+1	; 0x01
    1114:	fc 01       	movw	r30, r24
    1116:	ee 0f       	add	r30, r30
    1118:	ff 1f       	adc	r31, r31
    111a:	ee 0f       	add	r30, r30
    111c:	ff 1f       	adc	r31, r31
    111e:	8e 0f       	add	r24, r30
    1120:	9f 1f       	adc	r25, r31
    1122:	fc 01       	movw	r30, r24
    1124:	e9 5c       	subi	r30, 0xC9	; 201
    1126:	fd 4f       	sbci	r31, 0xFD	; 253
    1128:	34 83       	std	Z+4, r19	; 0x04
    112a:	23 83       	std	Z+3, r18	; 0x03
    112c:	eb 81       	ldd	r30, Y+3	; 0x03
    112e:	fc 81       	ldd	r31, Y+4	; 0x04
    1130:	ec 5f       	subi	r30, 0xFC	; 252
    1132:	fe 4f       	sbci	r31, 0xFE	; 254
    1134:	85 e0       	ldi	r24, 0x05	; 5
    1136:	80 83       	st	Z, r24
    1138:	47 e2       	ldi	r20, 0x27	; 39
    113a:	52 e0       	ldi	r21, 0x02	; 2
    113c:	61 e0       	ldi	r22, 0x01	; 1
    113e:	75 e1       	ldi	r23, 0x15	; 21
    1140:	85 e3       	ldi	r24, 0x35	; 53
    1142:	92 e0       	ldi	r25, 0x02	; 2
    1144:	4f d3       	rcall	.+1694   	; 0x17e4 <enqueueRQ>
    1146:	94 db       	rcall	.-2264   	; 0x870 <Dispatch>
    1148:	e0 91 35 02 	lds	r30, 0x0235
    114c:	f0 91 36 02 	lds	r31, 0x0236
    1150:	80 81       	ld	r24, Z
    1152:	91 81       	ldd	r25, Z+1	; 0x01
    1154:	02 97       	sbiw	r24, 0x02	; 2
    1156:	20 f4       	brcc	.+8      	; 0x1160 <OS_Start+0x650>
    1158:	82 e0       	ldi	r24, 0x02	; 2
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	aa d9       	rcall	.-3244   	; 0x4b2 <enable_LED>
    115e:	25 cd       	rjmp	.-1462   	; 0xbaa <OS_Start+0x9a>
    1160:	80 81       	ld	r24, Z
    1162:	91 81       	ldd	r25, Z+1	; 0x01
    1164:	02 97       	sbiw	r24, 0x02	; 2
    1166:	21 f4       	brne	.+8      	; 0x1170 <OS_Start+0x660>
    1168:	85 e0       	ldi	r24, 0x05	; 5
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	a2 d9       	rcall	.-3260   	; 0x4b2 <enable_LED>
    116e:	1d cd       	rjmp	.-1478   	; 0xbaa <OS_Start+0x9a>
    1170:	80 81       	ld	r24, Z
    1172:	91 81       	ldd	r25, Z+1	; 0x01
    1174:	03 97       	sbiw	r24, 0x03	; 3
    1176:	09 f0       	breq	.+2      	; 0x117a <OS_Start+0x66a>
    1178:	18 cd       	rjmp	.-1488   	; 0xbaa <OS_Start+0x9a>
    117a:	86 e0       	ldi	r24, 0x06	; 6
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	99 d9       	rcall	.-3278   	; 0x4b2 <enable_LED>
    1180:	14 cd       	rjmp	.-1496   	; 0xbaa <OS_Start+0x9a>
    1182:	eb 81       	ldd	r30, Y+3	; 0x03
    1184:	fc 81       	ldd	r31, Y+4	; 0x04
    1186:	e8 5e       	subi	r30, 0xE8	; 232
    1188:	fe 4f       	sbci	r31, 0xFE	; 254
    118a:	40 81       	ld	r20, Z
    118c:	51 81       	ldd	r21, Z+1	; 0x01
    118e:	d7 01       	movw	r26, r14
    1190:	8d 91       	ld	r24, X+
    1192:	9c 91       	ld	r25, X
    1194:	48 17       	cp	r20, r24
    1196:	59 07       	cpc	r21, r25
    1198:	09 f4       	brne	.+2      	; 0x119c <OS_Start+0x68c>
    119a:	97 c0       	rjmp	.+302    	; 0x12ca <OS_Start+0x7ba>
    119c:	f7 01       	movw	r30, r14
    119e:	c4 01       	movw	r24, r8
    11a0:	6b 81       	ldd	r22, Y+3	; 0x03
    11a2:	7c 81       	ldd	r23, Y+4	; 0x04
    11a4:	25 81       	ldd	r18, Z+5	; 0x05
    11a6:	36 81       	ldd	r19, Z+6	; 0x06
    11a8:	42 17       	cp	r20, r18
    11aa:	53 07       	cpc	r21, r19
    11ac:	09 f4       	brne	.+2      	; 0x11b0 <OS_Start+0x6a0>
    11ae:	90 c0       	rjmp	.+288    	; 0x12d0 <OS_Start+0x7c0>
    11b0:	01 96       	adiw	r24, 0x01	; 1
    11b2:	35 96       	adiw	r30, 0x05	; 5
    11b4:	88 30       	cpi	r24, 0x08	; 8
    11b6:	91 05       	cpc	r25, r1
    11b8:	a9 f7       	brne	.-22     	; 0x11a4 <OS_Start+0x694>
    11ba:	f7 cc       	rjmp	.-1554   	; 0xbaa <OS_Start+0x9a>
    11bc:	80 81       	ld	r24, Z
    11be:	91 81       	ldd	r25, Z+1	; 0x01
    11c0:	48 17       	cp	r20, r24
    11c2:	59 07       	cpc	r21, r25
    11c4:	09 f4       	brne	.+2      	; 0x11c8 <OS_Start+0x6b8>
    11c6:	97 c0       	rjmp	.+302    	; 0x12f6 <OS_Start+0x7e6>
    11c8:	2f 5f       	subi	r18, 0xFF	; 255
    11ca:	3f 4f       	sbci	r19, 0xFF	; 255
    11cc:	e2 5e       	subi	r30, 0xE2	; 226
    11ce:	fe 4f       	sbci	r31, 0xFE	; 254
    11d0:	20 31       	cpi	r18, 0x10	; 16
    11d2:	31 05       	cpc	r19, r1
    11d4:	99 f7       	brne	.-26     	; 0x11bc <OS_Start+0x6ac>
    11d6:	cb 01       	movw	r24, r22
    11d8:	fb 01       	movw	r30, r22
    11da:	ee 0f       	add	r30, r30
    11dc:	ff 1f       	adc	r31, r31
    11de:	ee 0f       	add	r30, r30
    11e0:	ff 1f       	adc	r31, r31
    11e2:	8e 0f       	add	r24, r30
    11e4:	9f 1f       	adc	r25, r31
    11e6:	fc 01       	movw	r30, r24
    11e8:	e9 5c       	subi	r30, 0xC9	; 201
    11ea:	fd 4f       	sbci	r31, 0xFD	; 253
    11ec:	82 e0       	ldi	r24, 0x02	; 2
    11ee:	82 83       	std	Z+2, r24	; 0x02
    11f0:	dc cc       	rjmp	.-1608   	; 0xbaa <OS_Start+0x9a>
    11f2:	2a 9d       	mul	r18, r10
    11f4:	f0 01       	movw	r30, r0
    11f6:	2b 9d       	mul	r18, r11
    11f8:	f0 0d       	add	r31, r0
    11fa:	3a 9d       	mul	r19, r10
    11fc:	f0 0d       	add	r31, r0
    11fe:	11 24       	eor	r1, r1
    1200:	ef 54       	subi	r30, 0x4F	; 79
    1202:	fc 4f       	sbci	r31, 0xFC	; 252
    1204:	80 81       	ld	r24, Z
    1206:	91 81       	ldd	r25, Z+1	; 0x01
    1208:	89 2b       	or	r24, r25
    120a:	09 f0       	breq	.+2      	; 0x120e <OS_Start+0x6fe>
    120c:	ce cc       	rjmp	.-1636   	; 0xbaa <OS_Start+0x9a>
    120e:	eb 81       	ldd	r30, Y+3	; 0x03
    1210:	fc 81       	ldd	r31, Y+4	; 0x04
    1212:	ec 5f       	subi	r30, 0xFC	; 252
    1214:	fe 4f       	sbci	r31, 0xFE	; 254
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	80 83       	st	Z, r24
    121a:	47 e2       	ldi	r20, 0x27	; 39
    121c:	52 e0       	ldi	r21, 0x02	; 2
    121e:	61 e0       	ldi	r22, 0x01	; 1
    1220:	75 e1       	ldi	r23, 0x15	; 21
    1222:	85 e3       	ldi	r24, 0x35	; 53
    1224:	92 e0       	ldi	r25, 0x02	; 2
    1226:	de d2       	rcall	.+1468   	; 0x17e4 <enqueueRQ>
    1228:	23 db       	rcall	.-2490   	; 0x870 <Dispatch>
    122a:	bf cc       	rjmp	.-1666   	; 0xbaa <OS_Start+0x9a>
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <OS_Start+0x726>
    1232:	7c 83       	std	Y+4, r23	; 0x04
    1234:	6b 83       	std	Y+3, r22	; 0x03
    1236:	8a 9d       	mul	r24, r10
    1238:	f0 01       	movw	r30, r0
    123a:	8b 9d       	mul	r24, r11
    123c:	f0 0d       	add	r31, r0
    123e:	9a 9d       	mul	r25, r10
    1240:	f0 0d       	add	r31, r0
    1242:	11 24       	eor	r1, r1
    1244:	ef 54       	subi	r30, 0x4F	; 79
    1246:	fc 4f       	sbci	r31, 0xFC	; 252
    1248:	91 82       	std	Z+1, r9	; 0x01
    124a:	80 82       	st	Z, r8
    124c:	63 cd       	rjmp	.-1338   	; 0xd14 <OS_Start+0x204>
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <OS_Start+0x748>
    1254:	7c 83       	std	Y+4, r23	; 0x04
    1256:	6b 83       	std	Y+3, r22	; 0x03
    1258:	8a 9d       	mul	r24, r10
    125a:	f0 01       	movw	r30, r0
    125c:	8b 9d       	mul	r24, r11
    125e:	f0 0d       	add	r31, r0
    1260:	9a 9d       	mul	r25, r10
    1262:	f0 0d       	add	r31, r0
    1264:	11 24       	eor	r1, r1
    1266:	ef 54       	subi	r30, 0x4F	; 79
    1268:	fc 4f       	sbci	r31, 0xFC	; 252
    126a:	20 81       	ld	r18, Z
    126c:	31 81       	ldd	r19, Z+1	; 0x01
    126e:	21 30       	cpi	r18, 0x01	; 1
    1270:	31 05       	cpc	r19, r1
    1272:	09 f0       	breq	.+2      	; 0x1276 <OS_Start+0x766>
    1274:	9a cc       	rjmp	.-1740   	; 0xbaa <OS_Start+0x9a>
    1276:	7f cd       	rjmp	.-1282   	; 0xd76 <OS_Start+0x266>
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <OS_Start+0x772>
    127e:	7c 83       	std	Y+4, r23	; 0x04
    1280:	6b 83       	std	Y+3, r22	; 0x03
    1282:	fc 01       	movw	r30, r24
    1284:	ee 0f       	add	r30, r30
    1286:	ff 1f       	adc	r31, r31
    1288:	ee 0f       	add	r30, r30
    128a:	ff 1f       	adc	r31, r31
    128c:	ee 0f       	add	r30, r30
    128e:	ff 1f       	adc	r31, r31
    1290:	e8 1b       	sub	r30, r24
    1292:	f9 0b       	sbc	r31, r25
    1294:	e1 5a       	subi	r30, 0xA1	; 161
    1296:	fd 4f       	sbci	r31, 0xFD	; 253
    1298:	22 81       	ldd	r18, Z+2	; 0x02
    129a:	21 30       	cpi	r18, 0x01	; 1
    129c:	09 f0       	breq	.+2      	; 0x12a0 <OS_Start+0x790>
    129e:	55 ce       	rjmp	.-854    	; 0xf4a <OS_Start+0x43a>
    12a0:	3b ce       	rjmp	.-906    	; 0xf18 <OS_Start+0x408>
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <OS_Start+0x79c>
    12a8:	7c 83       	std	Y+4, r23	; 0x04
    12aa:	6b 83       	std	Y+3, r22	; 0x03
    12ac:	fc 01       	movw	r30, r24
    12ae:	ee 0f       	add	r30, r30
    12b0:	ff 1f       	adc	r31, r31
    12b2:	ee 0f       	add	r30, r30
    12b4:	ff 1f       	adc	r31, r31
    12b6:	e8 0f       	add	r30, r24
    12b8:	f9 1f       	adc	r31, r25
    12ba:	e9 5c       	subi	r30, 0xC9	; 201
    12bc:	fd 4f       	sbci	r31, 0xFD	; 253
    12be:	23 81       	ldd	r18, Z+3	; 0x03
    12c0:	34 81       	ldd	r19, Z+4	; 0x04
    12c2:	23 2b       	or	r18, r19
    12c4:	09 f0       	breq	.+2      	; 0x12c8 <OS_Start+0x7b8>
    12c6:	40 cf       	rjmp	.-384    	; 0x1148 <OS_Start+0x638>
    12c8:	02 cf       	rjmp	.-508    	; 0x10ce <OS_Start+0x5be>
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <OS_Start+0x7c4>
    12d0:	7c 83       	std	Y+4, r23	; 0x04
    12d2:	6b 83       	std	Y+3, r22	; 0x03
    12d4:	ed ea       	ldi	r30, 0xAD	; 173
    12d6:	f3 e0       	ldi	r31, 0x03	; 3
    12d8:	20 81       	ld	r18, Z
    12da:	31 81       	ldd	r19, Z+1	; 0x01
    12dc:	42 17       	cp	r20, r18
    12de:	53 07       	cpc	r21, r19
    12e0:	39 f0       	breq	.+14     	; 0x12f0 <OS_Start+0x7e0>
    12e2:	eb ec       	ldi	r30, 0xCB	; 203
    12e4:	f4 e0       	ldi	r31, 0x04	; 4
    12e6:	94 01       	movw	r18, r8
    12e8:	ab 81       	ldd	r26, Y+3	; 0x03
    12ea:	bc 81       	ldd	r27, Y+4	; 0x04
    12ec:	bc 01       	movw	r22, r24
    12ee:	66 cf       	rjmp	.-308    	; 0x11bc <OS_Start+0x6ac>
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	03 c0       	rjmp	.+6      	; 0x12fc <OS_Start+0x7ec>
    12f6:	bc 83       	std	Y+4, r27	; 0x04
    12f8:	ab 83       	std	Y+3, r26	; 0x03
    12fa:	cb 01       	movw	r24, r22
    12fc:	2a 9d       	mul	r18, r10
    12fe:	a0 01       	movw	r20, r0
    1300:	2b 9d       	mul	r18, r11
    1302:	50 0d       	add	r21, r0
    1304:	3a 9d       	mul	r19, r10
    1306:	50 0d       	add	r21, r0
    1308:	11 24       	eor	r1, r1
    130a:	49 56       	subi	r20, 0x69	; 105
    130c:	5d 4f       	sbci	r21, 0xFD	; 253
    130e:	fa 01       	movw	r30, r20
    1310:	ec 5f       	subi	r30, 0xFC	; 252
    1312:	fe 4f       	sbci	r31, 0xFE	; 254
    1314:	61 e0       	ldi	r22, 0x01	; 1
    1316:	60 83       	st	Z, r22
    1318:	72 96       	adiw	r30, 0x12	; 18
    131a:	31 82       	std	Z+1, r3	; 0x01
    131c:	20 82       	st	Z, r2
    131e:	fc 01       	movw	r30, r24
    1320:	ee 0f       	add	r30, r30
    1322:	ff 1f       	adc	r31, r31
    1324:	ee 0f       	add	r30, r30
    1326:	ff 1f       	adc	r31, r31
    1328:	8e 0f       	add	r24, r30
    132a:	9f 1f       	adc	r25, r31
    132c:	fc 01       	movw	r30, r24
    132e:	e9 5c       	subi	r30, 0xC9	; 201
    1330:	fd 4f       	sbci	r31, 0xFD	; 253
    1332:	14 82       	std	Z+4, r1	; 0x04
    1334:	13 82       	std	Z+3, r1	; 0x03
    1336:	eb 81       	ldd	r30, Y+3	; 0x03
    1338:	fc 81       	ldd	r31, Y+4	; 0x04
    133a:	e9 5f       	subi	r30, 0xF9	; 249
    133c:	fe 4f       	sbci	r31, 0xFE	; 254
    133e:	80 81       	ld	r24, Z
    1340:	91 81       	ldd	r25, Z+1	; 0x01
    1342:	fa 01       	movw	r30, r20
    1344:	e9 5f       	subi	r30, 0xF9	; 249
    1346:	fe 4f       	sbci	r31, 0xFE	; 254
    1348:	40 81       	ld	r20, Z
    134a:	51 81       	ldd	r21, Z+1	; 0x01
    134c:	48 17       	cp	r20, r24
    134e:	59 07       	cpc	r21, r25
    1350:	08 f4       	brcc	.+2      	; 0x1354 <OS_Start+0x844>
    1352:	4f cf       	rjmp	.-354    	; 0x11f2 <OS_Start+0x6e2>
    1354:	2a cc       	rjmp	.-1964   	; 0xbaa <OS_Start+0x9a>
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	df 91       	pop	r29
    1360:	cf 91       	pop	r28
    1362:	1f 91       	pop	r17
    1364:	0f 91       	pop	r16
    1366:	ff 90       	pop	r15
    1368:	ef 90       	pop	r14
    136a:	df 90       	pop	r13
    136c:	cf 90       	pop	r12
    136e:	bf 90       	pop	r11
    1370:	af 90       	pop	r10
    1372:	9f 90       	pop	r9
    1374:	8f 90       	pop	r8
    1376:	7f 90       	pop	r7
    1378:	6f 90       	pop	r6
    137a:	5f 90       	pop	r5
    137c:	4f 90       	pop	r4
    137e:	3f 90       	pop	r3
    1380:	2f 90       	pop	r2
    1382:	08 95       	ret

00001384 <Mutex_Init>:
    1384:	80 91 33 02 	lds	r24, 0x0233
    1388:	90 91 34 02 	lds	r25, 0x0234
    138c:	89 2b       	or	r24, r25
    138e:	a1 f0       	breq	.+40     	; 0x13b8 <Mutex_Init+0x34>
    1390:	f8 94       	cli
    1392:	e0 91 35 02 	lds	r30, 0x0235
    1396:	f0 91 36 02 	lds	r31, 0x0236
    139a:	e3 5f       	subi	r30, 0xF3	; 243
    139c:	fe 4f       	sbci	r31, 0xFE	; 254
    139e:	87 e0       	ldi	r24, 0x07	; 7
    13a0:	80 83       	st	Z, r24
    13a2:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    13a6:	e0 91 35 02 	lds	r30, 0x0235
    13aa:	f0 91 36 02 	lds	r31, 0x0236
    13ae:	e2 5f       	subi	r30, 0xF2	; 242
    13b0:	fe 4f       	sbci	r31, 0xFE	; 254
    13b2:	80 81       	ld	r24, Z
    13b4:	91 81       	ldd	r25, Z+1	; 0x01
    13b6:	08 95       	ret
    13b8:	08 95       	ret

000013ba <Event_Init>:
    13ba:	80 91 33 02 	lds	r24, 0x0233
    13be:	90 91 34 02 	lds	r25, 0x0234
    13c2:	89 2b       	or	r24, r25
    13c4:	a1 f0       	breq	.+40     	; 0x13ee <Event_Init+0x34>
    13c6:	f8 94       	cli
    13c8:	e0 91 35 02 	lds	r30, 0x0235
    13cc:	f0 91 36 02 	lds	r31, 0x0236
    13d0:	e3 5f       	subi	r30, 0xF3	; 243
    13d2:	fe 4f       	sbci	r31, 0xFE	; 254
    13d4:	8a e0       	ldi	r24, 0x0A	; 10
    13d6:	80 83       	st	Z, r24
    13d8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    13dc:	e0 91 35 02 	lds	r30, 0x0235
    13e0:	f0 91 36 02 	lds	r31, 0x0236
    13e4:	e2 5f       	subi	r30, 0xF2	; 242
    13e6:	fe 4f       	sbci	r31, 0xFE	; 254
    13e8:	80 81       	ld	r24, Z
    13ea:	91 81       	ldd	r25, Z+1	; 0x01
    13ec:	08 95       	ret
    13ee:	08 95       	ret

000013f0 <Task_Create>:
    13f0:	20 91 33 02 	lds	r18, 0x0233
    13f4:	30 91 34 02 	lds	r19, 0x0234
    13f8:	23 2b       	or	r18, r19
    13fa:	f1 f0       	breq	.+60     	; 0x1438 <Task_Create+0x48>
    13fc:	f8 94       	cli
    13fe:	20 91 35 02 	lds	r18, 0x0235
    1402:	30 91 36 02 	lds	r19, 0x0236
    1406:	f9 01       	movw	r30, r18
    1408:	e3 5f       	subi	r30, 0xF3	; 243
    140a:	fe 4f       	sbci	r31, 0xFE	; 254
    140c:	a1 e0       	ldi	r26, 0x01	; 1
    140e:	a0 83       	st	Z, r26
    1410:	32 97       	sbiw	r30, 0x02	; 2
    1412:	91 83       	std	Z+1, r25	; 0x01
    1414:	80 83       	st	Z, r24
    1416:	36 97       	sbiw	r30, 0x06	; 6
    1418:	71 83       	std	Z+1, r23	; 0x01
    141a:	60 83       	st	Z, r22
    141c:	34 96       	adiw	r30, 0x04	; 4
    141e:	51 83       	std	Z+1, r21	; 0x01
    1420:	40 83       	st	Z, r20
    1422:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    1426:	e0 91 35 02 	lds	r30, 0x0235
    142a:	f0 91 36 02 	lds	r31, 0x0236
    142e:	e2 5f       	subi	r30, 0xF2	; 242
    1430:	fe 4f       	sbci	r31, 0xFE	; 254
    1432:	80 81       	ld	r24, Z
    1434:	91 81       	ldd	r25, Z+1	; 0x01
    1436:	08 95       	ret
    1438:	62 c9       	rjmp	.-3388   	; 0x6fe <Kernel_Create_Task>
    143a:	08 95       	ret

0000143c <Task_Next>:
    143c:	80 91 33 02 	lds	r24, 0x0233
    1440:	90 91 34 02 	lds	r25, 0x0234
    1444:	89 2b       	or	r24, r25
    1446:	59 f0       	breq	.+22     	; 0x145e <Task_Next+0x22>
    1448:	f8 94       	cli
    144a:	e0 91 35 02 	lds	r30, 0x0235
    144e:	f0 91 36 02 	lds	r31, 0x0236
    1452:	e3 5f       	subi	r30, 0xF3	; 243
    1454:	fe 4f       	sbci	r31, 0xFE	; 254
    1456:	82 e0       	ldi	r24, 0x02	; 2
    1458:	80 83       	st	Z, r24
    145a:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <Enter_Kernel>
    145e:	08 95       	ret

00001460 <setup>:
  * Setup pins and timers
  */
void setup() {
	/** For testing */
	/** pin 47 */
	init_LED_PORTL_pin2();
    1460:	16 d8       	rcall	.-4052   	; 0x48e <init_LED_PORTL_pin2>

	/** pin 43 */
	init_LED_PORTL_pin6();
    1462:	21 d8       	rcall	.-4030   	; 0x4a6 <init_LED_PORTL_pin6>

	/** pin 44 */
	init_LED_PORTL_pin5();
    1464:	1a d8       	rcall	.-4044   	; 0x49a <init_LED_PORTL_pin5>

	/** pin 49 */
	init_LED_PORTL_pin0();
    1466:	07 d8       	rcall	.-4082   	; 0x476 <init_LED_PORTL_pin0>

	/** pin 48 */
	init_LED_PORTL_pin1();
    1468:	0c d8       	rcall	.-4072   	; 0x482 <init_LED_PORTL_pin1>

	/** initialize Timer1 16 bit timer */
	Disable_Interrupt();
    146a:	f8 94       	cli

	/** Timer 1 */
	TCCR1A = 0;                 /** Set TCCR1A register to 0 */
    146c:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;                 /** Set TCCR1B register to 0 */
    1470:	e1 e8       	ldi	r30, 0x81	; 129
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	10 82       	st	Z, r1

	TCNT1 = 0;                  /** Initialize counter to 0 */
    1476:	10 92 85 00 	sts	0x0085, r1
    147a:	10 92 84 00 	sts	0x0084, r1

	OCR1A = 624;                /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
    147e:	80 e7       	ldi	r24, 0x70	; 112
    1480:	92 e0       	ldi	r25, 0x02	; 2
    1482:	90 93 89 00 	sts	0x0089, r25
    1486:	80 93 88 00 	sts	0x0088, r24

	TCCR1B |= (1 << WGM12);     /** Turns on CTC mode (TOP is now OCR1A) */
    148a:	80 81       	ld	r24, Z
    148c:	88 60       	ori	r24, 0x08	; 8
    148e:	80 83       	st	Z, r24

	TCCR1B |= (1 << CS12);      /** Prescaler 256 */
    1490:	80 81       	ld	r24, Z
    1492:	84 60       	ori	r24, 0x04	; 4
    1494:	80 83       	st	Z, r24

	TIMSK1 |= (1 << OCIE1A);    /** Enable timer compare interrupt */
    1496:	ef e6       	ldi	r30, 0x6F	; 111
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	82 60       	ori	r24, 0x02	; 2
    149e:	80 83       	st	Z, r24

	/** Timer 3 */
	TCCR3A = 0;                 /** Set TCCR0A register to 0 */
    14a0:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0;                 /** Set TCCR0B register to 0 */
    14a4:	e1 e9       	ldi	r30, 0x91	; 145
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	10 82       	st	Z, r1

	TCNT3 = 0;                  /** Initialize counter to 0 */
    14aa:	10 92 95 00 	sts	0x0095, r1
    14ae:	10 92 94 00 	sts	0x0094, r1

	OCR3A = 62499;              /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
    14b2:	83 e2       	ldi	r24, 0x23	; 35
    14b4:	94 ef       	ldi	r25, 0xF4	; 244
    14b6:	90 93 99 00 	sts	0x0099, r25
    14ba:	80 93 98 00 	sts	0x0098, r24

	TCCR3B |= (1 << WGM32);     /** Turns on CTC mode (TOP is now OCR1A) */
    14be:	80 81       	ld	r24, Z
    14c0:	88 60       	ori	r24, 0x08	; 8
    14c2:	80 83       	st	Z, r24

	TCCR3B |= (1 << CS32);      /** Prescaler 1024 */
    14c4:	80 81       	ld	r24, Z
    14c6:	84 60       	ori	r24, 0x04	; 4
    14c8:	80 83       	st	Z, r24

	TIMSK3 = (1 << OCIE3A);
    14ca:	82 e0       	ldi	r24, 0x02	; 2
    14cc:	80 93 71 00 	sts	0x0071, r24

	Enable_Interrupt();
    14d0:	78 94       	sei
    14d2:	08 95       	ret

000014d4 <__vector_17>:
}

/**
  * ISR for timer1
  */
ISR(TIMER1_COMPA_vect) {
    14d4:	1f 92       	push	r1
    14d6:	0f 92       	push	r0
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	0f 92       	push	r0
    14dc:	11 24       	eor	r1, r1
    14de:	0b b6       	in	r0, 0x3b	; 59
    14e0:	0f 92       	push	r0
    14e2:	df 92       	push	r13
    14e4:	ef 92       	push	r14
    14e6:	ff 92       	push	r15
    14e8:	0f 93       	push	r16
    14ea:	1f 93       	push	r17
    14ec:	2f 93       	push	r18
    14ee:	3f 93       	push	r19
    14f0:	4f 93       	push	r20
    14f2:	5f 93       	push	r21
    14f4:	6f 93       	push	r22
    14f6:	7f 93       	push	r23
    14f8:	8f 93       	push	r24
    14fa:	9f 93       	push	r25
    14fc:	af 93       	push	r26
    14fe:	bf 93       	push	r27
    1500:	ef 93       	push	r30
    1502:	ff 93       	push	r31
    1504:	cf 93       	push	r28
    1506:	df 93       	push	r29
    1508:	00 d0       	rcall	.+0      	; 0x150a <__vector_17+0x36>
    150a:	1f 92       	push	r1
    150c:	cd b7       	in	r28, 0x3d	; 61
    150e:	de b7       	in	r29, 0x3e	; 62

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
    1510:	80 91 25 02 	lds	r24, 0x0225
    1514:	90 91 26 02 	lds	r25, 0x0226
    1518:	01 97       	sbiw	r24, 0x01	; 1
    151a:	9a 83       	std	Y+2, r25	; 0x02
    151c:	89 83       	std	Y+1, r24	; 0x01
    151e:	89 81       	ldd	r24, Y+1	; 0x01
    1520:	9a 81       	ldd	r25, Y+2	; 0x02
    1522:	99 23       	and	r25, r25
    1524:	0c f4       	brge	.+2      	; 0x1528 <__vector_17+0x54>
    1526:	7c c0       	rjmp	.+248    	; 0x1620 <__vector_17+0x14c>
		if ((SleepQueue[i]->wakeTickOverflow <= tickOverflowCount) && (SleepQueue[i]->wakeTick <= (TCNT3/625))) {
    1528:	e9 81       	ldd	r30, Y+1	; 0x01
    152a:	fa 81       	ldd	r31, Y+2	; 0x02
    152c:	ee 0f       	add	r30, r30
    152e:	ff 1f       	adc	r31, r31
    1530:	ef 51       	subi	r30, 0x1F	; 31
    1532:	fb 4e       	sbci	r31, 0xEB	; 235
    1534:	01 90       	ld	r0, Z+
    1536:	f0 81       	ld	r31, Z
    1538:	e0 2d       	mov	r30, r0
    153a:	e0 5f       	subi	r30, 0xF0	; 240
    153c:	fe 4f       	sbci	r31, 0xFE	; 254
    153e:	20 81       	ld	r18, Z
    1540:	31 81       	ldd	r19, Z+1	; 0x01
    1542:	80 91 29 02 	lds	r24, 0x0229
    1546:	90 91 2a 02 	lds	r25, 0x022A
    154a:	82 17       	cp	r24, r18
    154c:	93 07       	cpc	r25, r19
    154e:	08 f4       	brcc	.+2      	; 0x1552 <__vector_17+0x7e>
    1550:	67 c0       	rjmp	.+206    	; 0x1620 <__vector_17+0x14c>
    1552:	e9 81       	ldd	r30, Y+1	; 0x01
    1554:	fa 81       	ldd	r31, Y+2	; 0x02
    1556:	ee 0f       	add	r30, r30
    1558:	ff 1f       	adc	r31, r31
    155a:	ef 51       	subi	r30, 0x1F	; 31
    155c:	fb 4e       	sbci	r31, 0xEB	; 235
    155e:	01 90       	ld	r0, Z+
    1560:	f0 81       	ld	r31, Z
    1562:	e0 2d       	mov	r30, r0
    1564:	ee 5e       	subi	r30, 0xEE	; 238
    1566:	fe 4f       	sbci	r31, 0xFE	; 254
    1568:	20 81       	ld	r18, Z
    156a:	31 81       	ldd	r19, Z+1	; 0x01
    156c:	80 91 94 00 	lds	r24, 0x0094
    1570:	90 91 95 00 	lds	r25, 0x0095
    1574:	61 e7       	ldi	r22, 0x71	; 113
    1576:	72 e0       	ldi	r23, 0x02	; 2
    1578:	2f d4       	rcall	.+2142   	; 0x1dd8 <__udivmodhi4>
    157a:	62 17       	cp	r22, r18
    157c:	73 07       	cpc	r23, r19
    157e:	58 f5       	brcc	.+86     	; 0x15d6 <__vector_17+0x102>
    1580:	4f c0       	rjmp	.+158    	; 0x1620 <__vector_17+0x14c>
    1582:	e9 81       	ldd	r30, Y+1	; 0x01
    1584:	fa 81       	ldd	r31, Y+2	; 0x02
    1586:	ee 0f       	add	r30, r30
    1588:	ff 1f       	adc	r31, r31
    158a:	ef 51       	subi	r30, 0x1F	; 31
    158c:	fb 4e       	sbci	r31, 0xEB	; 235
    158e:	01 90       	ld	r0, Z+
    1590:	f0 81       	ld	r31, Z
    1592:	e0 2d       	mov	r30, r0
    1594:	e0 5f       	subi	r30, 0xF0	; 240
    1596:	fe 4f       	sbci	r31, 0xFE	; 254
    1598:	20 81       	ld	r18, Z
    159a:	31 81       	ldd	r19, Z+1	; 0x01
    159c:	80 91 29 02 	lds	r24, 0x0229
    15a0:	90 91 2a 02 	lds	r25, 0x022A
    15a4:	82 17       	cp	r24, r18
    15a6:	93 07       	cpc	r25, r19
    15a8:	d8 f1       	brcs	.+118    	; 0x1620 <__vector_17+0x14c>
    15aa:	e9 81       	ldd	r30, Y+1	; 0x01
    15ac:	fa 81       	ldd	r31, Y+2	; 0x02
    15ae:	ee 0f       	add	r30, r30
    15b0:	ff 1f       	adc	r31, r31
    15b2:	ef 51       	subi	r30, 0x1F	; 31
    15b4:	fb 4e       	sbci	r31, 0xEB	; 235
    15b6:	01 90       	ld	r0, Z+
    15b8:	f0 81       	ld	r31, Z
    15ba:	e0 2d       	mov	r30, r0
    15bc:	ee 5e       	subi	r30, 0xEE	; 238
    15be:	fe 4f       	sbci	r31, 0xFE	; 254
    15c0:	20 81       	ld	r18, Z
    15c2:	31 81       	ldd	r19, Z+1	; 0x01
    15c4:	f7 01       	movw	r30, r14
    15c6:	80 81       	ld	r24, Z
    15c8:	91 81       	ldd	r25, Z+1	; 0x01
    15ca:	b8 01       	movw	r22, r16
    15cc:	05 d4       	rcall	.+2058   	; 0x1dd8 <__udivmodhi4>
    15ce:	62 17       	cp	r22, r18
    15d0:	73 07       	cpc	r23, r19
    15d2:	50 f4       	brcc	.+20     	; 0x15e8 <__vector_17+0x114>
    15d4:	25 c0       	rjmp	.+74     	; 0x1620 <__vector_17+0x14c>
			volatile PD *p = dequeue(&SleepQueue, &SQCount);
			p->state = READY;
    15d6:	dd 24       	eor	r13, r13
    15d8:	d3 94       	inc	r13
ISR(TIMER1_COMPA_vect) {

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
		if ((SleepQueue[i]->wakeTickOverflow <= tickOverflowCount) && (SleepQueue[i]->wakeTick <= (TCNT3/625))) {
    15da:	0f 2e       	mov	r0, r31
    15dc:	f4 e9       	ldi	r31, 0x94	; 148
    15de:	ef 2e       	mov	r14, r31
    15e0:	f1 2c       	mov	r15, r1
    15e2:	f0 2d       	mov	r31, r0
    15e4:	01 e7       	ldi	r16, 0x71	; 113
    15e6:	12 e0       	ldi	r17, 0x02	; 2
			volatile PD *p = dequeue(&SleepQueue, &SQCount);
    15e8:	65 e2       	ldi	r22, 0x25	; 37
    15ea:	72 e0       	ldi	r23, 0x02	; 2
    15ec:	81 ee       	ldi	r24, 0xE1	; 225
    15ee:	94 e1       	ldi	r25, 0x14	; 20
    15f0:	1c d2       	rcall	.+1080   	; 0x1a2a <dequeue>
    15f2:	9c 83       	std	Y+4, r25	; 0x04
    15f4:	8b 83       	std	Y+3, r24	; 0x03
			p->state = READY;
    15f6:	fc 01       	movw	r30, r24
    15f8:	ec 5f       	subi	r30, 0xFC	; 252
    15fa:	fe 4f       	sbci	r31, 0xFE	; 254
    15fc:	d0 82       	st	Z, r13
			enqueueRQ(&p, &ReadyQueue, &RQCount);
    15fe:	47 e2       	ldi	r20, 0x27	; 39
    1600:	52 e0       	ldi	r21, 0x02	; 2
    1602:	61 e0       	ldi	r22, 0x01	; 1
    1604:	75 e1       	ldi	r23, 0x15	; 21
    1606:	ce 01       	movw	r24, r28
    1608:	03 96       	adiw	r24, 0x03	; 3
    160a:	ec d0       	rcall	.+472    	; 0x17e4 <enqueueRQ>
  */
ISR(TIMER1_COMPA_vect) {

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
    160c:	89 81       	ldd	r24, Y+1	; 0x01
    160e:	9a 81       	ldd	r25, Y+2	; 0x02
    1610:	01 97       	sbiw	r24, 0x01	; 1
    1612:	9a 83       	std	Y+2, r25	; 0x02
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	9a 81       	ldd	r25, Y+2	; 0x02
    161a:	99 23       	and	r25, r25
    161c:	0c f0       	brlt	.+2      	; 0x1620 <__vector_17+0x14c>
    161e:	b1 cf       	rjmp	.-158    	; 0x1582 <__vector_17+0xae>
		else {
			break;
		}
	}

	Task_Next();
    1620:	0d df       	rcall	.-486    	; 0x143c <Task_Next>
}
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	ff 91       	pop	r31
    1630:	ef 91       	pop	r30
    1632:	bf 91       	pop	r27
    1634:	af 91       	pop	r26
    1636:	9f 91       	pop	r25
    1638:	8f 91       	pop	r24
    163a:	7f 91       	pop	r23
    163c:	6f 91       	pop	r22
    163e:	5f 91       	pop	r21
    1640:	4f 91       	pop	r20
    1642:	3f 91       	pop	r19
    1644:	2f 91       	pop	r18
    1646:	1f 91       	pop	r17
    1648:	0f 91       	pop	r16
    164a:	ff 90       	pop	r15
    164c:	ef 90       	pop	r14
    164e:	df 90       	pop	r13
    1650:	0f 90       	pop	r0
    1652:	0b be       	out	0x3b, r0	; 59
    1654:	0f 90       	pop	r0
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	0f 90       	pop	r0
    165a:	1f 90       	pop	r1
    165c:	18 95       	reti

0000165e <__vector_32>:

/**
  * ISR for timer3
  */
ISR(TIMER3_COMPA_vect) {
    165e:	1f 92       	push	r1
    1660:	0f 92       	push	r0
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	0f 92       	push	r0
    1666:	11 24       	eor	r1, r1
    1668:	8f 93       	push	r24
    166a:	9f 93       	push	r25
	tickOverflowCount += 1;
    166c:	80 91 29 02 	lds	r24, 0x0229
    1670:	90 91 2a 02 	lds	r25, 0x022A
    1674:	01 96       	adiw	r24, 0x01	; 1
    1676:	90 93 2a 02 	sts	0x022A, r25
    167a:	80 93 29 02 	sts	0x0229, r24
}
    167e:	9f 91       	pop	r25
    1680:	8f 91       	pop	r24
    1682:	0f 90       	pop	r0
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	0f 90       	pop	r0
    1688:	1f 90       	pop	r1
    168a:	18 95       	reti

0000168c <main>:

/**
  * This function boots the OS and creates the first task: a_main
  */
void main() {
	setup();
    168c:	e9 de       	rcall	.-558    	; 0x1460 <setup>
	
	OS_Init();
    168e:	93 d8       	rcall	.-3802   	; 0x7b6 <OS_Init>
	Task_Create(a_main, 1, 1);
    1690:	41 e0       	ldi	r20, 0x01	; 1
    1692:	50 e0       	ldi	r21, 0x00	; 0
    1694:	61 e0       	ldi	r22, 0x01	; 1
    1696:	70 e0       	ldi	r23, 0x00	; 0
    1698:	8e e7       	ldi	r24, 0x7E	; 126
    169a:	92 e0       	ldi	r25, 0x02	; 2
    169c:	a9 de       	rcall	.-686    	; 0x13f0 <Task_Create>
	OS_Start();
    169e:	38 ca       	rjmp	.-2960   	; 0xb10 <OS_Start>
    16a0:	08 95       	ret

000016a2 <enqueueWQ>:
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
}

void enqueueWQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    16a2:	cf 93       	push	r28
    16a4:	df 93       	push	r29
    16a6:	ea 01       	movw	r28, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    16a8:	28 81       	ld	r18, Y
    16aa:	39 81       	ldd	r19, Y+1	; 0x01
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
}

void enqueueWQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    16ac:	2f 30       	cpi	r18, 0x0F	; 15
    16ae:	31 05       	cpc	r19, r1
    16b0:	29 f1       	breq	.+74     	; 0x16fc <enqueueWQ+0x5a>
        return;
    }

    int i = (*QCount) - 1;
    16b2:	e8 81       	ld	r30, Y
    16b4:	f9 81       	ldd	r31, Y+1	; 0x01
    16b6:	9f 01       	movw	r18, r30
    16b8:	21 50       	subi	r18, 0x01	; 1
    16ba:	31 09       	sbc	r19, r1

    while(i >= 0) {
    16bc:	72 f0       	brmi	.+28     	; 0x16da <enqueueWQ+0x38>
    16be:	ee 0f       	add	r30, r30
    16c0:	ff 1f       	adc	r31, r31
    16c2:	e6 0f       	add	r30, r22
    16c4:	f7 1f       	adc	r31, r23
    16c6:	db 01       	movw	r26, r22
        Queue[i+1] = Queue[i];
    16c8:	32 91       	ld	r19, -Z
    16ca:	22 91       	ld	r18, -Z
    16cc:	33 83       	std	Z+3, r19	; 0x03
    16ce:	22 83       	std	Z+2, r18	; 0x02
        return;
    }

    int i = (*QCount) - 1;

    while(i >= 0) {
    16d0:	ea 17       	cp	r30, r26
    16d2:	fb 07       	cpc	r31, r27
    16d4:	c9 f7       	brne	.-14     	; 0x16c8 <enqueueWQ+0x26>
        Queue[i+1] = Queue[i];
        i--;
    16d6:	2f ef       	ldi	r18, 0xFF	; 255
    16d8:	3f ef       	ldi	r19, 0xFF	; 255
    }

    Queue[i+1] = *p;
    16da:	fc 01       	movw	r30, r24
    16dc:	80 81       	ld	r24, Z
    16de:	91 81       	ldd	r25, Z+1	; 0x01
    16e0:	2f 5f       	subi	r18, 0xFF	; 255
    16e2:	3f 4f       	sbci	r19, 0xFF	; 255
    16e4:	22 0f       	add	r18, r18
    16e6:	33 1f       	adc	r19, r19
    16e8:	fb 01       	movw	r30, r22
    16ea:	e2 0f       	add	r30, r18
    16ec:	f3 1f       	adc	r31, r19
    16ee:	91 83       	std	Z+1, r25	; 0x01
    16f0:	80 83       	st	Z, r24
    (*QCount)++;
    16f2:	88 81       	ld	r24, Y
    16f4:	99 81       	ldd	r25, Y+1	; 0x01
    16f6:	01 96       	adiw	r24, 0x01	; 1
    16f8:	99 83       	std	Y+1, r25	; 0x01
    16fa:	88 83       	st	Y, r24
}
    16fc:	df 91       	pop	r29
    16fe:	cf 91       	pop	r28
    1700:	08 95       	ret

00001702 <enqueueSQ>:

void enqueueSQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    1702:	cf 92       	push	r12
    1704:	df 92       	push	r13
    1706:	ef 92       	push	r14
    1708:	ff 92       	push	r15
    170a:	0f 93       	push	r16
    170c:	1f 93       	push	r17
    170e:	cf 93       	push	r28
    1710:	df 93       	push	r29

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    1712:	ea 01       	movw	r28, r20
    1714:	28 81       	ld	r18, Y
    1716:	39 81       	ldd	r19, Y+1	; 0x01
    Queue[i+1] = *p;
    (*QCount)++;
}

void enqueueSQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    1718:	2f 30       	cpi	r18, 0x0F	; 15
    171a:	31 05       	cpc	r19, r1
    171c:	09 f4       	brne	.+2      	; 0x1720 <enqueueSQ+0x1e>
    171e:	59 c0       	rjmp	.+178    	; 0x17d2 <enqueueSQ+0xd0>
        return;
    }

    int i = (*QCount) - 1;
    1720:	a8 81       	ld	r26, Y
    1722:	b9 81       	ldd	r27, Y+1	; 0x01
    1724:	11 97       	sbiw	r26, 0x01	; 1

    volatile PD *new = *p;
    1726:	fc 01       	movw	r30, r24
    1728:	c0 80       	ld	r12, Z
    172a:	d1 80       	ldd	r13, Z+1	; 0x01

    volatile PD *temp = Queue[i];
    172c:	fd 01       	movw	r30, r26
    172e:	ee 0f       	add	r30, r30
    1730:	ff 1f       	adc	r31, r31
    1732:	eb 01       	movw	r28, r22
    1734:	ce 0f       	add	r28, r30
    1736:	df 1f       	adc	r29, r31
    1738:	28 81       	ld	r18, Y
    173a:	39 81       	ldd	r19, Y+1	; 0x01

    while(i >= 0 && ((new->wakeTickOverflow > temp->wakeTickOverflow) || ((new->wakeTickOverflow >= temp->wakeTickOverflow) && (new->wakeTick >= temp->wakeTick)))) {
    173c:	bb 23       	and	r27, r27
    173e:	cc f1       	brlt	.+114    	; 0x17b2 <enqueueSQ+0xb0>
    1740:	fe 01       	movw	r30, r28
    1742:	76 01       	movw	r14, r12
    1744:	c0 ef       	ldi	r28, 0xF0	; 240
    1746:	ec 1a       	sub	r14, r28
    1748:	ce ef       	ldi	r28, 0xFE	; 254
    174a:	fc 0a       	sbc	r15, r28
    174c:	de ee       	ldi	r29, 0xEE	; 238
    174e:	cd 1a       	sub	r12, r29
    1750:	de ef       	ldi	r29, 0xFE	; 254
    1752:	dd 0a       	sbc	r13, r29
    1754:	0b c0       	rjmp	.+22     	; 0x176c <enqueueSQ+0x6a>
        Queue[i+1] = Queue[i];
    1756:	20 81       	ld	r18, Z
    1758:	31 81       	ldd	r19, Z+1	; 0x01
    175a:	33 83       	std	Z+3, r19	; 0x03
    175c:	22 83       	std	Z+2, r18	; 0x02
        i--;
    175e:	11 97       	sbiw	r26, 0x01	; 1
        temp = Queue[i];
    1760:	32 91       	ld	r19, -Z
    1762:	22 91       	ld	r18, -Z

    volatile PD *new = *p;

    volatile PD *temp = Queue[i];

    while(i >= 0 && ((new->wakeTickOverflow > temp->wakeTickOverflow) || ((new->wakeTickOverflow >= temp->wakeTickOverflow) && (new->wakeTick >= temp->wakeTick)))) {
    1764:	af 3f       	cpi	r26, 0xFF	; 255
    1766:	cf ef       	ldi	r28, 0xFF	; 255
    1768:	bc 07       	cpc	r27, r28
    176a:	19 f1       	breq	.+70     	; 0x17b2 <enqueueSQ+0xb0>
    176c:	e7 01       	movw	r28, r14
    176e:	08 81       	ld	r16, Y
    1770:	19 81       	ldd	r17, Y+1	; 0x01
    1772:	e9 01       	movw	r28, r18
    1774:	c0 5f       	subi	r28, 0xF0	; 240
    1776:	de 4f       	sbci	r29, 0xFE	; 254
    1778:	09 90       	ld	r0, Y+
    177a:	d8 81       	ld	r29, Y
    177c:	c0 2d       	mov	r28, r0
    177e:	c0 17       	cp	r28, r16
    1780:	d1 07       	cpc	r29, r17
    1782:	48 f3       	brcs	.-46     	; 0x1756 <enqueueSQ+0x54>
    1784:	e7 01       	movw	r28, r14
    1786:	08 81       	ld	r16, Y
    1788:	19 81       	ldd	r17, Y+1	; 0x01
    178a:	e9 01       	movw	r28, r18
    178c:	c0 5f       	subi	r28, 0xF0	; 240
    178e:	de 4f       	sbci	r29, 0xFE	; 254
    1790:	09 90       	ld	r0, Y+
    1792:	d8 81       	ld	r29, Y
    1794:	c0 2d       	mov	r28, r0
    1796:	0c 17       	cp	r16, r28
    1798:	1d 07       	cpc	r17, r29
    179a:	58 f0       	brcs	.+22     	; 0x17b2 <enqueueSQ+0xb0>
    179c:	e6 01       	movw	r28, r12
    179e:	08 81       	ld	r16, Y
    17a0:	19 81       	ldd	r17, Y+1	; 0x01
    17a2:	2e 5e       	subi	r18, 0xEE	; 238
    17a4:	3e 4f       	sbci	r19, 0xFE	; 254
    17a6:	e9 01       	movw	r28, r18
    17a8:	28 81       	ld	r18, Y
    17aa:	39 81       	ldd	r19, Y+1	; 0x01
    17ac:	02 17       	cp	r16, r18
    17ae:	13 07       	cpc	r17, r19
    17b0:	90 f6       	brcc	.-92     	; 0x1756 <enqueueSQ+0x54>
        Queue[i+1] = Queue[i];
        i--;
        temp = Queue[i];
    }

    Queue[i+1] = *p;
    17b2:	fc 01       	movw	r30, r24
    17b4:	80 81       	ld	r24, Z
    17b6:	91 81       	ldd	r25, Z+1	; 0x01
    17b8:	11 96       	adiw	r26, 0x01	; 1
    17ba:	aa 0f       	add	r26, r26
    17bc:	bb 1f       	adc	r27, r27
    17be:	a6 0f       	add	r26, r22
    17c0:	b7 1f       	adc	r27, r23
    17c2:	8d 93       	st	X+, r24
    17c4:	9c 93       	st	X, r25
    (*QCount)++;
    17c6:	ea 01       	movw	r28, r20
    17c8:	88 81       	ld	r24, Y
    17ca:	99 81       	ldd	r25, Y+1	; 0x01
    17cc:	01 96       	adiw	r24, 0x01	; 1
    17ce:	99 83       	std	Y+1, r25	; 0x01
    17d0:	88 83       	st	Y, r24
}
    17d2:	df 91       	pop	r29
    17d4:	cf 91       	pop	r28
    17d6:	1f 91       	pop	r17
    17d8:	0f 91       	pop	r16
    17da:	ff 90       	pop	r15
    17dc:	ef 90       	pop	r14
    17de:	df 90       	pop	r13
    17e0:	cf 90       	pop	r12
    17e2:	08 95       	ret

000017e4 <enqueueRQ>:

/*
 *  Insert into the queue sorted by priority
 */
void enqueueRQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    17e4:	cf 92       	push	r12
    17e6:	df 92       	push	r13
    17e8:	ef 92       	push	r14
    17ea:	ff 92       	push	r15
    17ec:	0f 93       	push	r16
    17ee:	1f 93       	push	r17
    17f0:	cf 93       	push	r28
    17f2:	df 93       	push	r29
    17f4:	6a 01       	movw	r12, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    17f6:	ea 01       	movw	r28, r20
    17f8:	28 81       	ld	r18, Y
    17fa:	39 81       	ldd	r19, Y+1	; 0x01

/*
 *  Insert into the queue sorted by priority
 */
void enqueueRQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    17fc:	2f 30       	cpi	r18, 0x0F	; 15
    17fe:	31 05       	cpc	r19, r1
    1800:	09 f4       	brne	.+2      	; 0x1804 <enqueueRQ+0x20>
    1802:	4a c0       	rjmp	.+148    	; 0x1898 <enqueueRQ+0xb4>
        return;
    }

    int i = (*QCount) - 1;
    1804:	28 81       	ld	r18, Y
    1806:	39 81       	ldd	r19, Y+1	; 0x01
    1808:	21 50       	subi	r18, 0x01	; 1
    180a:	31 09       	sbc	r19, r1

    volatile PD *new = *p;
    180c:	fc 01       	movw	r30, r24
    180e:	00 81       	ld	r16, Z
    1810:	11 81       	ldd	r17, Z+1	; 0x01

    volatile PD *temp = Queue[i];
    1812:	f9 01       	movw	r30, r18
    1814:	ee 0f       	add	r30, r30
    1816:	ff 1f       	adc	r31, r31
    1818:	db 01       	movw	r26, r22
    181a:	ae 0f       	add	r26, r30
    181c:	bf 1f       	adc	r27, r31
    181e:	4d 91       	ld	r20, X+
    1820:	5c 91       	ld	r21, X

    while(i >= 0 && (new->inheritedPy >= temp->inheritedPy)) {
    1822:	33 23       	and	r19, r19
    1824:	3c f1       	brlt	.+78     	; 0x1874 <enqueueRQ+0x90>
    1826:	d8 01       	movw	r26, r16
    1828:	a9 5f       	subi	r26, 0xF9	; 249
    182a:	be 4f       	sbci	r27, 0xFE	; 254
    182c:	ed 90       	ld	r14, X+
    182e:	fc 90       	ld	r15, X
    1830:	da 01       	movw	r26, r20
    1832:	a9 5f       	subi	r26, 0xF9	; 249
    1834:	be 4f       	sbci	r27, 0xFE	; 254
    1836:	4d 91       	ld	r20, X+
    1838:	5c 91       	ld	r21, X
    183a:	e4 16       	cp	r14, r20
    183c:	f5 06       	cpc	r15, r21
    183e:	d0 f0       	brcs	.+52     	; 0x1874 <enqueueRQ+0x90>
    1840:	e6 0f       	add	r30, r22
    1842:	f7 1f       	adc	r31, r23
    1844:	09 5f       	subi	r16, 0xF9	; 249
    1846:	1e 4f       	sbci	r17, 0xFE	; 254
        Queue[i+1] = Queue[i];
    1848:	a0 81       	ld	r26, Z
    184a:	b1 81       	ldd	r27, Z+1	; 0x01
    184c:	b3 83       	std	Z+3, r27	; 0x03
    184e:	a2 83       	std	Z+2, r26	; 0x02
        i--;
    1850:	21 50       	subi	r18, 0x01	; 1
    1852:	31 09       	sbc	r19, r1
        temp = Queue[i];
    1854:	b2 91       	ld	r27, -Z
    1856:	a2 91       	ld	r26, -Z

    volatile PD *new = *p;

    volatile PD *temp = Queue[i];

    while(i >= 0 && (new->inheritedPy >= temp->inheritedPy)) {
    1858:	2f 3f       	cpi	r18, 0xFF	; 255
    185a:	4f ef       	ldi	r20, 0xFF	; 255
    185c:	34 07       	cpc	r19, r20
    185e:	51 f0       	breq	.+20     	; 0x1874 <enqueueRQ+0x90>
    1860:	e8 01       	movw	r28, r16
    1862:	e8 80       	ld	r14, Y
    1864:	f9 80       	ldd	r15, Y+1	; 0x01
    1866:	a9 5f       	subi	r26, 0xF9	; 249
    1868:	be 4f       	sbci	r27, 0xFE	; 254
    186a:	4d 91       	ld	r20, X+
    186c:	5c 91       	ld	r21, X
    186e:	e4 16       	cp	r14, r20
    1870:	f5 06       	cpc	r15, r21
    1872:	50 f7       	brcc	.-44     	; 0x1848 <enqueueRQ+0x64>
        Queue[i+1] = Queue[i];
        i--;
        temp = Queue[i];
    }

    Queue[i+1] = *p;
    1874:	fc 01       	movw	r30, r24
    1876:	80 81       	ld	r24, Z
    1878:	91 81       	ldd	r25, Z+1	; 0x01
    187a:	2f 5f       	subi	r18, 0xFF	; 255
    187c:	3f 4f       	sbci	r19, 0xFF	; 255
    187e:	22 0f       	add	r18, r18
    1880:	33 1f       	adc	r19, r19
    1882:	fb 01       	movw	r30, r22
    1884:	e2 0f       	add	r30, r18
    1886:	f3 1f       	adc	r31, r19
    1888:	91 83       	std	Z+1, r25	; 0x01
    188a:	80 83       	st	Z, r24
    (*QCount)++;
    188c:	e6 01       	movw	r28, r12
    188e:	88 81       	ld	r24, Y
    1890:	99 81       	ldd	r25, Y+1	; 0x01
    1892:	01 96       	adiw	r24, 0x01	; 1
    1894:	99 83       	std	Y+1, r25	; 0x01
    1896:	88 83       	st	Y, r24
}
    1898:	df 91       	pop	r29
    189a:	cf 91       	pop	r28
    189c:	1f 91       	pop	r17
    189e:	0f 91       	pop	r16
    18a0:	ff 90       	pop	r15
    18a2:	ef 90       	pop	r14
    18a4:	df 90       	pop	r13
    18a6:	cf 90       	pop	r12
    18a8:	08 95       	ret

000018aa <dequeueWQ>:

/*
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {
    18aa:	0f 93       	push	r16
    18ac:	1f 93       	push	r17
    18ae:	cf 93       	push	r28
    18b0:	df 93       	push	r29

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    18b2:	eb 01       	movw	r28, r22
    18b4:	28 81       	ld	r18, Y
    18b6:	39 81       	ldd	r19, Y+1	; 0x01
/*
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {

    if(isEmpty(QCount)) {
    18b8:	23 2b       	or	r18, r19
    18ba:	09 f4       	brne	.+2      	; 0x18be <dequeueWQ+0x14>
    18bc:	54 c0       	rjmp	.+168    	; 0x1966 <dequeueWQ+0xbc>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
    18be:	28 81       	ld	r18, Y
    18c0:	39 81       	ldd	r19, Y+1	; 0x01
    18c2:	21 50       	subi	r18, 0x01	; 1
    18c4:	31 09       	sbc	r19, r1
    18c6:	0a f4       	brpl	.+2      	; 0x18ca <dequeueWQ+0x20>
    18c8:	51 c0       	rjmp	.+162    	; 0x196c <dequeueWQ+0xc2>
        if(Queue[i]->m == m){
    18ca:	e9 01       	movw	r28, r18
    18cc:	cc 0f       	add	r28, r28
    18ce:	dd 1f       	adc	r29, r29
    18d0:	fc 01       	movw	r30, r24
    18d2:	ec 0f       	add	r30, r28
    18d4:	fd 1f       	adc	r31, r29
    18d6:	a0 81       	ld	r26, Z
    18d8:	b1 81       	ldd	r27, Z+1	; 0x01
    18da:	fd 01       	movw	r30, r26
    18dc:	ec 5e       	subi	r30, 0xEC	; 236
    18de:	fe 4f       	sbci	r31, 0xFE	; 254
    18e0:	01 90       	ld	r0, Z+
    18e2:	f0 81       	ld	r31, Z
    18e4:	e0 2d       	mov	r30, r0
    18e6:	e4 17       	cp	r30, r20
    18e8:	f5 07       	cpc	r31, r21
    18ea:	81 f4       	brne	.+32     	; 0x190c <dequeueWQ+0x62>
    18ec:	0a c0       	rjmp	.+20     	; 0x1902 <dequeueWQ+0x58>
    18ee:	ba 91       	ld	r27, -Y
    18f0:	aa 91       	ld	r26, -Y
    18f2:	fd 01       	movw	r30, r26
    18f4:	ec 5e       	subi	r30, 0xEC	; 236
    18f6:	fe 4f       	sbci	r31, 0xFE	; 254
    18f8:	00 81       	ld	r16, Z
    18fa:	11 81       	ldd	r17, Z+1	; 0x01
    18fc:	04 17       	cp	r16, r20
    18fe:	15 07       	cpc	r17, r21
    1900:	39 f4       	brne	.+14     	; 0x1910 <dequeueWQ+0x66>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
    1902:	10 97       	sbiw	r26, 0x00	; 0
    1904:	59 f4       	brne	.+22     	; 0x191c <dequeueWQ+0x72>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	32 c0       	rjmp	.+100    	; 0x1970 <dequeueWQ+0xc6>
    190c:	c8 0f       	add	r28, r24
    190e:	d9 1f       	adc	r29, r25
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
    1910:	21 50       	subi	r18, 0x01	; 1
    1912:	31 09       	sbc	r19, r1
    1914:	60 f7       	brcc	.-40     	; 0x18ee <dequeueWQ+0x44>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	2a c0       	rjmp	.+84     	; 0x1970 <dequeueWQ+0xc6>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i<(*QCount)-1) {
    191c:	eb 01       	movw	r28, r22
    191e:	48 81       	ld	r20, Y
    1920:	59 81       	ldd	r21, Y+1	; 0x01
    1922:	41 50       	subi	r20, 0x01	; 1
    1924:	51 09       	sbc	r21, r1
    1926:	24 17       	cp	r18, r20
    1928:	35 07       	cpc	r19, r21
    192a:	a4 f4       	brge	.+40     	; 0x1954 <dequeueWQ+0xaa>
    192c:	a9 01       	movw	r20, r18
    192e:	44 0f       	add	r20, r20
    1930:	55 1f       	adc	r21, r21
    1932:	fc 01       	movw	r30, r24
    1934:	e4 0f       	add	r30, r20
    1936:	f5 1f       	adc	r31, r21
            Queue[i] = Queue[i+1];
    1938:	82 81       	ldd	r24, Z+2	; 0x02
    193a:	93 81       	ldd	r25, Z+3	; 0x03
    193c:	81 93       	st	Z+, r24
    193e:	91 93       	st	Z+, r25
            i++;
    1940:	2f 5f       	subi	r18, 0xFF	; 255
    1942:	3f 4f       	sbci	r19, 0xFF	; 255
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i<(*QCount)-1) {
    1944:	eb 01       	movw	r28, r22
    1946:	48 81       	ld	r20, Y
    1948:	59 81       	ldd	r21, Y+1	; 0x01
    194a:	41 50       	subi	r20, 0x01	; 1
    194c:	51 09       	sbc	r21, r1
    194e:	24 17       	cp	r18, r20
    1950:	35 07       	cpc	r19, r21
    1952:	94 f3       	brlt	.-28     	; 0x1938 <dequeueWQ+0x8e>
            Queue[i] = Queue[i+1];
            i++;
        }
        (*QCount)--;
    1954:	fb 01       	movw	r30, r22
    1956:	80 81       	ld	r24, Z
    1958:	91 81       	ldd	r25, Z+1	; 0x01
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	91 83       	std	Z+1, r25	; 0x01
    195e:	80 83       	st	Z, r24

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
        if(Queue[i]->m == m){
            result = Queue[i];
    1960:	8a 2f       	mov	r24, r26
    1962:	9b 2f       	mov	r25, r27
    1964:	05 c0       	rjmp	.+10     	; 0x1970 <dequeueWQ+0xc6>
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {

    if(isEmpty(QCount)) {
        return NULL;
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <dequeueWQ+0xc6>
            i++;
        }
        (*QCount)--;
    }

    return result;
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	90 e0       	ldi	r25, 0x00	; 0
}
    1970:	df 91       	pop	r29
    1972:	cf 91       	pop	r28
    1974:	1f 91       	pop	r17
    1976:	0f 91       	pop	r16
    1978:	08 95       	ret

0000197a <dequeueRQ>:

/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {
    197a:	cf 93       	push	r28
    197c:	df 93       	push	r29
    197e:	eb 01       	movw	r28, r22

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    1980:	28 81       	ld	r18, Y
    1982:	39 81       	ldd	r19, Y+1	; 0x01
/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
    1984:	23 2b       	or	r18, r19
    1986:	09 f4       	brne	.+2      	; 0x198a <dequeueRQ+0x10>
    1988:	48 c0       	rjmp	.+144    	; 0x1a1a <dequeueRQ+0xa0>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
    198a:	e8 81       	ld	r30, Y
    198c:	f9 81       	ldd	r31, Y+1	; 0x01
    198e:	9f 01       	movw	r18, r30
    1990:	21 50       	subi	r18, 0x01	; 1
    1992:	31 09       	sbc	r19, r1
    1994:	0a f4       	brpl	.+2      	; 0x1998 <dequeueRQ+0x1e>
    1996:	44 c0       	rjmp	.+136    	; 0x1a20 <dequeueRQ+0xa6>
    1998:	ee 0f       	add	r30, r30
    199a:	ff 1f       	adc	r31, r31
    199c:	e8 0f       	add	r30, r24
    199e:	f9 1f       	adc	r31, r25
        if((Queue[i]->suspended == 0) && (Queue[i]->state == READY)) {
    19a0:	52 91       	ld	r21, -Z
    19a2:	42 91       	ld	r20, -Z
    19a4:	da 01       	movw	r26, r20
    19a6:	a6 5e       	subi	r26, 0xE6	; 230
    19a8:	be 4f       	sbci	r27, 0xFE	; 254
    19aa:	6d 91       	ld	r22, X+
    19ac:	7c 91       	ld	r23, X
    19ae:	11 97       	sbiw	r26, 0x01	; 1
    19b0:	67 2b       	or	r22, r23
    19b2:	59 f4       	brne	.+22     	; 0x19ca <dequeueRQ+0x50>
    19b4:	56 97       	sbiw	r26, 0x16	; 22
    19b6:	6c 91       	ld	r22, X
    19b8:	61 30       	cpi	r22, 0x01	; 1
    19ba:	39 f4       	brne	.+14     	; 0x19ca <dequeueRQ+0x50>
    19bc:	f9 01       	movw	r30, r18
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
    19be:	41 15       	cp	r20, r1
    19c0:	51 05       	cpc	r21, r1
    19c2:	49 f4       	brne	.+18     	; 0x19d6 <dequeueRQ+0x5c>
            i++;
        }
        (*QCount)--;
    }

    return result;
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	2d c0       	rjmp	.+90     	; 0x1a24 <dequeueRQ+0xaa>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
    19ca:	21 50       	subi	r18, 0x01	; 1
    19cc:	31 09       	sbc	r19, r1
    19ce:	40 f7       	brcc	.-48     	; 0x19a0 <dequeueRQ+0x26>
            i++;
        }
        (*QCount)--;
    }

    return result;
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	27 c0       	rjmp	.+78     	; 0x1a24 <dequeueRQ+0xaa>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i < (*QCount)-1) {
    19d6:	68 81       	ld	r22, Y
    19d8:	79 81       	ldd	r23, Y+1	; 0x01
    19da:	61 50       	subi	r22, 0x01	; 1
    19dc:	71 09       	sbc	r23, r1
    19de:	26 17       	cp	r18, r22
    19e0:	37 07       	cpc	r19, r23
    19e2:	9c f4       	brge	.+38     	; 0x1a0a <dequeueRQ+0x90>
    19e4:	ee 0f       	add	r30, r30
    19e6:	ff 1f       	adc	r31, r31
    19e8:	dc 01       	movw	r26, r24
    19ea:	ae 0f       	add	r26, r30
    19ec:	bf 1f       	adc	r27, r31
            Queue[i] = Queue[i+1];
    19ee:	12 96       	adiw	r26, 0x02	; 2
    19f0:	8d 91       	ld	r24, X+
    19f2:	9c 91       	ld	r25, X
    19f4:	13 97       	sbiw	r26, 0x03	; 3
    19f6:	8d 93       	st	X+, r24
    19f8:	9d 93       	st	X+, r25
            i++;
    19fa:	2f 5f       	subi	r18, 0xFF	; 255
    19fc:	3f 4f       	sbci	r19, 0xFF	; 255
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i < (*QCount)-1) {
    19fe:	e8 81       	ld	r30, Y
    1a00:	f9 81       	ldd	r31, Y+1	; 0x01
    1a02:	31 97       	sbiw	r30, 0x01	; 1
    1a04:	2e 17       	cp	r18, r30
    1a06:	3f 07       	cpc	r19, r31
    1a08:	94 f3       	brlt	.-28     	; 0x19ee <dequeueRQ+0x74>
            Queue[i] = Queue[i+1];
            i++;
        }
        (*QCount)--;
    1a0a:	88 81       	ld	r24, Y
    1a0c:	99 81       	ldd	r25, Y+1	; 0x01
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	99 83       	std	Y+1, r25	; 0x01
    1a12:	88 83       	st	Y, r24
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
        if((Queue[i]->suspended == 0) && (Queue[i]->state == READY)) {
    1a14:	84 2f       	mov	r24, r20
    1a16:	95 2f       	mov	r25, r21
    1a18:	05 c0       	rjmp	.+10     	; 0x1a24 <dequeueRQ+0xaa>
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
        return NULL;
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	02 c0       	rjmp	.+4      	; 0x1a24 <dequeueRQ+0xaa>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	90 e0       	ldi	r25, 0x00	; 0
}
    1a24:	df 91       	pop	r29
    1a26:	cf 91       	pop	r28
    1a28:	08 95       	ret

00001a2a <dequeue>:

/*
 *  Return the first element of the queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
    1a2a:	db 01       	movw	r26, r22

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    1a2c:	2d 91       	ld	r18, X+
    1a2e:	3c 91       	ld	r19, X
    1a30:	11 97       	sbiw	r26, 0x01	; 1
/*
 *  Return the first element of the queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
    1a32:	23 2b       	or	r18, r19
    1a34:	a9 f0       	breq	.+42     	; 0x1a60 <dequeue+0x36>
        return;
    }

    volatile PD *result = (Queue[(*QCount)-1]);
    1a36:	2d 91       	ld	r18, X+
    1a38:	3c 91       	ld	r19, X
    1a3a:	11 97       	sbiw	r26, 0x01	; 1
    1a3c:	f9 01       	movw	r30, r18
    1a3e:	e1 50       	subi	r30, 0x01	; 1
    1a40:	f0 48       	sbci	r31, 0x80	; 128
    1a42:	ee 0f       	add	r30, r30
    1a44:	ff 1f       	adc	r31, r31
    1a46:	e8 0f       	add	r30, r24
    1a48:	f9 1f       	adc	r31, r25
    1a4a:	80 81       	ld	r24, Z
    1a4c:	91 81       	ldd	r25, Z+1	; 0x01
    (*QCount)--;
    1a4e:	2d 91       	ld	r18, X+
    1a50:	3c 91       	ld	r19, X
    1a52:	11 97       	sbiw	r26, 0x01	; 1
    1a54:	21 50       	subi	r18, 0x01	; 1
    1a56:	31 09       	sbc	r19, r1
    1a58:	11 96       	adiw	r26, 0x01	; 1
    1a5a:	3c 93       	st	X, r19
    1a5c:	2e 93       	st	-X, r18
    1a5e:	08 95       	ret

    return result;
}
    1a60:	08 95       	ret

00001a62 <_get_status>:
	}

	wh = (16 - weight) * 100;
	wh /= 16;
	return wh;
}
    1a62:	2d 98       	cbi	0x05, 5	; 5
    1a64:	8f ef       	ldi	r24, 0xFF	; 255
    1a66:	04 d1       	rcall	.+520    	; 0x1c70 <SPI_Write_Byte>
    1a68:	2d 9a       	sbi	0x05, 5	; 5
    1a6a:	08 95       	ret

00001a6c <_set_register>:
    1a6c:	0f 93       	push	r16
    1a6e:	1f 93       	push	r17
    1a70:	cf 93       	push	r28
    1a72:	df 93       	push	r29
    1a74:	8b 01       	movw	r16, r22
    1a76:	d4 2f       	mov	r29, r20
    1a78:	2d 98       	cbi	0x05, 5	; 5
    1a7a:	8f 71       	andi	r24, 0x1F	; 31
    1a7c:	80 62       	ori	r24, 0x20	; 32
    1a7e:	f8 d0       	rcall	.+496    	; 0x1c70 <SPI_Write_Byte>
    1a80:	c8 2f       	mov	r28, r24
    1a82:	6d 2f       	mov	r22, r29
    1a84:	c8 01       	movw	r24, r16
    1a86:	e1 d0       	rcall	.+450    	; 0x1c4a <SPI_Write_Block>
    1a88:	2d 9a       	sbi	0x05, 5	; 5
    1a8a:	8c 2f       	mov	r24, r28
    1a8c:	df 91       	pop	r29
    1a8e:	cf 91       	pop	r28
    1a90:	1f 91       	pop	r17
    1a92:	0f 91       	pop	r16
    1a94:	08 95       	ret

00001a96 <_get_register>:
    1a96:	0f 93       	push	r16
    1a98:	1f 93       	push	r17
    1a9a:	cf 93       	push	r28
    1a9c:	df 93       	push	r29
    1a9e:	eb 01       	movw	r28, r22
    1aa0:	14 2f       	mov	r17, r20
    1aa2:	44 23       	and	r20, r20
    1aa4:	69 f0       	breq	.+26     	; 0x1ac0 <_get_register+0x2a>
    1aa6:	fb 01       	movw	r30, r22
    1aa8:	2f ef       	ldi	r18, 0xFF	; 255
    1aaa:	24 0f       	add	r18, r20
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	2f 5f       	subi	r18, 0xFF	; 255
    1ab0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab2:	26 0f       	add	r18, r22
    1ab4:	37 1f       	adc	r19, r23
    1ab6:	9f ef       	ldi	r25, 0xFF	; 255
    1ab8:	91 93       	st	Z+, r25
    1aba:	e2 17       	cp	r30, r18
    1abc:	f3 07       	cpc	r31, r19
    1abe:	e1 f7       	brne	.-8      	; 0x1ab8 <_get_register+0x22>
    1ac0:	2d 98       	cbi	0x05, 5	; 5
    1ac2:	8f 71       	andi	r24, 0x1F	; 31
    1ac4:	d5 d0       	rcall	.+426    	; 0x1c70 <SPI_Write_Byte>
    1ac6:	08 2f       	mov	r16, r24
    1ac8:	41 2f       	mov	r20, r17
    1aca:	be 01       	movw	r22, r28
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	a5 d0       	rcall	.+330    	; 0x1c1c <SPI_ReadWrite_Block>
    1ad2:	2d 9a       	sbi	0x05, 5	; 5
    1ad4:	80 2f       	mov	r24, r16
    1ad6:	df 91       	pop	r29
    1ad8:	cf 91       	pop	r28
    1ada:	1f 91       	pop	r17
    1adc:	0f 91       	pop	r16
    1ade:	08 95       	ret

00001ae0 <_set_rx_mode>:
    1ae0:	cf 93       	push	r28
    1ae2:	df 93       	push	r29
    1ae4:	1f 92       	push	r1
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	41 e0       	ldi	r20, 0x01	; 1
    1aec:	be 01       	movw	r22, r28
    1aee:	6f 5f       	subi	r22, 0xFF	; 255
    1af0:	7f 4f       	sbci	r23, 0xFF	; 255
    1af2:	80 e0       	ldi	r24, 0x00	; 0
    1af4:	d0 df       	rcall	.-96     	; 0x1a96 <_get_register>
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	80 fd       	sbrc	r24, 0
    1afa:	10 c0       	rjmp	.+32     	; 0x1b1c <_set_rx_mode+0x3c>
    1afc:	81 60       	ori	r24, 0x01	; 1
    1afe:	89 83       	std	Y+1, r24	; 0x01
    1b00:	41 e0       	ldi	r20, 0x01	; 1
    1b02:	be 01       	movw	r22, r28
    1b04:	6f 5f       	subi	r22, 0xFF	; 255
    1b06:	7f 4f       	sbci	r23, 0xFF	; 255
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	b0 df       	rcall	.-160    	; 0x1a6c <_set_register>
    1b0c:	85 e1       	ldi	r24, 0x15	; 21
    1b0e:	8a 95       	dec	r24
    1b10:	f1 f7       	brne	.-4      	; 0x1b0e <_set_rx_mode+0x2e>
    1b12:	00 c0       	rjmp	.+0      	; 0x1b14 <_set_rx_mode+0x34>
    1b14:	85 e1       	ldi	r24, 0x15	; 21
    1b16:	8a 95       	dec	r24
    1b18:	f1 f7       	brne	.-4      	; 0x1b16 <_set_rx_mode+0x36>
    1b1a:	00 c0       	rjmp	.+0      	; 0x1b1c <_set_rx_mode+0x3c>
    1b1c:	0f 90       	pop	r0
    1b1e:	df 91       	pop	r29
    1b20:	cf 91       	pop	r28
    1b22:	08 95       	ret

00001b24 <_reset_pipe0_address>:
    1b24:	80 91 09 02 	lds	r24, 0x0209
    1b28:	88 23       	and	r24, r24
    1b2a:	29 f0       	breq	.+10     	; 0x1b36 <_reset_pipe0_address+0x12>
    1b2c:	45 e0       	ldi	r20, 0x05	; 5
    1b2e:	64 e0       	ldi	r22, 0x04	; 4
    1b30:	72 e0       	ldi	r23, 0x02	; 2
    1b32:	8a e0       	ldi	r24, 0x0A	; 10
    1b34:	9b cf       	rjmp	.-202    	; 0x1a6c <_set_register>
    1b36:	08 95       	ret

00001b38 <__vector_1>:

// Interrupt handler
ISR(INT0_vect)
{
    1b38:	1f 92       	push	r1
    1b3a:	0f 92       	push	r0
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	0f 92       	push	r0
    1b40:	11 24       	eor	r1, r1
    1b42:	0b b6       	in	r0, 0x3b	; 59
    1b44:	0f 92       	push	r0
    1b46:	2f 93       	push	r18
    1b48:	3f 93       	push	r19
    1b4a:	4f 93       	push	r20
    1b4c:	5f 93       	push	r21
    1b4e:	6f 93       	push	r22
    1b50:	7f 93       	push	r23
    1b52:	8f 93       	push	r24
    1b54:	9f 93       	push	r25
    1b56:	af 93       	push	r26
    1b58:	bf 93       	push	r27
    1b5a:	ef 93       	push	r30
    1b5c:	ff 93       	push	r31
    1b5e:	cf 93       	push	r28
    1b60:	df 93       	push	r29
    1b62:	1f 92       	push	r1
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;
    uint8_t pipe_number;

    RADIO_CE_LOW();
    1b68:	2c 98       	cbi	0x05, 4	; 5

    status = _get_status();
    1b6a:	7b df       	rcall	.-266    	; 0x1a62 <_get_status>
    1b6c:	89 83       	std	Y+1, r24	; 0x01

    if (status & _BV(RX_DR)) {
    1b6e:	86 ff       	sbrs	r24, 6
    1b70:	04 c0       	rjmp	.+8      	; 0x1b7a <__vector_1+0x42>
        pipe_number =  (status & 0xE) >> 1;
    1b72:	8e 70       	andi	r24, 0x0E	; 14
        radio_rxhandler(pipe_number);
    1b74:	86 95       	lsr	r24
    1b76:	0e 94 66 01 	call	0x2cc	; 0x2cc <radio_rxhandler>
    }

    // We can get the TX_DS or the MAX_RT interrupt, but not both.
    if (status & _BV(TX_DS)) {
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	85 ff       	sbrs	r24, 5
    1b7e:	1b c0       	rjmp	.+54     	; 0x1bb6 <__vector_1+0x7e>
    	// if there's nothing left to transmit, switch back to receive mode.
        transmit_lock = 0;
    1b80:	10 92 45 15 	sts	0x1545, r1
        _reset_pipe0_address();
    1b84:	cf df       	rcall	.-98     	; 0x1b24 <_reset_pipe0_address>
        _set_rx_mode();
    1b86:	ac df       	rcall	.-168    	; 0x1ae0 <_set_rx_mode>

        // indicate in the history that a packet was transmitted successfully by appending a 1.
        tx_history <<= 1;
    1b88:	80 91 02 02 	lds	r24, 0x0202
    1b8c:	90 91 03 02 	lds	r25, 0x0203
    1b90:	88 0f       	add	r24, r24
    1b92:	99 1f       	adc	r25, r25
    1b94:	90 93 03 02 	sts	0x0203, r25
    1b98:	80 93 02 02 	sts	0x0202, r24
        tx_history |= 1;
    1b9c:	80 91 02 02 	lds	r24, 0x0202
    1ba0:	90 91 03 02 	lds	r25, 0x0203
    1ba4:	81 60       	ori	r24, 0x01	; 1
    1ba6:	90 93 03 02 	sts	0x0203, r25
    1baa:	80 93 02 02 	sts	0x0202, r24
        tx_last_status = RADIO_TX_SUCCESS;
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	80 93 01 02 	sts	0x0201, r24
    1bb4:	14 c0       	rjmp	.+40     	; 0x1bde <__vector_1+0xa6>
    } else if (status & _BV(MAX_RT)) {
    1bb6:	84 ff       	sbrs	r24, 4
    1bb8:	12 c0       	rjmp	.+36     	; 0x1bde <__vector_1+0xa6>
        // enable SPI
       // RADIO_CSN_LOW();


        // flush the failed packet (it stays in the Tx FIFO; we could try to resend it by setting CE high)
        SPI_Write_Byte( FLUSH_TX );
    1bba:	81 ee       	ldi	r24, 0xE1	; 225
    1bbc:	59 d0       	rcall	.+178    	; 0x1c70 <SPI_Write_Byte>

        // resynch SPI
        //RADIO_CSN_HIGH();

        transmit_lock = 0;
    1bbe:	10 92 45 15 	sts	0x1545, r1
        _reset_pipe0_address();
    1bc2:	b0 df       	rcall	.-160    	; 0x1b24 <_reset_pipe0_address>
        _set_rx_mode();
    1bc4:	8d df       	rcall	.-230    	; 0x1ae0 <_set_rx_mode>

        // indicate in the history that a packet was dropped by appending a 0.
        tx_history <<= 1;
    1bc6:	80 91 02 02 	lds	r24, 0x0202
    1bca:	90 91 03 02 	lds	r25, 0x0203
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	90 93 03 02 	sts	0x0203, r25
    1bd6:	80 93 02 02 	sts	0x0202, r24
        tx_last_status = RADIO_TX_MAX_RT;
    1bda:	10 92 01 02 	sts	0x0201, r1
    }

    // clear the interrupt flags.
	status = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
    1bde:	80 e7       	ldi	r24, 0x70	; 112
    1be0:	89 83       	std	Y+1, r24	; 0x01
	_set_register(STATUS, &status, 1);
    1be2:	41 e0       	ldi	r20, 0x01	; 1
    1be4:	be 01       	movw	r22, r28
    1be6:	6f 5f       	subi	r22, 0xFF	; 255
    1be8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bea:	87 e0       	ldi	r24, 0x07	; 7
    1bec:	3f df       	rcall	.-386    	; 0x1a6c <_set_register>

    RADIO_CE_HIGH();
    1bee:	2c 9a       	sbi	0x05, 4	; 5
}
    1bf0:	0f 90       	pop	r0
    1bf2:	df 91       	pop	r29
    1bf4:	cf 91       	pop	r28
    1bf6:	ff 91       	pop	r31
    1bf8:	ef 91       	pop	r30
    1bfa:	bf 91       	pop	r27
    1bfc:	af 91       	pop	r26
    1bfe:	9f 91       	pop	r25
    1c00:	8f 91       	pop	r24
    1c02:	7f 91       	pop	r23
    1c04:	6f 91       	pop	r22
    1c06:	5f 91       	pop	r21
    1c08:	4f 91       	pop	r20
    1c0a:	3f 91       	pop	r19
    1c0c:	2f 91       	pop	r18
    1c0e:	0f 90       	pop	r0
    1c10:	0b be       	out	0x3b, r0	; 59
    1c12:	0f 90       	pop	r0
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	0f 90       	pop	r0
    1c18:	1f 90       	pop	r1
    1c1a:	18 95       	reti

00001c1c <SPI_ReadWrite_Block>:
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1c1c:	44 23       	and	r20, r20
    1c1e:	a1 f0       	breq	.+40     	; 0x1c48 <SPI_ReadWrite_Block+0x2c>
    1c20:	fc 01       	movw	r30, r24
    1c22:	a6 2f       	mov	r26, r22
    1c24:	b7 2f       	mov	r27, r23
    1c26:	41 50       	subi	r20, 0x01	; 1
    1c28:	24 2f       	mov	r18, r20
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	2f 5f       	subi	r18, 0xFF	; 255
    1c2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c30:	28 0f       	add	r18, r24
    1c32:	39 1f       	adc	r19, r25
          SPDR = data[i];
    1c34:	91 91       	ld	r25, Z+
    1c36:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1c38:	0d b4       	in	r0, 0x2d	; 45
    1c3a:	07 fe       	sbrs	r0, 7
    1c3c:	fd cf       	rjmp	.-6      	; 0x1c38 <SPI_ReadWrite_Block+0x1c>
          buffer[i] = SPDR;
    1c3e:	9e b5       	in	r25, 0x2e	; 46
    1c40:	9d 93       	st	X+, r25
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1c42:	e2 17       	cp	r30, r18
    1c44:	f3 07       	cpc	r31, r19
    1c46:	b1 f7       	brne	.-20     	; 0x1c34 <SPI_ReadWrite_Block+0x18>
    1c48:	08 95       	ret

00001c4a <SPI_Write_Block>:
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1c4a:	66 23       	and	r22, r22
    1c4c:	81 f0       	breq	.+32     	; 0x1c6e <SPI_Write_Block+0x24>
    1c4e:	fc 01       	movw	r30, r24
    1c50:	61 50       	subi	r22, 0x01	; 1
    1c52:	26 2f       	mov	r18, r22
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	2f 5f       	subi	r18, 0xFF	; 255
    1c58:	3f 4f       	sbci	r19, 0xFF	; 255
    1c5a:	28 0f       	add	r18, r24
    1c5c:	39 1f       	adc	r19, r25
          SPDR = data[i];
    1c5e:	91 91       	ld	r25, Z+
    1c60:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1c62:	0d b4       	in	r0, 0x2d	; 45
    1c64:	07 fe       	sbrs	r0, 7
    1c66:	fd cf       	rjmp	.-6      	; 0x1c62 <SPI_Write_Block+0x18>
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1c68:	e2 17       	cp	r30, r18
    1c6a:	f3 07       	cpc	r31, r19
    1c6c:	c1 f7       	brne	.-16     	; 0x1c5e <SPI_Write_Block+0x14>
    1c6e:	08 95       	ret

00001c70 <SPI_Write_Byte>:
    }
}

uint8_t SPI_Write_Byte(uint8_t byte)
{
    SPDR = byte;
    1c70:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
    1c72:	0d b4       	in	r0, 0x2d	; 45
    1c74:	07 fe       	sbrs	r0, 7
    1c76:	fd cf       	rjmp	.-6      	; 0x1c72 <SPI_Write_Byte+0x2>
    return SPDR;
    1c78:	8e b5       	in	r24, 0x2e	; 46
}
    1c7a:	08 95       	ret

00001c7c <uart_init>:
		uart_putchar(*string, uart);
		string++;
	}
	
	
}
    1c7c:	e4 e6       	ldi	r30, 0x64	; 100
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	90 81       	ld	r25, Z
    1c82:	9d 7f       	andi	r25, 0xFD	; 253
    1c84:	90 83       	st	Z, r25
    1c86:	32 e0       	ldi	r19, 0x02	; 2
    1c88:	30 93 c0 00 	sts	0x00C0, r19
    1c8c:	28 e9       	ldi	r18, 0x98	; 152
    1c8e:	20 93 c1 00 	sts	0x00C1, r18
    1c92:	96 e0       	ldi	r25, 0x06	; 6
    1c94:	90 93 c2 00 	sts	0x00C2, r25
    1c98:	30 93 c8 00 	sts	0x00C8, r19
    1c9c:	20 93 c9 00 	sts	0x00C9, r18
    1ca0:	90 93 ca 00 	sts	0x00CA, r25
    1ca4:	23 e3       	ldi	r18, 0x33	; 51
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	30 93 c5 00 	sts	0x00C5, r19
    1cac:	20 93 c4 00 	sts	0x00C4, r18
    1cb0:	2f ec       	ldi	r18, 0xCF	; 207
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	30 93 cd 00 	sts	0x00CD, r19
    1cb8:	20 93 cc 00 	sts	0x00CC, r18
    1cbc:	81 30       	cpi	r24, 0x01	; 1
    1cbe:	41 f0       	breq	.+16     	; 0x1cd0 <uart_init+0x54>
    1cc0:	18 f0       	brcs	.+6      	; 0x1cc8 <uart_init+0x4c>
    1cc2:	82 30       	cpi	r24, 0x02	; 2
    1cc4:	49 f0       	breq	.+18     	; 0x1cd8 <uart_init+0x5c>
    1cc6:	0c c0       	rjmp	.+24     	; 0x1ce0 <uart_init+0x64>
    1cc8:	87 e6       	ldi	r24, 0x67	; 103
    1cca:	80 93 c4 00 	sts	0x00C4, r24
    1cce:	0b c0       	rjmp	.+22     	; 0x1ce6 <uart_init+0x6a>
    1cd0:	83 e3       	ldi	r24, 0x33	; 51
    1cd2:	80 93 c4 00 	sts	0x00C4, r24
    1cd6:	07 c0       	rjmp	.+14     	; 0x1ce6 <uart_init+0x6a>
    1cd8:	82 e2       	ldi	r24, 0x22	; 34
    1cda:	80 93 c4 00 	sts	0x00C4, r24
    1cde:	03 c0       	rjmp	.+6      	; 0x1ce6 <uart_init+0x6a>
    1ce0:	87 e6       	ldi	r24, 0x67	; 103
    1ce2:	80 93 c4 00 	sts	0x00C4, r24
    1ce6:	10 92 78 14 	sts	0x1478, r1
    1cea:	10 92 77 14 	sts	0x1477, r1
    1cee:	08 95       	ret

00001cf0 <uart_putchar>:
    1cf0:	67 2b       	or	r22, r23
    1cf2:	41 f0       	breq	.+16     	; 0x1d04 <uart_putchar+0x14>
    1cf4:	e8 ec       	ldi	r30, 0xC8	; 200
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	90 81       	ld	r25, Z
    1cfa:	95 ff       	sbrs	r25, 5
    1cfc:	fd cf       	rjmp	.-6      	; 0x1cf8 <uart_putchar+0x8>
    1cfe:	80 93 ce 00 	sts	0x00CE, r24
    1d02:	08 95       	ret
    1d04:	e0 ec       	ldi	r30, 0xC0	; 192
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	90 81       	ld	r25, Z
    1d0a:	95 ff       	sbrs	r25, 5
    1d0c:	fd cf       	rjmp	.-6      	; 0x1d08 <uart_putchar+0x18>
    1d0e:	80 93 c6 00 	sts	0x00C6, r24
    1d12:	08 95       	ret

00001d14 <__vector_25>:
/**
 * UART receive byte ISR
 */
ISR(USART0_RX_vect)
{
    1d14:	1f 92       	push	r1
    1d16:	0f 92       	push	r0
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	0f 92       	push	r0
    1d1c:	11 24       	eor	r1, r1
    1d1e:	0b b6       	in	r0, 0x3b	; 59
    1d20:	0f 92       	push	r0
    1d22:	8f 93       	push	r24
    1d24:	9f 93       	push	r25
    1d26:	ef 93       	push	r30
    1d28:	ff 93       	push	r31
	while(!(UCSR0A & (1<<RXC0)));
    1d2a:	e0 ec       	ldi	r30, 0xC0	; 192
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	88 23       	and	r24, r24
    1d32:	ec f7       	brge	.-6      	; 0x1d2e <__vector_25+0x1a>
    uart_buffer[uart_buffer_index] = UDR0;
    1d34:	e0 91 78 14 	lds	r30, 0x1478
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 91 c6 00 	lds	r24, 0x00C6
    1d3e:	e7 56       	subi	r30, 0x67	; 103
    1d40:	fb 4e       	sbci	r31, 0xEB	; 235
    1d42:	80 83       	st	Z, r24
    uart_buffer_index = (uart_buffer_index + 1) % UART_BUFFER_SIZE;
    1d44:	80 91 78 14 	lds	r24, 0x1478
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	01 96       	adiw	r24, 0x01	; 1
    1d4c:	8f 71       	andi	r24, 0x1F	; 31
    1d4e:	90 78       	andi	r25, 0x80	; 128
    1d50:	99 23       	and	r25, r25
    1d52:	24 f4       	brge	.+8      	; 0x1d5c <__vector_25+0x48>
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	80 6e       	ori	r24, 0xE0	; 224
    1d58:	9f 6f       	ori	r25, 0xFF	; 255
    1d5a:	01 96       	adiw	r24, 0x01	; 1
    1d5c:	80 93 78 14 	sts	0x1478, r24
}
    1d60:	ff 91       	pop	r31
    1d62:	ef 91       	pop	r30
    1d64:	9f 91       	pop	r25
    1d66:	8f 91       	pop	r24
    1d68:	0f 90       	pop	r0
    1d6a:	0b be       	out	0x3b, r0	; 59
    1d6c:	0f 90       	pop	r0
    1d6e:	0f be       	out	0x3f, r0	; 63
    1d70:	0f 90       	pop	r0
    1d72:	1f 90       	pop	r1
    1d74:	18 95       	reti

00001d76 <__vector_36>:

/**
 * UART receive byte ISR
 */
ISR(USART1_RX_vect)
{
    1d76:	1f 92       	push	r1
    1d78:	0f 92       	push	r0
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	0f 92       	push	r0
    1d7e:	11 24       	eor	r1, r1
    1d80:	0b b6       	in	r0, 0x3b	; 59
    1d82:	0f 92       	push	r0
    1d84:	8f 93       	push	r24
    1d86:	9f 93       	push	r25
    1d88:	ef 93       	push	r30
    1d8a:	ff 93       	push	r31
	while(!(UCSR1A & (1<<RXC1)));
    1d8c:	e8 ec       	ldi	r30, 0xC8	; 200
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	88 23       	and	r24, r24
    1d94:	ec f7       	brge	.-6      	; 0x1d90 <__vector_36+0x1a>
    uart_buffer_1[uart_buffer_1_index] = UDR1;
    1d96:	e0 91 77 14 	lds	r30, 0x1477
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 91 ce 00 	lds	r24, 0x00CE
    1da0:	e7 58       	subi	r30, 0x87	; 135
    1da2:	fb 4e       	sbci	r31, 0xEB	; 235
    1da4:	80 83       	st	Z, r24
    uart_buffer_1_index = (uart_buffer_1_index + 1) % UART_BUFFER_SIZE;
    1da6:	80 91 77 14 	lds	r24, 0x1477
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	01 96       	adiw	r24, 0x01	; 1
    1dae:	8f 71       	andi	r24, 0x1F	; 31
    1db0:	90 78       	andi	r25, 0x80	; 128
    1db2:	99 23       	and	r25, r25
    1db4:	24 f4       	brge	.+8      	; 0x1dbe <__vector_36+0x48>
    1db6:	01 97       	sbiw	r24, 0x01	; 1
    1db8:	80 6e       	ori	r24, 0xE0	; 224
    1dba:	9f 6f       	ori	r25, 0xFF	; 255
    1dbc:	01 96       	adiw	r24, 0x01	; 1
    1dbe:	80 93 77 14 	sts	0x1477, r24
}
    1dc2:	ff 91       	pop	r31
    1dc4:	ef 91       	pop	r30
    1dc6:	9f 91       	pop	r25
    1dc8:	8f 91       	pop	r24
    1dca:	0f 90       	pop	r0
    1dcc:	0b be       	out	0x3b, r0	; 59
    1dce:	0f 90       	pop	r0
    1dd0:	0f be       	out	0x3f, r0	; 63
    1dd2:	0f 90       	pop	r0
    1dd4:	1f 90       	pop	r1
    1dd6:	18 95       	reti

00001dd8 <__udivmodhi4>:
    1dd8:	aa 1b       	sub	r26, r26
    1dda:	bb 1b       	sub	r27, r27
    1ddc:	51 e1       	ldi	r21, 0x11	; 17
    1dde:	07 c0       	rjmp	.+14     	; 0x1dee <__udivmodhi4_ep>

00001de0 <__udivmodhi4_loop>:
    1de0:	aa 1f       	adc	r26, r26
    1de2:	bb 1f       	adc	r27, r27
    1de4:	a6 17       	cp	r26, r22
    1de6:	b7 07       	cpc	r27, r23
    1de8:	10 f0       	brcs	.+4      	; 0x1dee <__udivmodhi4_ep>
    1dea:	a6 1b       	sub	r26, r22
    1dec:	b7 0b       	sbc	r27, r23

00001dee <__udivmodhi4_ep>:
    1dee:	88 1f       	adc	r24, r24
    1df0:	99 1f       	adc	r25, r25
    1df2:	5a 95       	dec	r21
    1df4:	a9 f7       	brne	.-22     	; 0x1de0 <__udivmodhi4_loop>
    1df6:	80 95       	com	r24
    1df8:	90 95       	com	r25
    1dfa:	bc 01       	movw	r22, r24
    1dfc:	cd 01       	movw	r24, r26
    1dfe:	08 95       	ret

00001e00 <__tablejump2__>:
    1e00:	ee 0f       	add	r30, r30
    1e02:	ff 1f       	adc	r31, r31
    1e04:	88 1f       	adc	r24, r24
    1e06:	8b bf       	out	0x3b, r24	; 59
    1e08:	07 90       	elpm	r0, Z+
    1e0a:	f6 91       	elpm	r31, Z
    1e0c:	e0 2d       	mov	r30, r0
    1e0e:	19 94       	eijmp

00001e10 <itoa>:
    1e10:	45 32       	cpi	r20, 0x25	; 37
    1e12:	51 05       	cpc	r21, r1
    1e14:	18 f4       	brcc	.+6      	; 0x1e1c <itoa+0xc>
    1e16:	42 30       	cpi	r20, 0x02	; 2
    1e18:	08 f0       	brcs	.+2      	; 0x1e1c <itoa+0xc>
    1e1a:	04 c0       	rjmp	.+8      	; 0x1e24 <__itoa_ncheck>
    1e1c:	fb 01       	movw	r30, r22
    1e1e:	10 82       	st	Z, r1
    1e20:	cb 01       	movw	r24, r22
    1e22:	08 95       	ret

00001e24 <__itoa_ncheck>:
    1e24:	bb 27       	eor	r27, r27
    1e26:	4a 30       	cpi	r20, 0x0A	; 10
    1e28:	31 f4       	brne	.+12     	; 0x1e36 <__itoa_ncheck+0x12>
    1e2a:	99 23       	and	r25, r25
    1e2c:	22 f4       	brpl	.+8      	; 0x1e36 <__itoa_ncheck+0x12>
    1e2e:	bd e2       	ldi	r27, 0x2D	; 45
    1e30:	90 95       	com	r25
    1e32:	81 95       	neg	r24
    1e34:	9f 4f       	sbci	r25, 0xFF	; 255
    1e36:	01 c0       	rjmp	.+2      	; 0x1e3a <__utoa_common>

00001e38 <__utoa_ncheck>:
    1e38:	bb 27       	eor	r27, r27

00001e3a <__utoa_common>:
    1e3a:	fb 01       	movw	r30, r22
    1e3c:	55 27       	eor	r21, r21
    1e3e:	aa 27       	eor	r26, r26
    1e40:	88 0f       	add	r24, r24
    1e42:	99 1f       	adc	r25, r25
    1e44:	aa 1f       	adc	r26, r26
    1e46:	a4 17       	cp	r26, r20
    1e48:	10 f0       	brcs	.+4      	; 0x1e4e <__utoa_common+0x14>
    1e4a:	a4 1b       	sub	r26, r20
    1e4c:	83 95       	inc	r24
    1e4e:	50 51       	subi	r21, 0x10	; 16
    1e50:	b9 f7       	brne	.-18     	; 0x1e40 <__utoa_common+0x6>
    1e52:	a0 5d       	subi	r26, 0xD0	; 208
    1e54:	aa 33       	cpi	r26, 0x3A	; 58
    1e56:	08 f0       	brcs	.+2      	; 0x1e5a <__utoa_common+0x20>
    1e58:	a9 5d       	subi	r26, 0xD9	; 217
    1e5a:	a1 93       	st	Z+, r26
    1e5c:	00 97       	sbiw	r24, 0x00	; 0
    1e5e:	79 f7       	brne	.-34     	; 0x1e3e <__utoa_common+0x4>
    1e60:	b1 11       	cpse	r27, r1
    1e62:	b1 93       	st	Z+, r27
    1e64:	11 92       	st	Z+, r1
    1e66:	cb 01       	movw	r24, r22
    1e68:	33 c2       	rjmp	.+1126   	; 0x22d0 <strrev>

00001e6a <sprintf>:
    1e6a:	0f 93       	push	r16
    1e6c:	1f 93       	push	r17
    1e6e:	cf 93       	push	r28
    1e70:	df 93       	push	r29
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62
    1e76:	2e 97       	sbiw	r28, 0x0e	; 14
    1e78:	0f b6       	in	r0, 0x3f	; 63
    1e7a:	f8 94       	cli
    1e7c:	de bf       	out	0x3e, r29	; 62
    1e7e:	0f be       	out	0x3f, r0	; 63
    1e80:	cd bf       	out	0x3d, r28	; 61
    1e82:	0e 89       	ldd	r16, Y+22	; 0x16
    1e84:	1f 89       	ldd	r17, Y+23	; 0x17
    1e86:	86 e0       	ldi	r24, 0x06	; 6
    1e88:	8c 83       	std	Y+4, r24	; 0x04
    1e8a:	1a 83       	std	Y+2, r17	; 0x02
    1e8c:	09 83       	std	Y+1, r16	; 0x01
    1e8e:	8f ef       	ldi	r24, 0xFF	; 255
    1e90:	9f e7       	ldi	r25, 0x7F	; 127
    1e92:	9e 83       	std	Y+6, r25	; 0x06
    1e94:	8d 83       	std	Y+5, r24	; 0x05
    1e96:	ae 01       	movw	r20, r28
    1e98:	46 5e       	subi	r20, 0xE6	; 230
    1e9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e9c:	68 8d       	ldd	r22, Y+24	; 0x18
    1e9e:	79 8d       	ldd	r23, Y+25	; 0x19
    1ea0:	ce 01       	movw	r24, r28
    1ea2:	01 96       	adiw	r24, 0x01	; 1
    1ea4:	11 d0       	rcall	.+34     	; 0x1ec8 <vfprintf>
    1ea6:	2f 81       	ldd	r18, Y+7	; 0x07
    1ea8:	38 85       	ldd	r19, Y+8	; 0x08
    1eaa:	f8 01       	movw	r30, r16
    1eac:	e2 0f       	add	r30, r18
    1eae:	f3 1f       	adc	r31, r19
    1eb0:	10 82       	st	Z, r1
    1eb2:	2e 96       	adiw	r28, 0x0e	; 14
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	f8 94       	cli
    1eb8:	de bf       	out	0x3e, r29	; 62
    1eba:	0f be       	out	0x3f, r0	; 63
    1ebc:	cd bf       	out	0x3d, r28	; 61
    1ebe:	df 91       	pop	r29
    1ec0:	cf 91       	pop	r28
    1ec2:	1f 91       	pop	r17
    1ec4:	0f 91       	pop	r16
    1ec6:	08 95       	ret

00001ec8 <vfprintf>:
    1ec8:	2f 92       	push	r2
    1eca:	3f 92       	push	r3
    1ecc:	4f 92       	push	r4
    1ece:	5f 92       	push	r5
    1ed0:	6f 92       	push	r6
    1ed2:	7f 92       	push	r7
    1ed4:	8f 92       	push	r8
    1ed6:	9f 92       	push	r9
    1ed8:	af 92       	push	r10
    1eda:	bf 92       	push	r11
    1edc:	cf 92       	push	r12
    1ede:	df 92       	push	r13
    1ee0:	ef 92       	push	r14
    1ee2:	ff 92       	push	r15
    1ee4:	0f 93       	push	r16
    1ee6:	1f 93       	push	r17
    1ee8:	cf 93       	push	r28
    1eea:	df 93       	push	r29
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
    1ef0:	2c 97       	sbiw	r28, 0x0c	; 12
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	f8 94       	cli
    1ef6:	de bf       	out	0x3e, r29	; 62
    1ef8:	0f be       	out	0x3f, r0	; 63
    1efa:	cd bf       	out	0x3d, r28	; 61
    1efc:	7c 01       	movw	r14, r24
    1efe:	6b 01       	movw	r12, r22
    1f00:	8a 01       	movw	r16, r20
    1f02:	fc 01       	movw	r30, r24
    1f04:	17 82       	std	Z+7, r1	; 0x07
    1f06:	16 82       	std	Z+6, r1	; 0x06
    1f08:	83 81       	ldd	r24, Z+3	; 0x03
    1f0a:	81 ff       	sbrs	r24, 1
    1f0c:	b0 c1       	rjmp	.+864    	; 0x226e <__stack+0x6f>
    1f0e:	ce 01       	movw	r24, r28
    1f10:	01 96       	adiw	r24, 0x01	; 1
    1f12:	4c 01       	movw	r8, r24
    1f14:	f7 01       	movw	r30, r14
    1f16:	93 81       	ldd	r25, Z+3	; 0x03
    1f18:	f6 01       	movw	r30, r12
    1f1a:	93 fd       	sbrc	r25, 3
    1f1c:	85 91       	lpm	r24, Z+
    1f1e:	93 ff       	sbrs	r25, 3
    1f20:	81 91       	ld	r24, Z+
    1f22:	6f 01       	movw	r12, r30
    1f24:	88 23       	and	r24, r24
    1f26:	09 f4       	brne	.+2      	; 0x1f2a <vfprintf+0x62>
    1f28:	9e c1       	rjmp	.+828    	; 0x2266 <__stack+0x67>
    1f2a:	85 32       	cpi	r24, 0x25	; 37
    1f2c:	39 f4       	brne	.+14     	; 0x1f3c <vfprintf+0x74>
    1f2e:	93 fd       	sbrc	r25, 3
    1f30:	85 91       	lpm	r24, Z+
    1f32:	93 ff       	sbrs	r25, 3
    1f34:	81 91       	ld	r24, Z+
    1f36:	6f 01       	movw	r12, r30
    1f38:	85 32       	cpi	r24, 0x25	; 37
    1f3a:	21 f4       	brne	.+8      	; 0x1f44 <vfprintf+0x7c>
    1f3c:	b7 01       	movw	r22, r14
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	d7 d1       	rcall	.+942    	; 0x22f0 <fputc>
    1f42:	e8 cf       	rjmp	.-48     	; 0x1f14 <vfprintf+0x4c>
    1f44:	51 2c       	mov	r5, r1
    1f46:	31 2c       	mov	r3, r1
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	20 32       	cpi	r18, 0x20	; 32
    1f4c:	a0 f4       	brcc	.+40     	; 0x1f76 <vfprintf+0xae>
    1f4e:	8b 32       	cpi	r24, 0x2B	; 43
    1f50:	69 f0       	breq	.+26     	; 0x1f6c <vfprintf+0xa4>
    1f52:	30 f4       	brcc	.+12     	; 0x1f60 <vfprintf+0x98>
    1f54:	80 32       	cpi	r24, 0x20	; 32
    1f56:	59 f0       	breq	.+22     	; 0x1f6e <vfprintf+0xa6>
    1f58:	83 32       	cpi	r24, 0x23	; 35
    1f5a:	69 f4       	brne	.+26     	; 0x1f76 <vfprintf+0xae>
    1f5c:	20 61       	ori	r18, 0x10	; 16
    1f5e:	2c c0       	rjmp	.+88     	; 0x1fb8 <vfprintf+0xf0>
    1f60:	8d 32       	cpi	r24, 0x2D	; 45
    1f62:	39 f0       	breq	.+14     	; 0x1f72 <vfprintf+0xaa>
    1f64:	80 33       	cpi	r24, 0x30	; 48
    1f66:	39 f4       	brne	.+14     	; 0x1f76 <vfprintf+0xae>
    1f68:	21 60       	ori	r18, 0x01	; 1
    1f6a:	26 c0       	rjmp	.+76     	; 0x1fb8 <vfprintf+0xf0>
    1f6c:	22 60       	ori	r18, 0x02	; 2
    1f6e:	24 60       	ori	r18, 0x04	; 4
    1f70:	23 c0       	rjmp	.+70     	; 0x1fb8 <vfprintf+0xf0>
    1f72:	28 60       	ori	r18, 0x08	; 8
    1f74:	21 c0       	rjmp	.+66     	; 0x1fb8 <vfprintf+0xf0>
    1f76:	27 fd       	sbrc	r18, 7
    1f78:	27 c0       	rjmp	.+78     	; 0x1fc8 <vfprintf+0x100>
    1f7a:	30 ed       	ldi	r19, 0xD0	; 208
    1f7c:	38 0f       	add	r19, r24
    1f7e:	3a 30       	cpi	r19, 0x0A	; 10
    1f80:	78 f4       	brcc	.+30     	; 0x1fa0 <vfprintf+0xd8>
    1f82:	26 ff       	sbrs	r18, 6
    1f84:	06 c0       	rjmp	.+12     	; 0x1f92 <vfprintf+0xca>
    1f86:	fa e0       	ldi	r31, 0x0A	; 10
    1f88:	5f 9e       	mul	r5, r31
    1f8a:	30 0d       	add	r19, r0
    1f8c:	11 24       	eor	r1, r1
    1f8e:	53 2e       	mov	r5, r19
    1f90:	13 c0       	rjmp	.+38     	; 0x1fb8 <vfprintf+0xf0>
    1f92:	8a e0       	ldi	r24, 0x0A	; 10
    1f94:	38 9e       	mul	r3, r24
    1f96:	30 0d       	add	r19, r0
    1f98:	11 24       	eor	r1, r1
    1f9a:	33 2e       	mov	r3, r19
    1f9c:	20 62       	ori	r18, 0x20	; 32
    1f9e:	0c c0       	rjmp	.+24     	; 0x1fb8 <vfprintf+0xf0>
    1fa0:	8e 32       	cpi	r24, 0x2E	; 46
    1fa2:	21 f4       	brne	.+8      	; 0x1fac <vfprintf+0xe4>
    1fa4:	26 fd       	sbrc	r18, 6
    1fa6:	5f c1       	rjmp	.+702    	; 0x2266 <__stack+0x67>
    1fa8:	20 64       	ori	r18, 0x40	; 64
    1faa:	06 c0       	rjmp	.+12     	; 0x1fb8 <vfprintf+0xf0>
    1fac:	8c 36       	cpi	r24, 0x6C	; 108
    1fae:	11 f4       	brne	.+4      	; 0x1fb4 <vfprintf+0xec>
    1fb0:	20 68       	ori	r18, 0x80	; 128
    1fb2:	02 c0       	rjmp	.+4      	; 0x1fb8 <vfprintf+0xf0>
    1fb4:	88 36       	cpi	r24, 0x68	; 104
    1fb6:	41 f4       	brne	.+16     	; 0x1fc8 <vfprintf+0x100>
    1fb8:	f6 01       	movw	r30, r12
    1fba:	93 fd       	sbrc	r25, 3
    1fbc:	85 91       	lpm	r24, Z+
    1fbe:	93 ff       	sbrs	r25, 3
    1fc0:	81 91       	ld	r24, Z+
    1fc2:	6f 01       	movw	r12, r30
    1fc4:	81 11       	cpse	r24, r1
    1fc6:	c1 cf       	rjmp	.-126    	; 0x1f4a <vfprintf+0x82>
    1fc8:	98 2f       	mov	r25, r24
    1fca:	9f 7d       	andi	r25, 0xDF	; 223
    1fcc:	95 54       	subi	r25, 0x45	; 69
    1fce:	93 30       	cpi	r25, 0x03	; 3
    1fd0:	28 f4       	brcc	.+10     	; 0x1fdc <vfprintf+0x114>
    1fd2:	0c 5f       	subi	r16, 0xFC	; 252
    1fd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd6:	ff e3       	ldi	r31, 0x3F	; 63
    1fd8:	f9 83       	std	Y+1, r31	; 0x01
    1fda:	0d c0       	rjmp	.+26     	; 0x1ff6 <vfprintf+0x12e>
    1fdc:	83 36       	cpi	r24, 0x63	; 99
    1fde:	31 f0       	breq	.+12     	; 0x1fec <vfprintf+0x124>
    1fe0:	83 37       	cpi	r24, 0x73	; 115
    1fe2:	71 f0       	breq	.+28     	; 0x2000 <vfprintf+0x138>
    1fe4:	83 35       	cpi	r24, 0x53	; 83
    1fe6:	09 f0       	breq	.+2      	; 0x1fea <vfprintf+0x122>
    1fe8:	57 c0       	rjmp	.+174    	; 0x2098 <vfprintf+0x1d0>
    1fea:	21 c0       	rjmp	.+66     	; 0x202e <vfprintf+0x166>
    1fec:	f8 01       	movw	r30, r16
    1fee:	80 81       	ld	r24, Z
    1ff0:	89 83       	std	Y+1, r24	; 0x01
    1ff2:	0e 5f       	subi	r16, 0xFE	; 254
    1ff4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff6:	44 24       	eor	r4, r4
    1ff8:	43 94       	inc	r4
    1ffa:	51 2c       	mov	r5, r1
    1ffc:	54 01       	movw	r10, r8
    1ffe:	14 c0       	rjmp	.+40     	; 0x2028 <vfprintf+0x160>
    2000:	38 01       	movw	r6, r16
    2002:	f2 e0       	ldi	r31, 0x02	; 2
    2004:	6f 0e       	add	r6, r31
    2006:	71 1c       	adc	r7, r1
    2008:	f8 01       	movw	r30, r16
    200a:	a0 80       	ld	r10, Z
    200c:	b1 80       	ldd	r11, Z+1	; 0x01
    200e:	26 ff       	sbrs	r18, 6
    2010:	03 c0       	rjmp	.+6      	; 0x2018 <vfprintf+0x150>
    2012:	65 2d       	mov	r22, r5
    2014:	70 e0       	ldi	r23, 0x00	; 0
    2016:	02 c0       	rjmp	.+4      	; 0x201c <vfprintf+0x154>
    2018:	6f ef       	ldi	r22, 0xFF	; 255
    201a:	7f ef       	ldi	r23, 0xFF	; 255
    201c:	c5 01       	movw	r24, r10
    201e:	2c 87       	std	Y+12, r18	; 0x0c
    2020:	4c d1       	rcall	.+664    	; 0x22ba <strnlen>
    2022:	2c 01       	movw	r4, r24
    2024:	83 01       	movw	r16, r6
    2026:	2c 85       	ldd	r18, Y+12	; 0x0c
    2028:	2f 77       	andi	r18, 0x7F	; 127
    202a:	22 2e       	mov	r2, r18
    202c:	16 c0       	rjmp	.+44     	; 0x205a <vfprintf+0x192>
    202e:	38 01       	movw	r6, r16
    2030:	f2 e0       	ldi	r31, 0x02	; 2
    2032:	6f 0e       	add	r6, r31
    2034:	71 1c       	adc	r7, r1
    2036:	f8 01       	movw	r30, r16
    2038:	a0 80       	ld	r10, Z
    203a:	b1 80       	ldd	r11, Z+1	; 0x01
    203c:	26 ff       	sbrs	r18, 6
    203e:	03 c0       	rjmp	.+6      	; 0x2046 <vfprintf+0x17e>
    2040:	65 2d       	mov	r22, r5
    2042:	70 e0       	ldi	r23, 0x00	; 0
    2044:	02 c0       	rjmp	.+4      	; 0x204a <vfprintf+0x182>
    2046:	6f ef       	ldi	r22, 0xFF	; 255
    2048:	7f ef       	ldi	r23, 0xFF	; 255
    204a:	c5 01       	movw	r24, r10
    204c:	2c 87       	std	Y+12, r18	; 0x0c
    204e:	2a d1       	rcall	.+596    	; 0x22a4 <strnlen_P>
    2050:	2c 01       	movw	r4, r24
    2052:	2c 85       	ldd	r18, Y+12	; 0x0c
    2054:	20 68       	ori	r18, 0x80	; 128
    2056:	22 2e       	mov	r2, r18
    2058:	83 01       	movw	r16, r6
    205a:	23 fc       	sbrc	r2, 3
    205c:	19 c0       	rjmp	.+50     	; 0x2090 <vfprintf+0x1c8>
    205e:	83 2d       	mov	r24, r3
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	48 16       	cp	r4, r24
    2064:	59 06       	cpc	r5, r25
    2066:	a0 f4       	brcc	.+40     	; 0x2090 <vfprintf+0x1c8>
    2068:	b7 01       	movw	r22, r14
    206a:	80 e2       	ldi	r24, 0x20	; 32
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	40 d1       	rcall	.+640    	; 0x22f0 <fputc>
    2070:	3a 94       	dec	r3
    2072:	f5 cf       	rjmp	.-22     	; 0x205e <vfprintf+0x196>
    2074:	f5 01       	movw	r30, r10
    2076:	27 fc       	sbrc	r2, 7
    2078:	85 91       	lpm	r24, Z+
    207a:	27 fe       	sbrs	r2, 7
    207c:	81 91       	ld	r24, Z+
    207e:	5f 01       	movw	r10, r30
    2080:	b7 01       	movw	r22, r14
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	35 d1       	rcall	.+618    	; 0x22f0 <fputc>
    2086:	31 10       	cpse	r3, r1
    2088:	3a 94       	dec	r3
    208a:	f1 e0       	ldi	r31, 0x01	; 1
    208c:	4f 1a       	sub	r4, r31
    208e:	51 08       	sbc	r5, r1
    2090:	41 14       	cp	r4, r1
    2092:	51 04       	cpc	r5, r1
    2094:	79 f7       	brne	.-34     	; 0x2074 <vfprintf+0x1ac>
    2096:	de c0       	rjmp	.+444    	; 0x2254 <__stack+0x55>
    2098:	84 36       	cpi	r24, 0x64	; 100
    209a:	11 f0       	breq	.+4      	; 0x20a0 <vfprintf+0x1d8>
    209c:	89 36       	cpi	r24, 0x69	; 105
    209e:	31 f5       	brne	.+76     	; 0x20ec <vfprintf+0x224>
    20a0:	f8 01       	movw	r30, r16
    20a2:	27 ff       	sbrs	r18, 7
    20a4:	07 c0       	rjmp	.+14     	; 0x20b4 <vfprintf+0x1ec>
    20a6:	60 81       	ld	r22, Z
    20a8:	71 81       	ldd	r23, Z+1	; 0x01
    20aa:	82 81       	ldd	r24, Z+2	; 0x02
    20ac:	93 81       	ldd	r25, Z+3	; 0x03
    20ae:	0c 5f       	subi	r16, 0xFC	; 252
    20b0:	1f 4f       	sbci	r17, 0xFF	; 255
    20b2:	08 c0       	rjmp	.+16     	; 0x20c4 <vfprintf+0x1fc>
    20b4:	60 81       	ld	r22, Z
    20b6:	71 81       	ldd	r23, Z+1	; 0x01
    20b8:	07 2e       	mov	r0, r23
    20ba:	00 0c       	add	r0, r0
    20bc:	88 0b       	sbc	r24, r24
    20be:	99 0b       	sbc	r25, r25
    20c0:	0e 5f       	subi	r16, 0xFE	; 254
    20c2:	1f 4f       	sbci	r17, 0xFF	; 255
    20c4:	2f 76       	andi	r18, 0x6F	; 111
    20c6:	72 2e       	mov	r7, r18
    20c8:	97 ff       	sbrs	r25, 7
    20ca:	09 c0       	rjmp	.+18     	; 0x20de <vfprintf+0x216>
    20cc:	90 95       	com	r25
    20ce:	80 95       	com	r24
    20d0:	70 95       	com	r23
    20d2:	61 95       	neg	r22
    20d4:	7f 4f       	sbci	r23, 0xFF	; 255
    20d6:	8f 4f       	sbci	r24, 0xFF	; 255
    20d8:	9f 4f       	sbci	r25, 0xFF	; 255
    20da:	20 68       	ori	r18, 0x80	; 128
    20dc:	72 2e       	mov	r7, r18
    20de:	2a e0       	ldi	r18, 0x0A	; 10
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	a4 01       	movw	r20, r8
    20e4:	3d d1       	rcall	.+634    	; 0x2360 <__ultoa_invert>
    20e6:	a8 2e       	mov	r10, r24
    20e8:	a8 18       	sub	r10, r8
    20ea:	43 c0       	rjmp	.+134    	; 0x2172 <vfprintf+0x2aa>
    20ec:	85 37       	cpi	r24, 0x75	; 117
    20ee:	29 f4       	brne	.+10     	; 0x20fa <vfprintf+0x232>
    20f0:	2f 7e       	andi	r18, 0xEF	; 239
    20f2:	b2 2e       	mov	r11, r18
    20f4:	2a e0       	ldi	r18, 0x0A	; 10
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	25 c0       	rjmp	.+74     	; 0x2144 <vfprintf+0x27c>
    20fa:	f2 2f       	mov	r31, r18
    20fc:	f9 7f       	andi	r31, 0xF9	; 249
    20fe:	bf 2e       	mov	r11, r31
    2100:	8f 36       	cpi	r24, 0x6F	; 111
    2102:	c1 f0       	breq	.+48     	; 0x2134 <vfprintf+0x26c>
    2104:	18 f4       	brcc	.+6      	; 0x210c <vfprintf+0x244>
    2106:	88 35       	cpi	r24, 0x58	; 88
    2108:	79 f0       	breq	.+30     	; 0x2128 <vfprintf+0x260>
    210a:	ad c0       	rjmp	.+346    	; 0x2266 <__stack+0x67>
    210c:	80 37       	cpi	r24, 0x70	; 112
    210e:	19 f0       	breq	.+6      	; 0x2116 <vfprintf+0x24e>
    2110:	88 37       	cpi	r24, 0x78	; 120
    2112:	21 f0       	breq	.+8      	; 0x211c <vfprintf+0x254>
    2114:	a8 c0       	rjmp	.+336    	; 0x2266 <__stack+0x67>
    2116:	2f 2f       	mov	r18, r31
    2118:	20 61       	ori	r18, 0x10	; 16
    211a:	b2 2e       	mov	r11, r18
    211c:	b4 fe       	sbrs	r11, 4
    211e:	0d c0       	rjmp	.+26     	; 0x213a <vfprintf+0x272>
    2120:	8b 2d       	mov	r24, r11
    2122:	84 60       	ori	r24, 0x04	; 4
    2124:	b8 2e       	mov	r11, r24
    2126:	09 c0       	rjmp	.+18     	; 0x213a <vfprintf+0x272>
    2128:	24 ff       	sbrs	r18, 4
    212a:	0a c0       	rjmp	.+20     	; 0x2140 <vfprintf+0x278>
    212c:	9f 2f       	mov	r25, r31
    212e:	96 60       	ori	r25, 0x06	; 6
    2130:	b9 2e       	mov	r11, r25
    2132:	06 c0       	rjmp	.+12     	; 0x2140 <vfprintf+0x278>
    2134:	28 e0       	ldi	r18, 0x08	; 8
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	05 c0       	rjmp	.+10     	; 0x2144 <vfprintf+0x27c>
    213a:	20 e1       	ldi	r18, 0x10	; 16
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	02 c0       	rjmp	.+4      	; 0x2144 <vfprintf+0x27c>
    2140:	20 e1       	ldi	r18, 0x10	; 16
    2142:	32 e0       	ldi	r19, 0x02	; 2
    2144:	f8 01       	movw	r30, r16
    2146:	b7 fe       	sbrs	r11, 7
    2148:	07 c0       	rjmp	.+14     	; 0x2158 <vfprintf+0x290>
    214a:	60 81       	ld	r22, Z
    214c:	71 81       	ldd	r23, Z+1	; 0x01
    214e:	82 81       	ldd	r24, Z+2	; 0x02
    2150:	93 81       	ldd	r25, Z+3	; 0x03
    2152:	0c 5f       	subi	r16, 0xFC	; 252
    2154:	1f 4f       	sbci	r17, 0xFF	; 255
    2156:	06 c0       	rjmp	.+12     	; 0x2164 <vfprintf+0x29c>
    2158:	60 81       	ld	r22, Z
    215a:	71 81       	ldd	r23, Z+1	; 0x01
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	0e 5f       	subi	r16, 0xFE	; 254
    2162:	1f 4f       	sbci	r17, 0xFF	; 255
    2164:	a4 01       	movw	r20, r8
    2166:	fc d0       	rcall	.+504    	; 0x2360 <__ultoa_invert>
    2168:	a8 2e       	mov	r10, r24
    216a:	a8 18       	sub	r10, r8
    216c:	fb 2d       	mov	r31, r11
    216e:	ff 77       	andi	r31, 0x7F	; 127
    2170:	7f 2e       	mov	r7, r31
    2172:	76 fe       	sbrs	r7, 6
    2174:	0b c0       	rjmp	.+22     	; 0x218c <vfprintf+0x2c4>
    2176:	37 2d       	mov	r19, r7
    2178:	3e 7f       	andi	r19, 0xFE	; 254
    217a:	a5 14       	cp	r10, r5
    217c:	50 f4       	brcc	.+20     	; 0x2192 <vfprintf+0x2ca>
    217e:	74 fe       	sbrs	r7, 4
    2180:	0a c0       	rjmp	.+20     	; 0x2196 <vfprintf+0x2ce>
    2182:	72 fc       	sbrc	r7, 2
    2184:	08 c0       	rjmp	.+16     	; 0x2196 <vfprintf+0x2ce>
    2186:	37 2d       	mov	r19, r7
    2188:	3e 7e       	andi	r19, 0xEE	; 238
    218a:	05 c0       	rjmp	.+10     	; 0x2196 <vfprintf+0x2ce>
    218c:	ba 2c       	mov	r11, r10
    218e:	37 2d       	mov	r19, r7
    2190:	03 c0       	rjmp	.+6      	; 0x2198 <vfprintf+0x2d0>
    2192:	ba 2c       	mov	r11, r10
    2194:	01 c0       	rjmp	.+2      	; 0x2198 <vfprintf+0x2d0>
    2196:	b5 2c       	mov	r11, r5
    2198:	34 ff       	sbrs	r19, 4
    219a:	0d c0       	rjmp	.+26     	; 0x21b6 <vfprintf+0x2ee>
    219c:	fe 01       	movw	r30, r28
    219e:	ea 0d       	add	r30, r10
    21a0:	f1 1d       	adc	r31, r1
    21a2:	80 81       	ld	r24, Z
    21a4:	80 33       	cpi	r24, 0x30	; 48
    21a6:	11 f4       	brne	.+4      	; 0x21ac <vfprintf+0x2e4>
    21a8:	39 7e       	andi	r19, 0xE9	; 233
    21aa:	09 c0       	rjmp	.+18     	; 0x21be <vfprintf+0x2f6>
    21ac:	32 ff       	sbrs	r19, 2
    21ae:	06 c0       	rjmp	.+12     	; 0x21bc <vfprintf+0x2f4>
    21b0:	b3 94       	inc	r11
    21b2:	b3 94       	inc	r11
    21b4:	04 c0       	rjmp	.+8      	; 0x21be <vfprintf+0x2f6>
    21b6:	83 2f       	mov	r24, r19
    21b8:	86 78       	andi	r24, 0x86	; 134
    21ba:	09 f0       	breq	.+2      	; 0x21be <vfprintf+0x2f6>
    21bc:	b3 94       	inc	r11
    21be:	33 fd       	sbrc	r19, 3
    21c0:	12 c0       	rjmp	.+36     	; 0x21e6 <vfprintf+0x31e>
    21c2:	30 ff       	sbrs	r19, 0
    21c4:	06 c0       	rjmp	.+12     	; 0x21d2 <vfprintf+0x30a>
    21c6:	5a 2c       	mov	r5, r10
    21c8:	b3 14       	cp	r11, r3
    21ca:	18 f4       	brcc	.+6      	; 0x21d2 <vfprintf+0x30a>
    21cc:	53 0c       	add	r5, r3
    21ce:	5b 18       	sub	r5, r11
    21d0:	b3 2c       	mov	r11, r3
    21d2:	b3 14       	cp	r11, r3
    21d4:	60 f4       	brcc	.+24     	; 0x21ee <vfprintf+0x326>
    21d6:	b7 01       	movw	r22, r14
    21d8:	80 e2       	ldi	r24, 0x20	; 32
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	3c 87       	std	Y+12, r19	; 0x0c
    21de:	88 d0       	rcall	.+272    	; 0x22f0 <fputc>
    21e0:	b3 94       	inc	r11
    21e2:	3c 85       	ldd	r19, Y+12	; 0x0c
    21e4:	f6 cf       	rjmp	.-20     	; 0x21d2 <vfprintf+0x30a>
    21e6:	b3 14       	cp	r11, r3
    21e8:	10 f4       	brcc	.+4      	; 0x21ee <vfprintf+0x326>
    21ea:	3b 18       	sub	r3, r11
    21ec:	01 c0       	rjmp	.+2      	; 0x21f0 <vfprintf+0x328>
    21ee:	31 2c       	mov	r3, r1
    21f0:	34 ff       	sbrs	r19, 4
    21f2:	11 c0       	rjmp	.+34     	; 0x2216 <__stack+0x17>
    21f4:	b7 01       	movw	r22, r14
    21f6:	80 e3       	ldi	r24, 0x30	; 48
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	3c 87       	std	Y+12, r19	; 0x0c
    21fc:	79 d0       	rcall	.+242    	; 0x22f0 <fputc>
    21fe:	3c 85       	ldd	r19, Y+12	; 0x0c
    2200:	32 ff       	sbrs	r19, 2
    2202:	16 c0       	rjmp	.+44     	; 0x2230 <__stack+0x31>
    2204:	31 fd       	sbrc	r19, 1
    2206:	03 c0       	rjmp	.+6      	; 0x220e <__stack+0xf>
    2208:	88 e7       	ldi	r24, 0x78	; 120
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	02 c0       	rjmp	.+4      	; 0x2212 <__stack+0x13>
    220e:	88 e5       	ldi	r24, 0x58	; 88
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	b7 01       	movw	r22, r14
    2214:	0c c0       	rjmp	.+24     	; 0x222e <__stack+0x2f>
    2216:	83 2f       	mov	r24, r19
    2218:	86 78       	andi	r24, 0x86	; 134
    221a:	51 f0       	breq	.+20     	; 0x2230 <__stack+0x31>
    221c:	31 ff       	sbrs	r19, 1
    221e:	02 c0       	rjmp	.+4      	; 0x2224 <__stack+0x25>
    2220:	8b e2       	ldi	r24, 0x2B	; 43
    2222:	01 c0       	rjmp	.+2      	; 0x2226 <__stack+0x27>
    2224:	80 e2       	ldi	r24, 0x20	; 32
    2226:	37 fd       	sbrc	r19, 7
    2228:	8d e2       	ldi	r24, 0x2D	; 45
    222a:	b7 01       	movw	r22, r14
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	60 d0       	rcall	.+192    	; 0x22f0 <fputc>
    2230:	a5 14       	cp	r10, r5
    2232:	30 f4       	brcc	.+12     	; 0x2240 <__stack+0x41>
    2234:	b7 01       	movw	r22, r14
    2236:	80 e3       	ldi	r24, 0x30	; 48
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	5a d0       	rcall	.+180    	; 0x22f0 <fputc>
    223c:	5a 94       	dec	r5
    223e:	f8 cf       	rjmp	.-16     	; 0x2230 <__stack+0x31>
    2240:	aa 94       	dec	r10
    2242:	f4 01       	movw	r30, r8
    2244:	ea 0d       	add	r30, r10
    2246:	f1 1d       	adc	r31, r1
    2248:	80 81       	ld	r24, Z
    224a:	b7 01       	movw	r22, r14
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	50 d0       	rcall	.+160    	; 0x22f0 <fputc>
    2250:	a1 10       	cpse	r10, r1
    2252:	f6 cf       	rjmp	.-20     	; 0x2240 <__stack+0x41>
    2254:	33 20       	and	r3, r3
    2256:	09 f4       	brne	.+2      	; 0x225a <__stack+0x5b>
    2258:	5d ce       	rjmp	.-838    	; 0x1f14 <vfprintf+0x4c>
    225a:	b7 01       	movw	r22, r14
    225c:	80 e2       	ldi	r24, 0x20	; 32
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	47 d0       	rcall	.+142    	; 0x22f0 <fputc>
    2262:	3a 94       	dec	r3
    2264:	f7 cf       	rjmp	.-18     	; 0x2254 <__stack+0x55>
    2266:	f7 01       	movw	r30, r14
    2268:	86 81       	ldd	r24, Z+6	; 0x06
    226a:	97 81       	ldd	r25, Z+7	; 0x07
    226c:	02 c0       	rjmp	.+4      	; 0x2272 <__stack+0x73>
    226e:	8f ef       	ldi	r24, 0xFF	; 255
    2270:	9f ef       	ldi	r25, 0xFF	; 255
    2272:	2c 96       	adiw	r28, 0x0c	; 12
    2274:	0f b6       	in	r0, 0x3f	; 63
    2276:	f8 94       	cli
    2278:	de bf       	out	0x3e, r29	; 62
    227a:	0f be       	out	0x3f, r0	; 63
    227c:	cd bf       	out	0x3d, r28	; 61
    227e:	df 91       	pop	r29
    2280:	cf 91       	pop	r28
    2282:	1f 91       	pop	r17
    2284:	0f 91       	pop	r16
    2286:	ff 90       	pop	r15
    2288:	ef 90       	pop	r14
    228a:	df 90       	pop	r13
    228c:	cf 90       	pop	r12
    228e:	bf 90       	pop	r11
    2290:	af 90       	pop	r10
    2292:	9f 90       	pop	r9
    2294:	8f 90       	pop	r8
    2296:	7f 90       	pop	r7
    2298:	6f 90       	pop	r6
    229a:	5f 90       	pop	r5
    229c:	4f 90       	pop	r4
    229e:	3f 90       	pop	r3
    22a0:	2f 90       	pop	r2
    22a2:	08 95       	ret

000022a4 <strnlen_P>:
    22a4:	fc 01       	movw	r30, r24
    22a6:	05 90       	lpm	r0, Z+
    22a8:	61 50       	subi	r22, 0x01	; 1
    22aa:	70 40       	sbci	r23, 0x00	; 0
    22ac:	01 10       	cpse	r0, r1
    22ae:	d8 f7       	brcc	.-10     	; 0x22a6 <strnlen_P+0x2>
    22b0:	80 95       	com	r24
    22b2:	90 95       	com	r25
    22b4:	8e 0f       	add	r24, r30
    22b6:	9f 1f       	adc	r25, r31
    22b8:	08 95       	ret

000022ba <strnlen>:
    22ba:	fc 01       	movw	r30, r24
    22bc:	61 50       	subi	r22, 0x01	; 1
    22be:	70 40       	sbci	r23, 0x00	; 0
    22c0:	01 90       	ld	r0, Z+
    22c2:	01 10       	cpse	r0, r1
    22c4:	d8 f7       	brcc	.-10     	; 0x22bc <strnlen+0x2>
    22c6:	80 95       	com	r24
    22c8:	90 95       	com	r25
    22ca:	8e 0f       	add	r24, r30
    22cc:	9f 1f       	adc	r25, r31
    22ce:	08 95       	ret

000022d0 <strrev>:
    22d0:	dc 01       	movw	r26, r24
    22d2:	fc 01       	movw	r30, r24
    22d4:	67 2f       	mov	r22, r23
    22d6:	71 91       	ld	r23, Z+
    22d8:	77 23       	and	r23, r23
    22da:	e1 f7       	brne	.-8      	; 0x22d4 <strrev+0x4>
    22dc:	32 97       	sbiw	r30, 0x02	; 2
    22de:	04 c0       	rjmp	.+8      	; 0x22e8 <strrev+0x18>
    22e0:	7c 91       	ld	r23, X
    22e2:	6d 93       	st	X+, r22
    22e4:	70 83       	st	Z, r23
    22e6:	62 91       	ld	r22, -Z
    22e8:	ae 17       	cp	r26, r30
    22ea:	bf 07       	cpc	r27, r31
    22ec:	c8 f3       	brcs	.-14     	; 0x22e0 <strrev+0x10>
    22ee:	08 95       	ret

000022f0 <fputc>:
    22f0:	0f 93       	push	r16
    22f2:	1f 93       	push	r17
    22f4:	cf 93       	push	r28
    22f6:	df 93       	push	r29
    22f8:	fb 01       	movw	r30, r22
    22fa:	23 81       	ldd	r18, Z+3	; 0x03
    22fc:	21 fd       	sbrc	r18, 1
    22fe:	03 c0       	rjmp	.+6      	; 0x2306 <fputc+0x16>
    2300:	8f ef       	ldi	r24, 0xFF	; 255
    2302:	9f ef       	ldi	r25, 0xFF	; 255
    2304:	28 c0       	rjmp	.+80     	; 0x2356 <fputc+0x66>
    2306:	22 ff       	sbrs	r18, 2
    2308:	16 c0       	rjmp	.+44     	; 0x2336 <fputc+0x46>
    230a:	46 81       	ldd	r20, Z+6	; 0x06
    230c:	57 81       	ldd	r21, Z+7	; 0x07
    230e:	24 81       	ldd	r18, Z+4	; 0x04
    2310:	35 81       	ldd	r19, Z+5	; 0x05
    2312:	42 17       	cp	r20, r18
    2314:	53 07       	cpc	r21, r19
    2316:	44 f4       	brge	.+16     	; 0x2328 <fputc+0x38>
    2318:	a0 81       	ld	r26, Z
    231a:	b1 81       	ldd	r27, Z+1	; 0x01
    231c:	9d 01       	movw	r18, r26
    231e:	2f 5f       	subi	r18, 0xFF	; 255
    2320:	3f 4f       	sbci	r19, 0xFF	; 255
    2322:	31 83       	std	Z+1, r19	; 0x01
    2324:	20 83       	st	Z, r18
    2326:	8c 93       	st	X, r24
    2328:	26 81       	ldd	r18, Z+6	; 0x06
    232a:	37 81       	ldd	r19, Z+7	; 0x07
    232c:	2f 5f       	subi	r18, 0xFF	; 255
    232e:	3f 4f       	sbci	r19, 0xFF	; 255
    2330:	37 83       	std	Z+7, r19	; 0x07
    2332:	26 83       	std	Z+6, r18	; 0x06
    2334:	10 c0       	rjmp	.+32     	; 0x2356 <fputc+0x66>
    2336:	eb 01       	movw	r28, r22
    2338:	09 2f       	mov	r16, r25
    233a:	18 2f       	mov	r17, r24
    233c:	00 84       	ldd	r0, Z+8	; 0x08
    233e:	f1 85       	ldd	r31, Z+9	; 0x09
    2340:	e0 2d       	mov	r30, r0
    2342:	19 95       	eicall
    2344:	89 2b       	or	r24, r25
    2346:	e1 f6       	brne	.-72     	; 0x2300 <fputc+0x10>
    2348:	8e 81       	ldd	r24, Y+6	; 0x06
    234a:	9f 81       	ldd	r25, Y+7	; 0x07
    234c:	01 96       	adiw	r24, 0x01	; 1
    234e:	9f 83       	std	Y+7, r25	; 0x07
    2350:	8e 83       	std	Y+6, r24	; 0x06
    2352:	81 2f       	mov	r24, r17
    2354:	90 2f       	mov	r25, r16
    2356:	df 91       	pop	r29
    2358:	cf 91       	pop	r28
    235a:	1f 91       	pop	r17
    235c:	0f 91       	pop	r16
    235e:	08 95       	ret

00002360 <__ultoa_invert>:
    2360:	fa 01       	movw	r30, r20
    2362:	aa 27       	eor	r26, r26
    2364:	28 30       	cpi	r18, 0x08	; 8
    2366:	51 f1       	breq	.+84     	; 0x23bc <__ultoa_invert+0x5c>
    2368:	20 31       	cpi	r18, 0x10	; 16
    236a:	81 f1       	breq	.+96     	; 0x23cc <__ultoa_invert+0x6c>
    236c:	e8 94       	clt
    236e:	6f 93       	push	r22
    2370:	6e 7f       	andi	r22, 0xFE	; 254
    2372:	6e 5f       	subi	r22, 0xFE	; 254
    2374:	7f 4f       	sbci	r23, 0xFF	; 255
    2376:	8f 4f       	sbci	r24, 0xFF	; 255
    2378:	9f 4f       	sbci	r25, 0xFF	; 255
    237a:	af 4f       	sbci	r26, 0xFF	; 255
    237c:	b1 e0       	ldi	r27, 0x01	; 1
    237e:	3e d0       	rcall	.+124    	; 0x23fc <__ultoa_invert+0x9c>
    2380:	b4 e0       	ldi	r27, 0x04	; 4
    2382:	3c d0       	rcall	.+120    	; 0x23fc <__ultoa_invert+0x9c>
    2384:	67 0f       	add	r22, r23
    2386:	78 1f       	adc	r23, r24
    2388:	89 1f       	adc	r24, r25
    238a:	9a 1f       	adc	r25, r26
    238c:	a1 1d       	adc	r26, r1
    238e:	68 0f       	add	r22, r24
    2390:	79 1f       	adc	r23, r25
    2392:	8a 1f       	adc	r24, r26
    2394:	91 1d       	adc	r25, r1
    2396:	a1 1d       	adc	r26, r1
    2398:	6a 0f       	add	r22, r26
    239a:	71 1d       	adc	r23, r1
    239c:	81 1d       	adc	r24, r1
    239e:	91 1d       	adc	r25, r1
    23a0:	a1 1d       	adc	r26, r1
    23a2:	20 d0       	rcall	.+64     	; 0x23e4 <__ultoa_invert+0x84>
    23a4:	09 f4       	brne	.+2      	; 0x23a8 <__ultoa_invert+0x48>
    23a6:	68 94       	set
    23a8:	3f 91       	pop	r19
    23aa:	2a e0       	ldi	r18, 0x0A	; 10
    23ac:	26 9f       	mul	r18, r22
    23ae:	11 24       	eor	r1, r1
    23b0:	30 19       	sub	r19, r0
    23b2:	30 5d       	subi	r19, 0xD0	; 208
    23b4:	31 93       	st	Z+, r19
    23b6:	de f6       	brtc	.-74     	; 0x236e <__ultoa_invert+0xe>
    23b8:	cf 01       	movw	r24, r30
    23ba:	08 95       	ret
    23bc:	46 2f       	mov	r20, r22
    23be:	47 70       	andi	r20, 0x07	; 7
    23c0:	40 5d       	subi	r20, 0xD0	; 208
    23c2:	41 93       	st	Z+, r20
    23c4:	b3 e0       	ldi	r27, 0x03	; 3
    23c6:	0f d0       	rcall	.+30     	; 0x23e6 <__ultoa_invert+0x86>
    23c8:	c9 f7       	brne	.-14     	; 0x23bc <__ultoa_invert+0x5c>
    23ca:	f6 cf       	rjmp	.-20     	; 0x23b8 <__ultoa_invert+0x58>
    23cc:	46 2f       	mov	r20, r22
    23ce:	4f 70       	andi	r20, 0x0F	; 15
    23d0:	40 5d       	subi	r20, 0xD0	; 208
    23d2:	4a 33       	cpi	r20, 0x3A	; 58
    23d4:	18 f0       	brcs	.+6      	; 0x23dc <__ultoa_invert+0x7c>
    23d6:	49 5d       	subi	r20, 0xD9	; 217
    23d8:	31 fd       	sbrc	r19, 1
    23da:	40 52       	subi	r20, 0x20	; 32
    23dc:	41 93       	st	Z+, r20
    23de:	02 d0       	rcall	.+4      	; 0x23e4 <__ultoa_invert+0x84>
    23e0:	a9 f7       	brne	.-22     	; 0x23cc <__ultoa_invert+0x6c>
    23e2:	ea cf       	rjmp	.-44     	; 0x23b8 <__ultoa_invert+0x58>
    23e4:	b4 e0       	ldi	r27, 0x04	; 4
    23e6:	a6 95       	lsr	r26
    23e8:	97 95       	ror	r25
    23ea:	87 95       	ror	r24
    23ec:	77 95       	ror	r23
    23ee:	67 95       	ror	r22
    23f0:	ba 95       	dec	r27
    23f2:	c9 f7       	brne	.-14     	; 0x23e6 <__ultoa_invert+0x86>
    23f4:	00 97       	sbiw	r24, 0x00	; 0
    23f6:	61 05       	cpc	r22, r1
    23f8:	71 05       	cpc	r23, r1
    23fa:	08 95       	ret
    23fc:	9b 01       	movw	r18, r22
    23fe:	ac 01       	movw	r20, r24
    2400:	0a 2e       	mov	r0, r26
    2402:	06 94       	lsr	r0
    2404:	57 95       	ror	r21
    2406:	47 95       	ror	r20
    2408:	37 95       	ror	r19
    240a:	27 95       	ror	r18
    240c:	ba 95       	dec	r27
    240e:	c9 f7       	brne	.-14     	; 0x2402 <__ultoa_invert+0xa2>
    2410:	62 0f       	add	r22, r18
    2412:	73 1f       	adc	r23, r19
    2414:	84 1f       	adc	r24, r20
    2416:	95 1f       	adc	r25, r21
    2418:	a0 1d       	adc	r26, r0
    241a:	08 95       	ret

0000241c <_exit>:
    241c:	f8 94       	cli

0000241e <__stop_program>:
    241e:	ff cf       	rjmp	.-2      	; 0x241e <__stop_program>
