
roomba.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  0000221a  000022ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000221a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001315  00800210  00800210  000022be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000022be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000420  00000000  00000000  00002330  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005437  00000000  00000000  00002750  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001384  00000000  00000000  00007b87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002763  00000000  00000000  00008f0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ab4  00000000  00000000  0000b670  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001245  00000000  00000000  0000c124  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002a9a  00000000  00000000  0000d369  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000438  00000000  00000000  0000fe03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c0       	rjmp	.+252    	; 0xfe <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 f1 0d 	jmp	0x1be2	; 0x1be2 <__vector_1>
       8:	9b c0       	rjmp	.+310    	; 0x140 <__bad_interrupt>
       a:	00 00       	nop
       c:	99 c0       	rjmp	.+306    	; 0x140 <__bad_interrupt>
       e:	00 00       	nop
      10:	97 c0       	rjmp	.+302    	; 0x140 <__bad_interrupt>
      12:	00 00       	nop
      14:	95 c0       	rjmp	.+298    	; 0x140 <__bad_interrupt>
      16:	00 00       	nop
      18:	93 c0       	rjmp	.+294    	; 0x140 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	91 c0       	rjmp	.+290    	; 0x140 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8f c0       	rjmp	.+286    	; 0x140 <__bad_interrupt>
      22:	00 00       	nop
      24:	8d c0       	rjmp	.+282    	; 0x140 <__bad_interrupt>
      26:	00 00       	nop
      28:	8b c0       	rjmp	.+278    	; 0x140 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	89 c0       	rjmp	.+274    	; 0x140 <__bad_interrupt>
      2e:	00 00       	nop
      30:	87 c0       	rjmp	.+270    	; 0x140 <__bad_interrupt>
      32:	00 00       	nop
      34:	85 c0       	rjmp	.+266    	; 0x140 <__bad_interrupt>
      36:	00 00       	nop
      38:	83 c0       	rjmp	.+262    	; 0x140 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	81 c0       	rjmp	.+258    	; 0x140 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7f c0       	rjmp	.+254    	; 0x140 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <__vector_17>
      48:	7b c0       	rjmp	.+246    	; 0x140 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	79 c0       	rjmp	.+242    	; 0x140 <__bad_interrupt>
      4e:	00 00       	nop
      50:	77 c0       	rjmp	.+238    	; 0x140 <__bad_interrupt>
      52:	00 00       	nop
      54:	75 c0       	rjmp	.+234    	; 0x140 <__bad_interrupt>
      56:	00 00       	nop
      58:	73 c0       	rjmp	.+230    	; 0x140 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	71 c0       	rjmp	.+226    	; 0x140 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6f c0       	rjmp	.+222    	; 0x140 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 58 0f 	jmp	0x1eb0	; 0x1eb0 <__vector_25>
      68:	6b c0       	rjmp	.+214    	; 0x140 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	69 c0       	rjmp	.+210    	; 0x140 <__bad_interrupt>
      6e:	00 00       	nop
      70:	67 c0       	rjmp	.+206    	; 0x140 <__bad_interrupt>
      72:	00 00       	nop
      74:	65 c0       	rjmp	.+202    	; 0x140 <__bad_interrupt>
      76:	00 00       	nop
      78:	63 c0       	rjmp	.+198    	; 0x140 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	61 c0       	rjmp	.+194    	; 0x140 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 79 0b 	jmp	0x16f2	; 0x16f2 <__vector_32>
      84:	5d c0       	rjmp	.+186    	; 0x140 <__bad_interrupt>
      86:	00 00       	nop
      88:	5b c0       	rjmp	.+182    	; 0x140 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	59 c0       	rjmp	.+178    	; 0x140 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 89 0f 	jmp	0x1f12	; 0x1f12 <__vector_36>
      94:	55 c0       	rjmp	.+170    	; 0x140 <__bad_interrupt>
      96:	00 00       	nop
      98:	53 c0       	rjmp	.+166    	; 0x140 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	51 c0       	rjmp	.+162    	; 0x140 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4f c0       	rjmp	.+158    	; 0x140 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4d c0       	rjmp	.+154    	; 0x140 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4b c0       	rjmp	.+150    	; 0x140 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	49 c0       	rjmp	.+146    	; 0x140 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	47 c0       	rjmp	.+142    	; 0x140 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	45 c0       	rjmp	.+138    	; 0x140 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	43 c0       	rjmp	.+134    	; 0x140 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	41 c0       	rjmp	.+130    	; 0x140 <__bad_interrupt>
      be:	00 00       	nop
      c0:	3f c0       	rjmp	.+126    	; 0x140 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3d c0       	rjmp	.+122    	; 0x140 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3b c0       	rjmp	.+118    	; 0x140 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	39 c0       	rjmp	.+114    	; 0x140 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	37 c0       	rjmp	.+110    	; 0x140 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	35 c0       	rjmp	.+106    	; 0x140 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	33 c0       	rjmp	.+102    	; 0x140 <__bad_interrupt>
      da:	00 00       	nop
      dc:	31 c0       	rjmp	.+98     	; 0x140 <__bad_interrupt>
      de:	00 00       	nop
      e0:	2f c0       	rjmp	.+94     	; 0x140 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	9d 06       	cpc	r9, r29
      e6:	83 06       	cpc	r8, r19
      e8:	9d 06       	cpc	r9, r29
      ea:	ac 06       	cpc	r10, r28
      ec:	51 07       	cpc	r21, r17
      ee:	bb 06       	cpc	r11, r27
      f0:	74 06       	cpc	r7, r20
      f2:	a4 07       	cpc	r26, r20
      f4:	d9 07       	cpc	r29, r25
      f6:	7b 08       	sbc	r7, r11
      f8:	7d 08       	sbc	r7, r13
      fa:	b3 08       	sbc	r11, r3
      fc:	2a 09       	sbc	r18, r10

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d1 e2       	ldi	r29, 0x21	; 33
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0c bf       	out	0x3c, r16	; 60

0000010e <__do_copy_data>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a0 e0       	ldi	r26, 0x00	; 0
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	ea e1       	ldi	r30, 0x1A	; 26
     116:	f2 e2       	ldi	r31, 0x22	; 34
     118:	00 e0       	ldi	r16, 0x00	; 0
     11a:	0b bf       	out	0x3b, r16	; 59
     11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x14>
     11e:	07 90       	elpm	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	a0 31       	cpi	r26, 0x10	; 16
     124:	b1 07       	cpc	r27, r17
     126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0x10>

00000128 <__do_clear_bss>:
     128:	25 e1       	ldi	r18, 0x15	; 21
     12a:	a0 e1       	ldi	r26, 0x10	; 16
     12c:	b2 e0       	ldi	r27, 0x02	; 2
     12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
     130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
     132:	a5 32       	cpi	r26, 0x25	; 37
     134:	b2 07       	cpc	r27, r18
     136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>
     138:	0e 94 9a 0b 	call	0x1734	; 0x1734 <main>
     13c:	0c 94 0b 11 	jmp	0x2216	; 0x2216 <_exit>

00000140 <__bad_interrupt>:
     140:	5f cf       	rjmp	.-322    	; 0x0 <__vectors>

00000142 <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
     142:	0f 92       	push	r0
     144:	1f 92       	push	r1
     146:	2f 92       	push	r2
     148:	3f 92       	push	r3
     14a:	4f 92       	push	r4
     14c:	5f 92       	push	r5
     14e:	6f 92       	push	r6
     150:	7f 92       	push	r7
     152:	8f 92       	push	r8
     154:	9f 92       	push	r9
     156:	af 92       	push	r10
     158:	bf 92       	push	r11
     15a:	cf 92       	push	r12
     15c:	df 92       	push	r13
     15e:	ef 92       	push	r14
     160:	ff 92       	push	r15
     162:	0f 93       	push	r16
     164:	1f 93       	push	r17
     166:	2f 93       	push	r18
     168:	3f 93       	push	r19
     16a:	4f 93       	push	r20
     16c:	5f 93       	push	r21
     16e:	6f 93       	push	r22
     170:	7f 93       	push	r23
     172:	8f 93       	push	r24
     174:	9f 93       	push	r25
     176:	af 93       	push	r26
     178:	bf 93       	push	r27
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	ef 93       	push	r30
     180:	ff 93       	push	r31
     182:	0f b7       	in	r16, 0x3f	; 63
     184:	0f 93       	push	r16
     186:	fc b7       	in	r31, 0x3c	; 60
     188:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
     18a:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     18c:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
     18e:	e0 93 22 15 	sts	0x1522, r30
        sts  KernelSp+1, r31
     192:	f0 93 23 15 	sts	0x1523, r31
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
     196:	e0 91 00 15 	lds	r30, 0x1500
        lds  r31, CurrentSp+1
     19a:	f0 91 01 15 	lds	r31, 0x1501
        out  SPL, r30
     19e:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     1a0:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
     1a2:	ff 91       	pop	r31
     1a4:	fc bf       	out	0x3c, r31	; 60
     1a6:	0f 91       	pop	r16
     1a8:	0f bf       	out	0x3f, r16	; 63
     1aa:	ff 91       	pop	r31
     1ac:	ef 91       	pop	r30
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	bf 91       	pop	r27
     1b4:	af 91       	pop	r26
     1b6:	9f 91       	pop	r25
     1b8:	8f 91       	pop	r24
     1ba:	7f 91       	pop	r23
     1bc:	6f 91       	pop	r22
     1be:	5f 91       	pop	r21
     1c0:	4f 91       	pop	r20
     1c2:	3f 91       	pop	r19
     1c4:	2f 91       	pop	r18
     1c6:	1f 91       	pop	r17
     1c8:	0f 91       	pop	r16
     1ca:	ff 90       	pop	r15
     1cc:	ef 90       	pop	r14
     1ce:	df 90       	pop	r13
     1d0:	cf 90       	pop	r12
     1d2:	bf 90       	pop	r11
     1d4:	af 90       	pop	r10
     1d6:	9f 90       	pop	r9
     1d8:	8f 90       	pop	r8
     1da:	7f 90       	pop	r7
     1dc:	6f 90       	pop	r6
     1de:	5f 90       	pop	r5
     1e0:	4f 90       	pop	r4
     1e2:	3f 90       	pop	r3
     1e4:	2f 90       	pop	r2
     1e6:	1f 90       	pop	r1
     1e8:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
     1ea:	18 95       	reti

000001ec <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
     1ec:	0f 92       	push	r0
     1ee:	1f 92       	push	r1
     1f0:	2f 92       	push	r2
     1f2:	3f 92       	push	r3
     1f4:	4f 92       	push	r4
     1f6:	5f 92       	push	r5
     1f8:	6f 92       	push	r6
     1fa:	7f 92       	push	r7
     1fc:	8f 92       	push	r8
     1fe:	9f 92       	push	r9
     200:	af 92       	push	r10
     202:	bf 92       	push	r11
     204:	cf 92       	push	r12
     206:	df 92       	push	r13
     208:	ef 92       	push	r14
     20a:	ff 92       	push	r15
     20c:	0f 93       	push	r16
     20e:	1f 93       	push	r17
     210:	2f 93       	push	r18
     212:	3f 93       	push	r19
     214:	4f 93       	push	r20
     216:	5f 93       	push	r21
     218:	6f 93       	push	r22
     21a:	7f 93       	push	r23
     21c:	8f 93       	push	r24
     21e:	9f 93       	push	r25
     220:	af 93       	push	r26
     222:	bf 93       	push	r27
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	ef 93       	push	r30
     22a:	ff 93       	push	r31
     22c:	0f b7       	in	r16, 0x3f	; 63
     22e:	0f 93       	push	r16
     230:	fc b7       	in	r31, 0x3c	; 60
     232:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
     234:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     236:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
     238:	e0 93 00 15 	sts	0x1500, r30
        sts  CurrentSp+1, r31
     23c:	f0 93 01 15 	sts	0x1501, r31
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
     240:	e0 91 22 15 	lds	r30, 0x1522
        lds  r31, KernelSp+1
     244:	f0 91 23 15 	lds	r31, 0x1523
        out  SPL, r30
     248:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     24a:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
     24c:	ff 91       	pop	r31
     24e:	fc bf       	out	0x3c, r31	; 60
     250:	0f 91       	pop	r16
     252:	0f bf       	out	0x3f, r16	; 63
     254:	ff 91       	pop	r31
     256:	ef 91       	pop	r30
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	bf 91       	pop	r27
     25e:	af 91       	pop	r26
     260:	9f 91       	pop	r25
     262:	8f 91       	pop	r24
     264:	7f 91       	pop	r23
     266:	6f 91       	pop	r22
     268:	5f 91       	pop	r21
     26a:	4f 91       	pop	r20
     26c:	3f 91       	pop	r19
     26e:	2f 91       	pop	r18
     270:	1f 91       	pop	r17
     272:	0f 91       	pop	r16
     274:	ff 90       	pop	r15
     276:	ef 90       	pop	r14
     278:	df 90       	pop	r13
     27a:	cf 90       	pop	r12
     27c:	bf 90       	pop	r11
     27e:	af 90       	pop	r10
     280:	9f 90       	pop	r9
     282:	8f 90       	pop	r8
     284:	7f 90       	pop	r7
     286:	6f 90       	pop	r6
     288:	5f 90       	pop	r5
     28a:	4f 90       	pop	r4
     28c:	3f 90       	pop	r3
     28e:	2f 90       	pop	r2
     290:	1f 90       	pop	r1
     292:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
     294:	08 95       	ret

00000296 <adc_init>:

// initialize adc
void adc_init()
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
     296:	80 e4       	ldi	r24, 0x40	; 64
     298:	80 93 7c 00 	sts	0x007C, r24
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     29c:	87 e8       	ldi	r24, 0x87	; 135
     29e:	80 93 7a 00 	sts	0x007A, r24
     2a2:	08 95       	ret

000002a4 <adc_read>:
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     2a4:	ec e7       	ldi	r30, 0x7C	; 124
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	90 81       	ld	r25, Z
uint16_t adc_read(uint8_t ch)
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
     2aa:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     2ac:	98 7f       	andi	r25, 0xF8	; 248
     2ae:	89 2b       	or	r24, r25
     2b0:	80 83       	st	Z, r24
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
     2b2:	ea e7       	ldi	r30, 0x7A	; 122
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	80 81       	ld	r24, Z
     2b8:	80 64       	ori	r24, 0x40	; 64
     2ba:	80 83       	st	Z, r24
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
     2bc:	80 81       	ld	r24, Z
     2be:	86 fd       	sbrc	r24, 6
     2c0:	fd cf       	rjmp	.-6      	; 0x2bc <adc_read+0x18>
	
	return (ADC);
     2c2:	80 91 78 00 	lds	r24, 0x0078
     2c6:	90 91 79 00 	lds	r25, 0x0079
}
     2ca:	08 95       	ret

000002cc <radio_rxhandler>:
	return 0;
}

void radio_rxhandler(uint8_t pipenumber)
{
	rxflag = 1;
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	80 93 10 02 	sts	0x0210, r24
	PORTL ^= _BV(PL7);
     2d2:	eb e0       	ldi	r30, 0x0B	; 11
     2d4:	f1 e0       	ldi	r31, 0x01	; 1
     2d6:	80 81       	ld	r24, Z
     2d8:	80 58       	subi	r24, 0x80	; 128
     2da:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2dc:	83 ed       	ldi	r24, 0xD3	; 211
     2de:	90 e3       	ldi	r25, 0x30	; 48
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <radio_rxhandler+0x14>
     2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <radio_rxhandler+0x1a>
     2e6:	00 00       	nop
	_delay_ms(50);
	PORTL ^= _BV(PL7);
     2e8:	80 81       	ld	r24, Z
     2ea:	80 58       	subi	r24, 0x80	; 128
     2ec:	80 83       	st	Z, r24
     2ee:	08 95       	ret

000002f0 <init_LED_PORTL_pin0>:
void init_LED_PORTL_pin6(void) {
    DDRL |= _BV(DDL6);
}

void init_LED_PORTL_pin7(void) {
    DDRL |= _BV(DDL7);
     2f0:	ea e0       	ldi	r30, 0x0A	; 10
     2f2:	f1 e0       	ldi	r31, 0x01	; 1
     2f4:	80 81       	ld	r24, Z
     2f6:	81 60       	ori	r24, 0x01	; 1
     2f8:	80 83       	st	Z, r24
     2fa:	08 95       	ret

000002fc <init_LED_PORTL_pin1>:
     2fc:	ea e0       	ldi	r30, 0x0A	; 10
     2fe:	f1 e0       	ldi	r31, 0x01	; 1
     300:	80 81       	ld	r24, Z
     302:	82 60       	ori	r24, 0x02	; 2
     304:	80 83       	st	Z, r24
     306:	08 95       	ret

00000308 <init_LED_PORTL_pin2>:
     308:	ea e0       	ldi	r30, 0x0A	; 10
     30a:	f1 e0       	ldi	r31, 0x01	; 1
     30c:	80 81       	ld	r24, Z
     30e:	84 60       	ori	r24, 0x04	; 4
     310:	80 83       	st	Z, r24
     312:	08 95       	ret

00000314 <init_LED_PORTL_pin5>:
     314:	ea e0       	ldi	r30, 0x0A	; 10
     316:	f1 e0       	ldi	r31, 0x01	; 1
     318:	80 81       	ld	r24, Z
     31a:	80 62       	ori	r24, 0x20	; 32
     31c:	80 83       	st	Z, r24
     31e:	08 95       	ret

00000320 <init_LED_PORTL_pin6>:
     320:	ea e0       	ldi	r30, 0x0A	; 10
     322:	f1 e0       	ldi	r31, 0x01	; 1
     324:	80 81       	ld	r24, Z
     326:	80 64       	ori	r24, 0x40	; 64
     328:	80 83       	st	Z, r24
     32a:	08 95       	ret

0000032c <enable_LED>:
}

void enable_LED(unsigned int mask) {
    PORTL |= _BV(mask);
     32c:	eb e0       	ldi	r30, 0x0B	; 11
     32e:	f1 e0       	ldi	r31, 0x01	; 1
     330:	90 81       	ld	r25, Z
     332:	21 e0       	ldi	r18, 0x01	; 1
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	02 c0       	rjmp	.+4      	; 0x33c <enable_LED+0x10>
     338:	22 0f       	add	r18, r18
     33a:	33 1f       	adc	r19, r19
     33c:	8a 95       	dec	r24
     33e:	e2 f7       	brpl	.-8      	; 0x338 <enable_LED+0xc>
     340:	29 2b       	or	r18, r25
     342:	20 83       	st	Z, r18
     344:	08 95       	ret

00000346 <disable_LED>:
}

void disable_LED(unsigned int mask) {
    PORTL &= ~_BV(mask);
     346:	eb e0       	ldi	r30, 0x0B	; 11
     348:	f1 e0       	ldi	r31, 0x01	; 1
     34a:	90 81       	ld	r25, Z
     34c:	21 e0       	ldi	r18, 0x01	; 1
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	02 c0       	rjmp	.+4      	; 0x356 <disable_LED+0x10>
     352:	22 0f       	add	r18, r18
     354:	33 1f       	adc	r19, r19
     356:	8a 95       	dec	r24
     358:	e2 f7       	brpl	.-8      	; 0x352 <disable_LED+0xc>
     35a:	20 95       	com	r18
     35c:	29 23       	and	r18, r25
     35e:	20 83       	st	Z, r18
     360:	08 95       	ret

00000362 <Idle>:
}

void Auto_Drive() {
	//uart_putchar(CLEAN, ROOMBA_UART);
	
	Get_Roomba_Data();
     362:	ff cf       	rjmp	.-2      	; 0x362 <Idle>

00000364 <Init_Task>:
     364:	0f 93       	push	r16
     366:	1f 93       	push	r17
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	ca e0       	ldi	r28, 0x0A	; 10
     36e:	d0 e0       	ldi	r29, 0x00	; 0
     370:	00 e0       	ldi	r16, 0x00	; 0
     372:	10 e0       	ldi	r17, 0x00	; 0
     374:	87 e0       	ldi	r24, 0x07	; 7
     376:	96 df       	rcall	.-212    	; 0x2a4 <adc_read>
     378:	08 0f       	add	r16, r24
     37a:	19 1f       	adc	r17, r25
     37c:	21 97       	sbiw	r28, 0x01	; 1
     37e:	d1 f7       	brne	.-12     	; 0x374 <Init_Task+0x10>
     380:	c8 01       	movw	r24, r16
     382:	6a e0       	ldi	r22, 0x0A	; 10
     384:	70 e0       	ldi	r23, 0x00	; 0
     386:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__divmodhi4>
     38a:	07 2e       	mov	r0, r23
     38c:	00 0c       	add	r0, r0
     38e:	88 0b       	sbc	r24, r24
     390:	99 0b       	sbc	r25, r25
     392:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__floatsisf>
     396:	23 e3       	ldi	r18, 0x33	; 51
     398:	33 e3       	ldi	r19, 0x33	; 51
     39a:	43 eb       	ldi	r20, 0xB3	; 179
     39c:	5f e3       	ldi	r21, 0x3F	; 63
     39e:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__mulsf3>
     3a2:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__fixsfsi>
     3a6:	70 93 ad 14 	sts	0x14AD, r23
     3aa:	60 93 ac 14 	sts	0x14AC, r22
     3ae:	7e d1       	rcall	.+764    	; 0x6ac <Task_Terminate>
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	1f 91       	pop	r17
     3b6:	0f 91       	pop	r16
     3b8:	08 95       	ret

000003ba <Man_Drive>:
     3ba:	82 33       	cpi	r24, 0x32	; 50
     3bc:	11 f1       	breq	.+68     	; 0x402 <Man_Drive+0x48>
     3be:	28 f4       	brcc	.+10     	; 0x3ca <Man_Drive+0x10>
     3c0:	80 33       	cpi	r24, 0x30	; 48
     3c2:	41 f0       	breq	.+16     	; 0x3d4 <Man_Drive+0x1a>
     3c4:	81 33       	cpi	r24, 0x31	; 49
     3c6:	69 f0       	breq	.+26     	; 0x3e2 <Man_Drive+0x28>
     3c8:	4d c0       	rjmp	.+154    	; 0x464 <Man_Drive+0xaa>
     3ca:	83 33       	cpi	r24, 0x33	; 51
     3cc:	51 f1       	breq	.+84     	; 0x422 <Man_Drive+0x68>
     3ce:	84 33       	cpi	r24, 0x34	; 52
     3d0:	c9 f1       	breq	.+114    	; 0x444 <Man_Drive+0x8a>
     3d2:	48 c0       	rjmp	.+144    	; 0x464 <Man_Drive+0xaa>
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	90 e8       	ldi	r25, 0x80	; 128
     3d8:	90 93 01 02 	sts	0x0201, r25
     3dc:	80 93 00 02 	sts	0x0200, r24
     3e0:	41 c0       	rjmp	.+130    	; 0x464 <Man_Drive+0xaa>
     3e2:	80 91 11 02 	lds	r24, 0x0211
     3e6:	90 91 12 02 	lds	r25, 0x0212
     3ea:	89 2b       	or	r24, r25
     3ec:	19 f0       	breq	.+6      	; 0x3f4 <Man_Drive+0x3a>
     3ee:	88 e3       	ldi	r24, 0x38	; 56
     3f0:	9f ef       	ldi	r25, 0xFF	; 255
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <Man_Drive+0x3e>
     3f4:	8f ef       	ldi	r24, 0xFF	; 255
     3f6:	9f ef       	ldi	r25, 0xFF	; 255
     3f8:	90 93 01 02 	sts	0x0201, r25
     3fc:	80 93 00 02 	sts	0x0200, r24
     400:	31 c0       	rjmp	.+98     	; 0x464 <Man_Drive+0xaa>
     402:	80 91 11 02 	lds	r24, 0x0211
     406:	90 91 12 02 	lds	r25, 0x0212
     40a:	89 2b       	or	r24, r25
     40c:	19 f0       	breq	.+6      	; 0x414 <Man_Drive+0x5a>
     40e:	88 ec       	ldi	r24, 0xC8	; 200
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	02 c0       	rjmp	.+4      	; 0x418 <Man_Drive+0x5e>
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	90 93 01 02 	sts	0x0201, r25
     41c:	80 93 00 02 	sts	0x0200, r24
     420:	21 c0       	rjmp	.+66     	; 0x464 <Man_Drive+0xaa>
     422:	80 91 11 02 	lds	r24, 0x0211
     426:	90 91 12 02 	lds	r25, 0x0212
     42a:	85 36       	cpi	r24, 0x65	; 101
     42c:	91 05       	cpc	r25, r1
     42e:	1c f4       	brge	.+6      	; 0x436 <Man_Drive+0x7c>
     430:	88 e3       	ldi	r24, 0x38	; 56
     432:	9f ef       	ldi	r25, 0xFF	; 255
     434:	02 c0       	rjmp	.+4      	; 0x43a <Man_Drive+0x80>
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	90 93 12 02 	sts	0x0212, r25
     43e:	80 93 11 02 	sts	0x0211, r24
     442:	10 c0       	rjmp	.+32     	; 0x464 <Man_Drive+0xaa>
     444:	80 91 11 02 	lds	r24, 0x0211
     448:	90 91 12 02 	lds	r25, 0x0212
     44c:	89 33       	cpi	r24, 0x39	; 57
     44e:	9f 4f       	sbci	r25, 0xFF	; 255
     450:	1c f0       	brlt	.+6      	; 0x458 <Man_Drive+0x9e>
     452:	88 ec       	ldi	r24, 0xC8	; 200
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	02 c0       	rjmp	.+4      	; 0x45c <Man_Drive+0xa2>
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	90 93 12 02 	sts	0x0212, r25
     460:	80 93 11 02 	sts	0x0211, r24
     464:	60 91 00 02 	lds	r22, 0x0200
     468:	70 91 01 02 	lds	r23, 0x0201
     46c:	80 91 11 02 	lds	r24, 0x0211
     470:	90 91 12 02 	lds	r25, 0x0212
     474:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <Roomba_Drive>
     478:	8f ef       	ldi	r24, 0xFF	; 255
     47a:	93 ec       	ldi	r25, 0xC3	; 195
     47c:	29 e0       	ldi	r18, 0x09	; 9
     47e:	81 50       	subi	r24, 0x01	; 1
     480:	90 40       	sbci	r25, 0x00	; 0
     482:	20 40       	sbci	r18, 0x00	; 0
     484:	e1 f7       	brne	.-8      	; 0x47e <Man_Drive+0xc4>
     486:	00 c0       	rjmp	.+0      	; 0x488 <Man_Drive+0xce>
     488:	00 00       	nop
     48a:	08 95       	ret

0000048c <Get_Roomba_Data>:
     48c:	c0 ec       	ldi	r28, 0xC0	; 192
     48e:	d0 e0       	ldi	r29, 0x00	; 0
     490:	06 ec       	ldi	r16, 0xC6	; 198
     492:	10 e0       	ldi	r17, 0x00	; 0
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	70 e0       	ldi	r23, 0x00	; 0
     498:	85 e9       	ldi	r24, 0x95	; 149
     49a:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uart_putchar>
     49e:	60 e0       	ldi	r22, 0x00	; 0
     4a0:	70 e0       	ldi	r23, 0x00	; 0
     4a2:	83 e0       	ldi	r24, 0x03	; 3
     4a4:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uart_putchar>
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	70 e0       	ldi	r23, 0x00	; 0
     4ac:	87 e0       	ldi	r24, 0x07	; 7
     4ae:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uart_putchar>
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	70 e0       	ldi	r23, 0x00	; 0
     4b6:	8d e0       	ldi	r24, 0x0D	; 13
     4b8:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uart_putchar>
     4bc:	60 e0       	ldi	r22, 0x00	; 0
     4be:	70 e0       	ldi	r23, 0x00	; 0
     4c0:	8d e2       	ldi	r24, 0x2D	; 45
     4c2:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uart_putchar>
     4c6:	2f ef       	ldi	r18, 0xFF	; 255
     4c8:	89 ef       	ldi	r24, 0xF9	; 249
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	21 50       	subi	r18, 0x01	; 1
     4ce:	80 40       	sbci	r24, 0x00	; 0
     4d0:	90 40       	sbci	r25, 0x00	; 0
     4d2:	e1 f7       	brne	.-8      	; 0x4cc <Get_Roomba_Data+0x40>
     4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <Get_Roomba_Data+0x4a>
     4d6:	00 00       	nop
     4d8:	88 81       	ld	r24, Y
     4da:	88 23       	and	r24, r24
     4dc:	54 f1       	brlt	.+84     	; 0x532 <Get_Roomba_Data+0xa6>
     4de:	61 e0       	ldi	r22, 0x01	; 1
     4e0:	70 e0       	ldi	r23, 0x00	; 0
     4e2:	83 e2       	ldi	r24, 0x23	; 35
     4e4:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uart_putchar>
     4e8:	60 e0       	ldi	r22, 0x00	; 0
     4ea:	70 e0       	ldi	r23, 0x00	; 0
     4ec:	85 e9       	ldi	r24, 0x95	; 149
     4ee:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uart_putchar>
     4f2:	60 e0       	ldi	r22, 0x00	; 0
     4f4:	70 e0       	ldi	r23, 0x00	; 0
     4f6:	83 e0       	ldi	r24, 0x03	; 3
     4f8:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uart_putchar>
     4fc:	60 e0       	ldi	r22, 0x00	; 0
     4fe:	70 e0       	ldi	r23, 0x00	; 0
     500:	87 e0       	ldi	r24, 0x07	; 7
     502:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uart_putchar>
     506:	60 e0       	ldi	r22, 0x00	; 0
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	8d e0       	ldi	r24, 0x0D	; 13
     50c:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uart_putchar>
     510:	60 e0       	ldi	r22, 0x00	; 0
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	8d e2       	ldi	r24, 0x2D	; 45
     516:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uart_putchar>
     51a:	ef ef       	ldi	r30, 0xFF	; 255
     51c:	f9 ef       	ldi	r31, 0xF9	; 249
     51e:	20 e0       	ldi	r18, 0x00	; 0
     520:	e1 50       	subi	r30, 0x01	; 1
     522:	f0 40       	sbci	r31, 0x00	; 0
     524:	20 40       	sbci	r18, 0x00	; 0
     526:	e1 f7       	brne	.-8      	; 0x520 <Get_Roomba_Data+0x94>
     528:	00 c0       	rjmp	.+0      	; 0x52a <Get_Roomba_Data+0x9e>
     52a:	00 00       	nop
     52c:	88 81       	ld	r24, Y
     52e:	88 23       	and	r24, r24
     530:	b4 f6       	brge	.-84     	; 0x4de <Get_Roomba_Data+0x52>
     532:	f8 01       	movw	r30, r16
     534:	80 81       	ld	r24, Z
     536:	80 93 bd 14 	sts	0x14BD, r24
     53a:	88 81       	ld	r24, Y
     53c:	88 23       	and	r24, r24
     53e:	ec f7       	brge	.-6      	; 0x53a <Get_Roomba_Data+0xae>
     540:	f8 01       	movw	r30, r16
     542:	80 81       	ld	r24, Z
     544:	80 93 b4 14 	sts	0x14B4, r24
     548:	88 81       	ld	r24, Y
     54a:	88 23       	and	r24, r24
     54c:	ec f7       	brge	.-6      	; 0x548 <Get_Roomba_Data+0xbc>
     54e:	f8 01       	movw	r30, r16
     550:	80 81       	ld	r24, Z
     552:	80 93 a9 14 	sts	0x14A9, r24
     556:	61 e0       	ldi	r22, 0x01	; 1
     558:	70 e0       	ldi	r23, 0x00	; 0
     55a:	85 e2       	ldi	r24, 0x25	; 37
     55c:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uart_putchar>
     560:	61 e0       	ldi	r22, 0x01	; 1
     562:	70 e0       	ldi	r23, 0x00	; 0
     564:	80 91 bd 14 	lds	r24, 0x14BD
     568:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uart_putchar>
     56c:	61 e0       	ldi	r22, 0x01	; 1
     56e:	70 e0       	ldi	r23, 0x00	; 0
     570:	80 91 b4 14 	lds	r24, 0x14B4
     574:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uart_putchar>
     578:	61 e0       	ldi	r22, 0x01	; 1
     57a:	70 e0       	ldi	r23, 0x00	; 0
     57c:	80 91 a9 14 	lds	r24, 0x14A9
     580:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uart_putchar>
     584:	61 e0       	ldi	r22, 0x01	; 1
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	84 e2       	ldi	r24, 0x24	; 36
     58a:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uart_putchar>
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <uart_reset_receive>
     596:	7e cf       	rjmp	.-260    	; 0x494 <Get_Roomba_Data+0x8>

00000598 <Sense>:
     598:	c0 e0       	ldi	r28, 0x00	; 0
     59a:	d0 e0       	ldi	r29, 0x00	; 0
     59c:	87 e0       	ldi	r24, 0x07	; 7
     59e:	82 de       	rcall	.-764    	; 0x2a4 <adc_read>
     5a0:	20 91 ac 14 	lds	r18, 0x14AC
     5a4:	30 91 ad 14 	lds	r19, 0x14AD
     5a8:	28 17       	cp	r18, r24
     5aa:	39 07       	cpc	r19, r25
     5ac:	10 f4       	brcc	.+4      	; 0x5b2 <Sense+0x1a>
     5ae:	a2 9a       	sbi	0x14, 2	; 20
     5b0:	ff cf       	rjmp	.-2      	; 0x5b0 <Sense+0x18>
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <uart_bytes_received>
     5ba:	85 30       	cpi	r24, 0x05	; 5
     5bc:	08 f4       	brcc	.+2      	; 0x5c0 <Sense+0x28>
     5be:	51 c0       	rjmp	.+162    	; 0x662 <Sense+0xca>
     5c0:	61 e0       	ldi	r22, 0x01	; 1
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <uart_get_byte>
     5cc:	08 2f       	mov	r16, r24
     5ce:	61 e0       	ldi	r22, 0x01	; 1
     5d0:	70 e0       	ldi	r23, 0x00	; 0
     5d2:	84 e0       	ldi	r24, 0x04	; 4
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <uart_get_byte>
     5da:	18 2f       	mov	r17, r24
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <uart_bytes_received>
     5e4:	61 e0       	ldi	r22, 0x01	; 1
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uart_putchar>
     5ec:	61 e0       	ldi	r22, 0x01	; 1
     5ee:	70 e0       	ldi	r23, 0x00	; 0
     5f0:	80 2f       	mov	r24, r16
     5f2:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uart_putchar>
     5f6:	61 e0       	ldi	r22, 0x01	; 1
     5f8:	70 e0       	ldi	r23, 0x00	; 0
     5fa:	81 2f       	mov	r24, r17
     5fc:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uart_putchar>
     600:	03 37       	cpi	r16, 0x73	; 115
     602:	59 f5       	brne	.+86     	; 0x65a <Sense+0xc2>
     604:	15 36       	cpi	r17, 0x65	; 101
     606:	49 f5       	brne	.+82     	; 0x65a <Sense+0xc2>
     608:	61 e0       	ldi	r22, 0x01	; 1
     60a:	70 e0       	ldi	r23, 0x00	; 0
     60c:	82 e0       	ldi	r24, 0x02	; 2
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <uart_get_byte>
     614:	18 2f       	mov	r17, r24
     616:	61 e0       	ldi	r22, 0x01	; 1
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	83 e0       	ldi	r24, 0x03	; 3
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <uart_get_byte>
     622:	08 2f       	mov	r16, r24
     624:	61 e0       	ldi	r22, 0x01	; 1
     626:	70 e0       	ldi	r23, 0x00	; 0
     628:	81 2f       	mov	r24, r17
     62a:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uart_putchar>
     62e:	61 e0       	ldi	r22, 0x01	; 1
     630:	70 e0       	ldi	r23, 0x00	; 0
     632:	80 2f       	mov	r24, r16
     634:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uart_putchar>
     638:	0f 36       	cpi	r16, 0x6F	; 111
     63a:	31 f4       	brne	.+12     	; 0x648 <Sense+0xb0>
     63c:	61 e0       	ldi	r22, 0x01	; 1
     63e:	70 e0       	ldi	r23, 0x00	; 0
     640:	8f e6       	ldi	r24, 0x6F	; 111
     642:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uart_putchar>
     646:	5f 9a       	sbi	0x0b, 7	; 11
     648:	10 33       	cpi	r17, 0x30	; 48
     64a:	29 f4       	brne	.+10     	; 0x656 <Sense+0xbe>
     64c:	21 96       	adiw	r28, 0x01	; 1
     64e:	c2 33       	cpi	r28, 0x32	; 50
     650:	d1 05       	cpc	r29, r1
     652:	1c f0       	brlt	.+6      	; 0x65a <Sense+0xc2>
     654:	1b df       	rcall	.-458    	; 0x48c <Get_Roomba_Data>
     656:	81 2f       	mov	r24, r17
     658:	b0 de       	rcall	.-672    	; 0x3ba <Man_Drive>
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <uart_reset_receive>
     662:	5f 98       	cbi	0x0b, 7	; 11
     664:	9b cf       	rjmp	.-202    	; 0x59c <Sense+0x4>

00000666 <a_main>:

// Application level main function
// Creates the required tasks and then terminates
void a_main() {
	//Init_Task();
	InitPID		= Task_Create(Init_Task,0,1);
     666:	41 e0       	ldi	r20, 0x01	; 1
     668:	50 e0       	ldi	r21, 0x00	; 0
     66a:	60 e0       	ldi	r22, 0x00	; 0
     66c:	70 e0       	ldi	r23, 0x00	; 0
     66e:	82 eb       	ldi	r24, 0xB2	; 178
     670:	91 e0       	ldi	r25, 0x01	; 1
     672:	f1 d6       	rcall	.+3554   	; 0x1456 <Task_Create>
     674:	90 93 bc 14 	sts	0x14BC, r25
     678:	80 93 bb 14 	sts	0x14BB, r24
	SensePID	= Task_Create(Sense, 1, 1);
     67c:	41 e0       	ldi	r20, 0x01	; 1
     67e:	50 e0       	ldi	r21, 0x00	; 0
     680:	61 e0       	ldi	r22, 0x01	; 1
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	8c ec       	ldi	r24, 0xCC	; 204
     686:	92 e0       	ldi	r25, 0x02	; 2
     688:	e6 d6       	rcall	.+3532   	; 0x1456 <Task_Create>
     68a:	90 93 b3 14 	sts	0x14B3, r25
     68e:	80 93 b2 14 	sts	0x14B2, r24
	IdlePID		= Task_Create(Idle, 8, 1);
     692:	41 e0       	ldi	r20, 0x01	; 1
     694:	50 e0       	ldi	r21, 0x00	; 0
     696:	68 e0       	ldi	r22, 0x08	; 8
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	81 eb       	ldi	r24, 0xB1	; 177
     69c:	91 e0       	ldi	r25, 0x01	; 1
     69e:	db d6       	rcall	.+3510   	; 0x1456 <Task_Create>
     6a0:	90 93 ab 14 	sts	0x14AB, r25
     6a4:	80 93 aa 14 	sts	0x14AA, r24
	adc_test = adc_read(7);
	sprintf(line, "%04d\0", adc_test);
	uart_send_string(line, BT_UART);
	_delay_ms(50);*/
	
	Task_Terminate();
     6a8:	01 c0       	rjmp	.+2      	; 0x6ac <Task_Terminate>
     6aa:	08 95       	ret

000006ac <Task_Terminate>:
/**
  * Application level task getarg to return intiial arg value
  */
int Task_GetArg(PID p) {
	return (Cp->arg);
}
     6ac:	80 91 23 02 	lds	r24, 0x0223
     6b0:	90 91 24 02 	lds	r25, 0x0224
     6b4:	89 2b       	or	r24, r25
     6b6:	51 f0       	breq	.+20     	; 0x6cc <Task_Terminate+0x20>
     6b8:	f8 94       	cli
     6ba:	e0 91 25 02 	lds	r30, 0x0225
     6be:	f0 91 26 02 	lds	r31, 0x0226
     6c2:	e3 5f       	subi	r30, 0xF3	; 243
     6c4:	fe 4f       	sbci	r31, 0xFE	; 254
     6c6:	84 e0       	ldi	r24, 0x04	; 4
     6c8:	80 83       	st	Z, r24
     6ca:	90 cd       	rjmp	.-1248   	; 0x1ec <Enter_Kernel>
     6cc:	08 95       	ret

000006ce <Kernel_Create_Task_At>:
     6ce:	ef 92       	push	r14
     6d0:	ff 92       	push	r15
     6d2:	0f 93       	push	r16
     6d4:	1f 93       	push	r17
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	1f 92       	push	r1
     6dc:	1f 92       	push	r1
     6de:	cd b7       	in	r28, 0x3d	; 61
     6e0:	de b7       	in	r29, 0x3e	; 62
     6e2:	9a 83       	std	Y+2, r25	; 0x02
     6e4:	89 83       	std	Y+1, r24	; 0x01
     6e6:	dc 01       	movw	r26, r24
     6e8:	7c 01       	movw	r14, r24
     6ea:	04 e0       	ldi	r16, 0x04	; 4
     6ec:	e0 0e       	add	r14, r16
     6ee:	f1 1c       	adc	r15, r1
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	91 e0       	ldi	r25, 0x01	; 1
     6f4:	f7 01       	movw	r30, r14
     6f6:	8c 01       	movw	r16, r24
     6f8:	11 92       	st	Z+, r1
     6fa:	01 50       	subi	r16, 0x01	; 1
     6fc:	10 40       	sbci	r17, 0x00	; 0
     6fe:	e1 f7       	brne	.-8      	; 0x6f8 <Kernel_Create_Task_At+0x2a>
     700:	fd 01       	movw	r30, r26
     702:	ed 5f       	subi	r30, 0xFD	; 253
     704:	fe 4f       	sbci	r31, 0xFE	; 254
     706:	86 e5       	ldi	r24, 0x56	; 86
     708:	93 e0       	ldi	r25, 0x03	; 3
     70a:	80 83       	st	Z, r24
     70c:	31 97       	sbiw	r30, 0x01	; 1
     70e:	90 83       	st	Z, r25
     710:	31 97       	sbiw	r30, 0x01	; 1
     712:	60 83       	st	Z, r22
     714:	31 97       	sbiw	r30, 0x01	; 1
     716:	70 83       	st	Z, r23
     718:	31 97       	sbiw	r30, 0x01	; 1
     71a:	10 82       	st	Z, r1
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	92 93       	st	-Z, r25
     720:	9f 5f       	subi	r25, 0xFF	; 255
     722:	92 32       	cpi	r25, 0x22	; 34
     724:	e1 f7       	brne	.-8      	; 0x71e <Kernel_Create_Task_At+0x50>
     726:	a4 52       	subi	r26, 0x24	; 36
     728:	bf 4f       	sbci	r27, 0xFF	; 255
     72a:	e9 81       	ldd	r30, Y+1	; 0x01
     72c:	fa 81       	ldd	r31, Y+2	; 0x02
     72e:	b3 83       	std	Z+3, r27	; 0x03
     730:	a2 83       	std	Z+2, r26	; 0x02
     732:	df 01       	movw	r26, r30
     734:	a5 5f       	subi	r26, 0xF5	; 245
     736:	be 4f       	sbci	r27, 0xFE	; 254
     738:	11 96       	adiw	r26, 0x01	; 1
     73a:	7c 93       	st	X, r23
     73c:	6e 93       	st	-X, r22
     73e:	12 96       	adiw	r26, 0x02	; 2
     740:	1c 92       	st	X, r1
     742:	80 91 1f 02 	lds	r24, 0x021F
     746:	90 91 20 02 	lds	r25, 0x0220
     74a:	91 83       	std	Z+1, r25	; 0x01
     74c:	80 83       	st	Z, r24
     74e:	89 81       	ldd	r24, Y+1	; 0x01
     750:	9a 81       	ldd	r25, Y+2	; 0x02
     752:	fc 01       	movw	r30, r24
     754:	eb 5f       	subi	r30, 0xFB	; 251
     756:	fe 4f       	sbci	r31, 0xFE	; 254
     758:	51 83       	std	Z+1, r21	; 0x01
     75a:	40 83       	st	Z, r20
     75c:	32 96       	adiw	r30, 0x02	; 2
     75e:	51 83       	std	Z+1, r21	; 0x01
     760:	40 83       	st	Z, r20
     762:	32 96       	adiw	r30, 0x02	; 2
     764:	31 83       	std	Z+1, r19	; 0x01
     766:	20 83       	st	Z, r18
     768:	71 96       	adiw	r30, 0x11	; 17
     76a:	11 82       	std	Z+1, r1	; 0x01
     76c:	10 82       	st	Z, r1
     76e:	34 97       	sbiw	r30, 0x04	; 4
     770:	23 e6       	ldi	r18, 0x63	; 99
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	31 83       	std	Z+1, r19	; 0x01
     776:	20 83       	st	Z, r18
     778:	20 91 21 02 	lds	r18, 0x0221
     77c:	30 91 22 02 	lds	r19, 0x0222
     780:	2f 5f       	subi	r18, 0xFF	; 255
     782:	3f 4f       	sbci	r19, 0xFF	; 255
     784:	30 93 22 02 	sts	0x0222, r19
     788:	20 93 21 02 	sts	0x0221, r18
     78c:	20 91 1f 02 	lds	r18, 0x021F
     790:	30 91 20 02 	lds	r19, 0x0220
     794:	2f 5f       	subi	r18, 0xFF	; 255
     796:	3f 4f       	sbci	r19, 0xFF	; 255
     798:	30 93 20 02 	sts	0x0220, r19
     79c:	20 93 1f 02 	sts	0x021F, r18
     7a0:	72 97       	sbiw	r30, 0x12	; 18
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	80 83       	st	Z, r24
     7a6:	47 e1       	ldi	r20, 0x17	; 23
     7a8:	52 e0       	ldi	r21, 0x02	; 2
     7aa:	60 ee       	ldi	r22, 0xE0	; 224
     7ac:	74 e1       	ldi	r23, 0x14	; 20
     7ae:	ce 01       	movw	r24, r28
     7b0:	01 96       	adiw	r24, 0x01	; 1
     7b2:	0e 94 47 0c 	call	0x188e	; 0x188e <enqueueRQ>
     7b6:	e9 81       	ldd	r30, Y+1	; 0x01
     7b8:	fa 81       	ldd	r31, Y+2	; 0x02
     7ba:	80 81       	ld	r24, Z
     7bc:	91 81       	ldd	r25, Z+1	; 0x01
     7be:	0f 90       	pop	r0
     7c0:	0f 90       	pop	r0
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	1f 91       	pop	r17
     7c8:	0f 91       	pop	r16
     7ca:	ff 90       	pop	r15
     7cc:	ef 90       	pop	r14
     7ce:	08 95       	ret

000007d0 <Kernel_Create_Task>:
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
     7d4:	ec 01       	movw	r28, r24
     7d6:	80 91 21 02 	lds	r24, 0x0221
     7da:	90 91 22 02 	lds	r25, 0x0222
     7de:	40 97       	sbiw	r24, 0x10	; 16
     7e0:	21 f1       	breq	.+72     	; 0x82a <Kernel_Create_Task+0x5a>
     7e2:	80 91 8b 03 	lds	r24, 0x038B
     7e6:	88 23       	and	r24, r24
     7e8:	71 f0       	breq	.+28     	; 0x806 <Kernel_Create_Task+0x36>
     7ea:	a9 ea       	ldi	r26, 0xA9	; 169
     7ec:	b4 e0       	ldi	r27, 0x04	; 4
     7ee:	e1 e0       	ldi	r30, 0x01	; 1
     7f0:	f0 e0       	ldi	r31, 0x00	; 0
     7f2:	9c 91       	ld	r25, X
     7f4:	99 23       	and	r25, r25
     7f6:	49 f0       	breq	.+18     	; 0x80a <Kernel_Create_Task+0x3a>
     7f8:	31 96       	adiw	r30, 0x01	; 1
     7fa:	a2 5e       	subi	r26, 0xE2	; 226
     7fc:	be 4f       	sbci	r27, 0xFE	; 254
     7fe:	e0 31       	cpi	r30, 0x10	; 16
     800:	f1 05       	cpc	r31, r1
     802:	b9 f7       	brne	.-18     	; 0x7f2 <Kernel_Create_Task+0x22>
     804:	02 c0       	rjmp	.+4      	; 0x80a <Kernel_Create_Task+0x3a>
     806:	e0 e0       	ldi	r30, 0x00	; 0
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	9a 01       	movw	r18, r20
     80c:	ab 01       	movw	r20, r22
     80e:	be 01       	movw	r22, r28
     810:	ae e1       	ldi	r26, 0x1E	; 30
     812:	b1 e0       	ldi	r27, 0x01	; 1
     814:	ea 9f       	mul	r30, r26
     816:	c0 01       	movw	r24, r0
     818:	eb 9f       	mul	r30, r27
     81a:	90 0d       	add	r25, r0
     81c:	fa 9f       	mul	r31, r26
     81e:	90 0d       	add	r25, r0
     820:	11 24       	eor	r1, r1
     822:	89 57       	subi	r24, 0x79	; 121
     824:	9d 4f       	sbci	r25, 0xFD	; 253
     826:	53 df       	rcall	.-346    	; 0x6ce <Kernel_Create_Task_At>
     828:	00 c0       	rjmp	.+0      	; 0x82a <Kernel_Create_Task+0x5a>
     82a:	df 91       	pop	r29
     82c:	cf 91       	pop	r28
     82e:	08 95       	ret

00000830 <Kernel_Init_Mutex_At>:
     830:	fc 01       	movw	r30, r24
     832:	80 91 1d 02 	lds	r24, 0x021D
     836:	90 91 1e 02 	lds	r25, 0x021E
     83a:	91 83       	std	Z+1, r25	; 0x01
     83c:	80 83       	st	Z, r24
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	82 83       	std	Z+2, r24	; 0x02
     842:	80 91 1d 02 	lds	r24, 0x021D
     846:	90 91 1e 02 	lds	r25, 0x021E
     84a:	01 96       	adiw	r24, 0x01	; 1
     84c:	90 93 1e 02 	sts	0x021E, r25
     850:	80 93 1d 02 	sts	0x021D, r24
     854:	80 81       	ld	r24, Z
     856:	91 81       	ldd	r25, Z+1	; 0x01
     858:	08 95       	ret

0000085a <Kernel_Init_Event_At>:
     85a:	fc 01       	movw	r30, r24
     85c:	80 91 1b 02 	lds	r24, 0x021B
     860:	90 91 1c 02 	lds	r25, 0x021C
     864:	91 83       	std	Z+1, r25	; 0x01
     866:	80 83       	st	Z, r24
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	82 83       	std	Z+2, r24	; 0x02
     86c:	14 82       	std	Z+4, r1	; 0x04
     86e:	13 82       	std	Z+3, r1	; 0x03
     870:	80 91 1b 02 	lds	r24, 0x021B
     874:	90 91 1c 02 	lds	r25, 0x021C
     878:	01 96       	adiw	r24, 0x01	; 1
     87a:	90 93 1c 02 	sts	0x021C, r25
     87e:	80 93 1b 02 	sts	0x021B, r24
     882:	80 81       	ld	r24, Z
     884:	91 81       	ldd	r25, Z+1	; 0x01
     886:	08 95       	ret

00000888 <OS_Init>:
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	10 92 22 02 	sts	0x0222, r1
     890:	10 92 21 02 	sts	0x0221, r1
     894:	10 92 24 02 	sts	0x0224, r1
     898:	10 92 23 02 	sts	0x0223, r1
     89c:	10 92 1e 02 	sts	0x021E, r1
     8a0:	10 92 1d 02 	sts	0x021D, r1
     8a4:	10 92 1c 02 	sts	0x021C, r1
     8a8:	10 92 1b 02 	sts	0x021B, r1
     8ac:	10 92 20 02 	sts	0x0220, r1
     8b0:	10 92 1f 02 	sts	0x021F, r1
     8b4:	e7 e8       	ldi	r30, 0x87	; 135
     8b6:	f2 e0       	ldi	r31, 0x02	; 2
     8b8:	ab e8       	ldi	r26, 0x8B	; 139
     8ba:	b3 e0       	ldi	r27, 0x03	; 3
     8bc:	47 e6       	ldi	r20, 0x67	; 103
     8be:	54 e1       	ldi	r21, 0x14	; 20
     8c0:	2e e1       	ldi	r18, 0x1E	; 30
     8c2:	31 e0       	ldi	r19, 0x01	; 1
     8c4:	83 e6       	ldi	r24, 0x63	; 99
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	ef 01       	movw	r28, r30
     8ca:	b9 01       	movw	r22, r18
     8cc:	19 92       	st	Y+, r1
     8ce:	61 50       	subi	r22, 0x01	; 1
     8d0:	70 40       	sbci	r23, 0x00	; 0
     8d2:	e1 f7       	brne	.-8      	; 0x8cc <OS_Init+0x44>
     8d4:	1c 92       	st	X, r1
     8d6:	53 96       	adiw	r26, 0x13	; 19
     8d8:	9c 93       	st	X, r25
     8da:	8e 93       	st	-X, r24
     8dc:	52 97       	sbiw	r26, 0x12	; 18
     8de:	11 82       	std	Z+1, r1	; 0x01
     8e0:	10 82       	st	Z, r1
     8e2:	e2 5e       	subi	r30, 0xE2	; 226
     8e4:	fe 4f       	sbci	r31, 0xFE	; 254
     8e6:	a2 5e       	subi	r26, 0xE2	; 226
     8e8:	be 4f       	sbci	r27, 0xFE	; 254
     8ea:	e4 17       	cp	r30, r20
     8ec:	f5 07       	cpc	r31, r21
     8ee:	61 f7       	brne	.-40     	; 0x8c8 <OS_Init+0x40>
     8f0:	e1 e5       	ldi	r30, 0x51	; 81
     8f2:	f2 e0       	ldi	r31, 0x02	; 2
     8f4:	29 e8       	ldi	r18, 0x89	; 137
     8f6:	32 e0       	ldi	r19, 0x02	; 2
     8f8:	87 e0       	ldi	r24, 0x07	; 7
     8fa:	df 01       	movw	r26, r30
     8fc:	12 97       	sbiw	r26, 0x02	; 2
     8fe:	ed 01       	movw	r28, r26
     900:	68 2f       	mov	r22, r24
     902:	19 92       	st	Y+, r1
     904:	6a 95       	dec	r22
     906:	e9 f7       	brne	.-6      	; 0x902 <OS_Init+0x7a>
     908:	10 82       	st	Z, r1
     90a:	37 96       	adiw	r30, 0x07	; 7
     90c:	e2 17       	cp	r30, r18
     90e:	f3 07       	cpc	r31, r19
     910:	a1 f7       	brne	.-24     	; 0x8fa <OS_Init+0x72>
     912:	e9 e2       	ldi	r30, 0x29	; 41
     914:	f2 e0       	ldi	r31, 0x02	; 2
     916:	21 e5       	ldi	r18, 0x51	; 81
     918:	32 e0       	ldi	r19, 0x02	; 2
     91a:	85 e0       	ldi	r24, 0x05	; 5
     91c:	df 01       	movw	r26, r30
     91e:	12 97       	sbiw	r26, 0x02	; 2
     920:	ed 01       	movw	r28, r26
     922:	68 2f       	mov	r22, r24
     924:	19 92       	st	Y+, r1
     926:	6a 95       	dec	r22
     928:	e9 f7       	brne	.-6      	; 0x924 <OS_Init+0x9c>
     92a:	10 82       	st	Z, r1
     92c:	35 96       	adiw	r30, 0x05	; 5
     92e:	e2 17       	cp	r30, r18
     930:	f3 07       	cpc	r31, r19
     932:	a1 f7       	brne	.-24     	; 0x91c <OS_Init+0x94>
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	08 95       	ret

0000093a <OS_Abort>:
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	0e 94 0b 11 	call	0x2216	; 0x2216 <_exit>

00000942 <Dispatch>:
     942:	67 e1       	ldi	r22, 0x17	; 23
     944:	72 e0       	ldi	r23, 0x02	; 2
     946:	80 ee       	ldi	r24, 0xE0	; 224
     948:	94 e1       	ldi	r25, 0x14	; 20
     94a:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <dequeueRQ>
     94e:	fc 01       	movw	r30, r24
     950:	90 93 26 02 	sts	0x0226, r25
     954:	80 93 25 02 	sts	0x0225, r24
     958:	89 2b       	or	r24, r25
     95a:	09 f4       	brne	.+2      	; 0x95e <Dispatch+0x1c>
     95c:	ee df       	rcall	.-36     	; 0x93a <OS_Abort>
     95e:	82 81       	ldd	r24, Z+2	; 0x02
     960:	93 81       	ldd	r25, Z+3	; 0x03
     962:	90 93 01 15 	sts	0x1501, r25
     966:	80 93 00 15 	sts	0x1500, r24
     96a:	82 e0       	ldi	r24, 0x02	; 2
     96c:	df 01       	movw	r26, r30
     96e:	ac 5f       	subi	r26, 0xFC	; 252
     970:	be 4f       	sbci	r27, 0xFE	; 254
     972:	8c 93       	st	X, r24
     974:	80 81       	ld	r24, Z
     976:	91 81       	ldd	r25, Z+1	; 0x01
     978:	02 97       	sbiw	r24, 0x02	; 2
     97a:	20 f4       	brcc	.+8      	; 0x984 <Dispatch+0x42>
     97c:	82 e0       	ldi	r24, 0x02	; 2
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	d5 cc       	rjmp	.-1622   	; 0x32c <enable_LED>
     982:	08 95       	ret
     984:	80 81       	ld	r24, Z
     986:	91 81       	ldd	r25, Z+1	; 0x01
     988:	02 97       	sbiw	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <Dispatch+0x52>
     98c:	85 e0       	ldi	r24, 0x05	; 5
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	cd cc       	rjmp	.-1638   	; 0x32c <enable_LED>
     992:	08 95       	ret
     994:	80 81       	ld	r24, Z
     996:	91 81       	ldd	r25, Z+1	; 0x01
     998:	03 97       	sbiw	r24, 0x03	; 3
     99a:	19 f4       	brne	.+6      	; 0x9a2 <Dispatch+0x60>
     99c:	86 e0       	ldi	r24, 0x06	; 6
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	c5 cc       	rjmp	.-1654   	; 0x32c <enable_LED>
     9a2:	08 95       	ret

000009a4 <Kernel_Unlock_Mutex>:
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	1f 92       	push	r1
     9ae:	1f 92       	push	r1
     9b0:	cd b7       	in	r28, 0x3d	; 61
     9b2:	de b7       	in	r29, 0x3e	; 62
     9b4:	a0 91 25 02 	lds	r26, 0x0225
     9b8:	b0 91 26 02 	lds	r27, 0x0226
     9bc:	fd 01       	movw	r30, r26
     9be:	ec 5e       	subi	r30, 0xEC	; 236
     9c0:	fe 4f       	sbci	r31, 0xFE	; 254
     9c2:	40 81       	ld	r20, Z
     9c4:	51 81       	ldd	r21, Z+1	; 0x01
     9c6:	ef e4       	ldi	r30, 0x4F	; 79
     9c8:	f2 e0       	ldi	r31, 0x02	; 2
     9ca:	00 e0       	ldi	r16, 0x00	; 0
     9cc:	10 e0       	ldi	r17, 0x00	; 0
     9ce:	80 81       	ld	r24, Z
     9d0:	91 81       	ldd	r25, Z+1	; 0x01
     9d2:	84 17       	cp	r24, r20
     9d4:	95 07       	cpc	r25, r21
     9d6:	39 f0       	breq	.+14     	; 0x9e6 <Kernel_Unlock_Mutex+0x42>
     9d8:	0f 5f       	subi	r16, 0xFF	; 255
     9da:	1f 4f       	sbci	r17, 0xFF	; 255
     9dc:	37 96       	adiw	r30, 0x07	; 7
     9de:	08 30       	cpi	r16, 0x08	; 8
     9e0:	11 05       	cpc	r17, r1
     9e2:	a9 f7       	brne	.-22     	; 0x9ce <Kernel_Unlock_Mutex+0x2a>
     9e4:	f7 c0       	rjmp	.+494    	; 0xbd4 <Kernel_Unlock_Mutex+0x230>
     9e6:	8d 91       	ld	r24, X+
     9e8:	9c 91       	ld	r25, X
     9ea:	11 97       	sbiw	r26, 0x01	; 1
     9ec:	27 e0       	ldi	r18, 0x07	; 7
     9ee:	20 9f       	mul	r18, r16
     9f0:	f0 01       	movw	r30, r0
     9f2:	21 9f       	mul	r18, r17
     9f4:	f0 0d       	add	r31, r0
     9f6:	11 24       	eor	r1, r1
     9f8:	e1 5b       	subi	r30, 0xB1	; 177
     9fa:	fd 4f       	sbci	r31, 0xFD	; 253
     9fc:	23 81       	ldd	r18, Z+3	; 0x03
     9fe:	34 81       	ldd	r19, Z+4	; 0x04
     a00:	28 17       	cp	r18, r24
     a02:	39 07       	cpc	r19, r25
     a04:	09 f0       	breq	.+2      	; 0xa08 <Kernel_Unlock_Mutex+0x64>
     a06:	e6 c0       	rjmp	.+460    	; 0xbd4 <Kernel_Unlock_Mutex+0x230>
     a08:	ac 5f       	subi	r26, 0xFC	; 252
     a0a:	be 4f       	sbci	r27, 0xFE	; 254
     a0c:	8c 91       	ld	r24, X
     a0e:	86 30       	cpi	r24, 0x06	; 6
     a10:	09 f0       	breq	.+2      	; 0xa14 <Kernel_Unlock_Mutex+0x70>
     a12:	4d c0       	rjmp	.+154    	; 0xaae <Kernel_Unlock_Mutex+0x10a>
     a14:	63 e1       	ldi	r22, 0x13	; 19
     a16:	72 e0       	ldi	r23, 0x02	; 2
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	95 e1       	ldi	r25, 0x15	; 21
     a1c:	9b d7       	rcall	.+3894   	; 0x1954 <dequeueWQ>
     a1e:	9a 83       	std	Y+2, r25	; 0x02
     a20:	89 83       	std	Y+1, r24	; 0x01
     a22:	00 97       	sbiw	r24, 0x00	; 0
     a24:	79 f4       	brne	.+30     	; 0xa44 <Kernel_Unlock_Mutex+0xa0>
     a26:	87 e0       	ldi	r24, 0x07	; 7
     a28:	80 9f       	mul	r24, r16
     a2a:	f0 01       	movw	r30, r0
     a2c:	81 9f       	mul	r24, r17
     a2e:	f0 0d       	add	r31, r0
     a30:	11 24       	eor	r1, r1
     a32:	e1 5b       	subi	r30, 0xB1	; 177
     a34:	fd 4f       	sbci	r31, 0xFD	; 253
     a36:	16 82       	std	Z+6, r1	; 0x06
     a38:	15 82       	std	Z+5, r1	; 0x05
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	82 83       	std	Z+2, r24	; 0x02
     a3e:	14 82       	std	Z+4, r1	; 0x04
     a40:	13 82       	std	Z+3, r1	; 0x03
     a42:	c8 c0       	rjmp	.+400    	; 0xbd4 <Kernel_Unlock_Mutex+0x230>
     a44:	27 e0       	ldi	r18, 0x07	; 7
     a46:	20 9f       	mul	r18, r16
     a48:	f0 01       	movw	r30, r0
     a4a:	21 9f       	mul	r18, r17
     a4c:	f0 0d       	add	r31, r0
     a4e:	11 24       	eor	r1, r1
     a50:	e1 5b       	subi	r30, 0xB1	; 177
     a52:	fd 4f       	sbci	r31, 0xFD	; 253
     a54:	21 e0       	ldi	r18, 0x01	; 1
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	36 83       	std	Z+6, r19	; 0x06
     a5a:	25 83       	std	Z+5, r18	; 0x05
     a5c:	dc 01       	movw	r26, r24
     a5e:	2d 91       	ld	r18, X+
     a60:	3c 91       	ld	r19, X
     a62:	34 83       	std	Z+4, r19	; 0x04
     a64:	23 83       	std	Z+3, r18	; 0x03
     a66:	20 91 25 02 	lds	r18, 0x0225
     a6a:	30 91 26 02 	lds	r19, 0x0226
     a6e:	d9 01       	movw	r26, r18
     a70:	a9 5f       	subi	r26, 0xF9	; 249
     a72:	be 4f       	sbci	r27, 0xFE	; 254
     a74:	4d 91       	ld	r20, X+
     a76:	5c 91       	ld	r21, X
     a78:	11 97       	sbiw	r26, 0x01	; 1
     a7a:	fc 01       	movw	r30, r24
     a7c:	e9 5f       	subi	r30, 0xF9	; 249
     a7e:	fe 4f       	sbci	r31, 0xFE	; 254
     a80:	51 83       	std	Z+1, r21	; 0x01
     a82:	40 83       	st	Z, r20
     a84:	33 97       	sbiw	r30, 0x03	; 3
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	80 83       	st	Z, r24
     a8a:	f9 01       	movw	r30, r18
     a8c:	eb 5f       	subi	r30, 0xFB	; 251
     a8e:	fe 4f       	sbci	r31, 0xFE	; 254
     a90:	40 81       	ld	r20, Z
     a92:	51 81       	ldd	r21, Z+1	; 0x01
     a94:	11 96       	adiw	r26, 0x01	; 1
     a96:	5c 93       	st	X, r21
     a98:	4e 93       	st	-X, r20
     a9a:	31 97       	sbiw	r30, 0x01	; 1
     a9c:	80 83       	st	Z, r24
     a9e:	47 e1       	ldi	r20, 0x17	; 23
     aa0:	52 e0       	ldi	r21, 0x02	; 2
     aa2:	60 ee       	ldi	r22, 0xE0	; 224
     aa4:	74 e1       	ldi	r23, 0x14	; 20
     aa6:	ce 01       	movw	r24, r28
     aa8:	01 96       	adiw	r24, 0x01	; 1
     aaa:	f1 d6       	rcall	.+3554   	; 0x188e <enqueueRQ>
     aac:	93 c0       	rjmp	.+294    	; 0xbd4 <Kernel_Unlock_Mutex+0x230>
     aae:	87 e0       	ldi	r24, 0x07	; 7
     ab0:	80 9f       	mul	r24, r16
     ab2:	f0 01       	movw	r30, r0
     ab4:	81 9f       	mul	r24, r17
     ab6:	f0 0d       	add	r31, r0
     ab8:	11 24       	eor	r1, r1
     aba:	e1 5b       	subi	r30, 0xB1	; 177
     abc:	fd 4f       	sbci	r31, 0xFD	; 253
     abe:	85 81       	ldd	r24, Z+5	; 0x05
     ac0:	96 81       	ldd	r25, Z+6	; 0x06
     ac2:	82 30       	cpi	r24, 0x02	; 2
     ac4:	91 05       	cpc	r25, r1
     ac6:	60 f0       	brcs	.+24     	; 0xae0 <Kernel_Unlock_Mutex+0x13c>
     ac8:	27 e0       	ldi	r18, 0x07	; 7
     aca:	20 9f       	mul	r18, r16
     acc:	f0 01       	movw	r30, r0
     ace:	21 9f       	mul	r18, r17
     ad0:	f0 0d       	add	r31, r0
     ad2:	11 24       	eor	r1, r1
     ad4:	e1 5b       	subi	r30, 0xB1	; 177
     ad6:	fd 4f       	sbci	r31, 0xFD	; 253
     ad8:	01 97       	sbiw	r24, 0x01	; 1
     ada:	96 83       	std	Z+6, r25	; 0x06
     adc:	85 83       	std	Z+5, r24	; 0x05
     ade:	7a c0       	rjmp	.+244    	; 0xbd4 <Kernel_Unlock_Mutex+0x230>
     ae0:	63 e1       	ldi	r22, 0x13	; 19
     ae2:	72 e0       	ldi	r23, 0x02	; 2
     ae4:	82 e0       	ldi	r24, 0x02	; 2
     ae6:	95 e1       	ldi	r25, 0x15	; 21
     ae8:	35 d7       	rcall	.+3690   	; 0x1954 <dequeueWQ>
     aea:	9a 83       	std	Y+2, r25	; 0x02
     aec:	89 83       	std	Y+1, r24	; 0x01
     aee:	00 97       	sbiw	r24, 0x00	; 0
     af0:	a9 f5       	brne	.+106    	; 0xb5c <Kernel_Unlock_Mutex+0x1b8>
     af2:	87 e0       	ldi	r24, 0x07	; 7
     af4:	80 9f       	mul	r24, r16
     af6:	f0 01       	movw	r30, r0
     af8:	81 9f       	mul	r24, r17
     afa:	f0 0d       	add	r31, r0
     afc:	11 24       	eor	r1, r1
     afe:	e1 5b       	subi	r30, 0xB1	; 177
     b00:	fd 4f       	sbci	r31, 0xFD	; 253
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	82 83       	std	Z+2, r24	; 0x02
     b06:	16 82       	std	Z+6, r1	; 0x06
     b08:	15 82       	std	Z+5, r1	; 0x05
     b0a:	14 82       	std	Z+4, r1	; 0x04
     b0c:	13 82       	std	Z+3, r1	; 0x03
     b0e:	e0 91 25 02 	lds	r30, 0x0225
     b12:	f0 91 26 02 	lds	r31, 0x0226
     b16:	df 01       	movw	r26, r30
     b18:	ab 5f       	subi	r26, 0xFB	; 251
     b1a:	be 4f       	sbci	r27, 0xFE	; 254
     b1c:	8d 91       	ld	r24, X+
     b1e:	9c 91       	ld	r25, X
     b20:	11 97       	sbiw	r26, 0x01	; 1
     b22:	12 96       	adiw	r26, 0x02	; 2
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	8e 93       	st	-X, r24
     b2a:	80 81       	ld	r24, Z
     b2c:	91 81       	ldd	r25, Z+1	; 0x01
     b2e:	02 97       	sbiw	r24, 0x02	; 2
     b30:	20 f4       	brcc	.+8      	; 0xb3a <Kernel_Unlock_Mutex+0x196>
     b32:	82 e0       	ldi	r24, 0x02	; 2
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	fa db       	rcall	.-2060   	; 0x32c <enable_LED>
     b38:	4d c0       	rjmp	.+154    	; 0xbd4 <Kernel_Unlock_Mutex+0x230>
     b3a:	80 81       	ld	r24, Z
     b3c:	91 81       	ldd	r25, Z+1	; 0x01
     b3e:	02 97       	sbiw	r24, 0x02	; 2
     b40:	21 f4       	brne	.+8      	; 0xb4a <Kernel_Unlock_Mutex+0x1a6>
     b42:	85 e0       	ldi	r24, 0x05	; 5
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	f2 db       	rcall	.-2076   	; 0x32c <enable_LED>
     b48:	45 c0       	rjmp	.+138    	; 0xbd4 <Kernel_Unlock_Mutex+0x230>
     b4a:	80 81       	ld	r24, Z
     b4c:	91 81       	ldd	r25, Z+1	; 0x01
     b4e:	03 97       	sbiw	r24, 0x03	; 3
     b50:	09 f0       	breq	.+2      	; 0xb54 <Kernel_Unlock_Mutex+0x1b0>
     b52:	40 c0       	rjmp	.+128    	; 0xbd4 <Kernel_Unlock_Mutex+0x230>
     b54:	86 e0       	ldi	r24, 0x06	; 6
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	e9 db       	rcall	.-2094   	; 0x32c <enable_LED>
     b5a:	3c c0       	rjmp	.+120    	; 0xbd4 <Kernel_Unlock_Mutex+0x230>
     b5c:	27 e0       	ldi	r18, 0x07	; 7
     b5e:	20 9f       	mul	r18, r16
     b60:	f0 01       	movw	r30, r0
     b62:	21 9f       	mul	r18, r17
     b64:	f0 0d       	add	r31, r0
     b66:	11 24       	eor	r1, r1
     b68:	e1 5b       	subi	r30, 0xB1	; 177
     b6a:	fd 4f       	sbci	r31, 0xFD	; 253
     b6c:	21 e0       	ldi	r18, 0x01	; 1
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	36 83       	std	Z+6, r19	; 0x06
     b72:	25 83       	std	Z+5, r18	; 0x05
     b74:	dc 01       	movw	r26, r24
     b76:	2d 91       	ld	r18, X+
     b78:	3c 91       	ld	r19, X
     b7a:	34 83       	std	Z+4, r19	; 0x04
     b7c:	23 83       	std	Z+3, r18	; 0x03
     b7e:	20 91 25 02 	lds	r18, 0x0225
     b82:	30 91 26 02 	lds	r19, 0x0226
     b86:	d9 01       	movw	r26, r18
     b88:	a9 5f       	subi	r26, 0xF9	; 249
     b8a:	be 4f       	sbci	r27, 0xFE	; 254
     b8c:	4d 91       	ld	r20, X+
     b8e:	5c 91       	ld	r21, X
     b90:	11 97       	sbiw	r26, 0x01	; 1
     b92:	fc 01       	movw	r30, r24
     b94:	e9 5f       	subi	r30, 0xF9	; 249
     b96:	fe 4f       	sbci	r31, 0xFE	; 254
     b98:	51 83       	std	Z+1, r21	; 0x01
     b9a:	40 83       	st	Z, r20
     b9c:	33 97       	sbiw	r30, 0x03	; 3
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	80 83       	st	Z, r24
     ba2:	f9 01       	movw	r30, r18
     ba4:	eb 5f       	subi	r30, 0xFB	; 251
     ba6:	fe 4f       	sbci	r31, 0xFE	; 254
     ba8:	40 81       	ld	r20, Z
     baa:	51 81       	ldd	r21, Z+1	; 0x01
     bac:	11 96       	adiw	r26, 0x01	; 1
     bae:	5c 93       	st	X, r21
     bb0:	4e 93       	st	-X, r20
     bb2:	31 97       	sbiw	r30, 0x01	; 1
     bb4:	80 83       	st	Z, r24
     bb6:	47 e1       	ldi	r20, 0x17	; 23
     bb8:	52 e0       	ldi	r21, 0x02	; 2
     bba:	60 ee       	ldi	r22, 0xE0	; 224
     bbc:	74 e1       	ldi	r23, 0x14	; 20
     bbe:	ce 01       	movw	r24, r28
     bc0:	01 96       	adiw	r24, 0x01	; 1
     bc2:	65 d6       	rcall	.+3274   	; 0x188e <enqueueRQ>
     bc4:	47 e1       	ldi	r20, 0x17	; 23
     bc6:	52 e0       	ldi	r21, 0x02	; 2
     bc8:	60 ee       	ldi	r22, 0xE0	; 224
     bca:	74 e1       	ldi	r23, 0x14	; 20
     bcc:	85 e2       	ldi	r24, 0x25	; 37
     bce:	92 e0       	ldi	r25, 0x02	; 2
     bd0:	5e d6       	rcall	.+3260   	; 0x188e <enqueueRQ>
     bd2:	b7 de       	rcall	.-658    	; 0x942 <Dispatch>
     bd4:	0f 90       	pop	r0
     bd6:	0f 90       	pop	r0
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	1f 91       	pop	r17
     bde:	0f 91       	pop	r16
     be0:	08 95       	ret

00000be2 <OS_Start>:
     be2:	2f 92       	push	r2
     be4:	3f 92       	push	r3
     be6:	4f 92       	push	r4
     be8:	5f 92       	push	r5
     bea:	6f 92       	push	r6
     bec:	7f 92       	push	r7
     bee:	8f 92       	push	r8
     bf0:	9f 92       	push	r9
     bf2:	af 92       	push	r10
     bf4:	bf 92       	push	r11
     bf6:	cf 92       	push	r12
     bf8:	df 92       	push	r13
     bfa:	ef 92       	push	r14
     bfc:	ff 92       	push	r15
     bfe:	0f 93       	push	r16
     c00:	1f 93       	push	r17
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
     c06:	00 d0       	rcall	.+0      	; 0xc08 <OS_Start+0x26>
     c08:	1f 92       	push	r1
     c0a:	cd b7       	in	r28, 0x3d	; 61
     c0c:	de b7       	in	r29, 0x3e	; 62
     c0e:	80 91 23 02 	lds	r24, 0x0223
     c12:	90 91 24 02 	lds	r25, 0x0224
     c16:	89 2b       	or	r24, r25
     c18:	09 f0       	breq	.+2      	; 0xc1c <OS_Start+0x3a>
     c1a:	06 c4       	rjmp	.+2060   	; 0x1428 <OS_Start+0x846>
     c1c:	80 91 21 02 	lds	r24, 0x0221
     c20:	90 91 22 02 	lds	r25, 0x0222
     c24:	89 2b       	or	r24, r25
     c26:	09 f4       	brne	.+2      	; 0xc2a <OS_Start+0x48>
     c28:	ff c3       	rjmp	.+2046   	; 0x1428 <OS_Start+0x846>
     c2a:	f8 94       	cli
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	90 93 24 02 	sts	0x0224, r25
     c34:	80 93 23 02 	sts	0x0223, r24
     c38:	84 de       	rcall	.-760    	; 0x942 <Dispatch>
     c3a:	0f 2e       	mov	r0, r31
     c3c:	f7 e2       	ldi	r31, 0x27	; 39
     c3e:	ef 2e       	mov	r14, r31
     c40:	f2 e0       	ldi	r31, 0x02	; 2
     c42:	ff 2e       	mov	r15, r31
     c44:	f0 2d       	mov	r31, r0
     c46:	0f 2e       	mov	r0, r31
     c48:	fe e1       	ldi	r31, 0x1E	; 30
     c4a:	af 2e       	mov	r10, r31
     c4c:	bb 24       	eor	r11, r11
     c4e:	b3 94       	inc	r11
     c50:	f0 2d       	mov	r31, r0
     c52:	0f 2e       	mov	r0, r31
     c54:	f3 e6       	ldi	r31, 0x63	; 99
     c56:	2f 2e       	mov	r2, r31
     c58:	31 2c       	mov	r3, r1
     c5a:	f0 2d       	mov	r31, r0
     c5c:	88 24       	eor	r8, r8
     c5e:	83 94       	inc	r8
     c60:	91 2c       	mov	r9, r1
     c62:	0f 2e       	mov	r0, r31
     c64:	ff e4       	ldi	r31, 0x4F	; 79
     c66:	cf 2e       	mov	r12, r31
     c68:	f2 e0       	ldi	r31, 0x02	; 2
     c6a:	df 2e       	mov	r13, r31
     c6c:	f0 2d       	mov	r31, r0
     c6e:	07 e8       	ldi	r16, 0x87	; 135
     c70:	12 e0       	ldi	r17, 0x02	; 2
     c72:	0f 2e       	mov	r0, r31
     c74:	fa e0       	ldi	r31, 0x0A	; 10
     c76:	6f 2e       	mov	r6, r31
     c78:	71 2c       	mov	r7, r1
     c7a:	f0 2d       	mov	r31, r0
     c7c:	e0 91 25 02 	lds	r30, 0x0225
     c80:	f0 91 26 02 	lds	r31, 0x0226
     c84:	df 01       	movw	r26, r30
     c86:	a3 5f       	subi	r26, 0xF3	; 243
     c88:	be 4f       	sbci	r27, 0xFE	; 254
     c8a:	1c 92       	st	X, r1
     c8c:	82 81       	ldd	r24, Z+2	; 0x02
     c8e:	93 81       	ldd	r25, Z+3	; 0x03
     c90:	90 93 01 15 	sts	0x1501, r25
     c94:	80 93 00 15 	sts	0x1500, r24
     c98:	54 da       	rcall	.-2904   	; 0x142 <CSwitch>
     c9a:	82 e0       	ldi	r24, 0x02	; 2
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	53 db       	rcall	.-2394   	; 0x346 <disable_LED>
     ca0:	85 e0       	ldi	r24, 0x05	; 5
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	50 db       	rcall	.-2400   	; 0x346 <disable_LED>
     ca6:	86 e0       	ldi	r24, 0x06	; 6
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	4d db       	rcall	.-2406   	; 0x346 <disable_LED>
     cac:	80 91 25 02 	lds	r24, 0x0225
     cb0:	90 91 26 02 	lds	r25, 0x0226
     cb4:	9c 83       	std	Y+4, r25	; 0x04
     cb6:	8b 83       	std	Y+3, r24	; 0x03
     cb8:	80 91 00 15 	lds	r24, 0x1500
     cbc:	90 91 01 15 	lds	r25, 0x1501
     cc0:	ab 81       	ldd	r26, Y+3	; 0x03
     cc2:	bc 81       	ldd	r27, Y+4	; 0x04
     cc4:	13 96       	adiw	r26, 0x03	; 3
     cc6:	9c 93       	st	X, r25
     cc8:	8e 93       	st	-X, r24
     cca:	12 97       	sbiw	r26, 0x02	; 2
     ccc:	fd 01       	movw	r30, r26
     cce:	e3 5f       	subi	r30, 0xF3	; 243
     cd0:	fe 4f       	sbci	r31, 0xFE	; 254
     cd2:	e0 81       	ld	r30, Z
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	ed 30       	cpi	r30, 0x0D	; 13
     cd8:	f1 05       	cpc	r31, r1
     cda:	80 f6       	brcc	.-96     	; 0xc7c <OS_Start+0x9a>
     cdc:	88 27       	eor	r24, r24
     cde:	ee 58       	subi	r30, 0x8E	; 142
     ce0:	ff 4f       	sbci	r31, 0xFF	; 255
     ce2:	8f 4f       	sbci	r24, 0xFF	; 255
     ce4:	0c 94 03 11 	jmp	0x2206	; 0x2206 <__tablejump2__>
     ce8:	eb 81       	ldd	r30, Y+3	; 0x03
     cea:	fc 81       	ldd	r31, Y+4	; 0x04
     cec:	e4 5e       	subi	r30, 0xE4	; 228
     cee:	fe 4f       	sbci	r31, 0xFE	; 254
     cf0:	80 81       	ld	r24, Z
     cf2:	91 81       	ldd	r25, Z+1	; 0x01
     cf4:	e7 e8       	ldi	r30, 0x87	; 135
     cf6:	f2 e0       	ldi	r31, 0x02	; 2
     cf8:	20 81       	ld	r18, Z
     cfa:	31 81       	ldd	r19, Z+1	; 0x01
     cfc:	28 17       	cp	r18, r24
     cfe:	39 07       	cpc	r19, r25
     d00:	09 f0       	breq	.+2      	; 0xd04 <OS_Start+0x122>
     d02:	89 c0       	rjmp	.+274    	; 0xe16 <OS_Start+0x234>
     d04:	0d c3       	rjmp	.+1562   	; 0x1320 <OS_Start+0x73e>
     d06:	eb 81       	ldd	r30, Y+3	; 0x03
     d08:	fc 81       	ldd	r31, Y+4	; 0x04
     d0a:	e7 5f       	subi	r30, 0xF7	; 247
     d0c:	fe 4f       	sbci	r31, 0xFE	; 254
     d0e:	40 81       	ld	r20, Z
     d10:	51 81       	ldd	r21, Z+1	; 0x01
     d12:	eb 81       	ldd	r30, Y+3	; 0x03
     d14:	fc 81       	ldd	r31, Y+4	; 0x04
     d16:	eb 5f       	subi	r30, 0xFB	; 251
     d18:	fe 4f       	sbci	r31, 0xFE	; 254
     d1a:	60 81       	ld	r22, Z
     d1c:	71 81       	ldd	r23, Z+1	; 0x01
     d1e:	eb 81       	ldd	r30, Y+3	; 0x03
     d20:	fc 81       	ldd	r31, Y+4	; 0x04
     d22:	e5 5f       	subi	r30, 0xF5	; 245
     d24:	fe 4f       	sbci	r31, 0xFE	; 254
     d26:	80 81       	ld	r24, Z
     d28:	91 81       	ldd	r25, Z+1	; 0x01
     d2a:	52 dd       	rcall	.-1372   	; 0x7d0 <Kernel_Create_Task>
     d2c:	eb 81       	ldd	r30, Y+3	; 0x03
     d2e:	fc 81       	ldd	r31, Y+4	; 0x04
     d30:	e2 5f       	subi	r30, 0xF2	; 242
     d32:	fe 4f       	sbci	r31, 0xFE	; 254
     d34:	91 83       	std	Z+1, r25	; 0x01
     d36:	80 83       	st	Z, r24
     d38:	a1 cf       	rjmp	.-190    	; 0xc7c <OS_Start+0x9a>
     d3a:	eb 81       	ldd	r30, Y+3	; 0x03
     d3c:	fc 81       	ldd	r31, Y+4	; 0x04
     d3e:	ec 5f       	subi	r30, 0xFC	; 252
     d40:	fe 4f       	sbci	r31, 0xFE	; 254
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	80 83       	st	Z, r24
     d46:	47 e1       	ldi	r20, 0x17	; 23
     d48:	52 e0       	ldi	r21, 0x02	; 2
     d4a:	60 ee       	ldi	r22, 0xE0	; 224
     d4c:	74 e1       	ldi	r23, 0x14	; 20
     d4e:	85 e2       	ldi	r24, 0x25	; 37
     d50:	92 e0       	ldi	r25, 0x02	; 2
     d52:	9d d5       	rcall	.+2874   	; 0x188e <enqueueRQ>
     d54:	f6 dd       	rcall	.-1044   	; 0x942 <Dispatch>
     d56:	92 cf       	rjmp	.-220    	; 0xc7c <OS_Start+0x9a>
     d58:	eb 81       	ldd	r30, Y+3	; 0x03
     d5a:	fc 81       	ldd	r31, Y+4	; 0x04
     d5c:	ec 5f       	subi	r30, 0xFC	; 252
     d5e:	fe 4f       	sbci	r31, 0xFE	; 254
     d60:	83 e0       	ldi	r24, 0x03	; 3
     d62:	80 83       	st	Z, r24
     d64:	45 e1       	ldi	r20, 0x15	; 21
     d66:	52 e0       	ldi	r21, 0x02	; 2
     d68:	60 ec       	ldi	r22, 0xC0	; 192
     d6a:	74 e1       	ldi	r23, 0x14	; 20
     d6c:	85 e2       	ldi	r24, 0x25	; 37
     d6e:	92 e0       	ldi	r25, 0x02	; 2
     d70:	1d d5       	rcall	.+2618   	; 0x17ac <enqueueSQ>
     d72:	e7 dd       	rcall	.-1074   	; 0x942 <Dispatch>
     d74:	83 cf       	rjmp	.-250    	; 0xc7c <OS_Start+0x9a>
     d76:	ab 81       	ldd	r26, Y+3	; 0x03
     d78:	bc 81       	ldd	r27, Y+4	; 0x04
     d7a:	2d 91       	ld	r18, X+
     d7c:	3c 91       	ld	r19, X
     d7e:	11 97       	sbiw	r26, 0x01	; 1
     d80:	fd 01       	movw	r30, r26
     d82:	e4 5e       	subi	r30, 0xE4	; 228
     d84:	fe 4f       	sbci	r31, 0xFE	; 254
     d86:	80 81       	ld	r24, Z
     d88:	91 81       	ldd	r25, Z+1	; 0x01
     d8a:	28 17       	cp	r18, r24
     d8c:	39 07       	cpc	r19, r25
     d8e:	51 f0       	breq	.+20     	; 0xda4 <OS_Start+0x1c2>
     d90:	80 81       	ld	r24, Z
     d92:	91 81       	ldd	r25, Z+1	; 0x01
     d94:	e7 e8       	ldi	r30, 0x87	; 135
     d96:	f2 e0       	ldi	r31, 0x02	; 2
     d98:	20 81       	ld	r18, Z
     d9a:	31 81       	ldd	r19, Z+1	; 0x01
     d9c:	28 17       	cp	r18, r24
     d9e:	39 07       	cpc	r19, r25
     da0:	41 f4       	brne	.+16     	; 0xdb2 <OS_Start+0x1d0>
     da2:	ad c2       	rjmp	.+1370   	; 0x12fe <OS_Start+0x71c>
     da4:	eb 81       	ldd	r30, Y+3	; 0x03
     da6:	fc 81       	ldd	r31, Y+4	; 0x04
     da8:	e6 5e       	subi	r30, 0xE6	; 230
     daa:	fe 4f       	sbci	r31, 0xFE	; 254
     dac:	91 82       	std	Z+1, r9	; 0x01
     dae:	80 82       	st	Z, r8
     db0:	1a c0       	rjmp	.+52     	; 0xde6 <OS_Start+0x204>
     db2:	e5 ea       	ldi	r30, 0xA5	; 165
     db4:	f3 e0       	ldi	r31, 0x03	; 3
     db6:	c4 01       	movw	r24, r8
     db8:	ab 81       	ldd	r26, Y+3	; 0x03
     dba:	bc 81       	ldd	r27, Y+4	; 0x04
     dbc:	a4 5e       	subi	r26, 0xE4	; 228
     dbe:	be 4f       	sbci	r27, 0xFE	; 254
     dc0:	6b 81       	ldd	r22, Y+3	; 0x03
     dc2:	7c 81       	ldd	r23, Y+4	; 0x04
     dc4:	2d 91       	ld	r18, X+
     dc6:	3c 91       	ld	r19, X
     dc8:	11 97       	sbiw	r26, 0x01	; 1
     dca:	40 81       	ld	r20, Z
     dcc:	51 81       	ldd	r21, Z+1	; 0x01
     dce:	42 17       	cp	r20, r18
     dd0:	53 07       	cpc	r21, r19
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <OS_Start+0x1f4>
     dd4:	97 c2       	rjmp	.+1326   	; 0x1304 <OS_Start+0x722>
     dd6:	01 96       	adiw	r24, 0x01	; 1
     dd8:	e2 5e       	subi	r30, 0xE2	; 226
     dda:	fe 4f       	sbci	r31, 0xFE	; 254
     ddc:	80 31       	cpi	r24, 0x10	; 16
     dde:	91 05       	cpc	r25, r1
     de0:	89 f7       	brne	.-30     	; 0xdc4 <OS_Start+0x1e2>
     de2:	7c 83       	std	Y+4, r23	; 0x04
     de4:	6b 83       	std	Y+3, r22	; 0x03
     de6:	eb 81       	ldd	r30, Y+3	; 0x03
     de8:	fc 81       	ldd	r31, Y+4	; 0x04
     dea:	e6 5e       	subi	r30, 0xE6	; 230
     dec:	fe 4f       	sbci	r31, 0xFE	; 254
     dee:	80 81       	ld	r24, Z
     df0:	91 81       	ldd	r25, Z+1	; 0x01
     df2:	89 2b       	or	r24, r25
     df4:	09 f4       	brne	.+2      	; 0xdf8 <OS_Start+0x216>
     df6:	42 cf       	rjmp	.-380    	; 0xc7c <OS_Start+0x9a>
     df8:	eb 81       	ldd	r30, Y+3	; 0x03
     dfa:	fc 81       	ldd	r31, Y+4	; 0x04
     dfc:	ec 5f       	subi	r30, 0xFC	; 252
     dfe:	fe 4f       	sbci	r31, 0xFE	; 254
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	80 83       	st	Z, r24
     e04:	47 e1       	ldi	r20, 0x17	; 23
     e06:	52 e0       	ldi	r21, 0x02	; 2
     e08:	60 ee       	ldi	r22, 0xE0	; 224
     e0a:	74 e1       	ldi	r23, 0x14	; 20
     e0c:	85 e2       	ldi	r24, 0x25	; 37
     e0e:	92 e0       	ldi	r25, 0x02	; 2
     e10:	3e d5       	rcall	.+2684   	; 0x188e <enqueueRQ>
     e12:	97 dd       	rcall	.-1234   	; 0x942 <Dispatch>
     e14:	33 cf       	rjmp	.-410    	; 0xc7c <OS_Start+0x9a>
     e16:	e5 ea       	ldi	r30, 0xA5	; 165
     e18:	f3 e0       	ldi	r31, 0x03	; 3
     e1a:	c4 01       	movw	r24, r8
     e1c:	ab 81       	ldd	r26, Y+3	; 0x03
     e1e:	bc 81       	ldd	r27, Y+4	; 0x04
     e20:	a4 5e       	subi	r26, 0xE4	; 228
     e22:	be 4f       	sbci	r27, 0xFE	; 254
     e24:	6b 81       	ldd	r22, Y+3	; 0x03
     e26:	7c 81       	ldd	r23, Y+4	; 0x04
     e28:	2d 91       	ld	r18, X+
     e2a:	3c 91       	ld	r19, X
     e2c:	11 97       	sbiw	r26, 0x01	; 1
     e2e:	40 81       	ld	r20, Z
     e30:	51 81       	ldd	r21, Z+1	; 0x01
     e32:	42 17       	cp	r20, r18
     e34:	53 07       	cpc	r21, r19
     e36:	09 f4       	brne	.+2      	; 0xe3a <OS_Start+0x258>
     e38:	76 c2       	rjmp	.+1260   	; 0x1326 <OS_Start+0x744>
     e3a:	01 96       	adiw	r24, 0x01	; 1
     e3c:	e2 5e       	subi	r30, 0xE2	; 226
     e3e:	fe 4f       	sbci	r31, 0xFE	; 254
     e40:	80 31       	cpi	r24, 0x10	; 16
     e42:	91 05       	cpc	r25, r1
     e44:	89 f7       	brne	.-30     	; 0xe28 <OS_Start+0x246>
     e46:	1a cf       	rjmp	.-460    	; 0xc7c <OS_Start+0x9a>
     e48:	8a 9d       	mul	r24, r10
     e4a:	90 01       	movw	r18, r0
     e4c:	8b 9d       	mul	r24, r11
     e4e:	30 0d       	add	r19, r0
     e50:	9a 9d       	mul	r25, r10
     e52:	30 0d       	add	r19, r0
     e54:	11 24       	eor	r1, r1
     e56:	c9 01       	movw	r24, r18
     e58:	89 57       	subi	r24, 0x79	; 121
     e5a:	9d 4f       	sbci	r25, 0xFD	; 253
     e5c:	fc 01       	movw	r30, r24
     e5e:	e6 5e       	subi	r30, 0xE6	; 230
     e60:	fe 4f       	sbci	r31, 0xFE	; 254
     e62:	11 82       	std	Z+1, r1	; 0x01
     e64:	10 82       	st	Z, r1
     e66:	eb 81       	ldd	r30, Y+3	; 0x03
     e68:	fc 81       	ldd	r31, Y+4	; 0x04
     e6a:	e9 5f       	subi	r30, 0xF9	; 249
     e6c:	fe 4f       	sbci	r31, 0xFE	; 254
     e6e:	20 81       	ld	r18, Z
     e70:	31 81       	ldd	r19, Z+1	; 0x01
     e72:	fc 01       	movw	r30, r24
     e74:	e9 5f       	subi	r30, 0xF9	; 249
     e76:	fe 4f       	sbci	r31, 0xFE	; 254
     e78:	80 81       	ld	r24, Z
     e7a:	91 81       	ldd	r25, Z+1	; 0x01
     e7c:	82 17       	cp	r24, r18
     e7e:	93 07       	cpc	r25, r19
     e80:	08 f0       	brcs	.+2      	; 0xe84 <OS_Start+0x2a2>
     e82:	fc ce       	rjmp	.-520    	; 0xc7c <OS_Start+0x9a>
     e84:	eb 81       	ldd	r30, Y+3	; 0x03
     e86:	fc 81       	ldd	r31, Y+4	; 0x04
     e88:	ec 5f       	subi	r30, 0xFC	; 252
     e8a:	fe 4f       	sbci	r31, 0xFE	; 254
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	80 83       	st	Z, r24
     e90:	47 e1       	ldi	r20, 0x17	; 23
     e92:	52 e0       	ldi	r21, 0x02	; 2
     e94:	60 ee       	ldi	r22, 0xE0	; 224
     e96:	74 e1       	ldi	r23, 0x14	; 20
     e98:	85 e2       	ldi	r24, 0x25	; 37
     e9a:	92 e0       	ldi	r25, 0x02	; 2
     e9c:	f8 d4       	rcall	.+2544   	; 0x188e <enqueueRQ>
     e9e:	51 dd       	rcall	.-1374   	; 0x942 <Dispatch>
     ea0:	ed ce       	rjmp	.-550    	; 0xc7c <OS_Start+0x9a>
     ea2:	eb 81       	ldd	r30, Y+3	; 0x03
     ea4:	fc 81       	ldd	r31, Y+4	; 0x04
     ea6:	e9 5f       	subi	r30, 0xF9	; 249
     ea8:	fe 4f       	sbci	r31, 0xFE	; 254
     eaa:	11 82       	std	Z+1, r1	; 0x01
     eac:	10 82       	st	Z, r1
     eae:	eb 81       	ldd	r30, Y+3	; 0x03
     eb0:	fc 81       	ldd	r31, Y+4	; 0x04
     eb2:	eb 5f       	subi	r30, 0xFB	; 251
     eb4:	fe 4f       	sbci	r31, 0xFE	; 254
     eb6:	11 82       	std	Z+1, r1	; 0x01
     eb8:	10 82       	st	Z, r1
     eba:	eb 81       	ldd	r30, Y+3	; 0x03
     ebc:	fc 81       	ldd	r31, Y+4	; 0x04
     ebe:	ec 5f       	subi	r30, 0xFC	; 252
     ec0:	fe 4f       	sbci	r31, 0xFE	; 254
     ec2:	86 e0       	ldi	r24, 0x06	; 6
     ec4:	80 83       	st	Z, r24
     ec6:	dc 82       	std	Y+4, r13	; 0x04
     ec8:	cb 82       	std	Y+3, r12	; 0x03
     eca:	e0 91 25 02 	lds	r30, 0x0225
     ece:	f0 91 26 02 	lds	r31, 0x0226
     ed2:	80 81       	ld	r24, Z
     ed4:	91 81       	ldd	r25, Z+1	; 0x01
     ed6:	ab 81       	ldd	r26, Y+3	; 0x03
     ed8:	bc 81       	ldd	r27, Y+4	; 0x04
     eda:	13 96       	adiw	r26, 0x03	; 3
     edc:	2d 91       	ld	r18, X+
     ede:	3c 91       	ld	r19, X
     ee0:	14 97       	sbiw	r26, 0x04	; 4
     ee2:	28 17       	cp	r18, r24
     ee4:	39 07       	cpc	r19, r25
     ee6:	39 f4       	brne	.+14     	; 0xef6 <OS_Start+0x314>
     ee8:	8d 91       	ld	r24, X+
     eea:	9c 91       	ld	r25, X
     eec:	ec 5e       	subi	r30, 0xEC	; 236
     eee:	fe 4f       	sbci	r31, 0xFE	; 254
     ef0:	91 83       	std	Z+1, r25	; 0x01
     ef2:	80 83       	st	Z, r24
     ef4:	57 dd       	rcall	.-1362   	; 0x9a4 <Kernel_Unlock_Mutex>
     ef6:	eb 81       	ldd	r30, Y+3	; 0x03
     ef8:	fc 81       	ldd	r31, Y+4	; 0x04
     efa:	37 96       	adiw	r30, 0x07	; 7
     efc:	fc 83       	std	Y+4, r31	; 0x04
     efe:	eb 83       	std	Y+3, r30	; 0x03
     f00:	e0 17       	cp	r30, r16
     f02:	f1 07       	cpc	r31, r17
     f04:	11 f7       	brne	.-60     	; 0xeca <OS_Start+0x2e8>
     f06:	e0 91 25 02 	lds	r30, 0x0225
     f0a:	f0 91 26 02 	lds	r31, 0x0226
     f0e:	df 01       	movw	r26, r30
     f10:	ac 5f       	subi	r26, 0xFC	; 252
     f12:	be 4f       	sbci	r27, 0xFE	; 254
     f14:	1c 92       	st	X, r1
     f16:	52 96       	adiw	r26, 0x12	; 18
     f18:	11 96       	adiw	r26, 0x01	; 1
     f1a:	3c 92       	st	X, r3
     f1c:	2e 92       	st	-X, r2
     f1e:	1f 97       	sbiw	r26, 0x0f	; 15
     f20:	11 96       	adiw	r26, 0x01	; 1
     f22:	7c 92       	st	X, r7
     f24:	6e 92       	st	-X, r6
     f26:	12 97       	sbiw	r26, 0x02	; 2
     f28:	11 96       	adiw	r26, 0x01	; 1
     f2a:	7c 92       	st	X, r7
     f2c:	6e 92       	st	-X, r6
     f2e:	11 82       	std	Z+1, r1	; 0x01
     f30:	10 82       	st	Z, r1
     f32:	80 91 21 02 	lds	r24, 0x0221
     f36:	90 91 22 02 	lds	r25, 0x0222
     f3a:	01 97       	sbiw	r24, 0x01	; 1
     f3c:	90 93 22 02 	sts	0x0222, r25
     f40:	80 93 21 02 	sts	0x0221, r24
     f44:	fe dc       	rcall	.-1540   	; 0x942 <Dispatch>
     f46:	9a ce       	rjmp	.-716    	; 0xc7c <OS_Start+0x9a>
     f48:	80 91 1d 02 	lds	r24, 0x021D
     f4c:	90 91 1e 02 	lds	r25, 0x021E
     f50:	08 97       	sbiw	r24, 0x08	; 8
     f52:	41 f1       	breq	.+80     	; 0xfa4 <OS_Start+0x3c2>
     f54:	d6 01       	movw	r26, r12
     f56:	12 96       	adiw	r26, 0x02	; 2
     f58:	8c 91       	ld	r24, X
     f5a:	88 23       	and	r24, r24
     f5c:	89 f0       	breq	.+34     	; 0xf80 <OS_Start+0x39e>
     f5e:	e8 e5       	ldi	r30, 0x58	; 88
     f60:	f2 e0       	ldi	r31, 0x02	; 2
     f62:	94 01       	movw	r18, r8
     f64:	4b 81       	ldd	r20, Y+3	; 0x03
     f66:	5c 81       	ldd	r21, Y+4	; 0x04
     f68:	80 81       	ld	r24, Z
     f6a:	88 23       	and	r24, r24
     f6c:	61 f0       	breq	.+24     	; 0xf86 <OS_Start+0x3a4>
     f6e:	2f 5f       	subi	r18, 0xFF	; 255
     f70:	3f 4f       	sbci	r19, 0xFF	; 255
     f72:	37 96       	adiw	r30, 0x07	; 7
     f74:	28 30       	cpi	r18, 0x08	; 8
     f76:	31 05       	cpc	r19, r1
     f78:	b9 f7       	brne	.-18     	; 0xf68 <OS_Start+0x386>
     f7a:	5c 83       	std	Y+4, r21	; 0x04
     f7c:	4b 83       	std	Y+3, r20	; 0x03
     f7e:	05 c0       	rjmp	.+10     	; 0xf8a <OS_Start+0x3a8>
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <OS_Start+0x3a8>
     f86:	5c 83       	std	Y+4, r21	; 0x04
     f88:	4b 83       	std	Y+3, r20	; 0x03
     f8a:	c9 01       	movw	r24, r18
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	82 1b       	sub	r24, r18
     f9a:	93 0b       	sbc	r25, r19
     f9c:	81 5b       	subi	r24, 0xB1	; 177
     f9e:	9d 4f       	sbci	r25, 0xFD	; 253
     fa0:	47 dc       	rcall	.-1906   	; 0x830 <Kernel_Init_Mutex_At>
     fa2:	2c 01       	movw	r4, r24
     fa4:	eb 81       	ldd	r30, Y+3	; 0x03
     fa6:	fc 81       	ldd	r31, Y+4	; 0x04
     fa8:	e2 5f       	subi	r30, 0xF2	; 242
     faa:	fe 4f       	sbci	r31, 0xFE	; 254
     fac:	51 82       	std	Z+1, r5	; 0x01
     fae:	40 82       	st	Z, r4
     fb0:	65 ce       	rjmp	.-822    	; 0xc7c <OS_Start+0x9a>
     fb2:	eb 81       	ldd	r30, Y+3	; 0x03
     fb4:	fc 81       	ldd	r31, Y+4	; 0x04
     fb6:	ec 5e       	subi	r30, 0xEC	; 236
     fb8:	fe 4f       	sbci	r31, 0xFE	; 254
     fba:	40 81       	ld	r20, Z
     fbc:	51 81       	ldd	r21, Z+1	; 0x01
     fbe:	f6 01       	movw	r30, r12
     fc0:	80 81       	ld	r24, Z
     fc2:	91 81       	ldd	r25, Z+1	; 0x01
     fc4:	48 17       	cp	r20, r24
     fc6:	59 07       	cpc	r21, r25
     fc8:	09 f4       	brne	.+2      	; 0xfcc <OS_Start+0x3ea>
     fca:	bf c1       	rjmp	.+894    	; 0x134a <OS_Start+0x768>
     fcc:	c4 01       	movw	r24, r8
     fce:	6b 81       	ldd	r22, Y+3	; 0x03
     fd0:	7c 81       	ldd	r23, Y+4	; 0x04
     fd2:	27 81       	ldd	r18, Z+7	; 0x07
     fd4:	30 85       	ldd	r19, Z+8	; 0x08
     fd6:	42 17       	cp	r20, r18
     fd8:	53 07       	cpc	r21, r19
     fda:	09 f4       	brne	.+2      	; 0xfde <OS_Start+0x3fc>
     fdc:	b9 c1       	rjmp	.+882    	; 0x1350 <OS_Start+0x76e>
     fde:	01 96       	adiw	r24, 0x01	; 1
     fe0:	37 96       	adiw	r30, 0x07	; 7
     fe2:	88 30       	cpi	r24, 0x08	; 8
     fe4:	91 05       	cpc	r25, r1
     fe6:	a9 f7       	brne	.-22     	; 0xfd2 <OS_Start+0x3f0>
     fe8:	49 ce       	rjmp	.-878    	; 0xc7c <OS_Start+0x9a>
     fea:	fc 01       	movw	r30, r24
     fec:	ee 0f       	add	r30, r30
     fee:	ff 1f       	adc	r31, r31
     ff0:	ee 0f       	add	r30, r30
     ff2:	ff 1f       	adc	r31, r31
     ff4:	ee 0f       	add	r30, r30
     ff6:	ff 1f       	adc	r31, r31
     ff8:	e8 1b       	sub	r30, r24
     ffa:	f9 0b       	sbc	r31, r25
     ffc:	e1 5b       	subi	r30, 0xB1	; 177
     ffe:	fd 4f       	sbci	r31, 0xFD	; 253
    1000:	82 e0       	ldi	r24, 0x02	; 2
    1002:	82 83       	std	Z+2, r24	; 0x02
    1004:	ab 81       	ldd	r26, Y+3	; 0x03
    1006:	bc 81       	ldd	r27, Y+4	; 0x04
    1008:	8d 91       	ld	r24, X+
    100a:	9c 91       	ld	r25, X
    100c:	94 83       	std	Z+4, r25	; 0x04
    100e:	83 83       	std	Z+3, r24	; 0x03
    1010:	85 81       	ldd	r24, Z+5	; 0x05
    1012:	96 81       	ldd	r25, Z+6	; 0x06
    1014:	01 96       	adiw	r24, 0x01	; 1
    1016:	96 83       	std	Z+6, r25	; 0x06
    1018:	85 83       	std	Z+5, r24	; 0x05
    101a:	30 ce       	rjmp	.-928    	; 0xc7c <OS_Start+0x9a>
    101c:	fc 01       	movw	r30, r24
    101e:	ee 0f       	add	r30, r30
    1020:	ff 1f       	adc	r31, r31
    1022:	ee 0f       	add	r30, r30
    1024:	ff 1f       	adc	r31, r31
    1026:	ee 0f       	add	r30, r30
    1028:	ff 1f       	adc	r31, r31
    102a:	e8 1b       	sub	r30, r24
    102c:	f9 0b       	sbc	r31, r25
    102e:	e1 5b       	subi	r30, 0xB1	; 177
    1030:	fd 4f       	sbci	r31, 0xFD	; 253
    1032:	23 81       	ldd	r18, Z+3	; 0x03
    1034:	34 81       	ldd	r19, Z+4	; 0x04
    1036:	eb 81       	ldd	r30, Y+3	; 0x03
    1038:	fc 81       	ldd	r31, Y+4	; 0x04
    103a:	40 81       	ld	r20, Z
    103c:	51 81       	ldd	r21, Z+1	; 0x01
    103e:	24 17       	cp	r18, r20
    1040:	35 07       	cpc	r19, r21
    1042:	89 f4       	brne	.+34     	; 0x1066 <OS_Start+0x484>
    1044:	fc 01       	movw	r30, r24
    1046:	ee 0f       	add	r30, r30
    1048:	ff 1f       	adc	r31, r31
    104a:	ee 0f       	add	r30, r30
    104c:	ff 1f       	adc	r31, r31
    104e:	ee 0f       	add	r30, r30
    1050:	ff 1f       	adc	r31, r31
    1052:	e8 1b       	sub	r30, r24
    1054:	f9 0b       	sbc	r31, r25
    1056:	e1 5b       	subi	r30, 0xB1	; 177
    1058:	fd 4f       	sbci	r31, 0xFD	; 253
    105a:	85 81       	ldd	r24, Z+5	; 0x05
    105c:	96 81       	ldd	r25, Z+6	; 0x06
    105e:	01 96       	adiw	r24, 0x01	; 1
    1060:	96 83       	std	Z+6, r25	; 0x06
    1062:	85 83       	std	Z+5, r24	; 0x05
    1064:	0b ce       	rjmp	.-1002   	; 0xc7c <OS_Start+0x9a>
    1066:	e7 e8       	ldi	r30, 0x87	; 135
    1068:	f2 e0       	ldi	r31, 0x02	; 2
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	6b 81       	ldd	r22, Y+3	; 0x03
    1070:	7c 81       	ldd	r23, Y+4	; 0x04
    1072:	40 81       	ld	r20, Z
    1074:	51 81       	ldd	r21, Z+1	; 0x01
    1076:	24 17       	cp	r18, r20
    1078:	35 07       	cpc	r19, r21
    107a:	19 f4       	brne	.+6      	; 0x1082 <OS_Start+0x4a0>
    107c:	21 15       	cp	r18, r1
    107e:	31 05       	cpc	r19, r1
    1080:	31 f4       	brne	.+12     	; 0x108e <OS_Start+0x4ac>
    1082:	01 96       	adiw	r24, 0x01	; 1
    1084:	e2 5e       	subi	r30, 0xE2	; 226
    1086:	fe 4f       	sbci	r31, 0xFE	; 254
    1088:	80 31       	cpi	r24, 0x10	; 16
    108a:	91 05       	cpc	r25, r1
    108c:	91 f7       	brne	.-28     	; 0x1072 <OS_Start+0x490>
    108e:	7c 83       	std	Y+4, r23	; 0x04
    1090:	6b 83       	std	Y+3, r22	; 0x03
    1092:	fb 01       	movw	r30, r22
    1094:	e9 5f       	subi	r30, 0xF9	; 249
    1096:	fe 4f       	sbci	r31, 0xFE	; 254
    1098:	20 81       	ld	r18, Z
    109a:	31 81       	ldd	r19, Z+1	; 0x01
    109c:	8a 9d       	mul	r24, r10
    109e:	f0 01       	movw	r30, r0
    10a0:	8b 9d       	mul	r24, r11
    10a2:	f0 0d       	add	r31, r0
    10a4:	9a 9d       	mul	r25, r10
    10a6:	f0 0d       	add	r31, r0
    10a8:	11 24       	eor	r1, r1
    10aa:	e2 57       	subi	r30, 0x72	; 114
    10ac:	fc 4f       	sbci	r31, 0xFC	; 252
    10ae:	40 81       	ld	r20, Z
    10b0:	51 81       	ldd	r21, Z+1	; 0x01
    10b2:	24 17       	cp	r18, r20
    10b4:	35 07       	cpc	r19, r21
    10b6:	80 f4       	brcc	.+32     	; 0x10d8 <OS_Start+0x4f6>
    10b8:	fb 01       	movw	r30, r22
    10ba:	e9 5f       	subi	r30, 0xF9	; 249
    10bc:	fe 4f       	sbci	r31, 0xFE	; 254
    10be:	20 81       	ld	r18, Z
    10c0:	31 81       	ldd	r19, Z+1	; 0x01
    10c2:	8a 9d       	mul	r24, r10
    10c4:	f0 01       	movw	r30, r0
    10c6:	8b 9d       	mul	r24, r11
    10c8:	f0 0d       	add	r31, r0
    10ca:	9a 9d       	mul	r25, r10
    10cc:	f0 0d       	add	r31, r0
    10ce:	11 24       	eor	r1, r1
    10d0:	e2 57       	subi	r30, 0x72	; 114
    10d2:	fc 4f       	sbci	r31, 0xFC	; 252
    10d4:	31 83       	std	Z+1, r19	; 0x01
    10d6:	20 83       	st	Z, r18
    10d8:	eb 81       	ldd	r30, Y+3	; 0x03
    10da:	fc 81       	ldd	r31, Y+4	; 0x04
    10dc:	ec 5f       	subi	r30, 0xFC	; 252
    10de:	fe 4f       	sbci	r31, 0xFE	; 254
    10e0:	84 e0       	ldi	r24, 0x04	; 4
    10e2:	80 83       	st	Z, r24
    10e4:	43 e1       	ldi	r20, 0x13	; 19
    10e6:	52 e0       	ldi	r21, 0x02	; 2
    10e8:	62 e0       	ldi	r22, 0x02	; 2
    10ea:	75 e1       	ldi	r23, 0x15	; 21
    10ec:	85 e2       	ldi	r24, 0x25	; 37
    10ee:	92 e0       	ldi	r25, 0x02	; 2
    10f0:	2d d3       	rcall	.+1626   	; 0x174c <enqueueWQ>
    10f2:	27 dc       	rcall	.-1970   	; 0x942 <Dispatch>
    10f4:	c3 cd       	rjmp	.-1146   	; 0xc7c <OS_Start+0x9a>
    10f6:	56 dc       	rcall	.-1876   	; 0x9a4 <Kernel_Unlock_Mutex>
    10f8:	c1 cd       	rjmp	.-1150   	; 0xc7c <OS_Start+0x9a>
    10fa:	80 91 1b 02 	lds	r24, 0x021B
    10fe:	90 91 1c 02 	lds	r25, 0x021C
    1102:	08 97       	sbiw	r24, 0x08	; 8
    1104:	31 f1       	breq	.+76     	; 0x1152 <OS_Start+0x570>
    1106:	d7 01       	movw	r26, r14
    1108:	12 96       	adiw	r26, 0x02	; 2
    110a:	8c 91       	ld	r24, X
    110c:	88 23       	and	r24, r24
    110e:	81 f0       	breq	.+32     	; 0x1130 <OS_Start+0x54e>
    1110:	ee e2       	ldi	r30, 0x2E	; 46
    1112:	f2 e0       	ldi	r31, 0x02	; 2
    1114:	c4 01       	movw	r24, r8
    1116:	4b 81       	ldd	r20, Y+3	; 0x03
    1118:	5c 81       	ldd	r21, Y+4	; 0x04
    111a:	20 81       	ld	r18, Z
    111c:	22 23       	and	r18, r18
    111e:	59 f0       	breq	.+22     	; 0x1136 <OS_Start+0x554>
    1120:	01 96       	adiw	r24, 0x01	; 1
    1122:	35 96       	adiw	r30, 0x05	; 5
    1124:	88 30       	cpi	r24, 0x08	; 8
    1126:	91 05       	cpc	r25, r1
    1128:	c1 f7       	brne	.-16     	; 0x111a <OS_Start+0x538>
    112a:	5c 83       	std	Y+4, r21	; 0x04
    112c:	4b 83       	std	Y+3, r20	; 0x03
    112e:	05 c0       	rjmp	.+10     	; 0x113a <OS_Start+0x558>
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	02 c0       	rjmp	.+4      	; 0x113a <OS_Start+0x558>
    1136:	5c 83       	std	Y+4, r21	; 0x04
    1138:	4b 83       	std	Y+3, r20	; 0x03
    113a:	9c 01       	movw	r18, r24
    113c:	22 0f       	add	r18, r18
    113e:	33 1f       	adc	r19, r19
    1140:	22 0f       	add	r18, r18
    1142:	33 1f       	adc	r19, r19
    1144:	82 0f       	add	r24, r18
    1146:	93 1f       	adc	r25, r19
    1148:	89 5d       	subi	r24, 0xD9	; 217
    114a:	9d 4f       	sbci	r25, 0xFD	; 253
    114c:	86 db       	rcall	.-2292   	; 0x85a <Kernel_Init_Event_At>
    114e:	9a 83       	std	Y+2, r25	; 0x02
    1150:	89 83       	std	Y+1, r24	; 0x01
    1152:	ab 81       	ldd	r26, Y+3	; 0x03
    1154:	bc 81       	ldd	r27, Y+4	; 0x04
    1156:	a2 5f       	subi	r26, 0xF2	; 242
    1158:	be 4f       	sbci	r27, 0xFE	; 254
    115a:	e9 81       	ldd	r30, Y+1	; 0x01
    115c:	fa 81       	ldd	r31, Y+2	; 0x02
    115e:	11 96       	adiw	r26, 0x01	; 1
    1160:	fc 93       	st	X, r31
    1162:	ee 93       	st	-X, r30
    1164:	8b cd       	rjmp	.-1258   	; 0xc7c <OS_Start+0x9a>
    1166:	eb 81       	ldd	r30, Y+3	; 0x03
    1168:	fc 81       	ldd	r31, Y+4	; 0x04
    116a:	e8 5e       	subi	r30, 0xE8	; 232
    116c:	fe 4f       	sbci	r31, 0xFE	; 254
    116e:	40 81       	ld	r20, Z
    1170:	51 81       	ldd	r21, Z+1	; 0x01
    1172:	d7 01       	movw	r26, r14
    1174:	8d 91       	ld	r24, X+
    1176:	9c 91       	ld	r25, X
    1178:	48 17       	cp	r20, r24
    117a:	59 07       	cpc	r21, r25
    117c:	09 f4       	brne	.+2      	; 0x1180 <OS_Start+0x59e>
    117e:	fa c0       	rjmp	.+500    	; 0x1374 <OS_Start+0x792>
    1180:	f7 01       	movw	r30, r14
    1182:	c4 01       	movw	r24, r8
    1184:	6b 81       	ldd	r22, Y+3	; 0x03
    1186:	7c 81       	ldd	r23, Y+4	; 0x04
    1188:	25 81       	ldd	r18, Z+5	; 0x05
    118a:	36 81       	ldd	r19, Z+6	; 0x06
    118c:	42 17       	cp	r20, r18
    118e:	53 07       	cpc	r21, r19
    1190:	09 f4       	brne	.+2      	; 0x1194 <OS_Start+0x5b2>
    1192:	f3 c0       	rjmp	.+486    	; 0x137a <OS_Start+0x798>
    1194:	01 96       	adiw	r24, 0x01	; 1
    1196:	35 96       	adiw	r30, 0x05	; 5
    1198:	88 30       	cpi	r24, 0x08	; 8
    119a:	91 05       	cpc	r25, r1
    119c:	a9 f7       	brne	.-22     	; 0x1188 <OS_Start+0x5a6>
    119e:	3d c0       	rjmp	.+122    	; 0x121a <OS_Start+0x638>
    11a0:	fc 01       	movw	r30, r24
    11a2:	ee 0f       	add	r30, r30
    11a4:	ff 1f       	adc	r31, r31
    11a6:	ee 0f       	add	r30, r30
    11a8:	ff 1f       	adc	r31, r31
    11aa:	e8 0f       	add	r30, r24
    11ac:	f9 1f       	adc	r31, r25
    11ae:	e9 5d       	subi	r30, 0xD9	; 217
    11b0:	fd 4f       	sbci	r31, 0xFD	; 253
    11b2:	22 81       	ldd	r18, Z+2	; 0x02
    11b4:	22 30       	cpi	r18, 0x02	; 2
    11b6:	69 f4       	brne	.+26     	; 0x11d2 <OS_Start+0x5f0>
    11b8:	fc 01       	movw	r30, r24
    11ba:	ee 0f       	add	r30, r30
    11bc:	ff 1f       	adc	r31, r31
    11be:	ee 0f       	add	r30, r30
    11c0:	ff 1f       	adc	r31, r31
    11c2:	8e 0f       	add	r24, r30
    11c4:	9f 1f       	adc	r25, r31
    11c6:	fc 01       	movw	r30, r24
    11c8:	e9 5d       	subi	r30, 0xD9	; 217
    11ca:	fd 4f       	sbci	r31, 0xFD	; 253
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	82 83       	std	Z+2, r24	; 0x02
    11d0:	24 c0       	rjmp	.+72     	; 0x121a <OS_Start+0x638>
    11d2:	eb 81       	ldd	r30, Y+3	; 0x03
    11d4:	fc 81       	ldd	r31, Y+4	; 0x04
    11d6:	ea 5e       	subi	r30, 0xEA	; 234
    11d8:	fe 4f       	sbci	r31, 0xFE	; 254
    11da:	51 83       	std	Z+1, r21	; 0x01
    11dc:	40 83       	st	Z, r20
    11de:	eb 81       	ldd	r30, Y+3	; 0x03
    11e0:	fc 81       	ldd	r31, Y+4	; 0x04
    11e2:	20 81       	ld	r18, Z
    11e4:	31 81       	ldd	r19, Z+1	; 0x01
    11e6:	fc 01       	movw	r30, r24
    11e8:	ee 0f       	add	r30, r30
    11ea:	ff 1f       	adc	r31, r31
    11ec:	ee 0f       	add	r30, r30
    11ee:	ff 1f       	adc	r31, r31
    11f0:	8e 0f       	add	r24, r30
    11f2:	9f 1f       	adc	r25, r31
    11f4:	fc 01       	movw	r30, r24
    11f6:	e9 5d       	subi	r30, 0xD9	; 217
    11f8:	fd 4f       	sbci	r31, 0xFD	; 253
    11fa:	34 83       	std	Z+4, r19	; 0x04
    11fc:	23 83       	std	Z+3, r18	; 0x03
    11fe:	eb 81       	ldd	r30, Y+3	; 0x03
    1200:	fc 81       	ldd	r31, Y+4	; 0x04
    1202:	ec 5f       	subi	r30, 0xFC	; 252
    1204:	fe 4f       	sbci	r31, 0xFE	; 254
    1206:	85 e0       	ldi	r24, 0x05	; 5
    1208:	80 83       	st	Z, r24
    120a:	47 e1       	ldi	r20, 0x17	; 23
    120c:	52 e0       	ldi	r21, 0x02	; 2
    120e:	60 ee       	ldi	r22, 0xE0	; 224
    1210:	74 e1       	ldi	r23, 0x14	; 20
    1212:	85 e2       	ldi	r24, 0x25	; 37
    1214:	92 e0       	ldi	r25, 0x02	; 2
    1216:	3b d3       	rcall	.+1654   	; 0x188e <enqueueRQ>
    1218:	94 db       	rcall	.-2264   	; 0x942 <Dispatch>
    121a:	e0 91 25 02 	lds	r30, 0x0225
    121e:	f0 91 26 02 	lds	r31, 0x0226
    1222:	80 81       	ld	r24, Z
    1224:	91 81       	ldd	r25, Z+1	; 0x01
    1226:	02 97       	sbiw	r24, 0x02	; 2
    1228:	20 f4       	brcc	.+8      	; 0x1232 <OS_Start+0x650>
    122a:	82 e0       	ldi	r24, 0x02	; 2
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	7e d8       	rcall	.-3844   	; 0x32c <enable_LED>
    1230:	25 cd       	rjmp	.-1462   	; 0xc7c <OS_Start+0x9a>
    1232:	80 81       	ld	r24, Z
    1234:	91 81       	ldd	r25, Z+1	; 0x01
    1236:	02 97       	sbiw	r24, 0x02	; 2
    1238:	21 f4       	brne	.+8      	; 0x1242 <OS_Start+0x660>
    123a:	85 e0       	ldi	r24, 0x05	; 5
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	76 d8       	rcall	.-3860   	; 0x32c <enable_LED>
    1240:	1d cd       	rjmp	.-1478   	; 0xc7c <OS_Start+0x9a>
    1242:	80 81       	ld	r24, Z
    1244:	91 81       	ldd	r25, Z+1	; 0x01
    1246:	03 97       	sbiw	r24, 0x03	; 3
    1248:	09 f0       	breq	.+2      	; 0x124c <OS_Start+0x66a>
    124a:	18 cd       	rjmp	.-1488   	; 0xc7c <OS_Start+0x9a>
    124c:	86 e0       	ldi	r24, 0x06	; 6
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	6d d8       	rcall	.-3878   	; 0x32c <enable_LED>
    1252:	14 cd       	rjmp	.-1496   	; 0xc7c <OS_Start+0x9a>
    1254:	eb 81       	ldd	r30, Y+3	; 0x03
    1256:	fc 81       	ldd	r31, Y+4	; 0x04
    1258:	e8 5e       	subi	r30, 0xE8	; 232
    125a:	fe 4f       	sbci	r31, 0xFE	; 254
    125c:	40 81       	ld	r20, Z
    125e:	51 81       	ldd	r21, Z+1	; 0x01
    1260:	d7 01       	movw	r26, r14
    1262:	8d 91       	ld	r24, X+
    1264:	9c 91       	ld	r25, X
    1266:	48 17       	cp	r20, r24
    1268:	59 07       	cpc	r21, r25
    126a:	09 f4       	brne	.+2      	; 0x126e <OS_Start+0x68c>
    126c:	97 c0       	rjmp	.+302    	; 0x139c <OS_Start+0x7ba>
    126e:	f7 01       	movw	r30, r14
    1270:	c4 01       	movw	r24, r8
    1272:	6b 81       	ldd	r22, Y+3	; 0x03
    1274:	7c 81       	ldd	r23, Y+4	; 0x04
    1276:	25 81       	ldd	r18, Z+5	; 0x05
    1278:	36 81       	ldd	r19, Z+6	; 0x06
    127a:	42 17       	cp	r20, r18
    127c:	53 07       	cpc	r21, r19
    127e:	09 f4       	brne	.+2      	; 0x1282 <OS_Start+0x6a0>
    1280:	90 c0       	rjmp	.+288    	; 0x13a2 <OS_Start+0x7c0>
    1282:	01 96       	adiw	r24, 0x01	; 1
    1284:	35 96       	adiw	r30, 0x05	; 5
    1286:	88 30       	cpi	r24, 0x08	; 8
    1288:	91 05       	cpc	r25, r1
    128a:	a9 f7       	brne	.-22     	; 0x1276 <OS_Start+0x694>
    128c:	f7 cc       	rjmp	.-1554   	; 0xc7c <OS_Start+0x9a>
    128e:	80 81       	ld	r24, Z
    1290:	91 81       	ldd	r25, Z+1	; 0x01
    1292:	48 17       	cp	r20, r24
    1294:	59 07       	cpc	r21, r25
    1296:	09 f4       	brne	.+2      	; 0x129a <OS_Start+0x6b8>
    1298:	97 c0       	rjmp	.+302    	; 0x13c8 <OS_Start+0x7e6>
    129a:	2f 5f       	subi	r18, 0xFF	; 255
    129c:	3f 4f       	sbci	r19, 0xFF	; 255
    129e:	e2 5e       	subi	r30, 0xE2	; 226
    12a0:	fe 4f       	sbci	r31, 0xFE	; 254
    12a2:	20 31       	cpi	r18, 0x10	; 16
    12a4:	31 05       	cpc	r19, r1
    12a6:	99 f7       	brne	.-26     	; 0x128e <OS_Start+0x6ac>
    12a8:	cb 01       	movw	r24, r22
    12aa:	fb 01       	movw	r30, r22
    12ac:	ee 0f       	add	r30, r30
    12ae:	ff 1f       	adc	r31, r31
    12b0:	ee 0f       	add	r30, r30
    12b2:	ff 1f       	adc	r31, r31
    12b4:	8e 0f       	add	r24, r30
    12b6:	9f 1f       	adc	r25, r31
    12b8:	fc 01       	movw	r30, r24
    12ba:	e9 5d       	subi	r30, 0xD9	; 217
    12bc:	fd 4f       	sbci	r31, 0xFD	; 253
    12be:	82 e0       	ldi	r24, 0x02	; 2
    12c0:	82 83       	std	Z+2, r24	; 0x02
    12c2:	dc cc       	rjmp	.-1608   	; 0xc7c <OS_Start+0x9a>
    12c4:	2a 9d       	mul	r18, r10
    12c6:	f0 01       	movw	r30, r0
    12c8:	2b 9d       	mul	r18, r11
    12ca:	f0 0d       	add	r31, r0
    12cc:	3a 9d       	mul	r19, r10
    12ce:	f0 0d       	add	r31, r0
    12d0:	11 24       	eor	r1, r1
    12d2:	ef 55       	subi	r30, 0x5F	; 95
    12d4:	fc 4f       	sbci	r31, 0xFC	; 252
    12d6:	80 81       	ld	r24, Z
    12d8:	91 81       	ldd	r25, Z+1	; 0x01
    12da:	89 2b       	or	r24, r25
    12dc:	09 f0       	breq	.+2      	; 0x12e0 <OS_Start+0x6fe>
    12de:	ce cc       	rjmp	.-1636   	; 0xc7c <OS_Start+0x9a>
    12e0:	eb 81       	ldd	r30, Y+3	; 0x03
    12e2:	fc 81       	ldd	r31, Y+4	; 0x04
    12e4:	ec 5f       	subi	r30, 0xFC	; 252
    12e6:	fe 4f       	sbci	r31, 0xFE	; 254
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	80 83       	st	Z, r24
    12ec:	47 e1       	ldi	r20, 0x17	; 23
    12ee:	52 e0       	ldi	r21, 0x02	; 2
    12f0:	60 ee       	ldi	r22, 0xE0	; 224
    12f2:	74 e1       	ldi	r23, 0x14	; 20
    12f4:	85 e2       	ldi	r24, 0x25	; 37
    12f6:	92 e0       	ldi	r25, 0x02	; 2
    12f8:	ca d2       	rcall	.+1428   	; 0x188e <enqueueRQ>
    12fa:	23 db       	rcall	.-2490   	; 0x942 <Dispatch>
    12fc:	bf cc       	rjmp	.-1666   	; 0xc7c <OS_Start+0x9a>
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <OS_Start+0x726>
    1304:	7c 83       	std	Y+4, r23	; 0x04
    1306:	6b 83       	std	Y+3, r22	; 0x03
    1308:	8a 9d       	mul	r24, r10
    130a:	f0 01       	movw	r30, r0
    130c:	8b 9d       	mul	r24, r11
    130e:	f0 0d       	add	r31, r0
    1310:	9a 9d       	mul	r25, r10
    1312:	f0 0d       	add	r31, r0
    1314:	11 24       	eor	r1, r1
    1316:	ef 55       	subi	r30, 0x5F	; 95
    1318:	fc 4f       	sbci	r31, 0xFC	; 252
    131a:	91 82       	std	Z+1, r9	; 0x01
    131c:	80 82       	st	Z, r8
    131e:	63 cd       	rjmp	.-1338   	; 0xde6 <OS_Start+0x204>
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	02 c0       	rjmp	.+4      	; 0x132a <OS_Start+0x748>
    1326:	7c 83       	std	Y+4, r23	; 0x04
    1328:	6b 83       	std	Y+3, r22	; 0x03
    132a:	8a 9d       	mul	r24, r10
    132c:	f0 01       	movw	r30, r0
    132e:	8b 9d       	mul	r24, r11
    1330:	f0 0d       	add	r31, r0
    1332:	9a 9d       	mul	r25, r10
    1334:	f0 0d       	add	r31, r0
    1336:	11 24       	eor	r1, r1
    1338:	ef 55       	subi	r30, 0x5F	; 95
    133a:	fc 4f       	sbci	r31, 0xFC	; 252
    133c:	20 81       	ld	r18, Z
    133e:	31 81       	ldd	r19, Z+1	; 0x01
    1340:	21 30       	cpi	r18, 0x01	; 1
    1342:	31 05       	cpc	r19, r1
    1344:	09 f0       	breq	.+2      	; 0x1348 <OS_Start+0x766>
    1346:	9a cc       	rjmp	.-1740   	; 0xc7c <OS_Start+0x9a>
    1348:	7f cd       	rjmp	.-1282   	; 0xe48 <OS_Start+0x266>
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <OS_Start+0x772>
    1350:	7c 83       	std	Y+4, r23	; 0x04
    1352:	6b 83       	std	Y+3, r22	; 0x03
    1354:	fc 01       	movw	r30, r24
    1356:	ee 0f       	add	r30, r30
    1358:	ff 1f       	adc	r31, r31
    135a:	ee 0f       	add	r30, r30
    135c:	ff 1f       	adc	r31, r31
    135e:	ee 0f       	add	r30, r30
    1360:	ff 1f       	adc	r31, r31
    1362:	e8 1b       	sub	r30, r24
    1364:	f9 0b       	sbc	r31, r25
    1366:	e1 5b       	subi	r30, 0xB1	; 177
    1368:	fd 4f       	sbci	r31, 0xFD	; 253
    136a:	22 81       	ldd	r18, Z+2	; 0x02
    136c:	21 30       	cpi	r18, 0x01	; 1
    136e:	09 f0       	breq	.+2      	; 0x1372 <OS_Start+0x790>
    1370:	55 ce       	rjmp	.-854    	; 0x101c <OS_Start+0x43a>
    1372:	3b ce       	rjmp	.-906    	; 0xfea <OS_Start+0x408>
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	02 c0       	rjmp	.+4      	; 0x137e <OS_Start+0x79c>
    137a:	7c 83       	std	Y+4, r23	; 0x04
    137c:	6b 83       	std	Y+3, r22	; 0x03
    137e:	fc 01       	movw	r30, r24
    1380:	ee 0f       	add	r30, r30
    1382:	ff 1f       	adc	r31, r31
    1384:	ee 0f       	add	r30, r30
    1386:	ff 1f       	adc	r31, r31
    1388:	e8 0f       	add	r30, r24
    138a:	f9 1f       	adc	r31, r25
    138c:	e9 5d       	subi	r30, 0xD9	; 217
    138e:	fd 4f       	sbci	r31, 0xFD	; 253
    1390:	23 81       	ldd	r18, Z+3	; 0x03
    1392:	34 81       	ldd	r19, Z+4	; 0x04
    1394:	23 2b       	or	r18, r19
    1396:	09 f0       	breq	.+2      	; 0x139a <OS_Start+0x7b8>
    1398:	40 cf       	rjmp	.-384    	; 0x121a <OS_Start+0x638>
    139a:	02 cf       	rjmp	.-508    	; 0x11a0 <OS_Start+0x5be>
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <OS_Start+0x7c4>
    13a2:	7c 83       	std	Y+4, r23	; 0x04
    13a4:	6b 83       	std	Y+3, r22	; 0x03
    13a6:	ed e9       	ldi	r30, 0x9D	; 157
    13a8:	f3 e0       	ldi	r31, 0x03	; 3
    13aa:	20 81       	ld	r18, Z
    13ac:	31 81       	ldd	r19, Z+1	; 0x01
    13ae:	42 17       	cp	r20, r18
    13b0:	53 07       	cpc	r21, r19
    13b2:	39 f0       	breq	.+14     	; 0x13c2 <OS_Start+0x7e0>
    13b4:	eb eb       	ldi	r30, 0xBB	; 187
    13b6:	f4 e0       	ldi	r31, 0x04	; 4
    13b8:	94 01       	movw	r18, r8
    13ba:	ab 81       	ldd	r26, Y+3	; 0x03
    13bc:	bc 81       	ldd	r27, Y+4	; 0x04
    13be:	bc 01       	movw	r22, r24
    13c0:	66 cf       	rjmp	.-308    	; 0x128e <OS_Start+0x6ac>
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	03 c0       	rjmp	.+6      	; 0x13ce <OS_Start+0x7ec>
    13c8:	bc 83       	std	Y+4, r27	; 0x04
    13ca:	ab 83       	std	Y+3, r26	; 0x03
    13cc:	cb 01       	movw	r24, r22
    13ce:	2a 9d       	mul	r18, r10
    13d0:	a0 01       	movw	r20, r0
    13d2:	2b 9d       	mul	r18, r11
    13d4:	50 0d       	add	r21, r0
    13d6:	3a 9d       	mul	r19, r10
    13d8:	50 0d       	add	r21, r0
    13da:	11 24       	eor	r1, r1
    13dc:	49 57       	subi	r20, 0x79	; 121
    13de:	5d 4f       	sbci	r21, 0xFD	; 253
    13e0:	fa 01       	movw	r30, r20
    13e2:	ec 5f       	subi	r30, 0xFC	; 252
    13e4:	fe 4f       	sbci	r31, 0xFE	; 254
    13e6:	61 e0       	ldi	r22, 0x01	; 1
    13e8:	60 83       	st	Z, r22
    13ea:	72 96       	adiw	r30, 0x12	; 18
    13ec:	31 82       	std	Z+1, r3	; 0x01
    13ee:	20 82       	st	Z, r2
    13f0:	fc 01       	movw	r30, r24
    13f2:	ee 0f       	add	r30, r30
    13f4:	ff 1f       	adc	r31, r31
    13f6:	ee 0f       	add	r30, r30
    13f8:	ff 1f       	adc	r31, r31
    13fa:	8e 0f       	add	r24, r30
    13fc:	9f 1f       	adc	r25, r31
    13fe:	fc 01       	movw	r30, r24
    1400:	e9 5d       	subi	r30, 0xD9	; 217
    1402:	fd 4f       	sbci	r31, 0xFD	; 253
    1404:	14 82       	std	Z+4, r1	; 0x04
    1406:	13 82       	std	Z+3, r1	; 0x03
    1408:	eb 81       	ldd	r30, Y+3	; 0x03
    140a:	fc 81       	ldd	r31, Y+4	; 0x04
    140c:	e9 5f       	subi	r30, 0xF9	; 249
    140e:	fe 4f       	sbci	r31, 0xFE	; 254
    1410:	80 81       	ld	r24, Z
    1412:	91 81       	ldd	r25, Z+1	; 0x01
    1414:	fa 01       	movw	r30, r20
    1416:	e9 5f       	subi	r30, 0xF9	; 249
    1418:	fe 4f       	sbci	r31, 0xFE	; 254
    141a:	40 81       	ld	r20, Z
    141c:	51 81       	ldd	r21, Z+1	; 0x01
    141e:	48 17       	cp	r20, r24
    1420:	59 07       	cpc	r21, r25
    1422:	08 f4       	brcc	.+2      	; 0x1426 <OS_Start+0x844>
    1424:	4f cf       	rjmp	.-354    	; 0x12c4 <OS_Start+0x6e2>
    1426:	2a cc       	rjmp	.-1964   	; 0xc7c <OS_Start+0x9a>
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	df 91       	pop	r29
    1432:	cf 91       	pop	r28
    1434:	1f 91       	pop	r17
    1436:	0f 91       	pop	r16
    1438:	ff 90       	pop	r15
    143a:	ef 90       	pop	r14
    143c:	df 90       	pop	r13
    143e:	cf 90       	pop	r12
    1440:	bf 90       	pop	r11
    1442:	af 90       	pop	r10
    1444:	9f 90       	pop	r9
    1446:	8f 90       	pop	r8
    1448:	7f 90       	pop	r7
    144a:	6f 90       	pop	r6
    144c:	5f 90       	pop	r5
    144e:	4f 90       	pop	r4
    1450:	3f 90       	pop	r3
    1452:	2f 90       	pop	r2
    1454:	08 95       	ret

00001456 <Task_Create>:
    1456:	20 91 23 02 	lds	r18, 0x0223
    145a:	30 91 24 02 	lds	r19, 0x0224
    145e:	23 2b       	or	r18, r19
    1460:	f1 f0       	breq	.+60     	; 0x149e <Task_Create+0x48>
    1462:	f8 94       	cli
    1464:	20 91 25 02 	lds	r18, 0x0225
    1468:	30 91 26 02 	lds	r19, 0x0226
    146c:	f9 01       	movw	r30, r18
    146e:	e3 5f       	subi	r30, 0xF3	; 243
    1470:	fe 4f       	sbci	r31, 0xFE	; 254
    1472:	a1 e0       	ldi	r26, 0x01	; 1
    1474:	a0 83       	st	Z, r26
    1476:	32 97       	sbiw	r30, 0x02	; 2
    1478:	91 83       	std	Z+1, r25	; 0x01
    147a:	80 83       	st	Z, r24
    147c:	36 97       	sbiw	r30, 0x06	; 6
    147e:	71 83       	std	Z+1, r23	; 0x01
    1480:	60 83       	st	Z, r22
    1482:	34 96       	adiw	r30, 0x04	; 4
    1484:	51 83       	std	Z+1, r21	; 0x01
    1486:	40 83       	st	Z, r20
    1488:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    148c:	e0 91 25 02 	lds	r30, 0x0225
    1490:	f0 91 26 02 	lds	r31, 0x0226
    1494:	e2 5f       	subi	r30, 0xF2	; 242
    1496:	fe 4f       	sbci	r31, 0xFE	; 254
    1498:	80 81       	ld	r24, Z
    149a:	91 81       	ldd	r25, Z+1	; 0x01
    149c:	08 95       	ret
    149e:	98 c9       	rjmp	.-3280   	; 0x7d0 <Kernel_Create_Task>
    14a0:	08 95       	ret

000014a2 <Task_Next>:
    14a2:	80 91 23 02 	lds	r24, 0x0223
    14a6:	90 91 24 02 	lds	r25, 0x0224
    14aa:	89 2b       	or	r24, r25
    14ac:	59 f0       	breq	.+22     	; 0x14c4 <Task_Next+0x22>
    14ae:	f8 94       	cli
    14b0:	e0 91 25 02 	lds	r30, 0x0225
    14b4:	f0 91 26 02 	lds	r31, 0x0226
    14b8:	e3 5f       	subi	r30, 0xF3	; 243
    14ba:	fe 4f       	sbci	r31, 0xFE	; 254
    14bc:	82 e0       	ldi	r24, 0x02	; 2
    14be:	80 83       	st	Z, r24
    14c0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <Enter_Kernel>
    14c4:	08 95       	ret

000014c6 <setup>:
  * Setup pins and timers
  */
void setup() {
	/** For testing */
	/** pin 47 */
	init_LED_PORTL_pin2();
    14c6:	0e 94 84 01 	call	0x308	; 0x308 <init_LED_PORTL_pin2>

	/** pin 43 */
	init_LED_PORTL_pin6();
    14ca:	0e 94 90 01 	call	0x320	; 0x320 <init_LED_PORTL_pin6>

	/** pin 44 */
	init_LED_PORTL_pin5();
    14ce:	0e 94 8a 01 	call	0x314	; 0x314 <init_LED_PORTL_pin5>

	/** pin 49 */
	init_LED_PORTL_pin0();
    14d2:	0e 94 78 01 	call	0x2f0	; 0x2f0 <init_LED_PORTL_pin0>

	/** pin 48 */
	init_LED_PORTL_pin1();
    14d6:	0e 94 7e 01 	call	0x2fc	; 0x2fc <init_LED_PORTL_pin1>

	/** initialize Timer1 16 bit timer */
	Disable_Interrupt();
    14da:	f8 94       	cli

	/** Timer 1 */
	TCCR1A = 0;                 /** Set TCCR1A register to 0 */
    14dc:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;                 /** Set TCCR1B register to 0 */
    14e0:	e1 e8       	ldi	r30, 0x81	; 129
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	10 82       	st	Z, r1

	TCNT1 = 0;                  /** Initialize counter to 0 */
    14e6:	10 92 85 00 	sts	0x0085, r1
    14ea:	10 92 84 00 	sts	0x0084, r1

	OCR1A = 624;                /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
    14ee:	80 e7       	ldi	r24, 0x70	; 112
    14f0:	92 e0       	ldi	r25, 0x02	; 2
    14f2:	90 93 89 00 	sts	0x0089, r25
    14f6:	80 93 88 00 	sts	0x0088, r24

	TCCR1B |= (1 << WGM12);     /** Turns on CTC mode (TOP is now OCR1A) */
    14fa:	80 81       	ld	r24, Z
    14fc:	88 60       	ori	r24, 0x08	; 8
    14fe:	80 83       	st	Z, r24

	TCCR1B |= (1 << CS12);      /** Prescaler 256 */
    1500:	80 81       	ld	r24, Z
    1502:	84 60       	ori	r24, 0x04	; 4
    1504:	80 83       	st	Z, r24

	TIMSK1 |= (1 << OCIE1A);    /** Enable timer compare interrupt */
    1506:	ef e6       	ldi	r30, 0x6F	; 111
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	82 60       	ori	r24, 0x02	; 2
    150e:	80 83       	st	Z, r24

	/** Timer 3 */
	TCCR3A = 0;                 /** Set TCCR0A register to 0 */
    1510:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0;                 /** Set TCCR0B register to 0 */
    1514:	e1 e9       	ldi	r30, 0x91	; 145
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	10 82       	st	Z, r1

	TCNT3 = 0;                  /** Initialize counter to 0 */
    151a:	10 92 95 00 	sts	0x0095, r1
    151e:	10 92 94 00 	sts	0x0094, r1

	OCR3A = 62499;              /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
    1522:	83 e2       	ldi	r24, 0x23	; 35
    1524:	94 ef       	ldi	r25, 0xF4	; 244
    1526:	90 93 99 00 	sts	0x0099, r25
    152a:	80 93 98 00 	sts	0x0098, r24

	TCCR3B |= (1 << WGM32);     /** Turns on CTC mode (TOP is now OCR1A) */
    152e:	80 81       	ld	r24, Z
    1530:	88 60       	ori	r24, 0x08	; 8
    1532:	80 83       	st	Z, r24

	TCCR3B |= (1 << CS32);      /** Prescaler 1024 */
    1534:	80 81       	ld	r24, Z
    1536:	84 60       	ori	r24, 0x04	; 4
    1538:	80 83       	st	Z, r24

	TIMSK3 = (1 << OCIE3A);
    153a:	82 e0       	ldi	r24, 0x02	; 2
    153c:	80 93 71 00 	sts	0x0071, r24

	Enable_Interrupt();
    1540:	78 94       	sei
    1542:	08 95       	ret

00001544 <__vector_17>:
}

/**
  * ISR for timer1
  */
ISR(TIMER1_COMPA_vect) {
    1544:	1f 92       	push	r1
    1546:	0f 92       	push	r0
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	0f 92       	push	r0
    154c:	11 24       	eor	r1, r1
    154e:	0b b6       	in	r0, 0x3b	; 59
    1550:	0f 92       	push	r0
    1552:	df 92       	push	r13
    1554:	ef 92       	push	r14
    1556:	ff 92       	push	r15
    1558:	0f 93       	push	r16
    155a:	1f 93       	push	r17
    155c:	2f 93       	push	r18
    155e:	3f 93       	push	r19
    1560:	4f 93       	push	r20
    1562:	5f 93       	push	r21
    1564:	6f 93       	push	r22
    1566:	7f 93       	push	r23
    1568:	8f 93       	push	r24
    156a:	9f 93       	push	r25
    156c:	af 93       	push	r26
    156e:	bf 93       	push	r27
    1570:	ef 93       	push	r30
    1572:	ff 93       	push	r31
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	00 d0       	rcall	.+0      	; 0x157a <__vector_17+0x36>
    157a:	1f 92       	push	r1
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
    1580:	80 91 15 02 	lds	r24, 0x0215
    1584:	90 91 16 02 	lds	r25, 0x0216
    1588:	01 97       	sbiw	r24, 0x01	; 1
    158a:	9a 83       	std	Y+2, r25	; 0x02
    158c:	89 83       	std	Y+1, r24	; 0x01
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	9a 81       	ldd	r25, Y+2	; 0x02
    1592:	99 23       	and	r25, r25
    1594:	0c f4       	brge	.+2      	; 0x1598 <__vector_17+0x54>
    1596:	8f c0       	rjmp	.+286    	; 0x16b6 <__vector_17+0x172>
		if ((SleepQueue[i]->wakeTickOverflow <= tickOverflowCount) && (SleepQueue[i]->wakeTick <= (TCNT3/625))) {
    1598:	e9 81       	ldd	r30, Y+1	; 0x01
    159a:	fa 81       	ldd	r31, Y+2	; 0x02
    159c:	ee 0f       	add	r30, r30
    159e:	ff 1f       	adc	r31, r31
    15a0:	e0 54       	subi	r30, 0x40	; 64
    15a2:	fb 4e       	sbci	r31, 0xEB	; 235
    15a4:	01 90       	ld	r0, Z+
    15a6:	f0 81       	ld	r31, Z
    15a8:	e0 2d       	mov	r30, r0
    15aa:	e0 5f       	subi	r30, 0xF0	; 240
    15ac:	fe 4f       	sbci	r31, 0xFE	; 254
    15ae:	20 81       	ld	r18, Z
    15b0:	31 81       	ldd	r19, Z+1	; 0x01
    15b2:	80 91 19 02 	lds	r24, 0x0219
    15b6:	90 91 1a 02 	lds	r25, 0x021A
    15ba:	82 17       	cp	r24, r18
    15bc:	93 07       	cpc	r25, r19
    15be:	08 f4       	brcc	.+2      	; 0x15c2 <__vector_17+0x7e>
    15c0:	7a c0       	rjmp	.+244    	; 0x16b6 <__vector_17+0x172>
    15c2:	e9 81       	ldd	r30, Y+1	; 0x01
    15c4:	fa 81       	ldd	r31, Y+2	; 0x02
    15c6:	ee 0f       	add	r30, r30
    15c8:	ff 1f       	adc	r31, r31
    15ca:	e0 54       	subi	r30, 0x40	; 64
    15cc:	fb 4e       	sbci	r31, 0xEB	; 235
    15ce:	01 90       	ld	r0, Z+
    15d0:	f0 81       	ld	r31, Z
    15d2:	e0 2d       	mov	r30, r0
    15d4:	ee 5e       	subi	r30, 0xEE	; 238
    15d6:	fe 4f       	sbci	r31, 0xFE	; 254
    15d8:	20 81       	ld	r18, Z
    15da:	31 81       	ldd	r19, Z+1	; 0x01
    15dc:	80 91 94 00 	lds	r24, 0x0094
    15e0:	90 91 95 00 	lds	r25, 0x0095
    15e4:	61 e7       	ldi	r22, 0x71	; 113
    15e6:	72 e0       	ldi	r23, 0x02	; 2
    15e8:	e7 d5       	rcall	.+3022   	; 0x21b8 <__udivmodhi4>
    15ea:	62 17       	cp	r22, r18
    15ec:	73 07       	cpc	r23, r19
    15ee:	60 f5       	brcc	.+88     	; 0x1648 <__vector_17+0x104>
    15f0:	62 c0       	rjmp	.+196    	; 0x16b6 <__vector_17+0x172>
    15f2:	e9 81       	ldd	r30, Y+1	; 0x01
    15f4:	fa 81       	ldd	r31, Y+2	; 0x02
    15f6:	ee 0f       	add	r30, r30
    15f8:	ff 1f       	adc	r31, r31
    15fa:	e0 54       	subi	r30, 0x40	; 64
    15fc:	fb 4e       	sbci	r31, 0xEB	; 235
    15fe:	01 90       	ld	r0, Z+
    1600:	f0 81       	ld	r31, Z
    1602:	e0 2d       	mov	r30, r0
    1604:	e0 5f       	subi	r30, 0xF0	; 240
    1606:	fe 4f       	sbci	r31, 0xFE	; 254
    1608:	20 81       	ld	r18, Z
    160a:	31 81       	ldd	r19, Z+1	; 0x01
    160c:	80 91 19 02 	lds	r24, 0x0219
    1610:	90 91 1a 02 	lds	r25, 0x021A
    1614:	82 17       	cp	r24, r18
    1616:	93 07       	cpc	r25, r19
    1618:	08 f4       	brcc	.+2      	; 0x161c <__vector_17+0xd8>
    161a:	4d c0       	rjmp	.+154    	; 0x16b6 <__vector_17+0x172>
    161c:	e9 81       	ldd	r30, Y+1	; 0x01
    161e:	fa 81       	ldd	r31, Y+2	; 0x02
    1620:	ee 0f       	add	r30, r30
    1622:	ff 1f       	adc	r31, r31
    1624:	e0 54       	subi	r30, 0x40	; 64
    1626:	fb 4e       	sbci	r31, 0xEB	; 235
    1628:	01 90       	ld	r0, Z+
    162a:	f0 81       	ld	r31, Z
    162c:	e0 2d       	mov	r30, r0
    162e:	ee 5e       	subi	r30, 0xEE	; 238
    1630:	fe 4f       	sbci	r31, 0xFE	; 254
    1632:	20 81       	ld	r18, Z
    1634:	31 81       	ldd	r19, Z+1	; 0x01
    1636:	f7 01       	movw	r30, r14
    1638:	80 81       	ld	r24, Z
    163a:	91 81       	ldd	r25, Z+1	; 0x01
    163c:	b8 01       	movw	r22, r16
    163e:	bc d5       	rcall	.+2936   	; 0x21b8 <__udivmodhi4>
    1640:	62 17       	cp	r22, r18
    1642:	73 07       	cpc	r23, r19
    1644:	50 f4       	brcc	.+20     	; 0x165a <__vector_17+0x116>
    1646:	37 c0       	rjmp	.+110    	; 0x16b6 <__vector_17+0x172>
			volatile PD *p = dequeue(&SleepQueue, &SQCount);
			p->state = READY;
    1648:	dd 24       	eor	r13, r13
    164a:	d3 94       	inc	r13
ISR(TIMER1_COMPA_vect) {

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
		if ((SleepQueue[i]->wakeTickOverflow <= tickOverflowCount) && (SleepQueue[i]->wakeTick <= (TCNT3/625))) {
    164c:	0f 2e       	mov	r0, r31
    164e:	f4 e9       	ldi	r31, 0x94	; 148
    1650:	ef 2e       	mov	r14, r31
    1652:	f1 2c       	mov	r15, r1
    1654:	f0 2d       	mov	r31, r0
    1656:	01 e7       	ldi	r16, 0x71	; 113
    1658:	12 e0       	ldi	r17, 0x02	; 2
			volatile PD *p = dequeue(&SleepQueue, &SQCount);
    165a:	65 e1       	ldi	r22, 0x15	; 21
    165c:	72 e0       	ldi	r23, 0x02	; 2
    165e:	80 ec       	ldi	r24, 0xC0	; 192
    1660:	94 e1       	ldi	r25, 0x14	; 20
    1662:	38 d2       	rcall	.+1136   	; 0x1ad4 <dequeue>
    1664:	9c 83       	std	Y+4, r25	; 0x04
    1666:	8b 83       	std	Y+3, r24	; 0x03
			p->state = READY;
    1668:	fc 01       	movw	r30, r24
    166a:	ec 5f       	subi	r30, 0xFC	; 252
    166c:	fe 4f       	sbci	r31, 0xFE	; 254
    166e:	d0 82       	st	Z, r13
			enqueueRQ(&p, &ReadyQueue, &RQCount);
    1670:	47 e1       	ldi	r20, 0x17	; 23
    1672:	52 e0       	ldi	r21, 0x02	; 2
    1674:	60 ee       	ldi	r22, 0xE0	; 224
    1676:	74 e1       	ldi	r23, 0x14	; 20
    1678:	ce 01       	movw	r24, r28
    167a:	03 96       	adiw	r24, 0x03	; 3
    167c:	08 d1       	rcall	.+528    	; 0x188e <enqueueRQ>
			if (p->inheritedPy < Cp->inheritedPy) {
    167e:	eb 81       	ldd	r30, Y+3	; 0x03
    1680:	fc 81       	ldd	r31, Y+4	; 0x04
    1682:	e9 5f       	subi	r30, 0xF9	; 249
    1684:	fe 4f       	sbci	r31, 0xFE	; 254
    1686:	20 81       	ld	r18, Z
    1688:	31 81       	ldd	r19, Z+1	; 0x01
    168a:	e0 91 25 02 	lds	r30, 0x0225
    168e:	f0 91 26 02 	lds	r31, 0x0226
    1692:	e9 5f       	subi	r30, 0xF9	; 249
    1694:	fe 4f       	sbci	r31, 0xFE	; 254
    1696:	80 81       	ld	r24, Z
    1698:	91 81       	ldd	r25, Z+1	; 0x01
    169a:	28 17       	cp	r18, r24
    169c:	39 07       	cpc	r19, r25
    169e:	08 f4       	brcc	.+2      	; 0x16a2 <__vector_17+0x15e>
				Task_Next();
    16a0:	00 df       	rcall	.-512    	; 0x14a2 <Task_Next>
  */
ISR(TIMER1_COMPA_vect) {

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	9a 81       	ldd	r25, Y+2	; 0x02
    16a6:	01 97       	sbiw	r24, 0x01	; 1
    16a8:	9a 83       	std	Y+2, r25	; 0x02
    16aa:	89 83       	std	Y+1, r24	; 0x01
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	9a 81       	ldd	r25, Y+2	; 0x02
    16b0:	99 23       	and	r25, r25
    16b2:	0c f0       	brlt	.+2      	; 0x16b6 <__vector_17+0x172>
    16b4:	9e cf       	rjmp	.-196    	; 0x15f2 <__vector_17+0xae>
			break;
		}
	}

	//Task_Next();
}
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	df 91       	pop	r29
    16c0:	cf 91       	pop	r28
    16c2:	ff 91       	pop	r31
    16c4:	ef 91       	pop	r30
    16c6:	bf 91       	pop	r27
    16c8:	af 91       	pop	r26
    16ca:	9f 91       	pop	r25
    16cc:	8f 91       	pop	r24
    16ce:	7f 91       	pop	r23
    16d0:	6f 91       	pop	r22
    16d2:	5f 91       	pop	r21
    16d4:	4f 91       	pop	r20
    16d6:	3f 91       	pop	r19
    16d8:	2f 91       	pop	r18
    16da:	1f 91       	pop	r17
    16dc:	0f 91       	pop	r16
    16de:	ff 90       	pop	r15
    16e0:	ef 90       	pop	r14
    16e2:	df 90       	pop	r13
    16e4:	0f 90       	pop	r0
    16e6:	0b be       	out	0x3b, r0	; 59
    16e8:	0f 90       	pop	r0
    16ea:	0f be       	out	0x3f, r0	; 63
    16ec:	0f 90       	pop	r0
    16ee:	1f 90       	pop	r1
    16f0:	18 95       	reti

000016f2 <__vector_32>:

/**
  * ISR for timer3
  */
ISR(TIMER3_COMPA_vect) {
    16f2:	1f 92       	push	r1
    16f4:	0f 92       	push	r0
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	0f 92       	push	r0
    16fa:	11 24       	eor	r1, r1
    16fc:	8f 93       	push	r24
    16fe:	9f 93       	push	r25
	tickOverflowCount += 1;
    1700:	80 91 19 02 	lds	r24, 0x0219
    1704:	90 91 1a 02 	lds	r25, 0x021A
    1708:	01 96       	adiw	r24, 0x01	; 1
    170a:	90 93 1a 02 	sts	0x021A, r25
    170e:	80 93 19 02 	sts	0x0219, r24
}
    1712:	9f 91       	pop	r25
    1714:	8f 91       	pop	r24
    1716:	0f 90       	pop	r0
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	0f 90       	pop	r0
    171c:	1f 90       	pop	r1
    171e:	18 95       	reti

00001720 <Basic_Init>:

void Basic_Init() {
	Roomba_Init();
    1720:	02 d3       	rcall	.+1540   	; 0x1d26 <Roomba_Init>
	adc_init();
    1722:	0e 94 4b 01 	call	0x296	; 0x296 <adc_init>
	//portL2_Mutex = Mutex_Init();
	//portL6_Mutex = Mutex_Init();
	//e1 = Event_Init();
	//e2 = Event_Init();
	DDRD |= (1<<PD7);
    1726:	57 9a       	sbi	0x0a, 7	; 10
	DDRG |= (1<<PG2);
    1728:	9a 9a       	sbi	0x13, 2	; 19
	PORTD &= ~(1<<PD7);
    172a:	5f 98       	cbi	0x0b, 7	; 11
	PORTG &= ~(1<<PG2);
    172c:	a2 98       	cbi	0x14, 2	; 20
	Task_Terminate();
    172e:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <Task_Terminate>
    1732:	08 95       	ret

00001734 <main>:

/**
  * This function boots the OS and creates the first task: a_main
  */
void main() {
	setup();
    1734:	c8 de       	rcall	.-624    	; 0x14c6 <setup>
	
	OS_Init();
    1736:	a8 d8       	rcall	.-3760   	; 0x888 <OS_Init>
	Basic_Init();
    1738:	f3 df       	rcall	.-26     	; 0x1720 <Basic_Init>
	Task_Create(a_main, 0, 1);
    173a:	41 e0       	ldi	r20, 0x01	; 1
    173c:	50 e0       	ldi	r21, 0x00	; 0
    173e:	60 e0       	ldi	r22, 0x00	; 0
    1740:	70 e0       	ldi	r23, 0x00	; 0
    1742:	83 e3       	ldi	r24, 0x33	; 51
    1744:	93 e0       	ldi	r25, 0x03	; 3
    1746:	87 de       	rcall	.-754    	; 0x1456 <Task_Create>
	OS_Start();
    1748:	4c ca       	rjmp	.-2920   	; 0xbe2 <OS_Start>
    174a:	08 95       	ret

0000174c <enqueueWQ>:
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
}

void enqueueWQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	ea 01       	movw	r28, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    1752:	28 81       	ld	r18, Y
    1754:	39 81       	ldd	r19, Y+1	; 0x01
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
}

void enqueueWQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    1756:	2f 30       	cpi	r18, 0x0F	; 15
    1758:	31 05       	cpc	r19, r1
    175a:	29 f1       	breq	.+74     	; 0x17a6 <enqueueWQ+0x5a>
        return;
    }

    int i = (*QCount) - 1;
    175c:	e8 81       	ld	r30, Y
    175e:	f9 81       	ldd	r31, Y+1	; 0x01
    1760:	9f 01       	movw	r18, r30
    1762:	21 50       	subi	r18, 0x01	; 1
    1764:	31 09       	sbc	r19, r1

    while(i >= 0) {
    1766:	72 f0       	brmi	.+28     	; 0x1784 <enqueueWQ+0x38>
    1768:	ee 0f       	add	r30, r30
    176a:	ff 1f       	adc	r31, r31
    176c:	e6 0f       	add	r30, r22
    176e:	f7 1f       	adc	r31, r23
    1770:	db 01       	movw	r26, r22
        Queue[i+1] = Queue[i];
    1772:	32 91       	ld	r19, -Z
    1774:	22 91       	ld	r18, -Z
    1776:	33 83       	std	Z+3, r19	; 0x03
    1778:	22 83       	std	Z+2, r18	; 0x02
        return;
    }

    int i = (*QCount) - 1;

    while(i >= 0) {
    177a:	ea 17       	cp	r30, r26
    177c:	fb 07       	cpc	r31, r27
    177e:	c9 f7       	brne	.-14     	; 0x1772 <enqueueWQ+0x26>
        Queue[i+1] = Queue[i];
        i--;
    1780:	2f ef       	ldi	r18, 0xFF	; 255
    1782:	3f ef       	ldi	r19, 0xFF	; 255
    }

    Queue[i+1] = *p;
    1784:	fc 01       	movw	r30, r24
    1786:	80 81       	ld	r24, Z
    1788:	91 81       	ldd	r25, Z+1	; 0x01
    178a:	2f 5f       	subi	r18, 0xFF	; 255
    178c:	3f 4f       	sbci	r19, 0xFF	; 255
    178e:	22 0f       	add	r18, r18
    1790:	33 1f       	adc	r19, r19
    1792:	fb 01       	movw	r30, r22
    1794:	e2 0f       	add	r30, r18
    1796:	f3 1f       	adc	r31, r19
    1798:	91 83       	std	Z+1, r25	; 0x01
    179a:	80 83       	st	Z, r24
    (*QCount)++;
    179c:	88 81       	ld	r24, Y
    179e:	99 81       	ldd	r25, Y+1	; 0x01
    17a0:	01 96       	adiw	r24, 0x01	; 1
    17a2:	99 83       	std	Y+1, r25	; 0x01
    17a4:	88 83       	st	Y, r24
}
    17a6:	df 91       	pop	r29
    17a8:	cf 91       	pop	r28
    17aa:	08 95       	ret

000017ac <enqueueSQ>:

void enqueueSQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    17ac:	cf 92       	push	r12
    17ae:	df 92       	push	r13
    17b0:	ef 92       	push	r14
    17b2:	ff 92       	push	r15
    17b4:	0f 93       	push	r16
    17b6:	1f 93       	push	r17
    17b8:	cf 93       	push	r28
    17ba:	df 93       	push	r29

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    17bc:	ea 01       	movw	r28, r20
    17be:	28 81       	ld	r18, Y
    17c0:	39 81       	ldd	r19, Y+1	; 0x01
    Queue[i+1] = *p;
    (*QCount)++;
}

void enqueueSQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    17c2:	2f 30       	cpi	r18, 0x0F	; 15
    17c4:	31 05       	cpc	r19, r1
    17c6:	09 f4       	brne	.+2      	; 0x17ca <enqueueSQ+0x1e>
    17c8:	59 c0       	rjmp	.+178    	; 0x187c <enqueueSQ+0xd0>
        return;
    }

    int i = (*QCount) - 1;
    17ca:	a8 81       	ld	r26, Y
    17cc:	b9 81       	ldd	r27, Y+1	; 0x01
    17ce:	11 97       	sbiw	r26, 0x01	; 1

    volatile PD *new = *p;
    17d0:	fc 01       	movw	r30, r24
    17d2:	c0 80       	ld	r12, Z
    17d4:	d1 80       	ldd	r13, Z+1	; 0x01

    volatile PD *temp = Queue[i];
    17d6:	fd 01       	movw	r30, r26
    17d8:	ee 0f       	add	r30, r30
    17da:	ff 1f       	adc	r31, r31
    17dc:	eb 01       	movw	r28, r22
    17de:	ce 0f       	add	r28, r30
    17e0:	df 1f       	adc	r29, r31
    17e2:	28 81       	ld	r18, Y
    17e4:	39 81       	ldd	r19, Y+1	; 0x01

    while(i >= 0 && ((new->wakeTickOverflow > temp->wakeTickOverflow) || ((new->wakeTickOverflow >= temp->wakeTickOverflow) && (new->wakeTick >= temp->wakeTick)))) {
    17e6:	bb 23       	and	r27, r27
    17e8:	cc f1       	brlt	.+114    	; 0x185c <enqueueSQ+0xb0>
    17ea:	fe 01       	movw	r30, r28
    17ec:	76 01       	movw	r14, r12
    17ee:	c0 ef       	ldi	r28, 0xF0	; 240
    17f0:	ec 1a       	sub	r14, r28
    17f2:	ce ef       	ldi	r28, 0xFE	; 254
    17f4:	fc 0a       	sbc	r15, r28
    17f6:	de ee       	ldi	r29, 0xEE	; 238
    17f8:	cd 1a       	sub	r12, r29
    17fa:	de ef       	ldi	r29, 0xFE	; 254
    17fc:	dd 0a       	sbc	r13, r29
    17fe:	0b c0       	rjmp	.+22     	; 0x1816 <enqueueSQ+0x6a>
        Queue[i+1] = Queue[i];
    1800:	20 81       	ld	r18, Z
    1802:	31 81       	ldd	r19, Z+1	; 0x01
    1804:	33 83       	std	Z+3, r19	; 0x03
    1806:	22 83       	std	Z+2, r18	; 0x02
        i--;
    1808:	11 97       	sbiw	r26, 0x01	; 1
        temp = Queue[i];
    180a:	32 91       	ld	r19, -Z
    180c:	22 91       	ld	r18, -Z

    volatile PD *new = *p;

    volatile PD *temp = Queue[i];

    while(i >= 0 && ((new->wakeTickOverflow > temp->wakeTickOverflow) || ((new->wakeTickOverflow >= temp->wakeTickOverflow) && (new->wakeTick >= temp->wakeTick)))) {
    180e:	af 3f       	cpi	r26, 0xFF	; 255
    1810:	cf ef       	ldi	r28, 0xFF	; 255
    1812:	bc 07       	cpc	r27, r28
    1814:	19 f1       	breq	.+70     	; 0x185c <enqueueSQ+0xb0>
    1816:	e7 01       	movw	r28, r14
    1818:	08 81       	ld	r16, Y
    181a:	19 81       	ldd	r17, Y+1	; 0x01
    181c:	e9 01       	movw	r28, r18
    181e:	c0 5f       	subi	r28, 0xF0	; 240
    1820:	de 4f       	sbci	r29, 0xFE	; 254
    1822:	09 90       	ld	r0, Y+
    1824:	d8 81       	ld	r29, Y
    1826:	c0 2d       	mov	r28, r0
    1828:	c0 17       	cp	r28, r16
    182a:	d1 07       	cpc	r29, r17
    182c:	48 f3       	brcs	.-46     	; 0x1800 <enqueueSQ+0x54>
    182e:	e7 01       	movw	r28, r14
    1830:	08 81       	ld	r16, Y
    1832:	19 81       	ldd	r17, Y+1	; 0x01
    1834:	e9 01       	movw	r28, r18
    1836:	c0 5f       	subi	r28, 0xF0	; 240
    1838:	de 4f       	sbci	r29, 0xFE	; 254
    183a:	09 90       	ld	r0, Y+
    183c:	d8 81       	ld	r29, Y
    183e:	c0 2d       	mov	r28, r0
    1840:	0c 17       	cp	r16, r28
    1842:	1d 07       	cpc	r17, r29
    1844:	58 f0       	brcs	.+22     	; 0x185c <enqueueSQ+0xb0>
    1846:	e6 01       	movw	r28, r12
    1848:	08 81       	ld	r16, Y
    184a:	19 81       	ldd	r17, Y+1	; 0x01
    184c:	2e 5e       	subi	r18, 0xEE	; 238
    184e:	3e 4f       	sbci	r19, 0xFE	; 254
    1850:	e9 01       	movw	r28, r18
    1852:	28 81       	ld	r18, Y
    1854:	39 81       	ldd	r19, Y+1	; 0x01
    1856:	02 17       	cp	r16, r18
    1858:	13 07       	cpc	r17, r19
    185a:	90 f6       	brcc	.-92     	; 0x1800 <enqueueSQ+0x54>
        Queue[i+1] = Queue[i];
        i--;
        temp = Queue[i];
    }

    Queue[i+1] = *p;
    185c:	fc 01       	movw	r30, r24
    185e:	80 81       	ld	r24, Z
    1860:	91 81       	ldd	r25, Z+1	; 0x01
    1862:	11 96       	adiw	r26, 0x01	; 1
    1864:	aa 0f       	add	r26, r26
    1866:	bb 1f       	adc	r27, r27
    1868:	a6 0f       	add	r26, r22
    186a:	b7 1f       	adc	r27, r23
    186c:	8d 93       	st	X+, r24
    186e:	9c 93       	st	X, r25
    (*QCount)++;
    1870:	ea 01       	movw	r28, r20
    1872:	88 81       	ld	r24, Y
    1874:	99 81       	ldd	r25, Y+1	; 0x01
    1876:	01 96       	adiw	r24, 0x01	; 1
    1878:	99 83       	std	Y+1, r25	; 0x01
    187a:	88 83       	st	Y, r24
}
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	1f 91       	pop	r17
    1882:	0f 91       	pop	r16
    1884:	ff 90       	pop	r15
    1886:	ef 90       	pop	r14
    1888:	df 90       	pop	r13
    188a:	cf 90       	pop	r12
    188c:	08 95       	ret

0000188e <enqueueRQ>:

/*
 *  Insert into the queue sorted by priority
 */
void enqueueRQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    188e:	cf 92       	push	r12
    1890:	df 92       	push	r13
    1892:	ef 92       	push	r14
    1894:	ff 92       	push	r15
    1896:	0f 93       	push	r16
    1898:	1f 93       	push	r17
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	6a 01       	movw	r12, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    18a0:	ea 01       	movw	r28, r20
    18a2:	28 81       	ld	r18, Y
    18a4:	39 81       	ldd	r19, Y+1	; 0x01

/*
 *  Insert into the queue sorted by priority
 */
void enqueueRQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    18a6:	2f 30       	cpi	r18, 0x0F	; 15
    18a8:	31 05       	cpc	r19, r1
    18aa:	09 f4       	brne	.+2      	; 0x18ae <enqueueRQ+0x20>
    18ac:	4a c0       	rjmp	.+148    	; 0x1942 <enqueueRQ+0xb4>
        return;
    }

    int i = (*QCount) - 1;
    18ae:	28 81       	ld	r18, Y
    18b0:	39 81       	ldd	r19, Y+1	; 0x01
    18b2:	21 50       	subi	r18, 0x01	; 1
    18b4:	31 09       	sbc	r19, r1

    volatile PD *new = *p;
    18b6:	fc 01       	movw	r30, r24
    18b8:	00 81       	ld	r16, Z
    18ba:	11 81       	ldd	r17, Z+1	; 0x01

    volatile PD *temp = Queue[i];
    18bc:	f9 01       	movw	r30, r18
    18be:	ee 0f       	add	r30, r30
    18c0:	ff 1f       	adc	r31, r31
    18c2:	db 01       	movw	r26, r22
    18c4:	ae 0f       	add	r26, r30
    18c6:	bf 1f       	adc	r27, r31
    18c8:	4d 91       	ld	r20, X+
    18ca:	5c 91       	ld	r21, X

    while(i >= 0 && (new->inheritedPy >= temp->inheritedPy)) {
    18cc:	33 23       	and	r19, r19
    18ce:	3c f1       	brlt	.+78     	; 0x191e <enqueueRQ+0x90>
    18d0:	d8 01       	movw	r26, r16
    18d2:	a9 5f       	subi	r26, 0xF9	; 249
    18d4:	be 4f       	sbci	r27, 0xFE	; 254
    18d6:	ed 90       	ld	r14, X+
    18d8:	fc 90       	ld	r15, X
    18da:	da 01       	movw	r26, r20
    18dc:	a9 5f       	subi	r26, 0xF9	; 249
    18de:	be 4f       	sbci	r27, 0xFE	; 254
    18e0:	4d 91       	ld	r20, X+
    18e2:	5c 91       	ld	r21, X
    18e4:	e4 16       	cp	r14, r20
    18e6:	f5 06       	cpc	r15, r21
    18e8:	d0 f0       	brcs	.+52     	; 0x191e <enqueueRQ+0x90>
    18ea:	e6 0f       	add	r30, r22
    18ec:	f7 1f       	adc	r31, r23
    18ee:	09 5f       	subi	r16, 0xF9	; 249
    18f0:	1e 4f       	sbci	r17, 0xFE	; 254
        Queue[i+1] = Queue[i];
    18f2:	a0 81       	ld	r26, Z
    18f4:	b1 81       	ldd	r27, Z+1	; 0x01
    18f6:	b3 83       	std	Z+3, r27	; 0x03
    18f8:	a2 83       	std	Z+2, r26	; 0x02
        i--;
    18fa:	21 50       	subi	r18, 0x01	; 1
    18fc:	31 09       	sbc	r19, r1
        temp = Queue[i];
    18fe:	b2 91       	ld	r27, -Z
    1900:	a2 91       	ld	r26, -Z

    volatile PD *new = *p;

    volatile PD *temp = Queue[i];

    while(i >= 0 && (new->inheritedPy >= temp->inheritedPy)) {
    1902:	2f 3f       	cpi	r18, 0xFF	; 255
    1904:	4f ef       	ldi	r20, 0xFF	; 255
    1906:	34 07       	cpc	r19, r20
    1908:	51 f0       	breq	.+20     	; 0x191e <enqueueRQ+0x90>
    190a:	e8 01       	movw	r28, r16
    190c:	e8 80       	ld	r14, Y
    190e:	f9 80       	ldd	r15, Y+1	; 0x01
    1910:	a9 5f       	subi	r26, 0xF9	; 249
    1912:	be 4f       	sbci	r27, 0xFE	; 254
    1914:	4d 91       	ld	r20, X+
    1916:	5c 91       	ld	r21, X
    1918:	e4 16       	cp	r14, r20
    191a:	f5 06       	cpc	r15, r21
    191c:	50 f7       	brcc	.-44     	; 0x18f2 <enqueueRQ+0x64>
        Queue[i+1] = Queue[i];
        i--;
        temp = Queue[i];
    }

    Queue[i+1] = *p;
    191e:	fc 01       	movw	r30, r24
    1920:	80 81       	ld	r24, Z
    1922:	91 81       	ldd	r25, Z+1	; 0x01
    1924:	2f 5f       	subi	r18, 0xFF	; 255
    1926:	3f 4f       	sbci	r19, 0xFF	; 255
    1928:	22 0f       	add	r18, r18
    192a:	33 1f       	adc	r19, r19
    192c:	fb 01       	movw	r30, r22
    192e:	e2 0f       	add	r30, r18
    1930:	f3 1f       	adc	r31, r19
    1932:	91 83       	std	Z+1, r25	; 0x01
    1934:	80 83       	st	Z, r24
    (*QCount)++;
    1936:	e6 01       	movw	r28, r12
    1938:	88 81       	ld	r24, Y
    193a:	99 81       	ldd	r25, Y+1	; 0x01
    193c:	01 96       	adiw	r24, 0x01	; 1
    193e:	99 83       	std	Y+1, r25	; 0x01
    1940:	88 83       	st	Y, r24
}
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	1f 91       	pop	r17
    1948:	0f 91       	pop	r16
    194a:	ff 90       	pop	r15
    194c:	ef 90       	pop	r14
    194e:	df 90       	pop	r13
    1950:	cf 90       	pop	r12
    1952:	08 95       	ret

00001954 <dequeueWQ>:

/*
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {
    1954:	0f 93       	push	r16
    1956:	1f 93       	push	r17
    1958:	cf 93       	push	r28
    195a:	df 93       	push	r29

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    195c:	eb 01       	movw	r28, r22
    195e:	28 81       	ld	r18, Y
    1960:	39 81       	ldd	r19, Y+1	; 0x01
/*
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {

    if(isEmpty(QCount)) {
    1962:	23 2b       	or	r18, r19
    1964:	09 f4       	brne	.+2      	; 0x1968 <dequeueWQ+0x14>
    1966:	54 c0       	rjmp	.+168    	; 0x1a10 <dequeueWQ+0xbc>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
    1968:	28 81       	ld	r18, Y
    196a:	39 81       	ldd	r19, Y+1	; 0x01
    196c:	21 50       	subi	r18, 0x01	; 1
    196e:	31 09       	sbc	r19, r1
    1970:	0a f4       	brpl	.+2      	; 0x1974 <dequeueWQ+0x20>
    1972:	51 c0       	rjmp	.+162    	; 0x1a16 <dequeueWQ+0xc2>
        if(Queue[i]->m == m){
    1974:	e9 01       	movw	r28, r18
    1976:	cc 0f       	add	r28, r28
    1978:	dd 1f       	adc	r29, r29
    197a:	fc 01       	movw	r30, r24
    197c:	ec 0f       	add	r30, r28
    197e:	fd 1f       	adc	r31, r29
    1980:	a0 81       	ld	r26, Z
    1982:	b1 81       	ldd	r27, Z+1	; 0x01
    1984:	fd 01       	movw	r30, r26
    1986:	ec 5e       	subi	r30, 0xEC	; 236
    1988:	fe 4f       	sbci	r31, 0xFE	; 254
    198a:	01 90       	ld	r0, Z+
    198c:	f0 81       	ld	r31, Z
    198e:	e0 2d       	mov	r30, r0
    1990:	e4 17       	cp	r30, r20
    1992:	f5 07       	cpc	r31, r21
    1994:	81 f4       	brne	.+32     	; 0x19b6 <dequeueWQ+0x62>
    1996:	0a c0       	rjmp	.+20     	; 0x19ac <dequeueWQ+0x58>
    1998:	ba 91       	ld	r27, -Y
    199a:	aa 91       	ld	r26, -Y
    199c:	fd 01       	movw	r30, r26
    199e:	ec 5e       	subi	r30, 0xEC	; 236
    19a0:	fe 4f       	sbci	r31, 0xFE	; 254
    19a2:	00 81       	ld	r16, Z
    19a4:	11 81       	ldd	r17, Z+1	; 0x01
    19a6:	04 17       	cp	r16, r20
    19a8:	15 07       	cpc	r17, r21
    19aa:	39 f4       	brne	.+14     	; 0x19ba <dequeueWQ+0x66>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
    19ac:	10 97       	sbiw	r26, 0x00	; 0
    19ae:	59 f4       	brne	.+22     	; 0x19c6 <dequeueWQ+0x72>
            i++;
        }
        (*QCount)--;
    }

    return result;
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	32 c0       	rjmp	.+100    	; 0x1a1a <dequeueWQ+0xc6>
    19b6:	c8 0f       	add	r28, r24
    19b8:	d9 1f       	adc	r29, r25
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
    19ba:	21 50       	subi	r18, 0x01	; 1
    19bc:	31 09       	sbc	r19, r1
    19be:	60 f7       	brcc	.-40     	; 0x1998 <dequeueWQ+0x44>
            i++;
        }
        (*QCount)--;
    }

    return result;
    19c0:	80 e0       	ldi	r24, 0x00	; 0
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	2a c0       	rjmp	.+84     	; 0x1a1a <dequeueWQ+0xc6>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i<(*QCount)-1) {
    19c6:	eb 01       	movw	r28, r22
    19c8:	48 81       	ld	r20, Y
    19ca:	59 81       	ldd	r21, Y+1	; 0x01
    19cc:	41 50       	subi	r20, 0x01	; 1
    19ce:	51 09       	sbc	r21, r1
    19d0:	24 17       	cp	r18, r20
    19d2:	35 07       	cpc	r19, r21
    19d4:	a4 f4       	brge	.+40     	; 0x19fe <dequeueWQ+0xaa>
    19d6:	a9 01       	movw	r20, r18
    19d8:	44 0f       	add	r20, r20
    19da:	55 1f       	adc	r21, r21
    19dc:	fc 01       	movw	r30, r24
    19de:	e4 0f       	add	r30, r20
    19e0:	f5 1f       	adc	r31, r21
            Queue[i] = Queue[i+1];
    19e2:	82 81       	ldd	r24, Z+2	; 0x02
    19e4:	93 81       	ldd	r25, Z+3	; 0x03
    19e6:	81 93       	st	Z+, r24
    19e8:	91 93       	st	Z+, r25
            i++;
    19ea:	2f 5f       	subi	r18, 0xFF	; 255
    19ec:	3f 4f       	sbci	r19, 0xFF	; 255
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i<(*QCount)-1) {
    19ee:	eb 01       	movw	r28, r22
    19f0:	48 81       	ld	r20, Y
    19f2:	59 81       	ldd	r21, Y+1	; 0x01
    19f4:	41 50       	subi	r20, 0x01	; 1
    19f6:	51 09       	sbc	r21, r1
    19f8:	24 17       	cp	r18, r20
    19fa:	35 07       	cpc	r19, r21
    19fc:	94 f3       	brlt	.-28     	; 0x19e2 <dequeueWQ+0x8e>
            Queue[i] = Queue[i+1];
            i++;
        }
        (*QCount)--;
    19fe:	fb 01       	movw	r30, r22
    1a00:	80 81       	ld	r24, Z
    1a02:	91 81       	ldd	r25, Z+1	; 0x01
    1a04:	01 97       	sbiw	r24, 0x01	; 1
    1a06:	91 83       	std	Z+1, r25	; 0x01
    1a08:	80 83       	st	Z, r24

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
        if(Queue[i]->m == m){
            result = Queue[i];
    1a0a:	8a 2f       	mov	r24, r26
    1a0c:	9b 2f       	mov	r25, r27
    1a0e:	05 c0       	rjmp	.+10     	; 0x1a1a <dequeueWQ+0xc6>
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {

    if(isEmpty(QCount)) {
        return NULL;
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <dequeueWQ+0xc6>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	90 e0       	ldi	r25, 0x00	; 0
}
    1a1a:	df 91       	pop	r29
    1a1c:	cf 91       	pop	r28
    1a1e:	1f 91       	pop	r17
    1a20:	0f 91       	pop	r16
    1a22:	08 95       	ret

00001a24 <dequeueRQ>:

/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {
    1a24:	cf 93       	push	r28
    1a26:	df 93       	push	r29
    1a28:	eb 01       	movw	r28, r22

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    1a2a:	28 81       	ld	r18, Y
    1a2c:	39 81       	ldd	r19, Y+1	; 0x01
/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
    1a2e:	23 2b       	or	r18, r19
    1a30:	09 f4       	brne	.+2      	; 0x1a34 <dequeueRQ+0x10>
    1a32:	48 c0       	rjmp	.+144    	; 0x1ac4 <dequeueRQ+0xa0>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
    1a34:	e8 81       	ld	r30, Y
    1a36:	f9 81       	ldd	r31, Y+1	; 0x01
    1a38:	9f 01       	movw	r18, r30
    1a3a:	21 50       	subi	r18, 0x01	; 1
    1a3c:	31 09       	sbc	r19, r1
    1a3e:	0a f4       	brpl	.+2      	; 0x1a42 <dequeueRQ+0x1e>
    1a40:	44 c0       	rjmp	.+136    	; 0x1aca <dequeueRQ+0xa6>
    1a42:	ee 0f       	add	r30, r30
    1a44:	ff 1f       	adc	r31, r31
    1a46:	e8 0f       	add	r30, r24
    1a48:	f9 1f       	adc	r31, r25
        if((Queue[i]->suspended == 0) && (Queue[i]->state == READY)) {
    1a4a:	52 91       	ld	r21, -Z
    1a4c:	42 91       	ld	r20, -Z
    1a4e:	da 01       	movw	r26, r20
    1a50:	a6 5e       	subi	r26, 0xE6	; 230
    1a52:	be 4f       	sbci	r27, 0xFE	; 254
    1a54:	6d 91       	ld	r22, X+
    1a56:	7c 91       	ld	r23, X
    1a58:	11 97       	sbiw	r26, 0x01	; 1
    1a5a:	67 2b       	or	r22, r23
    1a5c:	59 f4       	brne	.+22     	; 0x1a74 <dequeueRQ+0x50>
    1a5e:	56 97       	sbiw	r26, 0x16	; 22
    1a60:	6c 91       	ld	r22, X
    1a62:	61 30       	cpi	r22, 0x01	; 1
    1a64:	39 f4       	brne	.+14     	; 0x1a74 <dequeueRQ+0x50>
    1a66:	f9 01       	movw	r30, r18
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
    1a68:	41 15       	cp	r20, r1
    1a6a:	51 05       	cpc	r21, r1
    1a6c:	49 f4       	brne	.+18     	; 0x1a80 <dequeueRQ+0x5c>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	2d c0       	rjmp	.+90     	; 0x1ace <dequeueRQ+0xaa>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
    1a74:	21 50       	subi	r18, 0x01	; 1
    1a76:	31 09       	sbc	r19, r1
    1a78:	40 f7       	brcc	.-48     	; 0x1a4a <dequeueRQ+0x26>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	27 c0       	rjmp	.+78     	; 0x1ace <dequeueRQ+0xaa>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i < (*QCount)-1) {
    1a80:	68 81       	ld	r22, Y
    1a82:	79 81       	ldd	r23, Y+1	; 0x01
    1a84:	61 50       	subi	r22, 0x01	; 1
    1a86:	71 09       	sbc	r23, r1
    1a88:	26 17       	cp	r18, r22
    1a8a:	37 07       	cpc	r19, r23
    1a8c:	9c f4       	brge	.+38     	; 0x1ab4 <dequeueRQ+0x90>
    1a8e:	ee 0f       	add	r30, r30
    1a90:	ff 1f       	adc	r31, r31
    1a92:	dc 01       	movw	r26, r24
    1a94:	ae 0f       	add	r26, r30
    1a96:	bf 1f       	adc	r27, r31
            Queue[i] = Queue[i+1];
    1a98:	12 96       	adiw	r26, 0x02	; 2
    1a9a:	8d 91       	ld	r24, X+
    1a9c:	9c 91       	ld	r25, X
    1a9e:	13 97       	sbiw	r26, 0x03	; 3
    1aa0:	8d 93       	st	X+, r24
    1aa2:	9d 93       	st	X+, r25
            i++;
    1aa4:	2f 5f       	subi	r18, 0xFF	; 255
    1aa6:	3f 4f       	sbci	r19, 0xFF	; 255
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i < (*QCount)-1) {
    1aa8:	e8 81       	ld	r30, Y
    1aaa:	f9 81       	ldd	r31, Y+1	; 0x01
    1aac:	31 97       	sbiw	r30, 0x01	; 1
    1aae:	2e 17       	cp	r18, r30
    1ab0:	3f 07       	cpc	r19, r31
    1ab2:	94 f3       	brlt	.-28     	; 0x1a98 <dequeueRQ+0x74>
            Queue[i] = Queue[i+1];
            i++;
        }
        (*QCount)--;
    1ab4:	88 81       	ld	r24, Y
    1ab6:	99 81       	ldd	r25, Y+1	; 0x01
    1ab8:	01 97       	sbiw	r24, 0x01	; 1
    1aba:	99 83       	std	Y+1, r25	; 0x01
    1abc:	88 83       	st	Y, r24
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
        if((Queue[i]->suspended == 0) && (Queue[i]->state == READY)) {
    1abe:	84 2f       	mov	r24, r20
    1ac0:	95 2f       	mov	r25, r21
    1ac2:	05 c0       	rjmp	.+10     	; 0x1ace <dequeueRQ+0xaa>
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
        return NULL;
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	02 c0       	rjmp	.+4      	; 0x1ace <dequeueRQ+0xaa>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1aca:	80 e0       	ldi	r24, 0x00	; 0
    1acc:	90 e0       	ldi	r25, 0x00	; 0
}
    1ace:	df 91       	pop	r29
    1ad0:	cf 91       	pop	r28
    1ad2:	08 95       	ret

00001ad4 <dequeue>:

/*
 *  Return the first element of the queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
    1ad4:	db 01       	movw	r26, r22

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    1ad6:	2d 91       	ld	r18, X+
    1ad8:	3c 91       	ld	r19, X
    1ada:	11 97       	sbiw	r26, 0x01	; 1
/*
 *  Return the first element of the queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
    1adc:	23 2b       	or	r18, r19
    1ade:	a9 f0       	breq	.+42     	; 0x1b0a <dequeue+0x36>
        return;
    }

    volatile PD *result = (Queue[(*QCount)-1]);
    1ae0:	2d 91       	ld	r18, X+
    1ae2:	3c 91       	ld	r19, X
    1ae4:	11 97       	sbiw	r26, 0x01	; 1
    1ae6:	f9 01       	movw	r30, r18
    1ae8:	e1 50       	subi	r30, 0x01	; 1
    1aea:	f0 48       	sbci	r31, 0x80	; 128
    1aec:	ee 0f       	add	r30, r30
    1aee:	ff 1f       	adc	r31, r31
    1af0:	e8 0f       	add	r30, r24
    1af2:	f9 1f       	adc	r31, r25
    1af4:	80 81       	ld	r24, Z
    1af6:	91 81       	ldd	r25, Z+1	; 0x01
    (*QCount)--;
    1af8:	2d 91       	ld	r18, X+
    1afa:	3c 91       	ld	r19, X
    1afc:	11 97       	sbiw	r26, 0x01	; 1
    1afe:	21 50       	subi	r18, 0x01	; 1
    1b00:	31 09       	sbc	r19, r1
    1b02:	11 96       	adiw	r26, 0x01	; 1
    1b04:	3c 93       	st	X, r19
    1b06:	2e 93       	st	-X, r18
    1b08:	08 95       	ret

    return result;
}
    1b0a:	08 95       	ret

00001b0c <_get_status>:
	}

	wh = (16 - weight) * 100;
	wh /= 16;
	return wh;
}
    1b0c:	2d 98       	cbi	0x05, 5	; 5
    1b0e:	8f ef       	ldi	r24, 0xFF	; 255
    1b10:	04 d1       	rcall	.+520    	; 0x1d1a <SPI_Write_Byte>
    1b12:	2d 9a       	sbi	0x05, 5	; 5
    1b14:	08 95       	ret

00001b16 <_set_register>:
    1b16:	0f 93       	push	r16
    1b18:	1f 93       	push	r17
    1b1a:	cf 93       	push	r28
    1b1c:	df 93       	push	r29
    1b1e:	8b 01       	movw	r16, r22
    1b20:	d4 2f       	mov	r29, r20
    1b22:	2d 98       	cbi	0x05, 5	; 5
    1b24:	8f 71       	andi	r24, 0x1F	; 31
    1b26:	80 62       	ori	r24, 0x20	; 32
    1b28:	f8 d0       	rcall	.+496    	; 0x1d1a <SPI_Write_Byte>
    1b2a:	c8 2f       	mov	r28, r24
    1b2c:	6d 2f       	mov	r22, r29
    1b2e:	c8 01       	movw	r24, r16
    1b30:	e1 d0       	rcall	.+450    	; 0x1cf4 <SPI_Write_Block>
    1b32:	2d 9a       	sbi	0x05, 5	; 5
    1b34:	8c 2f       	mov	r24, r28
    1b36:	df 91       	pop	r29
    1b38:	cf 91       	pop	r28
    1b3a:	1f 91       	pop	r17
    1b3c:	0f 91       	pop	r16
    1b3e:	08 95       	ret

00001b40 <_get_register>:
    1b40:	0f 93       	push	r16
    1b42:	1f 93       	push	r17
    1b44:	cf 93       	push	r28
    1b46:	df 93       	push	r29
    1b48:	eb 01       	movw	r28, r22
    1b4a:	14 2f       	mov	r17, r20
    1b4c:	44 23       	and	r20, r20
    1b4e:	69 f0       	breq	.+26     	; 0x1b6a <_get_register+0x2a>
    1b50:	fb 01       	movw	r30, r22
    1b52:	2f ef       	ldi	r18, 0xFF	; 255
    1b54:	24 0f       	add	r18, r20
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	2f 5f       	subi	r18, 0xFF	; 255
    1b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b5c:	26 0f       	add	r18, r22
    1b5e:	37 1f       	adc	r19, r23
    1b60:	9f ef       	ldi	r25, 0xFF	; 255
    1b62:	91 93       	st	Z+, r25
    1b64:	e2 17       	cp	r30, r18
    1b66:	f3 07       	cpc	r31, r19
    1b68:	e1 f7       	brne	.-8      	; 0x1b62 <_get_register+0x22>
    1b6a:	2d 98       	cbi	0x05, 5	; 5
    1b6c:	8f 71       	andi	r24, 0x1F	; 31
    1b6e:	d5 d0       	rcall	.+426    	; 0x1d1a <SPI_Write_Byte>
    1b70:	08 2f       	mov	r16, r24
    1b72:	41 2f       	mov	r20, r17
    1b74:	be 01       	movw	r22, r28
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	a5 d0       	rcall	.+330    	; 0x1cc6 <SPI_ReadWrite_Block>
    1b7c:	2d 9a       	sbi	0x05, 5	; 5
    1b7e:	80 2f       	mov	r24, r16
    1b80:	df 91       	pop	r29
    1b82:	cf 91       	pop	r28
    1b84:	1f 91       	pop	r17
    1b86:	0f 91       	pop	r16
    1b88:	08 95       	ret

00001b8a <_set_rx_mode>:
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
    1b8e:	1f 92       	push	r1
    1b90:	cd b7       	in	r28, 0x3d	; 61
    1b92:	de b7       	in	r29, 0x3e	; 62
    1b94:	41 e0       	ldi	r20, 0x01	; 1
    1b96:	be 01       	movw	r22, r28
    1b98:	6f 5f       	subi	r22, 0xFF	; 255
    1b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	d0 df       	rcall	.-96     	; 0x1b40 <_get_register>
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	80 fd       	sbrc	r24, 0
    1ba4:	10 c0       	rjmp	.+32     	; 0x1bc6 <_set_rx_mode+0x3c>
    1ba6:	81 60       	ori	r24, 0x01	; 1
    1ba8:	89 83       	std	Y+1, r24	; 0x01
    1baa:	41 e0       	ldi	r20, 0x01	; 1
    1bac:	be 01       	movw	r22, r28
    1bae:	6f 5f       	subi	r22, 0xFF	; 255
    1bb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
    1bb4:	b0 df       	rcall	.-160    	; 0x1b16 <_set_register>
    1bb6:	85 e1       	ldi	r24, 0x15	; 21
    1bb8:	8a 95       	dec	r24
    1bba:	f1 f7       	brne	.-4      	; 0x1bb8 <_set_rx_mode+0x2e>
    1bbc:	00 c0       	rjmp	.+0      	; 0x1bbe <_set_rx_mode+0x34>
    1bbe:	85 e1       	ldi	r24, 0x15	; 21
    1bc0:	8a 95       	dec	r24
    1bc2:	f1 f7       	brne	.-4      	; 0x1bc0 <_set_rx_mode+0x36>
    1bc4:	00 c0       	rjmp	.+0      	; 0x1bc6 <_set_rx_mode+0x3c>
    1bc6:	0f 90       	pop	r0
    1bc8:	df 91       	pop	r29
    1bca:	cf 91       	pop	r28
    1bcc:	08 95       	ret

00001bce <_reset_pipe0_address>:
    1bce:	80 91 0a 02 	lds	r24, 0x020A
    1bd2:	88 23       	and	r24, r24
    1bd4:	29 f0       	breq	.+10     	; 0x1be0 <_reset_pipe0_address+0x12>
    1bd6:	45 e0       	ldi	r20, 0x05	; 5
    1bd8:	65 e0       	ldi	r22, 0x05	; 5
    1bda:	72 e0       	ldi	r23, 0x02	; 2
    1bdc:	8a e0       	ldi	r24, 0x0A	; 10
    1bde:	9b cf       	rjmp	.-202    	; 0x1b16 <_set_register>
    1be0:	08 95       	ret

00001be2 <__vector_1>:

// Interrupt handler
ISR(INT0_vect)
{
    1be2:	1f 92       	push	r1
    1be4:	0f 92       	push	r0
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	0f 92       	push	r0
    1bea:	11 24       	eor	r1, r1
    1bec:	0b b6       	in	r0, 0x3b	; 59
    1bee:	0f 92       	push	r0
    1bf0:	2f 93       	push	r18
    1bf2:	3f 93       	push	r19
    1bf4:	4f 93       	push	r20
    1bf6:	5f 93       	push	r21
    1bf8:	6f 93       	push	r22
    1bfa:	7f 93       	push	r23
    1bfc:	8f 93       	push	r24
    1bfe:	9f 93       	push	r25
    1c00:	af 93       	push	r26
    1c02:	bf 93       	push	r27
    1c04:	ef 93       	push	r30
    1c06:	ff 93       	push	r31
    1c08:	cf 93       	push	r28
    1c0a:	df 93       	push	r29
    1c0c:	1f 92       	push	r1
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;
    uint8_t pipe_number;

    RADIO_CE_LOW();
    1c12:	2c 98       	cbi	0x05, 4	; 5

    status = _get_status();
    1c14:	7b df       	rcall	.-266    	; 0x1b0c <_get_status>
    1c16:	89 83       	std	Y+1, r24	; 0x01

    if (status & _BV(RX_DR)) {
    1c18:	86 ff       	sbrs	r24, 6
    1c1a:	04 c0       	rjmp	.+8      	; 0x1c24 <__vector_1+0x42>
        pipe_number =  (status & 0xE) >> 1;
    1c1c:	8e 70       	andi	r24, 0x0E	; 14
        radio_rxhandler(pipe_number);
    1c1e:	86 95       	lsr	r24
    1c20:	0e 94 66 01 	call	0x2cc	; 0x2cc <radio_rxhandler>
    }

    // We can get the TX_DS or the MAX_RT interrupt, but not both.
    if (status & _BV(TX_DS)) {
    1c24:	89 81       	ldd	r24, Y+1	; 0x01
    1c26:	85 ff       	sbrs	r24, 5
    1c28:	1b c0       	rjmp	.+54     	; 0x1c60 <__vector_1+0x7e>
    	// if there's nothing left to transmit, switch back to receive mode.
        transmit_lock = 0;
    1c2a:	10 92 24 15 	sts	0x1524, r1
        _reset_pipe0_address();
    1c2e:	cf df       	rcall	.-98     	; 0x1bce <_reset_pipe0_address>
        _set_rx_mode();
    1c30:	ac df       	rcall	.-168    	; 0x1b8a <_set_rx_mode>

        // indicate in the history that a packet was transmitted successfully by appending a 1.
        tx_history <<= 1;
    1c32:	80 91 03 02 	lds	r24, 0x0203
    1c36:	90 91 04 02 	lds	r25, 0x0204
    1c3a:	88 0f       	add	r24, r24
    1c3c:	99 1f       	adc	r25, r25
    1c3e:	90 93 04 02 	sts	0x0204, r25
    1c42:	80 93 03 02 	sts	0x0203, r24
        tx_history |= 1;
    1c46:	80 91 03 02 	lds	r24, 0x0203
    1c4a:	90 91 04 02 	lds	r25, 0x0204
    1c4e:	81 60       	ori	r24, 0x01	; 1
    1c50:	90 93 04 02 	sts	0x0204, r25
    1c54:	80 93 03 02 	sts	0x0203, r24
        tx_last_status = RADIO_TX_SUCCESS;
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	80 93 02 02 	sts	0x0202, r24
    1c5e:	14 c0       	rjmp	.+40     	; 0x1c88 <__vector_1+0xa6>
    } else if (status & _BV(MAX_RT)) {
    1c60:	84 ff       	sbrs	r24, 4
    1c62:	12 c0       	rjmp	.+36     	; 0x1c88 <__vector_1+0xa6>
        // enable SPI
       // RADIO_CSN_LOW();


        // flush the failed packet (it stays in the Tx FIFO; we could try to resend it by setting CE high)
        SPI_Write_Byte( FLUSH_TX );
    1c64:	81 ee       	ldi	r24, 0xE1	; 225
    1c66:	59 d0       	rcall	.+178    	; 0x1d1a <SPI_Write_Byte>

        // resynch SPI
        //RADIO_CSN_HIGH();

        transmit_lock = 0;
    1c68:	10 92 24 15 	sts	0x1524, r1
        _reset_pipe0_address();
    1c6c:	b0 df       	rcall	.-160    	; 0x1bce <_reset_pipe0_address>
        _set_rx_mode();
    1c6e:	8d df       	rcall	.-230    	; 0x1b8a <_set_rx_mode>

        // indicate in the history that a packet was dropped by appending a 0.
        tx_history <<= 1;
    1c70:	80 91 03 02 	lds	r24, 0x0203
    1c74:	90 91 04 02 	lds	r25, 0x0204
    1c78:	88 0f       	add	r24, r24
    1c7a:	99 1f       	adc	r25, r25
    1c7c:	90 93 04 02 	sts	0x0204, r25
    1c80:	80 93 03 02 	sts	0x0203, r24
        tx_last_status = RADIO_TX_MAX_RT;
    1c84:	10 92 02 02 	sts	0x0202, r1
    }

    // clear the interrupt flags.
	status = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
    1c88:	80 e7       	ldi	r24, 0x70	; 112
    1c8a:	89 83       	std	Y+1, r24	; 0x01
	_set_register(STATUS, &status, 1);
    1c8c:	41 e0       	ldi	r20, 0x01	; 1
    1c8e:	be 01       	movw	r22, r28
    1c90:	6f 5f       	subi	r22, 0xFF	; 255
    1c92:	7f 4f       	sbci	r23, 0xFF	; 255
    1c94:	87 e0       	ldi	r24, 0x07	; 7
    1c96:	3f df       	rcall	.-386    	; 0x1b16 <_set_register>

    RADIO_CE_HIGH();
    1c98:	2c 9a       	sbi	0x05, 4	; 5
}
    1c9a:	0f 90       	pop	r0
    1c9c:	df 91       	pop	r29
    1c9e:	cf 91       	pop	r28
    1ca0:	ff 91       	pop	r31
    1ca2:	ef 91       	pop	r30
    1ca4:	bf 91       	pop	r27
    1ca6:	af 91       	pop	r26
    1ca8:	9f 91       	pop	r25
    1caa:	8f 91       	pop	r24
    1cac:	7f 91       	pop	r23
    1cae:	6f 91       	pop	r22
    1cb0:	5f 91       	pop	r21
    1cb2:	4f 91       	pop	r20
    1cb4:	3f 91       	pop	r19
    1cb6:	2f 91       	pop	r18
    1cb8:	0f 90       	pop	r0
    1cba:	0b be       	out	0x3b, r0	; 59
    1cbc:	0f 90       	pop	r0
    1cbe:	0f be       	out	0x3f, r0	; 63
    1cc0:	0f 90       	pop	r0
    1cc2:	1f 90       	pop	r1
    1cc4:	18 95       	reti

00001cc6 <SPI_ReadWrite_Block>:
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1cc6:	44 23       	and	r20, r20
    1cc8:	a1 f0       	breq	.+40     	; 0x1cf2 <SPI_ReadWrite_Block+0x2c>
    1cca:	fc 01       	movw	r30, r24
    1ccc:	a6 2f       	mov	r26, r22
    1cce:	b7 2f       	mov	r27, r23
    1cd0:	41 50       	subi	r20, 0x01	; 1
    1cd2:	24 2f       	mov	r18, r20
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	2f 5f       	subi	r18, 0xFF	; 255
    1cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cda:	28 0f       	add	r18, r24
    1cdc:	39 1f       	adc	r19, r25
          SPDR = data[i];
    1cde:	91 91       	ld	r25, Z+
    1ce0:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1ce2:	0d b4       	in	r0, 0x2d	; 45
    1ce4:	07 fe       	sbrs	r0, 7
    1ce6:	fd cf       	rjmp	.-6      	; 0x1ce2 <SPI_ReadWrite_Block+0x1c>
          buffer[i] = SPDR;
    1ce8:	9e b5       	in	r25, 0x2e	; 46
    1cea:	9d 93       	st	X+, r25
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1cec:	e2 17       	cp	r30, r18
    1cee:	f3 07       	cpc	r31, r19
    1cf0:	b1 f7       	brne	.-20     	; 0x1cde <SPI_ReadWrite_Block+0x18>
    1cf2:	08 95       	ret

00001cf4 <SPI_Write_Block>:
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1cf4:	66 23       	and	r22, r22
    1cf6:	81 f0       	breq	.+32     	; 0x1d18 <SPI_Write_Block+0x24>
    1cf8:	fc 01       	movw	r30, r24
    1cfa:	61 50       	subi	r22, 0x01	; 1
    1cfc:	26 2f       	mov	r18, r22
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	2f 5f       	subi	r18, 0xFF	; 255
    1d02:	3f 4f       	sbci	r19, 0xFF	; 255
    1d04:	28 0f       	add	r18, r24
    1d06:	39 1f       	adc	r19, r25
          SPDR = data[i];
    1d08:	91 91       	ld	r25, Z+
    1d0a:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1d0c:	0d b4       	in	r0, 0x2d	; 45
    1d0e:	07 fe       	sbrs	r0, 7
    1d10:	fd cf       	rjmp	.-6      	; 0x1d0c <SPI_Write_Block+0x18>
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1d12:	e2 17       	cp	r30, r18
    1d14:	f3 07       	cpc	r31, r19
    1d16:	c1 f7       	brne	.-16     	; 0x1d08 <SPI_Write_Block+0x14>
    1d18:	08 95       	ret

00001d1a <SPI_Write_Byte>:
    }
}

uint8_t SPI_Write_Byte(uint8_t byte)
{
    SPDR = byte;
    1d1a:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
    1d1c:	0d b4       	in	r0, 0x2d	; 45
    1d1e:	07 fe       	sbrs	r0, 7
    1d20:	fd cf       	rjmp	.-6      	; 0x1d1c <SPI_Write_Byte+0x2>
    return SPDR;
    1d22:	8e b5       	in	r24, 0x2e	; 46
}
    1d24:	08 95       	ret

00001d26 <Roomba_Init>:
		return;
	}

	state = newState;
	_delay_ms(20);
}
    1d26:	3d 9a       	sbi	0x07, 5	; 7
    1d28:	45 98       	cbi	0x08, 5	; 8
    1d2a:	2f ef       	ldi	r18, 0xFF	; 255
    1d2c:	39 e6       	ldi	r19, 0x69	; 105
    1d2e:	88 e1       	ldi	r24, 0x18	; 24
    1d30:	21 50       	subi	r18, 0x01	; 1
    1d32:	30 40       	sbci	r19, 0x00	; 0
    1d34:	80 40       	sbci	r24, 0x00	; 0
    1d36:	e1 f7       	brne	.-8      	; 0x1d30 <Roomba_Init+0xa>
    1d38:	00 c0       	rjmp	.+0      	; 0x1d3a <Roomba_Init+0x14>
    1d3a:	00 00       	nop
    1d3c:	45 9a       	sbi	0x08, 5	; 8
    1d3e:	9f ef       	ldi	r25, 0xFF	; 255
    1d40:	27 ea       	ldi	r18, 0xA7	; 167
    1d42:	31 e6       	ldi	r19, 0x61	; 97
    1d44:	91 50       	subi	r25, 0x01	; 1
    1d46:	20 40       	sbci	r18, 0x00	; 0
    1d48:	30 40       	sbci	r19, 0x00	; 0
    1d4a:	e1 f7       	brne	.-8      	; 0x1d44 <Roomba_Init+0x1e>
    1d4c:	00 c0       	rjmp	.+0      	; 0x1d4e <Roomba_Init+0x28>
    1d4e:	00 00       	nop
    1d50:	83 e0       	ldi	r24, 0x03	; 3
    1d52:	45 98       	cbi	0x08, 5	; 8
    1d54:	9f ef       	ldi	r25, 0xFF	; 255
    1d56:	20 e7       	ldi	r18, 0x70	; 112
    1d58:	32 e0       	ldi	r19, 0x02	; 2
    1d5a:	91 50       	subi	r25, 0x01	; 1
    1d5c:	20 40       	sbci	r18, 0x00	; 0
    1d5e:	30 40       	sbci	r19, 0x00	; 0
    1d60:	e1 f7       	brne	.-8      	; 0x1d5a <Roomba_Init+0x34>
    1d62:	00 c0       	rjmp	.+0      	; 0x1d64 <Roomba_Init+0x3e>
    1d64:	00 00       	nop
    1d66:	45 9a       	sbi	0x08, 5	; 8
    1d68:	9f ef       	ldi	r25, 0xFF	; 255
    1d6a:	20 e7       	ldi	r18, 0x70	; 112
    1d6c:	32 e0       	ldi	r19, 0x02	; 2
    1d6e:	91 50       	subi	r25, 0x01	; 1
    1d70:	20 40       	sbci	r18, 0x00	; 0
    1d72:	30 40       	sbci	r19, 0x00	; 0
    1d74:	e1 f7       	brne	.-8      	; 0x1d6e <Roomba_Init+0x48>
    1d76:	00 c0       	rjmp	.+0      	; 0x1d78 <Roomba_Init+0x52>
    1d78:	00 00       	nop
    1d7a:	81 50       	subi	r24, 0x01	; 1
    1d7c:	51 f7       	brne	.-44     	; 0x1d52 <Roomba_Init+0x2c>
    1d7e:	45 d0       	rcall	.+138    	; 0x1e0a <uart_init>
    1d80:	60 e0       	ldi	r22, 0x00	; 0
    1d82:	70 e0       	ldi	r23, 0x00	; 0
    1d84:	80 e8       	ldi	r24, 0x80	; 128
    1d86:	61 d0       	rcall	.+194    	; 0x1e4a <uart_putchar>
    1d88:	8f ef       	ldi	r24, 0xFF	; 255
    1d8a:	99 ef       	ldi	r25, 0xF9	; 249
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	81 50       	subi	r24, 0x01	; 1
    1d90:	90 40       	sbci	r25, 0x00	; 0
    1d92:	20 40       	sbci	r18, 0x00	; 0
    1d94:	e1 f7       	brne	.-8      	; 0x1d8e <Roomba_Init+0x68>
    1d96:	00 c0       	rjmp	.+0      	; 0x1d98 <Roomba_Init+0x72>
    1d98:	00 00       	nop
    1d9a:	3f ef       	ldi	r19, 0xFF	; 255
    1d9c:	81 ee       	ldi	r24, 0xE1	; 225
    1d9e:	94 e0       	ldi	r25, 0x04	; 4
    1da0:	31 50       	subi	r19, 0x01	; 1
    1da2:	80 40       	sbci	r24, 0x00	; 0
    1da4:	90 40       	sbci	r25, 0x00	; 0
    1da6:	e1 f7       	brne	.-8      	; 0x1da0 <Roomba_Init+0x7a>
    1da8:	00 c0       	rjmp	.+0      	; 0x1daa <Roomba_Init+0x84>
    1daa:	00 00       	nop
    1dac:	60 e0       	ldi	r22, 0x00	; 0
    1dae:	70 e0       	ldi	r23, 0x00	; 0
    1db0:	82 e8       	ldi	r24, 0x82	; 130
    1db2:	4b d0       	rcall	.+150    	; 0x1e4a <uart_putchar>
    1db4:	2f ef       	ldi	r18, 0xFF	; 255
    1db6:	39 ef       	ldi	r19, 0xF9	; 249
    1db8:	80 e0       	ldi	r24, 0x00	; 0
    1dba:	21 50       	subi	r18, 0x01	; 1
    1dbc:	30 40       	sbci	r19, 0x00	; 0
    1dbe:	80 40       	sbci	r24, 0x00	; 0
    1dc0:	e1 f7       	brne	.-8      	; 0x1dba <Roomba_Init+0x94>
    1dc2:	00 c0       	rjmp	.+0      	; 0x1dc4 <Roomba_Init+0x9e>
    1dc4:	00 00       	nop
    1dc6:	08 95       	ret

00001dc8 <Roomba_Drive>:

void Roomba_Drive( int16_t velocity, int16_t radius )
{
    1dc8:	0f 93       	push	r16
    1dca:	1f 93       	push	r17
    1dcc:	cf 93       	push	r28
    1dce:	df 93       	push	r29
    1dd0:	18 2f       	mov	r17, r24
    1dd2:	09 2f       	mov	r16, r25
    1dd4:	c6 2f       	mov	r28, r22
    1dd6:	d7 2f       	mov	r29, r23
	uart_putchar(DRIVE, ROOMBA_UART);
    1dd8:	60 e0       	ldi	r22, 0x00	; 0
    1dda:	70 e0       	ldi	r23, 0x00	; 0
    1ddc:	89 e8       	ldi	r24, 0x89	; 137
    1dde:	35 d0       	rcall	.+106    	; 0x1e4a <uart_putchar>
	uart_putchar(HIGH_BYTE(velocity), ROOMBA_UART);
    1de0:	60 e0       	ldi	r22, 0x00	; 0
    1de2:	70 e0       	ldi	r23, 0x00	; 0
    1de4:	80 2f       	mov	r24, r16
    1de6:	31 d0       	rcall	.+98     	; 0x1e4a <uart_putchar>
	uart_putchar(LOW_BYTE(velocity), ROOMBA_UART);
    1de8:	60 e0       	ldi	r22, 0x00	; 0
    1dea:	70 e0       	ldi	r23, 0x00	; 0
    1dec:	81 2f       	mov	r24, r17
    1dee:	2d d0       	rcall	.+90     	; 0x1e4a <uart_putchar>
	uart_putchar(HIGH_BYTE(radius), ROOMBA_UART);
    1df0:	60 e0       	ldi	r22, 0x00	; 0
    1df2:	70 e0       	ldi	r23, 0x00	; 0
    1df4:	8d 2f       	mov	r24, r29
    1df6:	29 d0       	rcall	.+82     	; 0x1e4a <uart_putchar>
	uart_putchar(LOW_BYTE(radius), ROOMBA_UART);
    1df8:	60 e0       	ldi	r22, 0x00	; 0
    1dfa:	70 e0       	ldi	r23, 0x00	; 0
    1dfc:	8c 2f       	mov	r24, r28
    1dfe:	25 d0       	rcall	.+74     	; 0x1e4a <uart_putchar>
}
    1e00:	df 91       	pop	r29
    1e02:	cf 91       	pop	r28
    1e04:	1f 91       	pop	r17
    1e06:	0f 91       	pop	r16
    1e08:	08 95       	ret

00001e0a <uart_init>:
		uart_putchar(*string, uart);
		string++;
	}
	
	
}
    1e0a:	22 e0       	ldi	r18, 0x02	; 2
    1e0c:	20 93 c0 00 	sts	0x00C0, r18
    1e10:	98 e9       	ldi	r25, 0x98	; 152
    1e12:	90 93 c1 00 	sts	0x00C1, r25
    1e16:	86 e0       	ldi	r24, 0x06	; 6
    1e18:	80 93 c2 00 	sts	0x00C2, r24
    1e1c:	20 93 c8 00 	sts	0x00C8, r18
    1e20:	90 93 c9 00 	sts	0x00C9, r25
    1e24:	80 93 ca 00 	sts	0x00CA, r24
    1e28:	8f ec       	ldi	r24, 0xCF	; 207
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	90 93 cd 00 	sts	0x00CD, r25
    1e30:	80 93 cc 00 	sts	0x00CC, r24
    1e34:	87 e6       	ldi	r24, 0x67	; 103
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	90 93 c5 00 	sts	0x00C5, r25
    1e3c:	80 93 c4 00 	sts	0x00C4, r24
    1e40:	10 92 68 14 	sts	0x1468, r1
    1e44:	10 92 67 14 	sts	0x1467, r1
    1e48:	08 95       	ret

00001e4a <uart_putchar>:
    1e4a:	67 2b       	or	r22, r23
    1e4c:	41 f0       	breq	.+16     	; 0x1e5e <uart_putchar+0x14>
    1e4e:	e8 ec       	ldi	r30, 0xC8	; 200
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	90 81       	ld	r25, Z
    1e54:	95 ff       	sbrs	r25, 5
    1e56:	fd cf       	rjmp	.-6      	; 0x1e52 <uart_putchar+0x8>
    1e58:	80 93 ce 00 	sts	0x00CE, r24
    1e5c:	08 95       	ret
    1e5e:	e0 ec       	ldi	r30, 0xC0	; 192
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	90 81       	ld	r25, Z
    1e64:	95 ff       	sbrs	r25, 5
    1e66:	fd cf       	rjmp	.-6      	; 0x1e62 <uart_putchar+0x18>
    1e68:	80 93 c6 00 	sts	0x00C6, r24
    1e6c:	08 95       	ret

00001e6e <uart_get_byte>:
    1e6e:	80 32       	cpi	r24, 0x20	; 32
    1e70:	91 05       	cpc	r25, r1
    1e72:	64 f4       	brge	.+24     	; 0x1e8c <uart_get_byte+0x1e>
    1e74:	67 2b       	or	r22, r23
    1e76:	29 f0       	breq	.+10     	; 0x1e82 <uart_get_byte+0x14>
    1e78:	fc 01       	movw	r30, r24
    1e7a:	e7 59       	subi	r30, 0x97	; 151
    1e7c:	fb 4e       	sbci	r31, 0xEB	; 235
    1e7e:	80 81       	ld	r24, Z
    1e80:	08 95       	ret
    1e82:	fc 01       	movw	r30, r24
    1e84:	e7 57       	subi	r30, 0x77	; 119
    1e86:	fb 4e       	sbci	r31, 0xEB	; 235
    1e88:	80 81       	ld	r24, Z
    1e8a:	08 95       	ret
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
    1e8e:	08 95       	ret

00001e90 <uart_bytes_received>:
    1e90:	01 97       	sbiw	r24, 0x01	; 1
    1e92:	19 f4       	brne	.+6      	; 0x1e9a <uart_bytes_received+0xa>
    1e94:	80 91 67 14 	lds	r24, 0x1467
    1e98:	08 95       	ret
    1e9a:	80 91 68 14 	lds	r24, 0x1468
    1e9e:	08 95       	ret

00001ea0 <uart_reset_receive>:
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	19 f4       	brne	.+6      	; 0x1eaa <uart_reset_receive+0xa>
    1ea4:	10 92 67 14 	sts	0x1467, r1
    1ea8:	08 95       	ret
    1eaa:	10 92 68 14 	sts	0x1468, r1
    1eae:	08 95       	ret

00001eb0 <__vector_25>:
/**
 * UART receive byte ISR
 */
ISR(USART0_RX_vect)
{
    1eb0:	1f 92       	push	r1
    1eb2:	0f 92       	push	r0
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	0f 92       	push	r0
    1eb8:	11 24       	eor	r1, r1
    1eba:	0b b6       	in	r0, 0x3b	; 59
    1ebc:	0f 92       	push	r0
    1ebe:	8f 93       	push	r24
    1ec0:	9f 93       	push	r25
    1ec2:	ef 93       	push	r30
    1ec4:	ff 93       	push	r31
	while(!(UCSR0A & (1<<RXC0)));
    1ec6:	e0 ec       	ldi	r30, 0xC0	; 192
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	88 23       	and	r24, r24
    1ece:	ec f7       	brge	.-6      	; 0x1eca <__vector_25+0x1a>
    uart_buffer[uart_buffer_index] = UDR0;
    1ed0:	e0 91 68 14 	lds	r30, 0x1468
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 91 c6 00 	lds	r24, 0x00C6
    1eda:	e7 57       	subi	r30, 0x77	; 119
    1edc:	fb 4e       	sbci	r31, 0xEB	; 235
    1ede:	80 83       	st	Z, r24
    uart_buffer_index = (uart_buffer_index + 1) % UART_BUFFER_SIZE;
    1ee0:	80 91 68 14 	lds	r24, 0x1468
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	01 96       	adiw	r24, 0x01	; 1
    1ee8:	8f 71       	andi	r24, 0x1F	; 31
    1eea:	90 78       	andi	r25, 0x80	; 128
    1eec:	99 23       	and	r25, r25
    1eee:	24 f4       	brge	.+8      	; 0x1ef8 <__vector_25+0x48>
    1ef0:	01 97       	sbiw	r24, 0x01	; 1
    1ef2:	80 6e       	ori	r24, 0xE0	; 224
    1ef4:	9f 6f       	ori	r25, 0xFF	; 255
    1ef6:	01 96       	adiw	r24, 0x01	; 1
    1ef8:	80 93 68 14 	sts	0x1468, r24
}
    1efc:	ff 91       	pop	r31
    1efe:	ef 91       	pop	r30
    1f00:	9f 91       	pop	r25
    1f02:	8f 91       	pop	r24
    1f04:	0f 90       	pop	r0
    1f06:	0b be       	out	0x3b, r0	; 59
    1f08:	0f 90       	pop	r0
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	0f 90       	pop	r0
    1f0e:	1f 90       	pop	r1
    1f10:	18 95       	reti

00001f12 <__vector_36>:

/**
 * UART receive byte ISR
 */
ISR(USART1_RX_vect)
{
    1f12:	1f 92       	push	r1
    1f14:	0f 92       	push	r0
    1f16:	0f b6       	in	r0, 0x3f	; 63
    1f18:	0f 92       	push	r0
    1f1a:	11 24       	eor	r1, r1
    1f1c:	0b b6       	in	r0, 0x3b	; 59
    1f1e:	0f 92       	push	r0
    1f20:	8f 93       	push	r24
    1f22:	9f 93       	push	r25
    1f24:	ef 93       	push	r30
    1f26:	ff 93       	push	r31
	while(!(UCSR1A & (1<<RXC1)));
    1f28:	e8 ec       	ldi	r30, 0xC8	; 200
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	88 23       	and	r24, r24
    1f30:	ec f7       	brge	.-6      	; 0x1f2c <__vector_36+0x1a>
    uart_buffer_1[uart_buffer_1_index] = UDR1;
    1f32:	e0 91 67 14 	lds	r30, 0x1467
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 91 ce 00 	lds	r24, 0x00CE
    1f3c:	e7 59       	subi	r30, 0x97	; 151
    1f3e:	fb 4e       	sbci	r31, 0xEB	; 235
    1f40:	80 83       	st	Z, r24
    uart_buffer_1_index = (uart_buffer_1_index + 1) % UART_BUFFER_SIZE;
    1f42:	80 91 67 14 	lds	r24, 0x1467
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	01 96       	adiw	r24, 0x01	; 1
    1f4a:	8f 71       	andi	r24, 0x1F	; 31
    1f4c:	90 78       	andi	r25, 0x80	; 128
    1f4e:	99 23       	and	r25, r25
    1f50:	24 f4       	brge	.+8      	; 0x1f5a <__vector_36+0x48>
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	80 6e       	ori	r24, 0xE0	; 224
    1f56:	9f 6f       	ori	r25, 0xFF	; 255
    1f58:	01 96       	adiw	r24, 0x01	; 1
    1f5a:	80 93 67 14 	sts	0x1467, r24
}
    1f5e:	ff 91       	pop	r31
    1f60:	ef 91       	pop	r30
    1f62:	9f 91       	pop	r25
    1f64:	8f 91       	pop	r24
    1f66:	0f 90       	pop	r0
    1f68:	0b be       	out	0x3b, r0	; 59
    1f6a:	0f 90       	pop	r0
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	0f 90       	pop	r0
    1f70:	1f 90       	pop	r1
    1f72:	18 95       	reti

00001f74 <__fixsfsi>:
    1f74:	04 d0       	rcall	.+8      	; 0x1f7e <__fixunssfsi>
    1f76:	68 94       	set
    1f78:	b1 11       	cpse	r27, r1
    1f7a:	8d c0       	rjmp	.+282    	; 0x2096 <__fp_szero>
    1f7c:	08 95       	ret

00001f7e <__fixunssfsi>:
    1f7e:	70 d0       	rcall	.+224    	; 0x2060 <__fp_splitA>
    1f80:	88 f0       	brcs	.+34     	; 0x1fa4 <__fixunssfsi+0x26>
    1f82:	9f 57       	subi	r25, 0x7F	; 127
    1f84:	90 f0       	brcs	.+36     	; 0x1faa <__fixunssfsi+0x2c>
    1f86:	b9 2f       	mov	r27, r25
    1f88:	99 27       	eor	r25, r25
    1f8a:	b7 51       	subi	r27, 0x17	; 23
    1f8c:	a0 f0       	brcs	.+40     	; 0x1fb6 <__fixunssfsi+0x38>
    1f8e:	d1 f0       	breq	.+52     	; 0x1fc4 <__fixunssfsi+0x46>
    1f90:	66 0f       	add	r22, r22
    1f92:	77 1f       	adc	r23, r23
    1f94:	88 1f       	adc	r24, r24
    1f96:	99 1f       	adc	r25, r25
    1f98:	1a f0       	brmi	.+6      	; 0x1fa0 <__fixunssfsi+0x22>
    1f9a:	ba 95       	dec	r27
    1f9c:	c9 f7       	brne	.-14     	; 0x1f90 <__fixunssfsi+0x12>
    1f9e:	12 c0       	rjmp	.+36     	; 0x1fc4 <__fixunssfsi+0x46>
    1fa0:	b1 30       	cpi	r27, 0x01	; 1
    1fa2:	81 f0       	breq	.+32     	; 0x1fc4 <__fixunssfsi+0x46>
    1fa4:	77 d0       	rcall	.+238    	; 0x2094 <__fp_zero>
    1fa6:	b1 e0       	ldi	r27, 0x01	; 1
    1fa8:	08 95       	ret
    1faa:	74 c0       	rjmp	.+232    	; 0x2094 <__fp_zero>
    1fac:	67 2f       	mov	r22, r23
    1fae:	78 2f       	mov	r23, r24
    1fb0:	88 27       	eor	r24, r24
    1fb2:	b8 5f       	subi	r27, 0xF8	; 248
    1fb4:	39 f0       	breq	.+14     	; 0x1fc4 <__fixunssfsi+0x46>
    1fb6:	b9 3f       	cpi	r27, 0xF9	; 249
    1fb8:	cc f3       	brlt	.-14     	; 0x1fac <__fixunssfsi+0x2e>
    1fba:	86 95       	lsr	r24
    1fbc:	77 95       	ror	r23
    1fbe:	67 95       	ror	r22
    1fc0:	b3 95       	inc	r27
    1fc2:	d9 f7       	brne	.-10     	; 0x1fba <__fixunssfsi+0x3c>
    1fc4:	3e f4       	brtc	.+14     	; 0x1fd4 <__fixunssfsi+0x56>
    1fc6:	90 95       	com	r25
    1fc8:	80 95       	com	r24
    1fca:	70 95       	com	r23
    1fcc:	61 95       	neg	r22
    1fce:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd0:	8f 4f       	sbci	r24, 0xFF	; 255
    1fd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd4:	08 95       	ret

00001fd6 <__floatunsisf>:
    1fd6:	e8 94       	clt
    1fd8:	09 c0       	rjmp	.+18     	; 0x1fec <__floatsisf+0x12>

00001fda <__floatsisf>:
    1fda:	97 fb       	bst	r25, 7
    1fdc:	3e f4       	brtc	.+14     	; 0x1fec <__floatsisf+0x12>
    1fde:	90 95       	com	r25
    1fe0:	80 95       	com	r24
    1fe2:	70 95       	com	r23
    1fe4:	61 95       	neg	r22
    1fe6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe8:	8f 4f       	sbci	r24, 0xFF	; 255
    1fea:	9f 4f       	sbci	r25, 0xFF	; 255
    1fec:	99 23       	and	r25, r25
    1fee:	a9 f0       	breq	.+42     	; 0x201a <__floatsisf+0x40>
    1ff0:	f9 2f       	mov	r31, r25
    1ff2:	96 e9       	ldi	r25, 0x96	; 150
    1ff4:	bb 27       	eor	r27, r27
    1ff6:	93 95       	inc	r25
    1ff8:	f6 95       	lsr	r31
    1ffa:	87 95       	ror	r24
    1ffc:	77 95       	ror	r23
    1ffe:	67 95       	ror	r22
    2000:	b7 95       	ror	r27
    2002:	f1 11       	cpse	r31, r1
    2004:	f8 cf       	rjmp	.-16     	; 0x1ff6 <__floatsisf+0x1c>
    2006:	fa f4       	brpl	.+62     	; 0x2046 <__floatsisf+0x6c>
    2008:	bb 0f       	add	r27, r27
    200a:	11 f4       	brne	.+4      	; 0x2010 <__floatsisf+0x36>
    200c:	60 ff       	sbrs	r22, 0
    200e:	1b c0       	rjmp	.+54     	; 0x2046 <__floatsisf+0x6c>
    2010:	6f 5f       	subi	r22, 0xFF	; 255
    2012:	7f 4f       	sbci	r23, 0xFF	; 255
    2014:	8f 4f       	sbci	r24, 0xFF	; 255
    2016:	9f 4f       	sbci	r25, 0xFF	; 255
    2018:	16 c0       	rjmp	.+44     	; 0x2046 <__floatsisf+0x6c>
    201a:	88 23       	and	r24, r24
    201c:	11 f0       	breq	.+4      	; 0x2022 <__floatsisf+0x48>
    201e:	96 e9       	ldi	r25, 0x96	; 150
    2020:	11 c0       	rjmp	.+34     	; 0x2044 <__floatsisf+0x6a>
    2022:	77 23       	and	r23, r23
    2024:	21 f0       	breq	.+8      	; 0x202e <__floatsisf+0x54>
    2026:	9e e8       	ldi	r25, 0x8E	; 142
    2028:	87 2f       	mov	r24, r23
    202a:	76 2f       	mov	r23, r22
    202c:	05 c0       	rjmp	.+10     	; 0x2038 <__floatsisf+0x5e>
    202e:	66 23       	and	r22, r22
    2030:	71 f0       	breq	.+28     	; 0x204e <__floatsisf+0x74>
    2032:	96 e8       	ldi	r25, 0x86	; 134
    2034:	86 2f       	mov	r24, r22
    2036:	70 e0       	ldi	r23, 0x00	; 0
    2038:	60 e0       	ldi	r22, 0x00	; 0
    203a:	2a f0       	brmi	.+10     	; 0x2046 <__floatsisf+0x6c>
    203c:	9a 95       	dec	r25
    203e:	66 0f       	add	r22, r22
    2040:	77 1f       	adc	r23, r23
    2042:	88 1f       	adc	r24, r24
    2044:	da f7       	brpl	.-10     	; 0x203c <__floatsisf+0x62>
    2046:	88 0f       	add	r24, r24
    2048:	96 95       	lsr	r25
    204a:	87 95       	ror	r24
    204c:	97 f9       	bld	r25, 7
    204e:	08 95       	ret

00002050 <__fp_split3>:
    2050:	57 fd       	sbrc	r21, 7
    2052:	90 58       	subi	r25, 0x80	; 128
    2054:	44 0f       	add	r20, r20
    2056:	55 1f       	adc	r21, r21
    2058:	59 f0       	breq	.+22     	; 0x2070 <__fp_splitA+0x10>
    205a:	5f 3f       	cpi	r21, 0xFF	; 255
    205c:	71 f0       	breq	.+28     	; 0x207a <__fp_splitA+0x1a>
    205e:	47 95       	ror	r20

00002060 <__fp_splitA>:
    2060:	88 0f       	add	r24, r24
    2062:	97 fb       	bst	r25, 7
    2064:	99 1f       	adc	r25, r25
    2066:	61 f0       	breq	.+24     	; 0x2080 <__fp_splitA+0x20>
    2068:	9f 3f       	cpi	r25, 0xFF	; 255
    206a:	79 f0       	breq	.+30     	; 0x208a <__fp_splitA+0x2a>
    206c:	87 95       	ror	r24
    206e:	08 95       	ret
    2070:	12 16       	cp	r1, r18
    2072:	13 06       	cpc	r1, r19
    2074:	14 06       	cpc	r1, r20
    2076:	55 1f       	adc	r21, r21
    2078:	f2 cf       	rjmp	.-28     	; 0x205e <__fp_split3+0xe>
    207a:	46 95       	lsr	r20
    207c:	f1 df       	rcall	.-30     	; 0x2060 <__fp_splitA>
    207e:	08 c0       	rjmp	.+16     	; 0x2090 <__fp_splitA+0x30>
    2080:	16 16       	cp	r1, r22
    2082:	17 06       	cpc	r1, r23
    2084:	18 06       	cpc	r1, r24
    2086:	99 1f       	adc	r25, r25
    2088:	f1 cf       	rjmp	.-30     	; 0x206c <__fp_splitA+0xc>
    208a:	86 95       	lsr	r24
    208c:	71 05       	cpc	r23, r1
    208e:	61 05       	cpc	r22, r1
    2090:	08 94       	sec
    2092:	08 95       	ret

00002094 <__fp_zero>:
    2094:	e8 94       	clt

00002096 <__fp_szero>:
    2096:	bb 27       	eor	r27, r27
    2098:	66 27       	eor	r22, r22
    209a:	77 27       	eor	r23, r23
    209c:	cb 01       	movw	r24, r22
    209e:	97 f9       	bld	r25, 7
    20a0:	08 95       	ret

000020a2 <__mulsf3>:
    20a2:	0b d0       	rcall	.+22     	; 0x20ba <__mulsf3x>
    20a4:	78 c0       	rjmp	.+240    	; 0x2196 <__fp_round>
    20a6:	69 d0       	rcall	.+210    	; 0x217a <__fp_pscA>
    20a8:	28 f0       	brcs	.+10     	; 0x20b4 <__mulsf3+0x12>
    20aa:	6e d0       	rcall	.+220    	; 0x2188 <__fp_pscB>
    20ac:	18 f0       	brcs	.+6      	; 0x20b4 <__mulsf3+0x12>
    20ae:	95 23       	and	r25, r21
    20b0:	09 f0       	breq	.+2      	; 0x20b4 <__mulsf3+0x12>
    20b2:	5a c0       	rjmp	.+180    	; 0x2168 <__fp_inf>
    20b4:	5f c0       	rjmp	.+190    	; 0x2174 <__fp_nan>
    20b6:	11 24       	eor	r1, r1
    20b8:	ee cf       	rjmp	.-36     	; 0x2096 <__fp_szero>

000020ba <__mulsf3x>:
    20ba:	ca df       	rcall	.-108    	; 0x2050 <__fp_split3>
    20bc:	a0 f3       	brcs	.-24     	; 0x20a6 <__mulsf3+0x4>

000020be <__mulsf3_pse>:
    20be:	95 9f       	mul	r25, r21
    20c0:	d1 f3       	breq	.-12     	; 0x20b6 <__mulsf3+0x14>
    20c2:	95 0f       	add	r25, r21
    20c4:	50 e0       	ldi	r21, 0x00	; 0
    20c6:	55 1f       	adc	r21, r21
    20c8:	62 9f       	mul	r22, r18
    20ca:	f0 01       	movw	r30, r0
    20cc:	72 9f       	mul	r23, r18
    20ce:	bb 27       	eor	r27, r27
    20d0:	f0 0d       	add	r31, r0
    20d2:	b1 1d       	adc	r27, r1
    20d4:	63 9f       	mul	r22, r19
    20d6:	aa 27       	eor	r26, r26
    20d8:	f0 0d       	add	r31, r0
    20da:	b1 1d       	adc	r27, r1
    20dc:	aa 1f       	adc	r26, r26
    20de:	64 9f       	mul	r22, r20
    20e0:	66 27       	eor	r22, r22
    20e2:	b0 0d       	add	r27, r0
    20e4:	a1 1d       	adc	r26, r1
    20e6:	66 1f       	adc	r22, r22
    20e8:	82 9f       	mul	r24, r18
    20ea:	22 27       	eor	r18, r18
    20ec:	b0 0d       	add	r27, r0
    20ee:	a1 1d       	adc	r26, r1
    20f0:	62 1f       	adc	r22, r18
    20f2:	73 9f       	mul	r23, r19
    20f4:	b0 0d       	add	r27, r0
    20f6:	a1 1d       	adc	r26, r1
    20f8:	62 1f       	adc	r22, r18
    20fa:	83 9f       	mul	r24, r19
    20fc:	a0 0d       	add	r26, r0
    20fe:	61 1d       	adc	r22, r1
    2100:	22 1f       	adc	r18, r18
    2102:	74 9f       	mul	r23, r20
    2104:	33 27       	eor	r19, r19
    2106:	a0 0d       	add	r26, r0
    2108:	61 1d       	adc	r22, r1
    210a:	23 1f       	adc	r18, r19
    210c:	84 9f       	mul	r24, r20
    210e:	60 0d       	add	r22, r0
    2110:	21 1d       	adc	r18, r1
    2112:	82 2f       	mov	r24, r18
    2114:	76 2f       	mov	r23, r22
    2116:	6a 2f       	mov	r22, r26
    2118:	11 24       	eor	r1, r1
    211a:	9f 57       	subi	r25, 0x7F	; 127
    211c:	50 40       	sbci	r21, 0x00	; 0
    211e:	8a f0       	brmi	.+34     	; 0x2142 <__mulsf3_pse+0x84>
    2120:	e1 f0       	breq	.+56     	; 0x215a <__mulsf3_pse+0x9c>
    2122:	88 23       	and	r24, r24
    2124:	4a f0       	brmi	.+18     	; 0x2138 <__mulsf3_pse+0x7a>
    2126:	ee 0f       	add	r30, r30
    2128:	ff 1f       	adc	r31, r31
    212a:	bb 1f       	adc	r27, r27
    212c:	66 1f       	adc	r22, r22
    212e:	77 1f       	adc	r23, r23
    2130:	88 1f       	adc	r24, r24
    2132:	91 50       	subi	r25, 0x01	; 1
    2134:	50 40       	sbci	r21, 0x00	; 0
    2136:	a9 f7       	brne	.-22     	; 0x2122 <__mulsf3_pse+0x64>
    2138:	9e 3f       	cpi	r25, 0xFE	; 254
    213a:	51 05       	cpc	r21, r1
    213c:	70 f0       	brcs	.+28     	; 0x215a <__mulsf3_pse+0x9c>
    213e:	14 c0       	rjmp	.+40     	; 0x2168 <__fp_inf>
    2140:	aa cf       	rjmp	.-172    	; 0x2096 <__fp_szero>
    2142:	5f 3f       	cpi	r21, 0xFF	; 255
    2144:	ec f3       	brlt	.-6      	; 0x2140 <__mulsf3_pse+0x82>
    2146:	98 3e       	cpi	r25, 0xE8	; 232
    2148:	dc f3       	brlt	.-10     	; 0x2140 <__mulsf3_pse+0x82>
    214a:	86 95       	lsr	r24
    214c:	77 95       	ror	r23
    214e:	67 95       	ror	r22
    2150:	b7 95       	ror	r27
    2152:	f7 95       	ror	r31
    2154:	e7 95       	ror	r30
    2156:	9f 5f       	subi	r25, 0xFF	; 255
    2158:	c1 f7       	brne	.-16     	; 0x214a <__mulsf3_pse+0x8c>
    215a:	fe 2b       	or	r31, r30
    215c:	88 0f       	add	r24, r24
    215e:	91 1d       	adc	r25, r1
    2160:	96 95       	lsr	r25
    2162:	87 95       	ror	r24
    2164:	97 f9       	bld	r25, 7
    2166:	08 95       	ret

00002168 <__fp_inf>:
    2168:	97 f9       	bld	r25, 7
    216a:	9f 67       	ori	r25, 0x7F	; 127
    216c:	80 e8       	ldi	r24, 0x80	; 128
    216e:	70 e0       	ldi	r23, 0x00	; 0
    2170:	60 e0       	ldi	r22, 0x00	; 0
    2172:	08 95       	ret

00002174 <__fp_nan>:
    2174:	9f ef       	ldi	r25, 0xFF	; 255
    2176:	80 ec       	ldi	r24, 0xC0	; 192
    2178:	08 95       	ret

0000217a <__fp_pscA>:
    217a:	00 24       	eor	r0, r0
    217c:	0a 94       	dec	r0
    217e:	16 16       	cp	r1, r22
    2180:	17 06       	cpc	r1, r23
    2182:	18 06       	cpc	r1, r24
    2184:	09 06       	cpc	r0, r25
    2186:	08 95       	ret

00002188 <__fp_pscB>:
    2188:	00 24       	eor	r0, r0
    218a:	0a 94       	dec	r0
    218c:	12 16       	cp	r1, r18
    218e:	13 06       	cpc	r1, r19
    2190:	14 06       	cpc	r1, r20
    2192:	05 06       	cpc	r0, r21
    2194:	08 95       	ret

00002196 <__fp_round>:
    2196:	09 2e       	mov	r0, r25
    2198:	03 94       	inc	r0
    219a:	00 0c       	add	r0, r0
    219c:	11 f4       	brne	.+4      	; 0x21a2 <__fp_round+0xc>
    219e:	88 23       	and	r24, r24
    21a0:	52 f0       	brmi	.+20     	; 0x21b6 <__fp_round+0x20>
    21a2:	bb 0f       	add	r27, r27
    21a4:	40 f4       	brcc	.+16     	; 0x21b6 <__fp_round+0x20>
    21a6:	bf 2b       	or	r27, r31
    21a8:	11 f4       	brne	.+4      	; 0x21ae <__fp_round+0x18>
    21aa:	60 ff       	sbrs	r22, 0
    21ac:	04 c0       	rjmp	.+8      	; 0x21b6 <__fp_round+0x20>
    21ae:	6f 5f       	subi	r22, 0xFF	; 255
    21b0:	7f 4f       	sbci	r23, 0xFF	; 255
    21b2:	8f 4f       	sbci	r24, 0xFF	; 255
    21b4:	9f 4f       	sbci	r25, 0xFF	; 255
    21b6:	08 95       	ret

000021b8 <__udivmodhi4>:
    21b8:	aa 1b       	sub	r26, r26
    21ba:	bb 1b       	sub	r27, r27
    21bc:	51 e1       	ldi	r21, 0x11	; 17
    21be:	07 c0       	rjmp	.+14     	; 0x21ce <__udivmodhi4_ep>

000021c0 <__udivmodhi4_loop>:
    21c0:	aa 1f       	adc	r26, r26
    21c2:	bb 1f       	adc	r27, r27
    21c4:	a6 17       	cp	r26, r22
    21c6:	b7 07       	cpc	r27, r23
    21c8:	10 f0       	brcs	.+4      	; 0x21ce <__udivmodhi4_ep>
    21ca:	a6 1b       	sub	r26, r22
    21cc:	b7 0b       	sbc	r27, r23

000021ce <__udivmodhi4_ep>:
    21ce:	88 1f       	adc	r24, r24
    21d0:	99 1f       	adc	r25, r25
    21d2:	5a 95       	dec	r21
    21d4:	a9 f7       	brne	.-22     	; 0x21c0 <__udivmodhi4_loop>
    21d6:	80 95       	com	r24
    21d8:	90 95       	com	r25
    21da:	bc 01       	movw	r22, r24
    21dc:	cd 01       	movw	r24, r26
    21de:	08 95       	ret

000021e0 <__divmodhi4>:
    21e0:	97 fb       	bst	r25, 7
    21e2:	07 2e       	mov	r0, r23
    21e4:	16 f4       	brtc	.+4      	; 0x21ea <__divmodhi4+0xa>
    21e6:	00 94       	com	r0
    21e8:	06 d0       	rcall	.+12     	; 0x21f6 <__divmodhi4_neg1>
    21ea:	77 fd       	sbrc	r23, 7
    21ec:	08 d0       	rcall	.+16     	; 0x21fe <__divmodhi4_neg2>
    21ee:	e4 df       	rcall	.-56     	; 0x21b8 <__udivmodhi4>
    21f0:	07 fc       	sbrc	r0, 7
    21f2:	05 d0       	rcall	.+10     	; 0x21fe <__divmodhi4_neg2>
    21f4:	3e f4       	brtc	.+14     	; 0x2204 <__divmodhi4_exit>

000021f6 <__divmodhi4_neg1>:
    21f6:	90 95       	com	r25
    21f8:	81 95       	neg	r24
    21fa:	9f 4f       	sbci	r25, 0xFF	; 255
    21fc:	08 95       	ret

000021fe <__divmodhi4_neg2>:
    21fe:	70 95       	com	r23
    2200:	61 95       	neg	r22
    2202:	7f 4f       	sbci	r23, 0xFF	; 255

00002204 <__divmodhi4_exit>:
    2204:	08 95       	ret

00002206 <__tablejump2__>:
    2206:	ee 0f       	add	r30, r30
    2208:	ff 1f       	adc	r31, r31
    220a:	88 1f       	adc	r24, r24
    220c:	8b bf       	out	0x3b, r24	; 59
    220e:	07 90       	elpm	r0, Z+
    2210:	f6 91       	elpm	r31, Z
    2212:	e0 2d       	mov	r30, r0
    2214:	19 94       	eijmp

00002216 <_exit>:
    2216:	f8 94       	cli

00002218 <__stop_program>:
    2218:	ff cf       	rjmp	.-2      	; 0x2218 <__stop_program>
