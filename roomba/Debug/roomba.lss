
roomba.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800200  00002532  000025c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002532  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000014d0  00800218  00800218  000025de  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000025de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000263c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004b0  00000000  00000000  00002680  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000056ec  00000000  00000000  00002b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000151e  00000000  00000000  0000821c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002ae9  00000000  00000000  0000973a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c68  00000000  00000000  0000c224  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000013f0  00000000  00000000  0000ce8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003176  00000000  00000000  0000e27c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004d0  00000000  00000000  000113f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c0       	rjmp	.+252    	; 0xfe <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 8e 0d 	jmp	0x1b1c	; 0x1b1c <__vector_1>
       8:	9b c0       	rjmp	.+310    	; 0x140 <__bad_interrupt>
       a:	00 00       	nop
       c:	99 c0       	rjmp	.+306    	; 0x140 <__bad_interrupt>
       e:	00 00       	nop
      10:	97 c0       	rjmp	.+302    	; 0x140 <__bad_interrupt>
      12:	00 00       	nop
      14:	95 c0       	rjmp	.+298    	; 0x140 <__bad_interrupt>
      16:	00 00       	nop
      18:	93 c0       	rjmp	.+294    	; 0x140 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	91 c0       	rjmp	.+290    	; 0x140 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8f c0       	rjmp	.+286    	; 0x140 <__bad_interrupt>
      22:	00 00       	nop
      24:	8d c0       	rjmp	.+282    	; 0x140 <__bad_interrupt>
      26:	00 00       	nop
      28:	8b c0       	rjmp	.+278    	; 0x140 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	89 c0       	rjmp	.+274    	; 0x140 <__bad_interrupt>
      2e:	00 00       	nop
      30:	87 c0       	rjmp	.+270    	; 0x140 <__bad_interrupt>
      32:	00 00       	nop
      34:	85 c0       	rjmp	.+266    	; 0x140 <__bad_interrupt>
      36:	00 00       	nop
      38:	83 c0       	rjmp	.+262    	; 0x140 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	81 c0       	rjmp	.+258    	; 0x140 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7f c0       	rjmp	.+254    	; 0x140 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 5c 0a 	jmp	0x14b8	; 0x14b8 <__vector_17>
      48:	7b c0       	rjmp	.+246    	; 0x140 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	79 c0       	rjmp	.+242    	; 0x140 <__bad_interrupt>
      4e:	00 00       	nop
      50:	77 c0       	rjmp	.+238    	; 0x140 <__bad_interrupt>
      52:	00 00       	nop
      54:	75 c0       	rjmp	.+234    	; 0x140 <__bad_interrupt>
      56:	00 00       	nop
      58:	73 c0       	rjmp	.+230    	; 0x140 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	71 c0       	rjmp	.+226    	; 0x140 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6f c0       	rjmp	.+222    	; 0x140 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <__vector_25>
      68:	0c 94 d3 0e 	jmp	0x1da6	; 0x1da6 <__vector_26>
      6c:	69 c0       	rjmp	.+210    	; 0x140 <__bad_interrupt>
      6e:	00 00       	nop
      70:	67 c0       	rjmp	.+206    	; 0x140 <__bad_interrupt>
      72:	00 00       	nop
      74:	65 c0       	rjmp	.+202    	; 0x140 <__bad_interrupt>
      76:	00 00       	nop
      78:	63 c0       	rjmp	.+198    	; 0x140 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	61 c0       	rjmp	.+194    	; 0x140 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 21 0b 	jmp	0x1642	; 0x1642 <__vector_32>
      84:	5d c0       	rjmp	.+186    	; 0x140 <__bad_interrupt>
      86:	00 00       	nop
      88:	5b c0       	rjmp	.+182    	; 0x140 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	59 c0       	rjmp	.+178    	; 0x140 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 49 0f 	jmp	0x1e92	; 0x1e92 <__vector_36>
      94:	0c 94 82 0f 	jmp	0x1f04	; 0x1f04 <__vector_37>
      98:	53 c0       	rjmp	.+166    	; 0x140 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	51 c0       	rjmp	.+162    	; 0x140 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4f c0       	rjmp	.+158    	; 0x140 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4d c0       	rjmp	.+154    	; 0x140 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4b c0       	rjmp	.+150    	; 0x140 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	49 c0       	rjmp	.+146    	; 0x140 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	47 c0       	rjmp	.+142    	; 0x140 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	45 c0       	rjmp	.+138    	; 0x140 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	43 c0       	rjmp	.+134    	; 0x140 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	41 c0       	rjmp	.+130    	; 0x140 <__bad_interrupt>
      be:	00 00       	nop
      c0:	3f c0       	rjmp	.+126    	; 0x140 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3d c0       	rjmp	.+122    	; 0x140 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3b c0       	rjmp	.+118    	; 0x140 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	39 c0       	rjmp	.+114    	; 0x140 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	37 c0       	rjmp	.+110    	; 0x140 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	35 c0       	rjmp	.+106    	; 0x140 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	33 c0       	rjmp	.+102    	; 0x140 <__bad_interrupt>
      da:	00 00       	nop
      dc:	31 c0       	rjmp	.+98     	; 0x140 <__bad_interrupt>
      de:	00 00       	nop
      e0:	2f c0       	rjmp	.+94     	; 0x140 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	26 06       	cpc	r2, r22
      e6:	0c 06       	cpc	r0, r28
      e8:	26 06       	cpc	r2, r22
      ea:	35 06       	cpc	r3, r21
      ec:	da 06       	cpc	r13, r26
      ee:	44 06       	cpc	r4, r20
      f0:	fd 05       	cpc	r31, r13
      f2:	2d 07       	cpc	r18, r29
      f4:	62 07       	cpc	r22, r18
      f6:	04 08       	sbc	r0, r4
      f8:	06 08       	sbc	r0, r6
      fa:	3c 08       	sbc	r3, r12
      fc:	b3 08       	sbc	r11, r3

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d1 e2       	ldi	r29, 0x21	; 33
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0c bf       	out	0x3c, r16	; 60

0000010e <__do_copy_data>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a0 e0       	ldi	r26, 0x00	; 0
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	e2 e3       	ldi	r30, 0x32	; 50
     116:	f5 e2       	ldi	r31, 0x25	; 37
     118:	00 e0       	ldi	r16, 0x00	; 0
     11a:	0b bf       	out	0x3b, r16	; 59
     11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x14>
     11e:	07 90       	elpm	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	a8 31       	cpi	r26, 0x18	; 24
     124:	b1 07       	cpc	r27, r17
     126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0x10>

00000128 <__do_clear_bss>:
     128:	26 e1       	ldi	r18, 0x16	; 22
     12a:	a8 e1       	ldi	r26, 0x18	; 24
     12c:	b2 e0       	ldi	r27, 0x02	; 2
     12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
     130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
     132:	a8 3e       	cpi	r26, 0xE8	; 232
     134:	b2 07       	cpc	r27, r18
     136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>
     138:	0e 94 38 0b 	call	0x1670	; 0x1670 <main>
     13c:	0c 94 97 12 	jmp	0x252e	; 0x252e <_exit>

00000140 <__bad_interrupt>:
     140:	5f cf       	rjmp	.-322    	; 0x0 <__vectors>

00000142 <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
     142:	0f 92       	push	r0
     144:	1f 92       	push	r1
     146:	2f 92       	push	r2
     148:	3f 92       	push	r3
     14a:	4f 92       	push	r4
     14c:	5f 92       	push	r5
     14e:	6f 92       	push	r6
     150:	7f 92       	push	r7
     152:	8f 92       	push	r8
     154:	9f 92       	push	r9
     156:	af 92       	push	r10
     158:	bf 92       	push	r11
     15a:	cf 92       	push	r12
     15c:	df 92       	push	r13
     15e:	ef 92       	push	r14
     160:	ff 92       	push	r15
     162:	0f 93       	push	r16
     164:	1f 93       	push	r17
     166:	2f 93       	push	r18
     168:	3f 93       	push	r19
     16a:	4f 93       	push	r20
     16c:	5f 93       	push	r21
     16e:	6f 93       	push	r22
     170:	7f 93       	push	r23
     172:	8f 93       	push	r24
     174:	9f 93       	push	r25
     176:	af 93       	push	r26
     178:	bf 93       	push	r27
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	ef 93       	push	r30
     180:	ff 93       	push	r31
     182:	0f b7       	in	r16, 0x3f	; 63
     184:	0f 93       	push	r16
     186:	fc b7       	in	r31, 0x3c	; 60
     188:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
     18a:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     18c:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
     18e:	e0 93 e5 16 	sts	0x16E5, r30
        sts  KernelSp+1, r31
     192:	f0 93 e6 16 	sts	0x16E6, r31
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
     196:	e0 91 c3 16 	lds	r30, 0x16C3
        lds  r31, CurrentSp+1
     19a:	f0 91 c4 16 	lds	r31, 0x16C4
        out  SPL, r30
     19e:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     1a0:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
     1a2:	ff 91       	pop	r31
     1a4:	fc bf       	out	0x3c, r31	; 60
     1a6:	0f 91       	pop	r16
     1a8:	0f bf       	out	0x3f, r16	; 63
     1aa:	ff 91       	pop	r31
     1ac:	ef 91       	pop	r30
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	bf 91       	pop	r27
     1b4:	af 91       	pop	r26
     1b6:	9f 91       	pop	r25
     1b8:	8f 91       	pop	r24
     1ba:	7f 91       	pop	r23
     1bc:	6f 91       	pop	r22
     1be:	5f 91       	pop	r21
     1c0:	4f 91       	pop	r20
     1c2:	3f 91       	pop	r19
     1c4:	2f 91       	pop	r18
     1c6:	1f 91       	pop	r17
     1c8:	0f 91       	pop	r16
     1ca:	ff 90       	pop	r15
     1cc:	ef 90       	pop	r14
     1ce:	df 90       	pop	r13
     1d0:	cf 90       	pop	r12
     1d2:	bf 90       	pop	r11
     1d4:	af 90       	pop	r10
     1d6:	9f 90       	pop	r9
     1d8:	8f 90       	pop	r8
     1da:	7f 90       	pop	r7
     1dc:	6f 90       	pop	r6
     1de:	5f 90       	pop	r5
     1e0:	4f 90       	pop	r4
     1e2:	3f 90       	pop	r3
     1e4:	2f 90       	pop	r2
     1e6:	1f 90       	pop	r1
     1e8:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
     1ea:	18 95       	reti

000001ec <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
     1ec:	0f 92       	push	r0
     1ee:	1f 92       	push	r1
     1f0:	2f 92       	push	r2
     1f2:	3f 92       	push	r3
     1f4:	4f 92       	push	r4
     1f6:	5f 92       	push	r5
     1f8:	6f 92       	push	r6
     1fa:	7f 92       	push	r7
     1fc:	8f 92       	push	r8
     1fe:	9f 92       	push	r9
     200:	af 92       	push	r10
     202:	bf 92       	push	r11
     204:	cf 92       	push	r12
     206:	df 92       	push	r13
     208:	ef 92       	push	r14
     20a:	ff 92       	push	r15
     20c:	0f 93       	push	r16
     20e:	1f 93       	push	r17
     210:	2f 93       	push	r18
     212:	3f 93       	push	r19
     214:	4f 93       	push	r20
     216:	5f 93       	push	r21
     218:	6f 93       	push	r22
     21a:	7f 93       	push	r23
     21c:	8f 93       	push	r24
     21e:	9f 93       	push	r25
     220:	af 93       	push	r26
     222:	bf 93       	push	r27
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	ef 93       	push	r30
     22a:	ff 93       	push	r31
     22c:	0f b7       	in	r16, 0x3f	; 63
     22e:	0f 93       	push	r16
     230:	fc b7       	in	r31, 0x3c	; 60
     232:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
     234:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     236:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
     238:	e0 93 c3 16 	sts	0x16C3, r30
        sts  CurrentSp+1, r31
     23c:	f0 93 c4 16 	sts	0x16C4, r31
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
     240:	e0 91 e5 16 	lds	r30, 0x16E5
        lds  r31, KernelSp+1
     244:	f0 91 e6 16 	lds	r31, 0x16E6
        out  SPL, r30
     248:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     24a:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
     24c:	ff 91       	pop	r31
     24e:	fc bf       	out	0x3c, r31	; 60
     250:	0f 91       	pop	r16
     252:	0f bf       	out	0x3f, r16	; 63
     254:	ff 91       	pop	r31
     256:	ef 91       	pop	r30
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	bf 91       	pop	r27
     25e:	af 91       	pop	r26
     260:	9f 91       	pop	r25
     262:	8f 91       	pop	r24
     264:	7f 91       	pop	r23
     266:	6f 91       	pop	r22
     268:	5f 91       	pop	r21
     26a:	4f 91       	pop	r20
     26c:	3f 91       	pop	r19
     26e:	2f 91       	pop	r18
     270:	1f 91       	pop	r17
     272:	0f 91       	pop	r16
     274:	ff 90       	pop	r15
     276:	ef 90       	pop	r14
     278:	df 90       	pop	r13
     27a:	cf 90       	pop	r12
     27c:	bf 90       	pop	r11
     27e:	af 90       	pop	r10
     280:	9f 90       	pop	r9
     282:	8f 90       	pop	r8
     284:	7f 90       	pop	r7
     286:	6f 90       	pop	r6
     288:	5f 90       	pop	r5
     28a:	4f 90       	pop	r4
     28c:	3f 90       	pop	r3
     28e:	2f 90       	pop	r2
     290:	1f 90       	pop	r1
     292:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
     294:	08 95       	ret

00000296 <adc_init>:

// initialize adc
void adc_init()
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
     296:	80 e4       	ldi	r24, 0x40	; 64
     298:	80 93 7c 00 	sts	0x007C, r24
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     29c:	87 e8       	ldi	r24, 0x87	; 135
     29e:	80 93 7a 00 	sts	0x007A, r24
     2a2:	08 95       	ret

000002a4 <adc_read>:
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     2a4:	ec e7       	ldi	r30, 0x7C	; 124
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	90 81       	ld	r25, Z
uint16_t adc_read(uint8_t ch)
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
     2aa:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     2ac:	98 7f       	andi	r25, 0xF8	; 248
     2ae:	89 2b       	or	r24, r25
     2b0:	80 83       	st	Z, r24
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
     2b2:	ea e7       	ldi	r30, 0x7A	; 122
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	80 81       	ld	r24, Z
     2b8:	80 64       	ori	r24, 0x40	; 64
     2ba:	80 83       	st	Z, r24
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
     2bc:	80 81       	ld	r24, Z
     2be:	86 fd       	sbrc	r24, 6
     2c0:	fd cf       	rjmp	.-6      	; 0x2bc <adc_read+0x18>
	
	return (ADC);
     2c2:	80 91 78 00 	lds	r24, 0x0078
     2c6:	90 91 79 00 	lds	r25, 0x0079
}
     2ca:	08 95       	ret

000002cc <radio_rxhandler>:
	return 0;
}

void radio_rxhandler(uint8_t pipenumber)
{
	rxflag = 1;
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	80 93 18 02 	sts	0x0218, r24
	PORTL ^= _BV(PL7);
     2d2:	eb e0       	ldi	r30, 0x0B	; 11
     2d4:	f1 e0       	ldi	r31, 0x01	; 1
     2d6:	80 81       	ld	r24, Z
     2d8:	80 58       	subi	r24, 0x80	; 128
     2da:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2dc:	83 ed       	ldi	r24, 0xD3	; 211
     2de:	90 e3       	ldi	r25, 0x30	; 48
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <radio_rxhandler+0x14>
     2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <radio_rxhandler+0x1a>
     2e6:	00 00       	nop
	_delay_ms(50);
	PORTL ^= _BV(PL7);
     2e8:	80 81       	ld	r24, Z
     2ea:	80 58       	subi	r24, 0x80	; 128
     2ec:	80 83       	st	Z, r24
     2ee:	08 95       	ret

000002f0 <lcd_nibble>:

void lcd_blank( uint8_t len )                   // blank n digits
{
  while( len-- )
    lcd_putchar( ' ' );
}
     2f0:	e2 e0       	ldi	r30, 0x02	; 2
     2f2:	f1 e0       	ldi	r31, 0x01	; 1
     2f4:	90 81       	ld	r25, Z
     2f6:	9f 7e       	andi	r25, 0xEF	; 239
     2f8:	90 83       	st	Z, r25
     2fa:	88 23       	and	r24, r24
     2fc:	1c f4       	brge	.+6      	; 0x304 <lcd_nibble+0x14>
     2fe:	90 81       	ld	r25, Z
     300:	90 61       	ori	r25, 0x10	; 16
     302:	90 83       	st	Z, r25
     304:	e2 e0       	ldi	r30, 0x02	; 2
     306:	f1 e0       	ldi	r31, 0x01	; 1
     308:	90 81       	ld	r25, Z
     30a:	97 7f       	andi	r25, 0xF7	; 247
     30c:	90 83       	st	Z, r25
     30e:	86 ff       	sbrs	r24, 6
     310:	03 c0       	rjmp	.+6      	; 0x318 <lcd_nibble+0x28>
     312:	90 81       	ld	r25, Z
     314:	98 60       	ori	r25, 0x08	; 8
     316:	90 83       	st	Z, r25
     318:	73 98       	cbi	0x0e, 3	; 14
     31a:	85 fd       	sbrc	r24, 5
     31c:	73 9a       	sbi	0x0e, 3	; 14
     31e:	a5 98       	cbi	0x14, 5	; 20
     320:	84 fd       	sbrc	r24, 4
     322:	a5 9a       	sbi	0x14, 5	; 20
     324:	e2 e0       	ldi	r30, 0x02	; 2
     326:	f1 e0       	ldi	r31, 0x01	; 1
     328:	80 81       	ld	r24, Z
     32a:	80 64       	ori	r24, 0x40	; 64
     32c:	80 83       	st	Z, r24
     32e:	85 e0       	ldi	r24, 0x05	; 5
     330:	8a 95       	dec	r24
     332:	f1 f7       	brne	.-4      	; 0x330 <lcd_nibble+0x40>
     334:	00 00       	nop
     336:	80 81       	ld	r24, Z
     338:	8f 7b       	andi	r24, 0xBF	; 191
     33a:	80 83       	st	Z, r24
     33c:	08 95       	ret

0000033e <lcd_command>:
     33e:	cf 93       	push	r28
     340:	c8 2f       	mov	r28, r24
     342:	e2 e0       	ldi	r30, 0x02	; 2
     344:	f1 e0       	ldi	r31, 0x01	; 1
     346:	80 81       	ld	r24, Z
     348:	8f 7d       	andi	r24, 0xDF	; 223
     34a:	80 83       	st	Z, r24
     34c:	8c 2f       	mov	r24, r28
     34e:	d0 df       	rcall	.-96     	; 0x2f0 <lcd_nibble>
     350:	8c 2f       	mov	r24, r28
     352:	82 95       	swap	r24
     354:	80 7f       	andi	r24, 0xF0	; 240
     356:	cc df       	rcall	.-104    	; 0x2f0 <lcd_nibble>
     358:	87 ec       	ldi	r24, 0xC7	; 199
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	01 97       	sbiw	r24, 0x01	; 1
     35e:	f1 f7       	brne	.-4      	; 0x35c <lcd_command+0x1e>
     360:	00 c0       	rjmp	.+0      	; 0x362 <lcd_command+0x24>
     362:	00 00       	nop
     364:	c4 30       	cpi	r28, 0x04	; 4
     366:	18 f0       	brcs	.+6      	; 0x36e <lcd_command+0x30>
     368:	c0 38       	cpi	r28, 0x80	; 128
     36a:	50 f0       	brcs	.+20     	; 0x380 <lcd_command+0x42>
     36c:	07 c0       	rjmp	.+14     	; 0x37c <lcd_command+0x3e>
     36e:	8f e3       	ldi	r24, 0x3F	; 63
     370:	9f e1       	ldi	r25, 0x1F	; 31
     372:	01 97       	sbiw	r24, 0x01	; 1
     374:	f1 f7       	brne	.-4      	; 0x372 <lcd_command+0x34>
     376:	00 c0       	rjmp	.+0      	; 0x378 <lcd_command+0x3a>
     378:	00 00       	nop
     37a:	c0 e8       	ldi	r28, 0x80	; 128
     37c:	c0 93 00 02 	sts	0x0200, r28
     380:	cf 91       	pop	r28
     382:	08 95       	ret

00000384 <lcd_putchar>:
     384:	cf 93       	push	r28
     386:	c8 2f       	mov	r28, r24
     388:	e2 e0       	ldi	r30, 0x02	; 2
     38a:	f1 e0       	ldi	r31, 0x01	; 1
     38c:	80 81       	ld	r24, Z
     38e:	80 62       	ori	r24, 0x20	; 32
     390:	80 83       	st	Z, r24
     392:	8c 2f       	mov	r24, r28
     394:	ad df       	rcall	.-166    	; 0x2f0 <lcd_nibble>
     396:	8c 2f       	mov	r24, r28
     398:	82 95       	swap	r24
     39a:	80 7f       	andi	r24, 0xF0	; 240
     39c:	a9 df       	rcall	.-174    	; 0x2f0 <lcd_nibble>
     39e:	87 ec       	ldi	r24, 0xC7	; 199
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	01 97       	sbiw	r24, 0x01	; 1
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <lcd_putchar+0x1e>
     3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <lcd_putchar+0x24>
     3a8:	00 00       	nop
     3aa:	80 91 00 02 	lds	r24, 0x0200
     3ae:	8f 5f       	subi	r24, 0xFF	; 255
     3b0:	80 93 00 02 	sts	0x0200, r24
     3b4:	80 39       	cpi	r24, 0x90	; 144
     3b6:	21 f0       	breq	.+8      	; 0x3c0 <lcd_putchar+0x3c>
     3b8:	80 3d       	cpi	r24, 0xD0	; 208
     3ba:	21 f4       	brne	.+8      	; 0x3c4 <lcd_putchar+0x40>
     3bc:	80 e8       	ldi	r24, 0x80	; 128
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <lcd_putchar+0x3e>
     3c0:	80 ec       	ldi	r24, 0xC0	; 192
     3c2:	bd df       	rcall	.-134    	; 0x33e <lcd_command>
     3c4:	cf 91       	pop	r28
     3c6:	08 95       	ret

000003c8 <lcd_puts>:
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	ec 01       	movw	r28, r24
     3ce:	88 81       	ld	r24, Y
     3d0:	88 23       	and	r24, r24
     3d2:	29 f0       	breq	.+10     	; 0x3de <lcd_puts+0x16>
     3d4:	21 96       	adiw	r28, 0x01	; 1
     3d6:	d6 df       	rcall	.-84     	; 0x384 <lcd_putchar>
     3d8:	89 91       	ld	r24, Y+
     3da:	81 11       	cpse	r24, r1
     3dc:	fc cf       	rjmp	.-8      	; 0x3d6 <lcd_puts+0xe>
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	08 95       	ret

000003e4 <lcd_init>:


void lcd_init( void )
{
  LCD_DDR_D4 = 1;                               // enable output pins
     3e4:	9d 9a       	sbi	0x13, 5	; 19
  LCD_DDR_D5 = 1;
     3e6:	6b 9a       	sbi	0x0d, 3	; 13
  LCD_DDR_D6 = 1;
     3e8:	e1 e0       	ldi	r30, 0x01	; 1
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	80 81       	ld	r24, Z
     3ee:	88 60       	ori	r24, 0x08	; 8
     3f0:	80 83       	st	Z, r24
  LCD_DDR_D7 = 1;
     3f2:	80 81       	ld	r24, Z
     3f4:	80 61       	ori	r24, 0x10	; 16
     3f6:	80 83       	st	Z, r24
  LCD_DDR_RS = 1;
     3f8:	80 81       	ld	r24, Z
     3fa:	80 62       	ori	r24, 0x20	; 32
     3fc:	80 83       	st	Z, r24
  LCD_DDR_E0 = 1;
     3fe:	80 81       	ld	r24, Z
     400:	80 64       	ori	r24, 0x40	; 64
     402:	80 83       	st	Z, r24
  LCD_E0 = 0;
     404:	e2 e0       	ldi	r30, 0x02	; 2
     406:	f1 e0       	ldi	r31, 0x01	; 1
     408:	80 81       	ld	r24, Z
     40a:	8f 7b       	andi	r24, 0xBF	; 191
     40c:	80 83       	st	Z, r24
  LCD_RS = 0;                                   // send commands
     40e:	80 81       	ld	r24, Z
     410:	8f 7d       	andi	r24, 0xDF	; 223
     412:	80 83       	st	Z, r24
     414:	8f e5       	ldi	r24, 0x5F	; 95
     416:	9a ee       	ldi	r25, 0xEA	; 234
     418:	01 97       	sbiw	r24, 0x01	; 1
     41a:	f1 f7       	brne	.-4      	; 0x418 <lcd_init+0x34>
     41c:	00 c0       	rjmp	.+0      	; 0x41e <lcd_init+0x3a>
     41e:	00 00       	nop

  _delay_ms( 15 );
  lcd_nibble( 0x30 );
     420:	80 e3       	ldi	r24, 0x30	; 48
     422:	66 df       	rcall	.-308    	; 0x2f0 <lcd_nibble>
     424:	8f e0       	ldi	r24, 0x0F	; 15
     426:	90 e4       	ldi	r25, 0x40	; 64
     428:	01 97       	sbiw	r24, 0x01	; 1
     42a:	f1 f7       	brne	.-4      	; 0x428 <lcd_init+0x44>
     42c:	00 c0       	rjmp	.+0      	; 0x42e <lcd_init+0x4a>
     42e:	00 00       	nop
  _delay_ms( 4.1 );
  lcd_nibble( 0x30 );
     430:	80 e3       	ldi	r24, 0x30	; 48
     432:	5e df       	rcall	.-324    	; 0x2f0 <lcd_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     434:	8f e8       	ldi	r24, 0x8F	; 143
     436:	91 e0       	ldi	r25, 0x01	; 1
     438:	01 97       	sbiw	r24, 0x01	; 1
     43a:	f1 f7       	brne	.-4      	; 0x438 <lcd_init+0x54>
     43c:	00 c0       	rjmp	.+0      	; 0x43e <lcd_init+0x5a>
     43e:	00 00       	nop
  _delay_us( 100 );
  lcd_nibble( 0x30 );
     440:	80 e3       	ldi	r24, 0x30	; 48
     442:	56 df       	rcall	.-340    	; 0x2f0 <lcd_nibble>
     444:	87 ec       	ldi	r24, 0xC7	; 199
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	01 97       	sbiw	r24, 0x01	; 1
     44a:	f1 f7       	brne	.-4      	; 0x448 <lcd_init+0x64>
     44c:	00 c0       	rjmp	.+0      	; 0x44e <lcd_init+0x6a>
     44e:	00 00       	nop
  _delay_us( LCD_TIME_DAT );
  lcd_nibble( 0x20 );                           // 4 bit mode
     450:	80 e2       	ldi	r24, 0x20	; 32
     452:	4e df       	rcall	.-356    	; 0x2f0 <lcd_nibble>
     454:	87 ec       	ldi	r24, 0xC7	; 199
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	01 97       	sbiw	r24, 0x01	; 1
     45a:	f1 f7       	brne	.-4      	; 0x458 <lcd_init+0x74>
     45c:	00 c0       	rjmp	.+0      	; 0x45e <lcd_init+0x7a>
     45e:	00 00       	nop
  _delay_us( LCD_TIME_DAT );
#if LCD_LINE == 1
  lcd_command( 0x20 );                          // 1 line
#else
  lcd_command( 0x28 );                          // 2 lines 5*7
     460:	88 e2       	ldi	r24, 0x28	; 40
     462:	6d df       	rcall	.-294    	; 0x33e <lcd_command>
#endif
  lcd_command( 0x08 );                          // display off
     464:	88 e0       	ldi	r24, 0x08	; 8
     466:	6b df       	rcall	.-298    	; 0x33e <lcd_command>
  lcd_command( 0x01 );                          // display clear
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	69 df       	rcall	.-302    	; 0x33e <lcd_command>
  lcd_command( 0x06 );                          // cursor increment
     46c:	86 e0       	ldi	r24, 0x06	; 6
     46e:	67 df       	rcall	.-306    	; 0x33e <lcd_command>
  lcd_command( 0x0C );                          // on, no cursor, no blink
     470:	8c e0       	ldi	r24, 0x0C	; 12
     472:	65 cf       	rjmp	.-310    	; 0x33e <lcd_command>
     474:	08 95       	ret

00000476 <init_LED_PORTL_pin0>:
void init_LED_PORTL_pin6(void) {
    DDRL |= _BV(DDL6);
}

void init_LED_PORTL_pin7(void) {
    DDRL |= _BV(DDL7);
     476:	ea e0       	ldi	r30, 0x0A	; 10
     478:	f1 e0       	ldi	r31, 0x01	; 1
     47a:	80 81       	ld	r24, Z
     47c:	81 60       	ori	r24, 0x01	; 1
     47e:	80 83       	st	Z, r24
     480:	08 95       	ret

00000482 <init_LED_PORTL_pin1>:
     482:	ea e0       	ldi	r30, 0x0A	; 10
     484:	f1 e0       	ldi	r31, 0x01	; 1
     486:	80 81       	ld	r24, Z
     488:	82 60       	ori	r24, 0x02	; 2
     48a:	80 83       	st	Z, r24
     48c:	08 95       	ret

0000048e <init_LED_PORTL_pin2>:
     48e:	ea e0       	ldi	r30, 0x0A	; 10
     490:	f1 e0       	ldi	r31, 0x01	; 1
     492:	80 81       	ld	r24, Z
     494:	84 60       	ori	r24, 0x04	; 4
     496:	80 83       	st	Z, r24
     498:	08 95       	ret

0000049a <init_LED_PORTL_pin5>:
     49a:	ea e0       	ldi	r30, 0x0A	; 10
     49c:	f1 e0       	ldi	r31, 0x01	; 1
     49e:	80 81       	ld	r24, Z
     4a0:	80 62       	ori	r24, 0x20	; 32
     4a2:	80 83       	st	Z, r24
     4a4:	08 95       	ret

000004a6 <init_LED_PORTL_pin6>:
     4a6:	ea e0       	ldi	r30, 0x0A	; 10
     4a8:	f1 e0       	ldi	r31, 0x01	; 1
     4aa:	80 81       	ld	r24, Z
     4ac:	80 64       	ori	r24, 0x40	; 64
     4ae:	80 83       	st	Z, r24
     4b0:	08 95       	ret

000004b2 <enable_LED>:
}

void enable_LED(unsigned int mask) {
    PORTL |= _BV(mask);
     4b2:	eb e0       	ldi	r30, 0x0B	; 11
     4b4:	f1 e0       	ldi	r31, 0x01	; 1
     4b6:	90 81       	ld	r25, Z
     4b8:	21 e0       	ldi	r18, 0x01	; 1
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <enable_LED+0x10>
     4be:	22 0f       	add	r18, r18
     4c0:	33 1f       	adc	r19, r19
     4c2:	8a 95       	dec	r24
     4c4:	e2 f7       	brpl	.-8      	; 0x4be <enable_LED+0xc>
     4c6:	29 2b       	or	r18, r25
     4c8:	20 83       	st	Z, r18
     4ca:	08 95       	ret

000004cc <disable_LED>:
}

void disable_LED(unsigned int mask) {
    PORTL &= ~_BV(mask);
     4cc:	eb e0       	ldi	r30, 0x0B	; 11
     4ce:	f1 e0       	ldi	r31, 0x01	; 1
     4d0:	90 81       	ld	r25, Z
     4d2:	21 e0       	ldi	r18, 0x01	; 1
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <disable_LED+0x10>
     4d8:	22 0f       	add	r18, r18
     4da:	33 1f       	adc	r19, r19
     4dc:	8a 95       	dec	r24
     4de:	e2 f7       	brpl	.-8      	; 0x4d8 <disable_LED+0xc>
     4e0:	20 95       	com	r18
     4e2:	29 23       	and	r18, r25
     4e4:	20 83       	st	Z, r18
     4e6:	08 95       	ret

000004e8 <Init_Task>:

// An idle task that runs when there is nothing else to do
// Could be changed later to put CPU into low power state
void Idle() {
	for(;;) {
	}
     4e8:	21 9a       	sbi	0x04, 1	; 4
     4ea:	29 9a       	sbi	0x05, 1	; 5
     4ec:	0c 94 30 0e 	jmp	0x1c60	; 0x1c60 <Roomba_Init>
     4f0:	08 95       	ret

000004f2 <Init_Drive>:
     4f2:	22 9a       	sbi	0x04, 2	; 4
     4f4:	29 98       	cbi	0x05, 1	; 5
     4f6:	60 e0       	ldi	r22, 0x00	; 0
     4f8:	70 e8       	ldi	r23, 0x80	; 128
     4fa:	84 e6       	ldi	r24, 0x64	; 100
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	0c 94 83 0e 	jmp	0x1d06	; 0x1d06 <Roomba_Drive>
     502:	08 95       	ret

00000504 <a_main>:
}


// Application level main function
// Creates the required tasks and then terminates
void a_main() {
     504:	0f 93       	push	r16
     506:	1f 93       	push	r17
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	cd b7       	in	r28, 0x3d	; 61
     50e:	de b7       	in	r29, 0x3e	; 62
     510:	60 97       	sbiw	r28, 0x10	; 16
     512:	0f b6       	in	r0, 0x3f	; 63
     514:	f8 94       	cli
     516:	de bf       	out	0x3e, r29	; 62
     518:	0f be       	out	0x3f, r0	; 63
     51a:	cd bf       	out	0x3d, r28	; 61
	char line[16];
	portL2_Mutex = Mutex_Init();
     51c:	25 d7       	rcall	.+3658   	; 0x1368 <Mutex_Init>
     51e:	90 93 78 16 	sts	0x1678, r25
     522:	80 93 77 16 	sts	0x1677, r24
	portL6_Mutex = Mutex_Init();
     526:	20 d7       	rcall	.+3648   	; 0x1368 <Mutex_Init>
     528:	90 93 7e 16 	sts	0x167E, r25
     52c:	80 93 7d 16 	sts	0x167D, r24
	uint16_t adc_test;
	e1 = Event_Init();
     530:	36 d7       	rcall	.+3692   	; 0x139e <Event_Init>
     532:	90 93 82 16 	sts	0x1682, r25
     536:	80 93 81 16 	sts	0x1681, r24
	e2 = Event_Init();
     53a:	31 d7       	rcall	.+3682   	; 0x139e <Event_Init>
     53c:	90 93 7c 16 	sts	0x167C, r25
     540:	80 93 7b 16 	sts	0x167B, r24
	adc_init();
     544:	a8 de       	rcall	.-688    	; 0x296 <adc_init>
	
	//PongPID = Task_Create(Pong, 8, 1);
	//PingPID = Task_Create(Ping, 8, 1);
	//IdlePID = Task_Create(Idle, MINPRIORITY, 1);
	lcd_init(); // initialized the LCD
     546:	4e df       	rcall	.-356    	; 0x3e4 <lcd_init>
	DDRB |= (1<<DDB4); // enable output mode of Digital Pin 10 (PORTB Pin 4) for backlit control
     548:	24 9a       	sbi	0x04, 4	; 4
	PORTB |= (1<<DDB4); // enable back light
     54a:	2c 9a       	sbi	0x05, 4	; 5
	adc_test = adc_read(7);
     54c:	87 e0       	ldi	r24, 0x07	; 7
     54e:	aa de       	rcall	.-684    	; 0x2a4 <adc_read>
	sprintf(line, "ADC: %4d", adc_test);
     550:	9f 93       	push	r25
     552:	8f 93       	push	r24
     554:	8f e0       	ldi	r24, 0x0F	; 15
     556:	92 e0       	ldi	r25, 0x02	; 2
     558:	9f 93       	push	r25
     55a:	8f 93       	push	r24
     55c:	8e 01       	movw	r16, r28
     55e:	0f 5f       	subi	r16, 0xFF	; 255
     560:	1f 4f       	sbci	r17, 0xFF	; 255
     562:	1f 93       	push	r17
     564:	0f 93       	push	r16
     566:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <sprintf>
	lcd_puts(line);
     56a:	c8 01       	movw	r24, r16
     56c:	2d df       	rcall	.-422    	; 0x3c8 <lcd_puts>
	
	
	

	
	InitPID = Task_Create(Init_Task,8,1);
     56e:	41 e0       	ldi	r20, 0x01	; 1
     570:	50 e0       	ldi	r21, 0x00	; 0
     572:	68 e0       	ldi	r22, 0x08	; 8
     574:	70 e0       	ldi	r23, 0x00	; 0
     576:	84 e7       	ldi	r24, 0x74	; 116
     578:	92 e0       	ldi	r25, 0x02	; 2
     57a:	2c d7       	rcall	.+3672   	; 0x13d4 <Task_Create>
     57c:	90 93 80 16 	sts	0x1680, r25
     580:	80 93 7f 16 	sts	0x167F, r24
	DrivePID = Task_Create(Init_Drive, 8, 1);
     584:	41 e0       	ldi	r20, 0x01	; 1
     586:	50 e0       	ldi	r21, 0x00	; 0
     588:	68 e0       	ldi	r22, 0x08	; 8
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	89 e7       	ldi	r24, 0x79	; 121
     58e:	92 e0       	ldi	r25, 0x02	; 2
     590:	21 d7       	rcall	.+3650   	; 0x13d4 <Task_Create>
     592:	90 93 7a 16 	sts	0x167A, r25
     596:	80 93 79 16 	sts	0x1679, r24
	Task_Terminate();
     59a:	11 d0       	rcall	.+34     	; 0x5be <Task_Terminate>
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
}
     5a8:	60 96       	adiw	r28, 0x10	; 16
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	f8 94       	cli
     5ae:	de bf       	out	0x3e, r29	; 62
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	cd bf       	out	0x3d, r28	; 61
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	1f 91       	pop	r17
     5ba:	0f 91       	pop	r16
     5bc:	08 95       	ret

000005be <Task_Terminate>:
/**
  * Application level task getarg to return intiial arg value
  */
int Task_GetArg(PID p) {
	return (Cp->arg);
}
     5be:	80 91 29 02 	lds	r24, 0x0229
     5c2:	90 91 2a 02 	lds	r25, 0x022A
     5c6:	89 2b       	or	r24, r25
     5c8:	51 f0       	breq	.+20     	; 0x5de <Task_Terminate+0x20>
     5ca:	f8 94       	cli
     5cc:	e0 91 2b 02 	lds	r30, 0x022B
     5d0:	f0 91 2c 02 	lds	r31, 0x022C
     5d4:	e3 5f       	subi	r30, 0xF3	; 243
     5d6:	fe 4f       	sbci	r31, 0xFE	; 254
     5d8:	84 e0       	ldi	r24, 0x04	; 4
     5da:	80 83       	st	Z, r24
     5dc:	07 ce       	rjmp	.-1010   	; 0x1ec <Enter_Kernel>
     5de:	08 95       	ret

000005e0 <Kernel_Create_Task_At>:
     5e0:	ef 92       	push	r14
     5e2:	ff 92       	push	r15
     5e4:	0f 93       	push	r16
     5e6:	1f 93       	push	r17
     5e8:	cf 93       	push	r28
     5ea:	df 93       	push	r29
     5ec:	1f 92       	push	r1
     5ee:	1f 92       	push	r1
     5f0:	cd b7       	in	r28, 0x3d	; 61
     5f2:	de b7       	in	r29, 0x3e	; 62
     5f4:	9a 83       	std	Y+2, r25	; 0x02
     5f6:	89 83       	std	Y+1, r24	; 0x01
     5f8:	dc 01       	movw	r26, r24
     5fa:	7c 01       	movw	r14, r24
     5fc:	04 e0       	ldi	r16, 0x04	; 4
     5fe:	e0 0e       	add	r14, r16
     600:	f1 1c       	adc	r15, r1
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	91 e0       	ldi	r25, 0x01	; 1
     606:	f7 01       	movw	r30, r14
     608:	8c 01       	movw	r16, r24
     60a:	11 92       	st	Z+, r1
     60c:	01 50       	subi	r16, 0x01	; 1
     60e:	10 40       	sbci	r17, 0x00	; 0
     610:	e1 f7       	brne	.-8      	; 0x60a <Kernel_Create_Task_At+0x2a>
     612:	fd 01       	movw	r30, r26
     614:	ed 5f       	subi	r30, 0xFD	; 253
     616:	fe 4f       	sbci	r31, 0xFE	; 254
     618:	8f ed       	ldi	r24, 0xDF	; 223
     61a:	92 e0       	ldi	r25, 0x02	; 2
     61c:	80 83       	st	Z, r24
     61e:	31 97       	sbiw	r30, 0x01	; 1
     620:	90 83       	st	Z, r25
     622:	31 97       	sbiw	r30, 0x01	; 1
     624:	60 83       	st	Z, r22
     626:	31 97       	sbiw	r30, 0x01	; 1
     628:	70 83       	st	Z, r23
     62a:	31 97       	sbiw	r30, 0x01	; 1
     62c:	10 82       	st	Z, r1
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	92 93       	st	-Z, r25
     632:	9f 5f       	subi	r25, 0xFF	; 255
     634:	92 32       	cpi	r25, 0x22	; 34
     636:	e1 f7       	brne	.-8      	; 0x630 <Kernel_Create_Task_At+0x50>
     638:	a4 52       	subi	r26, 0x24	; 36
     63a:	bf 4f       	sbci	r27, 0xFF	; 255
     63c:	e9 81       	ldd	r30, Y+1	; 0x01
     63e:	fa 81       	ldd	r31, Y+2	; 0x02
     640:	b3 83       	std	Z+3, r27	; 0x03
     642:	a2 83       	std	Z+2, r26	; 0x02
     644:	df 01       	movw	r26, r30
     646:	a5 5f       	subi	r26, 0xF5	; 245
     648:	be 4f       	sbci	r27, 0xFE	; 254
     64a:	11 96       	adiw	r26, 0x01	; 1
     64c:	7c 93       	st	X, r23
     64e:	6e 93       	st	-X, r22
     650:	12 96       	adiw	r26, 0x02	; 2
     652:	1c 92       	st	X, r1
     654:	80 91 25 02 	lds	r24, 0x0225
     658:	90 91 26 02 	lds	r25, 0x0226
     65c:	91 83       	std	Z+1, r25	; 0x01
     65e:	80 83       	st	Z, r24
     660:	89 81       	ldd	r24, Y+1	; 0x01
     662:	9a 81       	ldd	r25, Y+2	; 0x02
     664:	fc 01       	movw	r30, r24
     666:	eb 5f       	subi	r30, 0xFB	; 251
     668:	fe 4f       	sbci	r31, 0xFE	; 254
     66a:	51 83       	std	Z+1, r21	; 0x01
     66c:	40 83       	st	Z, r20
     66e:	32 96       	adiw	r30, 0x02	; 2
     670:	51 83       	std	Z+1, r21	; 0x01
     672:	40 83       	st	Z, r20
     674:	32 96       	adiw	r30, 0x02	; 2
     676:	31 83       	std	Z+1, r19	; 0x01
     678:	20 83       	st	Z, r18
     67a:	71 96       	adiw	r30, 0x11	; 17
     67c:	11 82       	std	Z+1, r1	; 0x01
     67e:	10 82       	st	Z, r1
     680:	34 97       	sbiw	r30, 0x04	; 4
     682:	23 e6       	ldi	r18, 0x63	; 99
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	31 83       	std	Z+1, r19	; 0x01
     688:	20 83       	st	Z, r18
     68a:	20 91 27 02 	lds	r18, 0x0227
     68e:	30 91 28 02 	lds	r19, 0x0228
     692:	2f 5f       	subi	r18, 0xFF	; 255
     694:	3f 4f       	sbci	r19, 0xFF	; 255
     696:	30 93 28 02 	sts	0x0228, r19
     69a:	20 93 27 02 	sts	0x0227, r18
     69e:	20 91 25 02 	lds	r18, 0x0225
     6a2:	30 91 26 02 	lds	r19, 0x0226
     6a6:	2f 5f       	subi	r18, 0xFF	; 255
     6a8:	3f 4f       	sbci	r19, 0xFF	; 255
     6aa:	30 93 26 02 	sts	0x0226, r19
     6ae:	20 93 25 02 	sts	0x0225, r18
     6b2:	72 97       	sbiw	r30, 0x12	; 18
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	80 83       	st	Z, r24
     6b8:	4d e1       	ldi	r20, 0x1D	; 29
     6ba:	52 e0       	ldi	r21, 0x02	; 2
     6bc:	63 ea       	ldi	r22, 0xA3	; 163
     6be:	76 e1       	ldi	r23, 0x16	; 22
     6c0:	ce 01       	movw	r24, r28
     6c2:	01 96       	adiw	r24, 0x01	; 1
     6c4:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <enqueueRQ>
     6c8:	e9 81       	ldd	r30, Y+1	; 0x01
     6ca:	fa 81       	ldd	r31, Y+2	; 0x02
     6cc:	80 81       	ld	r24, Z
     6ce:	91 81       	ldd	r25, Z+1	; 0x01
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	1f 91       	pop	r17
     6da:	0f 91       	pop	r16
     6dc:	ff 90       	pop	r15
     6de:	ef 90       	pop	r14
     6e0:	08 95       	ret

000006e2 <Kernel_Create_Task>:
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	ec 01       	movw	r28, r24
     6e8:	80 91 27 02 	lds	r24, 0x0227
     6ec:	90 91 28 02 	lds	r25, 0x0228
     6f0:	40 97       	sbiw	r24, 0x10	; 16
     6f2:	21 f1       	breq	.+72     	; 0x73c <Kernel_Create_Task+0x5a>
     6f4:	80 91 91 03 	lds	r24, 0x0391
     6f8:	88 23       	and	r24, r24
     6fa:	71 f0       	breq	.+28     	; 0x718 <Kernel_Create_Task+0x36>
     6fc:	af ea       	ldi	r26, 0xAF	; 175
     6fe:	b4 e0       	ldi	r27, 0x04	; 4
     700:	e1 e0       	ldi	r30, 0x01	; 1
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	9c 91       	ld	r25, X
     706:	99 23       	and	r25, r25
     708:	49 f0       	breq	.+18     	; 0x71c <Kernel_Create_Task+0x3a>
     70a:	31 96       	adiw	r30, 0x01	; 1
     70c:	a2 5e       	subi	r26, 0xE2	; 226
     70e:	be 4f       	sbci	r27, 0xFE	; 254
     710:	e0 31       	cpi	r30, 0x10	; 16
     712:	f1 05       	cpc	r31, r1
     714:	b9 f7       	brne	.-18     	; 0x704 <Kernel_Create_Task+0x22>
     716:	02 c0       	rjmp	.+4      	; 0x71c <Kernel_Create_Task+0x3a>
     718:	e0 e0       	ldi	r30, 0x00	; 0
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	9a 01       	movw	r18, r20
     71e:	ab 01       	movw	r20, r22
     720:	be 01       	movw	r22, r28
     722:	ae e1       	ldi	r26, 0x1E	; 30
     724:	b1 e0       	ldi	r27, 0x01	; 1
     726:	ea 9f       	mul	r30, r26
     728:	c0 01       	movw	r24, r0
     72a:	eb 9f       	mul	r30, r27
     72c:	90 0d       	add	r25, r0
     72e:	fa 9f       	mul	r31, r26
     730:	90 0d       	add	r25, r0
     732:	11 24       	eor	r1, r1
     734:	83 57       	subi	r24, 0x73	; 115
     736:	9d 4f       	sbci	r25, 0xFD	; 253
     738:	53 df       	rcall	.-346    	; 0x5e0 <Kernel_Create_Task_At>
     73a:	00 c0       	rjmp	.+0      	; 0x73c <Kernel_Create_Task+0x5a>
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	08 95       	ret

00000742 <Kernel_Init_Mutex_At>:
     742:	fc 01       	movw	r30, r24
     744:	80 91 23 02 	lds	r24, 0x0223
     748:	90 91 24 02 	lds	r25, 0x0224
     74c:	91 83       	std	Z+1, r25	; 0x01
     74e:	80 83       	st	Z, r24
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	82 83       	std	Z+2, r24	; 0x02
     754:	80 91 23 02 	lds	r24, 0x0223
     758:	90 91 24 02 	lds	r25, 0x0224
     75c:	01 96       	adiw	r24, 0x01	; 1
     75e:	90 93 24 02 	sts	0x0224, r25
     762:	80 93 23 02 	sts	0x0223, r24
     766:	80 81       	ld	r24, Z
     768:	91 81       	ldd	r25, Z+1	; 0x01
     76a:	08 95       	ret

0000076c <Kernel_Init_Event_At>:
     76c:	fc 01       	movw	r30, r24
     76e:	80 91 21 02 	lds	r24, 0x0221
     772:	90 91 22 02 	lds	r25, 0x0222
     776:	91 83       	std	Z+1, r25	; 0x01
     778:	80 83       	st	Z, r24
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	82 83       	std	Z+2, r24	; 0x02
     77e:	14 82       	std	Z+4, r1	; 0x04
     780:	13 82       	std	Z+3, r1	; 0x03
     782:	80 91 21 02 	lds	r24, 0x0221
     786:	90 91 22 02 	lds	r25, 0x0222
     78a:	01 96       	adiw	r24, 0x01	; 1
     78c:	90 93 22 02 	sts	0x0222, r25
     790:	80 93 21 02 	sts	0x0221, r24
     794:	80 81       	ld	r24, Z
     796:	91 81       	ldd	r25, Z+1	; 0x01
     798:	08 95       	ret

0000079a <OS_Init>:
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	10 92 28 02 	sts	0x0228, r1
     7a2:	10 92 27 02 	sts	0x0227, r1
     7a6:	10 92 2a 02 	sts	0x022A, r1
     7aa:	10 92 29 02 	sts	0x0229, r1
     7ae:	10 92 24 02 	sts	0x0224, r1
     7b2:	10 92 23 02 	sts	0x0223, r1
     7b6:	10 92 22 02 	sts	0x0222, r1
     7ba:	10 92 21 02 	sts	0x0221, r1
     7be:	10 92 26 02 	sts	0x0226, r1
     7c2:	10 92 25 02 	sts	0x0225, r1
     7c6:	ed e8       	ldi	r30, 0x8D	; 141
     7c8:	f2 e0       	ldi	r31, 0x02	; 2
     7ca:	a1 e9       	ldi	r26, 0x91	; 145
     7cc:	b3 e0       	ldi	r27, 0x03	; 3
     7ce:	4d e6       	ldi	r20, 0x6D	; 109
     7d0:	54 e1       	ldi	r21, 0x14	; 20
     7d2:	2e e1       	ldi	r18, 0x1E	; 30
     7d4:	31 e0       	ldi	r19, 0x01	; 1
     7d6:	83 e6       	ldi	r24, 0x63	; 99
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	ef 01       	movw	r28, r30
     7dc:	b9 01       	movw	r22, r18
     7de:	19 92       	st	Y+, r1
     7e0:	61 50       	subi	r22, 0x01	; 1
     7e2:	70 40       	sbci	r23, 0x00	; 0
     7e4:	e1 f7       	brne	.-8      	; 0x7de <OS_Init+0x44>
     7e6:	1c 92       	st	X, r1
     7e8:	53 96       	adiw	r26, 0x13	; 19
     7ea:	9c 93       	st	X, r25
     7ec:	8e 93       	st	-X, r24
     7ee:	52 97       	sbiw	r26, 0x12	; 18
     7f0:	11 82       	std	Z+1, r1	; 0x01
     7f2:	10 82       	st	Z, r1
     7f4:	e2 5e       	subi	r30, 0xE2	; 226
     7f6:	fe 4f       	sbci	r31, 0xFE	; 254
     7f8:	a2 5e       	subi	r26, 0xE2	; 226
     7fa:	be 4f       	sbci	r27, 0xFE	; 254
     7fc:	e4 17       	cp	r30, r20
     7fe:	f5 07       	cpc	r31, r21
     800:	61 f7       	brne	.-40     	; 0x7da <OS_Init+0x40>
     802:	e7 e5       	ldi	r30, 0x57	; 87
     804:	f2 e0       	ldi	r31, 0x02	; 2
     806:	2f e8       	ldi	r18, 0x8F	; 143
     808:	32 e0       	ldi	r19, 0x02	; 2
     80a:	87 e0       	ldi	r24, 0x07	; 7
     80c:	df 01       	movw	r26, r30
     80e:	12 97       	sbiw	r26, 0x02	; 2
     810:	ed 01       	movw	r28, r26
     812:	68 2f       	mov	r22, r24
     814:	19 92       	st	Y+, r1
     816:	6a 95       	dec	r22
     818:	e9 f7       	brne	.-6      	; 0x814 <OS_Init+0x7a>
     81a:	10 82       	st	Z, r1
     81c:	37 96       	adiw	r30, 0x07	; 7
     81e:	e2 17       	cp	r30, r18
     820:	f3 07       	cpc	r31, r19
     822:	a1 f7       	brne	.-24     	; 0x80c <OS_Init+0x72>
     824:	ef e2       	ldi	r30, 0x2F	; 47
     826:	f2 e0       	ldi	r31, 0x02	; 2
     828:	27 e5       	ldi	r18, 0x57	; 87
     82a:	32 e0       	ldi	r19, 0x02	; 2
     82c:	85 e0       	ldi	r24, 0x05	; 5
     82e:	df 01       	movw	r26, r30
     830:	12 97       	sbiw	r26, 0x02	; 2
     832:	ed 01       	movw	r28, r26
     834:	68 2f       	mov	r22, r24
     836:	19 92       	st	Y+, r1
     838:	6a 95       	dec	r22
     83a:	e9 f7       	brne	.-6      	; 0x836 <OS_Init+0x9c>
     83c:	10 82       	st	Z, r1
     83e:	35 96       	adiw	r30, 0x05	; 5
     840:	e2 17       	cp	r30, r18
     842:	f3 07       	cpc	r31, r19
     844:	a1 f7       	brne	.-24     	; 0x82e <OS_Init+0x94>
     846:	df 91       	pop	r29
     848:	cf 91       	pop	r28
     84a:	08 95       	ret

0000084c <OS_Abort>:
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	0e 94 97 12 	call	0x252e	; 0x252e <_exit>

00000854 <Dispatch>:
     854:	6d e1       	ldi	r22, 0x1D	; 29
     856:	72 e0       	ldi	r23, 0x02	; 2
     858:	83 ea       	ldi	r24, 0xA3	; 163
     85a:	96 e1       	ldi	r25, 0x16	; 22
     85c:	0e 94 af 0c 	call	0x195e	; 0x195e <dequeueRQ>
     860:	fc 01       	movw	r30, r24
     862:	90 93 2c 02 	sts	0x022C, r25
     866:	80 93 2b 02 	sts	0x022B, r24
     86a:	89 2b       	or	r24, r25
     86c:	09 f4       	brne	.+2      	; 0x870 <Dispatch+0x1c>
     86e:	ee df       	rcall	.-36     	; 0x84c <OS_Abort>
     870:	82 81       	ldd	r24, Z+2	; 0x02
     872:	93 81       	ldd	r25, Z+3	; 0x03
     874:	90 93 c4 16 	sts	0x16C4, r25
     878:	80 93 c3 16 	sts	0x16C3, r24
     87c:	82 e0       	ldi	r24, 0x02	; 2
     87e:	df 01       	movw	r26, r30
     880:	ac 5f       	subi	r26, 0xFC	; 252
     882:	be 4f       	sbci	r27, 0xFE	; 254
     884:	8c 93       	st	X, r24
     886:	80 81       	ld	r24, Z
     888:	91 81       	ldd	r25, Z+1	; 0x01
     88a:	02 97       	sbiw	r24, 0x02	; 2
     88c:	20 f4       	brcc	.+8      	; 0x896 <Dispatch+0x42>
     88e:	82 e0       	ldi	r24, 0x02	; 2
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	0f ce       	rjmp	.-994    	; 0x4b2 <enable_LED>
     894:	08 95       	ret
     896:	80 81       	ld	r24, Z
     898:	91 81       	ldd	r25, Z+1	; 0x01
     89a:	02 97       	sbiw	r24, 0x02	; 2
     89c:	21 f4       	brne	.+8      	; 0x8a6 <Dispatch+0x52>
     89e:	85 e0       	ldi	r24, 0x05	; 5
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	07 ce       	rjmp	.-1010   	; 0x4b2 <enable_LED>
     8a4:	08 95       	ret
     8a6:	80 81       	ld	r24, Z
     8a8:	91 81       	ldd	r25, Z+1	; 0x01
     8aa:	03 97       	sbiw	r24, 0x03	; 3
     8ac:	19 f4       	brne	.+6      	; 0x8b4 <Dispatch+0x60>
     8ae:	86 e0       	ldi	r24, 0x06	; 6
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	ff cd       	rjmp	.-1026   	; 0x4b2 <enable_LED>
     8b4:	08 95       	ret

000008b6 <Kernel_Unlock_Mutex>:
     8b6:	0f 93       	push	r16
     8b8:	1f 93       	push	r17
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	1f 92       	push	r1
     8c0:	1f 92       	push	r1
     8c2:	cd b7       	in	r28, 0x3d	; 61
     8c4:	de b7       	in	r29, 0x3e	; 62
     8c6:	a0 91 2b 02 	lds	r26, 0x022B
     8ca:	b0 91 2c 02 	lds	r27, 0x022C
     8ce:	fd 01       	movw	r30, r26
     8d0:	ec 5e       	subi	r30, 0xEC	; 236
     8d2:	fe 4f       	sbci	r31, 0xFE	; 254
     8d4:	40 81       	ld	r20, Z
     8d6:	51 81       	ldd	r21, Z+1	; 0x01
     8d8:	e5 e5       	ldi	r30, 0x55	; 85
     8da:	f2 e0       	ldi	r31, 0x02	; 2
     8dc:	00 e0       	ldi	r16, 0x00	; 0
     8de:	10 e0       	ldi	r17, 0x00	; 0
     8e0:	80 81       	ld	r24, Z
     8e2:	91 81       	ldd	r25, Z+1	; 0x01
     8e4:	84 17       	cp	r24, r20
     8e6:	95 07       	cpc	r25, r21
     8e8:	39 f0       	breq	.+14     	; 0x8f8 <Kernel_Unlock_Mutex+0x42>
     8ea:	0f 5f       	subi	r16, 0xFF	; 255
     8ec:	1f 4f       	sbci	r17, 0xFF	; 255
     8ee:	37 96       	adiw	r30, 0x07	; 7
     8f0:	08 30       	cpi	r16, 0x08	; 8
     8f2:	11 05       	cpc	r17, r1
     8f4:	a9 f7       	brne	.-22     	; 0x8e0 <Kernel_Unlock_Mutex+0x2a>
     8f6:	f7 c0       	rjmp	.+494    	; 0xae6 <Kernel_Unlock_Mutex+0x230>
     8f8:	8d 91       	ld	r24, X+
     8fa:	9c 91       	ld	r25, X
     8fc:	11 97       	sbiw	r26, 0x01	; 1
     8fe:	27 e0       	ldi	r18, 0x07	; 7
     900:	20 9f       	mul	r18, r16
     902:	f0 01       	movw	r30, r0
     904:	21 9f       	mul	r18, r17
     906:	f0 0d       	add	r31, r0
     908:	11 24       	eor	r1, r1
     90a:	eb 5a       	subi	r30, 0xAB	; 171
     90c:	fd 4f       	sbci	r31, 0xFD	; 253
     90e:	23 81       	ldd	r18, Z+3	; 0x03
     910:	34 81       	ldd	r19, Z+4	; 0x04
     912:	28 17       	cp	r18, r24
     914:	39 07       	cpc	r19, r25
     916:	09 f0       	breq	.+2      	; 0x91a <Kernel_Unlock_Mutex+0x64>
     918:	e6 c0       	rjmp	.+460    	; 0xae6 <Kernel_Unlock_Mutex+0x230>
     91a:	ac 5f       	subi	r26, 0xFC	; 252
     91c:	be 4f       	sbci	r27, 0xFE	; 254
     91e:	8c 91       	ld	r24, X
     920:	86 30       	cpi	r24, 0x06	; 6
     922:	09 f0       	breq	.+2      	; 0x926 <Kernel_Unlock_Mutex+0x70>
     924:	4d c0       	rjmp	.+154    	; 0x9c0 <Kernel_Unlock_Mutex+0x10a>
     926:	69 e1       	ldi	r22, 0x19	; 25
     928:	72 e0       	ldi	r23, 0x02	; 2
     92a:	85 ec       	ldi	r24, 0xC5	; 197
     92c:	96 e1       	ldi	r25, 0x16	; 22
     92e:	af d7       	rcall	.+3934   	; 0x188e <dequeueWQ>
     930:	9a 83       	std	Y+2, r25	; 0x02
     932:	89 83       	std	Y+1, r24	; 0x01
     934:	00 97       	sbiw	r24, 0x00	; 0
     936:	79 f4       	brne	.+30     	; 0x956 <Kernel_Unlock_Mutex+0xa0>
     938:	87 e0       	ldi	r24, 0x07	; 7
     93a:	80 9f       	mul	r24, r16
     93c:	f0 01       	movw	r30, r0
     93e:	81 9f       	mul	r24, r17
     940:	f0 0d       	add	r31, r0
     942:	11 24       	eor	r1, r1
     944:	eb 5a       	subi	r30, 0xAB	; 171
     946:	fd 4f       	sbci	r31, 0xFD	; 253
     948:	16 82       	std	Z+6, r1	; 0x06
     94a:	15 82       	std	Z+5, r1	; 0x05
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	82 83       	std	Z+2, r24	; 0x02
     950:	14 82       	std	Z+4, r1	; 0x04
     952:	13 82       	std	Z+3, r1	; 0x03
     954:	c8 c0       	rjmp	.+400    	; 0xae6 <Kernel_Unlock_Mutex+0x230>
     956:	27 e0       	ldi	r18, 0x07	; 7
     958:	20 9f       	mul	r18, r16
     95a:	f0 01       	movw	r30, r0
     95c:	21 9f       	mul	r18, r17
     95e:	f0 0d       	add	r31, r0
     960:	11 24       	eor	r1, r1
     962:	eb 5a       	subi	r30, 0xAB	; 171
     964:	fd 4f       	sbci	r31, 0xFD	; 253
     966:	21 e0       	ldi	r18, 0x01	; 1
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	36 83       	std	Z+6, r19	; 0x06
     96c:	25 83       	std	Z+5, r18	; 0x05
     96e:	dc 01       	movw	r26, r24
     970:	2d 91       	ld	r18, X+
     972:	3c 91       	ld	r19, X
     974:	34 83       	std	Z+4, r19	; 0x04
     976:	23 83       	std	Z+3, r18	; 0x03
     978:	20 91 2b 02 	lds	r18, 0x022B
     97c:	30 91 2c 02 	lds	r19, 0x022C
     980:	d9 01       	movw	r26, r18
     982:	a9 5f       	subi	r26, 0xF9	; 249
     984:	be 4f       	sbci	r27, 0xFE	; 254
     986:	4d 91       	ld	r20, X+
     988:	5c 91       	ld	r21, X
     98a:	11 97       	sbiw	r26, 0x01	; 1
     98c:	fc 01       	movw	r30, r24
     98e:	e9 5f       	subi	r30, 0xF9	; 249
     990:	fe 4f       	sbci	r31, 0xFE	; 254
     992:	51 83       	std	Z+1, r21	; 0x01
     994:	40 83       	st	Z, r20
     996:	33 97       	sbiw	r30, 0x03	; 3
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	80 83       	st	Z, r24
     99c:	f9 01       	movw	r30, r18
     99e:	eb 5f       	subi	r30, 0xFB	; 251
     9a0:	fe 4f       	sbci	r31, 0xFE	; 254
     9a2:	40 81       	ld	r20, Z
     9a4:	51 81       	ldd	r21, Z+1	; 0x01
     9a6:	11 96       	adiw	r26, 0x01	; 1
     9a8:	5c 93       	st	X, r21
     9aa:	4e 93       	st	-X, r20
     9ac:	31 97       	sbiw	r30, 0x01	; 1
     9ae:	80 83       	st	Z, r24
     9b0:	4d e1       	ldi	r20, 0x1D	; 29
     9b2:	52 e0       	ldi	r21, 0x02	; 2
     9b4:	63 ea       	ldi	r22, 0xA3	; 163
     9b6:	76 e1       	ldi	r23, 0x16	; 22
     9b8:	ce 01       	movw	r24, r28
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	05 d7       	rcall	.+3594   	; 0x17c8 <enqueueRQ>
     9be:	93 c0       	rjmp	.+294    	; 0xae6 <Kernel_Unlock_Mutex+0x230>
     9c0:	87 e0       	ldi	r24, 0x07	; 7
     9c2:	80 9f       	mul	r24, r16
     9c4:	f0 01       	movw	r30, r0
     9c6:	81 9f       	mul	r24, r17
     9c8:	f0 0d       	add	r31, r0
     9ca:	11 24       	eor	r1, r1
     9cc:	eb 5a       	subi	r30, 0xAB	; 171
     9ce:	fd 4f       	sbci	r31, 0xFD	; 253
     9d0:	85 81       	ldd	r24, Z+5	; 0x05
     9d2:	96 81       	ldd	r25, Z+6	; 0x06
     9d4:	82 30       	cpi	r24, 0x02	; 2
     9d6:	91 05       	cpc	r25, r1
     9d8:	60 f0       	brcs	.+24     	; 0x9f2 <Kernel_Unlock_Mutex+0x13c>
     9da:	27 e0       	ldi	r18, 0x07	; 7
     9dc:	20 9f       	mul	r18, r16
     9de:	f0 01       	movw	r30, r0
     9e0:	21 9f       	mul	r18, r17
     9e2:	f0 0d       	add	r31, r0
     9e4:	11 24       	eor	r1, r1
     9e6:	eb 5a       	subi	r30, 0xAB	; 171
     9e8:	fd 4f       	sbci	r31, 0xFD	; 253
     9ea:	01 97       	sbiw	r24, 0x01	; 1
     9ec:	96 83       	std	Z+6, r25	; 0x06
     9ee:	85 83       	std	Z+5, r24	; 0x05
     9f0:	7a c0       	rjmp	.+244    	; 0xae6 <Kernel_Unlock_Mutex+0x230>
     9f2:	69 e1       	ldi	r22, 0x19	; 25
     9f4:	72 e0       	ldi	r23, 0x02	; 2
     9f6:	85 ec       	ldi	r24, 0xC5	; 197
     9f8:	96 e1       	ldi	r25, 0x16	; 22
     9fa:	49 d7       	rcall	.+3730   	; 0x188e <dequeueWQ>
     9fc:	9a 83       	std	Y+2, r25	; 0x02
     9fe:	89 83       	std	Y+1, r24	; 0x01
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a9 f5       	brne	.+106    	; 0xa6e <Kernel_Unlock_Mutex+0x1b8>
     a04:	87 e0       	ldi	r24, 0x07	; 7
     a06:	80 9f       	mul	r24, r16
     a08:	f0 01       	movw	r30, r0
     a0a:	81 9f       	mul	r24, r17
     a0c:	f0 0d       	add	r31, r0
     a0e:	11 24       	eor	r1, r1
     a10:	eb 5a       	subi	r30, 0xAB	; 171
     a12:	fd 4f       	sbci	r31, 0xFD	; 253
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	82 83       	std	Z+2, r24	; 0x02
     a18:	16 82       	std	Z+6, r1	; 0x06
     a1a:	15 82       	std	Z+5, r1	; 0x05
     a1c:	14 82       	std	Z+4, r1	; 0x04
     a1e:	13 82       	std	Z+3, r1	; 0x03
     a20:	e0 91 2b 02 	lds	r30, 0x022B
     a24:	f0 91 2c 02 	lds	r31, 0x022C
     a28:	df 01       	movw	r26, r30
     a2a:	ab 5f       	subi	r26, 0xFB	; 251
     a2c:	be 4f       	sbci	r27, 0xFE	; 254
     a2e:	8d 91       	ld	r24, X+
     a30:	9c 91       	ld	r25, X
     a32:	11 97       	sbiw	r26, 0x01	; 1
     a34:	12 96       	adiw	r26, 0x02	; 2
     a36:	11 96       	adiw	r26, 0x01	; 1
     a38:	9c 93       	st	X, r25
     a3a:	8e 93       	st	-X, r24
     a3c:	80 81       	ld	r24, Z
     a3e:	91 81       	ldd	r25, Z+1	; 0x01
     a40:	02 97       	sbiw	r24, 0x02	; 2
     a42:	20 f4       	brcc	.+8      	; 0xa4c <Kernel_Unlock_Mutex+0x196>
     a44:	82 e0       	ldi	r24, 0x02	; 2
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	34 dd       	rcall	.-1432   	; 0x4b2 <enable_LED>
     a4a:	4d c0       	rjmp	.+154    	; 0xae6 <Kernel_Unlock_Mutex+0x230>
     a4c:	80 81       	ld	r24, Z
     a4e:	91 81       	ldd	r25, Z+1	; 0x01
     a50:	02 97       	sbiw	r24, 0x02	; 2
     a52:	21 f4       	brne	.+8      	; 0xa5c <Kernel_Unlock_Mutex+0x1a6>
     a54:	85 e0       	ldi	r24, 0x05	; 5
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	2c dd       	rcall	.-1448   	; 0x4b2 <enable_LED>
     a5a:	45 c0       	rjmp	.+138    	; 0xae6 <Kernel_Unlock_Mutex+0x230>
     a5c:	80 81       	ld	r24, Z
     a5e:	91 81       	ldd	r25, Z+1	; 0x01
     a60:	03 97       	sbiw	r24, 0x03	; 3
     a62:	09 f0       	breq	.+2      	; 0xa66 <Kernel_Unlock_Mutex+0x1b0>
     a64:	40 c0       	rjmp	.+128    	; 0xae6 <Kernel_Unlock_Mutex+0x230>
     a66:	86 e0       	ldi	r24, 0x06	; 6
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	23 dd       	rcall	.-1466   	; 0x4b2 <enable_LED>
     a6c:	3c c0       	rjmp	.+120    	; 0xae6 <Kernel_Unlock_Mutex+0x230>
     a6e:	27 e0       	ldi	r18, 0x07	; 7
     a70:	20 9f       	mul	r18, r16
     a72:	f0 01       	movw	r30, r0
     a74:	21 9f       	mul	r18, r17
     a76:	f0 0d       	add	r31, r0
     a78:	11 24       	eor	r1, r1
     a7a:	eb 5a       	subi	r30, 0xAB	; 171
     a7c:	fd 4f       	sbci	r31, 0xFD	; 253
     a7e:	21 e0       	ldi	r18, 0x01	; 1
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	36 83       	std	Z+6, r19	; 0x06
     a84:	25 83       	std	Z+5, r18	; 0x05
     a86:	dc 01       	movw	r26, r24
     a88:	2d 91       	ld	r18, X+
     a8a:	3c 91       	ld	r19, X
     a8c:	34 83       	std	Z+4, r19	; 0x04
     a8e:	23 83       	std	Z+3, r18	; 0x03
     a90:	20 91 2b 02 	lds	r18, 0x022B
     a94:	30 91 2c 02 	lds	r19, 0x022C
     a98:	d9 01       	movw	r26, r18
     a9a:	a9 5f       	subi	r26, 0xF9	; 249
     a9c:	be 4f       	sbci	r27, 0xFE	; 254
     a9e:	4d 91       	ld	r20, X+
     aa0:	5c 91       	ld	r21, X
     aa2:	11 97       	sbiw	r26, 0x01	; 1
     aa4:	fc 01       	movw	r30, r24
     aa6:	e9 5f       	subi	r30, 0xF9	; 249
     aa8:	fe 4f       	sbci	r31, 0xFE	; 254
     aaa:	51 83       	std	Z+1, r21	; 0x01
     aac:	40 83       	st	Z, r20
     aae:	33 97       	sbiw	r30, 0x03	; 3
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	80 83       	st	Z, r24
     ab4:	f9 01       	movw	r30, r18
     ab6:	eb 5f       	subi	r30, 0xFB	; 251
     ab8:	fe 4f       	sbci	r31, 0xFE	; 254
     aba:	40 81       	ld	r20, Z
     abc:	51 81       	ldd	r21, Z+1	; 0x01
     abe:	11 96       	adiw	r26, 0x01	; 1
     ac0:	5c 93       	st	X, r21
     ac2:	4e 93       	st	-X, r20
     ac4:	31 97       	sbiw	r30, 0x01	; 1
     ac6:	80 83       	st	Z, r24
     ac8:	4d e1       	ldi	r20, 0x1D	; 29
     aca:	52 e0       	ldi	r21, 0x02	; 2
     acc:	63 ea       	ldi	r22, 0xA3	; 163
     ace:	76 e1       	ldi	r23, 0x16	; 22
     ad0:	ce 01       	movw	r24, r28
     ad2:	01 96       	adiw	r24, 0x01	; 1
     ad4:	79 d6       	rcall	.+3314   	; 0x17c8 <enqueueRQ>
     ad6:	4d e1       	ldi	r20, 0x1D	; 29
     ad8:	52 e0       	ldi	r21, 0x02	; 2
     ada:	63 ea       	ldi	r22, 0xA3	; 163
     adc:	76 e1       	ldi	r23, 0x16	; 22
     ade:	8b e2       	ldi	r24, 0x2B	; 43
     ae0:	92 e0       	ldi	r25, 0x02	; 2
     ae2:	72 d6       	rcall	.+3300   	; 0x17c8 <enqueueRQ>
     ae4:	b7 de       	rcall	.-658    	; 0x854 <Dispatch>
     ae6:	0f 90       	pop	r0
     ae8:	0f 90       	pop	r0
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	1f 91       	pop	r17
     af0:	0f 91       	pop	r16
     af2:	08 95       	ret

00000af4 <OS_Start>:
     af4:	2f 92       	push	r2
     af6:	3f 92       	push	r3
     af8:	4f 92       	push	r4
     afa:	5f 92       	push	r5
     afc:	6f 92       	push	r6
     afe:	7f 92       	push	r7
     b00:	8f 92       	push	r8
     b02:	9f 92       	push	r9
     b04:	af 92       	push	r10
     b06:	bf 92       	push	r11
     b08:	cf 92       	push	r12
     b0a:	df 92       	push	r13
     b0c:	ef 92       	push	r14
     b0e:	ff 92       	push	r15
     b10:	0f 93       	push	r16
     b12:	1f 93       	push	r17
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
     b18:	00 d0       	rcall	.+0      	; 0xb1a <OS_Start+0x26>
     b1a:	1f 92       	push	r1
     b1c:	cd b7       	in	r28, 0x3d	; 61
     b1e:	de b7       	in	r29, 0x3e	; 62
     b20:	80 91 29 02 	lds	r24, 0x0229
     b24:	90 91 2a 02 	lds	r25, 0x022A
     b28:	89 2b       	or	r24, r25
     b2a:	09 f0       	breq	.+2      	; 0xb2e <OS_Start+0x3a>
     b2c:	06 c4       	rjmp	.+2060   	; 0x133a <OS_Start+0x846>
     b2e:	80 91 27 02 	lds	r24, 0x0227
     b32:	90 91 28 02 	lds	r25, 0x0228
     b36:	89 2b       	or	r24, r25
     b38:	09 f4       	brne	.+2      	; 0xb3c <OS_Start+0x48>
     b3a:	ff c3       	rjmp	.+2046   	; 0x133a <OS_Start+0x846>
     b3c:	f8 94       	cli
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	90 93 2a 02 	sts	0x022A, r25
     b46:	80 93 29 02 	sts	0x0229, r24
     b4a:	84 de       	rcall	.-760    	; 0x854 <Dispatch>
     b4c:	0f 2e       	mov	r0, r31
     b4e:	fd e2       	ldi	r31, 0x2D	; 45
     b50:	ef 2e       	mov	r14, r31
     b52:	f2 e0       	ldi	r31, 0x02	; 2
     b54:	ff 2e       	mov	r15, r31
     b56:	f0 2d       	mov	r31, r0
     b58:	0f 2e       	mov	r0, r31
     b5a:	fe e1       	ldi	r31, 0x1E	; 30
     b5c:	af 2e       	mov	r10, r31
     b5e:	bb 24       	eor	r11, r11
     b60:	b3 94       	inc	r11
     b62:	f0 2d       	mov	r31, r0
     b64:	0f 2e       	mov	r0, r31
     b66:	f3 e6       	ldi	r31, 0x63	; 99
     b68:	2f 2e       	mov	r2, r31
     b6a:	31 2c       	mov	r3, r1
     b6c:	f0 2d       	mov	r31, r0
     b6e:	88 24       	eor	r8, r8
     b70:	83 94       	inc	r8
     b72:	91 2c       	mov	r9, r1
     b74:	0f 2e       	mov	r0, r31
     b76:	f5 e5       	ldi	r31, 0x55	; 85
     b78:	cf 2e       	mov	r12, r31
     b7a:	f2 e0       	ldi	r31, 0x02	; 2
     b7c:	df 2e       	mov	r13, r31
     b7e:	f0 2d       	mov	r31, r0
     b80:	0d e8       	ldi	r16, 0x8D	; 141
     b82:	12 e0       	ldi	r17, 0x02	; 2
     b84:	0f 2e       	mov	r0, r31
     b86:	fa e0       	ldi	r31, 0x0A	; 10
     b88:	6f 2e       	mov	r6, r31
     b8a:	71 2c       	mov	r7, r1
     b8c:	f0 2d       	mov	r31, r0
     b8e:	e0 91 2b 02 	lds	r30, 0x022B
     b92:	f0 91 2c 02 	lds	r31, 0x022C
     b96:	df 01       	movw	r26, r30
     b98:	a3 5f       	subi	r26, 0xF3	; 243
     b9a:	be 4f       	sbci	r27, 0xFE	; 254
     b9c:	1c 92       	st	X, r1
     b9e:	82 81       	ldd	r24, Z+2	; 0x02
     ba0:	93 81       	ldd	r25, Z+3	; 0x03
     ba2:	90 93 c4 16 	sts	0x16C4, r25
     ba6:	80 93 c3 16 	sts	0x16C3, r24
     baa:	cb da       	rcall	.-2666   	; 0x142 <CSwitch>
     bac:	82 e0       	ldi	r24, 0x02	; 2
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	8d dc       	rcall	.-1766   	; 0x4cc <disable_LED>
     bb2:	85 e0       	ldi	r24, 0x05	; 5
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	8a dc       	rcall	.-1772   	; 0x4cc <disable_LED>
     bb8:	86 e0       	ldi	r24, 0x06	; 6
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	87 dc       	rcall	.-1778   	; 0x4cc <disable_LED>
     bbe:	80 91 2b 02 	lds	r24, 0x022B
     bc2:	90 91 2c 02 	lds	r25, 0x022C
     bc6:	9c 83       	std	Y+4, r25	; 0x04
     bc8:	8b 83       	std	Y+3, r24	; 0x03
     bca:	80 91 c3 16 	lds	r24, 0x16C3
     bce:	90 91 c4 16 	lds	r25, 0x16C4
     bd2:	ab 81       	ldd	r26, Y+3	; 0x03
     bd4:	bc 81       	ldd	r27, Y+4	; 0x04
     bd6:	13 96       	adiw	r26, 0x03	; 3
     bd8:	9c 93       	st	X, r25
     bda:	8e 93       	st	-X, r24
     bdc:	12 97       	sbiw	r26, 0x02	; 2
     bde:	fd 01       	movw	r30, r26
     be0:	e3 5f       	subi	r30, 0xF3	; 243
     be2:	fe 4f       	sbci	r31, 0xFE	; 254
     be4:	e0 81       	ld	r30, Z
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	ed 30       	cpi	r30, 0x0D	; 13
     bea:	f1 05       	cpc	r31, r1
     bec:	80 f6       	brcc	.-96     	; 0xb8e <OS_Start+0x9a>
     bee:	88 27       	eor	r24, r24
     bf0:	ee 58       	subi	r30, 0x8E	; 142
     bf2:	ff 4f       	sbci	r31, 0xFF	; 255
     bf4:	8f 4f       	sbci	r24, 0xFF	; 255
     bf6:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__tablejump2__>
     bfa:	eb 81       	ldd	r30, Y+3	; 0x03
     bfc:	fc 81       	ldd	r31, Y+4	; 0x04
     bfe:	e4 5e       	subi	r30, 0xE4	; 228
     c00:	fe 4f       	sbci	r31, 0xFE	; 254
     c02:	80 81       	ld	r24, Z
     c04:	91 81       	ldd	r25, Z+1	; 0x01
     c06:	ed e8       	ldi	r30, 0x8D	; 141
     c08:	f2 e0       	ldi	r31, 0x02	; 2
     c0a:	20 81       	ld	r18, Z
     c0c:	31 81       	ldd	r19, Z+1	; 0x01
     c0e:	28 17       	cp	r18, r24
     c10:	39 07       	cpc	r19, r25
     c12:	09 f0       	breq	.+2      	; 0xc16 <OS_Start+0x122>
     c14:	89 c0       	rjmp	.+274    	; 0xd28 <OS_Start+0x234>
     c16:	0d c3       	rjmp	.+1562   	; 0x1232 <OS_Start+0x73e>
     c18:	eb 81       	ldd	r30, Y+3	; 0x03
     c1a:	fc 81       	ldd	r31, Y+4	; 0x04
     c1c:	e7 5f       	subi	r30, 0xF7	; 247
     c1e:	fe 4f       	sbci	r31, 0xFE	; 254
     c20:	40 81       	ld	r20, Z
     c22:	51 81       	ldd	r21, Z+1	; 0x01
     c24:	eb 81       	ldd	r30, Y+3	; 0x03
     c26:	fc 81       	ldd	r31, Y+4	; 0x04
     c28:	eb 5f       	subi	r30, 0xFB	; 251
     c2a:	fe 4f       	sbci	r31, 0xFE	; 254
     c2c:	60 81       	ld	r22, Z
     c2e:	71 81       	ldd	r23, Z+1	; 0x01
     c30:	eb 81       	ldd	r30, Y+3	; 0x03
     c32:	fc 81       	ldd	r31, Y+4	; 0x04
     c34:	e5 5f       	subi	r30, 0xF5	; 245
     c36:	fe 4f       	sbci	r31, 0xFE	; 254
     c38:	80 81       	ld	r24, Z
     c3a:	91 81       	ldd	r25, Z+1	; 0x01
     c3c:	52 dd       	rcall	.-1372   	; 0x6e2 <Kernel_Create_Task>
     c3e:	eb 81       	ldd	r30, Y+3	; 0x03
     c40:	fc 81       	ldd	r31, Y+4	; 0x04
     c42:	e2 5f       	subi	r30, 0xF2	; 242
     c44:	fe 4f       	sbci	r31, 0xFE	; 254
     c46:	91 83       	std	Z+1, r25	; 0x01
     c48:	80 83       	st	Z, r24
     c4a:	a1 cf       	rjmp	.-190    	; 0xb8e <OS_Start+0x9a>
     c4c:	eb 81       	ldd	r30, Y+3	; 0x03
     c4e:	fc 81       	ldd	r31, Y+4	; 0x04
     c50:	ec 5f       	subi	r30, 0xFC	; 252
     c52:	fe 4f       	sbci	r31, 0xFE	; 254
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	80 83       	st	Z, r24
     c58:	4d e1       	ldi	r20, 0x1D	; 29
     c5a:	52 e0       	ldi	r21, 0x02	; 2
     c5c:	63 ea       	ldi	r22, 0xA3	; 163
     c5e:	76 e1       	ldi	r23, 0x16	; 22
     c60:	8b e2       	ldi	r24, 0x2B	; 43
     c62:	92 e0       	ldi	r25, 0x02	; 2
     c64:	b1 d5       	rcall	.+2914   	; 0x17c8 <enqueueRQ>
     c66:	f6 dd       	rcall	.-1044   	; 0x854 <Dispatch>
     c68:	92 cf       	rjmp	.-220    	; 0xb8e <OS_Start+0x9a>
     c6a:	eb 81       	ldd	r30, Y+3	; 0x03
     c6c:	fc 81       	ldd	r31, Y+4	; 0x04
     c6e:	ec 5f       	subi	r30, 0xFC	; 252
     c70:	fe 4f       	sbci	r31, 0xFE	; 254
     c72:	83 e0       	ldi	r24, 0x03	; 3
     c74:	80 83       	st	Z, r24
     c76:	4b e1       	ldi	r20, 0x1B	; 27
     c78:	52 e0       	ldi	r21, 0x02	; 2
     c7a:	63 e8       	ldi	r22, 0x83	; 131
     c7c:	76 e1       	ldi	r23, 0x16	; 22
     c7e:	8b e2       	ldi	r24, 0x2B	; 43
     c80:	92 e0       	ldi	r25, 0x02	; 2
     c82:	31 d5       	rcall	.+2658   	; 0x16e6 <enqueueSQ>
     c84:	e7 dd       	rcall	.-1074   	; 0x854 <Dispatch>
     c86:	83 cf       	rjmp	.-250    	; 0xb8e <OS_Start+0x9a>
     c88:	ab 81       	ldd	r26, Y+3	; 0x03
     c8a:	bc 81       	ldd	r27, Y+4	; 0x04
     c8c:	2d 91       	ld	r18, X+
     c8e:	3c 91       	ld	r19, X
     c90:	11 97       	sbiw	r26, 0x01	; 1
     c92:	fd 01       	movw	r30, r26
     c94:	e4 5e       	subi	r30, 0xE4	; 228
     c96:	fe 4f       	sbci	r31, 0xFE	; 254
     c98:	80 81       	ld	r24, Z
     c9a:	91 81       	ldd	r25, Z+1	; 0x01
     c9c:	28 17       	cp	r18, r24
     c9e:	39 07       	cpc	r19, r25
     ca0:	51 f0       	breq	.+20     	; 0xcb6 <OS_Start+0x1c2>
     ca2:	80 81       	ld	r24, Z
     ca4:	91 81       	ldd	r25, Z+1	; 0x01
     ca6:	ed e8       	ldi	r30, 0x8D	; 141
     ca8:	f2 e0       	ldi	r31, 0x02	; 2
     caa:	20 81       	ld	r18, Z
     cac:	31 81       	ldd	r19, Z+1	; 0x01
     cae:	28 17       	cp	r18, r24
     cb0:	39 07       	cpc	r19, r25
     cb2:	41 f4       	brne	.+16     	; 0xcc4 <OS_Start+0x1d0>
     cb4:	ad c2       	rjmp	.+1370   	; 0x1210 <OS_Start+0x71c>
     cb6:	eb 81       	ldd	r30, Y+3	; 0x03
     cb8:	fc 81       	ldd	r31, Y+4	; 0x04
     cba:	e6 5e       	subi	r30, 0xE6	; 230
     cbc:	fe 4f       	sbci	r31, 0xFE	; 254
     cbe:	91 82       	std	Z+1, r9	; 0x01
     cc0:	80 82       	st	Z, r8
     cc2:	1a c0       	rjmp	.+52     	; 0xcf8 <OS_Start+0x204>
     cc4:	eb ea       	ldi	r30, 0xAB	; 171
     cc6:	f3 e0       	ldi	r31, 0x03	; 3
     cc8:	c4 01       	movw	r24, r8
     cca:	ab 81       	ldd	r26, Y+3	; 0x03
     ccc:	bc 81       	ldd	r27, Y+4	; 0x04
     cce:	a4 5e       	subi	r26, 0xE4	; 228
     cd0:	be 4f       	sbci	r27, 0xFE	; 254
     cd2:	6b 81       	ldd	r22, Y+3	; 0x03
     cd4:	7c 81       	ldd	r23, Y+4	; 0x04
     cd6:	2d 91       	ld	r18, X+
     cd8:	3c 91       	ld	r19, X
     cda:	11 97       	sbiw	r26, 0x01	; 1
     cdc:	40 81       	ld	r20, Z
     cde:	51 81       	ldd	r21, Z+1	; 0x01
     ce0:	42 17       	cp	r20, r18
     ce2:	53 07       	cpc	r21, r19
     ce4:	09 f4       	brne	.+2      	; 0xce8 <OS_Start+0x1f4>
     ce6:	97 c2       	rjmp	.+1326   	; 0x1216 <OS_Start+0x722>
     ce8:	01 96       	adiw	r24, 0x01	; 1
     cea:	e2 5e       	subi	r30, 0xE2	; 226
     cec:	fe 4f       	sbci	r31, 0xFE	; 254
     cee:	80 31       	cpi	r24, 0x10	; 16
     cf0:	91 05       	cpc	r25, r1
     cf2:	89 f7       	brne	.-30     	; 0xcd6 <OS_Start+0x1e2>
     cf4:	7c 83       	std	Y+4, r23	; 0x04
     cf6:	6b 83       	std	Y+3, r22	; 0x03
     cf8:	eb 81       	ldd	r30, Y+3	; 0x03
     cfa:	fc 81       	ldd	r31, Y+4	; 0x04
     cfc:	e6 5e       	subi	r30, 0xE6	; 230
     cfe:	fe 4f       	sbci	r31, 0xFE	; 254
     d00:	80 81       	ld	r24, Z
     d02:	91 81       	ldd	r25, Z+1	; 0x01
     d04:	89 2b       	or	r24, r25
     d06:	09 f4       	brne	.+2      	; 0xd0a <OS_Start+0x216>
     d08:	42 cf       	rjmp	.-380    	; 0xb8e <OS_Start+0x9a>
     d0a:	eb 81       	ldd	r30, Y+3	; 0x03
     d0c:	fc 81       	ldd	r31, Y+4	; 0x04
     d0e:	ec 5f       	subi	r30, 0xFC	; 252
     d10:	fe 4f       	sbci	r31, 0xFE	; 254
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	80 83       	st	Z, r24
     d16:	4d e1       	ldi	r20, 0x1D	; 29
     d18:	52 e0       	ldi	r21, 0x02	; 2
     d1a:	63 ea       	ldi	r22, 0xA3	; 163
     d1c:	76 e1       	ldi	r23, 0x16	; 22
     d1e:	8b e2       	ldi	r24, 0x2B	; 43
     d20:	92 e0       	ldi	r25, 0x02	; 2
     d22:	52 d5       	rcall	.+2724   	; 0x17c8 <enqueueRQ>
     d24:	97 dd       	rcall	.-1234   	; 0x854 <Dispatch>
     d26:	33 cf       	rjmp	.-410    	; 0xb8e <OS_Start+0x9a>
     d28:	eb ea       	ldi	r30, 0xAB	; 171
     d2a:	f3 e0       	ldi	r31, 0x03	; 3
     d2c:	c4 01       	movw	r24, r8
     d2e:	ab 81       	ldd	r26, Y+3	; 0x03
     d30:	bc 81       	ldd	r27, Y+4	; 0x04
     d32:	a4 5e       	subi	r26, 0xE4	; 228
     d34:	be 4f       	sbci	r27, 0xFE	; 254
     d36:	6b 81       	ldd	r22, Y+3	; 0x03
     d38:	7c 81       	ldd	r23, Y+4	; 0x04
     d3a:	2d 91       	ld	r18, X+
     d3c:	3c 91       	ld	r19, X
     d3e:	11 97       	sbiw	r26, 0x01	; 1
     d40:	40 81       	ld	r20, Z
     d42:	51 81       	ldd	r21, Z+1	; 0x01
     d44:	42 17       	cp	r20, r18
     d46:	53 07       	cpc	r21, r19
     d48:	09 f4       	brne	.+2      	; 0xd4c <OS_Start+0x258>
     d4a:	76 c2       	rjmp	.+1260   	; 0x1238 <OS_Start+0x744>
     d4c:	01 96       	adiw	r24, 0x01	; 1
     d4e:	e2 5e       	subi	r30, 0xE2	; 226
     d50:	fe 4f       	sbci	r31, 0xFE	; 254
     d52:	80 31       	cpi	r24, 0x10	; 16
     d54:	91 05       	cpc	r25, r1
     d56:	89 f7       	brne	.-30     	; 0xd3a <OS_Start+0x246>
     d58:	1a cf       	rjmp	.-460    	; 0xb8e <OS_Start+0x9a>
     d5a:	8a 9d       	mul	r24, r10
     d5c:	90 01       	movw	r18, r0
     d5e:	8b 9d       	mul	r24, r11
     d60:	30 0d       	add	r19, r0
     d62:	9a 9d       	mul	r25, r10
     d64:	30 0d       	add	r19, r0
     d66:	11 24       	eor	r1, r1
     d68:	c9 01       	movw	r24, r18
     d6a:	83 57       	subi	r24, 0x73	; 115
     d6c:	9d 4f       	sbci	r25, 0xFD	; 253
     d6e:	fc 01       	movw	r30, r24
     d70:	e6 5e       	subi	r30, 0xE6	; 230
     d72:	fe 4f       	sbci	r31, 0xFE	; 254
     d74:	11 82       	std	Z+1, r1	; 0x01
     d76:	10 82       	st	Z, r1
     d78:	eb 81       	ldd	r30, Y+3	; 0x03
     d7a:	fc 81       	ldd	r31, Y+4	; 0x04
     d7c:	e9 5f       	subi	r30, 0xF9	; 249
     d7e:	fe 4f       	sbci	r31, 0xFE	; 254
     d80:	20 81       	ld	r18, Z
     d82:	31 81       	ldd	r19, Z+1	; 0x01
     d84:	fc 01       	movw	r30, r24
     d86:	e9 5f       	subi	r30, 0xF9	; 249
     d88:	fe 4f       	sbci	r31, 0xFE	; 254
     d8a:	80 81       	ld	r24, Z
     d8c:	91 81       	ldd	r25, Z+1	; 0x01
     d8e:	82 17       	cp	r24, r18
     d90:	93 07       	cpc	r25, r19
     d92:	08 f0       	brcs	.+2      	; 0xd96 <OS_Start+0x2a2>
     d94:	fc ce       	rjmp	.-520    	; 0xb8e <OS_Start+0x9a>
     d96:	eb 81       	ldd	r30, Y+3	; 0x03
     d98:	fc 81       	ldd	r31, Y+4	; 0x04
     d9a:	ec 5f       	subi	r30, 0xFC	; 252
     d9c:	fe 4f       	sbci	r31, 0xFE	; 254
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	80 83       	st	Z, r24
     da2:	4d e1       	ldi	r20, 0x1D	; 29
     da4:	52 e0       	ldi	r21, 0x02	; 2
     da6:	63 ea       	ldi	r22, 0xA3	; 163
     da8:	76 e1       	ldi	r23, 0x16	; 22
     daa:	8b e2       	ldi	r24, 0x2B	; 43
     dac:	92 e0       	ldi	r25, 0x02	; 2
     dae:	0c d5       	rcall	.+2584   	; 0x17c8 <enqueueRQ>
     db0:	51 dd       	rcall	.-1374   	; 0x854 <Dispatch>
     db2:	ed ce       	rjmp	.-550    	; 0xb8e <OS_Start+0x9a>
     db4:	eb 81       	ldd	r30, Y+3	; 0x03
     db6:	fc 81       	ldd	r31, Y+4	; 0x04
     db8:	e9 5f       	subi	r30, 0xF9	; 249
     dba:	fe 4f       	sbci	r31, 0xFE	; 254
     dbc:	11 82       	std	Z+1, r1	; 0x01
     dbe:	10 82       	st	Z, r1
     dc0:	eb 81       	ldd	r30, Y+3	; 0x03
     dc2:	fc 81       	ldd	r31, Y+4	; 0x04
     dc4:	eb 5f       	subi	r30, 0xFB	; 251
     dc6:	fe 4f       	sbci	r31, 0xFE	; 254
     dc8:	11 82       	std	Z+1, r1	; 0x01
     dca:	10 82       	st	Z, r1
     dcc:	eb 81       	ldd	r30, Y+3	; 0x03
     dce:	fc 81       	ldd	r31, Y+4	; 0x04
     dd0:	ec 5f       	subi	r30, 0xFC	; 252
     dd2:	fe 4f       	sbci	r31, 0xFE	; 254
     dd4:	86 e0       	ldi	r24, 0x06	; 6
     dd6:	80 83       	st	Z, r24
     dd8:	dc 82       	std	Y+4, r13	; 0x04
     dda:	cb 82       	std	Y+3, r12	; 0x03
     ddc:	e0 91 2b 02 	lds	r30, 0x022B
     de0:	f0 91 2c 02 	lds	r31, 0x022C
     de4:	80 81       	ld	r24, Z
     de6:	91 81       	ldd	r25, Z+1	; 0x01
     de8:	ab 81       	ldd	r26, Y+3	; 0x03
     dea:	bc 81       	ldd	r27, Y+4	; 0x04
     dec:	13 96       	adiw	r26, 0x03	; 3
     dee:	2d 91       	ld	r18, X+
     df0:	3c 91       	ld	r19, X
     df2:	14 97       	sbiw	r26, 0x04	; 4
     df4:	28 17       	cp	r18, r24
     df6:	39 07       	cpc	r19, r25
     df8:	39 f4       	brne	.+14     	; 0xe08 <OS_Start+0x314>
     dfa:	8d 91       	ld	r24, X+
     dfc:	9c 91       	ld	r25, X
     dfe:	ec 5e       	subi	r30, 0xEC	; 236
     e00:	fe 4f       	sbci	r31, 0xFE	; 254
     e02:	91 83       	std	Z+1, r25	; 0x01
     e04:	80 83       	st	Z, r24
     e06:	57 dd       	rcall	.-1362   	; 0x8b6 <Kernel_Unlock_Mutex>
     e08:	eb 81       	ldd	r30, Y+3	; 0x03
     e0a:	fc 81       	ldd	r31, Y+4	; 0x04
     e0c:	37 96       	adiw	r30, 0x07	; 7
     e0e:	fc 83       	std	Y+4, r31	; 0x04
     e10:	eb 83       	std	Y+3, r30	; 0x03
     e12:	e0 17       	cp	r30, r16
     e14:	f1 07       	cpc	r31, r17
     e16:	11 f7       	brne	.-60     	; 0xddc <OS_Start+0x2e8>
     e18:	e0 91 2b 02 	lds	r30, 0x022B
     e1c:	f0 91 2c 02 	lds	r31, 0x022C
     e20:	df 01       	movw	r26, r30
     e22:	ac 5f       	subi	r26, 0xFC	; 252
     e24:	be 4f       	sbci	r27, 0xFE	; 254
     e26:	1c 92       	st	X, r1
     e28:	52 96       	adiw	r26, 0x12	; 18
     e2a:	11 96       	adiw	r26, 0x01	; 1
     e2c:	3c 92       	st	X, r3
     e2e:	2e 92       	st	-X, r2
     e30:	1f 97       	sbiw	r26, 0x0f	; 15
     e32:	11 96       	adiw	r26, 0x01	; 1
     e34:	7c 92       	st	X, r7
     e36:	6e 92       	st	-X, r6
     e38:	12 97       	sbiw	r26, 0x02	; 2
     e3a:	11 96       	adiw	r26, 0x01	; 1
     e3c:	7c 92       	st	X, r7
     e3e:	6e 92       	st	-X, r6
     e40:	11 82       	std	Z+1, r1	; 0x01
     e42:	10 82       	st	Z, r1
     e44:	80 91 27 02 	lds	r24, 0x0227
     e48:	90 91 28 02 	lds	r25, 0x0228
     e4c:	01 97       	sbiw	r24, 0x01	; 1
     e4e:	90 93 28 02 	sts	0x0228, r25
     e52:	80 93 27 02 	sts	0x0227, r24
     e56:	fe dc       	rcall	.-1540   	; 0x854 <Dispatch>
     e58:	9a ce       	rjmp	.-716    	; 0xb8e <OS_Start+0x9a>
     e5a:	80 91 23 02 	lds	r24, 0x0223
     e5e:	90 91 24 02 	lds	r25, 0x0224
     e62:	08 97       	sbiw	r24, 0x08	; 8
     e64:	41 f1       	breq	.+80     	; 0xeb6 <OS_Start+0x3c2>
     e66:	d6 01       	movw	r26, r12
     e68:	12 96       	adiw	r26, 0x02	; 2
     e6a:	8c 91       	ld	r24, X
     e6c:	88 23       	and	r24, r24
     e6e:	89 f0       	breq	.+34     	; 0xe92 <OS_Start+0x39e>
     e70:	ee e5       	ldi	r30, 0x5E	; 94
     e72:	f2 e0       	ldi	r31, 0x02	; 2
     e74:	94 01       	movw	r18, r8
     e76:	4b 81       	ldd	r20, Y+3	; 0x03
     e78:	5c 81       	ldd	r21, Y+4	; 0x04
     e7a:	80 81       	ld	r24, Z
     e7c:	88 23       	and	r24, r24
     e7e:	61 f0       	breq	.+24     	; 0xe98 <OS_Start+0x3a4>
     e80:	2f 5f       	subi	r18, 0xFF	; 255
     e82:	3f 4f       	sbci	r19, 0xFF	; 255
     e84:	37 96       	adiw	r30, 0x07	; 7
     e86:	28 30       	cpi	r18, 0x08	; 8
     e88:	31 05       	cpc	r19, r1
     e8a:	b9 f7       	brne	.-18     	; 0xe7a <OS_Start+0x386>
     e8c:	5c 83       	std	Y+4, r21	; 0x04
     e8e:	4b 83       	std	Y+3, r20	; 0x03
     e90:	05 c0       	rjmp	.+10     	; 0xe9c <OS_Start+0x3a8>
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <OS_Start+0x3a8>
     e98:	5c 83       	std	Y+4, r21	; 0x04
     e9a:	4b 83       	std	Y+3, r20	; 0x03
     e9c:	c9 01       	movw	r24, r18
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	82 1b       	sub	r24, r18
     eac:	93 0b       	sbc	r25, r19
     eae:	8b 5a       	subi	r24, 0xAB	; 171
     eb0:	9d 4f       	sbci	r25, 0xFD	; 253
     eb2:	47 dc       	rcall	.-1906   	; 0x742 <Kernel_Init_Mutex_At>
     eb4:	2c 01       	movw	r4, r24
     eb6:	eb 81       	ldd	r30, Y+3	; 0x03
     eb8:	fc 81       	ldd	r31, Y+4	; 0x04
     eba:	e2 5f       	subi	r30, 0xF2	; 242
     ebc:	fe 4f       	sbci	r31, 0xFE	; 254
     ebe:	51 82       	std	Z+1, r5	; 0x01
     ec0:	40 82       	st	Z, r4
     ec2:	65 ce       	rjmp	.-822    	; 0xb8e <OS_Start+0x9a>
     ec4:	eb 81       	ldd	r30, Y+3	; 0x03
     ec6:	fc 81       	ldd	r31, Y+4	; 0x04
     ec8:	ec 5e       	subi	r30, 0xEC	; 236
     eca:	fe 4f       	sbci	r31, 0xFE	; 254
     ecc:	40 81       	ld	r20, Z
     ece:	51 81       	ldd	r21, Z+1	; 0x01
     ed0:	f6 01       	movw	r30, r12
     ed2:	80 81       	ld	r24, Z
     ed4:	91 81       	ldd	r25, Z+1	; 0x01
     ed6:	48 17       	cp	r20, r24
     ed8:	59 07       	cpc	r21, r25
     eda:	09 f4       	brne	.+2      	; 0xede <OS_Start+0x3ea>
     edc:	bf c1       	rjmp	.+894    	; 0x125c <OS_Start+0x768>
     ede:	c4 01       	movw	r24, r8
     ee0:	6b 81       	ldd	r22, Y+3	; 0x03
     ee2:	7c 81       	ldd	r23, Y+4	; 0x04
     ee4:	27 81       	ldd	r18, Z+7	; 0x07
     ee6:	30 85       	ldd	r19, Z+8	; 0x08
     ee8:	42 17       	cp	r20, r18
     eea:	53 07       	cpc	r21, r19
     eec:	09 f4       	brne	.+2      	; 0xef0 <OS_Start+0x3fc>
     eee:	b9 c1       	rjmp	.+882    	; 0x1262 <OS_Start+0x76e>
     ef0:	01 96       	adiw	r24, 0x01	; 1
     ef2:	37 96       	adiw	r30, 0x07	; 7
     ef4:	88 30       	cpi	r24, 0x08	; 8
     ef6:	91 05       	cpc	r25, r1
     ef8:	a9 f7       	brne	.-22     	; 0xee4 <OS_Start+0x3f0>
     efa:	49 ce       	rjmp	.-878    	; 0xb8e <OS_Start+0x9a>
     efc:	fc 01       	movw	r30, r24
     efe:	ee 0f       	add	r30, r30
     f00:	ff 1f       	adc	r31, r31
     f02:	ee 0f       	add	r30, r30
     f04:	ff 1f       	adc	r31, r31
     f06:	ee 0f       	add	r30, r30
     f08:	ff 1f       	adc	r31, r31
     f0a:	e8 1b       	sub	r30, r24
     f0c:	f9 0b       	sbc	r31, r25
     f0e:	eb 5a       	subi	r30, 0xAB	; 171
     f10:	fd 4f       	sbci	r31, 0xFD	; 253
     f12:	82 e0       	ldi	r24, 0x02	; 2
     f14:	82 83       	std	Z+2, r24	; 0x02
     f16:	ab 81       	ldd	r26, Y+3	; 0x03
     f18:	bc 81       	ldd	r27, Y+4	; 0x04
     f1a:	8d 91       	ld	r24, X+
     f1c:	9c 91       	ld	r25, X
     f1e:	94 83       	std	Z+4, r25	; 0x04
     f20:	83 83       	std	Z+3, r24	; 0x03
     f22:	85 81       	ldd	r24, Z+5	; 0x05
     f24:	96 81       	ldd	r25, Z+6	; 0x06
     f26:	01 96       	adiw	r24, 0x01	; 1
     f28:	96 83       	std	Z+6, r25	; 0x06
     f2a:	85 83       	std	Z+5, r24	; 0x05
     f2c:	30 ce       	rjmp	.-928    	; 0xb8e <OS_Start+0x9a>
     f2e:	fc 01       	movw	r30, r24
     f30:	ee 0f       	add	r30, r30
     f32:	ff 1f       	adc	r31, r31
     f34:	ee 0f       	add	r30, r30
     f36:	ff 1f       	adc	r31, r31
     f38:	ee 0f       	add	r30, r30
     f3a:	ff 1f       	adc	r31, r31
     f3c:	e8 1b       	sub	r30, r24
     f3e:	f9 0b       	sbc	r31, r25
     f40:	eb 5a       	subi	r30, 0xAB	; 171
     f42:	fd 4f       	sbci	r31, 0xFD	; 253
     f44:	23 81       	ldd	r18, Z+3	; 0x03
     f46:	34 81       	ldd	r19, Z+4	; 0x04
     f48:	eb 81       	ldd	r30, Y+3	; 0x03
     f4a:	fc 81       	ldd	r31, Y+4	; 0x04
     f4c:	40 81       	ld	r20, Z
     f4e:	51 81       	ldd	r21, Z+1	; 0x01
     f50:	24 17       	cp	r18, r20
     f52:	35 07       	cpc	r19, r21
     f54:	89 f4       	brne	.+34     	; 0xf78 <OS_Start+0x484>
     f56:	fc 01       	movw	r30, r24
     f58:	ee 0f       	add	r30, r30
     f5a:	ff 1f       	adc	r31, r31
     f5c:	ee 0f       	add	r30, r30
     f5e:	ff 1f       	adc	r31, r31
     f60:	ee 0f       	add	r30, r30
     f62:	ff 1f       	adc	r31, r31
     f64:	e8 1b       	sub	r30, r24
     f66:	f9 0b       	sbc	r31, r25
     f68:	eb 5a       	subi	r30, 0xAB	; 171
     f6a:	fd 4f       	sbci	r31, 0xFD	; 253
     f6c:	85 81       	ldd	r24, Z+5	; 0x05
     f6e:	96 81       	ldd	r25, Z+6	; 0x06
     f70:	01 96       	adiw	r24, 0x01	; 1
     f72:	96 83       	std	Z+6, r25	; 0x06
     f74:	85 83       	std	Z+5, r24	; 0x05
     f76:	0b ce       	rjmp	.-1002   	; 0xb8e <OS_Start+0x9a>
     f78:	ed e8       	ldi	r30, 0x8D	; 141
     f7a:	f2 e0       	ldi	r31, 0x02	; 2
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	6b 81       	ldd	r22, Y+3	; 0x03
     f82:	7c 81       	ldd	r23, Y+4	; 0x04
     f84:	40 81       	ld	r20, Z
     f86:	51 81       	ldd	r21, Z+1	; 0x01
     f88:	24 17       	cp	r18, r20
     f8a:	35 07       	cpc	r19, r21
     f8c:	19 f4       	brne	.+6      	; 0xf94 <OS_Start+0x4a0>
     f8e:	21 15       	cp	r18, r1
     f90:	31 05       	cpc	r19, r1
     f92:	31 f4       	brne	.+12     	; 0xfa0 <OS_Start+0x4ac>
     f94:	01 96       	adiw	r24, 0x01	; 1
     f96:	e2 5e       	subi	r30, 0xE2	; 226
     f98:	fe 4f       	sbci	r31, 0xFE	; 254
     f9a:	80 31       	cpi	r24, 0x10	; 16
     f9c:	91 05       	cpc	r25, r1
     f9e:	91 f7       	brne	.-28     	; 0xf84 <OS_Start+0x490>
     fa0:	7c 83       	std	Y+4, r23	; 0x04
     fa2:	6b 83       	std	Y+3, r22	; 0x03
     fa4:	fb 01       	movw	r30, r22
     fa6:	e9 5f       	subi	r30, 0xF9	; 249
     fa8:	fe 4f       	sbci	r31, 0xFE	; 254
     faa:	20 81       	ld	r18, Z
     fac:	31 81       	ldd	r19, Z+1	; 0x01
     fae:	8a 9d       	mul	r24, r10
     fb0:	f0 01       	movw	r30, r0
     fb2:	8b 9d       	mul	r24, r11
     fb4:	f0 0d       	add	r31, r0
     fb6:	9a 9d       	mul	r25, r10
     fb8:	f0 0d       	add	r31, r0
     fba:	11 24       	eor	r1, r1
     fbc:	ec 56       	subi	r30, 0x6C	; 108
     fbe:	fc 4f       	sbci	r31, 0xFC	; 252
     fc0:	40 81       	ld	r20, Z
     fc2:	51 81       	ldd	r21, Z+1	; 0x01
     fc4:	24 17       	cp	r18, r20
     fc6:	35 07       	cpc	r19, r21
     fc8:	80 f4       	brcc	.+32     	; 0xfea <OS_Start+0x4f6>
     fca:	fb 01       	movw	r30, r22
     fcc:	e9 5f       	subi	r30, 0xF9	; 249
     fce:	fe 4f       	sbci	r31, 0xFE	; 254
     fd0:	20 81       	ld	r18, Z
     fd2:	31 81       	ldd	r19, Z+1	; 0x01
     fd4:	8a 9d       	mul	r24, r10
     fd6:	f0 01       	movw	r30, r0
     fd8:	8b 9d       	mul	r24, r11
     fda:	f0 0d       	add	r31, r0
     fdc:	9a 9d       	mul	r25, r10
     fde:	f0 0d       	add	r31, r0
     fe0:	11 24       	eor	r1, r1
     fe2:	ec 56       	subi	r30, 0x6C	; 108
     fe4:	fc 4f       	sbci	r31, 0xFC	; 252
     fe6:	31 83       	std	Z+1, r19	; 0x01
     fe8:	20 83       	st	Z, r18
     fea:	eb 81       	ldd	r30, Y+3	; 0x03
     fec:	fc 81       	ldd	r31, Y+4	; 0x04
     fee:	ec 5f       	subi	r30, 0xFC	; 252
     ff0:	fe 4f       	sbci	r31, 0xFE	; 254
     ff2:	84 e0       	ldi	r24, 0x04	; 4
     ff4:	80 83       	st	Z, r24
     ff6:	49 e1       	ldi	r20, 0x19	; 25
     ff8:	52 e0       	ldi	r21, 0x02	; 2
     ffa:	65 ec       	ldi	r22, 0xC5	; 197
     ffc:	76 e1       	ldi	r23, 0x16	; 22
     ffe:	8b e2       	ldi	r24, 0x2B	; 43
    1000:	92 e0       	ldi	r25, 0x02	; 2
    1002:	41 d3       	rcall	.+1666   	; 0x1686 <enqueueWQ>
    1004:	27 dc       	rcall	.-1970   	; 0x854 <Dispatch>
    1006:	c3 cd       	rjmp	.-1146   	; 0xb8e <OS_Start+0x9a>
    1008:	56 dc       	rcall	.-1876   	; 0x8b6 <Kernel_Unlock_Mutex>
    100a:	c1 cd       	rjmp	.-1150   	; 0xb8e <OS_Start+0x9a>
    100c:	80 91 21 02 	lds	r24, 0x0221
    1010:	90 91 22 02 	lds	r25, 0x0222
    1014:	08 97       	sbiw	r24, 0x08	; 8
    1016:	31 f1       	breq	.+76     	; 0x1064 <OS_Start+0x570>
    1018:	d7 01       	movw	r26, r14
    101a:	12 96       	adiw	r26, 0x02	; 2
    101c:	8c 91       	ld	r24, X
    101e:	88 23       	and	r24, r24
    1020:	81 f0       	breq	.+32     	; 0x1042 <OS_Start+0x54e>
    1022:	e4 e3       	ldi	r30, 0x34	; 52
    1024:	f2 e0       	ldi	r31, 0x02	; 2
    1026:	c4 01       	movw	r24, r8
    1028:	4b 81       	ldd	r20, Y+3	; 0x03
    102a:	5c 81       	ldd	r21, Y+4	; 0x04
    102c:	20 81       	ld	r18, Z
    102e:	22 23       	and	r18, r18
    1030:	59 f0       	breq	.+22     	; 0x1048 <OS_Start+0x554>
    1032:	01 96       	adiw	r24, 0x01	; 1
    1034:	35 96       	adiw	r30, 0x05	; 5
    1036:	88 30       	cpi	r24, 0x08	; 8
    1038:	91 05       	cpc	r25, r1
    103a:	c1 f7       	brne	.-16     	; 0x102c <OS_Start+0x538>
    103c:	5c 83       	std	Y+4, r21	; 0x04
    103e:	4b 83       	std	Y+3, r20	; 0x03
    1040:	05 c0       	rjmp	.+10     	; 0x104c <OS_Start+0x558>
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	02 c0       	rjmp	.+4      	; 0x104c <OS_Start+0x558>
    1048:	5c 83       	std	Y+4, r21	; 0x04
    104a:	4b 83       	std	Y+3, r20	; 0x03
    104c:	9c 01       	movw	r18, r24
    104e:	22 0f       	add	r18, r18
    1050:	33 1f       	adc	r19, r19
    1052:	22 0f       	add	r18, r18
    1054:	33 1f       	adc	r19, r19
    1056:	82 0f       	add	r24, r18
    1058:	93 1f       	adc	r25, r19
    105a:	83 5d       	subi	r24, 0xD3	; 211
    105c:	9d 4f       	sbci	r25, 0xFD	; 253
    105e:	86 db       	rcall	.-2292   	; 0x76c <Kernel_Init_Event_At>
    1060:	9a 83       	std	Y+2, r25	; 0x02
    1062:	89 83       	std	Y+1, r24	; 0x01
    1064:	ab 81       	ldd	r26, Y+3	; 0x03
    1066:	bc 81       	ldd	r27, Y+4	; 0x04
    1068:	a2 5f       	subi	r26, 0xF2	; 242
    106a:	be 4f       	sbci	r27, 0xFE	; 254
    106c:	e9 81       	ldd	r30, Y+1	; 0x01
    106e:	fa 81       	ldd	r31, Y+2	; 0x02
    1070:	11 96       	adiw	r26, 0x01	; 1
    1072:	fc 93       	st	X, r31
    1074:	ee 93       	st	-X, r30
    1076:	8b cd       	rjmp	.-1258   	; 0xb8e <OS_Start+0x9a>
    1078:	eb 81       	ldd	r30, Y+3	; 0x03
    107a:	fc 81       	ldd	r31, Y+4	; 0x04
    107c:	e8 5e       	subi	r30, 0xE8	; 232
    107e:	fe 4f       	sbci	r31, 0xFE	; 254
    1080:	40 81       	ld	r20, Z
    1082:	51 81       	ldd	r21, Z+1	; 0x01
    1084:	d7 01       	movw	r26, r14
    1086:	8d 91       	ld	r24, X+
    1088:	9c 91       	ld	r25, X
    108a:	48 17       	cp	r20, r24
    108c:	59 07       	cpc	r21, r25
    108e:	09 f4       	brne	.+2      	; 0x1092 <OS_Start+0x59e>
    1090:	fa c0       	rjmp	.+500    	; 0x1286 <OS_Start+0x792>
    1092:	f7 01       	movw	r30, r14
    1094:	c4 01       	movw	r24, r8
    1096:	6b 81       	ldd	r22, Y+3	; 0x03
    1098:	7c 81       	ldd	r23, Y+4	; 0x04
    109a:	25 81       	ldd	r18, Z+5	; 0x05
    109c:	36 81       	ldd	r19, Z+6	; 0x06
    109e:	42 17       	cp	r20, r18
    10a0:	53 07       	cpc	r21, r19
    10a2:	09 f4       	brne	.+2      	; 0x10a6 <OS_Start+0x5b2>
    10a4:	f3 c0       	rjmp	.+486    	; 0x128c <OS_Start+0x798>
    10a6:	01 96       	adiw	r24, 0x01	; 1
    10a8:	35 96       	adiw	r30, 0x05	; 5
    10aa:	88 30       	cpi	r24, 0x08	; 8
    10ac:	91 05       	cpc	r25, r1
    10ae:	a9 f7       	brne	.-22     	; 0x109a <OS_Start+0x5a6>
    10b0:	3d c0       	rjmp	.+122    	; 0x112c <OS_Start+0x638>
    10b2:	fc 01       	movw	r30, r24
    10b4:	ee 0f       	add	r30, r30
    10b6:	ff 1f       	adc	r31, r31
    10b8:	ee 0f       	add	r30, r30
    10ba:	ff 1f       	adc	r31, r31
    10bc:	e8 0f       	add	r30, r24
    10be:	f9 1f       	adc	r31, r25
    10c0:	e3 5d       	subi	r30, 0xD3	; 211
    10c2:	fd 4f       	sbci	r31, 0xFD	; 253
    10c4:	22 81       	ldd	r18, Z+2	; 0x02
    10c6:	22 30       	cpi	r18, 0x02	; 2
    10c8:	69 f4       	brne	.+26     	; 0x10e4 <OS_Start+0x5f0>
    10ca:	fc 01       	movw	r30, r24
    10cc:	ee 0f       	add	r30, r30
    10ce:	ff 1f       	adc	r31, r31
    10d0:	ee 0f       	add	r30, r30
    10d2:	ff 1f       	adc	r31, r31
    10d4:	8e 0f       	add	r24, r30
    10d6:	9f 1f       	adc	r25, r31
    10d8:	fc 01       	movw	r30, r24
    10da:	e3 5d       	subi	r30, 0xD3	; 211
    10dc:	fd 4f       	sbci	r31, 0xFD	; 253
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	82 83       	std	Z+2, r24	; 0x02
    10e2:	24 c0       	rjmp	.+72     	; 0x112c <OS_Start+0x638>
    10e4:	eb 81       	ldd	r30, Y+3	; 0x03
    10e6:	fc 81       	ldd	r31, Y+4	; 0x04
    10e8:	ea 5e       	subi	r30, 0xEA	; 234
    10ea:	fe 4f       	sbci	r31, 0xFE	; 254
    10ec:	51 83       	std	Z+1, r21	; 0x01
    10ee:	40 83       	st	Z, r20
    10f0:	eb 81       	ldd	r30, Y+3	; 0x03
    10f2:	fc 81       	ldd	r31, Y+4	; 0x04
    10f4:	20 81       	ld	r18, Z
    10f6:	31 81       	ldd	r19, Z+1	; 0x01
    10f8:	fc 01       	movw	r30, r24
    10fa:	ee 0f       	add	r30, r30
    10fc:	ff 1f       	adc	r31, r31
    10fe:	ee 0f       	add	r30, r30
    1100:	ff 1f       	adc	r31, r31
    1102:	8e 0f       	add	r24, r30
    1104:	9f 1f       	adc	r25, r31
    1106:	fc 01       	movw	r30, r24
    1108:	e3 5d       	subi	r30, 0xD3	; 211
    110a:	fd 4f       	sbci	r31, 0xFD	; 253
    110c:	34 83       	std	Z+4, r19	; 0x04
    110e:	23 83       	std	Z+3, r18	; 0x03
    1110:	eb 81       	ldd	r30, Y+3	; 0x03
    1112:	fc 81       	ldd	r31, Y+4	; 0x04
    1114:	ec 5f       	subi	r30, 0xFC	; 252
    1116:	fe 4f       	sbci	r31, 0xFE	; 254
    1118:	85 e0       	ldi	r24, 0x05	; 5
    111a:	80 83       	st	Z, r24
    111c:	4d e1       	ldi	r20, 0x1D	; 29
    111e:	52 e0       	ldi	r21, 0x02	; 2
    1120:	63 ea       	ldi	r22, 0xA3	; 163
    1122:	76 e1       	ldi	r23, 0x16	; 22
    1124:	8b e2       	ldi	r24, 0x2B	; 43
    1126:	92 e0       	ldi	r25, 0x02	; 2
    1128:	4f d3       	rcall	.+1694   	; 0x17c8 <enqueueRQ>
    112a:	94 db       	rcall	.-2264   	; 0x854 <Dispatch>
    112c:	e0 91 2b 02 	lds	r30, 0x022B
    1130:	f0 91 2c 02 	lds	r31, 0x022C
    1134:	80 81       	ld	r24, Z
    1136:	91 81       	ldd	r25, Z+1	; 0x01
    1138:	02 97       	sbiw	r24, 0x02	; 2
    113a:	20 f4       	brcc	.+8      	; 0x1144 <OS_Start+0x650>
    113c:	82 e0       	ldi	r24, 0x02	; 2
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	b8 d9       	rcall	.-3216   	; 0x4b2 <enable_LED>
    1142:	25 cd       	rjmp	.-1462   	; 0xb8e <OS_Start+0x9a>
    1144:	80 81       	ld	r24, Z
    1146:	91 81       	ldd	r25, Z+1	; 0x01
    1148:	02 97       	sbiw	r24, 0x02	; 2
    114a:	21 f4       	brne	.+8      	; 0x1154 <OS_Start+0x660>
    114c:	85 e0       	ldi	r24, 0x05	; 5
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	b0 d9       	rcall	.-3232   	; 0x4b2 <enable_LED>
    1152:	1d cd       	rjmp	.-1478   	; 0xb8e <OS_Start+0x9a>
    1154:	80 81       	ld	r24, Z
    1156:	91 81       	ldd	r25, Z+1	; 0x01
    1158:	03 97       	sbiw	r24, 0x03	; 3
    115a:	09 f0       	breq	.+2      	; 0x115e <OS_Start+0x66a>
    115c:	18 cd       	rjmp	.-1488   	; 0xb8e <OS_Start+0x9a>
    115e:	86 e0       	ldi	r24, 0x06	; 6
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	a7 d9       	rcall	.-3250   	; 0x4b2 <enable_LED>
    1164:	14 cd       	rjmp	.-1496   	; 0xb8e <OS_Start+0x9a>
    1166:	eb 81       	ldd	r30, Y+3	; 0x03
    1168:	fc 81       	ldd	r31, Y+4	; 0x04
    116a:	e8 5e       	subi	r30, 0xE8	; 232
    116c:	fe 4f       	sbci	r31, 0xFE	; 254
    116e:	40 81       	ld	r20, Z
    1170:	51 81       	ldd	r21, Z+1	; 0x01
    1172:	d7 01       	movw	r26, r14
    1174:	8d 91       	ld	r24, X+
    1176:	9c 91       	ld	r25, X
    1178:	48 17       	cp	r20, r24
    117a:	59 07       	cpc	r21, r25
    117c:	09 f4       	brne	.+2      	; 0x1180 <OS_Start+0x68c>
    117e:	97 c0       	rjmp	.+302    	; 0x12ae <OS_Start+0x7ba>
    1180:	f7 01       	movw	r30, r14
    1182:	c4 01       	movw	r24, r8
    1184:	6b 81       	ldd	r22, Y+3	; 0x03
    1186:	7c 81       	ldd	r23, Y+4	; 0x04
    1188:	25 81       	ldd	r18, Z+5	; 0x05
    118a:	36 81       	ldd	r19, Z+6	; 0x06
    118c:	42 17       	cp	r20, r18
    118e:	53 07       	cpc	r21, r19
    1190:	09 f4       	brne	.+2      	; 0x1194 <OS_Start+0x6a0>
    1192:	90 c0       	rjmp	.+288    	; 0x12b4 <OS_Start+0x7c0>
    1194:	01 96       	adiw	r24, 0x01	; 1
    1196:	35 96       	adiw	r30, 0x05	; 5
    1198:	88 30       	cpi	r24, 0x08	; 8
    119a:	91 05       	cpc	r25, r1
    119c:	a9 f7       	brne	.-22     	; 0x1188 <OS_Start+0x694>
    119e:	f7 cc       	rjmp	.-1554   	; 0xb8e <OS_Start+0x9a>
    11a0:	80 81       	ld	r24, Z
    11a2:	91 81       	ldd	r25, Z+1	; 0x01
    11a4:	48 17       	cp	r20, r24
    11a6:	59 07       	cpc	r21, r25
    11a8:	09 f4       	brne	.+2      	; 0x11ac <OS_Start+0x6b8>
    11aa:	97 c0       	rjmp	.+302    	; 0x12da <OS_Start+0x7e6>
    11ac:	2f 5f       	subi	r18, 0xFF	; 255
    11ae:	3f 4f       	sbci	r19, 0xFF	; 255
    11b0:	e2 5e       	subi	r30, 0xE2	; 226
    11b2:	fe 4f       	sbci	r31, 0xFE	; 254
    11b4:	20 31       	cpi	r18, 0x10	; 16
    11b6:	31 05       	cpc	r19, r1
    11b8:	99 f7       	brne	.-26     	; 0x11a0 <OS_Start+0x6ac>
    11ba:	cb 01       	movw	r24, r22
    11bc:	fb 01       	movw	r30, r22
    11be:	ee 0f       	add	r30, r30
    11c0:	ff 1f       	adc	r31, r31
    11c2:	ee 0f       	add	r30, r30
    11c4:	ff 1f       	adc	r31, r31
    11c6:	8e 0f       	add	r24, r30
    11c8:	9f 1f       	adc	r25, r31
    11ca:	fc 01       	movw	r30, r24
    11cc:	e3 5d       	subi	r30, 0xD3	; 211
    11ce:	fd 4f       	sbci	r31, 0xFD	; 253
    11d0:	82 e0       	ldi	r24, 0x02	; 2
    11d2:	82 83       	std	Z+2, r24	; 0x02
    11d4:	dc cc       	rjmp	.-1608   	; 0xb8e <OS_Start+0x9a>
    11d6:	2a 9d       	mul	r18, r10
    11d8:	f0 01       	movw	r30, r0
    11da:	2b 9d       	mul	r18, r11
    11dc:	f0 0d       	add	r31, r0
    11de:	3a 9d       	mul	r19, r10
    11e0:	f0 0d       	add	r31, r0
    11e2:	11 24       	eor	r1, r1
    11e4:	e9 55       	subi	r30, 0x59	; 89
    11e6:	fc 4f       	sbci	r31, 0xFC	; 252
    11e8:	80 81       	ld	r24, Z
    11ea:	91 81       	ldd	r25, Z+1	; 0x01
    11ec:	89 2b       	or	r24, r25
    11ee:	09 f0       	breq	.+2      	; 0x11f2 <OS_Start+0x6fe>
    11f0:	ce cc       	rjmp	.-1636   	; 0xb8e <OS_Start+0x9a>
    11f2:	eb 81       	ldd	r30, Y+3	; 0x03
    11f4:	fc 81       	ldd	r31, Y+4	; 0x04
    11f6:	ec 5f       	subi	r30, 0xFC	; 252
    11f8:	fe 4f       	sbci	r31, 0xFE	; 254
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	80 83       	st	Z, r24
    11fe:	4d e1       	ldi	r20, 0x1D	; 29
    1200:	52 e0       	ldi	r21, 0x02	; 2
    1202:	63 ea       	ldi	r22, 0xA3	; 163
    1204:	76 e1       	ldi	r23, 0x16	; 22
    1206:	8b e2       	ldi	r24, 0x2B	; 43
    1208:	92 e0       	ldi	r25, 0x02	; 2
    120a:	de d2       	rcall	.+1468   	; 0x17c8 <enqueueRQ>
    120c:	23 db       	rcall	.-2490   	; 0x854 <Dispatch>
    120e:	bf cc       	rjmp	.-1666   	; 0xb8e <OS_Start+0x9a>
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	02 c0       	rjmp	.+4      	; 0x121a <OS_Start+0x726>
    1216:	7c 83       	std	Y+4, r23	; 0x04
    1218:	6b 83       	std	Y+3, r22	; 0x03
    121a:	8a 9d       	mul	r24, r10
    121c:	f0 01       	movw	r30, r0
    121e:	8b 9d       	mul	r24, r11
    1220:	f0 0d       	add	r31, r0
    1222:	9a 9d       	mul	r25, r10
    1224:	f0 0d       	add	r31, r0
    1226:	11 24       	eor	r1, r1
    1228:	e9 55       	subi	r30, 0x59	; 89
    122a:	fc 4f       	sbci	r31, 0xFC	; 252
    122c:	91 82       	std	Z+1, r9	; 0x01
    122e:	80 82       	st	Z, r8
    1230:	63 cd       	rjmp	.-1338   	; 0xcf8 <OS_Start+0x204>
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	02 c0       	rjmp	.+4      	; 0x123c <OS_Start+0x748>
    1238:	7c 83       	std	Y+4, r23	; 0x04
    123a:	6b 83       	std	Y+3, r22	; 0x03
    123c:	8a 9d       	mul	r24, r10
    123e:	f0 01       	movw	r30, r0
    1240:	8b 9d       	mul	r24, r11
    1242:	f0 0d       	add	r31, r0
    1244:	9a 9d       	mul	r25, r10
    1246:	f0 0d       	add	r31, r0
    1248:	11 24       	eor	r1, r1
    124a:	e9 55       	subi	r30, 0x59	; 89
    124c:	fc 4f       	sbci	r31, 0xFC	; 252
    124e:	20 81       	ld	r18, Z
    1250:	31 81       	ldd	r19, Z+1	; 0x01
    1252:	21 30       	cpi	r18, 0x01	; 1
    1254:	31 05       	cpc	r19, r1
    1256:	09 f0       	breq	.+2      	; 0x125a <OS_Start+0x766>
    1258:	9a cc       	rjmp	.-1740   	; 0xb8e <OS_Start+0x9a>
    125a:	7f cd       	rjmp	.-1282   	; 0xd5a <OS_Start+0x266>
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <OS_Start+0x772>
    1262:	7c 83       	std	Y+4, r23	; 0x04
    1264:	6b 83       	std	Y+3, r22	; 0x03
    1266:	fc 01       	movw	r30, r24
    1268:	ee 0f       	add	r30, r30
    126a:	ff 1f       	adc	r31, r31
    126c:	ee 0f       	add	r30, r30
    126e:	ff 1f       	adc	r31, r31
    1270:	ee 0f       	add	r30, r30
    1272:	ff 1f       	adc	r31, r31
    1274:	e8 1b       	sub	r30, r24
    1276:	f9 0b       	sbc	r31, r25
    1278:	eb 5a       	subi	r30, 0xAB	; 171
    127a:	fd 4f       	sbci	r31, 0xFD	; 253
    127c:	22 81       	ldd	r18, Z+2	; 0x02
    127e:	21 30       	cpi	r18, 0x01	; 1
    1280:	09 f0       	breq	.+2      	; 0x1284 <OS_Start+0x790>
    1282:	55 ce       	rjmp	.-854    	; 0xf2e <OS_Start+0x43a>
    1284:	3b ce       	rjmp	.-906    	; 0xefc <OS_Start+0x408>
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <OS_Start+0x79c>
    128c:	7c 83       	std	Y+4, r23	; 0x04
    128e:	6b 83       	std	Y+3, r22	; 0x03
    1290:	fc 01       	movw	r30, r24
    1292:	ee 0f       	add	r30, r30
    1294:	ff 1f       	adc	r31, r31
    1296:	ee 0f       	add	r30, r30
    1298:	ff 1f       	adc	r31, r31
    129a:	e8 0f       	add	r30, r24
    129c:	f9 1f       	adc	r31, r25
    129e:	e3 5d       	subi	r30, 0xD3	; 211
    12a0:	fd 4f       	sbci	r31, 0xFD	; 253
    12a2:	23 81       	ldd	r18, Z+3	; 0x03
    12a4:	34 81       	ldd	r19, Z+4	; 0x04
    12a6:	23 2b       	or	r18, r19
    12a8:	09 f0       	breq	.+2      	; 0x12ac <OS_Start+0x7b8>
    12aa:	40 cf       	rjmp	.-384    	; 0x112c <OS_Start+0x638>
    12ac:	02 cf       	rjmp	.-508    	; 0x10b2 <OS_Start+0x5be>
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <OS_Start+0x7c4>
    12b4:	7c 83       	std	Y+4, r23	; 0x04
    12b6:	6b 83       	std	Y+3, r22	; 0x03
    12b8:	e3 ea       	ldi	r30, 0xA3	; 163
    12ba:	f3 e0       	ldi	r31, 0x03	; 3
    12bc:	20 81       	ld	r18, Z
    12be:	31 81       	ldd	r19, Z+1	; 0x01
    12c0:	42 17       	cp	r20, r18
    12c2:	53 07       	cpc	r21, r19
    12c4:	39 f0       	breq	.+14     	; 0x12d4 <OS_Start+0x7e0>
    12c6:	e1 ec       	ldi	r30, 0xC1	; 193
    12c8:	f4 e0       	ldi	r31, 0x04	; 4
    12ca:	94 01       	movw	r18, r8
    12cc:	ab 81       	ldd	r26, Y+3	; 0x03
    12ce:	bc 81       	ldd	r27, Y+4	; 0x04
    12d0:	bc 01       	movw	r22, r24
    12d2:	66 cf       	rjmp	.-308    	; 0x11a0 <OS_Start+0x6ac>
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	03 c0       	rjmp	.+6      	; 0x12e0 <OS_Start+0x7ec>
    12da:	bc 83       	std	Y+4, r27	; 0x04
    12dc:	ab 83       	std	Y+3, r26	; 0x03
    12de:	cb 01       	movw	r24, r22
    12e0:	2a 9d       	mul	r18, r10
    12e2:	a0 01       	movw	r20, r0
    12e4:	2b 9d       	mul	r18, r11
    12e6:	50 0d       	add	r21, r0
    12e8:	3a 9d       	mul	r19, r10
    12ea:	50 0d       	add	r21, r0
    12ec:	11 24       	eor	r1, r1
    12ee:	43 57       	subi	r20, 0x73	; 115
    12f0:	5d 4f       	sbci	r21, 0xFD	; 253
    12f2:	fa 01       	movw	r30, r20
    12f4:	ec 5f       	subi	r30, 0xFC	; 252
    12f6:	fe 4f       	sbci	r31, 0xFE	; 254
    12f8:	61 e0       	ldi	r22, 0x01	; 1
    12fa:	60 83       	st	Z, r22
    12fc:	72 96       	adiw	r30, 0x12	; 18
    12fe:	31 82       	std	Z+1, r3	; 0x01
    1300:	20 82       	st	Z, r2
    1302:	fc 01       	movw	r30, r24
    1304:	ee 0f       	add	r30, r30
    1306:	ff 1f       	adc	r31, r31
    1308:	ee 0f       	add	r30, r30
    130a:	ff 1f       	adc	r31, r31
    130c:	8e 0f       	add	r24, r30
    130e:	9f 1f       	adc	r25, r31
    1310:	fc 01       	movw	r30, r24
    1312:	e3 5d       	subi	r30, 0xD3	; 211
    1314:	fd 4f       	sbci	r31, 0xFD	; 253
    1316:	14 82       	std	Z+4, r1	; 0x04
    1318:	13 82       	std	Z+3, r1	; 0x03
    131a:	eb 81       	ldd	r30, Y+3	; 0x03
    131c:	fc 81       	ldd	r31, Y+4	; 0x04
    131e:	e9 5f       	subi	r30, 0xF9	; 249
    1320:	fe 4f       	sbci	r31, 0xFE	; 254
    1322:	80 81       	ld	r24, Z
    1324:	91 81       	ldd	r25, Z+1	; 0x01
    1326:	fa 01       	movw	r30, r20
    1328:	e9 5f       	subi	r30, 0xF9	; 249
    132a:	fe 4f       	sbci	r31, 0xFE	; 254
    132c:	40 81       	ld	r20, Z
    132e:	51 81       	ldd	r21, Z+1	; 0x01
    1330:	48 17       	cp	r20, r24
    1332:	59 07       	cpc	r21, r25
    1334:	08 f4       	brcc	.+2      	; 0x1338 <OS_Start+0x844>
    1336:	4f cf       	rjmp	.-354    	; 0x11d6 <OS_Start+0x6e2>
    1338:	2a cc       	rjmp	.-1964   	; 0xb8e <OS_Start+0x9a>
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	1f 91       	pop	r17
    1348:	0f 91       	pop	r16
    134a:	ff 90       	pop	r15
    134c:	ef 90       	pop	r14
    134e:	df 90       	pop	r13
    1350:	cf 90       	pop	r12
    1352:	bf 90       	pop	r11
    1354:	af 90       	pop	r10
    1356:	9f 90       	pop	r9
    1358:	8f 90       	pop	r8
    135a:	7f 90       	pop	r7
    135c:	6f 90       	pop	r6
    135e:	5f 90       	pop	r5
    1360:	4f 90       	pop	r4
    1362:	3f 90       	pop	r3
    1364:	2f 90       	pop	r2
    1366:	08 95       	ret

00001368 <Mutex_Init>:
    1368:	80 91 29 02 	lds	r24, 0x0229
    136c:	90 91 2a 02 	lds	r25, 0x022A
    1370:	89 2b       	or	r24, r25
    1372:	a1 f0       	breq	.+40     	; 0x139c <Mutex_Init+0x34>
    1374:	f8 94       	cli
    1376:	e0 91 2b 02 	lds	r30, 0x022B
    137a:	f0 91 2c 02 	lds	r31, 0x022C
    137e:	e3 5f       	subi	r30, 0xF3	; 243
    1380:	fe 4f       	sbci	r31, 0xFE	; 254
    1382:	87 e0       	ldi	r24, 0x07	; 7
    1384:	80 83       	st	Z, r24
    1386:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    138a:	e0 91 2b 02 	lds	r30, 0x022B
    138e:	f0 91 2c 02 	lds	r31, 0x022C
    1392:	e2 5f       	subi	r30, 0xF2	; 242
    1394:	fe 4f       	sbci	r31, 0xFE	; 254
    1396:	80 81       	ld	r24, Z
    1398:	91 81       	ldd	r25, Z+1	; 0x01
    139a:	08 95       	ret
    139c:	08 95       	ret

0000139e <Event_Init>:
    139e:	80 91 29 02 	lds	r24, 0x0229
    13a2:	90 91 2a 02 	lds	r25, 0x022A
    13a6:	89 2b       	or	r24, r25
    13a8:	a1 f0       	breq	.+40     	; 0x13d2 <Event_Init+0x34>
    13aa:	f8 94       	cli
    13ac:	e0 91 2b 02 	lds	r30, 0x022B
    13b0:	f0 91 2c 02 	lds	r31, 0x022C
    13b4:	e3 5f       	subi	r30, 0xF3	; 243
    13b6:	fe 4f       	sbci	r31, 0xFE	; 254
    13b8:	8a e0       	ldi	r24, 0x0A	; 10
    13ba:	80 83       	st	Z, r24
    13bc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    13c0:	e0 91 2b 02 	lds	r30, 0x022B
    13c4:	f0 91 2c 02 	lds	r31, 0x022C
    13c8:	e2 5f       	subi	r30, 0xF2	; 242
    13ca:	fe 4f       	sbci	r31, 0xFE	; 254
    13cc:	80 81       	ld	r24, Z
    13ce:	91 81       	ldd	r25, Z+1	; 0x01
    13d0:	08 95       	ret
    13d2:	08 95       	ret

000013d4 <Task_Create>:
    13d4:	20 91 29 02 	lds	r18, 0x0229
    13d8:	30 91 2a 02 	lds	r19, 0x022A
    13dc:	23 2b       	or	r18, r19
    13de:	f1 f0       	breq	.+60     	; 0x141c <Task_Create+0x48>
    13e0:	f8 94       	cli
    13e2:	20 91 2b 02 	lds	r18, 0x022B
    13e6:	30 91 2c 02 	lds	r19, 0x022C
    13ea:	f9 01       	movw	r30, r18
    13ec:	e3 5f       	subi	r30, 0xF3	; 243
    13ee:	fe 4f       	sbci	r31, 0xFE	; 254
    13f0:	a1 e0       	ldi	r26, 0x01	; 1
    13f2:	a0 83       	st	Z, r26
    13f4:	32 97       	sbiw	r30, 0x02	; 2
    13f6:	91 83       	std	Z+1, r25	; 0x01
    13f8:	80 83       	st	Z, r24
    13fa:	36 97       	sbiw	r30, 0x06	; 6
    13fc:	71 83       	std	Z+1, r23	; 0x01
    13fe:	60 83       	st	Z, r22
    1400:	34 96       	adiw	r30, 0x04	; 4
    1402:	51 83       	std	Z+1, r21	; 0x01
    1404:	40 83       	st	Z, r20
    1406:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    140a:	e0 91 2b 02 	lds	r30, 0x022B
    140e:	f0 91 2c 02 	lds	r31, 0x022C
    1412:	e2 5f       	subi	r30, 0xF2	; 242
    1414:	fe 4f       	sbci	r31, 0xFE	; 254
    1416:	80 81       	ld	r24, Z
    1418:	91 81       	ldd	r25, Z+1	; 0x01
    141a:	08 95       	ret
    141c:	62 c9       	rjmp	.-3388   	; 0x6e2 <Kernel_Create_Task>
    141e:	08 95       	ret

00001420 <Task_Next>:
    1420:	80 91 29 02 	lds	r24, 0x0229
    1424:	90 91 2a 02 	lds	r25, 0x022A
    1428:	89 2b       	or	r24, r25
    142a:	59 f0       	breq	.+22     	; 0x1442 <Task_Next+0x22>
    142c:	f8 94       	cli
    142e:	e0 91 2b 02 	lds	r30, 0x022B
    1432:	f0 91 2c 02 	lds	r31, 0x022C
    1436:	e3 5f       	subi	r30, 0xF3	; 243
    1438:	fe 4f       	sbci	r31, 0xFE	; 254
    143a:	82 e0       	ldi	r24, 0x02	; 2
    143c:	80 83       	st	Z, r24
    143e:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <Enter_Kernel>
    1442:	08 95       	ret

00001444 <setup>:
  * Setup pins and timers
  */
void setup() {
	/** For testing */
	/** pin 47 */
	init_LED_PORTL_pin2();
    1444:	24 d8       	rcall	.-4024   	; 0x48e <init_LED_PORTL_pin2>

	/** pin 43 */
	init_LED_PORTL_pin6();
    1446:	2f d8       	rcall	.-4002   	; 0x4a6 <init_LED_PORTL_pin6>

	/** pin 44 */
	init_LED_PORTL_pin5();
    1448:	28 d8       	rcall	.-4016   	; 0x49a <init_LED_PORTL_pin5>

	/** pin 49 */
	init_LED_PORTL_pin0();
    144a:	15 d8       	rcall	.-4054   	; 0x476 <init_LED_PORTL_pin0>

	/** pin 48 */
	init_LED_PORTL_pin1();
    144c:	1a d8       	rcall	.-4044   	; 0x482 <init_LED_PORTL_pin1>

	/** initialize Timer1 16 bit timer */
	Disable_Interrupt();
    144e:	f8 94       	cli

	/** Timer 1 */
	TCCR1A = 0;                 /** Set TCCR1A register to 0 */
    1450:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;                 /** Set TCCR1B register to 0 */
    1454:	e1 e8       	ldi	r30, 0x81	; 129
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	10 82       	st	Z, r1

	TCNT1 = 0;                  /** Initialize counter to 0 */
    145a:	10 92 85 00 	sts	0x0085, r1
    145e:	10 92 84 00 	sts	0x0084, r1

	OCR1A = 624;                /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
    1462:	80 e7       	ldi	r24, 0x70	; 112
    1464:	92 e0       	ldi	r25, 0x02	; 2
    1466:	90 93 89 00 	sts	0x0089, r25
    146a:	80 93 88 00 	sts	0x0088, r24

	TCCR1B |= (1 << WGM12);     /** Turns on CTC mode (TOP is now OCR1A) */
    146e:	80 81       	ld	r24, Z
    1470:	88 60       	ori	r24, 0x08	; 8
    1472:	80 83       	st	Z, r24

	TCCR1B |= (1 << CS12);      /** Prescaler 256 */
    1474:	80 81       	ld	r24, Z
    1476:	84 60       	ori	r24, 0x04	; 4
    1478:	80 83       	st	Z, r24

	TIMSK1 |= (1 << OCIE1A);    /** Enable timer compare interrupt */
    147a:	ef e6       	ldi	r30, 0x6F	; 111
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	82 60       	ori	r24, 0x02	; 2
    1482:	80 83       	st	Z, r24

	/** Timer 3 */
	TCCR3A = 0;                 /** Set TCCR0A register to 0 */
    1484:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0;                 /** Set TCCR0B register to 0 */
    1488:	e1 e9       	ldi	r30, 0x91	; 145
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	10 82       	st	Z, r1

	TCNT3 = 0;                  /** Initialize counter to 0 */
    148e:	10 92 95 00 	sts	0x0095, r1
    1492:	10 92 94 00 	sts	0x0094, r1

	OCR3A = 62499;              /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
    1496:	83 e2       	ldi	r24, 0x23	; 35
    1498:	94 ef       	ldi	r25, 0xF4	; 244
    149a:	90 93 99 00 	sts	0x0099, r25
    149e:	80 93 98 00 	sts	0x0098, r24

	TCCR3B |= (1 << WGM32);     /** Turns on CTC mode (TOP is now OCR1A) */
    14a2:	80 81       	ld	r24, Z
    14a4:	88 60       	ori	r24, 0x08	; 8
    14a6:	80 83       	st	Z, r24

	TCCR3B |= (1 << CS32);      /** Prescaler 1024 */
    14a8:	80 81       	ld	r24, Z
    14aa:	84 60       	ori	r24, 0x04	; 4
    14ac:	80 83       	st	Z, r24

	TIMSK3 = (1 << OCIE3A);
    14ae:	82 e0       	ldi	r24, 0x02	; 2
    14b0:	80 93 71 00 	sts	0x0071, r24

	Enable_Interrupt();
    14b4:	78 94       	sei
    14b6:	08 95       	ret

000014b8 <__vector_17>:
}

/**
  * ISR for timer1
  */
ISR(TIMER1_COMPA_vect) {
    14b8:	1f 92       	push	r1
    14ba:	0f 92       	push	r0
    14bc:	0f b6       	in	r0, 0x3f	; 63
    14be:	0f 92       	push	r0
    14c0:	11 24       	eor	r1, r1
    14c2:	0b b6       	in	r0, 0x3b	; 59
    14c4:	0f 92       	push	r0
    14c6:	df 92       	push	r13
    14c8:	ef 92       	push	r14
    14ca:	ff 92       	push	r15
    14cc:	0f 93       	push	r16
    14ce:	1f 93       	push	r17
    14d0:	2f 93       	push	r18
    14d2:	3f 93       	push	r19
    14d4:	4f 93       	push	r20
    14d6:	5f 93       	push	r21
    14d8:	6f 93       	push	r22
    14da:	7f 93       	push	r23
    14dc:	8f 93       	push	r24
    14de:	9f 93       	push	r25
    14e0:	af 93       	push	r26
    14e2:	bf 93       	push	r27
    14e4:	ef 93       	push	r30
    14e6:	ff 93       	push	r31
    14e8:	cf 93       	push	r28
    14ea:	df 93       	push	r29
    14ec:	00 d0       	rcall	.+0      	; 0x14ee <__vector_17+0x36>
    14ee:	1f 92       	push	r1
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
    14f4:	80 91 1b 02 	lds	r24, 0x021B
    14f8:	90 91 1c 02 	lds	r25, 0x021C
    14fc:	01 97       	sbiw	r24, 0x01	; 1
    14fe:	9a 83       	std	Y+2, r25	; 0x02
    1500:	89 83       	std	Y+1, r24	; 0x01
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	9a 81       	ldd	r25, Y+2	; 0x02
    1506:	99 23       	and	r25, r25
    1508:	0c f4       	brge	.+2      	; 0x150c <__vector_17+0x54>
    150a:	7c c0       	rjmp	.+248    	; 0x1604 <__vector_17+0x14c>
		if ((SleepQueue[i]->wakeTickOverflow <= tickOverflowCount) && (SleepQueue[i]->wakeTick <= (TCNT3/625))) {
    150c:	e9 81       	ldd	r30, Y+1	; 0x01
    150e:	fa 81       	ldd	r31, Y+2	; 0x02
    1510:	ee 0f       	add	r30, r30
    1512:	ff 1f       	adc	r31, r31
    1514:	ed 57       	subi	r30, 0x7D	; 125
    1516:	f9 4e       	sbci	r31, 0xE9	; 233
    1518:	01 90       	ld	r0, Z+
    151a:	f0 81       	ld	r31, Z
    151c:	e0 2d       	mov	r30, r0
    151e:	e0 5f       	subi	r30, 0xF0	; 240
    1520:	fe 4f       	sbci	r31, 0xFE	; 254
    1522:	20 81       	ld	r18, Z
    1524:	31 81       	ldd	r19, Z+1	; 0x01
    1526:	80 91 1f 02 	lds	r24, 0x021F
    152a:	90 91 20 02 	lds	r25, 0x0220
    152e:	82 17       	cp	r24, r18
    1530:	93 07       	cpc	r25, r19
    1532:	08 f4       	brcc	.+2      	; 0x1536 <__vector_17+0x7e>
    1534:	67 c0       	rjmp	.+206    	; 0x1604 <__vector_17+0x14c>
    1536:	e9 81       	ldd	r30, Y+1	; 0x01
    1538:	fa 81       	ldd	r31, Y+2	; 0x02
    153a:	ee 0f       	add	r30, r30
    153c:	ff 1f       	adc	r31, r31
    153e:	ed 57       	subi	r30, 0x7D	; 125
    1540:	f9 4e       	sbci	r31, 0xE9	; 233
    1542:	01 90       	ld	r0, Z+
    1544:	f0 81       	ld	r31, Z
    1546:	e0 2d       	mov	r30, r0
    1548:	ee 5e       	subi	r30, 0xEE	; 238
    154a:	fe 4f       	sbci	r31, 0xFE	; 254
    154c:	20 81       	ld	r18, Z
    154e:	31 81       	ldd	r19, Z+1	; 0x01
    1550:	80 91 94 00 	lds	r24, 0x0094
    1554:	90 91 95 00 	lds	r25, 0x0095
    1558:	61 e7       	ldi	r22, 0x71	; 113
    155a:	72 e0       	ldi	r23, 0x02	; 2
    155c:	03 d5       	rcall	.+2566   	; 0x1f64 <__udivmodhi4>
    155e:	62 17       	cp	r22, r18
    1560:	73 07       	cpc	r23, r19
    1562:	58 f5       	brcc	.+86     	; 0x15ba <__vector_17+0x102>
    1564:	4f c0       	rjmp	.+158    	; 0x1604 <__vector_17+0x14c>
    1566:	e9 81       	ldd	r30, Y+1	; 0x01
    1568:	fa 81       	ldd	r31, Y+2	; 0x02
    156a:	ee 0f       	add	r30, r30
    156c:	ff 1f       	adc	r31, r31
    156e:	ed 57       	subi	r30, 0x7D	; 125
    1570:	f9 4e       	sbci	r31, 0xE9	; 233
    1572:	01 90       	ld	r0, Z+
    1574:	f0 81       	ld	r31, Z
    1576:	e0 2d       	mov	r30, r0
    1578:	e0 5f       	subi	r30, 0xF0	; 240
    157a:	fe 4f       	sbci	r31, 0xFE	; 254
    157c:	20 81       	ld	r18, Z
    157e:	31 81       	ldd	r19, Z+1	; 0x01
    1580:	80 91 1f 02 	lds	r24, 0x021F
    1584:	90 91 20 02 	lds	r25, 0x0220
    1588:	82 17       	cp	r24, r18
    158a:	93 07       	cpc	r25, r19
    158c:	d8 f1       	brcs	.+118    	; 0x1604 <__vector_17+0x14c>
    158e:	e9 81       	ldd	r30, Y+1	; 0x01
    1590:	fa 81       	ldd	r31, Y+2	; 0x02
    1592:	ee 0f       	add	r30, r30
    1594:	ff 1f       	adc	r31, r31
    1596:	ed 57       	subi	r30, 0x7D	; 125
    1598:	f9 4e       	sbci	r31, 0xE9	; 233
    159a:	01 90       	ld	r0, Z+
    159c:	f0 81       	ld	r31, Z
    159e:	e0 2d       	mov	r30, r0
    15a0:	ee 5e       	subi	r30, 0xEE	; 238
    15a2:	fe 4f       	sbci	r31, 0xFE	; 254
    15a4:	20 81       	ld	r18, Z
    15a6:	31 81       	ldd	r19, Z+1	; 0x01
    15a8:	f7 01       	movw	r30, r14
    15aa:	80 81       	ld	r24, Z
    15ac:	91 81       	ldd	r25, Z+1	; 0x01
    15ae:	b8 01       	movw	r22, r16
    15b0:	d9 d4       	rcall	.+2482   	; 0x1f64 <__udivmodhi4>
    15b2:	62 17       	cp	r22, r18
    15b4:	73 07       	cpc	r23, r19
    15b6:	50 f4       	brcc	.+20     	; 0x15cc <__vector_17+0x114>
    15b8:	25 c0       	rjmp	.+74     	; 0x1604 <__vector_17+0x14c>
			volatile PD *p = dequeue(&SleepQueue, &SQCount);
			p->state = READY;
    15ba:	dd 24       	eor	r13, r13
    15bc:	d3 94       	inc	r13
ISR(TIMER1_COMPA_vect) {

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
		if ((SleepQueue[i]->wakeTickOverflow <= tickOverflowCount) && (SleepQueue[i]->wakeTick <= (TCNT3/625))) {
    15be:	0f 2e       	mov	r0, r31
    15c0:	f4 e9       	ldi	r31, 0x94	; 148
    15c2:	ef 2e       	mov	r14, r31
    15c4:	f1 2c       	mov	r15, r1
    15c6:	f0 2d       	mov	r31, r0
    15c8:	01 e7       	ldi	r16, 0x71	; 113
    15ca:	12 e0       	ldi	r17, 0x02	; 2
			volatile PD *p = dequeue(&SleepQueue, &SQCount);
    15cc:	6b e1       	ldi	r22, 0x1B	; 27
    15ce:	72 e0       	ldi	r23, 0x02	; 2
    15d0:	83 e8       	ldi	r24, 0x83	; 131
    15d2:	96 e1       	ldi	r25, 0x16	; 22
    15d4:	1c d2       	rcall	.+1080   	; 0x1a0e <dequeue>
    15d6:	9c 83       	std	Y+4, r25	; 0x04
    15d8:	8b 83       	std	Y+3, r24	; 0x03
			p->state = READY;
    15da:	fc 01       	movw	r30, r24
    15dc:	ec 5f       	subi	r30, 0xFC	; 252
    15de:	fe 4f       	sbci	r31, 0xFE	; 254
    15e0:	d0 82       	st	Z, r13
			enqueueRQ(&p, &ReadyQueue, &RQCount);
    15e2:	4d e1       	ldi	r20, 0x1D	; 29
    15e4:	52 e0       	ldi	r21, 0x02	; 2
    15e6:	63 ea       	ldi	r22, 0xA3	; 163
    15e8:	76 e1       	ldi	r23, 0x16	; 22
    15ea:	ce 01       	movw	r24, r28
    15ec:	03 96       	adiw	r24, 0x03	; 3
    15ee:	ec d0       	rcall	.+472    	; 0x17c8 <enqueueRQ>
  */
ISR(TIMER1_COMPA_vect) {

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	9a 81       	ldd	r25, Y+2	; 0x02
    15f4:	01 97       	sbiw	r24, 0x01	; 1
    15f6:	9a 83       	std	Y+2, r25	; 0x02
    15f8:	89 83       	std	Y+1, r24	; 0x01
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	9a 81       	ldd	r25, Y+2	; 0x02
    15fe:	99 23       	and	r25, r25
    1600:	0c f0       	brlt	.+2      	; 0x1604 <__vector_17+0x14c>
    1602:	b1 cf       	rjmp	.-158    	; 0x1566 <__vector_17+0xae>
		else {
			break;
		}
	}

	Task_Next();
    1604:	0d df       	rcall	.-486    	; 0x1420 <Task_Next>
}
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	0f 90       	pop	r0
    160c:	0f 90       	pop	r0
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	ff 91       	pop	r31
    1614:	ef 91       	pop	r30
    1616:	bf 91       	pop	r27
    1618:	af 91       	pop	r26
    161a:	9f 91       	pop	r25
    161c:	8f 91       	pop	r24
    161e:	7f 91       	pop	r23
    1620:	6f 91       	pop	r22
    1622:	5f 91       	pop	r21
    1624:	4f 91       	pop	r20
    1626:	3f 91       	pop	r19
    1628:	2f 91       	pop	r18
    162a:	1f 91       	pop	r17
    162c:	0f 91       	pop	r16
    162e:	ff 90       	pop	r15
    1630:	ef 90       	pop	r14
    1632:	df 90       	pop	r13
    1634:	0f 90       	pop	r0
    1636:	0b be       	out	0x3b, r0	; 59
    1638:	0f 90       	pop	r0
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	0f 90       	pop	r0
    163e:	1f 90       	pop	r1
    1640:	18 95       	reti

00001642 <__vector_32>:

/**
  * ISR for timer3
  */
ISR(TIMER3_COMPA_vect) {
    1642:	1f 92       	push	r1
    1644:	0f 92       	push	r0
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	0f 92       	push	r0
    164a:	11 24       	eor	r1, r1
    164c:	8f 93       	push	r24
    164e:	9f 93       	push	r25
	tickOverflowCount += 1;
    1650:	80 91 1f 02 	lds	r24, 0x021F
    1654:	90 91 20 02 	lds	r25, 0x0220
    1658:	01 96       	adiw	r24, 0x01	; 1
    165a:	90 93 20 02 	sts	0x0220, r25
    165e:	80 93 1f 02 	sts	0x021F, r24
}
    1662:	9f 91       	pop	r25
    1664:	8f 91       	pop	r24
    1666:	0f 90       	pop	r0
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	0f 90       	pop	r0
    166c:	1f 90       	pop	r1
    166e:	18 95       	reti

00001670 <main>:

/**
  * This function boots the OS and creates the first task: a_main
  */
void main() {
	setup();
    1670:	e9 de       	rcall	.-558    	; 0x1444 <setup>
	
	OS_Init();
    1672:	93 d8       	rcall	.-3802   	; 0x79a <OS_Init>
	Task_Create(a_main, 0, 1);
    1674:	41 e0       	ldi	r20, 0x01	; 1
    1676:	50 e0       	ldi	r21, 0x00	; 0
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	82 e8       	ldi	r24, 0x82	; 130
    167e:	92 e0       	ldi	r25, 0x02	; 2
    1680:	a9 de       	rcall	.-686    	; 0x13d4 <Task_Create>
	OS_Start();
    1682:	38 ca       	rjmp	.-2960   	; 0xaf4 <OS_Start>
    1684:	08 95       	ret

00001686 <enqueueWQ>:
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
}

void enqueueWQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    1686:	cf 93       	push	r28
    1688:	df 93       	push	r29
    168a:	ea 01       	movw	r28, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    168c:	28 81       	ld	r18, Y
    168e:	39 81       	ldd	r19, Y+1	; 0x01
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
}

void enqueueWQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    1690:	2f 30       	cpi	r18, 0x0F	; 15
    1692:	31 05       	cpc	r19, r1
    1694:	29 f1       	breq	.+74     	; 0x16e0 <enqueueWQ+0x5a>
        return;
    }

    int i = (*QCount) - 1;
    1696:	e8 81       	ld	r30, Y
    1698:	f9 81       	ldd	r31, Y+1	; 0x01
    169a:	9f 01       	movw	r18, r30
    169c:	21 50       	subi	r18, 0x01	; 1
    169e:	31 09       	sbc	r19, r1

    while(i >= 0) {
    16a0:	72 f0       	brmi	.+28     	; 0x16be <enqueueWQ+0x38>
    16a2:	ee 0f       	add	r30, r30
    16a4:	ff 1f       	adc	r31, r31
    16a6:	e6 0f       	add	r30, r22
    16a8:	f7 1f       	adc	r31, r23
    16aa:	db 01       	movw	r26, r22
        Queue[i+1] = Queue[i];
    16ac:	32 91       	ld	r19, -Z
    16ae:	22 91       	ld	r18, -Z
    16b0:	33 83       	std	Z+3, r19	; 0x03
    16b2:	22 83       	std	Z+2, r18	; 0x02
        return;
    }

    int i = (*QCount) - 1;

    while(i >= 0) {
    16b4:	ea 17       	cp	r30, r26
    16b6:	fb 07       	cpc	r31, r27
    16b8:	c9 f7       	brne	.-14     	; 0x16ac <enqueueWQ+0x26>
        Queue[i+1] = Queue[i];
        i--;
    16ba:	2f ef       	ldi	r18, 0xFF	; 255
    16bc:	3f ef       	ldi	r19, 0xFF	; 255
    }

    Queue[i+1] = *p;
    16be:	fc 01       	movw	r30, r24
    16c0:	80 81       	ld	r24, Z
    16c2:	91 81       	ldd	r25, Z+1	; 0x01
    16c4:	2f 5f       	subi	r18, 0xFF	; 255
    16c6:	3f 4f       	sbci	r19, 0xFF	; 255
    16c8:	22 0f       	add	r18, r18
    16ca:	33 1f       	adc	r19, r19
    16cc:	fb 01       	movw	r30, r22
    16ce:	e2 0f       	add	r30, r18
    16d0:	f3 1f       	adc	r31, r19
    16d2:	91 83       	std	Z+1, r25	; 0x01
    16d4:	80 83       	st	Z, r24
    (*QCount)++;
    16d6:	88 81       	ld	r24, Y
    16d8:	99 81       	ldd	r25, Y+1	; 0x01
    16da:	01 96       	adiw	r24, 0x01	; 1
    16dc:	99 83       	std	Y+1, r25	; 0x01
    16de:	88 83       	st	Y, r24
}
    16e0:	df 91       	pop	r29
    16e2:	cf 91       	pop	r28
    16e4:	08 95       	ret

000016e6 <enqueueSQ>:

void enqueueSQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    16e6:	cf 92       	push	r12
    16e8:	df 92       	push	r13
    16ea:	ef 92       	push	r14
    16ec:	ff 92       	push	r15
    16ee:	0f 93       	push	r16
    16f0:	1f 93       	push	r17
    16f2:	cf 93       	push	r28
    16f4:	df 93       	push	r29

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    16f6:	ea 01       	movw	r28, r20
    16f8:	28 81       	ld	r18, Y
    16fa:	39 81       	ldd	r19, Y+1	; 0x01
    Queue[i+1] = *p;
    (*QCount)++;
}

void enqueueSQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    16fc:	2f 30       	cpi	r18, 0x0F	; 15
    16fe:	31 05       	cpc	r19, r1
    1700:	09 f4       	brne	.+2      	; 0x1704 <enqueueSQ+0x1e>
    1702:	59 c0       	rjmp	.+178    	; 0x17b6 <enqueueSQ+0xd0>
        return;
    }

    int i = (*QCount) - 1;
    1704:	a8 81       	ld	r26, Y
    1706:	b9 81       	ldd	r27, Y+1	; 0x01
    1708:	11 97       	sbiw	r26, 0x01	; 1

    volatile PD *new = *p;
    170a:	fc 01       	movw	r30, r24
    170c:	c0 80       	ld	r12, Z
    170e:	d1 80       	ldd	r13, Z+1	; 0x01

    volatile PD *temp = Queue[i];
    1710:	fd 01       	movw	r30, r26
    1712:	ee 0f       	add	r30, r30
    1714:	ff 1f       	adc	r31, r31
    1716:	eb 01       	movw	r28, r22
    1718:	ce 0f       	add	r28, r30
    171a:	df 1f       	adc	r29, r31
    171c:	28 81       	ld	r18, Y
    171e:	39 81       	ldd	r19, Y+1	; 0x01

    while(i >= 0 && ((new->wakeTickOverflow > temp->wakeTickOverflow) || ((new->wakeTickOverflow >= temp->wakeTickOverflow) && (new->wakeTick >= temp->wakeTick)))) {
    1720:	bb 23       	and	r27, r27
    1722:	cc f1       	brlt	.+114    	; 0x1796 <enqueueSQ+0xb0>
    1724:	fe 01       	movw	r30, r28
    1726:	76 01       	movw	r14, r12
    1728:	c0 ef       	ldi	r28, 0xF0	; 240
    172a:	ec 1a       	sub	r14, r28
    172c:	ce ef       	ldi	r28, 0xFE	; 254
    172e:	fc 0a       	sbc	r15, r28
    1730:	de ee       	ldi	r29, 0xEE	; 238
    1732:	cd 1a       	sub	r12, r29
    1734:	de ef       	ldi	r29, 0xFE	; 254
    1736:	dd 0a       	sbc	r13, r29
    1738:	0b c0       	rjmp	.+22     	; 0x1750 <enqueueSQ+0x6a>
        Queue[i+1] = Queue[i];
    173a:	20 81       	ld	r18, Z
    173c:	31 81       	ldd	r19, Z+1	; 0x01
    173e:	33 83       	std	Z+3, r19	; 0x03
    1740:	22 83       	std	Z+2, r18	; 0x02
        i--;
    1742:	11 97       	sbiw	r26, 0x01	; 1
        temp = Queue[i];
    1744:	32 91       	ld	r19, -Z
    1746:	22 91       	ld	r18, -Z

    volatile PD *new = *p;

    volatile PD *temp = Queue[i];

    while(i >= 0 && ((new->wakeTickOverflow > temp->wakeTickOverflow) || ((new->wakeTickOverflow >= temp->wakeTickOverflow) && (new->wakeTick >= temp->wakeTick)))) {
    1748:	af 3f       	cpi	r26, 0xFF	; 255
    174a:	cf ef       	ldi	r28, 0xFF	; 255
    174c:	bc 07       	cpc	r27, r28
    174e:	19 f1       	breq	.+70     	; 0x1796 <enqueueSQ+0xb0>
    1750:	e7 01       	movw	r28, r14
    1752:	08 81       	ld	r16, Y
    1754:	19 81       	ldd	r17, Y+1	; 0x01
    1756:	e9 01       	movw	r28, r18
    1758:	c0 5f       	subi	r28, 0xF0	; 240
    175a:	de 4f       	sbci	r29, 0xFE	; 254
    175c:	09 90       	ld	r0, Y+
    175e:	d8 81       	ld	r29, Y
    1760:	c0 2d       	mov	r28, r0
    1762:	c0 17       	cp	r28, r16
    1764:	d1 07       	cpc	r29, r17
    1766:	48 f3       	brcs	.-46     	; 0x173a <enqueueSQ+0x54>
    1768:	e7 01       	movw	r28, r14
    176a:	08 81       	ld	r16, Y
    176c:	19 81       	ldd	r17, Y+1	; 0x01
    176e:	e9 01       	movw	r28, r18
    1770:	c0 5f       	subi	r28, 0xF0	; 240
    1772:	de 4f       	sbci	r29, 0xFE	; 254
    1774:	09 90       	ld	r0, Y+
    1776:	d8 81       	ld	r29, Y
    1778:	c0 2d       	mov	r28, r0
    177a:	0c 17       	cp	r16, r28
    177c:	1d 07       	cpc	r17, r29
    177e:	58 f0       	brcs	.+22     	; 0x1796 <enqueueSQ+0xb0>
    1780:	e6 01       	movw	r28, r12
    1782:	08 81       	ld	r16, Y
    1784:	19 81       	ldd	r17, Y+1	; 0x01
    1786:	2e 5e       	subi	r18, 0xEE	; 238
    1788:	3e 4f       	sbci	r19, 0xFE	; 254
    178a:	e9 01       	movw	r28, r18
    178c:	28 81       	ld	r18, Y
    178e:	39 81       	ldd	r19, Y+1	; 0x01
    1790:	02 17       	cp	r16, r18
    1792:	13 07       	cpc	r17, r19
    1794:	90 f6       	brcc	.-92     	; 0x173a <enqueueSQ+0x54>
        Queue[i+1] = Queue[i];
        i--;
        temp = Queue[i];
    }

    Queue[i+1] = *p;
    1796:	fc 01       	movw	r30, r24
    1798:	80 81       	ld	r24, Z
    179a:	91 81       	ldd	r25, Z+1	; 0x01
    179c:	11 96       	adiw	r26, 0x01	; 1
    179e:	aa 0f       	add	r26, r26
    17a0:	bb 1f       	adc	r27, r27
    17a2:	a6 0f       	add	r26, r22
    17a4:	b7 1f       	adc	r27, r23
    17a6:	8d 93       	st	X+, r24
    17a8:	9c 93       	st	X, r25
    (*QCount)++;
    17aa:	ea 01       	movw	r28, r20
    17ac:	88 81       	ld	r24, Y
    17ae:	99 81       	ldd	r25, Y+1	; 0x01
    17b0:	01 96       	adiw	r24, 0x01	; 1
    17b2:	99 83       	std	Y+1, r25	; 0x01
    17b4:	88 83       	st	Y, r24
}
    17b6:	df 91       	pop	r29
    17b8:	cf 91       	pop	r28
    17ba:	1f 91       	pop	r17
    17bc:	0f 91       	pop	r16
    17be:	ff 90       	pop	r15
    17c0:	ef 90       	pop	r14
    17c2:	df 90       	pop	r13
    17c4:	cf 90       	pop	r12
    17c6:	08 95       	ret

000017c8 <enqueueRQ>:

/*
 *  Insert into the queue sorted by priority
 */
void enqueueRQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    17c8:	cf 92       	push	r12
    17ca:	df 92       	push	r13
    17cc:	ef 92       	push	r14
    17ce:	ff 92       	push	r15
    17d0:	0f 93       	push	r16
    17d2:	1f 93       	push	r17
    17d4:	cf 93       	push	r28
    17d6:	df 93       	push	r29
    17d8:	6a 01       	movw	r12, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    17da:	ea 01       	movw	r28, r20
    17dc:	28 81       	ld	r18, Y
    17de:	39 81       	ldd	r19, Y+1	; 0x01

/*
 *  Insert into the queue sorted by priority
 */
void enqueueRQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    17e0:	2f 30       	cpi	r18, 0x0F	; 15
    17e2:	31 05       	cpc	r19, r1
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <enqueueRQ+0x20>
    17e6:	4a c0       	rjmp	.+148    	; 0x187c <enqueueRQ+0xb4>
        return;
    }

    int i = (*QCount) - 1;
    17e8:	28 81       	ld	r18, Y
    17ea:	39 81       	ldd	r19, Y+1	; 0x01
    17ec:	21 50       	subi	r18, 0x01	; 1
    17ee:	31 09       	sbc	r19, r1

    volatile PD *new = *p;
    17f0:	fc 01       	movw	r30, r24
    17f2:	00 81       	ld	r16, Z
    17f4:	11 81       	ldd	r17, Z+1	; 0x01

    volatile PD *temp = Queue[i];
    17f6:	f9 01       	movw	r30, r18
    17f8:	ee 0f       	add	r30, r30
    17fa:	ff 1f       	adc	r31, r31
    17fc:	db 01       	movw	r26, r22
    17fe:	ae 0f       	add	r26, r30
    1800:	bf 1f       	adc	r27, r31
    1802:	4d 91       	ld	r20, X+
    1804:	5c 91       	ld	r21, X

    while(i >= 0 && (new->inheritedPy >= temp->inheritedPy)) {
    1806:	33 23       	and	r19, r19
    1808:	3c f1       	brlt	.+78     	; 0x1858 <enqueueRQ+0x90>
    180a:	d8 01       	movw	r26, r16
    180c:	a9 5f       	subi	r26, 0xF9	; 249
    180e:	be 4f       	sbci	r27, 0xFE	; 254
    1810:	ed 90       	ld	r14, X+
    1812:	fc 90       	ld	r15, X
    1814:	da 01       	movw	r26, r20
    1816:	a9 5f       	subi	r26, 0xF9	; 249
    1818:	be 4f       	sbci	r27, 0xFE	; 254
    181a:	4d 91       	ld	r20, X+
    181c:	5c 91       	ld	r21, X
    181e:	e4 16       	cp	r14, r20
    1820:	f5 06       	cpc	r15, r21
    1822:	d0 f0       	brcs	.+52     	; 0x1858 <enqueueRQ+0x90>
    1824:	e6 0f       	add	r30, r22
    1826:	f7 1f       	adc	r31, r23
    1828:	09 5f       	subi	r16, 0xF9	; 249
    182a:	1e 4f       	sbci	r17, 0xFE	; 254
        Queue[i+1] = Queue[i];
    182c:	a0 81       	ld	r26, Z
    182e:	b1 81       	ldd	r27, Z+1	; 0x01
    1830:	b3 83       	std	Z+3, r27	; 0x03
    1832:	a2 83       	std	Z+2, r26	; 0x02
        i--;
    1834:	21 50       	subi	r18, 0x01	; 1
    1836:	31 09       	sbc	r19, r1
        temp = Queue[i];
    1838:	b2 91       	ld	r27, -Z
    183a:	a2 91       	ld	r26, -Z

    volatile PD *new = *p;

    volatile PD *temp = Queue[i];

    while(i >= 0 && (new->inheritedPy >= temp->inheritedPy)) {
    183c:	2f 3f       	cpi	r18, 0xFF	; 255
    183e:	4f ef       	ldi	r20, 0xFF	; 255
    1840:	34 07       	cpc	r19, r20
    1842:	51 f0       	breq	.+20     	; 0x1858 <enqueueRQ+0x90>
    1844:	e8 01       	movw	r28, r16
    1846:	e8 80       	ld	r14, Y
    1848:	f9 80       	ldd	r15, Y+1	; 0x01
    184a:	a9 5f       	subi	r26, 0xF9	; 249
    184c:	be 4f       	sbci	r27, 0xFE	; 254
    184e:	4d 91       	ld	r20, X+
    1850:	5c 91       	ld	r21, X
    1852:	e4 16       	cp	r14, r20
    1854:	f5 06       	cpc	r15, r21
    1856:	50 f7       	brcc	.-44     	; 0x182c <enqueueRQ+0x64>
        Queue[i+1] = Queue[i];
        i--;
        temp = Queue[i];
    }

    Queue[i+1] = *p;
    1858:	fc 01       	movw	r30, r24
    185a:	80 81       	ld	r24, Z
    185c:	91 81       	ldd	r25, Z+1	; 0x01
    185e:	2f 5f       	subi	r18, 0xFF	; 255
    1860:	3f 4f       	sbci	r19, 0xFF	; 255
    1862:	22 0f       	add	r18, r18
    1864:	33 1f       	adc	r19, r19
    1866:	fb 01       	movw	r30, r22
    1868:	e2 0f       	add	r30, r18
    186a:	f3 1f       	adc	r31, r19
    186c:	91 83       	std	Z+1, r25	; 0x01
    186e:	80 83       	st	Z, r24
    (*QCount)++;
    1870:	e6 01       	movw	r28, r12
    1872:	88 81       	ld	r24, Y
    1874:	99 81       	ldd	r25, Y+1	; 0x01
    1876:	01 96       	adiw	r24, 0x01	; 1
    1878:	99 83       	std	Y+1, r25	; 0x01
    187a:	88 83       	st	Y, r24
}
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	1f 91       	pop	r17
    1882:	0f 91       	pop	r16
    1884:	ff 90       	pop	r15
    1886:	ef 90       	pop	r14
    1888:	df 90       	pop	r13
    188a:	cf 90       	pop	r12
    188c:	08 95       	ret

0000188e <dequeueWQ>:

/*
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {
    188e:	0f 93       	push	r16
    1890:	1f 93       	push	r17
    1892:	cf 93       	push	r28
    1894:	df 93       	push	r29

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    1896:	eb 01       	movw	r28, r22
    1898:	28 81       	ld	r18, Y
    189a:	39 81       	ldd	r19, Y+1	; 0x01
/*
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {

    if(isEmpty(QCount)) {
    189c:	23 2b       	or	r18, r19
    189e:	09 f4       	brne	.+2      	; 0x18a2 <dequeueWQ+0x14>
    18a0:	54 c0       	rjmp	.+168    	; 0x194a <dequeueWQ+0xbc>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
    18a2:	28 81       	ld	r18, Y
    18a4:	39 81       	ldd	r19, Y+1	; 0x01
    18a6:	21 50       	subi	r18, 0x01	; 1
    18a8:	31 09       	sbc	r19, r1
    18aa:	0a f4       	brpl	.+2      	; 0x18ae <dequeueWQ+0x20>
    18ac:	51 c0       	rjmp	.+162    	; 0x1950 <dequeueWQ+0xc2>
        if(Queue[i]->m == m){
    18ae:	e9 01       	movw	r28, r18
    18b0:	cc 0f       	add	r28, r28
    18b2:	dd 1f       	adc	r29, r29
    18b4:	fc 01       	movw	r30, r24
    18b6:	ec 0f       	add	r30, r28
    18b8:	fd 1f       	adc	r31, r29
    18ba:	a0 81       	ld	r26, Z
    18bc:	b1 81       	ldd	r27, Z+1	; 0x01
    18be:	fd 01       	movw	r30, r26
    18c0:	ec 5e       	subi	r30, 0xEC	; 236
    18c2:	fe 4f       	sbci	r31, 0xFE	; 254
    18c4:	01 90       	ld	r0, Z+
    18c6:	f0 81       	ld	r31, Z
    18c8:	e0 2d       	mov	r30, r0
    18ca:	e4 17       	cp	r30, r20
    18cc:	f5 07       	cpc	r31, r21
    18ce:	81 f4       	brne	.+32     	; 0x18f0 <dequeueWQ+0x62>
    18d0:	0a c0       	rjmp	.+20     	; 0x18e6 <dequeueWQ+0x58>
    18d2:	ba 91       	ld	r27, -Y
    18d4:	aa 91       	ld	r26, -Y
    18d6:	fd 01       	movw	r30, r26
    18d8:	ec 5e       	subi	r30, 0xEC	; 236
    18da:	fe 4f       	sbci	r31, 0xFE	; 254
    18dc:	00 81       	ld	r16, Z
    18de:	11 81       	ldd	r17, Z+1	; 0x01
    18e0:	04 17       	cp	r16, r20
    18e2:	15 07       	cpc	r17, r21
    18e4:	39 f4       	brne	.+14     	; 0x18f4 <dequeueWQ+0x66>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
    18e6:	10 97       	sbiw	r26, 0x00	; 0
    18e8:	59 f4       	brne	.+22     	; 0x1900 <dequeueWQ+0x72>
            i++;
        }
        (*QCount)--;
    }

    return result;
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	32 c0       	rjmp	.+100    	; 0x1954 <dequeueWQ+0xc6>
    18f0:	c8 0f       	add	r28, r24
    18f2:	d9 1f       	adc	r29, r25
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
    18f4:	21 50       	subi	r18, 0x01	; 1
    18f6:	31 09       	sbc	r19, r1
    18f8:	60 f7       	brcc	.-40     	; 0x18d2 <dequeueWQ+0x44>
            i++;
        }
        (*QCount)--;
    }

    return result;
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	2a c0       	rjmp	.+84     	; 0x1954 <dequeueWQ+0xc6>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i<(*QCount)-1) {
    1900:	eb 01       	movw	r28, r22
    1902:	48 81       	ld	r20, Y
    1904:	59 81       	ldd	r21, Y+1	; 0x01
    1906:	41 50       	subi	r20, 0x01	; 1
    1908:	51 09       	sbc	r21, r1
    190a:	24 17       	cp	r18, r20
    190c:	35 07       	cpc	r19, r21
    190e:	a4 f4       	brge	.+40     	; 0x1938 <dequeueWQ+0xaa>
    1910:	a9 01       	movw	r20, r18
    1912:	44 0f       	add	r20, r20
    1914:	55 1f       	adc	r21, r21
    1916:	fc 01       	movw	r30, r24
    1918:	e4 0f       	add	r30, r20
    191a:	f5 1f       	adc	r31, r21
            Queue[i] = Queue[i+1];
    191c:	82 81       	ldd	r24, Z+2	; 0x02
    191e:	93 81       	ldd	r25, Z+3	; 0x03
    1920:	81 93       	st	Z+, r24
    1922:	91 93       	st	Z+, r25
            i++;
    1924:	2f 5f       	subi	r18, 0xFF	; 255
    1926:	3f 4f       	sbci	r19, 0xFF	; 255
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i<(*QCount)-1) {
    1928:	eb 01       	movw	r28, r22
    192a:	48 81       	ld	r20, Y
    192c:	59 81       	ldd	r21, Y+1	; 0x01
    192e:	41 50       	subi	r20, 0x01	; 1
    1930:	51 09       	sbc	r21, r1
    1932:	24 17       	cp	r18, r20
    1934:	35 07       	cpc	r19, r21
    1936:	94 f3       	brlt	.-28     	; 0x191c <dequeueWQ+0x8e>
            Queue[i] = Queue[i+1];
            i++;
        }
        (*QCount)--;
    1938:	fb 01       	movw	r30, r22
    193a:	80 81       	ld	r24, Z
    193c:	91 81       	ldd	r25, Z+1	; 0x01
    193e:	01 97       	sbiw	r24, 0x01	; 1
    1940:	91 83       	std	Z+1, r25	; 0x01
    1942:	80 83       	st	Z, r24

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
        if(Queue[i]->m == m){
            result = Queue[i];
    1944:	8a 2f       	mov	r24, r26
    1946:	9b 2f       	mov	r25, r27
    1948:	05 c0       	rjmp	.+10     	; 0x1954 <dequeueWQ+0xc6>
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {

    if(isEmpty(QCount)) {
        return NULL;
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <dequeueWQ+0xc6>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	90 e0       	ldi	r25, 0x00	; 0
}
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	08 95       	ret

0000195e <dequeueRQ>:

/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {
    195e:	cf 93       	push	r28
    1960:	df 93       	push	r29
    1962:	eb 01       	movw	r28, r22

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    1964:	28 81       	ld	r18, Y
    1966:	39 81       	ldd	r19, Y+1	; 0x01
/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
    1968:	23 2b       	or	r18, r19
    196a:	09 f4       	brne	.+2      	; 0x196e <dequeueRQ+0x10>
    196c:	48 c0       	rjmp	.+144    	; 0x19fe <dequeueRQ+0xa0>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
    196e:	e8 81       	ld	r30, Y
    1970:	f9 81       	ldd	r31, Y+1	; 0x01
    1972:	9f 01       	movw	r18, r30
    1974:	21 50       	subi	r18, 0x01	; 1
    1976:	31 09       	sbc	r19, r1
    1978:	0a f4       	brpl	.+2      	; 0x197c <dequeueRQ+0x1e>
    197a:	44 c0       	rjmp	.+136    	; 0x1a04 <dequeueRQ+0xa6>
    197c:	ee 0f       	add	r30, r30
    197e:	ff 1f       	adc	r31, r31
    1980:	e8 0f       	add	r30, r24
    1982:	f9 1f       	adc	r31, r25
        if((Queue[i]->suspended == 0) && (Queue[i]->state == READY)) {
    1984:	52 91       	ld	r21, -Z
    1986:	42 91       	ld	r20, -Z
    1988:	da 01       	movw	r26, r20
    198a:	a6 5e       	subi	r26, 0xE6	; 230
    198c:	be 4f       	sbci	r27, 0xFE	; 254
    198e:	6d 91       	ld	r22, X+
    1990:	7c 91       	ld	r23, X
    1992:	11 97       	sbiw	r26, 0x01	; 1
    1994:	67 2b       	or	r22, r23
    1996:	59 f4       	brne	.+22     	; 0x19ae <dequeueRQ+0x50>
    1998:	56 97       	sbiw	r26, 0x16	; 22
    199a:	6c 91       	ld	r22, X
    199c:	61 30       	cpi	r22, 0x01	; 1
    199e:	39 f4       	brne	.+14     	; 0x19ae <dequeueRQ+0x50>
    19a0:	f9 01       	movw	r30, r18
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
    19a2:	41 15       	cp	r20, r1
    19a4:	51 05       	cpc	r21, r1
    19a6:	49 f4       	brne	.+18     	; 0x19ba <dequeueRQ+0x5c>
            i++;
        }
        (*QCount)--;
    }

    return result;
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	2d c0       	rjmp	.+90     	; 0x1a08 <dequeueRQ+0xaa>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
    19ae:	21 50       	subi	r18, 0x01	; 1
    19b0:	31 09       	sbc	r19, r1
    19b2:	40 f7       	brcc	.-48     	; 0x1984 <dequeueRQ+0x26>
            i++;
        }
        (*QCount)--;
    }

    return result;
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	27 c0       	rjmp	.+78     	; 0x1a08 <dequeueRQ+0xaa>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i < (*QCount)-1) {
    19ba:	68 81       	ld	r22, Y
    19bc:	79 81       	ldd	r23, Y+1	; 0x01
    19be:	61 50       	subi	r22, 0x01	; 1
    19c0:	71 09       	sbc	r23, r1
    19c2:	26 17       	cp	r18, r22
    19c4:	37 07       	cpc	r19, r23
    19c6:	9c f4       	brge	.+38     	; 0x19ee <dequeueRQ+0x90>
    19c8:	ee 0f       	add	r30, r30
    19ca:	ff 1f       	adc	r31, r31
    19cc:	dc 01       	movw	r26, r24
    19ce:	ae 0f       	add	r26, r30
    19d0:	bf 1f       	adc	r27, r31
            Queue[i] = Queue[i+1];
    19d2:	12 96       	adiw	r26, 0x02	; 2
    19d4:	8d 91       	ld	r24, X+
    19d6:	9c 91       	ld	r25, X
    19d8:	13 97       	sbiw	r26, 0x03	; 3
    19da:	8d 93       	st	X+, r24
    19dc:	9d 93       	st	X+, r25
            i++;
    19de:	2f 5f       	subi	r18, 0xFF	; 255
    19e0:	3f 4f       	sbci	r19, 0xFF	; 255
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i < (*QCount)-1) {
    19e2:	e8 81       	ld	r30, Y
    19e4:	f9 81       	ldd	r31, Y+1	; 0x01
    19e6:	31 97       	sbiw	r30, 0x01	; 1
    19e8:	2e 17       	cp	r18, r30
    19ea:	3f 07       	cpc	r19, r31
    19ec:	94 f3       	brlt	.-28     	; 0x19d2 <dequeueRQ+0x74>
            Queue[i] = Queue[i+1];
            i++;
        }
        (*QCount)--;
    19ee:	88 81       	ld	r24, Y
    19f0:	99 81       	ldd	r25, Y+1	; 0x01
    19f2:	01 97       	sbiw	r24, 0x01	; 1
    19f4:	99 83       	std	Y+1, r25	; 0x01
    19f6:	88 83       	st	Y, r24
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
        if((Queue[i]->suspended == 0) && (Queue[i]->state == READY)) {
    19f8:	84 2f       	mov	r24, r20
    19fa:	95 2f       	mov	r25, r21
    19fc:	05 c0       	rjmp	.+10     	; 0x1a08 <dequeueRQ+0xaa>
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
        return NULL;
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <dequeueRQ+0xaa>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	90 e0       	ldi	r25, 0x00	; 0
}
    1a08:	df 91       	pop	r29
    1a0a:	cf 91       	pop	r28
    1a0c:	08 95       	ret

00001a0e <dequeue>:

/*
 *  Return the first element of the queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
    1a0e:	db 01       	movw	r26, r22

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    1a10:	2d 91       	ld	r18, X+
    1a12:	3c 91       	ld	r19, X
    1a14:	11 97       	sbiw	r26, 0x01	; 1
/*
 *  Return the first element of the queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
    1a16:	23 2b       	or	r18, r19
    1a18:	a9 f0       	breq	.+42     	; 0x1a44 <dequeue+0x36>
        return;
    }

    volatile PD *result = (Queue[(*QCount)-1]);
    1a1a:	2d 91       	ld	r18, X+
    1a1c:	3c 91       	ld	r19, X
    1a1e:	11 97       	sbiw	r26, 0x01	; 1
    1a20:	f9 01       	movw	r30, r18
    1a22:	e1 50       	subi	r30, 0x01	; 1
    1a24:	f0 48       	sbci	r31, 0x80	; 128
    1a26:	ee 0f       	add	r30, r30
    1a28:	ff 1f       	adc	r31, r31
    1a2a:	e8 0f       	add	r30, r24
    1a2c:	f9 1f       	adc	r31, r25
    1a2e:	80 81       	ld	r24, Z
    1a30:	91 81       	ldd	r25, Z+1	; 0x01
    (*QCount)--;
    1a32:	2d 91       	ld	r18, X+
    1a34:	3c 91       	ld	r19, X
    1a36:	11 97       	sbiw	r26, 0x01	; 1
    1a38:	21 50       	subi	r18, 0x01	; 1
    1a3a:	31 09       	sbc	r19, r1
    1a3c:	11 96       	adiw	r26, 0x01	; 1
    1a3e:	3c 93       	st	X, r19
    1a40:	2e 93       	st	-X, r18
    1a42:	08 95       	ret

    return result;
}
    1a44:	08 95       	ret

00001a46 <_get_status>:
	}

	wh = (16 - weight) * 100;
	wh /= 16;
	return wh;
}
    1a46:	2d 98       	cbi	0x05, 5	; 5
    1a48:	8f ef       	ldi	r24, 0xFF	; 255
    1a4a:	04 d1       	rcall	.+520    	; 0x1c54 <SPI_Write_Byte>
    1a4c:	2d 9a       	sbi	0x05, 5	; 5
    1a4e:	08 95       	ret

00001a50 <_set_register>:
    1a50:	0f 93       	push	r16
    1a52:	1f 93       	push	r17
    1a54:	cf 93       	push	r28
    1a56:	df 93       	push	r29
    1a58:	8b 01       	movw	r16, r22
    1a5a:	d4 2f       	mov	r29, r20
    1a5c:	2d 98       	cbi	0x05, 5	; 5
    1a5e:	8f 71       	andi	r24, 0x1F	; 31
    1a60:	80 62       	ori	r24, 0x20	; 32
    1a62:	f8 d0       	rcall	.+496    	; 0x1c54 <SPI_Write_Byte>
    1a64:	c8 2f       	mov	r28, r24
    1a66:	6d 2f       	mov	r22, r29
    1a68:	c8 01       	movw	r24, r16
    1a6a:	e1 d0       	rcall	.+450    	; 0x1c2e <SPI_Write_Block>
    1a6c:	2d 9a       	sbi	0x05, 5	; 5
    1a6e:	8c 2f       	mov	r24, r28
    1a70:	df 91       	pop	r29
    1a72:	cf 91       	pop	r28
    1a74:	1f 91       	pop	r17
    1a76:	0f 91       	pop	r16
    1a78:	08 95       	ret

00001a7a <_get_register>:
    1a7a:	0f 93       	push	r16
    1a7c:	1f 93       	push	r17
    1a7e:	cf 93       	push	r28
    1a80:	df 93       	push	r29
    1a82:	eb 01       	movw	r28, r22
    1a84:	14 2f       	mov	r17, r20
    1a86:	44 23       	and	r20, r20
    1a88:	69 f0       	breq	.+26     	; 0x1aa4 <_get_register+0x2a>
    1a8a:	fb 01       	movw	r30, r22
    1a8c:	2f ef       	ldi	r18, 0xFF	; 255
    1a8e:	24 0f       	add	r18, r20
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	2f 5f       	subi	r18, 0xFF	; 255
    1a94:	3f 4f       	sbci	r19, 0xFF	; 255
    1a96:	26 0f       	add	r18, r22
    1a98:	37 1f       	adc	r19, r23
    1a9a:	9f ef       	ldi	r25, 0xFF	; 255
    1a9c:	91 93       	st	Z+, r25
    1a9e:	e2 17       	cp	r30, r18
    1aa0:	f3 07       	cpc	r31, r19
    1aa2:	e1 f7       	brne	.-8      	; 0x1a9c <_get_register+0x22>
    1aa4:	2d 98       	cbi	0x05, 5	; 5
    1aa6:	8f 71       	andi	r24, 0x1F	; 31
    1aa8:	d5 d0       	rcall	.+426    	; 0x1c54 <SPI_Write_Byte>
    1aaa:	08 2f       	mov	r16, r24
    1aac:	41 2f       	mov	r20, r17
    1aae:	be 01       	movw	r22, r28
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	a5 d0       	rcall	.+330    	; 0x1c00 <SPI_ReadWrite_Block>
    1ab6:	2d 9a       	sbi	0x05, 5	; 5
    1ab8:	80 2f       	mov	r24, r16
    1aba:	df 91       	pop	r29
    1abc:	cf 91       	pop	r28
    1abe:	1f 91       	pop	r17
    1ac0:	0f 91       	pop	r16
    1ac2:	08 95       	ret

00001ac4 <_set_rx_mode>:
    1ac4:	cf 93       	push	r28
    1ac6:	df 93       	push	r29
    1ac8:	1f 92       	push	r1
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	41 e0       	ldi	r20, 0x01	; 1
    1ad0:	be 01       	movw	r22, r28
    1ad2:	6f 5f       	subi	r22, 0xFF	; 255
    1ad4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	d0 df       	rcall	.-96     	; 0x1a7a <_get_register>
    1ada:	89 81       	ldd	r24, Y+1	; 0x01
    1adc:	80 fd       	sbrc	r24, 0
    1ade:	10 c0       	rjmp	.+32     	; 0x1b00 <_set_rx_mode+0x3c>
    1ae0:	81 60       	ori	r24, 0x01	; 1
    1ae2:	89 83       	std	Y+1, r24	; 0x01
    1ae4:	41 e0       	ldi	r20, 0x01	; 1
    1ae6:	be 01       	movw	r22, r28
    1ae8:	6f 5f       	subi	r22, 0xFF	; 255
    1aea:	7f 4f       	sbci	r23, 0xFF	; 255
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	b0 df       	rcall	.-160    	; 0x1a50 <_set_register>
    1af0:	85 e1       	ldi	r24, 0x15	; 21
    1af2:	8a 95       	dec	r24
    1af4:	f1 f7       	brne	.-4      	; 0x1af2 <_set_rx_mode+0x2e>
    1af6:	00 c0       	rjmp	.+0      	; 0x1af8 <_set_rx_mode+0x34>
    1af8:	85 e1       	ldi	r24, 0x15	; 21
    1afa:	8a 95       	dec	r24
    1afc:	f1 f7       	brne	.-4      	; 0x1afa <_set_rx_mode+0x36>
    1afe:	00 c0       	rjmp	.+0      	; 0x1b00 <_set_rx_mode+0x3c>
    1b00:	0f 90       	pop	r0
    1b02:	df 91       	pop	r29
    1b04:	cf 91       	pop	r28
    1b06:	08 95       	ret

00001b08 <_reset_pipe0_address>:
    1b08:	80 91 09 02 	lds	r24, 0x0209
    1b0c:	88 23       	and	r24, r24
    1b0e:	29 f0       	breq	.+10     	; 0x1b1a <_reset_pipe0_address+0x12>
    1b10:	45 e0       	ldi	r20, 0x05	; 5
    1b12:	64 e0       	ldi	r22, 0x04	; 4
    1b14:	72 e0       	ldi	r23, 0x02	; 2
    1b16:	8a e0       	ldi	r24, 0x0A	; 10
    1b18:	9b cf       	rjmp	.-202    	; 0x1a50 <_set_register>
    1b1a:	08 95       	ret

00001b1c <__vector_1>:

// Interrupt handler
ISR(INT0_vect)
{
    1b1c:	1f 92       	push	r1
    1b1e:	0f 92       	push	r0
    1b20:	0f b6       	in	r0, 0x3f	; 63
    1b22:	0f 92       	push	r0
    1b24:	11 24       	eor	r1, r1
    1b26:	0b b6       	in	r0, 0x3b	; 59
    1b28:	0f 92       	push	r0
    1b2a:	2f 93       	push	r18
    1b2c:	3f 93       	push	r19
    1b2e:	4f 93       	push	r20
    1b30:	5f 93       	push	r21
    1b32:	6f 93       	push	r22
    1b34:	7f 93       	push	r23
    1b36:	8f 93       	push	r24
    1b38:	9f 93       	push	r25
    1b3a:	af 93       	push	r26
    1b3c:	bf 93       	push	r27
    1b3e:	ef 93       	push	r30
    1b40:	ff 93       	push	r31
    1b42:	cf 93       	push	r28
    1b44:	df 93       	push	r29
    1b46:	1f 92       	push	r1
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;
    uint8_t pipe_number;

    RADIO_CE_LOW();
    1b4c:	2c 98       	cbi	0x05, 4	; 5

    status = _get_status();
    1b4e:	7b df       	rcall	.-266    	; 0x1a46 <_get_status>
    1b50:	89 83       	std	Y+1, r24	; 0x01

    if (status & _BV(RX_DR)) {
    1b52:	86 ff       	sbrs	r24, 6
    1b54:	04 c0       	rjmp	.+8      	; 0x1b5e <__vector_1+0x42>
        pipe_number =  (status & 0xE) >> 1;
    1b56:	8e 70       	andi	r24, 0x0E	; 14
        radio_rxhandler(pipe_number);
    1b58:	86 95       	lsr	r24
    1b5a:	0e 94 66 01 	call	0x2cc	; 0x2cc <radio_rxhandler>
    }

    // We can get the TX_DS or the MAX_RT interrupt, but not both.
    if (status & _BV(TX_DS)) {
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
    1b60:	85 ff       	sbrs	r24, 5
    1b62:	1b c0       	rjmp	.+54     	; 0x1b9a <__vector_1+0x7e>
    	// if there's nothing left to transmit, switch back to receive mode.
        transmit_lock = 0;
    1b64:	10 92 e7 16 	sts	0x16E7, r1
        _reset_pipe0_address();
    1b68:	cf df       	rcall	.-98     	; 0x1b08 <_reset_pipe0_address>
        _set_rx_mode();
    1b6a:	ac df       	rcall	.-168    	; 0x1ac4 <_set_rx_mode>

        // indicate in the history that a packet was transmitted successfully by appending a 1.
        tx_history <<= 1;
    1b6c:	80 91 02 02 	lds	r24, 0x0202
    1b70:	90 91 03 02 	lds	r25, 0x0203
    1b74:	88 0f       	add	r24, r24
    1b76:	99 1f       	adc	r25, r25
    1b78:	90 93 03 02 	sts	0x0203, r25
    1b7c:	80 93 02 02 	sts	0x0202, r24
        tx_history |= 1;
    1b80:	80 91 02 02 	lds	r24, 0x0202
    1b84:	90 91 03 02 	lds	r25, 0x0203
    1b88:	81 60       	ori	r24, 0x01	; 1
    1b8a:	90 93 03 02 	sts	0x0203, r25
    1b8e:	80 93 02 02 	sts	0x0202, r24
        tx_last_status = RADIO_TX_SUCCESS;
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	80 93 01 02 	sts	0x0201, r24
    1b98:	14 c0       	rjmp	.+40     	; 0x1bc2 <__vector_1+0xa6>
    } else if (status & _BV(MAX_RT)) {
    1b9a:	84 ff       	sbrs	r24, 4
    1b9c:	12 c0       	rjmp	.+36     	; 0x1bc2 <__vector_1+0xa6>
        // enable SPI
       // RADIO_CSN_LOW();


        // flush the failed packet (it stays in the Tx FIFO; we could try to resend it by setting CE high)
        SPI_Write_Byte( FLUSH_TX );
    1b9e:	81 ee       	ldi	r24, 0xE1	; 225
    1ba0:	59 d0       	rcall	.+178    	; 0x1c54 <SPI_Write_Byte>

        // resynch SPI
        //RADIO_CSN_HIGH();

        transmit_lock = 0;
    1ba2:	10 92 e7 16 	sts	0x16E7, r1
        _reset_pipe0_address();
    1ba6:	b0 df       	rcall	.-160    	; 0x1b08 <_reset_pipe0_address>
        _set_rx_mode();
    1ba8:	8d df       	rcall	.-230    	; 0x1ac4 <_set_rx_mode>

        // indicate in the history that a packet was dropped by appending a 0.
        tx_history <<= 1;
    1baa:	80 91 02 02 	lds	r24, 0x0202
    1bae:	90 91 03 02 	lds	r25, 0x0203
    1bb2:	88 0f       	add	r24, r24
    1bb4:	99 1f       	adc	r25, r25
    1bb6:	90 93 03 02 	sts	0x0203, r25
    1bba:	80 93 02 02 	sts	0x0202, r24
        tx_last_status = RADIO_TX_MAX_RT;
    1bbe:	10 92 01 02 	sts	0x0201, r1
    }

    // clear the interrupt flags.
	status = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
    1bc2:	80 e7       	ldi	r24, 0x70	; 112
    1bc4:	89 83       	std	Y+1, r24	; 0x01
	_set_register(STATUS, &status, 1);
    1bc6:	41 e0       	ldi	r20, 0x01	; 1
    1bc8:	be 01       	movw	r22, r28
    1bca:	6f 5f       	subi	r22, 0xFF	; 255
    1bcc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bce:	87 e0       	ldi	r24, 0x07	; 7
    1bd0:	3f df       	rcall	.-386    	; 0x1a50 <_set_register>

    RADIO_CE_HIGH();
    1bd2:	2c 9a       	sbi	0x05, 4	; 5
}
    1bd4:	0f 90       	pop	r0
    1bd6:	df 91       	pop	r29
    1bd8:	cf 91       	pop	r28
    1bda:	ff 91       	pop	r31
    1bdc:	ef 91       	pop	r30
    1bde:	bf 91       	pop	r27
    1be0:	af 91       	pop	r26
    1be2:	9f 91       	pop	r25
    1be4:	8f 91       	pop	r24
    1be6:	7f 91       	pop	r23
    1be8:	6f 91       	pop	r22
    1bea:	5f 91       	pop	r21
    1bec:	4f 91       	pop	r20
    1bee:	3f 91       	pop	r19
    1bf0:	2f 91       	pop	r18
    1bf2:	0f 90       	pop	r0
    1bf4:	0b be       	out	0x3b, r0	; 59
    1bf6:	0f 90       	pop	r0
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	0f 90       	pop	r0
    1bfc:	1f 90       	pop	r1
    1bfe:	18 95       	reti

00001c00 <SPI_ReadWrite_Block>:
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1c00:	44 23       	and	r20, r20
    1c02:	a1 f0       	breq	.+40     	; 0x1c2c <SPI_ReadWrite_Block+0x2c>
    1c04:	fc 01       	movw	r30, r24
    1c06:	a6 2f       	mov	r26, r22
    1c08:	b7 2f       	mov	r27, r23
    1c0a:	41 50       	subi	r20, 0x01	; 1
    1c0c:	24 2f       	mov	r18, r20
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	2f 5f       	subi	r18, 0xFF	; 255
    1c12:	3f 4f       	sbci	r19, 0xFF	; 255
    1c14:	28 0f       	add	r18, r24
    1c16:	39 1f       	adc	r19, r25
          SPDR = data[i];
    1c18:	91 91       	ld	r25, Z+
    1c1a:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1c1c:	0d b4       	in	r0, 0x2d	; 45
    1c1e:	07 fe       	sbrs	r0, 7
    1c20:	fd cf       	rjmp	.-6      	; 0x1c1c <SPI_ReadWrite_Block+0x1c>
          buffer[i] = SPDR;
    1c22:	9e b5       	in	r25, 0x2e	; 46
    1c24:	9d 93       	st	X+, r25
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1c26:	e2 17       	cp	r30, r18
    1c28:	f3 07       	cpc	r31, r19
    1c2a:	b1 f7       	brne	.-20     	; 0x1c18 <SPI_ReadWrite_Block+0x18>
    1c2c:	08 95       	ret

00001c2e <SPI_Write_Block>:
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1c2e:	66 23       	and	r22, r22
    1c30:	81 f0       	breq	.+32     	; 0x1c52 <SPI_Write_Block+0x24>
    1c32:	fc 01       	movw	r30, r24
    1c34:	61 50       	subi	r22, 0x01	; 1
    1c36:	26 2f       	mov	r18, r22
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	2f 5f       	subi	r18, 0xFF	; 255
    1c3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c3e:	28 0f       	add	r18, r24
    1c40:	39 1f       	adc	r19, r25
          SPDR = data[i];
    1c42:	91 91       	ld	r25, Z+
    1c44:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1c46:	0d b4       	in	r0, 0x2d	; 45
    1c48:	07 fe       	sbrs	r0, 7
    1c4a:	fd cf       	rjmp	.-6      	; 0x1c46 <SPI_Write_Block+0x18>
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1c4c:	e2 17       	cp	r30, r18
    1c4e:	f3 07       	cpc	r31, r19
    1c50:	c1 f7       	brne	.-16     	; 0x1c42 <SPI_Write_Block+0x14>
    1c52:	08 95       	ret

00001c54 <SPI_Write_Byte>:
    }
}

uint8_t SPI_Write_Byte(uint8_t byte)
{
    SPDR = byte;
    1c54:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
    1c56:	0d b4       	in	r0, 0x2d	; 45
    1c58:	07 fe       	sbrs	r0, 7
    1c5a:	fd cf       	rjmp	.-6      	; 0x1c56 <SPI_Write_Byte+0x2>
    return SPDR;
    1c5c:	8e b5       	in	r24, 0x2e	; 46
}
    1c5e:	08 95       	ret

00001c60 <Roomba_Init>:
		return;
	}

	state = newState;
	_delay_ms(20);
}
    1c60:	3d 9a       	sbi	0x07, 5	; 7
    1c62:	45 98       	cbi	0x08, 5	; 8
    1c64:	2f ef       	ldi	r18, 0xFF	; 255
    1c66:	39 e6       	ldi	r19, 0x69	; 105
    1c68:	88 e1       	ldi	r24, 0x18	; 24
    1c6a:	21 50       	subi	r18, 0x01	; 1
    1c6c:	30 40       	sbci	r19, 0x00	; 0
    1c6e:	80 40       	sbci	r24, 0x00	; 0
    1c70:	e1 f7       	brne	.-8      	; 0x1c6a <Roomba_Init+0xa>
    1c72:	00 c0       	rjmp	.+0      	; 0x1c74 <Roomba_Init+0x14>
    1c74:	00 00       	nop
    1c76:	45 9a       	sbi	0x08, 5	; 8
    1c78:	9f ef       	ldi	r25, 0xFF	; 255
    1c7a:	27 ea       	ldi	r18, 0xA7	; 167
    1c7c:	31 e6       	ldi	r19, 0x61	; 97
    1c7e:	91 50       	subi	r25, 0x01	; 1
    1c80:	20 40       	sbci	r18, 0x00	; 0
    1c82:	30 40       	sbci	r19, 0x00	; 0
    1c84:	e1 f7       	brne	.-8      	; 0x1c7e <Roomba_Init+0x1e>
    1c86:	00 c0       	rjmp	.+0      	; 0x1c88 <Roomba_Init+0x28>
    1c88:	00 00       	nop
    1c8a:	83 e0       	ldi	r24, 0x03	; 3
    1c8c:	45 98       	cbi	0x08, 5	; 8
    1c8e:	9f ef       	ldi	r25, 0xFF	; 255
    1c90:	20 e7       	ldi	r18, 0x70	; 112
    1c92:	32 e0       	ldi	r19, 0x02	; 2
    1c94:	91 50       	subi	r25, 0x01	; 1
    1c96:	20 40       	sbci	r18, 0x00	; 0
    1c98:	30 40       	sbci	r19, 0x00	; 0
    1c9a:	e1 f7       	brne	.-8      	; 0x1c94 <Roomba_Init+0x34>
    1c9c:	00 c0       	rjmp	.+0      	; 0x1c9e <Roomba_Init+0x3e>
    1c9e:	00 00       	nop
    1ca0:	45 9a       	sbi	0x08, 5	; 8
    1ca2:	9f ef       	ldi	r25, 0xFF	; 255
    1ca4:	20 e7       	ldi	r18, 0x70	; 112
    1ca6:	32 e0       	ldi	r19, 0x02	; 2
    1ca8:	91 50       	subi	r25, 0x01	; 1
    1caa:	20 40       	sbci	r18, 0x00	; 0
    1cac:	30 40       	sbci	r19, 0x00	; 0
    1cae:	e1 f7       	brne	.-8      	; 0x1ca8 <Roomba_Init+0x48>
    1cb0:	00 c0       	rjmp	.+0      	; 0x1cb2 <Roomba_Init+0x52>
    1cb2:	00 00       	nop
    1cb4:	81 50       	subi	r24, 0x01	; 1
    1cb6:	51 f7       	brne	.-44     	; 0x1c8c <Roomba_Init+0x2c>
    1cb8:	a6 d0       	rcall	.+332    	; 0x1e06 <uart0_init>
    1cba:	80 e8       	ldi	r24, 0x80	; 128
    1cbc:	d1 d0       	rcall	.+418    	; 0x1e60 <uart0_putc>
    1cbe:	8f ef       	ldi	r24, 0xFF	; 255
    1cc0:	99 ef       	ldi	r25, 0xF9	; 249
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	81 50       	subi	r24, 0x01	; 1
    1cc6:	90 40       	sbci	r25, 0x00	; 0
    1cc8:	20 40       	sbci	r18, 0x00	; 0
    1cca:	e1 f7       	brne	.-8      	; 0x1cc4 <Roomba_Init+0x64>
    1ccc:	00 c0       	rjmp	.+0      	; 0x1cce <Roomba_Init+0x6e>
    1cce:	00 00       	nop
    1cd0:	81 e8       	ldi	r24, 0x81	; 129
    1cd2:	c6 d0       	rcall	.+396    	; 0x1e60 <uart0_putc>
    1cd4:	89 e0       	ldi	r24, 0x09	; 9
    1cd6:	c4 d0       	rcall	.+392    	; 0x1e60 <uart0_putc>
    1cd8:	3f ef       	ldi	r19, 0xFF	; 255
    1cda:	81 ee       	ldi	r24, 0xE1	; 225
    1cdc:	94 e0       	ldi	r25, 0x04	; 4
    1cde:	31 50       	subi	r19, 0x01	; 1
    1ce0:	80 40       	sbci	r24, 0x00	; 0
    1ce2:	90 40       	sbci	r25, 0x00	; 0
    1ce4:	e1 f7       	brne	.-8      	; 0x1cde <Roomba_Init+0x7e>
    1ce6:	00 c0       	rjmp	.+0      	; 0x1ce8 <Roomba_Init+0x88>
    1ce8:	00 00       	nop
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	8c d0       	rcall	.+280    	; 0x1e06 <uart0_init>
    1cee:	82 e8       	ldi	r24, 0x82	; 130
    1cf0:	b7 d0       	rcall	.+366    	; 0x1e60 <uart0_putc>
    1cf2:	2f ef       	ldi	r18, 0xFF	; 255
    1cf4:	39 ef       	ldi	r19, 0xF9	; 249
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	21 50       	subi	r18, 0x01	; 1
    1cfa:	30 40       	sbci	r19, 0x00	; 0
    1cfc:	80 40       	sbci	r24, 0x00	; 0
    1cfe:	e1 f7       	brne	.-8      	; 0x1cf8 <Roomba_Init+0x98>
    1d00:	00 c0       	rjmp	.+0      	; 0x1d02 <Roomba_Init+0xa2>
    1d02:	00 00       	nop
    1d04:	08 95       	ret

00001d06 <Roomba_Drive>:

void Roomba_Drive( int16_t velocity, int16_t radius )
{
    1d06:	0f 93       	push	r16
    1d08:	1f 93       	push	r17
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
    1d0e:	18 2f       	mov	r17, r24
    1d10:	09 2f       	mov	r16, r25
    1d12:	c6 2f       	mov	r28, r22
    1d14:	d7 2f       	mov	r29, r23
	uart_putc(DRIVE);
    1d16:	89 e8       	ldi	r24, 0x89	; 137
    1d18:	a3 d0       	rcall	.+326    	; 0x1e60 <uart0_putc>
	uart_putc(HIGH_BYTE(velocity));
    1d1a:	80 2f       	mov	r24, r16
    1d1c:	a1 d0       	rcall	.+322    	; 0x1e60 <uart0_putc>
	uart_putc(LOW_BYTE(velocity));
    1d1e:	81 2f       	mov	r24, r17
    1d20:	9f d0       	rcall	.+318    	; 0x1e60 <uart0_putc>
	uart_putc(HIGH_BYTE(radius));
    1d22:	8d 2f       	mov	r24, r29
    1d24:	9d d0       	rcall	.+314    	; 0x1e60 <uart0_putc>
	uart_putc(LOW_BYTE(radius));
    1d26:	8c 2f       	mov	r24, r28
    1d28:	9b d0       	rcall	.+310    	; 0x1e60 <uart0_putc>
}
    1d2a:	df 91       	pop	r29
    1d2c:	cf 91       	pop	r28
    1d2e:	1f 91       	pop	r17
    1d30:	0f 91       	pop	r16
    1d32:	08 95       	ret

00001d34 <__vector_25>:
Input:    None
Returns:  None
**************************************************************************/
void uart0_flush(void)
{
	UART_RxHead = UART_RxTail;
    1d34:	1f 92       	push	r1
    1d36:	0f 92       	push	r0
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	0f 92       	push	r0
    1d3c:	11 24       	eor	r1, r1
    1d3e:	0b b6       	in	r0, 0x3b	; 59
    1d40:	0f 92       	push	r0
    1d42:	2f 93       	push	r18
    1d44:	3f 93       	push	r19
    1d46:	4f 93       	push	r20
    1d48:	5f 93       	push	r21
    1d4a:	8f 93       	push	r24
    1d4c:	9f 93       	push	r25
    1d4e:	ef 93       	push	r30
    1d50:	ff 93       	push	r31
    1d52:	20 91 c0 00 	lds	r18, 0x00C0
    1d56:	30 91 c6 00 	lds	r19, 0x00C6
    1d5a:	28 71       	andi	r18, 0x18	; 24
    1d5c:	80 91 74 15 	lds	r24, 0x1574
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	01 96       	adiw	r24, 0x01	; 1
    1d64:	8f 77       	andi	r24, 0x7F	; 127
    1d66:	99 27       	eor	r25, r25
    1d68:	40 91 73 15 	lds	r20, 0x1573
    1d6c:	50 e0       	ldi	r21, 0x00	; 0
    1d6e:	48 17       	cp	r20, r24
    1d70:	59 07       	cpc	r21, r25
    1d72:	39 f0       	breq	.+14     	; 0x1d82 <__vector_25+0x4e>
    1d74:	80 93 74 15 	sts	0x1574, r24
    1d78:	fc 01       	movw	r30, r24
    1d7a:	e9 58       	subi	r30, 0x89	; 137
    1d7c:	fa 4e       	sbci	r31, 0xEA	; 234
    1d7e:	30 83       	st	Z, r19
    1d80:	01 c0       	rjmp	.+2      	; 0x1d84 <__vector_25+0x50>
    1d82:	22 e0       	ldi	r18, 0x02	; 2
    1d84:	20 93 72 15 	sts	0x1572, r18
    1d88:	ff 91       	pop	r31
    1d8a:	ef 91       	pop	r30
    1d8c:	9f 91       	pop	r25
    1d8e:	8f 91       	pop	r24
    1d90:	5f 91       	pop	r21
    1d92:	4f 91       	pop	r20
    1d94:	3f 91       	pop	r19
    1d96:	2f 91       	pop	r18
    1d98:	0f 90       	pop	r0
    1d9a:	0b be       	out	0x3b, r0	; 59
    1d9c:	0f 90       	pop	r0
    1d9e:	0f be       	out	0x3f, r0	; 63
    1da0:	0f 90       	pop	r0
    1da2:	1f 90       	pop	r1
    1da4:	18 95       	reti

00001da6 <__vector_26>:
    1da6:	1f 92       	push	r1
    1da8:	0f 92       	push	r0
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	0f 92       	push	r0
    1dae:	11 24       	eor	r1, r1
    1db0:	0b b6       	in	r0, 0x3b	; 59
    1db2:	0f 92       	push	r0
    1db4:	8f 93       	push	r24
    1db6:	9f 93       	push	r25
    1db8:	ef 93       	push	r30
    1dba:	ff 93       	push	r31
    1dbc:	90 91 76 15 	lds	r25, 0x1576
    1dc0:	80 91 75 15 	lds	r24, 0x1575
    1dc4:	98 17       	cp	r25, r24
    1dc6:	79 f0       	breq	.+30     	; 0x1de6 <__vector_26+0x40>
    1dc8:	80 91 75 15 	lds	r24, 0x1575
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	01 96       	adiw	r24, 0x01	; 1
    1dd0:	8f 77       	andi	r24, 0x7F	; 127
    1dd2:	99 27       	eor	r25, r25
    1dd4:	80 93 75 15 	sts	0x1575, r24
    1dd8:	fc 01       	movw	r30, r24
    1dda:	e9 50       	subi	r30, 0x09	; 9
    1ddc:	fa 4e       	sbci	r31, 0xEA	; 234
    1dde:	80 81       	ld	r24, Z
    1de0:	80 93 c6 00 	sts	0x00C6, r24
    1de4:	05 c0       	rjmp	.+10     	; 0x1df0 <__vector_26+0x4a>
    1de6:	e1 ec       	ldi	r30, 0xC1	; 193
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	8f 7d       	andi	r24, 0xDF	; 223
    1dee:	80 83       	st	Z, r24
    1df0:	ff 91       	pop	r31
    1df2:	ef 91       	pop	r30
    1df4:	9f 91       	pop	r25
    1df6:	8f 91       	pop	r24
    1df8:	0f 90       	pop	r0
    1dfa:	0b be       	out	0x3b, r0	; 59
    1dfc:	0f 90       	pop	r0
    1dfe:	0f be       	out	0x3f, r0	; 63
    1e00:	0f 90       	pop	r0
    1e02:	1f 90       	pop	r1
    1e04:	18 95       	reti

00001e06 <uart0_init>:
    1e06:	10 92 76 15 	sts	0x1576, r1
    1e0a:	10 92 75 15 	sts	0x1575, r1
    1e0e:	10 92 74 15 	sts	0x1574, r1
    1e12:	10 92 73 15 	sts	0x1573, r1
    1e16:	81 30       	cpi	r24, 0x01	; 1
    1e18:	41 f0       	breq	.+16     	; 0x1e2a <uart0_init+0x24>
    1e1a:	18 f0       	brcs	.+6      	; 0x1e22 <uart0_init+0x1c>
    1e1c:	82 30       	cpi	r24, 0x02	; 2
    1e1e:	49 f0       	breq	.+18     	; 0x1e32 <uart0_init+0x2c>
    1e20:	0c c0       	rjmp	.+24     	; 0x1e3a <uart0_init+0x34>
    1e22:	87 e6       	ldi	r24, 0x67	; 103
    1e24:	80 93 c4 00 	sts	0x00C4, r24
    1e28:	0b c0       	rjmp	.+22     	; 0x1e40 <uart0_init+0x3a>
    1e2a:	83 e3       	ldi	r24, 0x33	; 51
    1e2c:	80 93 c4 00 	sts	0x00C4, r24
    1e30:	07 c0       	rjmp	.+14     	; 0x1e40 <uart0_init+0x3a>
    1e32:	82 e2       	ldi	r24, 0x22	; 34
    1e34:	80 93 c4 00 	sts	0x00C4, r24
    1e38:	03 c0       	rjmp	.+6      	; 0x1e40 <uart0_init+0x3a>
    1e3a:	87 e6       	ldi	r24, 0x67	; 103
    1e3c:	80 93 c4 00 	sts	0x00C4, r24
    1e40:	80 91 c5 00 	lds	r24, 0x00C5
    1e44:	80 91 c4 00 	lds	r24, 0x00C4
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	80 93 c5 00 	sts	0x00C5, r24
    1e4e:	10 92 c4 00 	sts	0x00C4, r1
    1e52:	88 e9       	ldi	r24, 0x98	; 152
    1e54:	80 93 c1 00 	sts	0x00C1, r24
    1e58:	86 e0       	ldi	r24, 0x06	; 6
    1e5a:	80 93 c2 00 	sts	0x00C2, r24
    1e5e:	08 95       	ret

00001e60 <uart0_putc>:
    1e60:	40 91 76 15 	lds	r20, 0x1576
    1e64:	50 e0       	ldi	r21, 0x00	; 0
    1e66:	4f 5f       	subi	r20, 0xFF	; 255
    1e68:	5f 4f       	sbci	r21, 0xFF	; 255
    1e6a:	4f 77       	andi	r20, 0x7F	; 127
    1e6c:	55 27       	eor	r21, r21
    1e6e:	20 91 75 15 	lds	r18, 0x1575
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	24 17       	cp	r18, r20
    1e76:	35 07       	cpc	r19, r21
    1e78:	d1 f3       	breq	.-12     	; 0x1e6e <uart0_putc+0xe>
    1e7a:	fa 01       	movw	r30, r20
    1e7c:	e9 50       	subi	r30, 0x09	; 9
    1e7e:	fa 4e       	sbci	r31, 0xEA	; 234
    1e80:	80 83       	st	Z, r24
    1e82:	40 93 76 15 	sts	0x1576, r20
    1e86:	e1 ec       	ldi	r30, 0xC1	; 193
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	80 62       	ori	r24, 0x20	; 32
    1e8e:	80 83       	st	Z, r24
    1e90:	08 95       	ret

00001e92 <__vector_36>:
ISR(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
    1e92:	1f 92       	push	r1
    1e94:	0f 92       	push	r0
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	0f 92       	push	r0
    1e9a:	11 24       	eor	r1, r1
    1e9c:	0b b6       	in	r0, 0x3b	; 59
    1e9e:	0f 92       	push	r0
    1ea0:	2f 93       	push	r18
    1ea2:	3f 93       	push	r19
    1ea4:	4f 93       	push	r20
    1ea6:	5f 93       	push	r21
    1ea8:	8f 93       	push	r24
    1eaa:	9f 93       	push	r25
    1eac:	ef 93       	push	r30
    1eae:	ff 93       	push	r31
	uint8_t data;
	uint8_t usr;
	uint8_t lastRxError;

	/* read UART status register and UART data register */
	usr  = UART1_STATUS;
    1eb0:	20 91 c8 00 	lds	r18, 0x00C8
	data = UART1_DATA;
    1eb4:	30 91 ce 00 	lds	r19, 0x00CE

	/* */
	lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
    1eb8:	28 71       	andi	r18, 0x18	; 24

	/* calculate buffer index */
	tmphead = ( UART1_RxHead + 1) & UART_RX1_BUFFER_MASK;
    1eba:	80 91 6f 14 	lds	r24, 0x146F
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	01 96       	adiw	r24, 0x01	; 1
    1ec2:	8f 77       	andi	r24, 0x7F	; 127
    1ec4:	99 27       	eor	r25, r25

	if ( tmphead == UART1_RxTail ) {
    1ec6:	40 91 6e 14 	lds	r20, 0x146E
    1eca:	50 e0       	ldi	r21, 0x00	; 0
    1ecc:	48 17       	cp	r20, r24
    1ece:	59 07       	cpc	r21, r25
    1ed0:	39 f0       	breq	.+14     	; 0x1ee0 <__vector_36+0x4e>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
	} else {
		/* store new index */
		UART1_RxHead = tmphead;
    1ed2:	80 93 6f 14 	sts	0x146F, r24
		/* store received data in buffer */
		UART1_RxBuf[tmphead] = data;
    1ed6:	fc 01       	movw	r30, r24
    1ed8:	ee 58       	subi	r30, 0x8E	; 142
    1eda:	fb 4e       	sbci	r31, 0xEB	; 235
    1edc:	30 83       	st	Z, r19
    1ede:	01 c0       	rjmp	.+2      	; 0x1ee2 <__vector_36+0x50>
	/* calculate buffer index */
	tmphead = ( UART1_RxHead + 1) & UART_RX1_BUFFER_MASK;

	if ( tmphead == UART1_RxTail ) {
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
    1ee0:	22 e0       	ldi	r18, 0x02	; 2
		/* store new index */
		UART1_RxHead = tmphead;
		/* store received data in buffer */
		UART1_RxBuf[tmphead] = data;
	}
	UART1_LastRxError = lastRxError;
    1ee2:	20 93 6d 14 	sts	0x146D, r18
}
    1ee6:	ff 91       	pop	r31
    1ee8:	ef 91       	pop	r30
    1eea:	9f 91       	pop	r25
    1eec:	8f 91       	pop	r24
    1eee:	5f 91       	pop	r21
    1ef0:	4f 91       	pop	r20
    1ef2:	3f 91       	pop	r19
    1ef4:	2f 91       	pop	r18
    1ef6:	0f 90       	pop	r0
    1ef8:	0b be       	out	0x3b, r0	; 59
    1efa:	0f 90       	pop	r0
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	0f 90       	pop	r0
    1f00:	1f 90       	pop	r1
    1f02:	18 95       	reti

00001f04 <__vector_37>:
ISR(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
    1f04:	1f 92       	push	r1
    1f06:	0f 92       	push	r0
    1f08:	0f b6       	in	r0, 0x3f	; 63
    1f0a:	0f 92       	push	r0
    1f0c:	11 24       	eor	r1, r1
    1f0e:	0b b6       	in	r0, 0x3b	; 59
    1f10:	0f 92       	push	r0
    1f12:	8f 93       	push	r24
    1f14:	9f 93       	push	r25
    1f16:	ef 93       	push	r30
    1f18:	ff 93       	push	r31
	uint16_t tmptail;

	if ( UART1_TxHead != UART1_TxTail) {
    1f1a:	90 91 71 14 	lds	r25, 0x1471
    1f1e:	80 91 70 14 	lds	r24, 0x1470
    1f22:	98 17       	cp	r25, r24
    1f24:	79 f0       	breq	.+30     	; 0x1f44 <__vector_37+0x40>
		/* calculate and store new buffer index */
		tmptail = (UART1_TxTail + 1) & UART_TX1_BUFFER_MASK;
    1f26:	80 91 70 14 	lds	r24, 0x1470
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	01 96       	adiw	r24, 0x01	; 1
    1f2e:	8f 77       	andi	r24, 0x7F	; 127
    1f30:	99 27       	eor	r25, r25
		UART1_TxTail = tmptail;
    1f32:	80 93 70 14 	sts	0x1470, r24
		/* get one byte from buffer and write it to UART */
		UART1_DATA = UART1_TxBuf[tmptail];  /* start transmission */
    1f36:	fc 01       	movw	r30, r24
    1f38:	ee 50       	subi	r30, 0x0E	; 14
    1f3a:	fb 4e       	sbci	r31, 0xEB	; 235
    1f3c:	80 81       	ld	r24, Z
    1f3e:	80 93 ce 00 	sts	0x00CE, r24
    1f42:	05 c0       	rjmp	.+10     	; 0x1f4e <__vector_37+0x4a>
	} else {
		/* tx buffer empty, disable UDRE interrupt */
		UART1_CONTROL &= ~_BV(UART1_UDRIE);
    1f44:	e9 ec       	ldi	r30, 0xC9	; 201
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	8f 7d       	andi	r24, 0xDF	; 223
    1f4c:	80 83       	st	Z, r24
	}
}
    1f4e:	ff 91       	pop	r31
    1f50:	ef 91       	pop	r30
    1f52:	9f 91       	pop	r25
    1f54:	8f 91       	pop	r24
    1f56:	0f 90       	pop	r0
    1f58:	0b be       	out	0x3b, r0	; 59
    1f5a:	0f 90       	pop	r0
    1f5c:	0f be       	out	0x3f, r0	; 63
    1f5e:	0f 90       	pop	r0
    1f60:	1f 90       	pop	r1
    1f62:	18 95       	reti

00001f64 <__udivmodhi4>:
    1f64:	aa 1b       	sub	r26, r26
    1f66:	bb 1b       	sub	r27, r27
    1f68:	51 e1       	ldi	r21, 0x11	; 17
    1f6a:	07 c0       	rjmp	.+14     	; 0x1f7a <__udivmodhi4_ep>

00001f6c <__udivmodhi4_loop>:
    1f6c:	aa 1f       	adc	r26, r26
    1f6e:	bb 1f       	adc	r27, r27
    1f70:	a6 17       	cp	r26, r22
    1f72:	b7 07       	cpc	r27, r23
    1f74:	10 f0       	brcs	.+4      	; 0x1f7a <__udivmodhi4_ep>
    1f76:	a6 1b       	sub	r26, r22
    1f78:	b7 0b       	sbc	r27, r23

00001f7a <__udivmodhi4_ep>:
    1f7a:	88 1f       	adc	r24, r24
    1f7c:	99 1f       	adc	r25, r25
    1f7e:	5a 95       	dec	r21
    1f80:	a9 f7       	brne	.-22     	; 0x1f6c <__udivmodhi4_loop>
    1f82:	80 95       	com	r24
    1f84:	90 95       	com	r25
    1f86:	bc 01       	movw	r22, r24
    1f88:	cd 01       	movw	r24, r26
    1f8a:	08 95       	ret

00001f8c <__tablejump2__>:
    1f8c:	ee 0f       	add	r30, r30
    1f8e:	ff 1f       	adc	r31, r31
    1f90:	88 1f       	adc	r24, r24
    1f92:	8b bf       	out	0x3b, r24	; 59
    1f94:	07 90       	elpm	r0, Z+
    1f96:	f6 91       	elpm	r31, Z
    1f98:	e0 2d       	mov	r30, r0
    1f9a:	19 94       	eijmp

00001f9c <sprintf>:
    1f9c:	0f 93       	push	r16
    1f9e:	1f 93       	push	r17
    1fa0:	cf 93       	push	r28
    1fa2:	df 93       	push	r29
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
    1fa8:	2e 97       	sbiw	r28, 0x0e	; 14
    1faa:	0f b6       	in	r0, 0x3f	; 63
    1fac:	f8 94       	cli
    1fae:	de bf       	out	0x3e, r29	; 62
    1fb0:	0f be       	out	0x3f, r0	; 63
    1fb2:	cd bf       	out	0x3d, r28	; 61
    1fb4:	0e 89       	ldd	r16, Y+22	; 0x16
    1fb6:	1f 89       	ldd	r17, Y+23	; 0x17
    1fb8:	86 e0       	ldi	r24, 0x06	; 6
    1fba:	8c 83       	std	Y+4, r24	; 0x04
    1fbc:	1a 83       	std	Y+2, r17	; 0x02
    1fbe:	09 83       	std	Y+1, r16	; 0x01
    1fc0:	8f ef       	ldi	r24, 0xFF	; 255
    1fc2:	9f e7       	ldi	r25, 0x7F	; 127
    1fc4:	9e 83       	std	Y+6, r25	; 0x06
    1fc6:	8d 83       	std	Y+5, r24	; 0x05
    1fc8:	ae 01       	movw	r20, r28
    1fca:	46 5e       	subi	r20, 0xE6	; 230
    1fcc:	5f 4f       	sbci	r21, 0xFF	; 255
    1fce:	68 8d       	ldd	r22, Y+24	; 0x18
    1fd0:	79 8d       	ldd	r23, Y+25	; 0x19
    1fd2:	ce 01       	movw	r24, r28
    1fd4:	01 96       	adiw	r24, 0x01	; 1
    1fd6:	11 d0       	rcall	.+34     	; 0x1ffa <vfprintf>
    1fd8:	2f 81       	ldd	r18, Y+7	; 0x07
    1fda:	38 85       	ldd	r19, Y+8	; 0x08
    1fdc:	f8 01       	movw	r30, r16
    1fde:	e2 0f       	add	r30, r18
    1fe0:	f3 1f       	adc	r31, r19
    1fe2:	10 82       	st	Z, r1
    1fe4:	2e 96       	adiw	r28, 0x0e	; 14
    1fe6:	0f b6       	in	r0, 0x3f	; 63
    1fe8:	f8 94       	cli
    1fea:	de bf       	out	0x3e, r29	; 62
    1fec:	0f be       	out	0x3f, r0	; 63
    1fee:	cd bf       	out	0x3d, r28	; 61
    1ff0:	df 91       	pop	r29
    1ff2:	cf 91       	pop	r28
    1ff4:	1f 91       	pop	r17
    1ff6:	0f 91       	pop	r16
    1ff8:	08 95       	ret

00001ffa <vfprintf>:
    1ffa:	2f 92       	push	r2
    1ffc:	3f 92       	push	r3
    1ffe:	4f 92       	push	r4
    2000:	5f 92       	push	r5
    2002:	6f 92       	push	r6
    2004:	7f 92       	push	r7
    2006:	8f 92       	push	r8
    2008:	9f 92       	push	r9
    200a:	af 92       	push	r10
    200c:	bf 92       	push	r11
    200e:	cf 92       	push	r12
    2010:	df 92       	push	r13
    2012:	ef 92       	push	r14
    2014:	ff 92       	push	r15
    2016:	0f 93       	push	r16
    2018:	1f 93       	push	r17
    201a:	cf 93       	push	r28
    201c:	df 93       	push	r29
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62
    2022:	2c 97       	sbiw	r28, 0x0c	; 12
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	f8 94       	cli
    2028:	de bf       	out	0x3e, r29	; 62
    202a:	0f be       	out	0x3f, r0	; 63
    202c:	cd bf       	out	0x3d, r28	; 61
    202e:	7c 01       	movw	r14, r24
    2030:	6b 01       	movw	r12, r22
    2032:	8a 01       	movw	r16, r20
    2034:	fc 01       	movw	r30, r24
    2036:	17 82       	std	Z+7, r1	; 0x07
    2038:	16 82       	std	Z+6, r1	; 0x06
    203a:	83 81       	ldd	r24, Z+3	; 0x03
    203c:	81 ff       	sbrs	r24, 1
    203e:	b0 c1       	rjmp	.+864    	; 0x23a0 <__stack+0x1a1>
    2040:	ce 01       	movw	r24, r28
    2042:	01 96       	adiw	r24, 0x01	; 1
    2044:	4c 01       	movw	r8, r24
    2046:	f7 01       	movw	r30, r14
    2048:	93 81       	ldd	r25, Z+3	; 0x03
    204a:	f6 01       	movw	r30, r12
    204c:	93 fd       	sbrc	r25, 3
    204e:	85 91       	lpm	r24, Z+
    2050:	93 ff       	sbrs	r25, 3
    2052:	81 91       	ld	r24, Z+
    2054:	6f 01       	movw	r12, r30
    2056:	88 23       	and	r24, r24
    2058:	09 f4       	brne	.+2      	; 0x205c <vfprintf+0x62>
    205a:	9e c1       	rjmp	.+828    	; 0x2398 <__stack+0x199>
    205c:	85 32       	cpi	r24, 0x25	; 37
    205e:	39 f4       	brne	.+14     	; 0x206e <vfprintf+0x74>
    2060:	93 fd       	sbrc	r25, 3
    2062:	85 91       	lpm	r24, Z+
    2064:	93 ff       	sbrs	r25, 3
    2066:	81 91       	ld	r24, Z+
    2068:	6f 01       	movw	r12, r30
    206a:	85 32       	cpi	r24, 0x25	; 37
    206c:	21 f4       	brne	.+8      	; 0x2076 <vfprintf+0x7c>
    206e:	b7 01       	movw	r22, r14
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	c7 d1       	rcall	.+910    	; 0x2402 <fputc>
    2074:	e8 cf       	rjmp	.-48     	; 0x2046 <vfprintf+0x4c>
    2076:	51 2c       	mov	r5, r1
    2078:	31 2c       	mov	r3, r1
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	20 32       	cpi	r18, 0x20	; 32
    207e:	a0 f4       	brcc	.+40     	; 0x20a8 <vfprintf+0xae>
    2080:	8b 32       	cpi	r24, 0x2B	; 43
    2082:	69 f0       	breq	.+26     	; 0x209e <vfprintf+0xa4>
    2084:	30 f4       	brcc	.+12     	; 0x2092 <vfprintf+0x98>
    2086:	80 32       	cpi	r24, 0x20	; 32
    2088:	59 f0       	breq	.+22     	; 0x20a0 <vfprintf+0xa6>
    208a:	83 32       	cpi	r24, 0x23	; 35
    208c:	69 f4       	brne	.+26     	; 0x20a8 <vfprintf+0xae>
    208e:	20 61       	ori	r18, 0x10	; 16
    2090:	2c c0       	rjmp	.+88     	; 0x20ea <vfprintf+0xf0>
    2092:	8d 32       	cpi	r24, 0x2D	; 45
    2094:	39 f0       	breq	.+14     	; 0x20a4 <vfprintf+0xaa>
    2096:	80 33       	cpi	r24, 0x30	; 48
    2098:	39 f4       	brne	.+14     	; 0x20a8 <vfprintf+0xae>
    209a:	21 60       	ori	r18, 0x01	; 1
    209c:	26 c0       	rjmp	.+76     	; 0x20ea <vfprintf+0xf0>
    209e:	22 60       	ori	r18, 0x02	; 2
    20a0:	24 60       	ori	r18, 0x04	; 4
    20a2:	23 c0       	rjmp	.+70     	; 0x20ea <vfprintf+0xf0>
    20a4:	28 60       	ori	r18, 0x08	; 8
    20a6:	21 c0       	rjmp	.+66     	; 0x20ea <vfprintf+0xf0>
    20a8:	27 fd       	sbrc	r18, 7
    20aa:	27 c0       	rjmp	.+78     	; 0x20fa <vfprintf+0x100>
    20ac:	30 ed       	ldi	r19, 0xD0	; 208
    20ae:	38 0f       	add	r19, r24
    20b0:	3a 30       	cpi	r19, 0x0A	; 10
    20b2:	78 f4       	brcc	.+30     	; 0x20d2 <vfprintf+0xd8>
    20b4:	26 ff       	sbrs	r18, 6
    20b6:	06 c0       	rjmp	.+12     	; 0x20c4 <vfprintf+0xca>
    20b8:	fa e0       	ldi	r31, 0x0A	; 10
    20ba:	5f 9e       	mul	r5, r31
    20bc:	30 0d       	add	r19, r0
    20be:	11 24       	eor	r1, r1
    20c0:	53 2e       	mov	r5, r19
    20c2:	13 c0       	rjmp	.+38     	; 0x20ea <vfprintf+0xf0>
    20c4:	8a e0       	ldi	r24, 0x0A	; 10
    20c6:	38 9e       	mul	r3, r24
    20c8:	30 0d       	add	r19, r0
    20ca:	11 24       	eor	r1, r1
    20cc:	33 2e       	mov	r3, r19
    20ce:	20 62       	ori	r18, 0x20	; 32
    20d0:	0c c0       	rjmp	.+24     	; 0x20ea <vfprintf+0xf0>
    20d2:	8e 32       	cpi	r24, 0x2E	; 46
    20d4:	21 f4       	brne	.+8      	; 0x20de <vfprintf+0xe4>
    20d6:	26 fd       	sbrc	r18, 6
    20d8:	5f c1       	rjmp	.+702    	; 0x2398 <__stack+0x199>
    20da:	20 64       	ori	r18, 0x40	; 64
    20dc:	06 c0       	rjmp	.+12     	; 0x20ea <vfprintf+0xf0>
    20de:	8c 36       	cpi	r24, 0x6C	; 108
    20e0:	11 f4       	brne	.+4      	; 0x20e6 <vfprintf+0xec>
    20e2:	20 68       	ori	r18, 0x80	; 128
    20e4:	02 c0       	rjmp	.+4      	; 0x20ea <vfprintf+0xf0>
    20e6:	88 36       	cpi	r24, 0x68	; 104
    20e8:	41 f4       	brne	.+16     	; 0x20fa <vfprintf+0x100>
    20ea:	f6 01       	movw	r30, r12
    20ec:	93 fd       	sbrc	r25, 3
    20ee:	85 91       	lpm	r24, Z+
    20f0:	93 ff       	sbrs	r25, 3
    20f2:	81 91       	ld	r24, Z+
    20f4:	6f 01       	movw	r12, r30
    20f6:	81 11       	cpse	r24, r1
    20f8:	c1 cf       	rjmp	.-126    	; 0x207c <vfprintf+0x82>
    20fa:	98 2f       	mov	r25, r24
    20fc:	9f 7d       	andi	r25, 0xDF	; 223
    20fe:	95 54       	subi	r25, 0x45	; 69
    2100:	93 30       	cpi	r25, 0x03	; 3
    2102:	28 f4       	brcc	.+10     	; 0x210e <vfprintf+0x114>
    2104:	0c 5f       	subi	r16, 0xFC	; 252
    2106:	1f 4f       	sbci	r17, 0xFF	; 255
    2108:	ff e3       	ldi	r31, 0x3F	; 63
    210a:	f9 83       	std	Y+1, r31	; 0x01
    210c:	0d c0       	rjmp	.+26     	; 0x2128 <vfprintf+0x12e>
    210e:	83 36       	cpi	r24, 0x63	; 99
    2110:	31 f0       	breq	.+12     	; 0x211e <vfprintf+0x124>
    2112:	83 37       	cpi	r24, 0x73	; 115
    2114:	71 f0       	breq	.+28     	; 0x2132 <vfprintf+0x138>
    2116:	83 35       	cpi	r24, 0x53	; 83
    2118:	09 f0       	breq	.+2      	; 0x211c <vfprintf+0x122>
    211a:	57 c0       	rjmp	.+174    	; 0x21ca <vfprintf+0x1d0>
    211c:	21 c0       	rjmp	.+66     	; 0x2160 <vfprintf+0x166>
    211e:	f8 01       	movw	r30, r16
    2120:	80 81       	ld	r24, Z
    2122:	89 83       	std	Y+1, r24	; 0x01
    2124:	0e 5f       	subi	r16, 0xFE	; 254
    2126:	1f 4f       	sbci	r17, 0xFF	; 255
    2128:	44 24       	eor	r4, r4
    212a:	43 94       	inc	r4
    212c:	51 2c       	mov	r5, r1
    212e:	54 01       	movw	r10, r8
    2130:	14 c0       	rjmp	.+40     	; 0x215a <vfprintf+0x160>
    2132:	38 01       	movw	r6, r16
    2134:	f2 e0       	ldi	r31, 0x02	; 2
    2136:	6f 0e       	add	r6, r31
    2138:	71 1c       	adc	r7, r1
    213a:	f8 01       	movw	r30, r16
    213c:	a0 80       	ld	r10, Z
    213e:	b1 80       	ldd	r11, Z+1	; 0x01
    2140:	26 ff       	sbrs	r18, 6
    2142:	03 c0       	rjmp	.+6      	; 0x214a <vfprintf+0x150>
    2144:	65 2d       	mov	r22, r5
    2146:	70 e0       	ldi	r23, 0x00	; 0
    2148:	02 c0       	rjmp	.+4      	; 0x214e <vfprintf+0x154>
    214a:	6f ef       	ldi	r22, 0xFF	; 255
    214c:	7f ef       	ldi	r23, 0xFF	; 255
    214e:	c5 01       	movw	r24, r10
    2150:	2c 87       	std	Y+12, r18	; 0x0c
    2152:	4c d1       	rcall	.+664    	; 0x23ec <strnlen>
    2154:	2c 01       	movw	r4, r24
    2156:	83 01       	movw	r16, r6
    2158:	2c 85       	ldd	r18, Y+12	; 0x0c
    215a:	2f 77       	andi	r18, 0x7F	; 127
    215c:	22 2e       	mov	r2, r18
    215e:	16 c0       	rjmp	.+44     	; 0x218c <vfprintf+0x192>
    2160:	38 01       	movw	r6, r16
    2162:	f2 e0       	ldi	r31, 0x02	; 2
    2164:	6f 0e       	add	r6, r31
    2166:	71 1c       	adc	r7, r1
    2168:	f8 01       	movw	r30, r16
    216a:	a0 80       	ld	r10, Z
    216c:	b1 80       	ldd	r11, Z+1	; 0x01
    216e:	26 ff       	sbrs	r18, 6
    2170:	03 c0       	rjmp	.+6      	; 0x2178 <vfprintf+0x17e>
    2172:	65 2d       	mov	r22, r5
    2174:	70 e0       	ldi	r23, 0x00	; 0
    2176:	02 c0       	rjmp	.+4      	; 0x217c <vfprintf+0x182>
    2178:	6f ef       	ldi	r22, 0xFF	; 255
    217a:	7f ef       	ldi	r23, 0xFF	; 255
    217c:	c5 01       	movw	r24, r10
    217e:	2c 87       	std	Y+12, r18	; 0x0c
    2180:	2a d1       	rcall	.+596    	; 0x23d6 <strnlen_P>
    2182:	2c 01       	movw	r4, r24
    2184:	2c 85       	ldd	r18, Y+12	; 0x0c
    2186:	20 68       	ori	r18, 0x80	; 128
    2188:	22 2e       	mov	r2, r18
    218a:	83 01       	movw	r16, r6
    218c:	23 fc       	sbrc	r2, 3
    218e:	19 c0       	rjmp	.+50     	; 0x21c2 <vfprintf+0x1c8>
    2190:	83 2d       	mov	r24, r3
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	48 16       	cp	r4, r24
    2196:	59 06       	cpc	r5, r25
    2198:	a0 f4       	brcc	.+40     	; 0x21c2 <vfprintf+0x1c8>
    219a:	b7 01       	movw	r22, r14
    219c:	80 e2       	ldi	r24, 0x20	; 32
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	30 d1       	rcall	.+608    	; 0x2402 <fputc>
    21a2:	3a 94       	dec	r3
    21a4:	f5 cf       	rjmp	.-22     	; 0x2190 <vfprintf+0x196>
    21a6:	f5 01       	movw	r30, r10
    21a8:	27 fc       	sbrc	r2, 7
    21aa:	85 91       	lpm	r24, Z+
    21ac:	27 fe       	sbrs	r2, 7
    21ae:	81 91       	ld	r24, Z+
    21b0:	5f 01       	movw	r10, r30
    21b2:	b7 01       	movw	r22, r14
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	25 d1       	rcall	.+586    	; 0x2402 <fputc>
    21b8:	31 10       	cpse	r3, r1
    21ba:	3a 94       	dec	r3
    21bc:	f1 e0       	ldi	r31, 0x01	; 1
    21be:	4f 1a       	sub	r4, r31
    21c0:	51 08       	sbc	r5, r1
    21c2:	41 14       	cp	r4, r1
    21c4:	51 04       	cpc	r5, r1
    21c6:	79 f7       	brne	.-34     	; 0x21a6 <vfprintf+0x1ac>
    21c8:	de c0       	rjmp	.+444    	; 0x2386 <__stack+0x187>
    21ca:	84 36       	cpi	r24, 0x64	; 100
    21cc:	11 f0       	breq	.+4      	; 0x21d2 <vfprintf+0x1d8>
    21ce:	89 36       	cpi	r24, 0x69	; 105
    21d0:	31 f5       	brne	.+76     	; 0x221e <__stack+0x1f>
    21d2:	f8 01       	movw	r30, r16
    21d4:	27 ff       	sbrs	r18, 7
    21d6:	07 c0       	rjmp	.+14     	; 0x21e6 <vfprintf+0x1ec>
    21d8:	60 81       	ld	r22, Z
    21da:	71 81       	ldd	r23, Z+1	; 0x01
    21dc:	82 81       	ldd	r24, Z+2	; 0x02
    21de:	93 81       	ldd	r25, Z+3	; 0x03
    21e0:	0c 5f       	subi	r16, 0xFC	; 252
    21e2:	1f 4f       	sbci	r17, 0xFF	; 255
    21e4:	08 c0       	rjmp	.+16     	; 0x21f6 <vfprintf+0x1fc>
    21e6:	60 81       	ld	r22, Z
    21e8:	71 81       	ldd	r23, Z+1	; 0x01
    21ea:	07 2e       	mov	r0, r23
    21ec:	00 0c       	add	r0, r0
    21ee:	88 0b       	sbc	r24, r24
    21f0:	99 0b       	sbc	r25, r25
    21f2:	0e 5f       	subi	r16, 0xFE	; 254
    21f4:	1f 4f       	sbci	r17, 0xFF	; 255
    21f6:	2f 76       	andi	r18, 0x6F	; 111
    21f8:	72 2e       	mov	r7, r18
    21fa:	97 ff       	sbrs	r25, 7
    21fc:	09 c0       	rjmp	.+18     	; 0x2210 <__stack+0x11>
    21fe:	90 95       	com	r25
    2200:	80 95       	com	r24
    2202:	70 95       	com	r23
    2204:	61 95       	neg	r22
    2206:	7f 4f       	sbci	r23, 0xFF	; 255
    2208:	8f 4f       	sbci	r24, 0xFF	; 255
    220a:	9f 4f       	sbci	r25, 0xFF	; 255
    220c:	20 68       	ori	r18, 0x80	; 128
    220e:	72 2e       	mov	r7, r18
    2210:	2a e0       	ldi	r18, 0x0A	; 10
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	a4 01       	movw	r20, r8
    2216:	2d d1       	rcall	.+602    	; 0x2472 <__ultoa_invert>
    2218:	a8 2e       	mov	r10, r24
    221a:	a8 18       	sub	r10, r8
    221c:	43 c0       	rjmp	.+134    	; 0x22a4 <__stack+0xa5>
    221e:	85 37       	cpi	r24, 0x75	; 117
    2220:	29 f4       	brne	.+10     	; 0x222c <__stack+0x2d>
    2222:	2f 7e       	andi	r18, 0xEF	; 239
    2224:	b2 2e       	mov	r11, r18
    2226:	2a e0       	ldi	r18, 0x0A	; 10
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	25 c0       	rjmp	.+74     	; 0x2276 <__stack+0x77>
    222c:	f2 2f       	mov	r31, r18
    222e:	f9 7f       	andi	r31, 0xF9	; 249
    2230:	bf 2e       	mov	r11, r31
    2232:	8f 36       	cpi	r24, 0x6F	; 111
    2234:	c1 f0       	breq	.+48     	; 0x2266 <__stack+0x67>
    2236:	18 f4       	brcc	.+6      	; 0x223e <__stack+0x3f>
    2238:	88 35       	cpi	r24, 0x58	; 88
    223a:	79 f0       	breq	.+30     	; 0x225a <__stack+0x5b>
    223c:	ad c0       	rjmp	.+346    	; 0x2398 <__stack+0x199>
    223e:	80 37       	cpi	r24, 0x70	; 112
    2240:	19 f0       	breq	.+6      	; 0x2248 <__stack+0x49>
    2242:	88 37       	cpi	r24, 0x78	; 120
    2244:	21 f0       	breq	.+8      	; 0x224e <__stack+0x4f>
    2246:	a8 c0       	rjmp	.+336    	; 0x2398 <__stack+0x199>
    2248:	2f 2f       	mov	r18, r31
    224a:	20 61       	ori	r18, 0x10	; 16
    224c:	b2 2e       	mov	r11, r18
    224e:	b4 fe       	sbrs	r11, 4
    2250:	0d c0       	rjmp	.+26     	; 0x226c <__stack+0x6d>
    2252:	8b 2d       	mov	r24, r11
    2254:	84 60       	ori	r24, 0x04	; 4
    2256:	b8 2e       	mov	r11, r24
    2258:	09 c0       	rjmp	.+18     	; 0x226c <__stack+0x6d>
    225a:	24 ff       	sbrs	r18, 4
    225c:	0a c0       	rjmp	.+20     	; 0x2272 <__stack+0x73>
    225e:	9f 2f       	mov	r25, r31
    2260:	96 60       	ori	r25, 0x06	; 6
    2262:	b9 2e       	mov	r11, r25
    2264:	06 c0       	rjmp	.+12     	; 0x2272 <__stack+0x73>
    2266:	28 e0       	ldi	r18, 0x08	; 8
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	05 c0       	rjmp	.+10     	; 0x2276 <__stack+0x77>
    226c:	20 e1       	ldi	r18, 0x10	; 16
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	02 c0       	rjmp	.+4      	; 0x2276 <__stack+0x77>
    2272:	20 e1       	ldi	r18, 0x10	; 16
    2274:	32 e0       	ldi	r19, 0x02	; 2
    2276:	f8 01       	movw	r30, r16
    2278:	b7 fe       	sbrs	r11, 7
    227a:	07 c0       	rjmp	.+14     	; 0x228a <__stack+0x8b>
    227c:	60 81       	ld	r22, Z
    227e:	71 81       	ldd	r23, Z+1	; 0x01
    2280:	82 81       	ldd	r24, Z+2	; 0x02
    2282:	93 81       	ldd	r25, Z+3	; 0x03
    2284:	0c 5f       	subi	r16, 0xFC	; 252
    2286:	1f 4f       	sbci	r17, 0xFF	; 255
    2288:	06 c0       	rjmp	.+12     	; 0x2296 <__stack+0x97>
    228a:	60 81       	ld	r22, Z
    228c:	71 81       	ldd	r23, Z+1	; 0x01
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	0e 5f       	subi	r16, 0xFE	; 254
    2294:	1f 4f       	sbci	r17, 0xFF	; 255
    2296:	a4 01       	movw	r20, r8
    2298:	ec d0       	rcall	.+472    	; 0x2472 <__ultoa_invert>
    229a:	a8 2e       	mov	r10, r24
    229c:	a8 18       	sub	r10, r8
    229e:	fb 2d       	mov	r31, r11
    22a0:	ff 77       	andi	r31, 0x7F	; 127
    22a2:	7f 2e       	mov	r7, r31
    22a4:	76 fe       	sbrs	r7, 6
    22a6:	0b c0       	rjmp	.+22     	; 0x22be <__stack+0xbf>
    22a8:	37 2d       	mov	r19, r7
    22aa:	3e 7f       	andi	r19, 0xFE	; 254
    22ac:	a5 14       	cp	r10, r5
    22ae:	50 f4       	brcc	.+20     	; 0x22c4 <__stack+0xc5>
    22b0:	74 fe       	sbrs	r7, 4
    22b2:	0a c0       	rjmp	.+20     	; 0x22c8 <__stack+0xc9>
    22b4:	72 fc       	sbrc	r7, 2
    22b6:	08 c0       	rjmp	.+16     	; 0x22c8 <__stack+0xc9>
    22b8:	37 2d       	mov	r19, r7
    22ba:	3e 7e       	andi	r19, 0xEE	; 238
    22bc:	05 c0       	rjmp	.+10     	; 0x22c8 <__stack+0xc9>
    22be:	ba 2c       	mov	r11, r10
    22c0:	37 2d       	mov	r19, r7
    22c2:	03 c0       	rjmp	.+6      	; 0x22ca <__stack+0xcb>
    22c4:	ba 2c       	mov	r11, r10
    22c6:	01 c0       	rjmp	.+2      	; 0x22ca <__stack+0xcb>
    22c8:	b5 2c       	mov	r11, r5
    22ca:	34 ff       	sbrs	r19, 4
    22cc:	0d c0       	rjmp	.+26     	; 0x22e8 <__stack+0xe9>
    22ce:	fe 01       	movw	r30, r28
    22d0:	ea 0d       	add	r30, r10
    22d2:	f1 1d       	adc	r31, r1
    22d4:	80 81       	ld	r24, Z
    22d6:	80 33       	cpi	r24, 0x30	; 48
    22d8:	11 f4       	brne	.+4      	; 0x22de <__stack+0xdf>
    22da:	39 7e       	andi	r19, 0xE9	; 233
    22dc:	09 c0       	rjmp	.+18     	; 0x22f0 <__stack+0xf1>
    22de:	32 ff       	sbrs	r19, 2
    22e0:	06 c0       	rjmp	.+12     	; 0x22ee <__stack+0xef>
    22e2:	b3 94       	inc	r11
    22e4:	b3 94       	inc	r11
    22e6:	04 c0       	rjmp	.+8      	; 0x22f0 <__stack+0xf1>
    22e8:	83 2f       	mov	r24, r19
    22ea:	86 78       	andi	r24, 0x86	; 134
    22ec:	09 f0       	breq	.+2      	; 0x22f0 <__stack+0xf1>
    22ee:	b3 94       	inc	r11
    22f0:	33 fd       	sbrc	r19, 3
    22f2:	12 c0       	rjmp	.+36     	; 0x2318 <__stack+0x119>
    22f4:	30 ff       	sbrs	r19, 0
    22f6:	06 c0       	rjmp	.+12     	; 0x2304 <__stack+0x105>
    22f8:	5a 2c       	mov	r5, r10
    22fa:	b3 14       	cp	r11, r3
    22fc:	18 f4       	brcc	.+6      	; 0x2304 <__stack+0x105>
    22fe:	53 0c       	add	r5, r3
    2300:	5b 18       	sub	r5, r11
    2302:	b3 2c       	mov	r11, r3
    2304:	b3 14       	cp	r11, r3
    2306:	60 f4       	brcc	.+24     	; 0x2320 <__stack+0x121>
    2308:	b7 01       	movw	r22, r14
    230a:	80 e2       	ldi	r24, 0x20	; 32
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	3c 87       	std	Y+12, r19	; 0x0c
    2310:	78 d0       	rcall	.+240    	; 0x2402 <fputc>
    2312:	b3 94       	inc	r11
    2314:	3c 85       	ldd	r19, Y+12	; 0x0c
    2316:	f6 cf       	rjmp	.-20     	; 0x2304 <__stack+0x105>
    2318:	b3 14       	cp	r11, r3
    231a:	10 f4       	brcc	.+4      	; 0x2320 <__stack+0x121>
    231c:	3b 18       	sub	r3, r11
    231e:	01 c0       	rjmp	.+2      	; 0x2322 <__stack+0x123>
    2320:	31 2c       	mov	r3, r1
    2322:	34 ff       	sbrs	r19, 4
    2324:	11 c0       	rjmp	.+34     	; 0x2348 <__stack+0x149>
    2326:	b7 01       	movw	r22, r14
    2328:	80 e3       	ldi	r24, 0x30	; 48
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	3c 87       	std	Y+12, r19	; 0x0c
    232e:	69 d0       	rcall	.+210    	; 0x2402 <fputc>
    2330:	3c 85       	ldd	r19, Y+12	; 0x0c
    2332:	32 ff       	sbrs	r19, 2
    2334:	16 c0       	rjmp	.+44     	; 0x2362 <__stack+0x163>
    2336:	31 fd       	sbrc	r19, 1
    2338:	03 c0       	rjmp	.+6      	; 0x2340 <__stack+0x141>
    233a:	88 e7       	ldi	r24, 0x78	; 120
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	02 c0       	rjmp	.+4      	; 0x2344 <__stack+0x145>
    2340:	88 e5       	ldi	r24, 0x58	; 88
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	b7 01       	movw	r22, r14
    2346:	0c c0       	rjmp	.+24     	; 0x2360 <__stack+0x161>
    2348:	83 2f       	mov	r24, r19
    234a:	86 78       	andi	r24, 0x86	; 134
    234c:	51 f0       	breq	.+20     	; 0x2362 <__stack+0x163>
    234e:	31 ff       	sbrs	r19, 1
    2350:	02 c0       	rjmp	.+4      	; 0x2356 <__stack+0x157>
    2352:	8b e2       	ldi	r24, 0x2B	; 43
    2354:	01 c0       	rjmp	.+2      	; 0x2358 <__stack+0x159>
    2356:	80 e2       	ldi	r24, 0x20	; 32
    2358:	37 fd       	sbrc	r19, 7
    235a:	8d e2       	ldi	r24, 0x2D	; 45
    235c:	b7 01       	movw	r22, r14
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	50 d0       	rcall	.+160    	; 0x2402 <fputc>
    2362:	a5 14       	cp	r10, r5
    2364:	30 f4       	brcc	.+12     	; 0x2372 <__stack+0x173>
    2366:	b7 01       	movw	r22, r14
    2368:	80 e3       	ldi	r24, 0x30	; 48
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	4a d0       	rcall	.+148    	; 0x2402 <fputc>
    236e:	5a 94       	dec	r5
    2370:	f8 cf       	rjmp	.-16     	; 0x2362 <__stack+0x163>
    2372:	aa 94       	dec	r10
    2374:	f4 01       	movw	r30, r8
    2376:	ea 0d       	add	r30, r10
    2378:	f1 1d       	adc	r31, r1
    237a:	80 81       	ld	r24, Z
    237c:	b7 01       	movw	r22, r14
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	40 d0       	rcall	.+128    	; 0x2402 <fputc>
    2382:	a1 10       	cpse	r10, r1
    2384:	f6 cf       	rjmp	.-20     	; 0x2372 <__stack+0x173>
    2386:	33 20       	and	r3, r3
    2388:	09 f4       	brne	.+2      	; 0x238c <__stack+0x18d>
    238a:	5d ce       	rjmp	.-838    	; 0x2046 <vfprintf+0x4c>
    238c:	b7 01       	movw	r22, r14
    238e:	80 e2       	ldi	r24, 0x20	; 32
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	37 d0       	rcall	.+110    	; 0x2402 <fputc>
    2394:	3a 94       	dec	r3
    2396:	f7 cf       	rjmp	.-18     	; 0x2386 <__stack+0x187>
    2398:	f7 01       	movw	r30, r14
    239a:	86 81       	ldd	r24, Z+6	; 0x06
    239c:	97 81       	ldd	r25, Z+7	; 0x07
    239e:	02 c0       	rjmp	.+4      	; 0x23a4 <__stack+0x1a5>
    23a0:	8f ef       	ldi	r24, 0xFF	; 255
    23a2:	9f ef       	ldi	r25, 0xFF	; 255
    23a4:	2c 96       	adiw	r28, 0x0c	; 12
    23a6:	0f b6       	in	r0, 0x3f	; 63
    23a8:	f8 94       	cli
    23aa:	de bf       	out	0x3e, r29	; 62
    23ac:	0f be       	out	0x3f, r0	; 63
    23ae:	cd bf       	out	0x3d, r28	; 61
    23b0:	df 91       	pop	r29
    23b2:	cf 91       	pop	r28
    23b4:	1f 91       	pop	r17
    23b6:	0f 91       	pop	r16
    23b8:	ff 90       	pop	r15
    23ba:	ef 90       	pop	r14
    23bc:	df 90       	pop	r13
    23be:	cf 90       	pop	r12
    23c0:	bf 90       	pop	r11
    23c2:	af 90       	pop	r10
    23c4:	9f 90       	pop	r9
    23c6:	8f 90       	pop	r8
    23c8:	7f 90       	pop	r7
    23ca:	6f 90       	pop	r6
    23cc:	5f 90       	pop	r5
    23ce:	4f 90       	pop	r4
    23d0:	3f 90       	pop	r3
    23d2:	2f 90       	pop	r2
    23d4:	08 95       	ret

000023d6 <strnlen_P>:
    23d6:	fc 01       	movw	r30, r24
    23d8:	05 90       	lpm	r0, Z+
    23da:	61 50       	subi	r22, 0x01	; 1
    23dc:	70 40       	sbci	r23, 0x00	; 0
    23de:	01 10       	cpse	r0, r1
    23e0:	d8 f7       	brcc	.-10     	; 0x23d8 <strnlen_P+0x2>
    23e2:	80 95       	com	r24
    23e4:	90 95       	com	r25
    23e6:	8e 0f       	add	r24, r30
    23e8:	9f 1f       	adc	r25, r31
    23ea:	08 95       	ret

000023ec <strnlen>:
    23ec:	fc 01       	movw	r30, r24
    23ee:	61 50       	subi	r22, 0x01	; 1
    23f0:	70 40       	sbci	r23, 0x00	; 0
    23f2:	01 90       	ld	r0, Z+
    23f4:	01 10       	cpse	r0, r1
    23f6:	d8 f7       	brcc	.-10     	; 0x23ee <strnlen+0x2>
    23f8:	80 95       	com	r24
    23fa:	90 95       	com	r25
    23fc:	8e 0f       	add	r24, r30
    23fe:	9f 1f       	adc	r25, r31
    2400:	08 95       	ret

00002402 <fputc>:
    2402:	0f 93       	push	r16
    2404:	1f 93       	push	r17
    2406:	cf 93       	push	r28
    2408:	df 93       	push	r29
    240a:	fb 01       	movw	r30, r22
    240c:	23 81       	ldd	r18, Z+3	; 0x03
    240e:	21 fd       	sbrc	r18, 1
    2410:	03 c0       	rjmp	.+6      	; 0x2418 <fputc+0x16>
    2412:	8f ef       	ldi	r24, 0xFF	; 255
    2414:	9f ef       	ldi	r25, 0xFF	; 255
    2416:	28 c0       	rjmp	.+80     	; 0x2468 <fputc+0x66>
    2418:	22 ff       	sbrs	r18, 2
    241a:	16 c0       	rjmp	.+44     	; 0x2448 <fputc+0x46>
    241c:	46 81       	ldd	r20, Z+6	; 0x06
    241e:	57 81       	ldd	r21, Z+7	; 0x07
    2420:	24 81       	ldd	r18, Z+4	; 0x04
    2422:	35 81       	ldd	r19, Z+5	; 0x05
    2424:	42 17       	cp	r20, r18
    2426:	53 07       	cpc	r21, r19
    2428:	44 f4       	brge	.+16     	; 0x243a <fputc+0x38>
    242a:	a0 81       	ld	r26, Z
    242c:	b1 81       	ldd	r27, Z+1	; 0x01
    242e:	9d 01       	movw	r18, r26
    2430:	2f 5f       	subi	r18, 0xFF	; 255
    2432:	3f 4f       	sbci	r19, 0xFF	; 255
    2434:	31 83       	std	Z+1, r19	; 0x01
    2436:	20 83       	st	Z, r18
    2438:	8c 93       	st	X, r24
    243a:	26 81       	ldd	r18, Z+6	; 0x06
    243c:	37 81       	ldd	r19, Z+7	; 0x07
    243e:	2f 5f       	subi	r18, 0xFF	; 255
    2440:	3f 4f       	sbci	r19, 0xFF	; 255
    2442:	37 83       	std	Z+7, r19	; 0x07
    2444:	26 83       	std	Z+6, r18	; 0x06
    2446:	10 c0       	rjmp	.+32     	; 0x2468 <fputc+0x66>
    2448:	eb 01       	movw	r28, r22
    244a:	09 2f       	mov	r16, r25
    244c:	18 2f       	mov	r17, r24
    244e:	00 84       	ldd	r0, Z+8	; 0x08
    2450:	f1 85       	ldd	r31, Z+9	; 0x09
    2452:	e0 2d       	mov	r30, r0
    2454:	19 95       	eicall
    2456:	89 2b       	or	r24, r25
    2458:	e1 f6       	brne	.-72     	; 0x2412 <fputc+0x10>
    245a:	8e 81       	ldd	r24, Y+6	; 0x06
    245c:	9f 81       	ldd	r25, Y+7	; 0x07
    245e:	01 96       	adiw	r24, 0x01	; 1
    2460:	9f 83       	std	Y+7, r25	; 0x07
    2462:	8e 83       	std	Y+6, r24	; 0x06
    2464:	81 2f       	mov	r24, r17
    2466:	90 2f       	mov	r25, r16
    2468:	df 91       	pop	r29
    246a:	cf 91       	pop	r28
    246c:	1f 91       	pop	r17
    246e:	0f 91       	pop	r16
    2470:	08 95       	ret

00002472 <__ultoa_invert>:
    2472:	fa 01       	movw	r30, r20
    2474:	aa 27       	eor	r26, r26
    2476:	28 30       	cpi	r18, 0x08	; 8
    2478:	51 f1       	breq	.+84     	; 0x24ce <__ultoa_invert+0x5c>
    247a:	20 31       	cpi	r18, 0x10	; 16
    247c:	81 f1       	breq	.+96     	; 0x24de <__ultoa_invert+0x6c>
    247e:	e8 94       	clt
    2480:	6f 93       	push	r22
    2482:	6e 7f       	andi	r22, 0xFE	; 254
    2484:	6e 5f       	subi	r22, 0xFE	; 254
    2486:	7f 4f       	sbci	r23, 0xFF	; 255
    2488:	8f 4f       	sbci	r24, 0xFF	; 255
    248a:	9f 4f       	sbci	r25, 0xFF	; 255
    248c:	af 4f       	sbci	r26, 0xFF	; 255
    248e:	b1 e0       	ldi	r27, 0x01	; 1
    2490:	3e d0       	rcall	.+124    	; 0x250e <__ultoa_invert+0x9c>
    2492:	b4 e0       	ldi	r27, 0x04	; 4
    2494:	3c d0       	rcall	.+120    	; 0x250e <__ultoa_invert+0x9c>
    2496:	67 0f       	add	r22, r23
    2498:	78 1f       	adc	r23, r24
    249a:	89 1f       	adc	r24, r25
    249c:	9a 1f       	adc	r25, r26
    249e:	a1 1d       	adc	r26, r1
    24a0:	68 0f       	add	r22, r24
    24a2:	79 1f       	adc	r23, r25
    24a4:	8a 1f       	adc	r24, r26
    24a6:	91 1d       	adc	r25, r1
    24a8:	a1 1d       	adc	r26, r1
    24aa:	6a 0f       	add	r22, r26
    24ac:	71 1d       	adc	r23, r1
    24ae:	81 1d       	adc	r24, r1
    24b0:	91 1d       	adc	r25, r1
    24b2:	a1 1d       	adc	r26, r1
    24b4:	20 d0       	rcall	.+64     	; 0x24f6 <__ultoa_invert+0x84>
    24b6:	09 f4       	brne	.+2      	; 0x24ba <__ultoa_invert+0x48>
    24b8:	68 94       	set
    24ba:	3f 91       	pop	r19
    24bc:	2a e0       	ldi	r18, 0x0A	; 10
    24be:	26 9f       	mul	r18, r22
    24c0:	11 24       	eor	r1, r1
    24c2:	30 19       	sub	r19, r0
    24c4:	30 5d       	subi	r19, 0xD0	; 208
    24c6:	31 93       	st	Z+, r19
    24c8:	de f6       	brtc	.-74     	; 0x2480 <__ultoa_invert+0xe>
    24ca:	cf 01       	movw	r24, r30
    24cc:	08 95       	ret
    24ce:	46 2f       	mov	r20, r22
    24d0:	47 70       	andi	r20, 0x07	; 7
    24d2:	40 5d       	subi	r20, 0xD0	; 208
    24d4:	41 93       	st	Z+, r20
    24d6:	b3 e0       	ldi	r27, 0x03	; 3
    24d8:	0f d0       	rcall	.+30     	; 0x24f8 <__ultoa_invert+0x86>
    24da:	c9 f7       	brne	.-14     	; 0x24ce <__ultoa_invert+0x5c>
    24dc:	f6 cf       	rjmp	.-20     	; 0x24ca <__ultoa_invert+0x58>
    24de:	46 2f       	mov	r20, r22
    24e0:	4f 70       	andi	r20, 0x0F	; 15
    24e2:	40 5d       	subi	r20, 0xD0	; 208
    24e4:	4a 33       	cpi	r20, 0x3A	; 58
    24e6:	18 f0       	brcs	.+6      	; 0x24ee <__ultoa_invert+0x7c>
    24e8:	49 5d       	subi	r20, 0xD9	; 217
    24ea:	31 fd       	sbrc	r19, 1
    24ec:	40 52       	subi	r20, 0x20	; 32
    24ee:	41 93       	st	Z+, r20
    24f0:	02 d0       	rcall	.+4      	; 0x24f6 <__ultoa_invert+0x84>
    24f2:	a9 f7       	brne	.-22     	; 0x24de <__ultoa_invert+0x6c>
    24f4:	ea cf       	rjmp	.-44     	; 0x24ca <__ultoa_invert+0x58>
    24f6:	b4 e0       	ldi	r27, 0x04	; 4
    24f8:	a6 95       	lsr	r26
    24fa:	97 95       	ror	r25
    24fc:	87 95       	ror	r24
    24fe:	77 95       	ror	r23
    2500:	67 95       	ror	r22
    2502:	ba 95       	dec	r27
    2504:	c9 f7       	brne	.-14     	; 0x24f8 <__ultoa_invert+0x86>
    2506:	00 97       	sbiw	r24, 0x00	; 0
    2508:	61 05       	cpc	r22, r1
    250a:	71 05       	cpc	r23, r1
    250c:	08 95       	ret
    250e:	9b 01       	movw	r18, r22
    2510:	ac 01       	movw	r20, r24
    2512:	0a 2e       	mov	r0, r26
    2514:	06 94       	lsr	r0
    2516:	57 95       	ror	r21
    2518:	47 95       	ror	r20
    251a:	37 95       	ror	r19
    251c:	27 95       	ror	r18
    251e:	ba 95       	dec	r27
    2520:	c9 f7       	brne	.-14     	; 0x2514 <__ultoa_invert+0xa2>
    2522:	62 0f       	add	r22, r18
    2524:	73 1f       	adc	r23, r19
    2526:	84 1f       	adc	r24, r20
    2528:	95 1f       	adc	r25, r21
    252a:	a0 1d       	adc	r26, r0
    252c:	08 95       	ret

0000252e <_exit>:
    252e:	f8 94       	cli

00002530 <__stop_program>:
    2530:	ff cf       	rjmp	.-2      	; 0x2530 <__stop_program>
