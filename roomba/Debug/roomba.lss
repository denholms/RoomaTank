
roomba.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800200  000025bc  00002650  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001328  00800246  00800246  00002696  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002696  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000026f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000468  00000000  00000000  00002738  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005af9  00000000  00000000  00002ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015a8  00000000  00000000  00008699  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000029d7  00000000  00000000  00009c41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b64  00000000  00000000  0000c618  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000128b  00000000  00000000  0000d17c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002bfc  00000000  00000000  0000e407  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000470  00000000  00000000  00011003  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c0       	rjmp	.+252    	; 0xfe <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 36 0e 	jmp	0x1c6c	; 0x1c6c <__vector_1>
       8:	9b c0       	rjmp	.+310    	; 0x140 <__bad_interrupt>
       a:	00 00       	nop
       c:	99 c0       	rjmp	.+306    	; 0x140 <__bad_interrupt>
       e:	00 00       	nop
      10:	97 c0       	rjmp	.+302    	; 0x140 <__bad_interrupt>
      12:	00 00       	nop
      14:	95 c0       	rjmp	.+298    	; 0x140 <__bad_interrupt>
      16:	00 00       	nop
      18:	93 c0       	rjmp	.+294    	; 0x140 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	91 c0       	rjmp	.+290    	; 0x140 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8f c0       	rjmp	.+286    	; 0x140 <__bad_interrupt>
      22:	00 00       	nop
      24:	8d c0       	rjmp	.+282    	; 0x140 <__bad_interrupt>
      26:	00 00       	nop
      28:	8b c0       	rjmp	.+278    	; 0x140 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	89 c0       	rjmp	.+274    	; 0x140 <__bad_interrupt>
      2e:	00 00       	nop
      30:	87 c0       	rjmp	.+270    	; 0x140 <__bad_interrupt>
      32:	00 00       	nop
      34:	85 c0       	rjmp	.+266    	; 0x140 <__bad_interrupt>
      36:	00 00       	nop
      38:	83 c0       	rjmp	.+262    	; 0x140 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	81 c0       	rjmp	.+258    	; 0x140 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7f c0       	rjmp	.+254    	; 0x140 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 f2 0a 	jmp	0x15e4	; 0x15e4 <__vector_17>
      48:	7b c0       	rjmp	.+246    	; 0x140 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	79 c0       	rjmp	.+242    	; 0x140 <__bad_interrupt>
      4e:	00 00       	nop
      50:	77 c0       	rjmp	.+238    	; 0x140 <__bad_interrupt>
      52:	00 00       	nop
      54:	75 c0       	rjmp	.+234    	; 0x140 <__bad_interrupt>
      56:	00 00       	nop
      58:	73 c0       	rjmp	.+230    	; 0x140 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	71 c0       	rjmp	.+226    	; 0x140 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6f c0       	rjmp	.+222    	; 0x140 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 95 0f 	jmp	0x1f2a	; 0x1f2a <__vector_25>
      68:	6b c0       	rjmp	.+214    	; 0x140 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	69 c0       	rjmp	.+210    	; 0x140 <__bad_interrupt>
      6e:	00 00       	nop
      70:	67 c0       	rjmp	.+206    	; 0x140 <__bad_interrupt>
      72:	00 00       	nop
      74:	65 c0       	rjmp	.+202    	; 0x140 <__bad_interrupt>
      76:	00 00       	nop
      78:	63 c0       	rjmp	.+198    	; 0x140 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	61 c0       	rjmp	.+194    	; 0x140 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <__vector_32>
      84:	5d c0       	rjmp	.+186    	; 0x140 <__bad_interrupt>
      86:	00 00       	nop
      88:	5b c0       	rjmp	.+182    	; 0x140 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	59 c0       	rjmp	.+178    	; 0x140 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__vector_36>
      94:	55 c0       	rjmp	.+170    	; 0x140 <__bad_interrupt>
      96:	00 00       	nop
      98:	53 c0       	rjmp	.+166    	; 0x140 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	51 c0       	rjmp	.+162    	; 0x140 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4f c0       	rjmp	.+158    	; 0x140 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4d c0       	rjmp	.+154    	; 0x140 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4b c0       	rjmp	.+150    	; 0x140 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	49 c0       	rjmp	.+146    	; 0x140 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	47 c0       	rjmp	.+142    	; 0x140 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	45 c0       	rjmp	.+138    	; 0x140 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	43 c0       	rjmp	.+134    	; 0x140 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	41 c0       	rjmp	.+130    	; 0x140 <__bad_interrupt>
      be:	00 00       	nop
      c0:	3f c0       	rjmp	.+126    	; 0x140 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3d c0       	rjmp	.+122    	; 0x140 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3b c0       	rjmp	.+118    	; 0x140 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	39 c0       	rjmp	.+114    	; 0x140 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	37 c0       	rjmp	.+110    	; 0x140 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	35 c0       	rjmp	.+106    	; 0x140 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	33 c0       	rjmp	.+102    	; 0x140 <__bad_interrupt>
      da:	00 00       	nop
      dc:	31 c0       	rjmp	.+98     	; 0x140 <__bad_interrupt>
      de:	00 00       	nop
      e0:	2f c0       	rjmp	.+94     	; 0x140 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b7 06       	cpc	r11, r23
      e6:	9d 06       	cpc	r9, r29
      e8:	b7 06       	cpc	r11, r23
      ea:	c6 06       	cpc	r12, r22
      ec:	6b 07       	cpc	r22, r27
      ee:	d5 06       	cpc	r13, r21
      f0:	8e 06       	cpc	r8, r30
      f2:	be 07       	cpc	r27, r30
      f4:	f3 07       	cpc	r31, r19
      f6:	95 08       	sbc	r9, r5
      f8:	97 08       	sbc	r9, r7
      fa:	cd 08       	sbc	r12, r13
      fc:	44 09       	sbc	r20, r4

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d1 e2       	ldi	r29, 0x21	; 33
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0c bf       	out	0x3c, r16	; 60

0000010e <__do_copy_data>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a0 e0       	ldi	r26, 0x00	; 0
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	ec eb       	ldi	r30, 0xBC	; 188
     116:	f5 e2       	ldi	r31, 0x25	; 37
     118:	00 e0       	ldi	r16, 0x00	; 0
     11a:	0b bf       	out	0x3b, r16	; 59
     11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x14>
     11e:	07 90       	elpm	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	a6 34       	cpi	r26, 0x46	; 70
     124:	b1 07       	cpc	r27, r17
     126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0x10>

00000128 <__do_clear_bss>:
     128:	25 e1       	ldi	r18, 0x15	; 21
     12a:	a6 e4       	ldi	r26, 0x46	; 70
     12c:	b2 e0       	ldi	r27, 0x02	; 2
     12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
     130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
     132:	ae 36       	cpi	r26, 0x6E	; 110
     134:	b2 07       	cpc	r27, r18
     136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>
     138:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <main>
     13c:	0c 94 dc 12 	jmp	0x25b8	; 0x25b8 <_exit>

00000140 <__bad_interrupt>:
     140:	5f cf       	rjmp	.-322    	; 0x0 <__vectors>

00000142 <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
     142:	0f 92       	push	r0
     144:	1f 92       	push	r1
     146:	2f 92       	push	r2
     148:	3f 92       	push	r3
     14a:	4f 92       	push	r4
     14c:	5f 92       	push	r5
     14e:	6f 92       	push	r6
     150:	7f 92       	push	r7
     152:	8f 92       	push	r8
     154:	9f 92       	push	r9
     156:	af 92       	push	r10
     158:	bf 92       	push	r11
     15a:	cf 92       	push	r12
     15c:	df 92       	push	r13
     15e:	ef 92       	push	r14
     160:	ff 92       	push	r15
     162:	0f 93       	push	r16
     164:	1f 93       	push	r17
     166:	2f 93       	push	r18
     168:	3f 93       	push	r19
     16a:	4f 93       	push	r20
     16c:	5f 93       	push	r21
     16e:	6f 93       	push	r22
     170:	7f 93       	push	r23
     172:	8f 93       	push	r24
     174:	9f 93       	push	r25
     176:	af 93       	push	r26
     178:	bf 93       	push	r27
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	ef 93       	push	r30
     180:	ff 93       	push	r31
     182:	0f b7       	in	r16, 0x3f	; 63
     184:	0f 93       	push	r16
     186:	fc b7       	in	r31, 0x3c	; 60
     188:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
     18a:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     18c:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
     18e:	e0 93 6b 15 	sts	0x156B, r30
        sts  KernelSp+1, r31
     192:	f0 93 6c 15 	sts	0x156C, r31
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
     196:	e0 91 49 15 	lds	r30, 0x1549
        lds  r31, CurrentSp+1
     19a:	f0 91 4a 15 	lds	r31, 0x154A
        out  SPL, r30
     19e:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     1a0:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
     1a2:	ff 91       	pop	r31
     1a4:	fc bf       	out	0x3c, r31	; 60
     1a6:	0f 91       	pop	r16
     1a8:	0f bf       	out	0x3f, r16	; 63
     1aa:	ff 91       	pop	r31
     1ac:	ef 91       	pop	r30
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	bf 91       	pop	r27
     1b4:	af 91       	pop	r26
     1b6:	9f 91       	pop	r25
     1b8:	8f 91       	pop	r24
     1ba:	7f 91       	pop	r23
     1bc:	6f 91       	pop	r22
     1be:	5f 91       	pop	r21
     1c0:	4f 91       	pop	r20
     1c2:	3f 91       	pop	r19
     1c4:	2f 91       	pop	r18
     1c6:	1f 91       	pop	r17
     1c8:	0f 91       	pop	r16
     1ca:	ff 90       	pop	r15
     1cc:	ef 90       	pop	r14
     1ce:	df 90       	pop	r13
     1d0:	cf 90       	pop	r12
     1d2:	bf 90       	pop	r11
     1d4:	af 90       	pop	r10
     1d6:	9f 90       	pop	r9
     1d8:	8f 90       	pop	r8
     1da:	7f 90       	pop	r7
     1dc:	6f 90       	pop	r6
     1de:	5f 90       	pop	r5
     1e0:	4f 90       	pop	r4
     1e2:	3f 90       	pop	r3
     1e4:	2f 90       	pop	r2
     1e6:	1f 90       	pop	r1
     1e8:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
     1ea:	18 95       	reti

000001ec <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
     1ec:	0f 92       	push	r0
     1ee:	1f 92       	push	r1
     1f0:	2f 92       	push	r2
     1f2:	3f 92       	push	r3
     1f4:	4f 92       	push	r4
     1f6:	5f 92       	push	r5
     1f8:	6f 92       	push	r6
     1fa:	7f 92       	push	r7
     1fc:	8f 92       	push	r8
     1fe:	9f 92       	push	r9
     200:	af 92       	push	r10
     202:	bf 92       	push	r11
     204:	cf 92       	push	r12
     206:	df 92       	push	r13
     208:	ef 92       	push	r14
     20a:	ff 92       	push	r15
     20c:	0f 93       	push	r16
     20e:	1f 93       	push	r17
     210:	2f 93       	push	r18
     212:	3f 93       	push	r19
     214:	4f 93       	push	r20
     216:	5f 93       	push	r21
     218:	6f 93       	push	r22
     21a:	7f 93       	push	r23
     21c:	8f 93       	push	r24
     21e:	9f 93       	push	r25
     220:	af 93       	push	r26
     222:	bf 93       	push	r27
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	ef 93       	push	r30
     22a:	ff 93       	push	r31
     22c:	0f b7       	in	r16, 0x3f	; 63
     22e:	0f 93       	push	r16
     230:	fc b7       	in	r31, 0x3c	; 60
     232:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
     234:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     236:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
     238:	e0 93 49 15 	sts	0x1549, r30
        sts  CurrentSp+1, r31
     23c:	f0 93 4a 15 	sts	0x154A, r31
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
     240:	e0 91 6b 15 	lds	r30, 0x156B
        lds  r31, KernelSp+1
     244:	f0 91 6c 15 	lds	r31, 0x156C
        out  SPL, r30
     248:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     24a:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
     24c:	ff 91       	pop	r31
     24e:	fc bf       	out	0x3c, r31	; 60
     250:	0f 91       	pop	r16
     252:	0f bf       	out	0x3f, r16	; 63
     254:	ff 91       	pop	r31
     256:	ef 91       	pop	r30
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	bf 91       	pop	r27
     25e:	af 91       	pop	r26
     260:	9f 91       	pop	r25
     262:	8f 91       	pop	r24
     264:	7f 91       	pop	r23
     266:	6f 91       	pop	r22
     268:	5f 91       	pop	r21
     26a:	4f 91       	pop	r20
     26c:	3f 91       	pop	r19
     26e:	2f 91       	pop	r18
     270:	1f 91       	pop	r17
     272:	0f 91       	pop	r16
     274:	ff 90       	pop	r15
     276:	ef 90       	pop	r14
     278:	df 90       	pop	r13
     27a:	cf 90       	pop	r12
     27c:	bf 90       	pop	r11
     27e:	af 90       	pop	r10
     280:	9f 90       	pop	r9
     282:	8f 90       	pop	r8
     284:	7f 90       	pop	r7
     286:	6f 90       	pop	r6
     288:	5f 90       	pop	r5
     28a:	4f 90       	pop	r4
     28c:	3f 90       	pop	r3
     28e:	2f 90       	pop	r2
     290:	1f 90       	pop	r1
     292:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
     294:	08 95       	ret

00000296 <adc_init>:

// initialize adc
void adc_init()
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
     296:	80 e4       	ldi	r24, 0x40	; 64
     298:	80 93 7c 00 	sts	0x007C, r24
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     29c:	87 e8       	ldi	r24, 0x87	; 135
     29e:	80 93 7a 00 	sts	0x007A, r24
     2a2:	08 95       	ret

000002a4 <adc_read>:
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     2a4:	ec e7       	ldi	r30, 0x7C	; 124
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	90 81       	ld	r25, Z
uint16_t adc_read(uint8_t ch)
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
     2aa:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     2ac:	98 7f       	andi	r25, 0xF8	; 248
     2ae:	89 2b       	or	r24, r25
     2b0:	80 83       	st	Z, r24
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
     2b2:	ea e7       	ldi	r30, 0x7A	; 122
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	80 81       	ld	r24, Z
     2b8:	80 64       	ori	r24, 0x40	; 64
     2ba:	80 83       	st	Z, r24
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
     2bc:	80 81       	ld	r24, Z
     2be:	86 fd       	sbrc	r24, 6
     2c0:	fd cf       	rjmp	.-6      	; 0x2bc <adc_read+0x18>
	
	return (ADC);
     2c2:	80 91 78 00 	lds	r24, 0x0078
     2c6:	90 91 79 00 	lds	r25, 0x0079
}
     2ca:	08 95       	ret

000002cc <radio_rxhandler>:
	return 0;
}

void radio_rxhandler(uint8_t pipenumber)
{
	rxflag = 1;
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	80 93 46 02 	sts	0x0246, r24
	PORTL ^= _BV(PL7);
     2d2:	eb e0       	ldi	r30, 0x0B	; 11
     2d4:	f1 e0       	ldi	r31, 0x01	; 1
     2d6:	80 81       	ld	r24, Z
     2d8:	80 58       	subi	r24, 0x80	; 128
     2da:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2dc:	83 ed       	ldi	r24, 0xD3	; 211
     2de:	90 e3       	ldi	r25, 0x30	; 48
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <radio_rxhandler+0x14>
     2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <radio_rxhandler+0x1a>
     2e6:	00 00       	nop
	_delay_ms(50);
	PORTL ^= _BV(PL7);
     2e8:	80 81       	ld	r24, Z
     2ea:	80 58       	subi	r24, 0x80	; 128
     2ec:	80 83       	st	Z, r24
     2ee:	08 95       	ret

000002f0 <lcd_nibble>:

void lcd_blank( uint8_t len )                   // blank n digits
{
  while( len-- )
    lcd_putchar( ' ' );
}
     2f0:	e2 e0       	ldi	r30, 0x02	; 2
     2f2:	f1 e0       	ldi	r31, 0x01	; 1
     2f4:	90 81       	ld	r25, Z
     2f6:	9f 7e       	andi	r25, 0xEF	; 239
     2f8:	90 83       	st	Z, r25
     2fa:	88 23       	and	r24, r24
     2fc:	1c f4       	brge	.+6      	; 0x304 <lcd_nibble+0x14>
     2fe:	90 81       	ld	r25, Z
     300:	90 61       	ori	r25, 0x10	; 16
     302:	90 83       	st	Z, r25
     304:	e2 e0       	ldi	r30, 0x02	; 2
     306:	f1 e0       	ldi	r31, 0x01	; 1
     308:	90 81       	ld	r25, Z
     30a:	97 7f       	andi	r25, 0xF7	; 247
     30c:	90 83       	st	Z, r25
     30e:	86 ff       	sbrs	r24, 6
     310:	03 c0       	rjmp	.+6      	; 0x318 <lcd_nibble+0x28>
     312:	90 81       	ld	r25, Z
     314:	98 60       	ori	r25, 0x08	; 8
     316:	90 83       	st	Z, r25
     318:	73 98       	cbi	0x0e, 3	; 14
     31a:	85 fd       	sbrc	r24, 5
     31c:	73 9a       	sbi	0x0e, 3	; 14
     31e:	a5 98       	cbi	0x14, 5	; 20
     320:	84 fd       	sbrc	r24, 4
     322:	a5 9a       	sbi	0x14, 5	; 20
     324:	e2 e0       	ldi	r30, 0x02	; 2
     326:	f1 e0       	ldi	r31, 0x01	; 1
     328:	80 81       	ld	r24, Z
     32a:	80 64       	ori	r24, 0x40	; 64
     32c:	80 83       	st	Z, r24
     32e:	85 e0       	ldi	r24, 0x05	; 5
     330:	8a 95       	dec	r24
     332:	f1 f7       	brne	.-4      	; 0x330 <lcd_nibble+0x40>
     334:	00 00       	nop
     336:	80 81       	ld	r24, Z
     338:	8f 7b       	andi	r24, 0xBF	; 191
     33a:	80 83       	st	Z, r24
     33c:	08 95       	ret

0000033e <lcd_command>:
     33e:	cf 93       	push	r28
     340:	c8 2f       	mov	r28, r24
     342:	e2 e0       	ldi	r30, 0x02	; 2
     344:	f1 e0       	ldi	r31, 0x01	; 1
     346:	80 81       	ld	r24, Z
     348:	8f 7d       	andi	r24, 0xDF	; 223
     34a:	80 83       	st	Z, r24
     34c:	8c 2f       	mov	r24, r28
     34e:	d0 df       	rcall	.-96     	; 0x2f0 <lcd_nibble>
     350:	8c 2f       	mov	r24, r28
     352:	82 95       	swap	r24
     354:	80 7f       	andi	r24, 0xF0	; 240
     356:	cc df       	rcall	.-104    	; 0x2f0 <lcd_nibble>
     358:	87 ec       	ldi	r24, 0xC7	; 199
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	01 97       	sbiw	r24, 0x01	; 1
     35e:	f1 f7       	brne	.-4      	; 0x35c <lcd_command+0x1e>
     360:	00 c0       	rjmp	.+0      	; 0x362 <lcd_command+0x24>
     362:	00 00       	nop
     364:	c4 30       	cpi	r28, 0x04	; 4
     366:	18 f0       	brcs	.+6      	; 0x36e <lcd_command+0x30>
     368:	c0 38       	cpi	r28, 0x80	; 128
     36a:	50 f0       	brcs	.+20     	; 0x380 <lcd_command+0x42>
     36c:	07 c0       	rjmp	.+14     	; 0x37c <lcd_command+0x3e>
     36e:	8f e3       	ldi	r24, 0x3F	; 63
     370:	9f e1       	ldi	r25, 0x1F	; 31
     372:	01 97       	sbiw	r24, 0x01	; 1
     374:	f1 f7       	brne	.-4      	; 0x372 <lcd_command+0x34>
     376:	00 c0       	rjmp	.+0      	; 0x378 <lcd_command+0x3a>
     378:	00 00       	nop
     37a:	c0 e8       	ldi	r28, 0x80	; 128
     37c:	c0 93 00 02 	sts	0x0200, r28
     380:	cf 91       	pop	r28
     382:	08 95       	ret

00000384 <lcd_putchar>:
     384:	cf 93       	push	r28
     386:	c8 2f       	mov	r28, r24
     388:	e2 e0       	ldi	r30, 0x02	; 2
     38a:	f1 e0       	ldi	r31, 0x01	; 1
     38c:	80 81       	ld	r24, Z
     38e:	80 62       	ori	r24, 0x20	; 32
     390:	80 83       	st	Z, r24
     392:	8c 2f       	mov	r24, r28
     394:	ad df       	rcall	.-166    	; 0x2f0 <lcd_nibble>
     396:	8c 2f       	mov	r24, r28
     398:	82 95       	swap	r24
     39a:	80 7f       	andi	r24, 0xF0	; 240
     39c:	a9 df       	rcall	.-174    	; 0x2f0 <lcd_nibble>
     39e:	87 ec       	ldi	r24, 0xC7	; 199
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	01 97       	sbiw	r24, 0x01	; 1
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <lcd_putchar+0x1e>
     3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <lcd_putchar+0x24>
     3a8:	00 00       	nop
     3aa:	80 91 00 02 	lds	r24, 0x0200
     3ae:	8f 5f       	subi	r24, 0xFF	; 255
     3b0:	80 93 00 02 	sts	0x0200, r24
     3b4:	80 39       	cpi	r24, 0x90	; 144
     3b6:	21 f0       	breq	.+8      	; 0x3c0 <lcd_putchar+0x3c>
     3b8:	80 3d       	cpi	r24, 0xD0	; 208
     3ba:	21 f4       	brne	.+8      	; 0x3c4 <lcd_putchar+0x40>
     3bc:	80 e8       	ldi	r24, 0x80	; 128
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <lcd_putchar+0x3e>
     3c0:	80 ec       	ldi	r24, 0xC0	; 192
     3c2:	bd df       	rcall	.-134    	; 0x33e <lcd_command>
     3c4:	cf 91       	pop	r28
     3c6:	08 95       	ret

000003c8 <lcd_puts>:
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	ec 01       	movw	r28, r24
     3ce:	88 81       	ld	r24, Y
     3d0:	88 23       	and	r24, r24
     3d2:	29 f0       	breq	.+10     	; 0x3de <lcd_puts+0x16>
     3d4:	21 96       	adiw	r28, 0x01	; 1
     3d6:	d6 df       	rcall	.-84     	; 0x384 <lcd_putchar>
     3d8:	89 91       	ld	r24, Y+
     3da:	81 11       	cpse	r24, r1
     3dc:	fc cf       	rjmp	.-8      	; 0x3d6 <lcd_puts+0xe>
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	08 95       	ret

000003e4 <lcd_init>:


void lcd_init( void )
{
  LCD_DDR_D4 = 1;                               // enable output pins
     3e4:	9d 9a       	sbi	0x13, 5	; 19
  LCD_DDR_D5 = 1;
     3e6:	6b 9a       	sbi	0x0d, 3	; 13
  LCD_DDR_D6 = 1;
     3e8:	e1 e0       	ldi	r30, 0x01	; 1
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	80 81       	ld	r24, Z
     3ee:	88 60       	ori	r24, 0x08	; 8
     3f0:	80 83       	st	Z, r24
  LCD_DDR_D7 = 1;
     3f2:	80 81       	ld	r24, Z
     3f4:	80 61       	ori	r24, 0x10	; 16
     3f6:	80 83       	st	Z, r24
  LCD_DDR_RS = 1;
     3f8:	80 81       	ld	r24, Z
     3fa:	80 62       	ori	r24, 0x20	; 32
     3fc:	80 83       	st	Z, r24
  LCD_DDR_E0 = 1;
     3fe:	80 81       	ld	r24, Z
     400:	80 64       	ori	r24, 0x40	; 64
     402:	80 83       	st	Z, r24
  LCD_E0 = 0;
     404:	e2 e0       	ldi	r30, 0x02	; 2
     406:	f1 e0       	ldi	r31, 0x01	; 1
     408:	80 81       	ld	r24, Z
     40a:	8f 7b       	andi	r24, 0xBF	; 191
     40c:	80 83       	st	Z, r24
  LCD_RS = 0;                                   // send commands
     40e:	80 81       	ld	r24, Z
     410:	8f 7d       	andi	r24, 0xDF	; 223
     412:	80 83       	st	Z, r24
     414:	8f e5       	ldi	r24, 0x5F	; 95
     416:	9a ee       	ldi	r25, 0xEA	; 234
     418:	01 97       	sbiw	r24, 0x01	; 1
     41a:	f1 f7       	brne	.-4      	; 0x418 <lcd_init+0x34>
     41c:	00 c0       	rjmp	.+0      	; 0x41e <lcd_init+0x3a>
     41e:	00 00       	nop

  _delay_ms( 15 );
  lcd_nibble( 0x30 );
     420:	80 e3       	ldi	r24, 0x30	; 48
     422:	66 df       	rcall	.-308    	; 0x2f0 <lcd_nibble>
     424:	8f e0       	ldi	r24, 0x0F	; 15
     426:	90 e4       	ldi	r25, 0x40	; 64
     428:	01 97       	sbiw	r24, 0x01	; 1
     42a:	f1 f7       	brne	.-4      	; 0x428 <lcd_init+0x44>
     42c:	00 c0       	rjmp	.+0      	; 0x42e <lcd_init+0x4a>
     42e:	00 00       	nop
  _delay_ms( 4.1 );
  lcd_nibble( 0x30 );
     430:	80 e3       	ldi	r24, 0x30	; 48
     432:	5e df       	rcall	.-324    	; 0x2f0 <lcd_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     434:	8f e8       	ldi	r24, 0x8F	; 143
     436:	91 e0       	ldi	r25, 0x01	; 1
     438:	01 97       	sbiw	r24, 0x01	; 1
     43a:	f1 f7       	brne	.-4      	; 0x438 <lcd_init+0x54>
     43c:	00 c0       	rjmp	.+0      	; 0x43e <lcd_init+0x5a>
     43e:	00 00       	nop
  _delay_us( 100 );
  lcd_nibble( 0x30 );
     440:	80 e3       	ldi	r24, 0x30	; 48
     442:	56 df       	rcall	.-340    	; 0x2f0 <lcd_nibble>
     444:	87 ec       	ldi	r24, 0xC7	; 199
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	01 97       	sbiw	r24, 0x01	; 1
     44a:	f1 f7       	brne	.-4      	; 0x448 <lcd_init+0x64>
     44c:	00 c0       	rjmp	.+0      	; 0x44e <lcd_init+0x6a>
     44e:	00 00       	nop
  _delay_us( LCD_TIME_DAT );
  lcd_nibble( 0x20 );                           // 4 bit mode
     450:	80 e2       	ldi	r24, 0x20	; 32
     452:	4e df       	rcall	.-356    	; 0x2f0 <lcd_nibble>
     454:	87 ec       	ldi	r24, 0xC7	; 199
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	01 97       	sbiw	r24, 0x01	; 1
     45a:	f1 f7       	brne	.-4      	; 0x458 <lcd_init+0x74>
     45c:	00 c0       	rjmp	.+0      	; 0x45e <lcd_init+0x7a>
     45e:	00 00       	nop
  _delay_us( LCD_TIME_DAT );
#if LCD_LINE == 1
  lcd_command( 0x20 );                          // 1 line
#else
  lcd_command( 0x28 );                          // 2 lines 5*7
     460:	88 e2       	ldi	r24, 0x28	; 40
     462:	6d df       	rcall	.-294    	; 0x33e <lcd_command>
#endif
  lcd_command( 0x08 );                          // display off
     464:	88 e0       	ldi	r24, 0x08	; 8
     466:	6b df       	rcall	.-298    	; 0x33e <lcd_command>
  lcd_command( 0x01 );                          // display clear
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	69 df       	rcall	.-302    	; 0x33e <lcd_command>
  lcd_command( 0x06 );                          // cursor increment
     46c:	86 e0       	ldi	r24, 0x06	; 6
     46e:	67 df       	rcall	.-306    	; 0x33e <lcd_command>
  lcd_command( 0x0C );                          // on, no cursor, no blink
     470:	8c e0       	ldi	r24, 0x0C	; 12
     472:	65 cf       	rjmp	.-310    	; 0x33e <lcd_command>
     474:	08 95       	ret

00000476 <init_LED_PORTL_pin0>:
void init_LED_PORTL_pin6(void) {
    DDRL |= _BV(DDL6);
}

void init_LED_PORTL_pin7(void) {
    DDRL |= _BV(DDL7);
     476:	ea e0       	ldi	r30, 0x0A	; 10
     478:	f1 e0       	ldi	r31, 0x01	; 1
     47a:	80 81       	ld	r24, Z
     47c:	81 60       	ori	r24, 0x01	; 1
     47e:	80 83       	st	Z, r24
     480:	08 95       	ret

00000482 <init_LED_PORTL_pin1>:
     482:	ea e0       	ldi	r30, 0x0A	; 10
     484:	f1 e0       	ldi	r31, 0x01	; 1
     486:	80 81       	ld	r24, Z
     488:	82 60       	ori	r24, 0x02	; 2
     48a:	80 83       	st	Z, r24
     48c:	08 95       	ret

0000048e <init_LED_PORTL_pin2>:
     48e:	ea e0       	ldi	r30, 0x0A	; 10
     490:	f1 e0       	ldi	r31, 0x01	; 1
     492:	80 81       	ld	r24, Z
     494:	84 60       	ori	r24, 0x04	; 4
     496:	80 83       	st	Z, r24
     498:	08 95       	ret

0000049a <init_LED_PORTL_pin5>:
     49a:	ea e0       	ldi	r30, 0x0A	; 10
     49c:	f1 e0       	ldi	r31, 0x01	; 1
     49e:	80 81       	ld	r24, Z
     4a0:	80 62       	ori	r24, 0x20	; 32
     4a2:	80 83       	st	Z, r24
     4a4:	08 95       	ret

000004a6 <init_LED_PORTL_pin6>:
     4a6:	ea e0       	ldi	r30, 0x0A	; 10
     4a8:	f1 e0       	ldi	r31, 0x01	; 1
     4aa:	80 81       	ld	r24, Z
     4ac:	80 64       	ori	r24, 0x40	; 64
     4ae:	80 83       	st	Z, r24
     4b0:	08 95       	ret

000004b2 <enable_LED>:
}

void enable_LED(unsigned int mask) {
    PORTL |= _BV(mask);
     4b2:	eb e0       	ldi	r30, 0x0B	; 11
     4b4:	f1 e0       	ldi	r31, 0x01	; 1
     4b6:	90 81       	ld	r25, Z
     4b8:	21 e0       	ldi	r18, 0x01	; 1
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <enable_LED+0x10>
     4be:	22 0f       	add	r18, r18
     4c0:	33 1f       	adc	r19, r19
     4c2:	8a 95       	dec	r24
     4c4:	e2 f7       	brpl	.-8      	; 0x4be <enable_LED+0xc>
     4c6:	29 2b       	or	r18, r25
     4c8:	20 83       	st	Z, r18
     4ca:	08 95       	ret

000004cc <disable_LED>:
}

void disable_LED(unsigned int mask) {
    PORTL &= ~_BV(mask);
     4cc:	eb e0       	ldi	r30, 0x0B	; 11
     4ce:	f1 e0       	ldi	r31, 0x01	; 1
     4d0:	90 81       	ld	r25, Z
     4d2:	21 e0       	ldi	r18, 0x01	; 1
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <disable_LED+0x10>
     4d8:	22 0f       	add	r18, r18
     4da:	33 1f       	adc	r19, r19
     4dc:	8a 95       	dec	r24
     4de:	e2 f7       	brpl	.-8      	; 0x4d8 <disable_LED+0xc>
     4e0:	20 95       	com	r18
     4e2:	29 23       	and	r18, r25
     4e4:	20 83       	st	Z, r18
     4e6:	08 95       	ret

000004e8 <ButtonInit>:
		
		
	}
	
	
}
     4e8:	6f 98       	cbi	0x0d, 7	; 13
     4ea:	5f 9a       	sbi	0x0b, 7	; 11
     4ec:	08 95       	ret

000004ee <Poll_Joystick>:
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	cd b7       	in	r28, 0x3d	; 61
     4f4:	de b7       	in	r29, 0x3e	; 62
     4f6:	65 97       	sbiw	r28, 0x15	; 21
     4f8:	0f b6       	in	r0, 0x3f	; 63
     4fa:	f8 94       	cli
     4fc:	de bf       	out	0x3e, r29	; 62
     4fe:	0f be       	out	0x3f, r0	; 63
     500:	cd bf       	out	0x3d, r28	; 61
     502:	f2 df       	rcall	.-28     	; 0x4e8 <ButtonInit>
     504:	0f 2e       	mov	r0, r31
     506:	f6 e6       	ldi	r31, 0x66	; 102
     508:	2f 2e       	mov	r2, r31
     50a:	f0 2d       	mov	r31, r0
     50c:	4e 01       	movw	r8, r28
     50e:	21 e1       	ldi	r18, 0x11	; 17
     510:	82 0e       	add	r8, r18
     512:	91 1c       	adc	r9, r1
     514:	0f 2e       	mov	r0, r31
     516:	fb e2       	ldi	r31, 0x2B	; 43
     518:	cf 2e       	mov	r12, r31
     51a:	f2 e0       	ldi	r31, 0x02	; 2
     51c:	df 2e       	mov	r13, r31
     51e:	f0 2d       	mov	r31, r0
     520:	ce 01       	movw	r24, r28
     522:	01 96       	adiw	r24, 0x01	; 1
     524:	7c 01       	movw	r14, r24
     526:	0f 2e       	mov	r0, r31
     528:	f3 e7       	ldi	r31, 0x73	; 115
     52a:	4f 2e       	mov	r4, r31
     52c:	f0 e3       	ldi	r31, 0x30	; 48
     52e:	5f 2e       	mov	r5, r31
     530:	f5 e6       	ldi	r31, 0x65	; 101
     532:	6f 2e       	mov	r6, r31
     534:	71 2c       	mov	r7, r1
     536:	f0 2d       	mov	r31, r0
     538:	87 e0       	ldi	r24, 0x07	; 7
     53a:	b4 de       	rcall	.-664    	; 0x2a4 <adc_read>
     53c:	8c 01       	movw	r16, r24
     53e:	85 e0       	ldi	r24, 0x05	; 5
     540:	b1 de       	rcall	.-670    	; 0x2a4 <adc_read>
     542:	5c 01       	movw	r10, r24
     544:	89 b1       	in	r24, 0x09	; 9
     546:	80 78       	andi	r24, 0x80	; 128
     548:	38 2e       	mov	r3, r24
     54a:	24 f0       	brlt	.+8      	; 0x554 <Poll_Joystick+0x66>
     54c:	0f 2e       	mov	r0, r31
     54e:	ff e6       	ldi	r31, 0x6F	; 111
     550:	2f 2e       	mov	r2, r31
     552:	f0 2d       	mov	r31, r0
     554:	0d 3b       	cpi	r16, 0xBD	; 189
     556:	92 e0       	ldi	r25, 0x02	; 2
     558:	19 07       	cpc	r17, r25
     55a:	88 f0       	brcs	.+34     	; 0x57e <Poll_Joystick+0x90>
     55c:	1f 92       	push	r1
     55e:	2f 92       	push	r2
     560:	af e0       	ldi	r26, 0x0F	; 15
     562:	b2 e0       	ldi	r27, 0x02	; 2
     564:	bf 93       	push	r27
     566:	af 93       	push	r26
     568:	9f 92       	push	r9
     56a:	8f 92       	push	r8
     56c:	0e 94 13 10 	call	0x2026	; 0x2026 <sprintf>
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	0f 90       	pop	r0
     57a:	0f 90       	pop	r0
     57c:	14 c0       	rjmp	.+40     	; 0x5a6 <Poll_Joystick+0xb8>
     57e:	0c 32       	cpi	r16, 0x2C	; 44
     580:	f1 e0       	ldi	r31, 0x01	; 1
     582:	1f 07       	cpc	r17, r31
     584:	80 f4       	brcc	.+32     	; 0x5a6 <Poll_Joystick+0xb8>
     586:	1f 92       	push	r1
     588:	2f 92       	push	r2
     58a:	a6 e1       	ldi	r26, 0x16	; 22
     58c:	b2 e0       	ldi	r27, 0x02	; 2
     58e:	bf 93       	push	r27
     590:	af 93       	push	r26
     592:	9f 92       	push	r9
     594:	8f 92       	push	r8
     596:	0e 94 13 10 	call	0x2026	; 0x2026 <sprintf>
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	0f 90       	pop	r0
     5a6:	fd eb       	ldi	r31, 0xBD	; 189
     5a8:	af 16       	cp	r10, r31
     5aa:	f2 e0       	ldi	r31, 0x02	; 2
     5ac:	bf 06       	cpc	r11, r31
     5ae:	88 f0       	brcs	.+34     	; 0x5d2 <Poll_Joystick+0xe4>
     5b0:	1f 92       	push	r1
     5b2:	2f 92       	push	r2
     5b4:	ad e1       	ldi	r26, 0x1D	; 29
     5b6:	b2 e0       	ldi	r27, 0x02	; 2
     5b8:	bf 93       	push	r27
     5ba:	af 93       	push	r26
     5bc:	9f 92       	push	r9
     5be:	8f 92       	push	r8
     5c0:	0e 94 13 10 	call	0x2026	; 0x2026 <sprintf>
     5c4:	0f 90       	pop	r0
     5c6:	0f 90       	pop	r0
     5c8:	0f 90       	pop	r0
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	15 c0       	rjmp	.+42     	; 0x5fc <Poll_Joystick+0x10e>
     5d2:	fc e2       	ldi	r31, 0x2C	; 44
     5d4:	af 16       	cp	r10, r31
     5d6:	f1 e0       	ldi	r31, 0x01	; 1
     5d8:	bf 06       	cpc	r11, r31
     5da:	80 f4       	brcc	.+32     	; 0x5fc <Poll_Joystick+0x10e>
     5dc:	1f 92       	push	r1
     5de:	2f 92       	push	r2
     5e0:	a4 e2       	ldi	r26, 0x24	; 36
     5e2:	b2 e0       	ldi	r27, 0x02	; 2
     5e4:	bf 93       	push	r27
     5e6:	af 93       	push	r26
     5e8:	9f 92       	push	r9
     5ea:	8f 92       	push	r8
     5ec:	0e 94 13 10 	call	0x2026	; 0x2026 <sprintf>
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	0f 90       	pop	r0
     5fc:	80 e8       	ldi	r24, 0x80	; 128
     5fe:	9f de       	rcall	.-706    	; 0x33e <lcd_command>
     600:	1f 93       	push	r17
     602:	0f 93       	push	r16
     604:	df 92       	push	r13
     606:	cf 92       	push	r12
     608:	ff 92       	push	r15
     60a:	ef 92       	push	r14
     60c:	0e 94 13 10 	call	0x2026	; 0x2026 <sprintf>
     610:	c7 01       	movw	r24, r14
     612:	da de       	rcall	.-588    	; 0x3c8 <lcd_puts>
     614:	80 ec       	ldi	r24, 0xC0	; 192
     616:	93 de       	rcall	.-730    	; 0x33e <lcd_command>
     618:	1f 92       	push	r1
     61a:	3f 92       	push	r3
     61c:	df 92       	push	r13
     61e:	cf 92       	push	r12
     620:	ff 92       	push	r15
     622:	ef 92       	push	r14
     624:	0e 94 13 10 	call	0x2026	; 0x2026 <sprintf>
     628:	c7 01       	movw	r24, r14
     62a:	ce de       	rcall	.-612    	; 0x3c8 <lcd_puts>
     62c:	61 e0       	ldi	r22, 0x01	; 1
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	c4 01       	movw	r24, r8
     632:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <uart_send_string>
     636:	d4 01       	movw	r26, r8
     638:	4d 92       	st	X+, r4
     63a:	5d 92       	st	X+, r5
     63c:	6d 92       	st	X+, r6
     63e:	7c 92       	st	X, r7
     640:	13 97       	sbiw	r26, 0x03	; 3
     642:	bf ef       	ldi	r27, 0xFF	; 255
     644:	e9 ef       	ldi	r30, 0xF9	; 249
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	b1 50       	subi	r27, 0x01	; 1
     64a:	e0 40       	sbci	r30, 0x00	; 0
     64c:	f0 40       	sbci	r31, 0x00	; 0
     64e:	e1 f7       	brne	.-8      	; 0x648 <Poll_Joystick+0x15a>
     650:	00 c0       	rjmp	.+0      	; 0x652 <Poll_Joystick+0x164>
     652:	00 00       	nop
     654:	0f b6       	in	r0, 0x3f	; 63
     656:	f8 94       	cli
     658:	de bf       	out	0x3e, r29	; 62
     65a:	0f be       	out	0x3f, r0	; 63
     65c:	cd bf       	out	0x3d, r28	; 61
     65e:	6c cf       	rjmp	.-296    	; 0x538 <Poll_Joystick+0x4a>

00000660 <a_main>:
	
}

// Application level main function
// Creates the required tasks and then terminates
void a_main() {
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	cd b7       	in	r28, 0x3d	; 61
     666:	de b7       	in	r29, 0x3e	; 62
     668:	60 97       	sbiw	r28, 0x10	; 16
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	f8 94       	cli
     66e:	de bf       	out	0x3e, r29	; 62
     670:	0f be       	out	0x3f, r0	; 63
     672:	cd bf       	out	0x3d, r28	; 61
	char line[16];
	portL2_Mutex = Mutex_Init();
     674:	0a d7       	rcall	.+3604   	; 0x148a <Mutex_Init>
     676:	90 93 e0 14 	sts	0x14E0, r25
     67a:	80 93 df 14 	sts	0x14DF, r24
	portL6_Mutex = Mutex_Init();
     67e:	05 d7       	rcall	.+3594   	; 0x148a <Mutex_Init>
     680:	90 93 04 15 	sts	0x1504, r25
     684:	80 93 03 15 	sts	0x1503, r24
	unsigned char jsBtn;
	
	
	e1 = Event_Init();
     688:	1b d7       	rcall	.+3638   	; 0x14c0 <Event_Init>
     68a:	90 93 08 15 	sts	0x1508, r25
     68e:	80 93 07 15 	sts	0x1507, r24
	e2 = Event_Init();
     692:	16 d7       	rcall	.+3628   	; 0x14c0 <Event_Init>
     694:	90 93 e7 14 	sts	0x14E7, r25
     698:	80 93 e6 14 	sts	0x14E6, r24
	adc_init();
     69c:	fc dd       	rcall	.-1032   	; 0x296 <adc_init>
	uint16_t adc_test = adc_read(7);
     69e:	87 e0       	ldi	r24, 0x07	; 7
     6a0:	01 de       	rcall	.-1022   	; 0x2a4 <adc_read>
	//PongPID = Task_Create(Pong, 8, 1);
	//PingPID = Task_Create(Ping, 8, 1);
	//IdlePID = Task_Create(Idle, MINPRIORITY, 1);
	lcd_init(); // initialized the LCD
     6a2:	a0 de       	rcall	.-704    	; 0x3e4 <lcd_init>
	lcd_xy(0,0);
     6a4:	80 e8       	ldi	r24, 0x80	; 128
     6a6:	4b de       	rcall	.-874    	; 0x33e <lcd_command>
	DDRB |= (1<<DDB4); // enable output mode of Digital Pin 10 (PORTB Pin 4) for backlit control
     6a8:	24 9a       	sbi	0x04, 4	; 4
	PORTB |= (1<<DDB4); // enable back light
     6aa:	2c 9a       	sbi	0x05, 4	; 5
	//itoa(adc_test, jsBtn);
	//sprintf(line, "ADC:%2d", adc_test);
	lcd_puts(line);
     6ac:	ce 01       	movw	r24, r28
     6ae:	01 96       	adiw	r24, 0x01	; 1
     6b0:	8b de       	rcall	.-746    	; 0x3c8 <lcd_puts>
	//lcd_xy(0,1);
	//sprintf(line, "Laser: %s", jsBtn);
	//lcd_puts(line);
	Roomba_Init();
     6b2:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <Roomba_Init>
	


	
	
    InitPID = Task_Create(Poll_Joystick,0,1);
     6b6:	41 e0       	ldi	r20, 0x01	; 1
     6b8:	50 e0       	ldi	r21, 0x00	; 0
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	87 e7       	ldi	r24, 0x77	; 119
     6c0:	92 e0       	ldi	r25, 0x02	; 2
     6c2:	19 d7       	rcall	.+3634   	; 0x14f6 <Task_Create>
     6c4:	90 93 06 15 	sts	0x1506, r25
     6c8:	80 93 05 15 	sts	0x1505, r24
	//DrivePID = Task_Create(Init_Drive, 8, 1);
	//IdlePID = Task_Create(Idle, 8, 1);
	Task_Terminate();
     6cc:	09 d0       	rcall	.+18     	; 0x6e0 <Task_Terminate>
}
     6ce:	60 96       	adiw	r28, 0x10	; 16
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	f8 94       	cli
     6d4:	de bf       	out	0x3e, r29	; 62
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	cd bf       	out	0x3d, r28	; 61
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	08 95       	ret

000006e0 <Task_Terminate>:
/**
  * Application level task getarg to return intiial arg value
  */
int Task_GetArg(PID p) {
	return (Cp->arg);
}
     6e0:	80 91 57 02 	lds	r24, 0x0257
     6e4:	90 91 58 02 	lds	r25, 0x0258
     6e8:	89 2b       	or	r24, r25
     6ea:	51 f0       	breq	.+20     	; 0x700 <Task_Terminate+0x20>
     6ec:	f8 94       	cli
     6ee:	e0 91 59 02 	lds	r30, 0x0259
     6f2:	f0 91 5a 02 	lds	r31, 0x025A
     6f6:	e3 5f       	subi	r30, 0xF3	; 243
     6f8:	fe 4f       	sbci	r31, 0xFE	; 254
     6fa:	84 e0       	ldi	r24, 0x04	; 4
     6fc:	80 83       	st	Z, r24
     6fe:	76 cd       	rjmp	.-1300   	; 0x1ec <Enter_Kernel>
     700:	08 95       	ret

00000702 <Kernel_Create_Task_At>:
     702:	ef 92       	push	r14
     704:	ff 92       	push	r15
     706:	0f 93       	push	r16
     708:	1f 93       	push	r17
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	1f 92       	push	r1
     710:	1f 92       	push	r1
     712:	cd b7       	in	r28, 0x3d	; 61
     714:	de b7       	in	r29, 0x3e	; 62
     716:	9a 83       	std	Y+2, r25	; 0x02
     718:	89 83       	std	Y+1, r24	; 0x01
     71a:	dc 01       	movw	r26, r24
     71c:	7c 01       	movw	r14, r24
     71e:	04 e0       	ldi	r16, 0x04	; 4
     720:	e0 0e       	add	r14, r16
     722:	f1 1c       	adc	r15, r1
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	91 e0       	ldi	r25, 0x01	; 1
     728:	f7 01       	movw	r30, r14
     72a:	8c 01       	movw	r16, r24
     72c:	11 92       	st	Z+, r1
     72e:	01 50       	subi	r16, 0x01	; 1
     730:	10 40       	sbci	r17, 0x00	; 0
     732:	e1 f7       	brne	.-8      	; 0x72c <Kernel_Create_Task_At+0x2a>
     734:	fd 01       	movw	r30, r26
     736:	ed 5f       	subi	r30, 0xFD	; 253
     738:	fe 4f       	sbci	r31, 0xFE	; 254
     73a:	80 e7       	ldi	r24, 0x70	; 112
     73c:	93 e0       	ldi	r25, 0x03	; 3
     73e:	80 83       	st	Z, r24
     740:	31 97       	sbiw	r30, 0x01	; 1
     742:	90 83       	st	Z, r25
     744:	31 97       	sbiw	r30, 0x01	; 1
     746:	60 83       	st	Z, r22
     748:	31 97       	sbiw	r30, 0x01	; 1
     74a:	70 83       	st	Z, r23
     74c:	31 97       	sbiw	r30, 0x01	; 1
     74e:	10 82       	st	Z, r1
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	92 93       	st	-Z, r25
     754:	9f 5f       	subi	r25, 0xFF	; 255
     756:	92 32       	cpi	r25, 0x22	; 34
     758:	e1 f7       	brne	.-8      	; 0x752 <Kernel_Create_Task_At+0x50>
     75a:	a4 52       	subi	r26, 0x24	; 36
     75c:	bf 4f       	sbci	r27, 0xFF	; 255
     75e:	e9 81       	ldd	r30, Y+1	; 0x01
     760:	fa 81       	ldd	r31, Y+2	; 0x02
     762:	b3 83       	std	Z+3, r27	; 0x03
     764:	a2 83       	std	Z+2, r26	; 0x02
     766:	df 01       	movw	r26, r30
     768:	a5 5f       	subi	r26, 0xF5	; 245
     76a:	be 4f       	sbci	r27, 0xFE	; 254
     76c:	11 96       	adiw	r26, 0x01	; 1
     76e:	7c 93       	st	X, r23
     770:	6e 93       	st	-X, r22
     772:	12 96       	adiw	r26, 0x02	; 2
     774:	1c 92       	st	X, r1
     776:	80 91 53 02 	lds	r24, 0x0253
     77a:	90 91 54 02 	lds	r25, 0x0254
     77e:	91 83       	std	Z+1, r25	; 0x01
     780:	80 83       	st	Z, r24
     782:	89 81       	ldd	r24, Y+1	; 0x01
     784:	9a 81       	ldd	r25, Y+2	; 0x02
     786:	fc 01       	movw	r30, r24
     788:	eb 5f       	subi	r30, 0xFB	; 251
     78a:	fe 4f       	sbci	r31, 0xFE	; 254
     78c:	51 83       	std	Z+1, r21	; 0x01
     78e:	40 83       	st	Z, r20
     790:	32 96       	adiw	r30, 0x02	; 2
     792:	51 83       	std	Z+1, r21	; 0x01
     794:	40 83       	st	Z, r20
     796:	32 96       	adiw	r30, 0x02	; 2
     798:	31 83       	std	Z+1, r19	; 0x01
     79a:	20 83       	st	Z, r18
     79c:	71 96       	adiw	r30, 0x11	; 17
     79e:	11 82       	std	Z+1, r1	; 0x01
     7a0:	10 82       	st	Z, r1
     7a2:	34 97       	sbiw	r30, 0x04	; 4
     7a4:	23 e6       	ldi	r18, 0x63	; 99
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	31 83       	std	Z+1, r19	; 0x01
     7aa:	20 83       	st	Z, r18
     7ac:	20 91 55 02 	lds	r18, 0x0255
     7b0:	30 91 56 02 	lds	r19, 0x0256
     7b4:	2f 5f       	subi	r18, 0xFF	; 255
     7b6:	3f 4f       	sbci	r19, 0xFF	; 255
     7b8:	30 93 56 02 	sts	0x0256, r19
     7bc:	20 93 55 02 	sts	0x0255, r18
     7c0:	20 91 53 02 	lds	r18, 0x0253
     7c4:	30 91 54 02 	lds	r19, 0x0254
     7c8:	2f 5f       	subi	r18, 0xFF	; 255
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	30 93 54 02 	sts	0x0254, r19
     7d0:	20 93 53 02 	sts	0x0253, r18
     7d4:	72 97       	sbiw	r30, 0x12	; 18
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	80 83       	st	Z, r24
     7da:	4b e4       	ldi	r20, 0x4B	; 75
     7dc:	52 e0       	ldi	r21, 0x02	; 2
     7de:	69 e2       	ldi	r22, 0x29	; 41
     7e0:	75 e1       	ldi	r23, 0x15	; 21
     7e2:	ce 01       	movw	r24, r28
     7e4:	01 96       	adiw	r24, 0x01	; 1
     7e6:	0e 94 8c 0c 	call	0x1918	; 0x1918 <enqueueRQ>
     7ea:	e9 81       	ldd	r30, Y+1	; 0x01
     7ec:	fa 81       	ldd	r31, Y+2	; 0x02
     7ee:	80 81       	ld	r24, Z
     7f0:	91 81       	ldd	r25, Z+1	; 0x01
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	1f 91       	pop	r17
     7fc:	0f 91       	pop	r16
     7fe:	ff 90       	pop	r15
     800:	ef 90       	pop	r14
     802:	08 95       	ret

00000804 <Kernel_Create_Task>:
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
     808:	ec 01       	movw	r28, r24
     80a:	80 91 55 02 	lds	r24, 0x0255
     80e:	90 91 56 02 	lds	r25, 0x0256
     812:	40 97       	sbiw	r24, 0x10	; 16
     814:	21 f1       	breq	.+72     	; 0x85e <Kernel_Create_Task+0x5a>
     816:	80 91 bf 03 	lds	r24, 0x03BF
     81a:	88 23       	and	r24, r24
     81c:	71 f0       	breq	.+28     	; 0x83a <Kernel_Create_Task+0x36>
     81e:	ad ed       	ldi	r26, 0xDD	; 221
     820:	b4 e0       	ldi	r27, 0x04	; 4
     822:	e1 e0       	ldi	r30, 0x01	; 1
     824:	f0 e0       	ldi	r31, 0x00	; 0
     826:	9c 91       	ld	r25, X
     828:	99 23       	and	r25, r25
     82a:	49 f0       	breq	.+18     	; 0x83e <Kernel_Create_Task+0x3a>
     82c:	31 96       	adiw	r30, 0x01	; 1
     82e:	a2 5e       	subi	r26, 0xE2	; 226
     830:	be 4f       	sbci	r27, 0xFE	; 254
     832:	e0 31       	cpi	r30, 0x10	; 16
     834:	f1 05       	cpc	r31, r1
     836:	b9 f7       	brne	.-18     	; 0x826 <Kernel_Create_Task+0x22>
     838:	02 c0       	rjmp	.+4      	; 0x83e <Kernel_Create_Task+0x3a>
     83a:	e0 e0       	ldi	r30, 0x00	; 0
     83c:	f0 e0       	ldi	r31, 0x00	; 0
     83e:	9a 01       	movw	r18, r20
     840:	ab 01       	movw	r20, r22
     842:	be 01       	movw	r22, r28
     844:	ae e1       	ldi	r26, 0x1E	; 30
     846:	b1 e0       	ldi	r27, 0x01	; 1
     848:	ea 9f       	mul	r30, r26
     84a:	c0 01       	movw	r24, r0
     84c:	eb 9f       	mul	r30, r27
     84e:	90 0d       	add	r25, r0
     850:	fa 9f       	mul	r31, r26
     852:	90 0d       	add	r25, r0
     854:	11 24       	eor	r1, r1
     856:	85 54       	subi	r24, 0x45	; 69
     858:	9d 4f       	sbci	r25, 0xFD	; 253
     85a:	53 df       	rcall	.-346    	; 0x702 <Kernel_Create_Task_At>
     85c:	00 c0       	rjmp	.+0      	; 0x85e <Kernel_Create_Task+0x5a>
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	08 95       	ret

00000864 <Kernel_Init_Mutex_At>:
     864:	fc 01       	movw	r30, r24
     866:	80 91 51 02 	lds	r24, 0x0251
     86a:	90 91 52 02 	lds	r25, 0x0252
     86e:	91 83       	std	Z+1, r25	; 0x01
     870:	80 83       	st	Z, r24
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	82 83       	std	Z+2, r24	; 0x02
     876:	80 91 51 02 	lds	r24, 0x0251
     87a:	90 91 52 02 	lds	r25, 0x0252
     87e:	01 96       	adiw	r24, 0x01	; 1
     880:	90 93 52 02 	sts	0x0252, r25
     884:	80 93 51 02 	sts	0x0251, r24
     888:	80 81       	ld	r24, Z
     88a:	91 81       	ldd	r25, Z+1	; 0x01
     88c:	08 95       	ret

0000088e <Kernel_Init_Event_At>:
     88e:	fc 01       	movw	r30, r24
     890:	80 91 4f 02 	lds	r24, 0x024F
     894:	90 91 50 02 	lds	r25, 0x0250
     898:	91 83       	std	Z+1, r25	; 0x01
     89a:	80 83       	st	Z, r24
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	82 83       	std	Z+2, r24	; 0x02
     8a0:	14 82       	std	Z+4, r1	; 0x04
     8a2:	13 82       	std	Z+3, r1	; 0x03
     8a4:	80 91 4f 02 	lds	r24, 0x024F
     8a8:	90 91 50 02 	lds	r25, 0x0250
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	90 93 50 02 	sts	0x0250, r25
     8b2:	80 93 4f 02 	sts	0x024F, r24
     8b6:	80 81       	ld	r24, Z
     8b8:	91 81       	ldd	r25, Z+1	; 0x01
     8ba:	08 95       	ret

000008bc <OS_Init>:
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	10 92 56 02 	sts	0x0256, r1
     8c4:	10 92 55 02 	sts	0x0255, r1
     8c8:	10 92 58 02 	sts	0x0258, r1
     8cc:	10 92 57 02 	sts	0x0257, r1
     8d0:	10 92 52 02 	sts	0x0252, r1
     8d4:	10 92 51 02 	sts	0x0251, r1
     8d8:	10 92 50 02 	sts	0x0250, r1
     8dc:	10 92 4f 02 	sts	0x024F, r1
     8e0:	10 92 54 02 	sts	0x0254, r1
     8e4:	10 92 53 02 	sts	0x0253, r1
     8e8:	eb eb       	ldi	r30, 0xBB	; 187
     8ea:	f2 e0       	ldi	r31, 0x02	; 2
     8ec:	af eb       	ldi	r26, 0xBF	; 191
     8ee:	b3 e0       	ldi	r27, 0x03	; 3
     8f0:	4b e9       	ldi	r20, 0x9B	; 155
     8f2:	54 e1       	ldi	r21, 0x14	; 20
     8f4:	2e e1       	ldi	r18, 0x1E	; 30
     8f6:	31 e0       	ldi	r19, 0x01	; 1
     8f8:	83 e6       	ldi	r24, 0x63	; 99
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	ef 01       	movw	r28, r30
     8fe:	b9 01       	movw	r22, r18
     900:	19 92       	st	Y+, r1
     902:	61 50       	subi	r22, 0x01	; 1
     904:	70 40       	sbci	r23, 0x00	; 0
     906:	e1 f7       	brne	.-8      	; 0x900 <OS_Init+0x44>
     908:	1c 92       	st	X, r1
     90a:	53 96       	adiw	r26, 0x13	; 19
     90c:	9c 93       	st	X, r25
     90e:	8e 93       	st	-X, r24
     910:	52 97       	sbiw	r26, 0x12	; 18
     912:	11 82       	std	Z+1, r1	; 0x01
     914:	10 82       	st	Z, r1
     916:	e2 5e       	subi	r30, 0xE2	; 226
     918:	fe 4f       	sbci	r31, 0xFE	; 254
     91a:	a2 5e       	subi	r26, 0xE2	; 226
     91c:	be 4f       	sbci	r27, 0xFE	; 254
     91e:	e4 17       	cp	r30, r20
     920:	f5 07       	cpc	r31, r21
     922:	61 f7       	brne	.-40     	; 0x8fc <OS_Init+0x40>
     924:	e5 e8       	ldi	r30, 0x85	; 133
     926:	f2 e0       	ldi	r31, 0x02	; 2
     928:	2d eb       	ldi	r18, 0xBD	; 189
     92a:	32 e0       	ldi	r19, 0x02	; 2
     92c:	87 e0       	ldi	r24, 0x07	; 7
     92e:	df 01       	movw	r26, r30
     930:	12 97       	sbiw	r26, 0x02	; 2
     932:	ed 01       	movw	r28, r26
     934:	68 2f       	mov	r22, r24
     936:	19 92       	st	Y+, r1
     938:	6a 95       	dec	r22
     93a:	e9 f7       	brne	.-6      	; 0x936 <OS_Init+0x7a>
     93c:	10 82       	st	Z, r1
     93e:	37 96       	adiw	r30, 0x07	; 7
     940:	e2 17       	cp	r30, r18
     942:	f3 07       	cpc	r31, r19
     944:	a1 f7       	brne	.-24     	; 0x92e <OS_Init+0x72>
     946:	ed e5       	ldi	r30, 0x5D	; 93
     948:	f2 e0       	ldi	r31, 0x02	; 2
     94a:	25 e8       	ldi	r18, 0x85	; 133
     94c:	32 e0       	ldi	r19, 0x02	; 2
     94e:	85 e0       	ldi	r24, 0x05	; 5
     950:	df 01       	movw	r26, r30
     952:	12 97       	sbiw	r26, 0x02	; 2
     954:	ed 01       	movw	r28, r26
     956:	68 2f       	mov	r22, r24
     958:	19 92       	st	Y+, r1
     95a:	6a 95       	dec	r22
     95c:	e9 f7       	brne	.-6      	; 0x958 <OS_Init+0x9c>
     95e:	10 82       	st	Z, r1
     960:	35 96       	adiw	r30, 0x05	; 5
     962:	e2 17       	cp	r30, r18
     964:	f3 07       	cpc	r31, r19
     966:	a1 f7       	brne	.-24     	; 0x950 <OS_Init+0x94>
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	08 95       	ret

0000096e <OS_Abort>:
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <_exit>

00000976 <Dispatch>:
     976:	6b e4       	ldi	r22, 0x4B	; 75
     978:	72 e0       	ldi	r23, 0x02	; 2
     97a:	89 e2       	ldi	r24, 0x29	; 41
     97c:	95 e1       	ldi	r25, 0x15	; 21
     97e:	0e 94 57 0d 	call	0x1aae	; 0x1aae <dequeueRQ>
     982:	fc 01       	movw	r30, r24
     984:	90 93 5a 02 	sts	0x025A, r25
     988:	80 93 59 02 	sts	0x0259, r24
     98c:	89 2b       	or	r24, r25
     98e:	09 f4       	brne	.+2      	; 0x992 <Dispatch+0x1c>
     990:	ee df       	rcall	.-36     	; 0x96e <OS_Abort>
     992:	82 81       	ldd	r24, Z+2	; 0x02
     994:	93 81       	ldd	r25, Z+3	; 0x03
     996:	90 93 4a 15 	sts	0x154A, r25
     99a:	80 93 49 15 	sts	0x1549, r24
     99e:	82 e0       	ldi	r24, 0x02	; 2
     9a0:	df 01       	movw	r26, r30
     9a2:	ac 5f       	subi	r26, 0xFC	; 252
     9a4:	be 4f       	sbci	r27, 0xFE	; 254
     9a6:	8c 93       	st	X, r24
     9a8:	80 81       	ld	r24, Z
     9aa:	91 81       	ldd	r25, Z+1	; 0x01
     9ac:	02 97       	sbiw	r24, 0x02	; 2
     9ae:	20 f4       	brcc	.+8      	; 0x9b8 <Dispatch+0x42>
     9b0:	82 e0       	ldi	r24, 0x02	; 2
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	7e cd       	rjmp	.-1284   	; 0x4b2 <enable_LED>
     9b6:	08 95       	ret
     9b8:	80 81       	ld	r24, Z
     9ba:	91 81       	ldd	r25, Z+1	; 0x01
     9bc:	02 97       	sbiw	r24, 0x02	; 2
     9be:	21 f4       	brne	.+8      	; 0x9c8 <Dispatch+0x52>
     9c0:	85 e0       	ldi	r24, 0x05	; 5
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	76 cd       	rjmp	.-1300   	; 0x4b2 <enable_LED>
     9c6:	08 95       	ret
     9c8:	80 81       	ld	r24, Z
     9ca:	91 81       	ldd	r25, Z+1	; 0x01
     9cc:	03 97       	sbiw	r24, 0x03	; 3
     9ce:	19 f4       	brne	.+6      	; 0x9d6 <Dispatch+0x60>
     9d0:	86 e0       	ldi	r24, 0x06	; 6
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	6e cd       	rjmp	.-1316   	; 0x4b2 <enable_LED>
     9d6:	08 95       	ret

000009d8 <Kernel_Unlock_Mutex>:
     9d8:	0f 93       	push	r16
     9da:	1f 93       	push	r17
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	1f 92       	push	r1
     9e2:	1f 92       	push	r1
     9e4:	cd b7       	in	r28, 0x3d	; 61
     9e6:	de b7       	in	r29, 0x3e	; 62
     9e8:	a0 91 59 02 	lds	r26, 0x0259
     9ec:	b0 91 5a 02 	lds	r27, 0x025A
     9f0:	fd 01       	movw	r30, r26
     9f2:	ec 5e       	subi	r30, 0xEC	; 236
     9f4:	fe 4f       	sbci	r31, 0xFE	; 254
     9f6:	40 81       	ld	r20, Z
     9f8:	51 81       	ldd	r21, Z+1	; 0x01
     9fa:	e3 e8       	ldi	r30, 0x83	; 131
     9fc:	f2 e0       	ldi	r31, 0x02	; 2
     9fe:	00 e0       	ldi	r16, 0x00	; 0
     a00:	10 e0       	ldi	r17, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	91 81       	ldd	r25, Z+1	; 0x01
     a06:	84 17       	cp	r24, r20
     a08:	95 07       	cpc	r25, r21
     a0a:	39 f0       	breq	.+14     	; 0xa1a <Kernel_Unlock_Mutex+0x42>
     a0c:	0f 5f       	subi	r16, 0xFF	; 255
     a0e:	1f 4f       	sbci	r17, 0xFF	; 255
     a10:	37 96       	adiw	r30, 0x07	; 7
     a12:	08 30       	cpi	r16, 0x08	; 8
     a14:	11 05       	cpc	r17, r1
     a16:	a9 f7       	brne	.-22     	; 0xa02 <Kernel_Unlock_Mutex+0x2a>
     a18:	f7 c0       	rjmp	.+494    	; 0xc08 <Kernel_Unlock_Mutex+0x230>
     a1a:	8d 91       	ld	r24, X+
     a1c:	9c 91       	ld	r25, X
     a1e:	11 97       	sbiw	r26, 0x01	; 1
     a20:	27 e0       	ldi	r18, 0x07	; 7
     a22:	20 9f       	mul	r18, r16
     a24:	f0 01       	movw	r30, r0
     a26:	21 9f       	mul	r18, r17
     a28:	f0 0d       	add	r31, r0
     a2a:	11 24       	eor	r1, r1
     a2c:	ed 57       	subi	r30, 0x7D	; 125
     a2e:	fd 4f       	sbci	r31, 0xFD	; 253
     a30:	23 81       	ldd	r18, Z+3	; 0x03
     a32:	34 81       	ldd	r19, Z+4	; 0x04
     a34:	28 17       	cp	r18, r24
     a36:	39 07       	cpc	r19, r25
     a38:	09 f0       	breq	.+2      	; 0xa3c <Kernel_Unlock_Mutex+0x64>
     a3a:	e6 c0       	rjmp	.+460    	; 0xc08 <Kernel_Unlock_Mutex+0x230>
     a3c:	ac 5f       	subi	r26, 0xFC	; 252
     a3e:	be 4f       	sbci	r27, 0xFE	; 254
     a40:	8c 91       	ld	r24, X
     a42:	86 30       	cpi	r24, 0x06	; 6
     a44:	09 f0       	breq	.+2      	; 0xa48 <Kernel_Unlock_Mutex+0x70>
     a46:	4d c0       	rjmp	.+154    	; 0xae2 <Kernel_Unlock_Mutex+0x10a>
     a48:	67 e4       	ldi	r22, 0x47	; 71
     a4a:	72 e0       	ldi	r23, 0x02	; 2
     a4c:	8b e4       	ldi	r24, 0x4B	; 75
     a4e:	95 e1       	ldi	r25, 0x15	; 21
     a50:	c6 d7       	rcall	.+3980   	; 0x19de <dequeueWQ>
     a52:	9a 83       	std	Y+2, r25	; 0x02
     a54:	89 83       	std	Y+1, r24	; 0x01
     a56:	00 97       	sbiw	r24, 0x00	; 0
     a58:	79 f4       	brne	.+30     	; 0xa78 <Kernel_Unlock_Mutex+0xa0>
     a5a:	87 e0       	ldi	r24, 0x07	; 7
     a5c:	80 9f       	mul	r24, r16
     a5e:	f0 01       	movw	r30, r0
     a60:	81 9f       	mul	r24, r17
     a62:	f0 0d       	add	r31, r0
     a64:	11 24       	eor	r1, r1
     a66:	ed 57       	subi	r30, 0x7D	; 125
     a68:	fd 4f       	sbci	r31, 0xFD	; 253
     a6a:	16 82       	std	Z+6, r1	; 0x06
     a6c:	15 82       	std	Z+5, r1	; 0x05
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	82 83       	std	Z+2, r24	; 0x02
     a72:	14 82       	std	Z+4, r1	; 0x04
     a74:	13 82       	std	Z+3, r1	; 0x03
     a76:	c8 c0       	rjmp	.+400    	; 0xc08 <Kernel_Unlock_Mutex+0x230>
     a78:	27 e0       	ldi	r18, 0x07	; 7
     a7a:	20 9f       	mul	r18, r16
     a7c:	f0 01       	movw	r30, r0
     a7e:	21 9f       	mul	r18, r17
     a80:	f0 0d       	add	r31, r0
     a82:	11 24       	eor	r1, r1
     a84:	ed 57       	subi	r30, 0x7D	; 125
     a86:	fd 4f       	sbci	r31, 0xFD	; 253
     a88:	21 e0       	ldi	r18, 0x01	; 1
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	36 83       	std	Z+6, r19	; 0x06
     a8e:	25 83       	std	Z+5, r18	; 0x05
     a90:	dc 01       	movw	r26, r24
     a92:	2d 91       	ld	r18, X+
     a94:	3c 91       	ld	r19, X
     a96:	34 83       	std	Z+4, r19	; 0x04
     a98:	23 83       	std	Z+3, r18	; 0x03
     a9a:	20 91 59 02 	lds	r18, 0x0259
     a9e:	30 91 5a 02 	lds	r19, 0x025A
     aa2:	d9 01       	movw	r26, r18
     aa4:	a9 5f       	subi	r26, 0xF9	; 249
     aa6:	be 4f       	sbci	r27, 0xFE	; 254
     aa8:	4d 91       	ld	r20, X+
     aaa:	5c 91       	ld	r21, X
     aac:	11 97       	sbiw	r26, 0x01	; 1
     aae:	fc 01       	movw	r30, r24
     ab0:	e9 5f       	subi	r30, 0xF9	; 249
     ab2:	fe 4f       	sbci	r31, 0xFE	; 254
     ab4:	51 83       	std	Z+1, r21	; 0x01
     ab6:	40 83       	st	Z, r20
     ab8:	33 97       	sbiw	r30, 0x03	; 3
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	80 83       	st	Z, r24
     abe:	f9 01       	movw	r30, r18
     ac0:	eb 5f       	subi	r30, 0xFB	; 251
     ac2:	fe 4f       	sbci	r31, 0xFE	; 254
     ac4:	40 81       	ld	r20, Z
     ac6:	51 81       	ldd	r21, Z+1	; 0x01
     ac8:	11 96       	adiw	r26, 0x01	; 1
     aca:	5c 93       	st	X, r21
     acc:	4e 93       	st	-X, r20
     ace:	31 97       	sbiw	r30, 0x01	; 1
     ad0:	80 83       	st	Z, r24
     ad2:	4b e4       	ldi	r20, 0x4B	; 75
     ad4:	52 e0       	ldi	r21, 0x02	; 2
     ad6:	69 e2       	ldi	r22, 0x29	; 41
     ad8:	75 e1       	ldi	r23, 0x15	; 21
     ada:	ce 01       	movw	r24, r28
     adc:	01 96       	adiw	r24, 0x01	; 1
     ade:	1c d7       	rcall	.+3640   	; 0x1918 <enqueueRQ>
     ae0:	93 c0       	rjmp	.+294    	; 0xc08 <Kernel_Unlock_Mutex+0x230>
     ae2:	87 e0       	ldi	r24, 0x07	; 7
     ae4:	80 9f       	mul	r24, r16
     ae6:	f0 01       	movw	r30, r0
     ae8:	81 9f       	mul	r24, r17
     aea:	f0 0d       	add	r31, r0
     aec:	11 24       	eor	r1, r1
     aee:	ed 57       	subi	r30, 0x7D	; 125
     af0:	fd 4f       	sbci	r31, 0xFD	; 253
     af2:	85 81       	ldd	r24, Z+5	; 0x05
     af4:	96 81       	ldd	r25, Z+6	; 0x06
     af6:	82 30       	cpi	r24, 0x02	; 2
     af8:	91 05       	cpc	r25, r1
     afa:	60 f0       	brcs	.+24     	; 0xb14 <Kernel_Unlock_Mutex+0x13c>
     afc:	27 e0       	ldi	r18, 0x07	; 7
     afe:	20 9f       	mul	r18, r16
     b00:	f0 01       	movw	r30, r0
     b02:	21 9f       	mul	r18, r17
     b04:	f0 0d       	add	r31, r0
     b06:	11 24       	eor	r1, r1
     b08:	ed 57       	subi	r30, 0x7D	; 125
     b0a:	fd 4f       	sbci	r31, 0xFD	; 253
     b0c:	01 97       	sbiw	r24, 0x01	; 1
     b0e:	96 83       	std	Z+6, r25	; 0x06
     b10:	85 83       	std	Z+5, r24	; 0x05
     b12:	7a c0       	rjmp	.+244    	; 0xc08 <Kernel_Unlock_Mutex+0x230>
     b14:	67 e4       	ldi	r22, 0x47	; 71
     b16:	72 e0       	ldi	r23, 0x02	; 2
     b18:	8b e4       	ldi	r24, 0x4B	; 75
     b1a:	95 e1       	ldi	r25, 0x15	; 21
     b1c:	60 d7       	rcall	.+3776   	; 0x19de <dequeueWQ>
     b1e:	9a 83       	std	Y+2, r25	; 0x02
     b20:	89 83       	std	Y+1, r24	; 0x01
     b22:	00 97       	sbiw	r24, 0x00	; 0
     b24:	a9 f5       	brne	.+106    	; 0xb90 <Kernel_Unlock_Mutex+0x1b8>
     b26:	87 e0       	ldi	r24, 0x07	; 7
     b28:	80 9f       	mul	r24, r16
     b2a:	f0 01       	movw	r30, r0
     b2c:	81 9f       	mul	r24, r17
     b2e:	f0 0d       	add	r31, r0
     b30:	11 24       	eor	r1, r1
     b32:	ed 57       	subi	r30, 0x7D	; 125
     b34:	fd 4f       	sbci	r31, 0xFD	; 253
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	82 83       	std	Z+2, r24	; 0x02
     b3a:	16 82       	std	Z+6, r1	; 0x06
     b3c:	15 82       	std	Z+5, r1	; 0x05
     b3e:	14 82       	std	Z+4, r1	; 0x04
     b40:	13 82       	std	Z+3, r1	; 0x03
     b42:	e0 91 59 02 	lds	r30, 0x0259
     b46:	f0 91 5a 02 	lds	r31, 0x025A
     b4a:	df 01       	movw	r26, r30
     b4c:	ab 5f       	subi	r26, 0xFB	; 251
     b4e:	be 4f       	sbci	r27, 0xFE	; 254
     b50:	8d 91       	ld	r24, X+
     b52:	9c 91       	ld	r25, X
     b54:	11 97       	sbiw	r26, 0x01	; 1
     b56:	12 96       	adiw	r26, 0x02	; 2
     b58:	11 96       	adiw	r26, 0x01	; 1
     b5a:	9c 93       	st	X, r25
     b5c:	8e 93       	st	-X, r24
     b5e:	80 81       	ld	r24, Z
     b60:	91 81       	ldd	r25, Z+1	; 0x01
     b62:	02 97       	sbiw	r24, 0x02	; 2
     b64:	20 f4       	brcc	.+8      	; 0xb6e <Kernel_Unlock_Mutex+0x196>
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a3 dc       	rcall	.-1722   	; 0x4b2 <enable_LED>
     b6c:	4d c0       	rjmp	.+154    	; 0xc08 <Kernel_Unlock_Mutex+0x230>
     b6e:	80 81       	ld	r24, Z
     b70:	91 81       	ldd	r25, Z+1	; 0x01
     b72:	02 97       	sbiw	r24, 0x02	; 2
     b74:	21 f4       	brne	.+8      	; 0xb7e <Kernel_Unlock_Mutex+0x1a6>
     b76:	85 e0       	ldi	r24, 0x05	; 5
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	9b dc       	rcall	.-1738   	; 0x4b2 <enable_LED>
     b7c:	45 c0       	rjmp	.+138    	; 0xc08 <Kernel_Unlock_Mutex+0x230>
     b7e:	80 81       	ld	r24, Z
     b80:	91 81       	ldd	r25, Z+1	; 0x01
     b82:	03 97       	sbiw	r24, 0x03	; 3
     b84:	09 f0       	breq	.+2      	; 0xb88 <Kernel_Unlock_Mutex+0x1b0>
     b86:	40 c0       	rjmp	.+128    	; 0xc08 <Kernel_Unlock_Mutex+0x230>
     b88:	86 e0       	ldi	r24, 0x06	; 6
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	92 dc       	rcall	.-1756   	; 0x4b2 <enable_LED>
     b8e:	3c c0       	rjmp	.+120    	; 0xc08 <Kernel_Unlock_Mutex+0x230>
     b90:	27 e0       	ldi	r18, 0x07	; 7
     b92:	20 9f       	mul	r18, r16
     b94:	f0 01       	movw	r30, r0
     b96:	21 9f       	mul	r18, r17
     b98:	f0 0d       	add	r31, r0
     b9a:	11 24       	eor	r1, r1
     b9c:	ed 57       	subi	r30, 0x7D	; 125
     b9e:	fd 4f       	sbci	r31, 0xFD	; 253
     ba0:	21 e0       	ldi	r18, 0x01	; 1
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	36 83       	std	Z+6, r19	; 0x06
     ba6:	25 83       	std	Z+5, r18	; 0x05
     ba8:	dc 01       	movw	r26, r24
     baa:	2d 91       	ld	r18, X+
     bac:	3c 91       	ld	r19, X
     bae:	34 83       	std	Z+4, r19	; 0x04
     bb0:	23 83       	std	Z+3, r18	; 0x03
     bb2:	20 91 59 02 	lds	r18, 0x0259
     bb6:	30 91 5a 02 	lds	r19, 0x025A
     bba:	d9 01       	movw	r26, r18
     bbc:	a9 5f       	subi	r26, 0xF9	; 249
     bbe:	be 4f       	sbci	r27, 0xFE	; 254
     bc0:	4d 91       	ld	r20, X+
     bc2:	5c 91       	ld	r21, X
     bc4:	11 97       	sbiw	r26, 0x01	; 1
     bc6:	fc 01       	movw	r30, r24
     bc8:	e9 5f       	subi	r30, 0xF9	; 249
     bca:	fe 4f       	sbci	r31, 0xFE	; 254
     bcc:	51 83       	std	Z+1, r21	; 0x01
     bce:	40 83       	st	Z, r20
     bd0:	33 97       	sbiw	r30, 0x03	; 3
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	80 83       	st	Z, r24
     bd6:	f9 01       	movw	r30, r18
     bd8:	eb 5f       	subi	r30, 0xFB	; 251
     bda:	fe 4f       	sbci	r31, 0xFE	; 254
     bdc:	40 81       	ld	r20, Z
     bde:	51 81       	ldd	r21, Z+1	; 0x01
     be0:	11 96       	adiw	r26, 0x01	; 1
     be2:	5c 93       	st	X, r21
     be4:	4e 93       	st	-X, r20
     be6:	31 97       	sbiw	r30, 0x01	; 1
     be8:	80 83       	st	Z, r24
     bea:	4b e4       	ldi	r20, 0x4B	; 75
     bec:	52 e0       	ldi	r21, 0x02	; 2
     bee:	69 e2       	ldi	r22, 0x29	; 41
     bf0:	75 e1       	ldi	r23, 0x15	; 21
     bf2:	ce 01       	movw	r24, r28
     bf4:	01 96       	adiw	r24, 0x01	; 1
     bf6:	90 d6       	rcall	.+3360   	; 0x1918 <enqueueRQ>
     bf8:	4b e4       	ldi	r20, 0x4B	; 75
     bfa:	52 e0       	ldi	r21, 0x02	; 2
     bfc:	69 e2       	ldi	r22, 0x29	; 41
     bfe:	75 e1       	ldi	r23, 0x15	; 21
     c00:	89 e5       	ldi	r24, 0x59	; 89
     c02:	92 e0       	ldi	r25, 0x02	; 2
     c04:	89 d6       	rcall	.+3346   	; 0x1918 <enqueueRQ>
     c06:	b7 de       	rcall	.-658    	; 0x976 <Dispatch>
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	1f 91       	pop	r17
     c12:	0f 91       	pop	r16
     c14:	08 95       	ret

00000c16 <OS_Start>:
     c16:	2f 92       	push	r2
     c18:	3f 92       	push	r3
     c1a:	4f 92       	push	r4
     c1c:	5f 92       	push	r5
     c1e:	6f 92       	push	r6
     c20:	7f 92       	push	r7
     c22:	8f 92       	push	r8
     c24:	9f 92       	push	r9
     c26:	af 92       	push	r10
     c28:	bf 92       	push	r11
     c2a:	cf 92       	push	r12
     c2c:	df 92       	push	r13
     c2e:	ef 92       	push	r14
     c30:	ff 92       	push	r15
     c32:	0f 93       	push	r16
     c34:	1f 93       	push	r17
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
     c3a:	00 d0       	rcall	.+0      	; 0xc3c <OS_Start+0x26>
     c3c:	1f 92       	push	r1
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62
     c42:	80 91 57 02 	lds	r24, 0x0257
     c46:	90 91 58 02 	lds	r25, 0x0258
     c4a:	89 2b       	or	r24, r25
     c4c:	09 f0       	breq	.+2      	; 0xc50 <OS_Start+0x3a>
     c4e:	06 c4       	rjmp	.+2060   	; 0x145c <OS_Start+0x846>
     c50:	80 91 55 02 	lds	r24, 0x0255
     c54:	90 91 56 02 	lds	r25, 0x0256
     c58:	89 2b       	or	r24, r25
     c5a:	09 f4       	brne	.+2      	; 0xc5e <OS_Start+0x48>
     c5c:	ff c3       	rjmp	.+2046   	; 0x145c <OS_Start+0x846>
     c5e:	f8 94       	cli
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	90 93 58 02 	sts	0x0258, r25
     c68:	80 93 57 02 	sts	0x0257, r24
     c6c:	84 de       	rcall	.-760    	; 0x976 <Dispatch>
     c6e:	0f 2e       	mov	r0, r31
     c70:	fb e5       	ldi	r31, 0x5B	; 91
     c72:	ef 2e       	mov	r14, r31
     c74:	f2 e0       	ldi	r31, 0x02	; 2
     c76:	ff 2e       	mov	r15, r31
     c78:	f0 2d       	mov	r31, r0
     c7a:	0f 2e       	mov	r0, r31
     c7c:	fe e1       	ldi	r31, 0x1E	; 30
     c7e:	af 2e       	mov	r10, r31
     c80:	bb 24       	eor	r11, r11
     c82:	b3 94       	inc	r11
     c84:	f0 2d       	mov	r31, r0
     c86:	0f 2e       	mov	r0, r31
     c88:	f3 e6       	ldi	r31, 0x63	; 99
     c8a:	2f 2e       	mov	r2, r31
     c8c:	31 2c       	mov	r3, r1
     c8e:	f0 2d       	mov	r31, r0
     c90:	88 24       	eor	r8, r8
     c92:	83 94       	inc	r8
     c94:	91 2c       	mov	r9, r1
     c96:	0f 2e       	mov	r0, r31
     c98:	f3 e8       	ldi	r31, 0x83	; 131
     c9a:	cf 2e       	mov	r12, r31
     c9c:	f2 e0       	ldi	r31, 0x02	; 2
     c9e:	df 2e       	mov	r13, r31
     ca0:	f0 2d       	mov	r31, r0
     ca2:	0b eb       	ldi	r16, 0xBB	; 187
     ca4:	12 e0       	ldi	r17, 0x02	; 2
     ca6:	0f 2e       	mov	r0, r31
     ca8:	fa e0       	ldi	r31, 0x0A	; 10
     caa:	6f 2e       	mov	r6, r31
     cac:	71 2c       	mov	r7, r1
     cae:	f0 2d       	mov	r31, r0
     cb0:	e0 91 59 02 	lds	r30, 0x0259
     cb4:	f0 91 5a 02 	lds	r31, 0x025A
     cb8:	df 01       	movw	r26, r30
     cba:	a3 5f       	subi	r26, 0xF3	; 243
     cbc:	be 4f       	sbci	r27, 0xFE	; 254
     cbe:	1c 92       	st	X, r1
     cc0:	82 81       	ldd	r24, Z+2	; 0x02
     cc2:	93 81       	ldd	r25, Z+3	; 0x03
     cc4:	90 93 4a 15 	sts	0x154A, r25
     cc8:	80 93 49 15 	sts	0x1549, r24
     ccc:	3a da       	rcall	.-2956   	; 0x142 <CSwitch>
     cce:	82 e0       	ldi	r24, 0x02	; 2
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	fc db       	rcall	.-2056   	; 0x4cc <disable_LED>
     cd4:	85 e0       	ldi	r24, 0x05	; 5
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	f9 db       	rcall	.-2062   	; 0x4cc <disable_LED>
     cda:	86 e0       	ldi	r24, 0x06	; 6
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	f6 db       	rcall	.-2068   	; 0x4cc <disable_LED>
     ce0:	80 91 59 02 	lds	r24, 0x0259
     ce4:	90 91 5a 02 	lds	r25, 0x025A
     ce8:	9c 83       	std	Y+4, r25	; 0x04
     cea:	8b 83       	std	Y+3, r24	; 0x03
     cec:	80 91 49 15 	lds	r24, 0x1549
     cf0:	90 91 4a 15 	lds	r25, 0x154A
     cf4:	ab 81       	ldd	r26, Y+3	; 0x03
     cf6:	bc 81       	ldd	r27, Y+4	; 0x04
     cf8:	13 96       	adiw	r26, 0x03	; 3
     cfa:	9c 93       	st	X, r25
     cfc:	8e 93       	st	-X, r24
     cfe:	12 97       	sbiw	r26, 0x02	; 2
     d00:	fd 01       	movw	r30, r26
     d02:	e3 5f       	subi	r30, 0xF3	; 243
     d04:	fe 4f       	sbci	r31, 0xFE	; 254
     d06:	e0 81       	ld	r30, Z
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	ed 30       	cpi	r30, 0x0D	; 13
     d0c:	f1 05       	cpc	r31, r1
     d0e:	80 f6       	brcc	.-96     	; 0xcb0 <OS_Start+0x9a>
     d10:	88 27       	eor	r24, r24
     d12:	ee 58       	subi	r30, 0x8E	; 142
     d14:	ff 4f       	sbci	r31, 0xFF	; 255
     d16:	8f 4f       	sbci	r24, 0xFF	; 255
     d18:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <__tablejump2__>
     d1c:	eb 81       	ldd	r30, Y+3	; 0x03
     d1e:	fc 81       	ldd	r31, Y+4	; 0x04
     d20:	e4 5e       	subi	r30, 0xE4	; 228
     d22:	fe 4f       	sbci	r31, 0xFE	; 254
     d24:	80 81       	ld	r24, Z
     d26:	91 81       	ldd	r25, Z+1	; 0x01
     d28:	eb eb       	ldi	r30, 0xBB	; 187
     d2a:	f2 e0       	ldi	r31, 0x02	; 2
     d2c:	20 81       	ld	r18, Z
     d2e:	31 81       	ldd	r19, Z+1	; 0x01
     d30:	28 17       	cp	r18, r24
     d32:	39 07       	cpc	r19, r25
     d34:	09 f0       	breq	.+2      	; 0xd38 <OS_Start+0x122>
     d36:	89 c0       	rjmp	.+274    	; 0xe4a <OS_Start+0x234>
     d38:	0d c3       	rjmp	.+1562   	; 0x1354 <OS_Start+0x73e>
     d3a:	eb 81       	ldd	r30, Y+3	; 0x03
     d3c:	fc 81       	ldd	r31, Y+4	; 0x04
     d3e:	e7 5f       	subi	r30, 0xF7	; 247
     d40:	fe 4f       	sbci	r31, 0xFE	; 254
     d42:	40 81       	ld	r20, Z
     d44:	51 81       	ldd	r21, Z+1	; 0x01
     d46:	eb 81       	ldd	r30, Y+3	; 0x03
     d48:	fc 81       	ldd	r31, Y+4	; 0x04
     d4a:	eb 5f       	subi	r30, 0xFB	; 251
     d4c:	fe 4f       	sbci	r31, 0xFE	; 254
     d4e:	60 81       	ld	r22, Z
     d50:	71 81       	ldd	r23, Z+1	; 0x01
     d52:	eb 81       	ldd	r30, Y+3	; 0x03
     d54:	fc 81       	ldd	r31, Y+4	; 0x04
     d56:	e5 5f       	subi	r30, 0xF5	; 245
     d58:	fe 4f       	sbci	r31, 0xFE	; 254
     d5a:	80 81       	ld	r24, Z
     d5c:	91 81       	ldd	r25, Z+1	; 0x01
     d5e:	52 dd       	rcall	.-1372   	; 0x804 <Kernel_Create_Task>
     d60:	eb 81       	ldd	r30, Y+3	; 0x03
     d62:	fc 81       	ldd	r31, Y+4	; 0x04
     d64:	e2 5f       	subi	r30, 0xF2	; 242
     d66:	fe 4f       	sbci	r31, 0xFE	; 254
     d68:	91 83       	std	Z+1, r25	; 0x01
     d6a:	80 83       	st	Z, r24
     d6c:	a1 cf       	rjmp	.-190    	; 0xcb0 <OS_Start+0x9a>
     d6e:	eb 81       	ldd	r30, Y+3	; 0x03
     d70:	fc 81       	ldd	r31, Y+4	; 0x04
     d72:	ec 5f       	subi	r30, 0xFC	; 252
     d74:	fe 4f       	sbci	r31, 0xFE	; 254
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	80 83       	st	Z, r24
     d7a:	4b e4       	ldi	r20, 0x4B	; 75
     d7c:	52 e0       	ldi	r21, 0x02	; 2
     d7e:	69 e2       	ldi	r22, 0x29	; 41
     d80:	75 e1       	ldi	r23, 0x15	; 21
     d82:	89 e5       	ldi	r24, 0x59	; 89
     d84:	92 e0       	ldi	r25, 0x02	; 2
     d86:	c8 d5       	rcall	.+2960   	; 0x1918 <enqueueRQ>
     d88:	f6 dd       	rcall	.-1044   	; 0x976 <Dispatch>
     d8a:	92 cf       	rjmp	.-220    	; 0xcb0 <OS_Start+0x9a>
     d8c:	eb 81       	ldd	r30, Y+3	; 0x03
     d8e:	fc 81       	ldd	r31, Y+4	; 0x04
     d90:	ec 5f       	subi	r30, 0xFC	; 252
     d92:	fe 4f       	sbci	r31, 0xFE	; 254
     d94:	83 e0       	ldi	r24, 0x03	; 3
     d96:	80 83       	st	Z, r24
     d98:	49 e4       	ldi	r20, 0x49	; 73
     d9a:	52 e0       	ldi	r21, 0x02	; 2
     d9c:	69 e0       	ldi	r22, 0x09	; 9
     d9e:	75 e1       	ldi	r23, 0x15	; 21
     da0:	89 e5       	ldi	r24, 0x59	; 89
     da2:	92 e0       	ldi	r25, 0x02	; 2
     da4:	48 d5       	rcall	.+2704   	; 0x1836 <enqueueSQ>
     da6:	e7 dd       	rcall	.-1074   	; 0x976 <Dispatch>
     da8:	83 cf       	rjmp	.-250    	; 0xcb0 <OS_Start+0x9a>
     daa:	ab 81       	ldd	r26, Y+3	; 0x03
     dac:	bc 81       	ldd	r27, Y+4	; 0x04
     dae:	2d 91       	ld	r18, X+
     db0:	3c 91       	ld	r19, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	fd 01       	movw	r30, r26
     db6:	e4 5e       	subi	r30, 0xE4	; 228
     db8:	fe 4f       	sbci	r31, 0xFE	; 254
     dba:	80 81       	ld	r24, Z
     dbc:	91 81       	ldd	r25, Z+1	; 0x01
     dbe:	28 17       	cp	r18, r24
     dc0:	39 07       	cpc	r19, r25
     dc2:	51 f0       	breq	.+20     	; 0xdd8 <OS_Start+0x1c2>
     dc4:	80 81       	ld	r24, Z
     dc6:	91 81       	ldd	r25, Z+1	; 0x01
     dc8:	eb eb       	ldi	r30, 0xBB	; 187
     dca:	f2 e0       	ldi	r31, 0x02	; 2
     dcc:	20 81       	ld	r18, Z
     dce:	31 81       	ldd	r19, Z+1	; 0x01
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	41 f4       	brne	.+16     	; 0xde6 <OS_Start+0x1d0>
     dd6:	ad c2       	rjmp	.+1370   	; 0x1332 <OS_Start+0x71c>
     dd8:	eb 81       	ldd	r30, Y+3	; 0x03
     dda:	fc 81       	ldd	r31, Y+4	; 0x04
     ddc:	e6 5e       	subi	r30, 0xE6	; 230
     dde:	fe 4f       	sbci	r31, 0xFE	; 254
     de0:	91 82       	std	Z+1, r9	; 0x01
     de2:	80 82       	st	Z, r8
     de4:	1a c0       	rjmp	.+52     	; 0xe1a <OS_Start+0x204>
     de6:	e9 ed       	ldi	r30, 0xD9	; 217
     de8:	f3 e0       	ldi	r31, 0x03	; 3
     dea:	c4 01       	movw	r24, r8
     dec:	ab 81       	ldd	r26, Y+3	; 0x03
     dee:	bc 81       	ldd	r27, Y+4	; 0x04
     df0:	a4 5e       	subi	r26, 0xE4	; 228
     df2:	be 4f       	sbci	r27, 0xFE	; 254
     df4:	6b 81       	ldd	r22, Y+3	; 0x03
     df6:	7c 81       	ldd	r23, Y+4	; 0x04
     df8:	2d 91       	ld	r18, X+
     dfa:	3c 91       	ld	r19, X
     dfc:	11 97       	sbiw	r26, 0x01	; 1
     dfe:	40 81       	ld	r20, Z
     e00:	51 81       	ldd	r21, Z+1	; 0x01
     e02:	42 17       	cp	r20, r18
     e04:	53 07       	cpc	r21, r19
     e06:	09 f4       	brne	.+2      	; 0xe0a <OS_Start+0x1f4>
     e08:	97 c2       	rjmp	.+1326   	; 0x1338 <OS_Start+0x722>
     e0a:	01 96       	adiw	r24, 0x01	; 1
     e0c:	e2 5e       	subi	r30, 0xE2	; 226
     e0e:	fe 4f       	sbci	r31, 0xFE	; 254
     e10:	80 31       	cpi	r24, 0x10	; 16
     e12:	91 05       	cpc	r25, r1
     e14:	89 f7       	brne	.-30     	; 0xdf8 <OS_Start+0x1e2>
     e16:	7c 83       	std	Y+4, r23	; 0x04
     e18:	6b 83       	std	Y+3, r22	; 0x03
     e1a:	eb 81       	ldd	r30, Y+3	; 0x03
     e1c:	fc 81       	ldd	r31, Y+4	; 0x04
     e1e:	e6 5e       	subi	r30, 0xE6	; 230
     e20:	fe 4f       	sbci	r31, 0xFE	; 254
     e22:	80 81       	ld	r24, Z
     e24:	91 81       	ldd	r25, Z+1	; 0x01
     e26:	89 2b       	or	r24, r25
     e28:	09 f4       	brne	.+2      	; 0xe2c <OS_Start+0x216>
     e2a:	42 cf       	rjmp	.-380    	; 0xcb0 <OS_Start+0x9a>
     e2c:	eb 81       	ldd	r30, Y+3	; 0x03
     e2e:	fc 81       	ldd	r31, Y+4	; 0x04
     e30:	ec 5f       	subi	r30, 0xFC	; 252
     e32:	fe 4f       	sbci	r31, 0xFE	; 254
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	80 83       	st	Z, r24
     e38:	4b e4       	ldi	r20, 0x4B	; 75
     e3a:	52 e0       	ldi	r21, 0x02	; 2
     e3c:	69 e2       	ldi	r22, 0x29	; 41
     e3e:	75 e1       	ldi	r23, 0x15	; 21
     e40:	89 e5       	ldi	r24, 0x59	; 89
     e42:	92 e0       	ldi	r25, 0x02	; 2
     e44:	69 d5       	rcall	.+2770   	; 0x1918 <enqueueRQ>
     e46:	97 dd       	rcall	.-1234   	; 0x976 <Dispatch>
     e48:	33 cf       	rjmp	.-410    	; 0xcb0 <OS_Start+0x9a>
     e4a:	e9 ed       	ldi	r30, 0xD9	; 217
     e4c:	f3 e0       	ldi	r31, 0x03	; 3
     e4e:	c4 01       	movw	r24, r8
     e50:	ab 81       	ldd	r26, Y+3	; 0x03
     e52:	bc 81       	ldd	r27, Y+4	; 0x04
     e54:	a4 5e       	subi	r26, 0xE4	; 228
     e56:	be 4f       	sbci	r27, 0xFE	; 254
     e58:	6b 81       	ldd	r22, Y+3	; 0x03
     e5a:	7c 81       	ldd	r23, Y+4	; 0x04
     e5c:	2d 91       	ld	r18, X+
     e5e:	3c 91       	ld	r19, X
     e60:	11 97       	sbiw	r26, 0x01	; 1
     e62:	40 81       	ld	r20, Z
     e64:	51 81       	ldd	r21, Z+1	; 0x01
     e66:	42 17       	cp	r20, r18
     e68:	53 07       	cpc	r21, r19
     e6a:	09 f4       	brne	.+2      	; 0xe6e <OS_Start+0x258>
     e6c:	76 c2       	rjmp	.+1260   	; 0x135a <OS_Start+0x744>
     e6e:	01 96       	adiw	r24, 0x01	; 1
     e70:	e2 5e       	subi	r30, 0xE2	; 226
     e72:	fe 4f       	sbci	r31, 0xFE	; 254
     e74:	80 31       	cpi	r24, 0x10	; 16
     e76:	91 05       	cpc	r25, r1
     e78:	89 f7       	brne	.-30     	; 0xe5c <OS_Start+0x246>
     e7a:	1a cf       	rjmp	.-460    	; 0xcb0 <OS_Start+0x9a>
     e7c:	8a 9d       	mul	r24, r10
     e7e:	90 01       	movw	r18, r0
     e80:	8b 9d       	mul	r24, r11
     e82:	30 0d       	add	r19, r0
     e84:	9a 9d       	mul	r25, r10
     e86:	30 0d       	add	r19, r0
     e88:	11 24       	eor	r1, r1
     e8a:	c9 01       	movw	r24, r18
     e8c:	85 54       	subi	r24, 0x45	; 69
     e8e:	9d 4f       	sbci	r25, 0xFD	; 253
     e90:	fc 01       	movw	r30, r24
     e92:	e6 5e       	subi	r30, 0xE6	; 230
     e94:	fe 4f       	sbci	r31, 0xFE	; 254
     e96:	11 82       	std	Z+1, r1	; 0x01
     e98:	10 82       	st	Z, r1
     e9a:	eb 81       	ldd	r30, Y+3	; 0x03
     e9c:	fc 81       	ldd	r31, Y+4	; 0x04
     e9e:	e9 5f       	subi	r30, 0xF9	; 249
     ea0:	fe 4f       	sbci	r31, 0xFE	; 254
     ea2:	20 81       	ld	r18, Z
     ea4:	31 81       	ldd	r19, Z+1	; 0x01
     ea6:	fc 01       	movw	r30, r24
     ea8:	e9 5f       	subi	r30, 0xF9	; 249
     eaa:	fe 4f       	sbci	r31, 0xFE	; 254
     eac:	80 81       	ld	r24, Z
     eae:	91 81       	ldd	r25, Z+1	; 0x01
     eb0:	82 17       	cp	r24, r18
     eb2:	93 07       	cpc	r25, r19
     eb4:	08 f0       	brcs	.+2      	; 0xeb8 <OS_Start+0x2a2>
     eb6:	fc ce       	rjmp	.-520    	; 0xcb0 <OS_Start+0x9a>
     eb8:	eb 81       	ldd	r30, Y+3	; 0x03
     eba:	fc 81       	ldd	r31, Y+4	; 0x04
     ebc:	ec 5f       	subi	r30, 0xFC	; 252
     ebe:	fe 4f       	sbci	r31, 0xFE	; 254
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	80 83       	st	Z, r24
     ec4:	4b e4       	ldi	r20, 0x4B	; 75
     ec6:	52 e0       	ldi	r21, 0x02	; 2
     ec8:	69 e2       	ldi	r22, 0x29	; 41
     eca:	75 e1       	ldi	r23, 0x15	; 21
     ecc:	89 e5       	ldi	r24, 0x59	; 89
     ece:	92 e0       	ldi	r25, 0x02	; 2
     ed0:	23 d5       	rcall	.+2630   	; 0x1918 <enqueueRQ>
     ed2:	51 dd       	rcall	.-1374   	; 0x976 <Dispatch>
     ed4:	ed ce       	rjmp	.-550    	; 0xcb0 <OS_Start+0x9a>
     ed6:	eb 81       	ldd	r30, Y+3	; 0x03
     ed8:	fc 81       	ldd	r31, Y+4	; 0x04
     eda:	e9 5f       	subi	r30, 0xF9	; 249
     edc:	fe 4f       	sbci	r31, 0xFE	; 254
     ede:	11 82       	std	Z+1, r1	; 0x01
     ee0:	10 82       	st	Z, r1
     ee2:	eb 81       	ldd	r30, Y+3	; 0x03
     ee4:	fc 81       	ldd	r31, Y+4	; 0x04
     ee6:	eb 5f       	subi	r30, 0xFB	; 251
     ee8:	fe 4f       	sbci	r31, 0xFE	; 254
     eea:	11 82       	std	Z+1, r1	; 0x01
     eec:	10 82       	st	Z, r1
     eee:	eb 81       	ldd	r30, Y+3	; 0x03
     ef0:	fc 81       	ldd	r31, Y+4	; 0x04
     ef2:	ec 5f       	subi	r30, 0xFC	; 252
     ef4:	fe 4f       	sbci	r31, 0xFE	; 254
     ef6:	86 e0       	ldi	r24, 0x06	; 6
     ef8:	80 83       	st	Z, r24
     efa:	dc 82       	std	Y+4, r13	; 0x04
     efc:	cb 82       	std	Y+3, r12	; 0x03
     efe:	e0 91 59 02 	lds	r30, 0x0259
     f02:	f0 91 5a 02 	lds	r31, 0x025A
     f06:	80 81       	ld	r24, Z
     f08:	91 81       	ldd	r25, Z+1	; 0x01
     f0a:	ab 81       	ldd	r26, Y+3	; 0x03
     f0c:	bc 81       	ldd	r27, Y+4	; 0x04
     f0e:	13 96       	adiw	r26, 0x03	; 3
     f10:	2d 91       	ld	r18, X+
     f12:	3c 91       	ld	r19, X
     f14:	14 97       	sbiw	r26, 0x04	; 4
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	39 f4       	brne	.+14     	; 0xf2a <OS_Start+0x314>
     f1c:	8d 91       	ld	r24, X+
     f1e:	9c 91       	ld	r25, X
     f20:	ec 5e       	subi	r30, 0xEC	; 236
     f22:	fe 4f       	sbci	r31, 0xFE	; 254
     f24:	91 83       	std	Z+1, r25	; 0x01
     f26:	80 83       	st	Z, r24
     f28:	57 dd       	rcall	.-1362   	; 0x9d8 <Kernel_Unlock_Mutex>
     f2a:	eb 81       	ldd	r30, Y+3	; 0x03
     f2c:	fc 81       	ldd	r31, Y+4	; 0x04
     f2e:	37 96       	adiw	r30, 0x07	; 7
     f30:	fc 83       	std	Y+4, r31	; 0x04
     f32:	eb 83       	std	Y+3, r30	; 0x03
     f34:	e0 17       	cp	r30, r16
     f36:	f1 07       	cpc	r31, r17
     f38:	11 f7       	brne	.-60     	; 0xefe <OS_Start+0x2e8>
     f3a:	e0 91 59 02 	lds	r30, 0x0259
     f3e:	f0 91 5a 02 	lds	r31, 0x025A
     f42:	df 01       	movw	r26, r30
     f44:	ac 5f       	subi	r26, 0xFC	; 252
     f46:	be 4f       	sbci	r27, 0xFE	; 254
     f48:	1c 92       	st	X, r1
     f4a:	52 96       	adiw	r26, 0x12	; 18
     f4c:	11 96       	adiw	r26, 0x01	; 1
     f4e:	3c 92       	st	X, r3
     f50:	2e 92       	st	-X, r2
     f52:	1f 97       	sbiw	r26, 0x0f	; 15
     f54:	11 96       	adiw	r26, 0x01	; 1
     f56:	7c 92       	st	X, r7
     f58:	6e 92       	st	-X, r6
     f5a:	12 97       	sbiw	r26, 0x02	; 2
     f5c:	11 96       	adiw	r26, 0x01	; 1
     f5e:	7c 92       	st	X, r7
     f60:	6e 92       	st	-X, r6
     f62:	11 82       	std	Z+1, r1	; 0x01
     f64:	10 82       	st	Z, r1
     f66:	80 91 55 02 	lds	r24, 0x0255
     f6a:	90 91 56 02 	lds	r25, 0x0256
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	90 93 56 02 	sts	0x0256, r25
     f74:	80 93 55 02 	sts	0x0255, r24
     f78:	fe dc       	rcall	.-1540   	; 0x976 <Dispatch>
     f7a:	9a ce       	rjmp	.-716    	; 0xcb0 <OS_Start+0x9a>
     f7c:	80 91 51 02 	lds	r24, 0x0251
     f80:	90 91 52 02 	lds	r25, 0x0252
     f84:	08 97       	sbiw	r24, 0x08	; 8
     f86:	41 f1       	breq	.+80     	; 0xfd8 <OS_Start+0x3c2>
     f88:	d6 01       	movw	r26, r12
     f8a:	12 96       	adiw	r26, 0x02	; 2
     f8c:	8c 91       	ld	r24, X
     f8e:	88 23       	and	r24, r24
     f90:	89 f0       	breq	.+34     	; 0xfb4 <OS_Start+0x39e>
     f92:	ec e8       	ldi	r30, 0x8C	; 140
     f94:	f2 e0       	ldi	r31, 0x02	; 2
     f96:	94 01       	movw	r18, r8
     f98:	4b 81       	ldd	r20, Y+3	; 0x03
     f9a:	5c 81       	ldd	r21, Y+4	; 0x04
     f9c:	80 81       	ld	r24, Z
     f9e:	88 23       	and	r24, r24
     fa0:	61 f0       	breq	.+24     	; 0xfba <OS_Start+0x3a4>
     fa2:	2f 5f       	subi	r18, 0xFF	; 255
     fa4:	3f 4f       	sbci	r19, 0xFF	; 255
     fa6:	37 96       	adiw	r30, 0x07	; 7
     fa8:	28 30       	cpi	r18, 0x08	; 8
     faa:	31 05       	cpc	r19, r1
     fac:	b9 f7       	brne	.-18     	; 0xf9c <OS_Start+0x386>
     fae:	5c 83       	std	Y+4, r21	; 0x04
     fb0:	4b 83       	std	Y+3, r20	; 0x03
     fb2:	05 c0       	rjmp	.+10     	; 0xfbe <OS_Start+0x3a8>
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <OS_Start+0x3a8>
     fba:	5c 83       	std	Y+4, r21	; 0x04
     fbc:	4b 83       	std	Y+3, r20	; 0x03
     fbe:	c9 01       	movw	r24, r18
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	82 1b       	sub	r24, r18
     fce:	93 0b       	sbc	r25, r19
     fd0:	8d 57       	subi	r24, 0x7D	; 125
     fd2:	9d 4f       	sbci	r25, 0xFD	; 253
     fd4:	47 dc       	rcall	.-1906   	; 0x864 <Kernel_Init_Mutex_At>
     fd6:	2c 01       	movw	r4, r24
     fd8:	eb 81       	ldd	r30, Y+3	; 0x03
     fda:	fc 81       	ldd	r31, Y+4	; 0x04
     fdc:	e2 5f       	subi	r30, 0xF2	; 242
     fde:	fe 4f       	sbci	r31, 0xFE	; 254
     fe0:	51 82       	std	Z+1, r5	; 0x01
     fe2:	40 82       	st	Z, r4
     fe4:	65 ce       	rjmp	.-822    	; 0xcb0 <OS_Start+0x9a>
     fe6:	eb 81       	ldd	r30, Y+3	; 0x03
     fe8:	fc 81       	ldd	r31, Y+4	; 0x04
     fea:	ec 5e       	subi	r30, 0xEC	; 236
     fec:	fe 4f       	sbci	r31, 0xFE	; 254
     fee:	40 81       	ld	r20, Z
     ff0:	51 81       	ldd	r21, Z+1	; 0x01
     ff2:	f6 01       	movw	r30, r12
     ff4:	80 81       	ld	r24, Z
     ff6:	91 81       	ldd	r25, Z+1	; 0x01
     ff8:	48 17       	cp	r20, r24
     ffa:	59 07       	cpc	r21, r25
     ffc:	09 f4       	brne	.+2      	; 0x1000 <OS_Start+0x3ea>
     ffe:	bf c1       	rjmp	.+894    	; 0x137e <OS_Start+0x768>
    1000:	c4 01       	movw	r24, r8
    1002:	6b 81       	ldd	r22, Y+3	; 0x03
    1004:	7c 81       	ldd	r23, Y+4	; 0x04
    1006:	27 81       	ldd	r18, Z+7	; 0x07
    1008:	30 85       	ldd	r19, Z+8	; 0x08
    100a:	42 17       	cp	r20, r18
    100c:	53 07       	cpc	r21, r19
    100e:	09 f4       	brne	.+2      	; 0x1012 <OS_Start+0x3fc>
    1010:	b9 c1       	rjmp	.+882    	; 0x1384 <OS_Start+0x76e>
    1012:	01 96       	adiw	r24, 0x01	; 1
    1014:	37 96       	adiw	r30, 0x07	; 7
    1016:	88 30       	cpi	r24, 0x08	; 8
    1018:	91 05       	cpc	r25, r1
    101a:	a9 f7       	brne	.-22     	; 0x1006 <OS_Start+0x3f0>
    101c:	49 ce       	rjmp	.-878    	; 0xcb0 <OS_Start+0x9a>
    101e:	fc 01       	movw	r30, r24
    1020:	ee 0f       	add	r30, r30
    1022:	ff 1f       	adc	r31, r31
    1024:	ee 0f       	add	r30, r30
    1026:	ff 1f       	adc	r31, r31
    1028:	ee 0f       	add	r30, r30
    102a:	ff 1f       	adc	r31, r31
    102c:	e8 1b       	sub	r30, r24
    102e:	f9 0b       	sbc	r31, r25
    1030:	ed 57       	subi	r30, 0x7D	; 125
    1032:	fd 4f       	sbci	r31, 0xFD	; 253
    1034:	82 e0       	ldi	r24, 0x02	; 2
    1036:	82 83       	std	Z+2, r24	; 0x02
    1038:	ab 81       	ldd	r26, Y+3	; 0x03
    103a:	bc 81       	ldd	r27, Y+4	; 0x04
    103c:	8d 91       	ld	r24, X+
    103e:	9c 91       	ld	r25, X
    1040:	94 83       	std	Z+4, r25	; 0x04
    1042:	83 83       	std	Z+3, r24	; 0x03
    1044:	85 81       	ldd	r24, Z+5	; 0x05
    1046:	96 81       	ldd	r25, Z+6	; 0x06
    1048:	01 96       	adiw	r24, 0x01	; 1
    104a:	96 83       	std	Z+6, r25	; 0x06
    104c:	85 83       	std	Z+5, r24	; 0x05
    104e:	30 ce       	rjmp	.-928    	; 0xcb0 <OS_Start+0x9a>
    1050:	fc 01       	movw	r30, r24
    1052:	ee 0f       	add	r30, r30
    1054:	ff 1f       	adc	r31, r31
    1056:	ee 0f       	add	r30, r30
    1058:	ff 1f       	adc	r31, r31
    105a:	ee 0f       	add	r30, r30
    105c:	ff 1f       	adc	r31, r31
    105e:	e8 1b       	sub	r30, r24
    1060:	f9 0b       	sbc	r31, r25
    1062:	ed 57       	subi	r30, 0x7D	; 125
    1064:	fd 4f       	sbci	r31, 0xFD	; 253
    1066:	23 81       	ldd	r18, Z+3	; 0x03
    1068:	34 81       	ldd	r19, Z+4	; 0x04
    106a:	eb 81       	ldd	r30, Y+3	; 0x03
    106c:	fc 81       	ldd	r31, Y+4	; 0x04
    106e:	40 81       	ld	r20, Z
    1070:	51 81       	ldd	r21, Z+1	; 0x01
    1072:	24 17       	cp	r18, r20
    1074:	35 07       	cpc	r19, r21
    1076:	89 f4       	brne	.+34     	; 0x109a <OS_Start+0x484>
    1078:	fc 01       	movw	r30, r24
    107a:	ee 0f       	add	r30, r30
    107c:	ff 1f       	adc	r31, r31
    107e:	ee 0f       	add	r30, r30
    1080:	ff 1f       	adc	r31, r31
    1082:	ee 0f       	add	r30, r30
    1084:	ff 1f       	adc	r31, r31
    1086:	e8 1b       	sub	r30, r24
    1088:	f9 0b       	sbc	r31, r25
    108a:	ed 57       	subi	r30, 0x7D	; 125
    108c:	fd 4f       	sbci	r31, 0xFD	; 253
    108e:	85 81       	ldd	r24, Z+5	; 0x05
    1090:	96 81       	ldd	r25, Z+6	; 0x06
    1092:	01 96       	adiw	r24, 0x01	; 1
    1094:	96 83       	std	Z+6, r25	; 0x06
    1096:	85 83       	std	Z+5, r24	; 0x05
    1098:	0b ce       	rjmp	.-1002   	; 0xcb0 <OS_Start+0x9a>
    109a:	eb eb       	ldi	r30, 0xBB	; 187
    109c:	f2 e0       	ldi	r31, 0x02	; 2
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	6b 81       	ldd	r22, Y+3	; 0x03
    10a4:	7c 81       	ldd	r23, Y+4	; 0x04
    10a6:	40 81       	ld	r20, Z
    10a8:	51 81       	ldd	r21, Z+1	; 0x01
    10aa:	24 17       	cp	r18, r20
    10ac:	35 07       	cpc	r19, r21
    10ae:	19 f4       	brne	.+6      	; 0x10b6 <OS_Start+0x4a0>
    10b0:	21 15       	cp	r18, r1
    10b2:	31 05       	cpc	r19, r1
    10b4:	31 f4       	brne	.+12     	; 0x10c2 <OS_Start+0x4ac>
    10b6:	01 96       	adiw	r24, 0x01	; 1
    10b8:	e2 5e       	subi	r30, 0xE2	; 226
    10ba:	fe 4f       	sbci	r31, 0xFE	; 254
    10bc:	80 31       	cpi	r24, 0x10	; 16
    10be:	91 05       	cpc	r25, r1
    10c0:	91 f7       	brne	.-28     	; 0x10a6 <OS_Start+0x490>
    10c2:	7c 83       	std	Y+4, r23	; 0x04
    10c4:	6b 83       	std	Y+3, r22	; 0x03
    10c6:	fb 01       	movw	r30, r22
    10c8:	e9 5f       	subi	r30, 0xF9	; 249
    10ca:	fe 4f       	sbci	r31, 0xFE	; 254
    10cc:	20 81       	ld	r18, Z
    10ce:	31 81       	ldd	r19, Z+1	; 0x01
    10d0:	8a 9d       	mul	r24, r10
    10d2:	f0 01       	movw	r30, r0
    10d4:	8b 9d       	mul	r24, r11
    10d6:	f0 0d       	add	r31, r0
    10d8:	9a 9d       	mul	r25, r10
    10da:	f0 0d       	add	r31, r0
    10dc:	11 24       	eor	r1, r1
    10de:	ee 53       	subi	r30, 0x3E	; 62
    10e0:	fc 4f       	sbci	r31, 0xFC	; 252
    10e2:	40 81       	ld	r20, Z
    10e4:	51 81       	ldd	r21, Z+1	; 0x01
    10e6:	24 17       	cp	r18, r20
    10e8:	35 07       	cpc	r19, r21
    10ea:	80 f4       	brcc	.+32     	; 0x110c <OS_Start+0x4f6>
    10ec:	fb 01       	movw	r30, r22
    10ee:	e9 5f       	subi	r30, 0xF9	; 249
    10f0:	fe 4f       	sbci	r31, 0xFE	; 254
    10f2:	20 81       	ld	r18, Z
    10f4:	31 81       	ldd	r19, Z+1	; 0x01
    10f6:	8a 9d       	mul	r24, r10
    10f8:	f0 01       	movw	r30, r0
    10fa:	8b 9d       	mul	r24, r11
    10fc:	f0 0d       	add	r31, r0
    10fe:	9a 9d       	mul	r25, r10
    1100:	f0 0d       	add	r31, r0
    1102:	11 24       	eor	r1, r1
    1104:	ee 53       	subi	r30, 0x3E	; 62
    1106:	fc 4f       	sbci	r31, 0xFC	; 252
    1108:	31 83       	std	Z+1, r19	; 0x01
    110a:	20 83       	st	Z, r18
    110c:	eb 81       	ldd	r30, Y+3	; 0x03
    110e:	fc 81       	ldd	r31, Y+4	; 0x04
    1110:	ec 5f       	subi	r30, 0xFC	; 252
    1112:	fe 4f       	sbci	r31, 0xFE	; 254
    1114:	84 e0       	ldi	r24, 0x04	; 4
    1116:	80 83       	st	Z, r24
    1118:	47 e4       	ldi	r20, 0x47	; 71
    111a:	52 e0       	ldi	r21, 0x02	; 2
    111c:	6b e4       	ldi	r22, 0x4B	; 75
    111e:	75 e1       	ldi	r23, 0x15	; 21
    1120:	89 e5       	ldi	r24, 0x59	; 89
    1122:	92 e0       	ldi	r25, 0x02	; 2
    1124:	58 d3       	rcall	.+1712   	; 0x17d6 <enqueueWQ>
    1126:	27 dc       	rcall	.-1970   	; 0x976 <Dispatch>
    1128:	c3 cd       	rjmp	.-1146   	; 0xcb0 <OS_Start+0x9a>
    112a:	56 dc       	rcall	.-1876   	; 0x9d8 <Kernel_Unlock_Mutex>
    112c:	c1 cd       	rjmp	.-1150   	; 0xcb0 <OS_Start+0x9a>
    112e:	80 91 4f 02 	lds	r24, 0x024F
    1132:	90 91 50 02 	lds	r25, 0x0250
    1136:	08 97       	sbiw	r24, 0x08	; 8
    1138:	31 f1       	breq	.+76     	; 0x1186 <OS_Start+0x570>
    113a:	d7 01       	movw	r26, r14
    113c:	12 96       	adiw	r26, 0x02	; 2
    113e:	8c 91       	ld	r24, X
    1140:	88 23       	and	r24, r24
    1142:	81 f0       	breq	.+32     	; 0x1164 <OS_Start+0x54e>
    1144:	e2 e6       	ldi	r30, 0x62	; 98
    1146:	f2 e0       	ldi	r31, 0x02	; 2
    1148:	c4 01       	movw	r24, r8
    114a:	4b 81       	ldd	r20, Y+3	; 0x03
    114c:	5c 81       	ldd	r21, Y+4	; 0x04
    114e:	20 81       	ld	r18, Z
    1150:	22 23       	and	r18, r18
    1152:	59 f0       	breq	.+22     	; 0x116a <OS_Start+0x554>
    1154:	01 96       	adiw	r24, 0x01	; 1
    1156:	35 96       	adiw	r30, 0x05	; 5
    1158:	88 30       	cpi	r24, 0x08	; 8
    115a:	91 05       	cpc	r25, r1
    115c:	c1 f7       	brne	.-16     	; 0x114e <OS_Start+0x538>
    115e:	5c 83       	std	Y+4, r21	; 0x04
    1160:	4b 83       	std	Y+3, r20	; 0x03
    1162:	05 c0       	rjmp	.+10     	; 0x116e <OS_Start+0x558>
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	02 c0       	rjmp	.+4      	; 0x116e <OS_Start+0x558>
    116a:	5c 83       	std	Y+4, r21	; 0x04
    116c:	4b 83       	std	Y+3, r20	; 0x03
    116e:	9c 01       	movw	r18, r24
    1170:	22 0f       	add	r18, r18
    1172:	33 1f       	adc	r19, r19
    1174:	22 0f       	add	r18, r18
    1176:	33 1f       	adc	r19, r19
    1178:	82 0f       	add	r24, r18
    117a:	93 1f       	adc	r25, r19
    117c:	85 5a       	subi	r24, 0xA5	; 165
    117e:	9d 4f       	sbci	r25, 0xFD	; 253
    1180:	86 db       	rcall	.-2292   	; 0x88e <Kernel_Init_Event_At>
    1182:	9a 83       	std	Y+2, r25	; 0x02
    1184:	89 83       	std	Y+1, r24	; 0x01
    1186:	ab 81       	ldd	r26, Y+3	; 0x03
    1188:	bc 81       	ldd	r27, Y+4	; 0x04
    118a:	a2 5f       	subi	r26, 0xF2	; 242
    118c:	be 4f       	sbci	r27, 0xFE	; 254
    118e:	e9 81       	ldd	r30, Y+1	; 0x01
    1190:	fa 81       	ldd	r31, Y+2	; 0x02
    1192:	11 96       	adiw	r26, 0x01	; 1
    1194:	fc 93       	st	X, r31
    1196:	ee 93       	st	-X, r30
    1198:	8b cd       	rjmp	.-1258   	; 0xcb0 <OS_Start+0x9a>
    119a:	eb 81       	ldd	r30, Y+3	; 0x03
    119c:	fc 81       	ldd	r31, Y+4	; 0x04
    119e:	e8 5e       	subi	r30, 0xE8	; 232
    11a0:	fe 4f       	sbci	r31, 0xFE	; 254
    11a2:	40 81       	ld	r20, Z
    11a4:	51 81       	ldd	r21, Z+1	; 0x01
    11a6:	d7 01       	movw	r26, r14
    11a8:	8d 91       	ld	r24, X+
    11aa:	9c 91       	ld	r25, X
    11ac:	48 17       	cp	r20, r24
    11ae:	59 07       	cpc	r21, r25
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <OS_Start+0x59e>
    11b2:	fa c0       	rjmp	.+500    	; 0x13a8 <OS_Start+0x792>
    11b4:	f7 01       	movw	r30, r14
    11b6:	c4 01       	movw	r24, r8
    11b8:	6b 81       	ldd	r22, Y+3	; 0x03
    11ba:	7c 81       	ldd	r23, Y+4	; 0x04
    11bc:	25 81       	ldd	r18, Z+5	; 0x05
    11be:	36 81       	ldd	r19, Z+6	; 0x06
    11c0:	42 17       	cp	r20, r18
    11c2:	53 07       	cpc	r21, r19
    11c4:	09 f4       	brne	.+2      	; 0x11c8 <OS_Start+0x5b2>
    11c6:	f3 c0       	rjmp	.+486    	; 0x13ae <OS_Start+0x798>
    11c8:	01 96       	adiw	r24, 0x01	; 1
    11ca:	35 96       	adiw	r30, 0x05	; 5
    11cc:	88 30       	cpi	r24, 0x08	; 8
    11ce:	91 05       	cpc	r25, r1
    11d0:	a9 f7       	brne	.-22     	; 0x11bc <OS_Start+0x5a6>
    11d2:	3d c0       	rjmp	.+122    	; 0x124e <OS_Start+0x638>
    11d4:	fc 01       	movw	r30, r24
    11d6:	ee 0f       	add	r30, r30
    11d8:	ff 1f       	adc	r31, r31
    11da:	ee 0f       	add	r30, r30
    11dc:	ff 1f       	adc	r31, r31
    11de:	e8 0f       	add	r30, r24
    11e0:	f9 1f       	adc	r31, r25
    11e2:	e5 5a       	subi	r30, 0xA5	; 165
    11e4:	fd 4f       	sbci	r31, 0xFD	; 253
    11e6:	22 81       	ldd	r18, Z+2	; 0x02
    11e8:	22 30       	cpi	r18, 0x02	; 2
    11ea:	69 f4       	brne	.+26     	; 0x1206 <OS_Start+0x5f0>
    11ec:	fc 01       	movw	r30, r24
    11ee:	ee 0f       	add	r30, r30
    11f0:	ff 1f       	adc	r31, r31
    11f2:	ee 0f       	add	r30, r30
    11f4:	ff 1f       	adc	r31, r31
    11f6:	8e 0f       	add	r24, r30
    11f8:	9f 1f       	adc	r25, r31
    11fa:	fc 01       	movw	r30, r24
    11fc:	e5 5a       	subi	r30, 0xA5	; 165
    11fe:	fd 4f       	sbci	r31, 0xFD	; 253
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	82 83       	std	Z+2, r24	; 0x02
    1204:	24 c0       	rjmp	.+72     	; 0x124e <OS_Start+0x638>
    1206:	eb 81       	ldd	r30, Y+3	; 0x03
    1208:	fc 81       	ldd	r31, Y+4	; 0x04
    120a:	ea 5e       	subi	r30, 0xEA	; 234
    120c:	fe 4f       	sbci	r31, 0xFE	; 254
    120e:	51 83       	std	Z+1, r21	; 0x01
    1210:	40 83       	st	Z, r20
    1212:	eb 81       	ldd	r30, Y+3	; 0x03
    1214:	fc 81       	ldd	r31, Y+4	; 0x04
    1216:	20 81       	ld	r18, Z
    1218:	31 81       	ldd	r19, Z+1	; 0x01
    121a:	fc 01       	movw	r30, r24
    121c:	ee 0f       	add	r30, r30
    121e:	ff 1f       	adc	r31, r31
    1220:	ee 0f       	add	r30, r30
    1222:	ff 1f       	adc	r31, r31
    1224:	8e 0f       	add	r24, r30
    1226:	9f 1f       	adc	r25, r31
    1228:	fc 01       	movw	r30, r24
    122a:	e5 5a       	subi	r30, 0xA5	; 165
    122c:	fd 4f       	sbci	r31, 0xFD	; 253
    122e:	34 83       	std	Z+4, r19	; 0x04
    1230:	23 83       	std	Z+3, r18	; 0x03
    1232:	eb 81       	ldd	r30, Y+3	; 0x03
    1234:	fc 81       	ldd	r31, Y+4	; 0x04
    1236:	ec 5f       	subi	r30, 0xFC	; 252
    1238:	fe 4f       	sbci	r31, 0xFE	; 254
    123a:	85 e0       	ldi	r24, 0x05	; 5
    123c:	80 83       	st	Z, r24
    123e:	4b e4       	ldi	r20, 0x4B	; 75
    1240:	52 e0       	ldi	r21, 0x02	; 2
    1242:	69 e2       	ldi	r22, 0x29	; 41
    1244:	75 e1       	ldi	r23, 0x15	; 21
    1246:	89 e5       	ldi	r24, 0x59	; 89
    1248:	92 e0       	ldi	r25, 0x02	; 2
    124a:	66 d3       	rcall	.+1740   	; 0x1918 <enqueueRQ>
    124c:	94 db       	rcall	.-2264   	; 0x976 <Dispatch>
    124e:	e0 91 59 02 	lds	r30, 0x0259
    1252:	f0 91 5a 02 	lds	r31, 0x025A
    1256:	80 81       	ld	r24, Z
    1258:	91 81       	ldd	r25, Z+1	; 0x01
    125a:	02 97       	sbiw	r24, 0x02	; 2
    125c:	20 f4       	brcc	.+8      	; 0x1266 <OS_Start+0x650>
    125e:	82 e0       	ldi	r24, 0x02	; 2
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	27 d9       	rcall	.-3506   	; 0x4b2 <enable_LED>
    1264:	25 cd       	rjmp	.-1462   	; 0xcb0 <OS_Start+0x9a>
    1266:	80 81       	ld	r24, Z
    1268:	91 81       	ldd	r25, Z+1	; 0x01
    126a:	02 97       	sbiw	r24, 0x02	; 2
    126c:	21 f4       	brne	.+8      	; 0x1276 <OS_Start+0x660>
    126e:	85 e0       	ldi	r24, 0x05	; 5
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	1f d9       	rcall	.-3522   	; 0x4b2 <enable_LED>
    1274:	1d cd       	rjmp	.-1478   	; 0xcb0 <OS_Start+0x9a>
    1276:	80 81       	ld	r24, Z
    1278:	91 81       	ldd	r25, Z+1	; 0x01
    127a:	03 97       	sbiw	r24, 0x03	; 3
    127c:	09 f0       	breq	.+2      	; 0x1280 <OS_Start+0x66a>
    127e:	18 cd       	rjmp	.-1488   	; 0xcb0 <OS_Start+0x9a>
    1280:	86 e0       	ldi	r24, 0x06	; 6
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	16 d9       	rcall	.-3540   	; 0x4b2 <enable_LED>
    1286:	14 cd       	rjmp	.-1496   	; 0xcb0 <OS_Start+0x9a>
    1288:	eb 81       	ldd	r30, Y+3	; 0x03
    128a:	fc 81       	ldd	r31, Y+4	; 0x04
    128c:	e8 5e       	subi	r30, 0xE8	; 232
    128e:	fe 4f       	sbci	r31, 0xFE	; 254
    1290:	40 81       	ld	r20, Z
    1292:	51 81       	ldd	r21, Z+1	; 0x01
    1294:	d7 01       	movw	r26, r14
    1296:	8d 91       	ld	r24, X+
    1298:	9c 91       	ld	r25, X
    129a:	48 17       	cp	r20, r24
    129c:	59 07       	cpc	r21, r25
    129e:	09 f4       	brne	.+2      	; 0x12a2 <OS_Start+0x68c>
    12a0:	97 c0       	rjmp	.+302    	; 0x13d0 <OS_Start+0x7ba>
    12a2:	f7 01       	movw	r30, r14
    12a4:	c4 01       	movw	r24, r8
    12a6:	6b 81       	ldd	r22, Y+3	; 0x03
    12a8:	7c 81       	ldd	r23, Y+4	; 0x04
    12aa:	25 81       	ldd	r18, Z+5	; 0x05
    12ac:	36 81       	ldd	r19, Z+6	; 0x06
    12ae:	42 17       	cp	r20, r18
    12b0:	53 07       	cpc	r21, r19
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <OS_Start+0x6a0>
    12b4:	90 c0       	rjmp	.+288    	; 0x13d6 <OS_Start+0x7c0>
    12b6:	01 96       	adiw	r24, 0x01	; 1
    12b8:	35 96       	adiw	r30, 0x05	; 5
    12ba:	88 30       	cpi	r24, 0x08	; 8
    12bc:	91 05       	cpc	r25, r1
    12be:	a9 f7       	brne	.-22     	; 0x12aa <OS_Start+0x694>
    12c0:	f7 cc       	rjmp	.-1554   	; 0xcb0 <OS_Start+0x9a>
    12c2:	80 81       	ld	r24, Z
    12c4:	91 81       	ldd	r25, Z+1	; 0x01
    12c6:	48 17       	cp	r20, r24
    12c8:	59 07       	cpc	r21, r25
    12ca:	09 f4       	brne	.+2      	; 0x12ce <OS_Start+0x6b8>
    12cc:	97 c0       	rjmp	.+302    	; 0x13fc <OS_Start+0x7e6>
    12ce:	2f 5f       	subi	r18, 0xFF	; 255
    12d0:	3f 4f       	sbci	r19, 0xFF	; 255
    12d2:	e2 5e       	subi	r30, 0xE2	; 226
    12d4:	fe 4f       	sbci	r31, 0xFE	; 254
    12d6:	20 31       	cpi	r18, 0x10	; 16
    12d8:	31 05       	cpc	r19, r1
    12da:	99 f7       	brne	.-26     	; 0x12c2 <OS_Start+0x6ac>
    12dc:	cb 01       	movw	r24, r22
    12de:	fb 01       	movw	r30, r22
    12e0:	ee 0f       	add	r30, r30
    12e2:	ff 1f       	adc	r31, r31
    12e4:	ee 0f       	add	r30, r30
    12e6:	ff 1f       	adc	r31, r31
    12e8:	8e 0f       	add	r24, r30
    12ea:	9f 1f       	adc	r25, r31
    12ec:	fc 01       	movw	r30, r24
    12ee:	e5 5a       	subi	r30, 0xA5	; 165
    12f0:	fd 4f       	sbci	r31, 0xFD	; 253
    12f2:	82 e0       	ldi	r24, 0x02	; 2
    12f4:	82 83       	std	Z+2, r24	; 0x02
    12f6:	dc cc       	rjmp	.-1608   	; 0xcb0 <OS_Start+0x9a>
    12f8:	2a 9d       	mul	r18, r10
    12fa:	f0 01       	movw	r30, r0
    12fc:	2b 9d       	mul	r18, r11
    12fe:	f0 0d       	add	r31, r0
    1300:	3a 9d       	mul	r19, r10
    1302:	f0 0d       	add	r31, r0
    1304:	11 24       	eor	r1, r1
    1306:	eb 52       	subi	r30, 0x2B	; 43
    1308:	fc 4f       	sbci	r31, 0xFC	; 252
    130a:	80 81       	ld	r24, Z
    130c:	91 81       	ldd	r25, Z+1	; 0x01
    130e:	89 2b       	or	r24, r25
    1310:	09 f0       	breq	.+2      	; 0x1314 <OS_Start+0x6fe>
    1312:	ce cc       	rjmp	.-1636   	; 0xcb0 <OS_Start+0x9a>
    1314:	eb 81       	ldd	r30, Y+3	; 0x03
    1316:	fc 81       	ldd	r31, Y+4	; 0x04
    1318:	ec 5f       	subi	r30, 0xFC	; 252
    131a:	fe 4f       	sbci	r31, 0xFE	; 254
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	80 83       	st	Z, r24
    1320:	4b e4       	ldi	r20, 0x4B	; 75
    1322:	52 e0       	ldi	r21, 0x02	; 2
    1324:	69 e2       	ldi	r22, 0x29	; 41
    1326:	75 e1       	ldi	r23, 0x15	; 21
    1328:	89 e5       	ldi	r24, 0x59	; 89
    132a:	92 e0       	ldi	r25, 0x02	; 2
    132c:	f5 d2       	rcall	.+1514   	; 0x1918 <enqueueRQ>
    132e:	23 db       	rcall	.-2490   	; 0x976 <Dispatch>
    1330:	bf cc       	rjmp	.-1666   	; 0xcb0 <OS_Start+0x9a>
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 c0       	rjmp	.+4      	; 0x133c <OS_Start+0x726>
    1338:	7c 83       	std	Y+4, r23	; 0x04
    133a:	6b 83       	std	Y+3, r22	; 0x03
    133c:	8a 9d       	mul	r24, r10
    133e:	f0 01       	movw	r30, r0
    1340:	8b 9d       	mul	r24, r11
    1342:	f0 0d       	add	r31, r0
    1344:	9a 9d       	mul	r25, r10
    1346:	f0 0d       	add	r31, r0
    1348:	11 24       	eor	r1, r1
    134a:	eb 52       	subi	r30, 0x2B	; 43
    134c:	fc 4f       	sbci	r31, 0xFC	; 252
    134e:	91 82       	std	Z+1, r9	; 0x01
    1350:	80 82       	st	Z, r8
    1352:	63 cd       	rjmp	.-1338   	; 0xe1a <OS_Start+0x204>
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	02 c0       	rjmp	.+4      	; 0x135e <OS_Start+0x748>
    135a:	7c 83       	std	Y+4, r23	; 0x04
    135c:	6b 83       	std	Y+3, r22	; 0x03
    135e:	8a 9d       	mul	r24, r10
    1360:	f0 01       	movw	r30, r0
    1362:	8b 9d       	mul	r24, r11
    1364:	f0 0d       	add	r31, r0
    1366:	9a 9d       	mul	r25, r10
    1368:	f0 0d       	add	r31, r0
    136a:	11 24       	eor	r1, r1
    136c:	eb 52       	subi	r30, 0x2B	; 43
    136e:	fc 4f       	sbci	r31, 0xFC	; 252
    1370:	20 81       	ld	r18, Z
    1372:	31 81       	ldd	r19, Z+1	; 0x01
    1374:	21 30       	cpi	r18, 0x01	; 1
    1376:	31 05       	cpc	r19, r1
    1378:	09 f0       	breq	.+2      	; 0x137c <OS_Start+0x766>
    137a:	9a cc       	rjmp	.-1740   	; 0xcb0 <OS_Start+0x9a>
    137c:	7f cd       	rjmp	.-1282   	; 0xe7c <OS_Start+0x266>
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <OS_Start+0x772>
    1384:	7c 83       	std	Y+4, r23	; 0x04
    1386:	6b 83       	std	Y+3, r22	; 0x03
    1388:	fc 01       	movw	r30, r24
    138a:	ee 0f       	add	r30, r30
    138c:	ff 1f       	adc	r31, r31
    138e:	ee 0f       	add	r30, r30
    1390:	ff 1f       	adc	r31, r31
    1392:	ee 0f       	add	r30, r30
    1394:	ff 1f       	adc	r31, r31
    1396:	e8 1b       	sub	r30, r24
    1398:	f9 0b       	sbc	r31, r25
    139a:	ed 57       	subi	r30, 0x7D	; 125
    139c:	fd 4f       	sbci	r31, 0xFD	; 253
    139e:	22 81       	ldd	r18, Z+2	; 0x02
    13a0:	21 30       	cpi	r18, 0x01	; 1
    13a2:	09 f0       	breq	.+2      	; 0x13a6 <OS_Start+0x790>
    13a4:	55 ce       	rjmp	.-854    	; 0x1050 <OS_Start+0x43a>
    13a6:	3b ce       	rjmp	.-906    	; 0x101e <OS_Start+0x408>
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <OS_Start+0x79c>
    13ae:	7c 83       	std	Y+4, r23	; 0x04
    13b0:	6b 83       	std	Y+3, r22	; 0x03
    13b2:	fc 01       	movw	r30, r24
    13b4:	ee 0f       	add	r30, r30
    13b6:	ff 1f       	adc	r31, r31
    13b8:	ee 0f       	add	r30, r30
    13ba:	ff 1f       	adc	r31, r31
    13bc:	e8 0f       	add	r30, r24
    13be:	f9 1f       	adc	r31, r25
    13c0:	e5 5a       	subi	r30, 0xA5	; 165
    13c2:	fd 4f       	sbci	r31, 0xFD	; 253
    13c4:	23 81       	ldd	r18, Z+3	; 0x03
    13c6:	34 81       	ldd	r19, Z+4	; 0x04
    13c8:	23 2b       	or	r18, r19
    13ca:	09 f0       	breq	.+2      	; 0x13ce <OS_Start+0x7b8>
    13cc:	40 cf       	rjmp	.-384    	; 0x124e <OS_Start+0x638>
    13ce:	02 cf       	rjmp	.-508    	; 0x11d4 <OS_Start+0x5be>
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <OS_Start+0x7c4>
    13d6:	7c 83       	std	Y+4, r23	; 0x04
    13d8:	6b 83       	std	Y+3, r22	; 0x03
    13da:	e1 ed       	ldi	r30, 0xD1	; 209
    13dc:	f3 e0       	ldi	r31, 0x03	; 3
    13de:	20 81       	ld	r18, Z
    13e0:	31 81       	ldd	r19, Z+1	; 0x01
    13e2:	42 17       	cp	r20, r18
    13e4:	53 07       	cpc	r21, r19
    13e6:	39 f0       	breq	.+14     	; 0x13f6 <OS_Start+0x7e0>
    13e8:	ef ee       	ldi	r30, 0xEF	; 239
    13ea:	f4 e0       	ldi	r31, 0x04	; 4
    13ec:	94 01       	movw	r18, r8
    13ee:	ab 81       	ldd	r26, Y+3	; 0x03
    13f0:	bc 81       	ldd	r27, Y+4	; 0x04
    13f2:	bc 01       	movw	r22, r24
    13f4:	66 cf       	rjmp	.-308    	; 0x12c2 <OS_Start+0x6ac>
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	03 c0       	rjmp	.+6      	; 0x1402 <OS_Start+0x7ec>
    13fc:	bc 83       	std	Y+4, r27	; 0x04
    13fe:	ab 83       	std	Y+3, r26	; 0x03
    1400:	cb 01       	movw	r24, r22
    1402:	2a 9d       	mul	r18, r10
    1404:	a0 01       	movw	r20, r0
    1406:	2b 9d       	mul	r18, r11
    1408:	50 0d       	add	r21, r0
    140a:	3a 9d       	mul	r19, r10
    140c:	50 0d       	add	r21, r0
    140e:	11 24       	eor	r1, r1
    1410:	45 54       	subi	r20, 0x45	; 69
    1412:	5d 4f       	sbci	r21, 0xFD	; 253
    1414:	fa 01       	movw	r30, r20
    1416:	ec 5f       	subi	r30, 0xFC	; 252
    1418:	fe 4f       	sbci	r31, 0xFE	; 254
    141a:	61 e0       	ldi	r22, 0x01	; 1
    141c:	60 83       	st	Z, r22
    141e:	72 96       	adiw	r30, 0x12	; 18
    1420:	31 82       	std	Z+1, r3	; 0x01
    1422:	20 82       	st	Z, r2
    1424:	fc 01       	movw	r30, r24
    1426:	ee 0f       	add	r30, r30
    1428:	ff 1f       	adc	r31, r31
    142a:	ee 0f       	add	r30, r30
    142c:	ff 1f       	adc	r31, r31
    142e:	8e 0f       	add	r24, r30
    1430:	9f 1f       	adc	r25, r31
    1432:	fc 01       	movw	r30, r24
    1434:	e5 5a       	subi	r30, 0xA5	; 165
    1436:	fd 4f       	sbci	r31, 0xFD	; 253
    1438:	14 82       	std	Z+4, r1	; 0x04
    143a:	13 82       	std	Z+3, r1	; 0x03
    143c:	eb 81       	ldd	r30, Y+3	; 0x03
    143e:	fc 81       	ldd	r31, Y+4	; 0x04
    1440:	e9 5f       	subi	r30, 0xF9	; 249
    1442:	fe 4f       	sbci	r31, 0xFE	; 254
    1444:	80 81       	ld	r24, Z
    1446:	91 81       	ldd	r25, Z+1	; 0x01
    1448:	fa 01       	movw	r30, r20
    144a:	e9 5f       	subi	r30, 0xF9	; 249
    144c:	fe 4f       	sbci	r31, 0xFE	; 254
    144e:	40 81       	ld	r20, Z
    1450:	51 81       	ldd	r21, Z+1	; 0x01
    1452:	48 17       	cp	r20, r24
    1454:	59 07       	cpc	r21, r25
    1456:	08 f4       	brcc	.+2      	; 0x145a <OS_Start+0x844>
    1458:	4f cf       	rjmp	.-354    	; 0x12f8 <OS_Start+0x6e2>
    145a:	2a cc       	rjmp	.-1964   	; 0xcb0 <OS_Start+0x9a>
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	df 91       	pop	r29
    1466:	cf 91       	pop	r28
    1468:	1f 91       	pop	r17
    146a:	0f 91       	pop	r16
    146c:	ff 90       	pop	r15
    146e:	ef 90       	pop	r14
    1470:	df 90       	pop	r13
    1472:	cf 90       	pop	r12
    1474:	bf 90       	pop	r11
    1476:	af 90       	pop	r10
    1478:	9f 90       	pop	r9
    147a:	8f 90       	pop	r8
    147c:	7f 90       	pop	r7
    147e:	6f 90       	pop	r6
    1480:	5f 90       	pop	r5
    1482:	4f 90       	pop	r4
    1484:	3f 90       	pop	r3
    1486:	2f 90       	pop	r2
    1488:	08 95       	ret

0000148a <Mutex_Init>:
    148a:	80 91 57 02 	lds	r24, 0x0257
    148e:	90 91 58 02 	lds	r25, 0x0258
    1492:	89 2b       	or	r24, r25
    1494:	a1 f0       	breq	.+40     	; 0x14be <Mutex_Init+0x34>
    1496:	f8 94       	cli
    1498:	e0 91 59 02 	lds	r30, 0x0259
    149c:	f0 91 5a 02 	lds	r31, 0x025A
    14a0:	e3 5f       	subi	r30, 0xF3	; 243
    14a2:	fe 4f       	sbci	r31, 0xFE	; 254
    14a4:	87 e0       	ldi	r24, 0x07	; 7
    14a6:	80 83       	st	Z, r24
    14a8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    14ac:	e0 91 59 02 	lds	r30, 0x0259
    14b0:	f0 91 5a 02 	lds	r31, 0x025A
    14b4:	e2 5f       	subi	r30, 0xF2	; 242
    14b6:	fe 4f       	sbci	r31, 0xFE	; 254
    14b8:	80 81       	ld	r24, Z
    14ba:	91 81       	ldd	r25, Z+1	; 0x01
    14bc:	08 95       	ret
    14be:	08 95       	ret

000014c0 <Event_Init>:
    14c0:	80 91 57 02 	lds	r24, 0x0257
    14c4:	90 91 58 02 	lds	r25, 0x0258
    14c8:	89 2b       	or	r24, r25
    14ca:	a1 f0       	breq	.+40     	; 0x14f4 <Event_Init+0x34>
    14cc:	f8 94       	cli
    14ce:	e0 91 59 02 	lds	r30, 0x0259
    14d2:	f0 91 5a 02 	lds	r31, 0x025A
    14d6:	e3 5f       	subi	r30, 0xF3	; 243
    14d8:	fe 4f       	sbci	r31, 0xFE	; 254
    14da:	8a e0       	ldi	r24, 0x0A	; 10
    14dc:	80 83       	st	Z, r24
    14de:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    14e2:	e0 91 59 02 	lds	r30, 0x0259
    14e6:	f0 91 5a 02 	lds	r31, 0x025A
    14ea:	e2 5f       	subi	r30, 0xF2	; 242
    14ec:	fe 4f       	sbci	r31, 0xFE	; 254
    14ee:	80 81       	ld	r24, Z
    14f0:	91 81       	ldd	r25, Z+1	; 0x01
    14f2:	08 95       	ret
    14f4:	08 95       	ret

000014f6 <Task_Create>:
    14f6:	20 91 57 02 	lds	r18, 0x0257
    14fa:	30 91 58 02 	lds	r19, 0x0258
    14fe:	23 2b       	or	r18, r19
    1500:	f1 f0       	breq	.+60     	; 0x153e <Task_Create+0x48>
    1502:	f8 94       	cli
    1504:	20 91 59 02 	lds	r18, 0x0259
    1508:	30 91 5a 02 	lds	r19, 0x025A
    150c:	f9 01       	movw	r30, r18
    150e:	e3 5f       	subi	r30, 0xF3	; 243
    1510:	fe 4f       	sbci	r31, 0xFE	; 254
    1512:	a1 e0       	ldi	r26, 0x01	; 1
    1514:	a0 83       	st	Z, r26
    1516:	32 97       	sbiw	r30, 0x02	; 2
    1518:	91 83       	std	Z+1, r25	; 0x01
    151a:	80 83       	st	Z, r24
    151c:	36 97       	sbiw	r30, 0x06	; 6
    151e:	71 83       	std	Z+1, r23	; 0x01
    1520:	60 83       	st	Z, r22
    1522:	34 96       	adiw	r30, 0x04	; 4
    1524:	51 83       	std	Z+1, r21	; 0x01
    1526:	40 83       	st	Z, r20
    1528:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    152c:	e0 91 59 02 	lds	r30, 0x0259
    1530:	f0 91 5a 02 	lds	r31, 0x025A
    1534:	e2 5f       	subi	r30, 0xF2	; 242
    1536:	fe 4f       	sbci	r31, 0xFE	; 254
    1538:	80 81       	ld	r24, Z
    153a:	91 81       	ldd	r25, Z+1	; 0x01
    153c:	08 95       	ret
    153e:	62 c9       	rjmp	.-3388   	; 0x804 <Kernel_Create_Task>
    1540:	08 95       	ret

00001542 <Task_Next>:
    1542:	80 91 57 02 	lds	r24, 0x0257
    1546:	90 91 58 02 	lds	r25, 0x0258
    154a:	89 2b       	or	r24, r25
    154c:	59 f0       	breq	.+22     	; 0x1564 <Task_Next+0x22>
    154e:	f8 94       	cli
    1550:	e0 91 59 02 	lds	r30, 0x0259
    1554:	f0 91 5a 02 	lds	r31, 0x025A
    1558:	e3 5f       	subi	r30, 0xF3	; 243
    155a:	fe 4f       	sbci	r31, 0xFE	; 254
    155c:	82 e0       	ldi	r24, 0x02	; 2
    155e:	80 83       	st	Z, r24
    1560:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <Enter_Kernel>
    1564:	08 95       	ret

00001566 <setup>:
  * Setup pins and timers
  */
void setup() {
	/** For testing */
	/** pin 47 */
	init_LED_PORTL_pin2();
    1566:	0e 94 47 02 	call	0x48e	; 0x48e <init_LED_PORTL_pin2>

	/** pin 43 */
	init_LED_PORTL_pin6();
    156a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <init_LED_PORTL_pin6>

	/** pin 44 */
	init_LED_PORTL_pin5();
    156e:	0e 94 4d 02 	call	0x49a	; 0x49a <init_LED_PORTL_pin5>

	/** pin 49 */
	init_LED_PORTL_pin0();
    1572:	0e 94 3b 02 	call	0x476	; 0x476 <init_LED_PORTL_pin0>

	/** pin 48 */
	init_LED_PORTL_pin1();
    1576:	0e 94 41 02 	call	0x482	; 0x482 <init_LED_PORTL_pin1>

	/** initialize Timer1 16 bit timer */
	Disable_Interrupt();
    157a:	f8 94       	cli

	/** Timer 1 */
	TCCR1A = 0;                 /** Set TCCR1A register to 0 */
    157c:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;                 /** Set TCCR1B register to 0 */
    1580:	e1 e8       	ldi	r30, 0x81	; 129
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	10 82       	st	Z, r1

	TCNT1 = 0;                  /** Initialize counter to 0 */
    1586:	10 92 85 00 	sts	0x0085, r1
    158a:	10 92 84 00 	sts	0x0084, r1

	OCR1A = 624;                /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
    158e:	80 e7       	ldi	r24, 0x70	; 112
    1590:	92 e0       	ldi	r25, 0x02	; 2
    1592:	90 93 89 00 	sts	0x0089, r25
    1596:	80 93 88 00 	sts	0x0088, r24

	TCCR1B |= (1 << WGM12);     /** Turns on CTC mode (TOP is now OCR1A) */
    159a:	80 81       	ld	r24, Z
    159c:	88 60       	ori	r24, 0x08	; 8
    159e:	80 83       	st	Z, r24

	TCCR1B |= (1 << CS12);      /** Prescaler 256 */
    15a0:	80 81       	ld	r24, Z
    15a2:	84 60       	ori	r24, 0x04	; 4
    15a4:	80 83       	st	Z, r24

	TIMSK1 |= (1 << OCIE1A);    /** Enable timer compare interrupt */
    15a6:	ef e6       	ldi	r30, 0x6F	; 111
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	82 60       	ori	r24, 0x02	; 2
    15ae:	80 83       	st	Z, r24

	/** Timer 3 */
	TCCR3A = 0;                 /** Set TCCR0A register to 0 */
    15b0:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0;                 /** Set TCCR0B register to 0 */
    15b4:	e1 e9       	ldi	r30, 0x91	; 145
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	10 82       	st	Z, r1

	TCNT3 = 0;                  /** Initialize counter to 0 */
    15ba:	10 92 95 00 	sts	0x0095, r1
    15be:	10 92 94 00 	sts	0x0094, r1

	OCR3A = 62499;              /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
    15c2:	83 e2       	ldi	r24, 0x23	; 35
    15c4:	94 ef       	ldi	r25, 0xF4	; 244
    15c6:	90 93 99 00 	sts	0x0099, r25
    15ca:	80 93 98 00 	sts	0x0098, r24

	TCCR3B |= (1 << WGM32);     /** Turns on CTC mode (TOP is now OCR1A) */
    15ce:	80 81       	ld	r24, Z
    15d0:	88 60       	ori	r24, 0x08	; 8
    15d2:	80 83       	st	Z, r24

	TCCR3B |= (1 << CS32);      /** Prescaler 1024 */
    15d4:	80 81       	ld	r24, Z
    15d6:	84 60       	ori	r24, 0x04	; 4
    15d8:	80 83       	st	Z, r24

	TIMSK3 = (1 << OCIE3A);
    15da:	82 e0       	ldi	r24, 0x02	; 2
    15dc:	80 93 71 00 	sts	0x0071, r24

	Enable_Interrupt();
    15e0:	78 94       	sei
    15e2:	08 95       	ret

000015e4 <__vector_17>:
}

/**
  * ISR for timer1
  */
ISR(TIMER1_COMPA_vect) {
    15e4:	1f 92       	push	r1
    15e6:	0f 92       	push	r0
    15e8:	0f b6       	in	r0, 0x3f	; 63
    15ea:	0f 92       	push	r0
    15ec:	11 24       	eor	r1, r1
    15ee:	0b b6       	in	r0, 0x3b	; 59
    15f0:	0f 92       	push	r0
    15f2:	df 92       	push	r13
    15f4:	ef 92       	push	r14
    15f6:	ff 92       	push	r15
    15f8:	0f 93       	push	r16
    15fa:	1f 93       	push	r17
    15fc:	2f 93       	push	r18
    15fe:	3f 93       	push	r19
    1600:	4f 93       	push	r20
    1602:	5f 93       	push	r21
    1604:	6f 93       	push	r22
    1606:	7f 93       	push	r23
    1608:	8f 93       	push	r24
    160a:	9f 93       	push	r25
    160c:	af 93       	push	r26
    160e:	bf 93       	push	r27
    1610:	ef 93       	push	r30
    1612:	ff 93       	push	r31
    1614:	cf 93       	push	r28
    1616:	df 93       	push	r29
    1618:	00 d0       	rcall	.+0      	; 0x161a <__vector_17+0x36>
    161a:	1f 92       	push	r1
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
    1620:	80 91 49 02 	lds	r24, 0x0249
    1624:	90 91 4a 02 	lds	r25, 0x024A
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	9a 83       	std	Y+2, r25	; 0x02
    162c:	89 83       	std	Y+1, r24	; 0x01
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	9a 81       	ldd	r25, Y+2	; 0x02
    1632:	99 23       	and	r25, r25
    1634:	0c f4       	brge	.+2      	; 0x1638 <__vector_17+0x54>
    1636:	8f c0       	rjmp	.+286    	; 0x1756 <__vector_17+0x172>
		if ((SleepQueue[i]->wakeTickOverflow <= tickOverflowCount) && (SleepQueue[i]->wakeTick <= (TCNT3/625))) {
    1638:	e9 81       	ldd	r30, Y+1	; 0x01
    163a:	fa 81       	ldd	r31, Y+2	; 0x02
    163c:	ee 0f       	add	r30, r30
    163e:	ff 1f       	adc	r31, r31
    1640:	e7 5f       	subi	r30, 0xF7	; 247
    1642:	fa 4e       	sbci	r31, 0xEA	; 234
    1644:	01 90       	ld	r0, Z+
    1646:	f0 81       	ld	r31, Z
    1648:	e0 2d       	mov	r30, r0
    164a:	e0 5f       	subi	r30, 0xF0	; 240
    164c:	fe 4f       	sbci	r31, 0xFE	; 254
    164e:	20 81       	ld	r18, Z
    1650:	31 81       	ldd	r19, Z+1	; 0x01
    1652:	80 91 4d 02 	lds	r24, 0x024D
    1656:	90 91 4e 02 	lds	r25, 0x024E
    165a:	82 17       	cp	r24, r18
    165c:	93 07       	cpc	r25, r19
    165e:	08 f4       	brcc	.+2      	; 0x1662 <__vector_17+0x7e>
    1660:	7a c0       	rjmp	.+244    	; 0x1756 <__vector_17+0x172>
    1662:	e9 81       	ldd	r30, Y+1	; 0x01
    1664:	fa 81       	ldd	r31, Y+2	; 0x02
    1666:	ee 0f       	add	r30, r30
    1668:	ff 1f       	adc	r31, r31
    166a:	e7 5f       	subi	r30, 0xF7	; 247
    166c:	fa 4e       	sbci	r31, 0xEA	; 234
    166e:	01 90       	ld	r0, Z+
    1670:	f0 81       	ld	r31, Z
    1672:	e0 2d       	mov	r30, r0
    1674:	ee 5e       	subi	r30, 0xEE	; 238
    1676:	fe 4f       	sbci	r31, 0xFE	; 254
    1678:	20 81       	ld	r18, Z
    167a:	31 81       	ldd	r19, Z+1	; 0x01
    167c:	80 91 94 00 	lds	r24, 0x0094
    1680:	90 91 95 00 	lds	r25, 0x0095
    1684:	61 e7       	ldi	r22, 0x71	; 113
    1686:	72 e0       	ldi	r23, 0x02	; 2
    1688:	b2 d4       	rcall	.+2404   	; 0x1fee <__udivmodhi4>
    168a:	62 17       	cp	r22, r18
    168c:	73 07       	cpc	r23, r19
    168e:	60 f5       	brcc	.+88     	; 0x16e8 <__vector_17+0x104>
    1690:	62 c0       	rjmp	.+196    	; 0x1756 <__vector_17+0x172>
    1692:	e9 81       	ldd	r30, Y+1	; 0x01
    1694:	fa 81       	ldd	r31, Y+2	; 0x02
    1696:	ee 0f       	add	r30, r30
    1698:	ff 1f       	adc	r31, r31
    169a:	e7 5f       	subi	r30, 0xF7	; 247
    169c:	fa 4e       	sbci	r31, 0xEA	; 234
    169e:	01 90       	ld	r0, Z+
    16a0:	f0 81       	ld	r31, Z
    16a2:	e0 2d       	mov	r30, r0
    16a4:	e0 5f       	subi	r30, 0xF0	; 240
    16a6:	fe 4f       	sbci	r31, 0xFE	; 254
    16a8:	20 81       	ld	r18, Z
    16aa:	31 81       	ldd	r19, Z+1	; 0x01
    16ac:	80 91 4d 02 	lds	r24, 0x024D
    16b0:	90 91 4e 02 	lds	r25, 0x024E
    16b4:	82 17       	cp	r24, r18
    16b6:	93 07       	cpc	r25, r19
    16b8:	08 f4       	brcc	.+2      	; 0x16bc <__vector_17+0xd8>
    16ba:	4d c0       	rjmp	.+154    	; 0x1756 <__vector_17+0x172>
    16bc:	e9 81       	ldd	r30, Y+1	; 0x01
    16be:	fa 81       	ldd	r31, Y+2	; 0x02
    16c0:	ee 0f       	add	r30, r30
    16c2:	ff 1f       	adc	r31, r31
    16c4:	e7 5f       	subi	r30, 0xF7	; 247
    16c6:	fa 4e       	sbci	r31, 0xEA	; 234
    16c8:	01 90       	ld	r0, Z+
    16ca:	f0 81       	ld	r31, Z
    16cc:	e0 2d       	mov	r30, r0
    16ce:	ee 5e       	subi	r30, 0xEE	; 238
    16d0:	fe 4f       	sbci	r31, 0xFE	; 254
    16d2:	20 81       	ld	r18, Z
    16d4:	31 81       	ldd	r19, Z+1	; 0x01
    16d6:	f7 01       	movw	r30, r14
    16d8:	80 81       	ld	r24, Z
    16da:	91 81       	ldd	r25, Z+1	; 0x01
    16dc:	b8 01       	movw	r22, r16
    16de:	87 d4       	rcall	.+2318   	; 0x1fee <__udivmodhi4>
    16e0:	62 17       	cp	r22, r18
    16e2:	73 07       	cpc	r23, r19
    16e4:	50 f4       	brcc	.+20     	; 0x16fa <__vector_17+0x116>
    16e6:	37 c0       	rjmp	.+110    	; 0x1756 <__vector_17+0x172>
			volatile PD *p = dequeue(&SleepQueue, &SQCount);
			p->state = READY;
    16e8:	dd 24       	eor	r13, r13
    16ea:	d3 94       	inc	r13
ISR(TIMER1_COMPA_vect) {

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
		if ((SleepQueue[i]->wakeTickOverflow <= tickOverflowCount) && (SleepQueue[i]->wakeTick <= (TCNT3/625))) {
    16ec:	0f 2e       	mov	r0, r31
    16ee:	f4 e9       	ldi	r31, 0x94	; 148
    16f0:	ef 2e       	mov	r14, r31
    16f2:	f1 2c       	mov	r15, r1
    16f4:	f0 2d       	mov	r31, r0
    16f6:	01 e7       	ldi	r16, 0x71	; 113
    16f8:	12 e0       	ldi	r17, 0x02	; 2
			volatile PD *p = dequeue(&SleepQueue, &SQCount);
    16fa:	69 e4       	ldi	r22, 0x49	; 73
    16fc:	72 e0       	ldi	r23, 0x02	; 2
    16fe:	89 e0       	ldi	r24, 0x09	; 9
    1700:	95 e1       	ldi	r25, 0x15	; 21
    1702:	2d d2       	rcall	.+1114   	; 0x1b5e <dequeue>
    1704:	9c 83       	std	Y+4, r25	; 0x04
    1706:	8b 83       	std	Y+3, r24	; 0x03
			p->state = READY;
    1708:	fc 01       	movw	r30, r24
    170a:	ec 5f       	subi	r30, 0xFC	; 252
    170c:	fe 4f       	sbci	r31, 0xFE	; 254
    170e:	d0 82       	st	Z, r13
			enqueueRQ(&p, &ReadyQueue, &RQCount);
    1710:	4b e4       	ldi	r20, 0x4B	; 75
    1712:	52 e0       	ldi	r21, 0x02	; 2
    1714:	69 e2       	ldi	r22, 0x29	; 41
    1716:	75 e1       	ldi	r23, 0x15	; 21
    1718:	ce 01       	movw	r24, r28
    171a:	03 96       	adiw	r24, 0x03	; 3
    171c:	fd d0       	rcall	.+506    	; 0x1918 <enqueueRQ>
			
			if (p->inheritedPy < Cp->inheritedPy)
    171e:	eb 81       	ldd	r30, Y+3	; 0x03
    1720:	fc 81       	ldd	r31, Y+4	; 0x04
    1722:	e9 5f       	subi	r30, 0xF9	; 249
    1724:	fe 4f       	sbci	r31, 0xFE	; 254
    1726:	20 81       	ld	r18, Z
    1728:	31 81       	ldd	r19, Z+1	; 0x01
    172a:	e0 91 59 02 	lds	r30, 0x0259
    172e:	f0 91 5a 02 	lds	r31, 0x025A
    1732:	e9 5f       	subi	r30, 0xF9	; 249
    1734:	fe 4f       	sbci	r31, 0xFE	; 254
    1736:	80 81       	ld	r24, Z
    1738:	91 81       	ldd	r25, Z+1	; 0x01
    173a:	28 17       	cp	r18, r24
    173c:	39 07       	cpc	r19, r25
    173e:	08 f4       	brcc	.+2      	; 0x1742 <__vector_17+0x15e>
			
			{
				Task_Next();
    1740:	00 df       	rcall	.-512    	; 0x1542 <Task_Next>
  */
ISR(TIMER1_COMPA_vect) {

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
    1742:	89 81       	ldd	r24, Y+1	; 0x01
    1744:	9a 81       	ldd	r25, Y+2	; 0x02
    1746:	01 97       	sbiw	r24, 0x01	; 1
    1748:	9a 83       	std	Y+2, r25	; 0x02
    174a:	89 83       	std	Y+1, r24	; 0x01
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	9a 81       	ldd	r25, Y+2	; 0x02
    1750:	99 23       	and	r25, r25
    1752:	0c f0       	brlt	.+2      	; 0x1756 <__vector_17+0x172>
    1754:	9e cf       	rjmp	.-196    	; 0x1692 <__vector_17+0xae>
			break;
		}
	}

	//Task_Next();
}
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	0f 90       	pop	r0
    175e:	df 91       	pop	r29
    1760:	cf 91       	pop	r28
    1762:	ff 91       	pop	r31
    1764:	ef 91       	pop	r30
    1766:	bf 91       	pop	r27
    1768:	af 91       	pop	r26
    176a:	9f 91       	pop	r25
    176c:	8f 91       	pop	r24
    176e:	7f 91       	pop	r23
    1770:	6f 91       	pop	r22
    1772:	5f 91       	pop	r21
    1774:	4f 91       	pop	r20
    1776:	3f 91       	pop	r19
    1778:	2f 91       	pop	r18
    177a:	1f 91       	pop	r17
    177c:	0f 91       	pop	r16
    177e:	ff 90       	pop	r15
    1780:	ef 90       	pop	r14
    1782:	df 90       	pop	r13
    1784:	0f 90       	pop	r0
    1786:	0b be       	out	0x3b, r0	; 59
    1788:	0f 90       	pop	r0
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	0f 90       	pop	r0
    178e:	1f 90       	pop	r1
    1790:	18 95       	reti

00001792 <__vector_32>:

/**
  * ISR for timer3
  */
ISR(TIMER3_COMPA_vect) {
    1792:	1f 92       	push	r1
    1794:	0f 92       	push	r0
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	0f 92       	push	r0
    179a:	11 24       	eor	r1, r1
    179c:	8f 93       	push	r24
    179e:	9f 93       	push	r25
	tickOverflowCount += 1;
    17a0:	80 91 4d 02 	lds	r24, 0x024D
    17a4:	90 91 4e 02 	lds	r25, 0x024E
    17a8:	01 96       	adiw	r24, 0x01	; 1
    17aa:	90 93 4e 02 	sts	0x024E, r25
    17ae:	80 93 4d 02 	sts	0x024D, r24
}
    17b2:	9f 91       	pop	r25
    17b4:	8f 91       	pop	r24
    17b6:	0f 90       	pop	r0
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	0f 90       	pop	r0
    17bc:	1f 90       	pop	r1
    17be:	18 95       	reti

000017c0 <main>:

/**
  * This function boots the OS and creates the first task: a_main
  */
void main() {
	setup();
    17c0:	d2 de       	rcall	.-604    	; 0x1566 <setup>
	
	OS_Init();
    17c2:	7c d8       	rcall	.-3848   	; 0x8bc <OS_Init>
	Task_Create(a_main, 1, 1);
    17c4:	41 e0       	ldi	r20, 0x01	; 1
    17c6:	50 e0       	ldi	r21, 0x00	; 0
    17c8:	61 e0       	ldi	r22, 0x01	; 1
    17ca:	70 e0       	ldi	r23, 0x00	; 0
    17cc:	80 e3       	ldi	r24, 0x30	; 48
    17ce:	93 e0       	ldi	r25, 0x03	; 3
    17d0:	92 de       	rcall	.-732    	; 0x14f6 <Task_Create>
	OS_Start();
    17d2:	21 ca       	rjmp	.-3006   	; 0xc16 <OS_Start>
    17d4:	08 95       	ret

000017d6 <enqueueWQ>:
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
}

void enqueueWQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    17d6:	cf 93       	push	r28
    17d8:	df 93       	push	r29
    17da:	ea 01       	movw	r28, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    17dc:	28 81       	ld	r18, Y
    17de:	39 81       	ldd	r19, Y+1	; 0x01
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
}

void enqueueWQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    17e0:	2f 30       	cpi	r18, 0x0F	; 15
    17e2:	31 05       	cpc	r19, r1
    17e4:	29 f1       	breq	.+74     	; 0x1830 <enqueueWQ+0x5a>
        return;
    }

    int i = (*QCount) - 1;
    17e6:	e8 81       	ld	r30, Y
    17e8:	f9 81       	ldd	r31, Y+1	; 0x01
    17ea:	9f 01       	movw	r18, r30
    17ec:	21 50       	subi	r18, 0x01	; 1
    17ee:	31 09       	sbc	r19, r1

    while(i >= 0) {
    17f0:	72 f0       	brmi	.+28     	; 0x180e <enqueueWQ+0x38>
    17f2:	ee 0f       	add	r30, r30
    17f4:	ff 1f       	adc	r31, r31
    17f6:	e6 0f       	add	r30, r22
    17f8:	f7 1f       	adc	r31, r23
    17fa:	db 01       	movw	r26, r22
        Queue[i+1] = Queue[i];
    17fc:	32 91       	ld	r19, -Z
    17fe:	22 91       	ld	r18, -Z
    1800:	33 83       	std	Z+3, r19	; 0x03
    1802:	22 83       	std	Z+2, r18	; 0x02
        return;
    }

    int i = (*QCount) - 1;

    while(i >= 0) {
    1804:	ea 17       	cp	r30, r26
    1806:	fb 07       	cpc	r31, r27
    1808:	c9 f7       	brne	.-14     	; 0x17fc <enqueueWQ+0x26>
        Queue[i+1] = Queue[i];
        i--;
    180a:	2f ef       	ldi	r18, 0xFF	; 255
    180c:	3f ef       	ldi	r19, 0xFF	; 255
    }

    Queue[i+1] = *p;
    180e:	fc 01       	movw	r30, r24
    1810:	80 81       	ld	r24, Z
    1812:	91 81       	ldd	r25, Z+1	; 0x01
    1814:	2f 5f       	subi	r18, 0xFF	; 255
    1816:	3f 4f       	sbci	r19, 0xFF	; 255
    1818:	22 0f       	add	r18, r18
    181a:	33 1f       	adc	r19, r19
    181c:	fb 01       	movw	r30, r22
    181e:	e2 0f       	add	r30, r18
    1820:	f3 1f       	adc	r31, r19
    1822:	91 83       	std	Z+1, r25	; 0x01
    1824:	80 83       	st	Z, r24
    (*QCount)++;
    1826:	88 81       	ld	r24, Y
    1828:	99 81       	ldd	r25, Y+1	; 0x01
    182a:	01 96       	adiw	r24, 0x01	; 1
    182c:	99 83       	std	Y+1, r25	; 0x01
    182e:	88 83       	st	Y, r24
}
    1830:	df 91       	pop	r29
    1832:	cf 91       	pop	r28
    1834:	08 95       	ret

00001836 <enqueueSQ>:

void enqueueSQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    1836:	cf 92       	push	r12
    1838:	df 92       	push	r13
    183a:	ef 92       	push	r14
    183c:	ff 92       	push	r15
    183e:	0f 93       	push	r16
    1840:	1f 93       	push	r17
    1842:	cf 93       	push	r28
    1844:	df 93       	push	r29

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    1846:	ea 01       	movw	r28, r20
    1848:	28 81       	ld	r18, Y
    184a:	39 81       	ldd	r19, Y+1	; 0x01
    Queue[i+1] = *p;
    (*QCount)++;
}

void enqueueSQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    184c:	2f 30       	cpi	r18, 0x0F	; 15
    184e:	31 05       	cpc	r19, r1
    1850:	09 f4       	brne	.+2      	; 0x1854 <enqueueSQ+0x1e>
    1852:	59 c0       	rjmp	.+178    	; 0x1906 <enqueueSQ+0xd0>
        return;
    }

    int i = (*QCount) - 1;
    1854:	a8 81       	ld	r26, Y
    1856:	b9 81       	ldd	r27, Y+1	; 0x01
    1858:	11 97       	sbiw	r26, 0x01	; 1

    volatile PD *new = *p;
    185a:	fc 01       	movw	r30, r24
    185c:	c0 80       	ld	r12, Z
    185e:	d1 80       	ldd	r13, Z+1	; 0x01

    volatile PD *temp = Queue[i];
    1860:	fd 01       	movw	r30, r26
    1862:	ee 0f       	add	r30, r30
    1864:	ff 1f       	adc	r31, r31
    1866:	eb 01       	movw	r28, r22
    1868:	ce 0f       	add	r28, r30
    186a:	df 1f       	adc	r29, r31
    186c:	28 81       	ld	r18, Y
    186e:	39 81       	ldd	r19, Y+1	; 0x01

    while(i >= 0 && ((new->wakeTickOverflow > temp->wakeTickOverflow) || ((new->wakeTickOverflow >= temp->wakeTickOverflow) && (new->wakeTick >= temp->wakeTick)))) {
    1870:	bb 23       	and	r27, r27
    1872:	cc f1       	brlt	.+114    	; 0x18e6 <enqueueSQ+0xb0>
    1874:	fe 01       	movw	r30, r28
    1876:	76 01       	movw	r14, r12
    1878:	c0 ef       	ldi	r28, 0xF0	; 240
    187a:	ec 1a       	sub	r14, r28
    187c:	ce ef       	ldi	r28, 0xFE	; 254
    187e:	fc 0a       	sbc	r15, r28
    1880:	de ee       	ldi	r29, 0xEE	; 238
    1882:	cd 1a       	sub	r12, r29
    1884:	de ef       	ldi	r29, 0xFE	; 254
    1886:	dd 0a       	sbc	r13, r29
    1888:	0b c0       	rjmp	.+22     	; 0x18a0 <enqueueSQ+0x6a>
        Queue[i+1] = Queue[i];
    188a:	20 81       	ld	r18, Z
    188c:	31 81       	ldd	r19, Z+1	; 0x01
    188e:	33 83       	std	Z+3, r19	; 0x03
    1890:	22 83       	std	Z+2, r18	; 0x02
        i--;
    1892:	11 97       	sbiw	r26, 0x01	; 1
        temp = Queue[i];
    1894:	32 91       	ld	r19, -Z
    1896:	22 91       	ld	r18, -Z

    volatile PD *new = *p;

    volatile PD *temp = Queue[i];

    while(i >= 0 && ((new->wakeTickOverflow > temp->wakeTickOverflow) || ((new->wakeTickOverflow >= temp->wakeTickOverflow) && (new->wakeTick >= temp->wakeTick)))) {
    1898:	af 3f       	cpi	r26, 0xFF	; 255
    189a:	cf ef       	ldi	r28, 0xFF	; 255
    189c:	bc 07       	cpc	r27, r28
    189e:	19 f1       	breq	.+70     	; 0x18e6 <enqueueSQ+0xb0>
    18a0:	e7 01       	movw	r28, r14
    18a2:	08 81       	ld	r16, Y
    18a4:	19 81       	ldd	r17, Y+1	; 0x01
    18a6:	e9 01       	movw	r28, r18
    18a8:	c0 5f       	subi	r28, 0xF0	; 240
    18aa:	de 4f       	sbci	r29, 0xFE	; 254
    18ac:	09 90       	ld	r0, Y+
    18ae:	d8 81       	ld	r29, Y
    18b0:	c0 2d       	mov	r28, r0
    18b2:	c0 17       	cp	r28, r16
    18b4:	d1 07       	cpc	r29, r17
    18b6:	48 f3       	brcs	.-46     	; 0x188a <enqueueSQ+0x54>
    18b8:	e7 01       	movw	r28, r14
    18ba:	08 81       	ld	r16, Y
    18bc:	19 81       	ldd	r17, Y+1	; 0x01
    18be:	e9 01       	movw	r28, r18
    18c0:	c0 5f       	subi	r28, 0xF0	; 240
    18c2:	de 4f       	sbci	r29, 0xFE	; 254
    18c4:	09 90       	ld	r0, Y+
    18c6:	d8 81       	ld	r29, Y
    18c8:	c0 2d       	mov	r28, r0
    18ca:	0c 17       	cp	r16, r28
    18cc:	1d 07       	cpc	r17, r29
    18ce:	58 f0       	brcs	.+22     	; 0x18e6 <enqueueSQ+0xb0>
    18d0:	e6 01       	movw	r28, r12
    18d2:	08 81       	ld	r16, Y
    18d4:	19 81       	ldd	r17, Y+1	; 0x01
    18d6:	2e 5e       	subi	r18, 0xEE	; 238
    18d8:	3e 4f       	sbci	r19, 0xFE	; 254
    18da:	e9 01       	movw	r28, r18
    18dc:	28 81       	ld	r18, Y
    18de:	39 81       	ldd	r19, Y+1	; 0x01
    18e0:	02 17       	cp	r16, r18
    18e2:	13 07       	cpc	r17, r19
    18e4:	90 f6       	brcc	.-92     	; 0x188a <enqueueSQ+0x54>
        Queue[i+1] = Queue[i];
        i--;
        temp = Queue[i];
    }

    Queue[i+1] = *p;
    18e6:	fc 01       	movw	r30, r24
    18e8:	80 81       	ld	r24, Z
    18ea:	91 81       	ldd	r25, Z+1	; 0x01
    18ec:	11 96       	adiw	r26, 0x01	; 1
    18ee:	aa 0f       	add	r26, r26
    18f0:	bb 1f       	adc	r27, r27
    18f2:	a6 0f       	add	r26, r22
    18f4:	b7 1f       	adc	r27, r23
    18f6:	8d 93       	st	X+, r24
    18f8:	9c 93       	st	X, r25
    (*QCount)++;
    18fa:	ea 01       	movw	r28, r20
    18fc:	88 81       	ld	r24, Y
    18fe:	99 81       	ldd	r25, Y+1	; 0x01
    1900:	01 96       	adiw	r24, 0x01	; 1
    1902:	99 83       	std	Y+1, r25	; 0x01
    1904:	88 83       	st	Y, r24
}
    1906:	df 91       	pop	r29
    1908:	cf 91       	pop	r28
    190a:	1f 91       	pop	r17
    190c:	0f 91       	pop	r16
    190e:	ff 90       	pop	r15
    1910:	ef 90       	pop	r14
    1912:	df 90       	pop	r13
    1914:	cf 90       	pop	r12
    1916:	08 95       	ret

00001918 <enqueueRQ>:

/*
 *  Insert into the queue sorted by priority
 */
void enqueueRQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    1918:	cf 92       	push	r12
    191a:	df 92       	push	r13
    191c:	ef 92       	push	r14
    191e:	ff 92       	push	r15
    1920:	0f 93       	push	r16
    1922:	1f 93       	push	r17
    1924:	cf 93       	push	r28
    1926:	df 93       	push	r29
    1928:	6a 01       	movw	r12, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    192a:	ea 01       	movw	r28, r20
    192c:	28 81       	ld	r18, Y
    192e:	39 81       	ldd	r19, Y+1	; 0x01

/*
 *  Insert into the queue sorted by priority
 */
void enqueueRQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    1930:	2f 30       	cpi	r18, 0x0F	; 15
    1932:	31 05       	cpc	r19, r1
    1934:	09 f4       	brne	.+2      	; 0x1938 <enqueueRQ+0x20>
    1936:	4a c0       	rjmp	.+148    	; 0x19cc <enqueueRQ+0xb4>
        return;
    }

    int i = (*QCount) - 1;
    1938:	28 81       	ld	r18, Y
    193a:	39 81       	ldd	r19, Y+1	; 0x01
    193c:	21 50       	subi	r18, 0x01	; 1
    193e:	31 09       	sbc	r19, r1

    volatile PD *new = *p;
    1940:	fc 01       	movw	r30, r24
    1942:	00 81       	ld	r16, Z
    1944:	11 81       	ldd	r17, Z+1	; 0x01

    volatile PD *temp = Queue[i];
    1946:	f9 01       	movw	r30, r18
    1948:	ee 0f       	add	r30, r30
    194a:	ff 1f       	adc	r31, r31
    194c:	db 01       	movw	r26, r22
    194e:	ae 0f       	add	r26, r30
    1950:	bf 1f       	adc	r27, r31
    1952:	4d 91       	ld	r20, X+
    1954:	5c 91       	ld	r21, X

    while(i >= 0 && (new->inheritedPy >= temp->inheritedPy)) {
    1956:	33 23       	and	r19, r19
    1958:	3c f1       	brlt	.+78     	; 0x19a8 <enqueueRQ+0x90>
    195a:	d8 01       	movw	r26, r16
    195c:	a9 5f       	subi	r26, 0xF9	; 249
    195e:	be 4f       	sbci	r27, 0xFE	; 254
    1960:	ed 90       	ld	r14, X+
    1962:	fc 90       	ld	r15, X
    1964:	da 01       	movw	r26, r20
    1966:	a9 5f       	subi	r26, 0xF9	; 249
    1968:	be 4f       	sbci	r27, 0xFE	; 254
    196a:	4d 91       	ld	r20, X+
    196c:	5c 91       	ld	r21, X
    196e:	e4 16       	cp	r14, r20
    1970:	f5 06       	cpc	r15, r21
    1972:	d0 f0       	brcs	.+52     	; 0x19a8 <enqueueRQ+0x90>
    1974:	e6 0f       	add	r30, r22
    1976:	f7 1f       	adc	r31, r23
    1978:	09 5f       	subi	r16, 0xF9	; 249
    197a:	1e 4f       	sbci	r17, 0xFE	; 254
        Queue[i+1] = Queue[i];
    197c:	a0 81       	ld	r26, Z
    197e:	b1 81       	ldd	r27, Z+1	; 0x01
    1980:	b3 83       	std	Z+3, r27	; 0x03
    1982:	a2 83       	std	Z+2, r26	; 0x02
        i--;
    1984:	21 50       	subi	r18, 0x01	; 1
    1986:	31 09       	sbc	r19, r1
        temp = Queue[i];
    1988:	b2 91       	ld	r27, -Z
    198a:	a2 91       	ld	r26, -Z

    volatile PD *new = *p;

    volatile PD *temp = Queue[i];

    while(i >= 0 && (new->inheritedPy >= temp->inheritedPy)) {
    198c:	2f 3f       	cpi	r18, 0xFF	; 255
    198e:	4f ef       	ldi	r20, 0xFF	; 255
    1990:	34 07       	cpc	r19, r20
    1992:	51 f0       	breq	.+20     	; 0x19a8 <enqueueRQ+0x90>
    1994:	e8 01       	movw	r28, r16
    1996:	e8 80       	ld	r14, Y
    1998:	f9 80       	ldd	r15, Y+1	; 0x01
    199a:	a9 5f       	subi	r26, 0xF9	; 249
    199c:	be 4f       	sbci	r27, 0xFE	; 254
    199e:	4d 91       	ld	r20, X+
    19a0:	5c 91       	ld	r21, X
    19a2:	e4 16       	cp	r14, r20
    19a4:	f5 06       	cpc	r15, r21
    19a6:	50 f7       	brcc	.-44     	; 0x197c <enqueueRQ+0x64>
        Queue[i+1] = Queue[i];
        i--;
        temp = Queue[i];
    }

    Queue[i+1] = *p;
    19a8:	fc 01       	movw	r30, r24
    19aa:	80 81       	ld	r24, Z
    19ac:	91 81       	ldd	r25, Z+1	; 0x01
    19ae:	2f 5f       	subi	r18, 0xFF	; 255
    19b0:	3f 4f       	sbci	r19, 0xFF	; 255
    19b2:	22 0f       	add	r18, r18
    19b4:	33 1f       	adc	r19, r19
    19b6:	fb 01       	movw	r30, r22
    19b8:	e2 0f       	add	r30, r18
    19ba:	f3 1f       	adc	r31, r19
    19bc:	91 83       	std	Z+1, r25	; 0x01
    19be:	80 83       	st	Z, r24
    (*QCount)++;
    19c0:	e6 01       	movw	r28, r12
    19c2:	88 81       	ld	r24, Y
    19c4:	99 81       	ldd	r25, Y+1	; 0x01
    19c6:	01 96       	adiw	r24, 0x01	; 1
    19c8:	99 83       	std	Y+1, r25	; 0x01
    19ca:	88 83       	st	Y, r24
}
    19cc:	df 91       	pop	r29
    19ce:	cf 91       	pop	r28
    19d0:	1f 91       	pop	r17
    19d2:	0f 91       	pop	r16
    19d4:	ff 90       	pop	r15
    19d6:	ef 90       	pop	r14
    19d8:	df 90       	pop	r13
    19da:	cf 90       	pop	r12
    19dc:	08 95       	ret

000019de <dequeueWQ>:

/*
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {
    19de:	0f 93       	push	r16
    19e0:	1f 93       	push	r17
    19e2:	cf 93       	push	r28
    19e4:	df 93       	push	r29

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    19e6:	eb 01       	movw	r28, r22
    19e8:	28 81       	ld	r18, Y
    19ea:	39 81       	ldd	r19, Y+1	; 0x01
/*
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {

    if(isEmpty(QCount)) {
    19ec:	23 2b       	or	r18, r19
    19ee:	09 f4       	brne	.+2      	; 0x19f2 <dequeueWQ+0x14>
    19f0:	54 c0       	rjmp	.+168    	; 0x1a9a <dequeueWQ+0xbc>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
    19f2:	28 81       	ld	r18, Y
    19f4:	39 81       	ldd	r19, Y+1	; 0x01
    19f6:	21 50       	subi	r18, 0x01	; 1
    19f8:	31 09       	sbc	r19, r1
    19fa:	0a f4       	brpl	.+2      	; 0x19fe <dequeueWQ+0x20>
    19fc:	51 c0       	rjmp	.+162    	; 0x1aa0 <dequeueWQ+0xc2>
        if(Queue[i]->m == m){
    19fe:	e9 01       	movw	r28, r18
    1a00:	cc 0f       	add	r28, r28
    1a02:	dd 1f       	adc	r29, r29
    1a04:	fc 01       	movw	r30, r24
    1a06:	ec 0f       	add	r30, r28
    1a08:	fd 1f       	adc	r31, r29
    1a0a:	a0 81       	ld	r26, Z
    1a0c:	b1 81       	ldd	r27, Z+1	; 0x01
    1a0e:	fd 01       	movw	r30, r26
    1a10:	ec 5e       	subi	r30, 0xEC	; 236
    1a12:	fe 4f       	sbci	r31, 0xFE	; 254
    1a14:	01 90       	ld	r0, Z+
    1a16:	f0 81       	ld	r31, Z
    1a18:	e0 2d       	mov	r30, r0
    1a1a:	e4 17       	cp	r30, r20
    1a1c:	f5 07       	cpc	r31, r21
    1a1e:	81 f4       	brne	.+32     	; 0x1a40 <dequeueWQ+0x62>
    1a20:	0a c0       	rjmp	.+20     	; 0x1a36 <dequeueWQ+0x58>
    1a22:	ba 91       	ld	r27, -Y
    1a24:	aa 91       	ld	r26, -Y
    1a26:	fd 01       	movw	r30, r26
    1a28:	ec 5e       	subi	r30, 0xEC	; 236
    1a2a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a2c:	00 81       	ld	r16, Z
    1a2e:	11 81       	ldd	r17, Z+1	; 0x01
    1a30:	04 17       	cp	r16, r20
    1a32:	15 07       	cpc	r17, r21
    1a34:	39 f4       	brne	.+14     	; 0x1a44 <dequeueWQ+0x66>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
    1a36:	10 97       	sbiw	r26, 0x00	; 0
    1a38:	59 f4       	brne	.+22     	; 0x1a50 <dequeueWQ+0x72>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	32 c0       	rjmp	.+100    	; 0x1aa4 <dequeueWQ+0xc6>
    1a40:	c8 0f       	add	r28, r24
    1a42:	d9 1f       	adc	r29, r25
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
    1a44:	21 50       	subi	r18, 0x01	; 1
    1a46:	31 09       	sbc	r19, r1
    1a48:	60 f7       	brcc	.-40     	; 0x1a22 <dequeueWQ+0x44>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	2a c0       	rjmp	.+84     	; 0x1aa4 <dequeueWQ+0xc6>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i<(*QCount)-1) {
    1a50:	eb 01       	movw	r28, r22
    1a52:	48 81       	ld	r20, Y
    1a54:	59 81       	ldd	r21, Y+1	; 0x01
    1a56:	41 50       	subi	r20, 0x01	; 1
    1a58:	51 09       	sbc	r21, r1
    1a5a:	24 17       	cp	r18, r20
    1a5c:	35 07       	cpc	r19, r21
    1a5e:	a4 f4       	brge	.+40     	; 0x1a88 <dequeueWQ+0xaa>
    1a60:	a9 01       	movw	r20, r18
    1a62:	44 0f       	add	r20, r20
    1a64:	55 1f       	adc	r21, r21
    1a66:	fc 01       	movw	r30, r24
    1a68:	e4 0f       	add	r30, r20
    1a6a:	f5 1f       	adc	r31, r21
            Queue[i] = Queue[i+1];
    1a6c:	82 81       	ldd	r24, Z+2	; 0x02
    1a6e:	93 81       	ldd	r25, Z+3	; 0x03
    1a70:	81 93       	st	Z+, r24
    1a72:	91 93       	st	Z+, r25
            i++;
    1a74:	2f 5f       	subi	r18, 0xFF	; 255
    1a76:	3f 4f       	sbci	r19, 0xFF	; 255
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i<(*QCount)-1) {
    1a78:	eb 01       	movw	r28, r22
    1a7a:	48 81       	ld	r20, Y
    1a7c:	59 81       	ldd	r21, Y+1	; 0x01
    1a7e:	41 50       	subi	r20, 0x01	; 1
    1a80:	51 09       	sbc	r21, r1
    1a82:	24 17       	cp	r18, r20
    1a84:	35 07       	cpc	r19, r21
    1a86:	94 f3       	brlt	.-28     	; 0x1a6c <dequeueWQ+0x8e>
            Queue[i] = Queue[i+1];
            i++;
        }
        (*QCount)--;
    1a88:	fb 01       	movw	r30, r22
    1a8a:	80 81       	ld	r24, Z
    1a8c:	91 81       	ldd	r25, Z+1	; 0x01
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	91 83       	std	Z+1, r25	; 0x01
    1a92:	80 83       	st	Z, r24

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
        if(Queue[i]->m == m){
            result = Queue[i];
    1a94:	8a 2f       	mov	r24, r26
    1a96:	9b 2f       	mov	r25, r27
    1a98:	05 c0       	rjmp	.+10     	; 0x1aa4 <dequeueWQ+0xc6>
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {

    if(isEmpty(QCount)) {
        return NULL;
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	02 c0       	rjmp	.+4      	; 0x1aa4 <dequeueWQ+0xc6>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
}
    1aa4:	df 91       	pop	r29
    1aa6:	cf 91       	pop	r28
    1aa8:	1f 91       	pop	r17
    1aaa:	0f 91       	pop	r16
    1aac:	08 95       	ret

00001aae <dequeueRQ>:

/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {
    1aae:	cf 93       	push	r28
    1ab0:	df 93       	push	r29
    1ab2:	eb 01       	movw	r28, r22

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    1ab4:	28 81       	ld	r18, Y
    1ab6:	39 81       	ldd	r19, Y+1	; 0x01
/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
    1ab8:	23 2b       	or	r18, r19
    1aba:	09 f4       	brne	.+2      	; 0x1abe <dequeueRQ+0x10>
    1abc:	48 c0       	rjmp	.+144    	; 0x1b4e <dequeueRQ+0xa0>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
    1abe:	e8 81       	ld	r30, Y
    1ac0:	f9 81       	ldd	r31, Y+1	; 0x01
    1ac2:	9f 01       	movw	r18, r30
    1ac4:	21 50       	subi	r18, 0x01	; 1
    1ac6:	31 09       	sbc	r19, r1
    1ac8:	0a f4       	brpl	.+2      	; 0x1acc <dequeueRQ+0x1e>
    1aca:	44 c0       	rjmp	.+136    	; 0x1b54 <dequeueRQ+0xa6>
    1acc:	ee 0f       	add	r30, r30
    1ace:	ff 1f       	adc	r31, r31
    1ad0:	e8 0f       	add	r30, r24
    1ad2:	f9 1f       	adc	r31, r25
        if((Queue[i]->suspended == 0) && (Queue[i]->state == READY)) {
    1ad4:	52 91       	ld	r21, -Z
    1ad6:	42 91       	ld	r20, -Z
    1ad8:	da 01       	movw	r26, r20
    1ada:	a6 5e       	subi	r26, 0xE6	; 230
    1adc:	be 4f       	sbci	r27, 0xFE	; 254
    1ade:	6d 91       	ld	r22, X+
    1ae0:	7c 91       	ld	r23, X
    1ae2:	11 97       	sbiw	r26, 0x01	; 1
    1ae4:	67 2b       	or	r22, r23
    1ae6:	59 f4       	brne	.+22     	; 0x1afe <dequeueRQ+0x50>
    1ae8:	56 97       	sbiw	r26, 0x16	; 22
    1aea:	6c 91       	ld	r22, X
    1aec:	61 30       	cpi	r22, 0x01	; 1
    1aee:	39 f4       	brne	.+14     	; 0x1afe <dequeueRQ+0x50>
    1af0:	f9 01       	movw	r30, r18
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
    1af2:	41 15       	cp	r20, r1
    1af4:	51 05       	cpc	r21, r1
    1af6:	49 f4       	brne	.+18     	; 0x1b0a <dequeueRQ+0x5c>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	2d c0       	rjmp	.+90     	; 0x1b58 <dequeueRQ+0xaa>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
    1afe:	21 50       	subi	r18, 0x01	; 1
    1b00:	31 09       	sbc	r19, r1
    1b02:	40 f7       	brcc	.-48     	; 0x1ad4 <dequeueRQ+0x26>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	27 c0       	rjmp	.+78     	; 0x1b58 <dequeueRQ+0xaa>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i < (*QCount)-1) {
    1b0a:	68 81       	ld	r22, Y
    1b0c:	79 81       	ldd	r23, Y+1	; 0x01
    1b0e:	61 50       	subi	r22, 0x01	; 1
    1b10:	71 09       	sbc	r23, r1
    1b12:	26 17       	cp	r18, r22
    1b14:	37 07       	cpc	r19, r23
    1b16:	9c f4       	brge	.+38     	; 0x1b3e <dequeueRQ+0x90>
    1b18:	ee 0f       	add	r30, r30
    1b1a:	ff 1f       	adc	r31, r31
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	ae 0f       	add	r26, r30
    1b20:	bf 1f       	adc	r27, r31
            Queue[i] = Queue[i+1];
    1b22:	12 96       	adiw	r26, 0x02	; 2
    1b24:	8d 91       	ld	r24, X+
    1b26:	9c 91       	ld	r25, X
    1b28:	13 97       	sbiw	r26, 0x03	; 3
    1b2a:	8d 93       	st	X+, r24
    1b2c:	9d 93       	st	X+, r25
            i++;
    1b2e:	2f 5f       	subi	r18, 0xFF	; 255
    1b30:	3f 4f       	sbci	r19, 0xFF	; 255
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i < (*QCount)-1) {
    1b32:	e8 81       	ld	r30, Y
    1b34:	f9 81       	ldd	r31, Y+1	; 0x01
    1b36:	31 97       	sbiw	r30, 0x01	; 1
    1b38:	2e 17       	cp	r18, r30
    1b3a:	3f 07       	cpc	r19, r31
    1b3c:	94 f3       	brlt	.-28     	; 0x1b22 <dequeueRQ+0x74>
            Queue[i] = Queue[i+1];
            i++;
        }
        (*QCount)--;
    1b3e:	88 81       	ld	r24, Y
    1b40:	99 81       	ldd	r25, Y+1	; 0x01
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	99 83       	std	Y+1, r25	; 0x01
    1b46:	88 83       	st	Y, r24
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
        if((Queue[i]->suspended == 0) && (Queue[i]->state == READY)) {
    1b48:	84 2f       	mov	r24, r20
    1b4a:	95 2f       	mov	r25, r21
    1b4c:	05 c0       	rjmp	.+10     	; 0x1b58 <dequeueRQ+0xaa>
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
        return NULL;
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <dequeueRQ+0xaa>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	90 e0       	ldi	r25, 0x00	; 0
}
    1b58:	df 91       	pop	r29
    1b5a:	cf 91       	pop	r28
    1b5c:	08 95       	ret

00001b5e <dequeue>:

/*
 *  Return the first element of the queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
    1b5e:	db 01       	movw	r26, r22

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    1b60:	2d 91       	ld	r18, X+
    1b62:	3c 91       	ld	r19, X
    1b64:	11 97       	sbiw	r26, 0x01	; 1
/*
 *  Return the first element of the queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
    1b66:	23 2b       	or	r18, r19
    1b68:	a9 f0       	breq	.+42     	; 0x1b94 <dequeue+0x36>
        return;
    }

    volatile PD *result = (Queue[(*QCount)-1]);
    1b6a:	2d 91       	ld	r18, X+
    1b6c:	3c 91       	ld	r19, X
    1b6e:	11 97       	sbiw	r26, 0x01	; 1
    1b70:	f9 01       	movw	r30, r18
    1b72:	e1 50       	subi	r30, 0x01	; 1
    1b74:	f0 48       	sbci	r31, 0x80	; 128
    1b76:	ee 0f       	add	r30, r30
    1b78:	ff 1f       	adc	r31, r31
    1b7a:	e8 0f       	add	r30, r24
    1b7c:	f9 1f       	adc	r31, r25
    1b7e:	80 81       	ld	r24, Z
    1b80:	91 81       	ldd	r25, Z+1	; 0x01
    (*QCount)--;
    1b82:	2d 91       	ld	r18, X+
    1b84:	3c 91       	ld	r19, X
    1b86:	11 97       	sbiw	r26, 0x01	; 1
    1b88:	21 50       	subi	r18, 0x01	; 1
    1b8a:	31 09       	sbc	r19, r1
    1b8c:	11 96       	adiw	r26, 0x01	; 1
    1b8e:	3c 93       	st	X, r19
    1b90:	2e 93       	st	-X, r18
    1b92:	08 95       	ret

    return result;
}
    1b94:	08 95       	ret

00001b96 <_get_status>:
	}

	wh = (16 - weight) * 100;
	wh /= 16;
	return wh;
}
    1b96:	2d 98       	cbi	0x05, 5	; 5
    1b98:	8f ef       	ldi	r24, 0xFF	; 255
    1b9a:	04 d1       	rcall	.+520    	; 0x1da4 <SPI_Write_Byte>
    1b9c:	2d 9a       	sbi	0x05, 5	; 5
    1b9e:	08 95       	ret

00001ba0 <_set_register>:
    1ba0:	0f 93       	push	r16
    1ba2:	1f 93       	push	r17
    1ba4:	cf 93       	push	r28
    1ba6:	df 93       	push	r29
    1ba8:	8b 01       	movw	r16, r22
    1baa:	d4 2f       	mov	r29, r20
    1bac:	2d 98       	cbi	0x05, 5	; 5
    1bae:	8f 71       	andi	r24, 0x1F	; 31
    1bb0:	80 62       	ori	r24, 0x20	; 32
    1bb2:	f8 d0       	rcall	.+496    	; 0x1da4 <SPI_Write_Byte>
    1bb4:	c8 2f       	mov	r28, r24
    1bb6:	6d 2f       	mov	r22, r29
    1bb8:	c8 01       	movw	r24, r16
    1bba:	e1 d0       	rcall	.+450    	; 0x1d7e <SPI_Write_Block>
    1bbc:	2d 9a       	sbi	0x05, 5	; 5
    1bbe:	8c 2f       	mov	r24, r28
    1bc0:	df 91       	pop	r29
    1bc2:	cf 91       	pop	r28
    1bc4:	1f 91       	pop	r17
    1bc6:	0f 91       	pop	r16
    1bc8:	08 95       	ret

00001bca <_get_register>:
    1bca:	0f 93       	push	r16
    1bcc:	1f 93       	push	r17
    1bce:	cf 93       	push	r28
    1bd0:	df 93       	push	r29
    1bd2:	eb 01       	movw	r28, r22
    1bd4:	14 2f       	mov	r17, r20
    1bd6:	44 23       	and	r20, r20
    1bd8:	69 f0       	breq	.+26     	; 0x1bf4 <_get_register+0x2a>
    1bda:	fb 01       	movw	r30, r22
    1bdc:	2f ef       	ldi	r18, 0xFF	; 255
    1bde:	24 0f       	add	r18, r20
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	2f 5f       	subi	r18, 0xFF	; 255
    1be4:	3f 4f       	sbci	r19, 0xFF	; 255
    1be6:	26 0f       	add	r18, r22
    1be8:	37 1f       	adc	r19, r23
    1bea:	9f ef       	ldi	r25, 0xFF	; 255
    1bec:	91 93       	st	Z+, r25
    1bee:	e2 17       	cp	r30, r18
    1bf0:	f3 07       	cpc	r31, r19
    1bf2:	e1 f7       	brne	.-8      	; 0x1bec <_get_register+0x22>
    1bf4:	2d 98       	cbi	0x05, 5	; 5
    1bf6:	8f 71       	andi	r24, 0x1F	; 31
    1bf8:	d5 d0       	rcall	.+426    	; 0x1da4 <SPI_Write_Byte>
    1bfa:	08 2f       	mov	r16, r24
    1bfc:	41 2f       	mov	r20, r17
    1bfe:	be 01       	movw	r22, r28
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	a5 d0       	rcall	.+330    	; 0x1d50 <SPI_ReadWrite_Block>
    1c06:	2d 9a       	sbi	0x05, 5	; 5
    1c08:	80 2f       	mov	r24, r16
    1c0a:	df 91       	pop	r29
    1c0c:	cf 91       	pop	r28
    1c0e:	1f 91       	pop	r17
    1c10:	0f 91       	pop	r16
    1c12:	08 95       	ret

00001c14 <_set_rx_mode>:
    1c14:	cf 93       	push	r28
    1c16:	df 93       	push	r29
    1c18:	1f 92       	push	r1
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
    1c1e:	41 e0       	ldi	r20, 0x01	; 1
    1c20:	be 01       	movw	r22, r28
    1c22:	6f 5f       	subi	r22, 0xFF	; 255
    1c24:	7f 4f       	sbci	r23, 0xFF	; 255
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	d0 df       	rcall	.-96     	; 0x1bca <_get_register>
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	80 fd       	sbrc	r24, 0
    1c2e:	10 c0       	rjmp	.+32     	; 0x1c50 <_set_rx_mode+0x3c>
    1c30:	81 60       	ori	r24, 0x01	; 1
    1c32:	89 83       	std	Y+1, r24	; 0x01
    1c34:	41 e0       	ldi	r20, 0x01	; 1
    1c36:	be 01       	movw	r22, r28
    1c38:	6f 5f       	subi	r22, 0xFF	; 255
    1c3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	b0 df       	rcall	.-160    	; 0x1ba0 <_set_register>
    1c40:	85 e1       	ldi	r24, 0x15	; 21
    1c42:	8a 95       	dec	r24
    1c44:	f1 f7       	brne	.-4      	; 0x1c42 <_set_rx_mode+0x2e>
    1c46:	00 c0       	rjmp	.+0      	; 0x1c48 <_set_rx_mode+0x34>
    1c48:	85 e1       	ldi	r24, 0x15	; 21
    1c4a:	8a 95       	dec	r24
    1c4c:	f1 f7       	brne	.-4      	; 0x1c4a <_set_rx_mode+0x36>
    1c4e:	00 c0       	rjmp	.+0      	; 0x1c50 <_set_rx_mode+0x3c>
    1c50:	0f 90       	pop	r0
    1c52:	df 91       	pop	r29
    1c54:	cf 91       	pop	r28
    1c56:	08 95       	ret

00001c58 <_reset_pipe0_address>:
    1c58:	80 91 09 02 	lds	r24, 0x0209
    1c5c:	88 23       	and	r24, r24
    1c5e:	29 f0       	breq	.+10     	; 0x1c6a <_reset_pipe0_address+0x12>
    1c60:	45 e0       	ldi	r20, 0x05	; 5
    1c62:	64 e0       	ldi	r22, 0x04	; 4
    1c64:	72 e0       	ldi	r23, 0x02	; 2
    1c66:	8a e0       	ldi	r24, 0x0A	; 10
    1c68:	9b cf       	rjmp	.-202    	; 0x1ba0 <_set_register>
    1c6a:	08 95       	ret

00001c6c <__vector_1>:

// Interrupt handler
ISR(INT0_vect)
{
    1c6c:	1f 92       	push	r1
    1c6e:	0f 92       	push	r0
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	0f 92       	push	r0
    1c74:	11 24       	eor	r1, r1
    1c76:	0b b6       	in	r0, 0x3b	; 59
    1c78:	0f 92       	push	r0
    1c7a:	2f 93       	push	r18
    1c7c:	3f 93       	push	r19
    1c7e:	4f 93       	push	r20
    1c80:	5f 93       	push	r21
    1c82:	6f 93       	push	r22
    1c84:	7f 93       	push	r23
    1c86:	8f 93       	push	r24
    1c88:	9f 93       	push	r25
    1c8a:	af 93       	push	r26
    1c8c:	bf 93       	push	r27
    1c8e:	ef 93       	push	r30
    1c90:	ff 93       	push	r31
    1c92:	cf 93       	push	r28
    1c94:	df 93       	push	r29
    1c96:	1f 92       	push	r1
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;
    uint8_t pipe_number;

    RADIO_CE_LOW();
    1c9c:	2c 98       	cbi	0x05, 4	; 5

    status = _get_status();
    1c9e:	7b df       	rcall	.-266    	; 0x1b96 <_get_status>
    1ca0:	89 83       	std	Y+1, r24	; 0x01

    if (status & _BV(RX_DR)) {
    1ca2:	86 ff       	sbrs	r24, 6
    1ca4:	04 c0       	rjmp	.+8      	; 0x1cae <__vector_1+0x42>
        pipe_number =  (status & 0xE) >> 1;
    1ca6:	8e 70       	andi	r24, 0x0E	; 14
        radio_rxhandler(pipe_number);
    1ca8:	86 95       	lsr	r24
    1caa:	0e 94 66 01 	call	0x2cc	; 0x2cc <radio_rxhandler>
    }

    // We can get the TX_DS or the MAX_RT interrupt, but not both.
    if (status & _BV(TX_DS)) {
    1cae:	89 81       	ldd	r24, Y+1	; 0x01
    1cb0:	85 ff       	sbrs	r24, 5
    1cb2:	1b c0       	rjmp	.+54     	; 0x1cea <__vector_1+0x7e>
    	// if there's nothing left to transmit, switch back to receive mode.
        transmit_lock = 0;
    1cb4:	10 92 6d 15 	sts	0x156D, r1
        _reset_pipe0_address();
    1cb8:	cf df       	rcall	.-98     	; 0x1c58 <_reset_pipe0_address>
        _set_rx_mode();
    1cba:	ac df       	rcall	.-168    	; 0x1c14 <_set_rx_mode>

        // indicate in the history that a packet was transmitted successfully by appending a 1.
        tx_history <<= 1;
    1cbc:	80 91 02 02 	lds	r24, 0x0202
    1cc0:	90 91 03 02 	lds	r25, 0x0203
    1cc4:	88 0f       	add	r24, r24
    1cc6:	99 1f       	adc	r25, r25
    1cc8:	90 93 03 02 	sts	0x0203, r25
    1ccc:	80 93 02 02 	sts	0x0202, r24
        tx_history |= 1;
    1cd0:	80 91 02 02 	lds	r24, 0x0202
    1cd4:	90 91 03 02 	lds	r25, 0x0203
    1cd8:	81 60       	ori	r24, 0x01	; 1
    1cda:	90 93 03 02 	sts	0x0203, r25
    1cde:	80 93 02 02 	sts	0x0202, r24
        tx_last_status = RADIO_TX_SUCCESS;
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	80 93 01 02 	sts	0x0201, r24
    1ce8:	14 c0       	rjmp	.+40     	; 0x1d12 <__vector_1+0xa6>
    } else if (status & _BV(MAX_RT)) {
    1cea:	84 ff       	sbrs	r24, 4
    1cec:	12 c0       	rjmp	.+36     	; 0x1d12 <__vector_1+0xa6>
        // enable SPI
       // RADIO_CSN_LOW();


        // flush the failed packet (it stays in the Tx FIFO; we could try to resend it by setting CE high)
        SPI_Write_Byte( FLUSH_TX );
    1cee:	81 ee       	ldi	r24, 0xE1	; 225
    1cf0:	59 d0       	rcall	.+178    	; 0x1da4 <SPI_Write_Byte>

        // resynch SPI
        //RADIO_CSN_HIGH();

        transmit_lock = 0;
    1cf2:	10 92 6d 15 	sts	0x156D, r1
        _reset_pipe0_address();
    1cf6:	b0 df       	rcall	.-160    	; 0x1c58 <_reset_pipe0_address>
        _set_rx_mode();
    1cf8:	8d df       	rcall	.-230    	; 0x1c14 <_set_rx_mode>

        // indicate in the history that a packet was dropped by appending a 0.
        tx_history <<= 1;
    1cfa:	80 91 02 02 	lds	r24, 0x0202
    1cfe:	90 91 03 02 	lds	r25, 0x0203
    1d02:	88 0f       	add	r24, r24
    1d04:	99 1f       	adc	r25, r25
    1d06:	90 93 03 02 	sts	0x0203, r25
    1d0a:	80 93 02 02 	sts	0x0202, r24
        tx_last_status = RADIO_TX_MAX_RT;
    1d0e:	10 92 01 02 	sts	0x0201, r1
    }

    // clear the interrupt flags.
	status = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
    1d12:	80 e7       	ldi	r24, 0x70	; 112
    1d14:	89 83       	std	Y+1, r24	; 0x01
	_set_register(STATUS, &status, 1);
    1d16:	41 e0       	ldi	r20, 0x01	; 1
    1d18:	be 01       	movw	r22, r28
    1d1a:	6f 5f       	subi	r22, 0xFF	; 255
    1d1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d1e:	87 e0       	ldi	r24, 0x07	; 7
    1d20:	3f df       	rcall	.-386    	; 0x1ba0 <_set_register>

    RADIO_CE_HIGH();
    1d22:	2c 9a       	sbi	0x05, 4	; 5
}
    1d24:	0f 90       	pop	r0
    1d26:	df 91       	pop	r29
    1d28:	cf 91       	pop	r28
    1d2a:	ff 91       	pop	r31
    1d2c:	ef 91       	pop	r30
    1d2e:	bf 91       	pop	r27
    1d30:	af 91       	pop	r26
    1d32:	9f 91       	pop	r25
    1d34:	8f 91       	pop	r24
    1d36:	7f 91       	pop	r23
    1d38:	6f 91       	pop	r22
    1d3a:	5f 91       	pop	r21
    1d3c:	4f 91       	pop	r20
    1d3e:	3f 91       	pop	r19
    1d40:	2f 91       	pop	r18
    1d42:	0f 90       	pop	r0
    1d44:	0b be       	out	0x3b, r0	; 59
    1d46:	0f 90       	pop	r0
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	0f 90       	pop	r0
    1d4c:	1f 90       	pop	r1
    1d4e:	18 95       	reti

00001d50 <SPI_ReadWrite_Block>:
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1d50:	44 23       	and	r20, r20
    1d52:	a1 f0       	breq	.+40     	; 0x1d7c <SPI_ReadWrite_Block+0x2c>
    1d54:	fc 01       	movw	r30, r24
    1d56:	a6 2f       	mov	r26, r22
    1d58:	b7 2f       	mov	r27, r23
    1d5a:	41 50       	subi	r20, 0x01	; 1
    1d5c:	24 2f       	mov	r18, r20
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	2f 5f       	subi	r18, 0xFF	; 255
    1d62:	3f 4f       	sbci	r19, 0xFF	; 255
    1d64:	28 0f       	add	r18, r24
    1d66:	39 1f       	adc	r19, r25
          SPDR = data[i];
    1d68:	91 91       	ld	r25, Z+
    1d6a:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1d6c:	0d b4       	in	r0, 0x2d	; 45
    1d6e:	07 fe       	sbrs	r0, 7
    1d70:	fd cf       	rjmp	.-6      	; 0x1d6c <SPI_ReadWrite_Block+0x1c>
          buffer[i] = SPDR;
    1d72:	9e b5       	in	r25, 0x2e	; 46
    1d74:	9d 93       	st	X+, r25
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1d76:	e2 17       	cp	r30, r18
    1d78:	f3 07       	cpc	r31, r19
    1d7a:	b1 f7       	brne	.-20     	; 0x1d68 <SPI_ReadWrite_Block+0x18>
    1d7c:	08 95       	ret

00001d7e <SPI_Write_Block>:
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1d7e:	66 23       	and	r22, r22
    1d80:	81 f0       	breq	.+32     	; 0x1da2 <SPI_Write_Block+0x24>
    1d82:	fc 01       	movw	r30, r24
    1d84:	61 50       	subi	r22, 0x01	; 1
    1d86:	26 2f       	mov	r18, r22
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	2f 5f       	subi	r18, 0xFF	; 255
    1d8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d8e:	28 0f       	add	r18, r24
    1d90:	39 1f       	adc	r19, r25
          SPDR = data[i];
    1d92:	91 91       	ld	r25, Z+
    1d94:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1d96:	0d b4       	in	r0, 0x2d	; 45
    1d98:	07 fe       	sbrs	r0, 7
    1d9a:	fd cf       	rjmp	.-6      	; 0x1d96 <SPI_Write_Block+0x18>
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1d9c:	e2 17       	cp	r30, r18
    1d9e:	f3 07       	cpc	r31, r19
    1da0:	c1 f7       	brne	.-16     	; 0x1d92 <SPI_Write_Block+0x14>
    1da2:	08 95       	ret

00001da4 <SPI_Write_Byte>:
    }
}

uint8_t SPI_Write_Byte(uint8_t byte)
{
    SPDR = byte;
    1da4:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
    1da6:	0d b4       	in	r0, 0x2d	; 45
    1da8:	07 fe       	sbrs	r0, 7
    1daa:	fd cf       	rjmp	.-6      	; 0x1da6 <SPI_Write_Byte+0x2>
    return SPDR;
    1dac:	8e b5       	in	r24, 0x2e	; 46
}
    1dae:	08 95       	ret

00001db0 <Roomba_Init>:
static void update_leds();

void Roomba_Init()
{
	uint8_t i;
	DD_DDR |= _BV(DD_PIN);
    1db0:	3d 9a       	sbi	0x07, 5	; 7
	// Wake up the Roomba by driving the DD pin low for 500 ms.
	DD_PORT &= ~_BV(DD_PIN);
    1db2:	45 98       	cbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1db4:	2f ef       	ldi	r18, 0xFF	; 255
    1db6:	39 e6       	ldi	r19, 0x69	; 105
    1db8:	88 e1       	ldi	r24, 0x18	; 24
    1dba:	21 50       	subi	r18, 0x01	; 1
    1dbc:	30 40       	sbci	r19, 0x00	; 0
    1dbe:	80 40       	sbci	r24, 0x00	; 0
    1dc0:	e1 f7       	brne	.-8      	; 0x1dba <Roomba_Init+0xa>
    1dc2:	00 c0       	rjmp	.+0      	; 0x1dc4 <Roomba_Init+0x14>
    1dc4:	00 00       	nop
	_delay_ms(500);
	DD_PORT |= _BV(DD_PIN);
    1dc6:	45 9a       	sbi	0x08, 5	; 8
    1dc8:	9f ef       	ldi	r25, 0xFF	; 255
    1dca:	27 ea       	ldi	r18, 0xA7	; 167
    1dcc:	31 e6       	ldi	r19, 0x61	; 97
    1dce:	91 50       	subi	r25, 0x01	; 1
    1dd0:	20 40       	sbci	r18, 0x00	; 0
    1dd2:	30 40       	sbci	r19, 0x00	; 0
    1dd4:	e1 f7       	brne	.-8      	; 0x1dce <Roomba_Init+0x1e>
    1dd6:	00 c0       	rjmp	.+0      	; 0x1dd8 <Roomba_Init+0x28>
    1dd8:	00 00       	nop
    1dda:	83 e0       	ldi	r24, 0x03	; 3
	// Wait for 2 seconds, Then pulse the DD pin 3 times to set the Roomba to operate at 19200 baud.
	// This ensures that we know what baud rate to talk at.
	_delay_ms(2000);
	for (i = 0; i < 3; i++)
	{
		DD_PORT &= ~_BV(DD_PIN);
    1ddc:	45 98       	cbi	0x08, 5	; 8
    1dde:	9f ef       	ldi	r25, 0xFF	; 255
    1de0:	20 e7       	ldi	r18, 0x70	; 112
    1de2:	32 e0       	ldi	r19, 0x02	; 2
    1de4:	91 50       	subi	r25, 0x01	; 1
    1de6:	20 40       	sbci	r18, 0x00	; 0
    1de8:	30 40       	sbci	r19, 0x00	; 0
    1dea:	e1 f7       	brne	.-8      	; 0x1de4 <Roomba_Init+0x34>
    1dec:	00 c0       	rjmp	.+0      	; 0x1dee <Roomba_Init+0x3e>
    1dee:	00 00       	nop
		_delay_ms(50);
		DD_PORT |= _BV(DD_PIN);
    1df0:	45 9a       	sbi	0x08, 5	; 8
    1df2:	9f ef       	ldi	r25, 0xFF	; 255
    1df4:	20 e7       	ldi	r18, 0x70	; 112
    1df6:	32 e0       	ldi	r19, 0x02	; 2
    1df8:	91 50       	subi	r25, 0x01	; 1
    1dfa:	20 40       	sbci	r18, 0x00	; 0
    1dfc:	30 40       	sbci	r19, 0x00	; 0
    1dfe:	e1 f7       	brne	.-8      	; 0x1df8 <Roomba_Init+0x48>
    1e00:	00 c0       	rjmp	.+0      	; 0x1e02 <Roomba_Init+0x52>
    1e02:	00 00       	nop
    1e04:	81 50       	subi	r24, 0x01	; 1
	DD_PORT |= _BV(DD_PIN);

	// Wait for 2 seconds, Then pulse the DD pin 3 times to set the Roomba to operate at 19200 baud.
	// This ensures that we know what baud rate to talk at.
	_delay_ms(2000);
	for (i = 0; i < 3; i++)
    1e06:	51 f7       	brne	.-44     	; 0x1ddc <Roomba_Init+0x2c>
		_delay_ms(50);
		DD_PORT |= _BV(DD_PIN);
		_delay_ms(50);
	}

	uart_init(UART_19200);
    1e08:	24 d0       	rcall	.+72     	; 0x1e52 <uart_init>

	// start the Roomba's SCI
	uart_putchar(START, ROOMBA_UART);
    1e0a:	60 e0       	ldi	r22, 0x00	; 0
    1e0c:	70 e0       	ldi	r23, 0x00	; 0
    1e0e:	80 e8       	ldi	r24, 0x80	; 128
    1e10:	66 d0       	rcall	.+204    	; 0x1ede <uart_putchar>
    1e12:	8f ef       	ldi	r24, 0xFF	; 255
    1e14:	99 ef       	ldi	r25, 0xF9	; 249
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	81 50       	subi	r24, 0x01	; 1
    1e1a:	90 40       	sbci	r25, 0x00	; 0
    1e1c:	20 40       	sbci	r18, 0x00	; 0
    1e1e:	e1 f7       	brne	.-8      	; 0x1e18 <Roomba_Init+0x68>
    1e20:	00 c0       	rjmp	.+0      	; 0x1e22 <Roomba_Init+0x72>
    1e22:	00 00       	nop
    1e24:	3f ef       	ldi	r19, 0xFF	; 255
    1e26:	81 ee       	ldi	r24, 0xE1	; 225
    1e28:	94 e0       	ldi	r25, 0x04	; 4
    1e2a:	31 50       	subi	r19, 0x01	; 1
    1e2c:	80 40       	sbci	r24, 0x00	; 0
    1e2e:	90 40       	sbci	r25, 0x00	; 0
    1e30:	e1 f7       	brne	.-8      	; 0x1e2a <Roomba_Init+0x7a>
    1e32:	00 c0       	rjmp	.+0      	; 0x1e34 <Roomba_Init+0x84>
    1e34:	00 00       	nop

	// change the AVR's UART clock to the new baud rate.
	//uart_init(UART_38400);

	// put the Roomba into safe mode.
	uart_putchar(CONTROL, ROOMBA_UART);
    1e36:	60 e0       	ldi	r22, 0x00	; 0
    1e38:	70 e0       	ldi	r23, 0x00	; 0
    1e3a:	82 e8       	ldi	r24, 0x82	; 130
    1e3c:	50 d0       	rcall	.+160    	; 0x1ede <uart_putchar>
    1e3e:	2f ef       	ldi	r18, 0xFF	; 255
    1e40:	39 ef       	ldi	r19, 0xF9	; 249
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	21 50       	subi	r18, 0x01	; 1
    1e46:	30 40       	sbci	r19, 0x00	; 0
    1e48:	80 40       	sbci	r24, 0x00	; 0
    1e4a:	e1 f7       	brne	.-8      	; 0x1e44 <Roomba_Init+0x94>
    1e4c:	00 c0       	rjmp	.+0      	; 0x1e4e <Roomba_Init+0x9e>
    1e4e:	00 00       	nop
    1e50:	08 95       	ret

00001e52 <uart_init>:
void uart_reset_receive(int uart)
{
	if (uart) {
		uart_buffer_1_index = 0;
	} else {
		uart_buffer_index = 0;
    1e52:	e4 e6       	ldi	r30, 0x64	; 100
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	90 81       	ld	r25, Z
    1e58:	9d 7f       	andi	r25, 0xFD	; 253
    1e5a:	90 83       	st	Z, r25
    1e5c:	32 e0       	ldi	r19, 0x02	; 2
    1e5e:	30 93 c0 00 	sts	0x00C0, r19
    1e62:	28 e9       	ldi	r18, 0x98	; 152
    1e64:	20 93 c1 00 	sts	0x00C1, r18
    1e68:	96 e0       	ldi	r25, 0x06	; 6
    1e6a:	90 93 c2 00 	sts	0x00C2, r25
    1e6e:	30 93 c8 00 	sts	0x00C8, r19
    1e72:	20 93 c9 00 	sts	0x00C9, r18
    1e76:	90 93 ca 00 	sts	0x00CA, r25
    1e7a:	27 e6       	ldi	r18, 0x67	; 103
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	30 93 c5 00 	sts	0x00C5, r19
    1e82:	20 93 c4 00 	sts	0x00C4, r18
    1e86:	2f ec       	ldi	r18, 0xCF	; 207
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	30 93 cd 00 	sts	0x00CD, r19
    1e8e:	20 93 cc 00 	sts	0x00CC, r18
    1e92:	81 30       	cpi	r24, 0x01	; 1
    1e94:	59 f0       	breq	.+22     	; 0x1eac <uart_init+0x5a>
    1e96:	18 f0       	brcs	.+6      	; 0x1e9e <uart_init+0x4c>
    1e98:	82 30       	cpi	r24, 0x02	; 2
    1e9a:	79 f0       	breq	.+30     	; 0x1eba <uart_init+0x68>
    1e9c:	15 c0       	rjmp	.+42     	; 0x1ec8 <uart_init+0x76>
    1e9e:	87 e6       	ldi	r24, 0x67	; 103
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	90 93 c5 00 	sts	0x00C5, r25
    1ea6:	80 93 c4 00 	sts	0x00C4, r24
    1eaa:	14 c0       	rjmp	.+40     	; 0x1ed4 <uart_init+0x82>
    1eac:	83 e3       	ldi	r24, 0x33	; 51
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	90 93 c5 00 	sts	0x00C5, r25
    1eb4:	80 93 c4 00 	sts	0x00C4, r24
    1eb8:	0d c0       	rjmp	.+26     	; 0x1ed4 <uart_init+0x82>
    1eba:	82 e2       	ldi	r24, 0x22	; 34
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	90 93 c5 00 	sts	0x00C5, r25
    1ec2:	80 93 c4 00 	sts	0x00C4, r24
    1ec6:	06 c0       	rjmp	.+12     	; 0x1ed4 <uart_init+0x82>
    1ec8:	87 e6       	ldi	r24, 0x67	; 103
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	90 93 c5 00 	sts	0x00C5, r25
    1ed0:	80 93 c4 00 	sts	0x00C4, r24
    1ed4:	10 92 9c 14 	sts	0x149C, r1
    1ed8:	10 92 9b 14 	sts	0x149B, r1
    1edc:	08 95       	ret

00001ede <uart_putchar>:
    1ede:	67 2b       	or	r22, r23
    1ee0:	41 f0       	breq	.+16     	; 0x1ef2 <uart_putchar+0x14>
    1ee2:	e8 ec       	ldi	r30, 0xC8	; 200
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	90 81       	ld	r25, Z
    1ee8:	95 ff       	sbrs	r25, 5
    1eea:	fd cf       	rjmp	.-6      	; 0x1ee6 <uart_putchar+0x8>
    1eec:	80 93 ce 00 	sts	0x00CE, r24
    1ef0:	08 95       	ret
    1ef2:	e0 ec       	ldi	r30, 0xC0	; 192
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	90 81       	ld	r25, Z
    1ef8:	95 ff       	sbrs	r25, 5
    1efa:	fd cf       	rjmp	.-6      	; 0x1ef6 <uart_putchar+0x18>
    1efc:	80 93 c6 00 	sts	0x00C6, r24
    1f00:	08 95       	ret

00001f02 <uart_send_string>:
	}
}
void uart_send_string(char *string, int uart){
    1f02:	0f 93       	push	r16
    1f04:	1f 93       	push	r17
    1f06:	cf 93       	push	r28
    1f08:	df 93       	push	r29
    1f0a:	ec 01       	movw	r28, r24
	
	while (*string != '\0')
    1f0c:	88 81       	ld	r24, Y
    1f0e:	88 23       	and	r24, r24
    1f10:	39 f0       	breq	.+14     	; 0x1f20 <uart_send_string+0x1e>
    1f12:	8b 01       	movw	r16, r22
    1f14:	21 96       	adiw	r28, 0x01	; 1
	{
		uart_putchar(*string, uart);
    1f16:	b8 01       	movw	r22, r16
    1f18:	e2 df       	rcall	.-60     	; 0x1ede <uart_putchar>
		uart_buffer_index = 0;
	}
}
void uart_send_string(char *string, int uart){
	
	while (*string != '\0')
    1f1a:	89 91       	ld	r24, Y+
    1f1c:	81 11       	cpse	r24, r1
    1f1e:	fb cf       	rjmp	.-10     	; 0x1f16 <uart_send_string+0x14>
		uart_putchar(*string, uart);
		string++;
	}
	
	
}
    1f20:	df 91       	pop	r29
    1f22:	cf 91       	pop	r28
    1f24:	1f 91       	pop	r17
    1f26:	0f 91       	pop	r16
    1f28:	08 95       	ret

00001f2a <__vector_25>:
/**
 * UART receive byte ISR
 */
ISR(USART0_RX_vect)
{
    1f2a:	1f 92       	push	r1
    1f2c:	0f 92       	push	r0
    1f2e:	0f b6       	in	r0, 0x3f	; 63
    1f30:	0f 92       	push	r0
    1f32:	11 24       	eor	r1, r1
    1f34:	0b b6       	in	r0, 0x3b	; 59
    1f36:	0f 92       	push	r0
    1f38:	8f 93       	push	r24
    1f3a:	9f 93       	push	r25
    1f3c:	ef 93       	push	r30
    1f3e:	ff 93       	push	r31
	while(!(UCSR0A & (1<<RXC0)));
    1f40:	e0 ec       	ldi	r30, 0xC0	; 192
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	88 23       	and	r24, r24
    1f48:	ec f7       	brge	.-6      	; 0x1f44 <__vector_25+0x1a>
    uart_buffer[uart_buffer_index] = UDR0;
    1f4a:	e0 91 9c 14 	lds	r30, 0x149C
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	80 91 c6 00 	lds	r24, 0x00C6
    1f54:	e3 54       	subi	r30, 0x43	; 67
    1f56:	fb 4e       	sbci	r31, 0xEB	; 235
    1f58:	80 83       	st	Z, r24
    uart_buffer_index = (uart_buffer_index + 1) % UART_BUFFER_SIZE;
    1f5a:	80 91 9c 14 	lds	r24, 0x149C
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	01 96       	adiw	r24, 0x01	; 1
    1f62:	8f 71       	andi	r24, 0x1F	; 31
    1f64:	90 78       	andi	r25, 0x80	; 128
    1f66:	99 23       	and	r25, r25
    1f68:	24 f4       	brge	.+8      	; 0x1f72 <__vector_25+0x48>
    1f6a:	01 97       	sbiw	r24, 0x01	; 1
    1f6c:	80 6e       	ori	r24, 0xE0	; 224
    1f6e:	9f 6f       	ori	r25, 0xFF	; 255
    1f70:	01 96       	adiw	r24, 0x01	; 1
    1f72:	80 93 9c 14 	sts	0x149C, r24
}
    1f76:	ff 91       	pop	r31
    1f78:	ef 91       	pop	r30
    1f7a:	9f 91       	pop	r25
    1f7c:	8f 91       	pop	r24
    1f7e:	0f 90       	pop	r0
    1f80:	0b be       	out	0x3b, r0	; 59
    1f82:	0f 90       	pop	r0
    1f84:	0f be       	out	0x3f, r0	; 63
    1f86:	0f 90       	pop	r0
    1f88:	1f 90       	pop	r1
    1f8a:	18 95       	reti

00001f8c <__vector_36>:

/**
 * UART receive byte ISR
 */
ISR(USART1_RX_vect)
{
    1f8c:	1f 92       	push	r1
    1f8e:	0f 92       	push	r0
    1f90:	0f b6       	in	r0, 0x3f	; 63
    1f92:	0f 92       	push	r0
    1f94:	11 24       	eor	r1, r1
    1f96:	0b b6       	in	r0, 0x3b	; 59
    1f98:	0f 92       	push	r0
    1f9a:	8f 93       	push	r24
    1f9c:	9f 93       	push	r25
    1f9e:	ef 93       	push	r30
    1fa0:	ff 93       	push	r31
	while(!(UCSR1A & (1<<RXC1)));
    1fa2:	e8 ec       	ldi	r30, 0xC8	; 200
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	88 23       	and	r24, r24
    1faa:	ec f7       	brge	.-6      	; 0x1fa6 <__vector_36+0x1a>
    uart_buffer_1[uart_buffer_1_index] = UDR1;
    1fac:	e0 91 9b 14 	lds	r30, 0x149B
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 91 ce 00 	lds	r24, 0x00CE
    1fb6:	e3 56       	subi	r30, 0x63	; 99
    1fb8:	fb 4e       	sbci	r31, 0xEB	; 235
    1fba:	80 83       	st	Z, r24
    uart_buffer_1_index = (uart_buffer_1_index + 1) % UART_BUFFER_SIZE;
    1fbc:	80 91 9b 14 	lds	r24, 0x149B
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	01 96       	adiw	r24, 0x01	; 1
    1fc4:	8f 71       	andi	r24, 0x1F	; 31
    1fc6:	90 78       	andi	r25, 0x80	; 128
    1fc8:	99 23       	and	r25, r25
    1fca:	24 f4       	brge	.+8      	; 0x1fd4 <__vector_36+0x48>
    1fcc:	01 97       	sbiw	r24, 0x01	; 1
    1fce:	80 6e       	ori	r24, 0xE0	; 224
    1fd0:	9f 6f       	ori	r25, 0xFF	; 255
    1fd2:	01 96       	adiw	r24, 0x01	; 1
    1fd4:	80 93 9b 14 	sts	0x149B, r24
}
    1fd8:	ff 91       	pop	r31
    1fda:	ef 91       	pop	r30
    1fdc:	9f 91       	pop	r25
    1fde:	8f 91       	pop	r24
    1fe0:	0f 90       	pop	r0
    1fe2:	0b be       	out	0x3b, r0	; 59
    1fe4:	0f 90       	pop	r0
    1fe6:	0f be       	out	0x3f, r0	; 63
    1fe8:	0f 90       	pop	r0
    1fea:	1f 90       	pop	r1
    1fec:	18 95       	reti

00001fee <__udivmodhi4>:
    1fee:	aa 1b       	sub	r26, r26
    1ff0:	bb 1b       	sub	r27, r27
    1ff2:	51 e1       	ldi	r21, 0x11	; 17
    1ff4:	07 c0       	rjmp	.+14     	; 0x2004 <__udivmodhi4_ep>

00001ff6 <__udivmodhi4_loop>:
    1ff6:	aa 1f       	adc	r26, r26
    1ff8:	bb 1f       	adc	r27, r27
    1ffa:	a6 17       	cp	r26, r22
    1ffc:	b7 07       	cpc	r27, r23
    1ffe:	10 f0       	brcs	.+4      	; 0x2004 <__udivmodhi4_ep>
    2000:	a6 1b       	sub	r26, r22
    2002:	b7 0b       	sbc	r27, r23

00002004 <__udivmodhi4_ep>:
    2004:	88 1f       	adc	r24, r24
    2006:	99 1f       	adc	r25, r25
    2008:	5a 95       	dec	r21
    200a:	a9 f7       	brne	.-22     	; 0x1ff6 <__udivmodhi4_loop>
    200c:	80 95       	com	r24
    200e:	90 95       	com	r25
    2010:	bc 01       	movw	r22, r24
    2012:	cd 01       	movw	r24, r26
    2014:	08 95       	ret

00002016 <__tablejump2__>:
    2016:	ee 0f       	add	r30, r30
    2018:	ff 1f       	adc	r31, r31
    201a:	88 1f       	adc	r24, r24
    201c:	8b bf       	out	0x3b, r24	; 59
    201e:	07 90       	elpm	r0, Z+
    2020:	f6 91       	elpm	r31, Z
    2022:	e0 2d       	mov	r30, r0
    2024:	19 94       	eijmp

00002026 <sprintf>:
    2026:	0f 93       	push	r16
    2028:	1f 93       	push	r17
    202a:	cf 93       	push	r28
    202c:	df 93       	push	r29
    202e:	cd b7       	in	r28, 0x3d	; 61
    2030:	de b7       	in	r29, 0x3e	; 62
    2032:	2e 97       	sbiw	r28, 0x0e	; 14
    2034:	0f b6       	in	r0, 0x3f	; 63
    2036:	f8 94       	cli
    2038:	de bf       	out	0x3e, r29	; 62
    203a:	0f be       	out	0x3f, r0	; 63
    203c:	cd bf       	out	0x3d, r28	; 61
    203e:	0e 89       	ldd	r16, Y+22	; 0x16
    2040:	1f 89       	ldd	r17, Y+23	; 0x17
    2042:	86 e0       	ldi	r24, 0x06	; 6
    2044:	8c 83       	std	Y+4, r24	; 0x04
    2046:	1a 83       	std	Y+2, r17	; 0x02
    2048:	09 83       	std	Y+1, r16	; 0x01
    204a:	8f ef       	ldi	r24, 0xFF	; 255
    204c:	9f e7       	ldi	r25, 0x7F	; 127
    204e:	9e 83       	std	Y+6, r25	; 0x06
    2050:	8d 83       	std	Y+5, r24	; 0x05
    2052:	ae 01       	movw	r20, r28
    2054:	46 5e       	subi	r20, 0xE6	; 230
    2056:	5f 4f       	sbci	r21, 0xFF	; 255
    2058:	68 8d       	ldd	r22, Y+24	; 0x18
    205a:	79 8d       	ldd	r23, Y+25	; 0x19
    205c:	ce 01       	movw	r24, r28
    205e:	01 96       	adiw	r24, 0x01	; 1
    2060:	11 d0       	rcall	.+34     	; 0x2084 <vfprintf>
    2062:	2f 81       	ldd	r18, Y+7	; 0x07
    2064:	38 85       	ldd	r19, Y+8	; 0x08
    2066:	f8 01       	movw	r30, r16
    2068:	e2 0f       	add	r30, r18
    206a:	f3 1f       	adc	r31, r19
    206c:	10 82       	st	Z, r1
    206e:	2e 96       	adiw	r28, 0x0e	; 14
    2070:	0f b6       	in	r0, 0x3f	; 63
    2072:	f8 94       	cli
    2074:	de bf       	out	0x3e, r29	; 62
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	cd bf       	out	0x3d, r28	; 61
    207a:	df 91       	pop	r29
    207c:	cf 91       	pop	r28
    207e:	1f 91       	pop	r17
    2080:	0f 91       	pop	r16
    2082:	08 95       	ret

00002084 <vfprintf>:
    2084:	2f 92       	push	r2
    2086:	3f 92       	push	r3
    2088:	4f 92       	push	r4
    208a:	5f 92       	push	r5
    208c:	6f 92       	push	r6
    208e:	7f 92       	push	r7
    2090:	8f 92       	push	r8
    2092:	9f 92       	push	r9
    2094:	af 92       	push	r10
    2096:	bf 92       	push	r11
    2098:	cf 92       	push	r12
    209a:	df 92       	push	r13
    209c:	ef 92       	push	r14
    209e:	ff 92       	push	r15
    20a0:	0f 93       	push	r16
    20a2:	1f 93       	push	r17
    20a4:	cf 93       	push	r28
    20a6:	df 93       	push	r29
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
    20ac:	2c 97       	sbiw	r28, 0x0c	; 12
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	f8 94       	cli
    20b2:	de bf       	out	0x3e, r29	; 62
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	cd bf       	out	0x3d, r28	; 61
    20b8:	7c 01       	movw	r14, r24
    20ba:	6b 01       	movw	r12, r22
    20bc:	8a 01       	movw	r16, r20
    20be:	fc 01       	movw	r30, r24
    20c0:	17 82       	std	Z+7, r1	; 0x07
    20c2:	16 82       	std	Z+6, r1	; 0x06
    20c4:	83 81       	ldd	r24, Z+3	; 0x03
    20c6:	81 ff       	sbrs	r24, 1
    20c8:	b0 c1       	rjmp	.+864    	; 0x242a <__stack+0x22b>
    20ca:	ce 01       	movw	r24, r28
    20cc:	01 96       	adiw	r24, 0x01	; 1
    20ce:	4c 01       	movw	r8, r24
    20d0:	f7 01       	movw	r30, r14
    20d2:	93 81       	ldd	r25, Z+3	; 0x03
    20d4:	f6 01       	movw	r30, r12
    20d6:	93 fd       	sbrc	r25, 3
    20d8:	85 91       	lpm	r24, Z+
    20da:	93 ff       	sbrs	r25, 3
    20dc:	81 91       	ld	r24, Z+
    20de:	6f 01       	movw	r12, r30
    20e0:	88 23       	and	r24, r24
    20e2:	09 f4       	brne	.+2      	; 0x20e6 <vfprintf+0x62>
    20e4:	9e c1       	rjmp	.+828    	; 0x2422 <__stack+0x223>
    20e6:	85 32       	cpi	r24, 0x25	; 37
    20e8:	39 f4       	brne	.+14     	; 0x20f8 <vfprintf+0x74>
    20ea:	93 fd       	sbrc	r25, 3
    20ec:	85 91       	lpm	r24, Z+
    20ee:	93 ff       	sbrs	r25, 3
    20f0:	81 91       	ld	r24, Z+
    20f2:	6f 01       	movw	r12, r30
    20f4:	85 32       	cpi	r24, 0x25	; 37
    20f6:	21 f4       	brne	.+8      	; 0x2100 <vfprintf+0x7c>
    20f8:	b7 01       	movw	r22, r14
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	c7 d1       	rcall	.+910    	; 0x248c <fputc>
    20fe:	e8 cf       	rjmp	.-48     	; 0x20d0 <vfprintf+0x4c>
    2100:	51 2c       	mov	r5, r1
    2102:	31 2c       	mov	r3, r1
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	20 32       	cpi	r18, 0x20	; 32
    2108:	a0 f4       	brcc	.+40     	; 0x2132 <vfprintf+0xae>
    210a:	8b 32       	cpi	r24, 0x2B	; 43
    210c:	69 f0       	breq	.+26     	; 0x2128 <vfprintf+0xa4>
    210e:	30 f4       	brcc	.+12     	; 0x211c <vfprintf+0x98>
    2110:	80 32       	cpi	r24, 0x20	; 32
    2112:	59 f0       	breq	.+22     	; 0x212a <vfprintf+0xa6>
    2114:	83 32       	cpi	r24, 0x23	; 35
    2116:	69 f4       	brne	.+26     	; 0x2132 <vfprintf+0xae>
    2118:	20 61       	ori	r18, 0x10	; 16
    211a:	2c c0       	rjmp	.+88     	; 0x2174 <vfprintf+0xf0>
    211c:	8d 32       	cpi	r24, 0x2D	; 45
    211e:	39 f0       	breq	.+14     	; 0x212e <vfprintf+0xaa>
    2120:	80 33       	cpi	r24, 0x30	; 48
    2122:	39 f4       	brne	.+14     	; 0x2132 <vfprintf+0xae>
    2124:	21 60       	ori	r18, 0x01	; 1
    2126:	26 c0       	rjmp	.+76     	; 0x2174 <vfprintf+0xf0>
    2128:	22 60       	ori	r18, 0x02	; 2
    212a:	24 60       	ori	r18, 0x04	; 4
    212c:	23 c0       	rjmp	.+70     	; 0x2174 <vfprintf+0xf0>
    212e:	28 60       	ori	r18, 0x08	; 8
    2130:	21 c0       	rjmp	.+66     	; 0x2174 <vfprintf+0xf0>
    2132:	27 fd       	sbrc	r18, 7
    2134:	27 c0       	rjmp	.+78     	; 0x2184 <vfprintf+0x100>
    2136:	30 ed       	ldi	r19, 0xD0	; 208
    2138:	38 0f       	add	r19, r24
    213a:	3a 30       	cpi	r19, 0x0A	; 10
    213c:	78 f4       	brcc	.+30     	; 0x215c <vfprintf+0xd8>
    213e:	26 ff       	sbrs	r18, 6
    2140:	06 c0       	rjmp	.+12     	; 0x214e <vfprintf+0xca>
    2142:	fa e0       	ldi	r31, 0x0A	; 10
    2144:	5f 9e       	mul	r5, r31
    2146:	30 0d       	add	r19, r0
    2148:	11 24       	eor	r1, r1
    214a:	53 2e       	mov	r5, r19
    214c:	13 c0       	rjmp	.+38     	; 0x2174 <vfprintf+0xf0>
    214e:	8a e0       	ldi	r24, 0x0A	; 10
    2150:	38 9e       	mul	r3, r24
    2152:	30 0d       	add	r19, r0
    2154:	11 24       	eor	r1, r1
    2156:	33 2e       	mov	r3, r19
    2158:	20 62       	ori	r18, 0x20	; 32
    215a:	0c c0       	rjmp	.+24     	; 0x2174 <vfprintf+0xf0>
    215c:	8e 32       	cpi	r24, 0x2E	; 46
    215e:	21 f4       	brne	.+8      	; 0x2168 <vfprintf+0xe4>
    2160:	26 fd       	sbrc	r18, 6
    2162:	5f c1       	rjmp	.+702    	; 0x2422 <__stack+0x223>
    2164:	20 64       	ori	r18, 0x40	; 64
    2166:	06 c0       	rjmp	.+12     	; 0x2174 <vfprintf+0xf0>
    2168:	8c 36       	cpi	r24, 0x6C	; 108
    216a:	11 f4       	brne	.+4      	; 0x2170 <vfprintf+0xec>
    216c:	20 68       	ori	r18, 0x80	; 128
    216e:	02 c0       	rjmp	.+4      	; 0x2174 <vfprintf+0xf0>
    2170:	88 36       	cpi	r24, 0x68	; 104
    2172:	41 f4       	brne	.+16     	; 0x2184 <vfprintf+0x100>
    2174:	f6 01       	movw	r30, r12
    2176:	93 fd       	sbrc	r25, 3
    2178:	85 91       	lpm	r24, Z+
    217a:	93 ff       	sbrs	r25, 3
    217c:	81 91       	ld	r24, Z+
    217e:	6f 01       	movw	r12, r30
    2180:	81 11       	cpse	r24, r1
    2182:	c1 cf       	rjmp	.-126    	; 0x2106 <vfprintf+0x82>
    2184:	98 2f       	mov	r25, r24
    2186:	9f 7d       	andi	r25, 0xDF	; 223
    2188:	95 54       	subi	r25, 0x45	; 69
    218a:	93 30       	cpi	r25, 0x03	; 3
    218c:	28 f4       	brcc	.+10     	; 0x2198 <vfprintf+0x114>
    218e:	0c 5f       	subi	r16, 0xFC	; 252
    2190:	1f 4f       	sbci	r17, 0xFF	; 255
    2192:	ff e3       	ldi	r31, 0x3F	; 63
    2194:	f9 83       	std	Y+1, r31	; 0x01
    2196:	0d c0       	rjmp	.+26     	; 0x21b2 <vfprintf+0x12e>
    2198:	83 36       	cpi	r24, 0x63	; 99
    219a:	31 f0       	breq	.+12     	; 0x21a8 <vfprintf+0x124>
    219c:	83 37       	cpi	r24, 0x73	; 115
    219e:	71 f0       	breq	.+28     	; 0x21bc <vfprintf+0x138>
    21a0:	83 35       	cpi	r24, 0x53	; 83
    21a2:	09 f0       	breq	.+2      	; 0x21a6 <vfprintf+0x122>
    21a4:	57 c0       	rjmp	.+174    	; 0x2254 <__stack+0x55>
    21a6:	21 c0       	rjmp	.+66     	; 0x21ea <vfprintf+0x166>
    21a8:	f8 01       	movw	r30, r16
    21aa:	80 81       	ld	r24, Z
    21ac:	89 83       	std	Y+1, r24	; 0x01
    21ae:	0e 5f       	subi	r16, 0xFE	; 254
    21b0:	1f 4f       	sbci	r17, 0xFF	; 255
    21b2:	44 24       	eor	r4, r4
    21b4:	43 94       	inc	r4
    21b6:	51 2c       	mov	r5, r1
    21b8:	54 01       	movw	r10, r8
    21ba:	14 c0       	rjmp	.+40     	; 0x21e4 <vfprintf+0x160>
    21bc:	38 01       	movw	r6, r16
    21be:	f2 e0       	ldi	r31, 0x02	; 2
    21c0:	6f 0e       	add	r6, r31
    21c2:	71 1c       	adc	r7, r1
    21c4:	f8 01       	movw	r30, r16
    21c6:	a0 80       	ld	r10, Z
    21c8:	b1 80       	ldd	r11, Z+1	; 0x01
    21ca:	26 ff       	sbrs	r18, 6
    21cc:	03 c0       	rjmp	.+6      	; 0x21d4 <vfprintf+0x150>
    21ce:	65 2d       	mov	r22, r5
    21d0:	70 e0       	ldi	r23, 0x00	; 0
    21d2:	02 c0       	rjmp	.+4      	; 0x21d8 <vfprintf+0x154>
    21d4:	6f ef       	ldi	r22, 0xFF	; 255
    21d6:	7f ef       	ldi	r23, 0xFF	; 255
    21d8:	c5 01       	movw	r24, r10
    21da:	2c 87       	std	Y+12, r18	; 0x0c
    21dc:	4c d1       	rcall	.+664    	; 0x2476 <strnlen>
    21de:	2c 01       	movw	r4, r24
    21e0:	83 01       	movw	r16, r6
    21e2:	2c 85       	ldd	r18, Y+12	; 0x0c
    21e4:	2f 77       	andi	r18, 0x7F	; 127
    21e6:	22 2e       	mov	r2, r18
    21e8:	16 c0       	rjmp	.+44     	; 0x2216 <__stack+0x17>
    21ea:	38 01       	movw	r6, r16
    21ec:	f2 e0       	ldi	r31, 0x02	; 2
    21ee:	6f 0e       	add	r6, r31
    21f0:	71 1c       	adc	r7, r1
    21f2:	f8 01       	movw	r30, r16
    21f4:	a0 80       	ld	r10, Z
    21f6:	b1 80       	ldd	r11, Z+1	; 0x01
    21f8:	26 ff       	sbrs	r18, 6
    21fa:	03 c0       	rjmp	.+6      	; 0x2202 <__stack+0x3>
    21fc:	65 2d       	mov	r22, r5
    21fe:	70 e0       	ldi	r23, 0x00	; 0
    2200:	02 c0       	rjmp	.+4      	; 0x2206 <__stack+0x7>
    2202:	6f ef       	ldi	r22, 0xFF	; 255
    2204:	7f ef       	ldi	r23, 0xFF	; 255
    2206:	c5 01       	movw	r24, r10
    2208:	2c 87       	std	Y+12, r18	; 0x0c
    220a:	2a d1       	rcall	.+596    	; 0x2460 <strnlen_P>
    220c:	2c 01       	movw	r4, r24
    220e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2210:	20 68       	ori	r18, 0x80	; 128
    2212:	22 2e       	mov	r2, r18
    2214:	83 01       	movw	r16, r6
    2216:	23 fc       	sbrc	r2, 3
    2218:	19 c0       	rjmp	.+50     	; 0x224c <__stack+0x4d>
    221a:	83 2d       	mov	r24, r3
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	48 16       	cp	r4, r24
    2220:	59 06       	cpc	r5, r25
    2222:	a0 f4       	brcc	.+40     	; 0x224c <__stack+0x4d>
    2224:	b7 01       	movw	r22, r14
    2226:	80 e2       	ldi	r24, 0x20	; 32
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	30 d1       	rcall	.+608    	; 0x248c <fputc>
    222c:	3a 94       	dec	r3
    222e:	f5 cf       	rjmp	.-22     	; 0x221a <__stack+0x1b>
    2230:	f5 01       	movw	r30, r10
    2232:	27 fc       	sbrc	r2, 7
    2234:	85 91       	lpm	r24, Z+
    2236:	27 fe       	sbrs	r2, 7
    2238:	81 91       	ld	r24, Z+
    223a:	5f 01       	movw	r10, r30
    223c:	b7 01       	movw	r22, r14
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	25 d1       	rcall	.+586    	; 0x248c <fputc>
    2242:	31 10       	cpse	r3, r1
    2244:	3a 94       	dec	r3
    2246:	f1 e0       	ldi	r31, 0x01	; 1
    2248:	4f 1a       	sub	r4, r31
    224a:	51 08       	sbc	r5, r1
    224c:	41 14       	cp	r4, r1
    224e:	51 04       	cpc	r5, r1
    2250:	79 f7       	brne	.-34     	; 0x2230 <__stack+0x31>
    2252:	de c0       	rjmp	.+444    	; 0x2410 <__stack+0x211>
    2254:	84 36       	cpi	r24, 0x64	; 100
    2256:	11 f0       	breq	.+4      	; 0x225c <__stack+0x5d>
    2258:	89 36       	cpi	r24, 0x69	; 105
    225a:	31 f5       	brne	.+76     	; 0x22a8 <__stack+0xa9>
    225c:	f8 01       	movw	r30, r16
    225e:	27 ff       	sbrs	r18, 7
    2260:	07 c0       	rjmp	.+14     	; 0x2270 <__stack+0x71>
    2262:	60 81       	ld	r22, Z
    2264:	71 81       	ldd	r23, Z+1	; 0x01
    2266:	82 81       	ldd	r24, Z+2	; 0x02
    2268:	93 81       	ldd	r25, Z+3	; 0x03
    226a:	0c 5f       	subi	r16, 0xFC	; 252
    226c:	1f 4f       	sbci	r17, 0xFF	; 255
    226e:	08 c0       	rjmp	.+16     	; 0x2280 <__stack+0x81>
    2270:	60 81       	ld	r22, Z
    2272:	71 81       	ldd	r23, Z+1	; 0x01
    2274:	07 2e       	mov	r0, r23
    2276:	00 0c       	add	r0, r0
    2278:	88 0b       	sbc	r24, r24
    227a:	99 0b       	sbc	r25, r25
    227c:	0e 5f       	subi	r16, 0xFE	; 254
    227e:	1f 4f       	sbci	r17, 0xFF	; 255
    2280:	2f 76       	andi	r18, 0x6F	; 111
    2282:	72 2e       	mov	r7, r18
    2284:	97 ff       	sbrs	r25, 7
    2286:	09 c0       	rjmp	.+18     	; 0x229a <__stack+0x9b>
    2288:	90 95       	com	r25
    228a:	80 95       	com	r24
    228c:	70 95       	com	r23
    228e:	61 95       	neg	r22
    2290:	7f 4f       	sbci	r23, 0xFF	; 255
    2292:	8f 4f       	sbci	r24, 0xFF	; 255
    2294:	9f 4f       	sbci	r25, 0xFF	; 255
    2296:	20 68       	ori	r18, 0x80	; 128
    2298:	72 2e       	mov	r7, r18
    229a:	2a e0       	ldi	r18, 0x0A	; 10
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	a4 01       	movw	r20, r8
    22a0:	2d d1       	rcall	.+602    	; 0x24fc <__ultoa_invert>
    22a2:	a8 2e       	mov	r10, r24
    22a4:	a8 18       	sub	r10, r8
    22a6:	43 c0       	rjmp	.+134    	; 0x232e <__stack+0x12f>
    22a8:	85 37       	cpi	r24, 0x75	; 117
    22aa:	29 f4       	brne	.+10     	; 0x22b6 <__stack+0xb7>
    22ac:	2f 7e       	andi	r18, 0xEF	; 239
    22ae:	b2 2e       	mov	r11, r18
    22b0:	2a e0       	ldi	r18, 0x0A	; 10
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	25 c0       	rjmp	.+74     	; 0x2300 <__stack+0x101>
    22b6:	f2 2f       	mov	r31, r18
    22b8:	f9 7f       	andi	r31, 0xF9	; 249
    22ba:	bf 2e       	mov	r11, r31
    22bc:	8f 36       	cpi	r24, 0x6F	; 111
    22be:	c1 f0       	breq	.+48     	; 0x22f0 <__stack+0xf1>
    22c0:	18 f4       	brcc	.+6      	; 0x22c8 <__stack+0xc9>
    22c2:	88 35       	cpi	r24, 0x58	; 88
    22c4:	79 f0       	breq	.+30     	; 0x22e4 <__stack+0xe5>
    22c6:	ad c0       	rjmp	.+346    	; 0x2422 <__stack+0x223>
    22c8:	80 37       	cpi	r24, 0x70	; 112
    22ca:	19 f0       	breq	.+6      	; 0x22d2 <__stack+0xd3>
    22cc:	88 37       	cpi	r24, 0x78	; 120
    22ce:	21 f0       	breq	.+8      	; 0x22d8 <__stack+0xd9>
    22d0:	a8 c0       	rjmp	.+336    	; 0x2422 <__stack+0x223>
    22d2:	2f 2f       	mov	r18, r31
    22d4:	20 61       	ori	r18, 0x10	; 16
    22d6:	b2 2e       	mov	r11, r18
    22d8:	b4 fe       	sbrs	r11, 4
    22da:	0d c0       	rjmp	.+26     	; 0x22f6 <__stack+0xf7>
    22dc:	8b 2d       	mov	r24, r11
    22de:	84 60       	ori	r24, 0x04	; 4
    22e0:	b8 2e       	mov	r11, r24
    22e2:	09 c0       	rjmp	.+18     	; 0x22f6 <__stack+0xf7>
    22e4:	24 ff       	sbrs	r18, 4
    22e6:	0a c0       	rjmp	.+20     	; 0x22fc <__stack+0xfd>
    22e8:	9f 2f       	mov	r25, r31
    22ea:	96 60       	ori	r25, 0x06	; 6
    22ec:	b9 2e       	mov	r11, r25
    22ee:	06 c0       	rjmp	.+12     	; 0x22fc <__stack+0xfd>
    22f0:	28 e0       	ldi	r18, 0x08	; 8
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	05 c0       	rjmp	.+10     	; 0x2300 <__stack+0x101>
    22f6:	20 e1       	ldi	r18, 0x10	; 16
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	02 c0       	rjmp	.+4      	; 0x2300 <__stack+0x101>
    22fc:	20 e1       	ldi	r18, 0x10	; 16
    22fe:	32 e0       	ldi	r19, 0x02	; 2
    2300:	f8 01       	movw	r30, r16
    2302:	b7 fe       	sbrs	r11, 7
    2304:	07 c0       	rjmp	.+14     	; 0x2314 <__stack+0x115>
    2306:	60 81       	ld	r22, Z
    2308:	71 81       	ldd	r23, Z+1	; 0x01
    230a:	82 81       	ldd	r24, Z+2	; 0x02
    230c:	93 81       	ldd	r25, Z+3	; 0x03
    230e:	0c 5f       	subi	r16, 0xFC	; 252
    2310:	1f 4f       	sbci	r17, 0xFF	; 255
    2312:	06 c0       	rjmp	.+12     	; 0x2320 <__stack+0x121>
    2314:	60 81       	ld	r22, Z
    2316:	71 81       	ldd	r23, Z+1	; 0x01
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	0e 5f       	subi	r16, 0xFE	; 254
    231e:	1f 4f       	sbci	r17, 0xFF	; 255
    2320:	a4 01       	movw	r20, r8
    2322:	ec d0       	rcall	.+472    	; 0x24fc <__ultoa_invert>
    2324:	a8 2e       	mov	r10, r24
    2326:	a8 18       	sub	r10, r8
    2328:	fb 2d       	mov	r31, r11
    232a:	ff 77       	andi	r31, 0x7F	; 127
    232c:	7f 2e       	mov	r7, r31
    232e:	76 fe       	sbrs	r7, 6
    2330:	0b c0       	rjmp	.+22     	; 0x2348 <__stack+0x149>
    2332:	37 2d       	mov	r19, r7
    2334:	3e 7f       	andi	r19, 0xFE	; 254
    2336:	a5 14       	cp	r10, r5
    2338:	50 f4       	brcc	.+20     	; 0x234e <__stack+0x14f>
    233a:	74 fe       	sbrs	r7, 4
    233c:	0a c0       	rjmp	.+20     	; 0x2352 <__stack+0x153>
    233e:	72 fc       	sbrc	r7, 2
    2340:	08 c0       	rjmp	.+16     	; 0x2352 <__stack+0x153>
    2342:	37 2d       	mov	r19, r7
    2344:	3e 7e       	andi	r19, 0xEE	; 238
    2346:	05 c0       	rjmp	.+10     	; 0x2352 <__stack+0x153>
    2348:	ba 2c       	mov	r11, r10
    234a:	37 2d       	mov	r19, r7
    234c:	03 c0       	rjmp	.+6      	; 0x2354 <__stack+0x155>
    234e:	ba 2c       	mov	r11, r10
    2350:	01 c0       	rjmp	.+2      	; 0x2354 <__stack+0x155>
    2352:	b5 2c       	mov	r11, r5
    2354:	34 ff       	sbrs	r19, 4
    2356:	0d c0       	rjmp	.+26     	; 0x2372 <__stack+0x173>
    2358:	fe 01       	movw	r30, r28
    235a:	ea 0d       	add	r30, r10
    235c:	f1 1d       	adc	r31, r1
    235e:	80 81       	ld	r24, Z
    2360:	80 33       	cpi	r24, 0x30	; 48
    2362:	11 f4       	brne	.+4      	; 0x2368 <__stack+0x169>
    2364:	39 7e       	andi	r19, 0xE9	; 233
    2366:	09 c0       	rjmp	.+18     	; 0x237a <__stack+0x17b>
    2368:	32 ff       	sbrs	r19, 2
    236a:	06 c0       	rjmp	.+12     	; 0x2378 <__stack+0x179>
    236c:	b3 94       	inc	r11
    236e:	b3 94       	inc	r11
    2370:	04 c0       	rjmp	.+8      	; 0x237a <__stack+0x17b>
    2372:	83 2f       	mov	r24, r19
    2374:	86 78       	andi	r24, 0x86	; 134
    2376:	09 f0       	breq	.+2      	; 0x237a <__stack+0x17b>
    2378:	b3 94       	inc	r11
    237a:	33 fd       	sbrc	r19, 3
    237c:	12 c0       	rjmp	.+36     	; 0x23a2 <__stack+0x1a3>
    237e:	30 ff       	sbrs	r19, 0
    2380:	06 c0       	rjmp	.+12     	; 0x238e <__stack+0x18f>
    2382:	5a 2c       	mov	r5, r10
    2384:	b3 14       	cp	r11, r3
    2386:	18 f4       	brcc	.+6      	; 0x238e <__stack+0x18f>
    2388:	53 0c       	add	r5, r3
    238a:	5b 18       	sub	r5, r11
    238c:	b3 2c       	mov	r11, r3
    238e:	b3 14       	cp	r11, r3
    2390:	60 f4       	brcc	.+24     	; 0x23aa <__stack+0x1ab>
    2392:	b7 01       	movw	r22, r14
    2394:	80 e2       	ldi	r24, 0x20	; 32
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	3c 87       	std	Y+12, r19	; 0x0c
    239a:	78 d0       	rcall	.+240    	; 0x248c <fputc>
    239c:	b3 94       	inc	r11
    239e:	3c 85       	ldd	r19, Y+12	; 0x0c
    23a0:	f6 cf       	rjmp	.-20     	; 0x238e <__stack+0x18f>
    23a2:	b3 14       	cp	r11, r3
    23a4:	10 f4       	brcc	.+4      	; 0x23aa <__stack+0x1ab>
    23a6:	3b 18       	sub	r3, r11
    23a8:	01 c0       	rjmp	.+2      	; 0x23ac <__stack+0x1ad>
    23aa:	31 2c       	mov	r3, r1
    23ac:	34 ff       	sbrs	r19, 4
    23ae:	11 c0       	rjmp	.+34     	; 0x23d2 <__stack+0x1d3>
    23b0:	b7 01       	movw	r22, r14
    23b2:	80 e3       	ldi	r24, 0x30	; 48
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	3c 87       	std	Y+12, r19	; 0x0c
    23b8:	69 d0       	rcall	.+210    	; 0x248c <fputc>
    23ba:	3c 85       	ldd	r19, Y+12	; 0x0c
    23bc:	32 ff       	sbrs	r19, 2
    23be:	16 c0       	rjmp	.+44     	; 0x23ec <__stack+0x1ed>
    23c0:	31 fd       	sbrc	r19, 1
    23c2:	03 c0       	rjmp	.+6      	; 0x23ca <__stack+0x1cb>
    23c4:	88 e7       	ldi	r24, 0x78	; 120
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	02 c0       	rjmp	.+4      	; 0x23ce <__stack+0x1cf>
    23ca:	88 e5       	ldi	r24, 0x58	; 88
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	b7 01       	movw	r22, r14
    23d0:	0c c0       	rjmp	.+24     	; 0x23ea <__stack+0x1eb>
    23d2:	83 2f       	mov	r24, r19
    23d4:	86 78       	andi	r24, 0x86	; 134
    23d6:	51 f0       	breq	.+20     	; 0x23ec <__stack+0x1ed>
    23d8:	31 ff       	sbrs	r19, 1
    23da:	02 c0       	rjmp	.+4      	; 0x23e0 <__stack+0x1e1>
    23dc:	8b e2       	ldi	r24, 0x2B	; 43
    23de:	01 c0       	rjmp	.+2      	; 0x23e2 <__stack+0x1e3>
    23e0:	80 e2       	ldi	r24, 0x20	; 32
    23e2:	37 fd       	sbrc	r19, 7
    23e4:	8d e2       	ldi	r24, 0x2D	; 45
    23e6:	b7 01       	movw	r22, r14
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	50 d0       	rcall	.+160    	; 0x248c <fputc>
    23ec:	a5 14       	cp	r10, r5
    23ee:	30 f4       	brcc	.+12     	; 0x23fc <__stack+0x1fd>
    23f0:	b7 01       	movw	r22, r14
    23f2:	80 e3       	ldi	r24, 0x30	; 48
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	4a d0       	rcall	.+148    	; 0x248c <fputc>
    23f8:	5a 94       	dec	r5
    23fa:	f8 cf       	rjmp	.-16     	; 0x23ec <__stack+0x1ed>
    23fc:	aa 94       	dec	r10
    23fe:	f4 01       	movw	r30, r8
    2400:	ea 0d       	add	r30, r10
    2402:	f1 1d       	adc	r31, r1
    2404:	80 81       	ld	r24, Z
    2406:	b7 01       	movw	r22, r14
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	40 d0       	rcall	.+128    	; 0x248c <fputc>
    240c:	a1 10       	cpse	r10, r1
    240e:	f6 cf       	rjmp	.-20     	; 0x23fc <__stack+0x1fd>
    2410:	33 20       	and	r3, r3
    2412:	09 f4       	brne	.+2      	; 0x2416 <__stack+0x217>
    2414:	5d ce       	rjmp	.-838    	; 0x20d0 <vfprintf+0x4c>
    2416:	b7 01       	movw	r22, r14
    2418:	80 e2       	ldi	r24, 0x20	; 32
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	37 d0       	rcall	.+110    	; 0x248c <fputc>
    241e:	3a 94       	dec	r3
    2420:	f7 cf       	rjmp	.-18     	; 0x2410 <__stack+0x211>
    2422:	f7 01       	movw	r30, r14
    2424:	86 81       	ldd	r24, Z+6	; 0x06
    2426:	97 81       	ldd	r25, Z+7	; 0x07
    2428:	02 c0       	rjmp	.+4      	; 0x242e <__stack+0x22f>
    242a:	8f ef       	ldi	r24, 0xFF	; 255
    242c:	9f ef       	ldi	r25, 0xFF	; 255
    242e:	2c 96       	adiw	r28, 0x0c	; 12
    2430:	0f b6       	in	r0, 0x3f	; 63
    2432:	f8 94       	cli
    2434:	de bf       	out	0x3e, r29	; 62
    2436:	0f be       	out	0x3f, r0	; 63
    2438:	cd bf       	out	0x3d, r28	; 61
    243a:	df 91       	pop	r29
    243c:	cf 91       	pop	r28
    243e:	1f 91       	pop	r17
    2440:	0f 91       	pop	r16
    2442:	ff 90       	pop	r15
    2444:	ef 90       	pop	r14
    2446:	df 90       	pop	r13
    2448:	cf 90       	pop	r12
    244a:	bf 90       	pop	r11
    244c:	af 90       	pop	r10
    244e:	9f 90       	pop	r9
    2450:	8f 90       	pop	r8
    2452:	7f 90       	pop	r7
    2454:	6f 90       	pop	r6
    2456:	5f 90       	pop	r5
    2458:	4f 90       	pop	r4
    245a:	3f 90       	pop	r3
    245c:	2f 90       	pop	r2
    245e:	08 95       	ret

00002460 <strnlen_P>:
    2460:	fc 01       	movw	r30, r24
    2462:	05 90       	lpm	r0, Z+
    2464:	61 50       	subi	r22, 0x01	; 1
    2466:	70 40       	sbci	r23, 0x00	; 0
    2468:	01 10       	cpse	r0, r1
    246a:	d8 f7       	brcc	.-10     	; 0x2462 <strnlen_P+0x2>
    246c:	80 95       	com	r24
    246e:	90 95       	com	r25
    2470:	8e 0f       	add	r24, r30
    2472:	9f 1f       	adc	r25, r31
    2474:	08 95       	ret

00002476 <strnlen>:
    2476:	fc 01       	movw	r30, r24
    2478:	61 50       	subi	r22, 0x01	; 1
    247a:	70 40       	sbci	r23, 0x00	; 0
    247c:	01 90       	ld	r0, Z+
    247e:	01 10       	cpse	r0, r1
    2480:	d8 f7       	brcc	.-10     	; 0x2478 <strnlen+0x2>
    2482:	80 95       	com	r24
    2484:	90 95       	com	r25
    2486:	8e 0f       	add	r24, r30
    2488:	9f 1f       	adc	r25, r31
    248a:	08 95       	ret

0000248c <fputc>:
    248c:	0f 93       	push	r16
    248e:	1f 93       	push	r17
    2490:	cf 93       	push	r28
    2492:	df 93       	push	r29
    2494:	fb 01       	movw	r30, r22
    2496:	23 81       	ldd	r18, Z+3	; 0x03
    2498:	21 fd       	sbrc	r18, 1
    249a:	03 c0       	rjmp	.+6      	; 0x24a2 <fputc+0x16>
    249c:	8f ef       	ldi	r24, 0xFF	; 255
    249e:	9f ef       	ldi	r25, 0xFF	; 255
    24a0:	28 c0       	rjmp	.+80     	; 0x24f2 <fputc+0x66>
    24a2:	22 ff       	sbrs	r18, 2
    24a4:	16 c0       	rjmp	.+44     	; 0x24d2 <fputc+0x46>
    24a6:	46 81       	ldd	r20, Z+6	; 0x06
    24a8:	57 81       	ldd	r21, Z+7	; 0x07
    24aa:	24 81       	ldd	r18, Z+4	; 0x04
    24ac:	35 81       	ldd	r19, Z+5	; 0x05
    24ae:	42 17       	cp	r20, r18
    24b0:	53 07       	cpc	r21, r19
    24b2:	44 f4       	brge	.+16     	; 0x24c4 <fputc+0x38>
    24b4:	a0 81       	ld	r26, Z
    24b6:	b1 81       	ldd	r27, Z+1	; 0x01
    24b8:	9d 01       	movw	r18, r26
    24ba:	2f 5f       	subi	r18, 0xFF	; 255
    24bc:	3f 4f       	sbci	r19, 0xFF	; 255
    24be:	31 83       	std	Z+1, r19	; 0x01
    24c0:	20 83       	st	Z, r18
    24c2:	8c 93       	st	X, r24
    24c4:	26 81       	ldd	r18, Z+6	; 0x06
    24c6:	37 81       	ldd	r19, Z+7	; 0x07
    24c8:	2f 5f       	subi	r18, 0xFF	; 255
    24ca:	3f 4f       	sbci	r19, 0xFF	; 255
    24cc:	37 83       	std	Z+7, r19	; 0x07
    24ce:	26 83       	std	Z+6, r18	; 0x06
    24d0:	10 c0       	rjmp	.+32     	; 0x24f2 <fputc+0x66>
    24d2:	eb 01       	movw	r28, r22
    24d4:	09 2f       	mov	r16, r25
    24d6:	18 2f       	mov	r17, r24
    24d8:	00 84       	ldd	r0, Z+8	; 0x08
    24da:	f1 85       	ldd	r31, Z+9	; 0x09
    24dc:	e0 2d       	mov	r30, r0
    24de:	19 95       	eicall
    24e0:	89 2b       	or	r24, r25
    24e2:	e1 f6       	brne	.-72     	; 0x249c <fputc+0x10>
    24e4:	8e 81       	ldd	r24, Y+6	; 0x06
    24e6:	9f 81       	ldd	r25, Y+7	; 0x07
    24e8:	01 96       	adiw	r24, 0x01	; 1
    24ea:	9f 83       	std	Y+7, r25	; 0x07
    24ec:	8e 83       	std	Y+6, r24	; 0x06
    24ee:	81 2f       	mov	r24, r17
    24f0:	90 2f       	mov	r25, r16
    24f2:	df 91       	pop	r29
    24f4:	cf 91       	pop	r28
    24f6:	1f 91       	pop	r17
    24f8:	0f 91       	pop	r16
    24fa:	08 95       	ret

000024fc <__ultoa_invert>:
    24fc:	fa 01       	movw	r30, r20
    24fe:	aa 27       	eor	r26, r26
    2500:	28 30       	cpi	r18, 0x08	; 8
    2502:	51 f1       	breq	.+84     	; 0x2558 <__ultoa_invert+0x5c>
    2504:	20 31       	cpi	r18, 0x10	; 16
    2506:	81 f1       	breq	.+96     	; 0x2568 <__ultoa_invert+0x6c>
    2508:	e8 94       	clt
    250a:	6f 93       	push	r22
    250c:	6e 7f       	andi	r22, 0xFE	; 254
    250e:	6e 5f       	subi	r22, 0xFE	; 254
    2510:	7f 4f       	sbci	r23, 0xFF	; 255
    2512:	8f 4f       	sbci	r24, 0xFF	; 255
    2514:	9f 4f       	sbci	r25, 0xFF	; 255
    2516:	af 4f       	sbci	r26, 0xFF	; 255
    2518:	b1 e0       	ldi	r27, 0x01	; 1
    251a:	3e d0       	rcall	.+124    	; 0x2598 <__ultoa_invert+0x9c>
    251c:	b4 e0       	ldi	r27, 0x04	; 4
    251e:	3c d0       	rcall	.+120    	; 0x2598 <__ultoa_invert+0x9c>
    2520:	67 0f       	add	r22, r23
    2522:	78 1f       	adc	r23, r24
    2524:	89 1f       	adc	r24, r25
    2526:	9a 1f       	adc	r25, r26
    2528:	a1 1d       	adc	r26, r1
    252a:	68 0f       	add	r22, r24
    252c:	79 1f       	adc	r23, r25
    252e:	8a 1f       	adc	r24, r26
    2530:	91 1d       	adc	r25, r1
    2532:	a1 1d       	adc	r26, r1
    2534:	6a 0f       	add	r22, r26
    2536:	71 1d       	adc	r23, r1
    2538:	81 1d       	adc	r24, r1
    253a:	91 1d       	adc	r25, r1
    253c:	a1 1d       	adc	r26, r1
    253e:	20 d0       	rcall	.+64     	; 0x2580 <__ultoa_invert+0x84>
    2540:	09 f4       	brne	.+2      	; 0x2544 <__ultoa_invert+0x48>
    2542:	68 94       	set
    2544:	3f 91       	pop	r19
    2546:	2a e0       	ldi	r18, 0x0A	; 10
    2548:	26 9f       	mul	r18, r22
    254a:	11 24       	eor	r1, r1
    254c:	30 19       	sub	r19, r0
    254e:	30 5d       	subi	r19, 0xD0	; 208
    2550:	31 93       	st	Z+, r19
    2552:	de f6       	brtc	.-74     	; 0x250a <__ultoa_invert+0xe>
    2554:	cf 01       	movw	r24, r30
    2556:	08 95       	ret
    2558:	46 2f       	mov	r20, r22
    255a:	47 70       	andi	r20, 0x07	; 7
    255c:	40 5d       	subi	r20, 0xD0	; 208
    255e:	41 93       	st	Z+, r20
    2560:	b3 e0       	ldi	r27, 0x03	; 3
    2562:	0f d0       	rcall	.+30     	; 0x2582 <__ultoa_invert+0x86>
    2564:	c9 f7       	brne	.-14     	; 0x2558 <__ultoa_invert+0x5c>
    2566:	f6 cf       	rjmp	.-20     	; 0x2554 <__ultoa_invert+0x58>
    2568:	46 2f       	mov	r20, r22
    256a:	4f 70       	andi	r20, 0x0F	; 15
    256c:	40 5d       	subi	r20, 0xD0	; 208
    256e:	4a 33       	cpi	r20, 0x3A	; 58
    2570:	18 f0       	brcs	.+6      	; 0x2578 <__ultoa_invert+0x7c>
    2572:	49 5d       	subi	r20, 0xD9	; 217
    2574:	31 fd       	sbrc	r19, 1
    2576:	40 52       	subi	r20, 0x20	; 32
    2578:	41 93       	st	Z+, r20
    257a:	02 d0       	rcall	.+4      	; 0x2580 <__ultoa_invert+0x84>
    257c:	a9 f7       	brne	.-22     	; 0x2568 <__ultoa_invert+0x6c>
    257e:	ea cf       	rjmp	.-44     	; 0x2554 <__ultoa_invert+0x58>
    2580:	b4 e0       	ldi	r27, 0x04	; 4
    2582:	a6 95       	lsr	r26
    2584:	97 95       	ror	r25
    2586:	87 95       	ror	r24
    2588:	77 95       	ror	r23
    258a:	67 95       	ror	r22
    258c:	ba 95       	dec	r27
    258e:	c9 f7       	brne	.-14     	; 0x2582 <__ultoa_invert+0x86>
    2590:	00 97       	sbiw	r24, 0x00	; 0
    2592:	61 05       	cpc	r22, r1
    2594:	71 05       	cpc	r23, r1
    2596:	08 95       	ret
    2598:	9b 01       	movw	r18, r22
    259a:	ac 01       	movw	r20, r24
    259c:	0a 2e       	mov	r0, r26
    259e:	06 94       	lsr	r0
    25a0:	57 95       	ror	r21
    25a2:	47 95       	ror	r20
    25a4:	37 95       	ror	r19
    25a6:	27 95       	ror	r18
    25a8:	ba 95       	dec	r27
    25aa:	c9 f7       	brne	.-14     	; 0x259e <__ultoa_invert+0xa2>
    25ac:	62 0f       	add	r22, r18
    25ae:	73 1f       	adc	r23, r19
    25b0:	84 1f       	adc	r24, r20
    25b2:	95 1f       	adc	r25, r21
    25b4:	a0 1d       	adc	r26, r0
    25b6:	08 95       	ret

000025b8 <_exit>:
    25b8:	f8 94       	cli

000025ba <__stop_program>:
    25ba:	ff cf       	rjmp	.-2      	; 0x25ba <__stop_program>
