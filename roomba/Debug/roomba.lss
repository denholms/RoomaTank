
roomba.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800200  0000256e  00002602  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000256e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001324  00800236  00800236  00002638  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002638  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002694  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000458  00000000  00000000  000026d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005a11  00000000  00000000  00002b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001585  00000000  00000000  00008541  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002985  00000000  00000000  00009ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b44  00000000  00000000  0000c44c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001253  00000000  00000000  0000cf90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002bb3  00000000  00000000  0000e1e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000460  00000000  00000000  00010d96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c0       	rjmp	.+252    	; 0xfe <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 d2 0d 	jmp	0x1ba4	; 0x1ba4 <__vector_1>
       8:	9b c0       	rjmp	.+310    	; 0x140 <__bad_interrupt>
       a:	00 00       	nop
       c:	99 c0       	rjmp	.+306    	; 0x140 <__bad_interrupt>
       e:	00 00       	nop
      10:	97 c0       	rjmp	.+302    	; 0x140 <__bad_interrupt>
      12:	00 00       	nop
      14:	95 c0       	rjmp	.+298    	; 0x140 <__bad_interrupt>
      16:	00 00       	nop
      18:	93 c0       	rjmp	.+294    	; 0x140 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	91 c0       	rjmp	.+290    	; 0x140 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8f c0       	rjmp	.+286    	; 0x140 <__bad_interrupt>
      22:	00 00       	nop
      24:	8d c0       	rjmp	.+282    	; 0x140 <__bad_interrupt>
      26:	00 00       	nop
      28:	8b c0       	rjmp	.+278    	; 0x140 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	89 c0       	rjmp	.+274    	; 0x140 <__bad_interrupt>
      2e:	00 00       	nop
      30:	87 c0       	rjmp	.+270    	; 0x140 <__bad_interrupt>
      32:	00 00       	nop
      34:	85 c0       	rjmp	.+266    	; 0x140 <__bad_interrupt>
      36:	00 00       	nop
      38:	83 c0       	rjmp	.+262    	; 0x140 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	81 c0       	rjmp	.+258    	; 0x140 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7f c0       	rjmp	.+254    	; 0x140 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 a0 0a 	jmp	0x1540	; 0x1540 <__vector_17>
      48:	7b c0       	rjmp	.+246    	; 0x140 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	79 c0       	rjmp	.+242    	; 0x140 <__bad_interrupt>
      4e:	00 00       	nop
      50:	77 c0       	rjmp	.+238    	; 0x140 <__bad_interrupt>
      52:	00 00       	nop
      54:	75 c0       	rjmp	.+234    	; 0x140 <__bad_interrupt>
      56:	00 00       	nop
      58:	73 c0       	rjmp	.+230    	; 0x140 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	71 c0       	rjmp	.+226    	; 0x140 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6f c0       	rjmp	.+222    	; 0x140 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 31 0f 	jmp	0x1e62	; 0x1e62 <__vector_25>
      68:	6b c0       	rjmp	.+214    	; 0x140 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	69 c0       	rjmp	.+210    	; 0x140 <__bad_interrupt>
      6e:	00 00       	nop
      70:	67 c0       	rjmp	.+206    	; 0x140 <__bad_interrupt>
      72:	00 00       	nop
      74:	65 c0       	rjmp	.+202    	; 0x140 <__bad_interrupt>
      76:	00 00       	nop
      78:	63 c0       	rjmp	.+198    	; 0x140 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	61 c0       	rjmp	.+194    	; 0x140 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <__vector_32>
      84:	5d c0       	rjmp	.+186    	; 0x140 <__bad_interrupt>
      86:	00 00       	nop
      88:	5b c0       	rjmp	.+182    	; 0x140 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	59 c0       	rjmp	.+178    	; 0x140 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 62 0f 	jmp	0x1ec4	; 0x1ec4 <__vector_36>
      94:	55 c0       	rjmp	.+170    	; 0x140 <__bad_interrupt>
      96:	00 00       	nop
      98:	53 c0       	rjmp	.+166    	; 0x140 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	51 c0       	rjmp	.+162    	; 0x140 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4f c0       	rjmp	.+158    	; 0x140 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4d c0       	rjmp	.+154    	; 0x140 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4b c0       	rjmp	.+150    	; 0x140 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	49 c0       	rjmp	.+146    	; 0x140 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	47 c0       	rjmp	.+142    	; 0x140 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	45 c0       	rjmp	.+138    	; 0x140 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	43 c0       	rjmp	.+134    	; 0x140 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	41 c0       	rjmp	.+130    	; 0x140 <__bad_interrupt>
      be:	00 00       	nop
      c0:	3f c0       	rjmp	.+126    	; 0x140 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3d c0       	rjmp	.+122    	; 0x140 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3b c0       	rjmp	.+118    	; 0x140 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	39 c0       	rjmp	.+114    	; 0x140 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	37 c0       	rjmp	.+110    	; 0x140 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	35 c0       	rjmp	.+106    	; 0x140 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	33 c0       	rjmp	.+102    	; 0x140 <__bad_interrupt>
      da:	00 00       	nop
      dc:	31 c0       	rjmp	.+98     	; 0x140 <__bad_interrupt>
      de:	00 00       	nop
      e0:	2f c0       	rjmp	.+94     	; 0x140 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	65 06       	cpc	r6, r21
      e6:	4b 06       	cpc	r4, r27
      e8:	65 06       	cpc	r6, r21
      ea:	74 06       	cpc	r7, r20
      ec:	19 07       	cpc	r17, r25
      ee:	83 06       	cpc	r8, r19
      f0:	3c 06       	cpc	r3, r28
      f2:	6c 07       	cpc	r22, r28
      f4:	a1 07       	cpc	r26, r17
      f6:	43 08       	sbc	r4, r3
      f8:	45 08       	sbc	r4, r5
      fa:	7b 08       	sbc	r7, r11
      fc:	f2 08       	sbc	r15, r2

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d1 e2       	ldi	r29, 0x21	; 33
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0c bf       	out	0x3c, r16	; 60

0000010e <__do_copy_data>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a0 e0       	ldi	r26, 0x00	; 0
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	ee e6       	ldi	r30, 0x6E	; 110
     116:	f5 e2       	ldi	r31, 0x25	; 37
     118:	00 e0       	ldi	r16, 0x00	; 0
     11a:	0b bf       	out	0x3b, r16	; 59
     11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x14>
     11e:	07 90       	elpm	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	a6 33       	cpi	r26, 0x36	; 54
     124:	b1 07       	cpc	r27, r17
     126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0x10>

00000128 <__do_clear_bss>:
     128:	25 e1       	ldi	r18, 0x15	; 21
     12a:	a6 e3       	ldi	r26, 0x36	; 54
     12c:	b2 e0       	ldi	r27, 0x02	; 2
     12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
     130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
     132:	aa 35       	cpi	r26, 0x5A	; 90
     134:	b2 07       	cpc	r27, r18
     136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>
     138:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <main>
     13c:	0c 94 b5 12 	jmp	0x256a	; 0x256a <_exit>

00000140 <__bad_interrupt>:
     140:	5f cf       	rjmp	.-322    	; 0x0 <__vectors>

00000142 <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
     142:	0f 92       	push	r0
     144:	1f 92       	push	r1
     146:	2f 92       	push	r2
     148:	3f 92       	push	r3
     14a:	4f 92       	push	r4
     14c:	5f 92       	push	r5
     14e:	6f 92       	push	r6
     150:	7f 92       	push	r7
     152:	8f 92       	push	r8
     154:	9f 92       	push	r9
     156:	af 92       	push	r10
     158:	bf 92       	push	r11
     15a:	cf 92       	push	r12
     15c:	df 92       	push	r13
     15e:	ef 92       	push	r14
     160:	ff 92       	push	r15
     162:	0f 93       	push	r16
     164:	1f 93       	push	r17
     166:	2f 93       	push	r18
     168:	3f 93       	push	r19
     16a:	4f 93       	push	r20
     16c:	5f 93       	push	r21
     16e:	6f 93       	push	r22
     170:	7f 93       	push	r23
     172:	8f 93       	push	r24
     174:	9f 93       	push	r25
     176:	af 93       	push	r26
     178:	bf 93       	push	r27
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	ef 93       	push	r30
     180:	ff 93       	push	r31
     182:	0f b7       	in	r16, 0x3f	; 63
     184:	0f 93       	push	r16
     186:	fc b7       	in	r31, 0x3c	; 60
     188:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
     18a:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     18c:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
     18e:	e0 93 57 15 	sts	0x1557, r30
        sts  KernelSp+1, r31
     192:	f0 93 58 15 	sts	0x1558, r31
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
     196:	e0 91 35 15 	lds	r30, 0x1535
        lds  r31, CurrentSp+1
     19a:	f0 91 36 15 	lds	r31, 0x1536
        out  SPL, r30
     19e:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     1a0:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
     1a2:	ff 91       	pop	r31
     1a4:	fc bf       	out	0x3c, r31	; 60
     1a6:	0f 91       	pop	r16
     1a8:	0f bf       	out	0x3f, r16	; 63
     1aa:	ff 91       	pop	r31
     1ac:	ef 91       	pop	r30
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	bf 91       	pop	r27
     1b4:	af 91       	pop	r26
     1b6:	9f 91       	pop	r25
     1b8:	8f 91       	pop	r24
     1ba:	7f 91       	pop	r23
     1bc:	6f 91       	pop	r22
     1be:	5f 91       	pop	r21
     1c0:	4f 91       	pop	r20
     1c2:	3f 91       	pop	r19
     1c4:	2f 91       	pop	r18
     1c6:	1f 91       	pop	r17
     1c8:	0f 91       	pop	r16
     1ca:	ff 90       	pop	r15
     1cc:	ef 90       	pop	r14
     1ce:	df 90       	pop	r13
     1d0:	cf 90       	pop	r12
     1d2:	bf 90       	pop	r11
     1d4:	af 90       	pop	r10
     1d6:	9f 90       	pop	r9
     1d8:	8f 90       	pop	r8
     1da:	7f 90       	pop	r7
     1dc:	6f 90       	pop	r6
     1de:	5f 90       	pop	r5
     1e0:	4f 90       	pop	r4
     1e2:	3f 90       	pop	r3
     1e4:	2f 90       	pop	r2
     1e6:	1f 90       	pop	r1
     1e8:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
     1ea:	18 95       	reti

000001ec <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
     1ec:	0f 92       	push	r0
     1ee:	1f 92       	push	r1
     1f0:	2f 92       	push	r2
     1f2:	3f 92       	push	r3
     1f4:	4f 92       	push	r4
     1f6:	5f 92       	push	r5
     1f8:	6f 92       	push	r6
     1fa:	7f 92       	push	r7
     1fc:	8f 92       	push	r8
     1fe:	9f 92       	push	r9
     200:	af 92       	push	r10
     202:	bf 92       	push	r11
     204:	cf 92       	push	r12
     206:	df 92       	push	r13
     208:	ef 92       	push	r14
     20a:	ff 92       	push	r15
     20c:	0f 93       	push	r16
     20e:	1f 93       	push	r17
     210:	2f 93       	push	r18
     212:	3f 93       	push	r19
     214:	4f 93       	push	r20
     216:	5f 93       	push	r21
     218:	6f 93       	push	r22
     21a:	7f 93       	push	r23
     21c:	8f 93       	push	r24
     21e:	9f 93       	push	r25
     220:	af 93       	push	r26
     222:	bf 93       	push	r27
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	ef 93       	push	r30
     22a:	ff 93       	push	r31
     22c:	0f b7       	in	r16, 0x3f	; 63
     22e:	0f 93       	push	r16
     230:	fc b7       	in	r31, 0x3c	; 60
     232:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
     234:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     236:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
     238:	e0 93 35 15 	sts	0x1535, r30
        sts  CurrentSp+1, r31
     23c:	f0 93 36 15 	sts	0x1536, r31
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
     240:	e0 91 57 15 	lds	r30, 0x1557
        lds  r31, KernelSp+1
     244:	f0 91 58 15 	lds	r31, 0x1558
        out  SPL, r30
     248:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     24a:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
     24c:	ff 91       	pop	r31
     24e:	fc bf       	out	0x3c, r31	; 60
     250:	0f 91       	pop	r16
     252:	0f bf       	out	0x3f, r16	; 63
     254:	ff 91       	pop	r31
     256:	ef 91       	pop	r30
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	bf 91       	pop	r27
     25e:	af 91       	pop	r26
     260:	9f 91       	pop	r25
     262:	8f 91       	pop	r24
     264:	7f 91       	pop	r23
     266:	6f 91       	pop	r22
     268:	5f 91       	pop	r21
     26a:	4f 91       	pop	r20
     26c:	3f 91       	pop	r19
     26e:	2f 91       	pop	r18
     270:	1f 91       	pop	r17
     272:	0f 91       	pop	r16
     274:	ff 90       	pop	r15
     276:	ef 90       	pop	r14
     278:	df 90       	pop	r13
     27a:	cf 90       	pop	r12
     27c:	bf 90       	pop	r11
     27e:	af 90       	pop	r10
     280:	9f 90       	pop	r9
     282:	8f 90       	pop	r8
     284:	7f 90       	pop	r7
     286:	6f 90       	pop	r6
     288:	5f 90       	pop	r5
     28a:	4f 90       	pop	r4
     28c:	3f 90       	pop	r3
     28e:	2f 90       	pop	r2
     290:	1f 90       	pop	r1
     292:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
     294:	08 95       	ret

00000296 <adc_init>:

// initialize adc
void adc_init()
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
     296:	80 e4       	ldi	r24, 0x40	; 64
     298:	80 93 7c 00 	sts	0x007C, r24
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     29c:	87 e8       	ldi	r24, 0x87	; 135
     29e:	80 93 7a 00 	sts	0x007A, r24
     2a2:	08 95       	ret

000002a4 <adc_read>:
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     2a4:	ec e7       	ldi	r30, 0x7C	; 124
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	90 81       	ld	r25, Z
uint16_t adc_read(uint8_t ch)
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
     2aa:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     2ac:	98 7f       	andi	r25, 0xF8	; 248
     2ae:	89 2b       	or	r24, r25
     2b0:	80 83       	st	Z, r24
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
     2b2:	ea e7       	ldi	r30, 0x7A	; 122
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	80 81       	ld	r24, Z
     2b8:	80 64       	ori	r24, 0x40	; 64
     2ba:	80 83       	st	Z, r24
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
     2bc:	80 81       	ld	r24, Z
     2be:	86 fd       	sbrc	r24, 6
     2c0:	fd cf       	rjmp	.-6      	; 0x2bc <adc_read+0x18>
	
	return (ADC);
     2c2:	80 91 78 00 	lds	r24, 0x0078
     2c6:	90 91 79 00 	lds	r25, 0x0079
}
     2ca:	08 95       	ret

000002cc <radio_rxhandler>:
	return 0;
}

void radio_rxhandler(uint8_t pipenumber)
{
	rxflag = 1;
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	80 93 36 02 	sts	0x0236, r24
	PORTL ^= _BV(PL7);
     2d2:	eb e0       	ldi	r30, 0x0B	; 11
     2d4:	f1 e0       	ldi	r31, 0x01	; 1
     2d6:	80 81       	ld	r24, Z
     2d8:	80 58       	subi	r24, 0x80	; 128
     2da:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2dc:	83 ed       	ldi	r24, 0xD3	; 211
     2de:	90 e3       	ldi	r25, 0x30	; 48
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <radio_rxhandler+0x14>
     2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <radio_rxhandler+0x1a>
     2e6:	00 00       	nop
	_delay_ms(50);
	PORTL ^= _BV(PL7);
     2e8:	80 81       	ld	r24, Z
     2ea:	80 58       	subi	r24, 0x80	; 128
     2ec:	80 83       	st	Z, r24
     2ee:	08 95       	ret

000002f0 <lcd_nibble>:

void lcd_blank( uint8_t len )                   // blank n digits
{
  while( len-- )
    lcd_putchar( ' ' );
}
     2f0:	e2 e0       	ldi	r30, 0x02	; 2
     2f2:	f1 e0       	ldi	r31, 0x01	; 1
     2f4:	90 81       	ld	r25, Z
     2f6:	9f 7e       	andi	r25, 0xEF	; 239
     2f8:	90 83       	st	Z, r25
     2fa:	88 23       	and	r24, r24
     2fc:	1c f4       	brge	.+6      	; 0x304 <lcd_nibble+0x14>
     2fe:	90 81       	ld	r25, Z
     300:	90 61       	ori	r25, 0x10	; 16
     302:	90 83       	st	Z, r25
     304:	e2 e0       	ldi	r30, 0x02	; 2
     306:	f1 e0       	ldi	r31, 0x01	; 1
     308:	90 81       	ld	r25, Z
     30a:	97 7f       	andi	r25, 0xF7	; 247
     30c:	90 83       	st	Z, r25
     30e:	86 ff       	sbrs	r24, 6
     310:	03 c0       	rjmp	.+6      	; 0x318 <lcd_nibble+0x28>
     312:	90 81       	ld	r25, Z
     314:	98 60       	ori	r25, 0x08	; 8
     316:	90 83       	st	Z, r25
     318:	73 98       	cbi	0x0e, 3	; 14
     31a:	85 fd       	sbrc	r24, 5
     31c:	73 9a       	sbi	0x0e, 3	; 14
     31e:	a5 98       	cbi	0x14, 5	; 20
     320:	84 fd       	sbrc	r24, 4
     322:	a5 9a       	sbi	0x14, 5	; 20
     324:	e2 e0       	ldi	r30, 0x02	; 2
     326:	f1 e0       	ldi	r31, 0x01	; 1
     328:	80 81       	ld	r24, Z
     32a:	80 64       	ori	r24, 0x40	; 64
     32c:	80 83       	st	Z, r24
     32e:	85 e0       	ldi	r24, 0x05	; 5
     330:	8a 95       	dec	r24
     332:	f1 f7       	brne	.-4      	; 0x330 <lcd_nibble+0x40>
     334:	00 00       	nop
     336:	80 81       	ld	r24, Z
     338:	8f 7b       	andi	r24, 0xBF	; 191
     33a:	80 83       	st	Z, r24
     33c:	08 95       	ret

0000033e <lcd_command>:
     33e:	cf 93       	push	r28
     340:	c8 2f       	mov	r28, r24
     342:	e2 e0       	ldi	r30, 0x02	; 2
     344:	f1 e0       	ldi	r31, 0x01	; 1
     346:	80 81       	ld	r24, Z
     348:	8f 7d       	andi	r24, 0xDF	; 223
     34a:	80 83       	st	Z, r24
     34c:	8c 2f       	mov	r24, r28
     34e:	d0 df       	rcall	.-96     	; 0x2f0 <lcd_nibble>
     350:	8c 2f       	mov	r24, r28
     352:	82 95       	swap	r24
     354:	80 7f       	andi	r24, 0xF0	; 240
     356:	cc df       	rcall	.-104    	; 0x2f0 <lcd_nibble>
     358:	87 ec       	ldi	r24, 0xC7	; 199
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	01 97       	sbiw	r24, 0x01	; 1
     35e:	f1 f7       	brne	.-4      	; 0x35c <lcd_command+0x1e>
     360:	00 c0       	rjmp	.+0      	; 0x362 <lcd_command+0x24>
     362:	00 00       	nop
     364:	c4 30       	cpi	r28, 0x04	; 4
     366:	18 f0       	brcs	.+6      	; 0x36e <lcd_command+0x30>
     368:	c0 38       	cpi	r28, 0x80	; 128
     36a:	50 f0       	brcs	.+20     	; 0x380 <lcd_command+0x42>
     36c:	07 c0       	rjmp	.+14     	; 0x37c <lcd_command+0x3e>
     36e:	8f e3       	ldi	r24, 0x3F	; 63
     370:	9f e1       	ldi	r25, 0x1F	; 31
     372:	01 97       	sbiw	r24, 0x01	; 1
     374:	f1 f7       	brne	.-4      	; 0x372 <lcd_command+0x34>
     376:	00 c0       	rjmp	.+0      	; 0x378 <lcd_command+0x3a>
     378:	00 00       	nop
     37a:	c0 e8       	ldi	r28, 0x80	; 128
     37c:	c0 93 00 02 	sts	0x0200, r28
     380:	cf 91       	pop	r28
     382:	08 95       	ret

00000384 <lcd_putchar>:
     384:	cf 93       	push	r28
     386:	c8 2f       	mov	r28, r24
     388:	e2 e0       	ldi	r30, 0x02	; 2
     38a:	f1 e0       	ldi	r31, 0x01	; 1
     38c:	80 81       	ld	r24, Z
     38e:	80 62       	ori	r24, 0x20	; 32
     390:	80 83       	st	Z, r24
     392:	8c 2f       	mov	r24, r28
     394:	ad df       	rcall	.-166    	; 0x2f0 <lcd_nibble>
     396:	8c 2f       	mov	r24, r28
     398:	82 95       	swap	r24
     39a:	80 7f       	andi	r24, 0xF0	; 240
     39c:	a9 df       	rcall	.-174    	; 0x2f0 <lcd_nibble>
     39e:	87 ec       	ldi	r24, 0xC7	; 199
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	01 97       	sbiw	r24, 0x01	; 1
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <lcd_putchar+0x1e>
     3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <lcd_putchar+0x24>
     3a8:	00 00       	nop
     3aa:	80 91 00 02 	lds	r24, 0x0200
     3ae:	8f 5f       	subi	r24, 0xFF	; 255
     3b0:	80 93 00 02 	sts	0x0200, r24
     3b4:	80 39       	cpi	r24, 0x90	; 144
     3b6:	21 f0       	breq	.+8      	; 0x3c0 <lcd_putchar+0x3c>
     3b8:	80 3d       	cpi	r24, 0xD0	; 208
     3ba:	21 f4       	brne	.+8      	; 0x3c4 <lcd_putchar+0x40>
     3bc:	80 e8       	ldi	r24, 0x80	; 128
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <lcd_putchar+0x3e>
     3c0:	80 ec       	ldi	r24, 0xC0	; 192
     3c2:	bd df       	rcall	.-134    	; 0x33e <lcd_command>
     3c4:	cf 91       	pop	r28
     3c6:	08 95       	ret

000003c8 <lcd_puts>:
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	ec 01       	movw	r28, r24
     3ce:	88 81       	ld	r24, Y
     3d0:	88 23       	and	r24, r24
     3d2:	29 f0       	breq	.+10     	; 0x3de <lcd_puts+0x16>
     3d4:	21 96       	adiw	r28, 0x01	; 1
     3d6:	d6 df       	rcall	.-84     	; 0x384 <lcd_putchar>
     3d8:	89 91       	ld	r24, Y+
     3da:	81 11       	cpse	r24, r1
     3dc:	fc cf       	rjmp	.-8      	; 0x3d6 <lcd_puts+0xe>
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	08 95       	ret

000003e4 <lcd_init>:


void lcd_init( void )
{
  LCD_DDR_D4 = 1;                               // enable output pins
     3e4:	9d 9a       	sbi	0x13, 5	; 19
  LCD_DDR_D5 = 1;
     3e6:	6b 9a       	sbi	0x0d, 3	; 13
  LCD_DDR_D6 = 1;
     3e8:	e1 e0       	ldi	r30, 0x01	; 1
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	80 81       	ld	r24, Z
     3ee:	88 60       	ori	r24, 0x08	; 8
     3f0:	80 83       	st	Z, r24
  LCD_DDR_D7 = 1;
     3f2:	80 81       	ld	r24, Z
     3f4:	80 61       	ori	r24, 0x10	; 16
     3f6:	80 83       	st	Z, r24
  LCD_DDR_RS = 1;
     3f8:	80 81       	ld	r24, Z
     3fa:	80 62       	ori	r24, 0x20	; 32
     3fc:	80 83       	st	Z, r24
  LCD_DDR_E0 = 1;
     3fe:	80 81       	ld	r24, Z
     400:	80 64       	ori	r24, 0x40	; 64
     402:	80 83       	st	Z, r24
  LCD_E0 = 0;
     404:	e2 e0       	ldi	r30, 0x02	; 2
     406:	f1 e0       	ldi	r31, 0x01	; 1
     408:	80 81       	ld	r24, Z
     40a:	8f 7b       	andi	r24, 0xBF	; 191
     40c:	80 83       	st	Z, r24
  LCD_RS = 0;                                   // send commands
     40e:	80 81       	ld	r24, Z
     410:	8f 7d       	andi	r24, 0xDF	; 223
     412:	80 83       	st	Z, r24
     414:	8f e5       	ldi	r24, 0x5F	; 95
     416:	9a ee       	ldi	r25, 0xEA	; 234
     418:	01 97       	sbiw	r24, 0x01	; 1
     41a:	f1 f7       	brne	.-4      	; 0x418 <lcd_init+0x34>
     41c:	00 c0       	rjmp	.+0      	; 0x41e <lcd_init+0x3a>
     41e:	00 00       	nop

  _delay_ms( 15 );
  lcd_nibble( 0x30 );
     420:	80 e3       	ldi	r24, 0x30	; 48
     422:	66 df       	rcall	.-308    	; 0x2f0 <lcd_nibble>
     424:	8f e0       	ldi	r24, 0x0F	; 15
     426:	90 e4       	ldi	r25, 0x40	; 64
     428:	01 97       	sbiw	r24, 0x01	; 1
     42a:	f1 f7       	brne	.-4      	; 0x428 <lcd_init+0x44>
     42c:	00 c0       	rjmp	.+0      	; 0x42e <lcd_init+0x4a>
     42e:	00 00       	nop
  _delay_ms( 4.1 );
  lcd_nibble( 0x30 );
     430:	80 e3       	ldi	r24, 0x30	; 48
     432:	5e df       	rcall	.-324    	; 0x2f0 <lcd_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     434:	8f e8       	ldi	r24, 0x8F	; 143
     436:	91 e0       	ldi	r25, 0x01	; 1
     438:	01 97       	sbiw	r24, 0x01	; 1
     43a:	f1 f7       	brne	.-4      	; 0x438 <lcd_init+0x54>
     43c:	00 c0       	rjmp	.+0      	; 0x43e <lcd_init+0x5a>
     43e:	00 00       	nop
  _delay_us( 100 );
  lcd_nibble( 0x30 );
     440:	80 e3       	ldi	r24, 0x30	; 48
     442:	56 df       	rcall	.-340    	; 0x2f0 <lcd_nibble>
     444:	87 ec       	ldi	r24, 0xC7	; 199
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	01 97       	sbiw	r24, 0x01	; 1
     44a:	f1 f7       	brne	.-4      	; 0x448 <lcd_init+0x64>
     44c:	00 c0       	rjmp	.+0      	; 0x44e <lcd_init+0x6a>
     44e:	00 00       	nop
  _delay_us( LCD_TIME_DAT );
  lcd_nibble( 0x20 );                           // 4 bit mode
     450:	80 e2       	ldi	r24, 0x20	; 32
     452:	4e df       	rcall	.-356    	; 0x2f0 <lcd_nibble>
     454:	87 ec       	ldi	r24, 0xC7	; 199
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	01 97       	sbiw	r24, 0x01	; 1
     45a:	f1 f7       	brne	.-4      	; 0x458 <lcd_init+0x74>
     45c:	00 c0       	rjmp	.+0      	; 0x45e <lcd_init+0x7a>
     45e:	00 00       	nop
  _delay_us( LCD_TIME_DAT );
#if LCD_LINE == 1
  lcd_command( 0x20 );                          // 1 line
#else
  lcd_command( 0x28 );                          // 2 lines 5*7
     460:	88 e2       	ldi	r24, 0x28	; 40
     462:	6d df       	rcall	.-294    	; 0x33e <lcd_command>
#endif
  lcd_command( 0x08 );                          // display off
     464:	88 e0       	ldi	r24, 0x08	; 8
     466:	6b df       	rcall	.-298    	; 0x33e <lcd_command>
  lcd_command( 0x01 );                          // display clear
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	69 df       	rcall	.-302    	; 0x33e <lcd_command>
  lcd_command( 0x06 );                          // cursor increment
     46c:	86 e0       	ldi	r24, 0x06	; 6
     46e:	67 df       	rcall	.-306    	; 0x33e <lcd_command>
  lcd_command( 0x0C );                          // on, no cursor, no blink
     470:	8c e0       	ldi	r24, 0x0C	; 12
     472:	65 cf       	rjmp	.-310    	; 0x33e <lcd_command>
     474:	08 95       	ret

00000476 <init_LED_PORTL_pin0>:
void init_LED_PORTL_pin6(void) {
    DDRL |= _BV(DDL6);
}

void init_LED_PORTL_pin7(void) {
    DDRL |= _BV(DDL7);
     476:	ea e0       	ldi	r30, 0x0A	; 10
     478:	f1 e0       	ldi	r31, 0x01	; 1
     47a:	80 81       	ld	r24, Z
     47c:	81 60       	ori	r24, 0x01	; 1
     47e:	80 83       	st	Z, r24
     480:	08 95       	ret

00000482 <init_LED_PORTL_pin1>:
     482:	ea e0       	ldi	r30, 0x0A	; 10
     484:	f1 e0       	ldi	r31, 0x01	; 1
     486:	80 81       	ld	r24, Z
     488:	82 60       	ori	r24, 0x02	; 2
     48a:	80 83       	st	Z, r24
     48c:	08 95       	ret

0000048e <init_LED_PORTL_pin2>:
     48e:	ea e0       	ldi	r30, 0x0A	; 10
     490:	f1 e0       	ldi	r31, 0x01	; 1
     492:	80 81       	ld	r24, Z
     494:	84 60       	ori	r24, 0x04	; 4
     496:	80 83       	st	Z, r24
     498:	08 95       	ret

0000049a <init_LED_PORTL_pin5>:
     49a:	ea e0       	ldi	r30, 0x0A	; 10
     49c:	f1 e0       	ldi	r31, 0x01	; 1
     49e:	80 81       	ld	r24, Z
     4a0:	80 62       	ori	r24, 0x20	; 32
     4a2:	80 83       	st	Z, r24
     4a4:	08 95       	ret

000004a6 <init_LED_PORTL_pin6>:
     4a6:	ea e0       	ldi	r30, 0x0A	; 10
     4a8:	f1 e0       	ldi	r31, 0x01	; 1
     4aa:	80 81       	ld	r24, Z
     4ac:	80 64       	ori	r24, 0x40	; 64
     4ae:	80 83       	st	Z, r24
     4b0:	08 95       	ret

000004b2 <enable_LED>:
}

void enable_LED(unsigned int mask) {
    PORTL |= _BV(mask);
     4b2:	eb e0       	ldi	r30, 0x0B	; 11
     4b4:	f1 e0       	ldi	r31, 0x01	; 1
     4b6:	90 81       	ld	r25, Z
     4b8:	21 e0       	ldi	r18, 0x01	; 1
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <enable_LED+0x10>
     4be:	22 0f       	add	r18, r18
     4c0:	33 1f       	adc	r19, r19
     4c2:	8a 95       	dec	r24
     4c4:	e2 f7       	brpl	.-8      	; 0x4be <enable_LED+0xc>
     4c6:	29 2b       	or	r18, r25
     4c8:	20 83       	st	Z, r18
     4ca:	08 95       	ret

000004cc <disable_LED>:
}

void disable_LED(unsigned int mask) {
    PORTL &= ~_BV(mask);
     4cc:	eb e0       	ldi	r30, 0x0B	; 11
     4ce:	f1 e0       	ldi	r31, 0x01	; 1
     4d0:	90 81       	ld	r25, Z
     4d2:	21 e0       	ldi	r18, 0x01	; 1
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <disable_LED+0x10>
     4d8:	22 0f       	add	r18, r18
     4da:	33 1f       	adc	r19, r19
     4dc:	8a 95       	dec	r24
     4de:	e2 f7       	brpl	.-8      	; 0x4d8 <disable_LED+0xc>
     4e0:	20 95       	com	r18
     4e2:	29 23       	and	r18, r25
     4e4:	20 83       	st	Z, r18
     4e6:	08 95       	ret

000004e8 <Poll_Joystick>:
	uart_putchar(13,ROOMBA_UART);
	_delay_ms(200);
	
}

void Read_Roomba_Data(){
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
     4ec:	cd b7       	in	r28, 0x3d	; 61
     4ee:	de b7       	in	r29, 0x3e	; 62
     4f0:	67 97       	sbiw	r28, 0x17	; 23
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	f8 94       	cli
     4f6:	de bf       	out	0x3e, r29	; 62
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	cd bf       	out	0x3d, r28	; 61
     4fc:	0f 2e       	mov	r0, r31
     4fe:	fb e1       	ldi	r31, 0x1B	; 27
     500:	ef 2e       	mov	r14, r31
     502:	f2 e0       	ldi	r31, 0x02	; 2
     504:	ff 2e       	mov	r15, r31
     506:	f0 2d       	mov	r31, r0
     508:	8e 01       	movw	r16, r28
     50a:	0f 5f       	subi	r16, 0xFF	; 255
     50c:	1f 4f       	sbci	r17, 0xFF	; 255
     50e:	0f 2e       	mov	r0, r31
     510:	ff e0       	ldi	r31, 0x0F	; 15
     512:	8f 2e       	mov	r8, r31
     514:	f2 e0       	ldi	r31, 0x02	; 2
     516:	9f 2e       	mov	r9, r31
     518:	f0 2d       	mov	r31, r0
     51a:	6e 01       	movw	r12, r28
     51c:	21 e1       	ldi	r18, 0x11	; 17
     51e:	c2 0e       	add	r12, r18
     520:	d1 1c       	adc	r13, r1
     522:	87 e0       	ldi	r24, 0x07	; 7
     524:	bf de       	rcall	.-642    	; 0x2a4 <adc_read>
     526:	b8 2e       	mov	r11, r24
     528:	a9 2e       	mov	r10, r25
     52a:	85 e0       	ldi	r24, 0x05	; 5
     52c:	bb de       	rcall	.-650    	; 0x2a4 <adc_read>
     52e:	78 2e       	mov	r7, r24
     530:	69 2e       	mov	r6, r25
     532:	80 e8       	ldi	r24, 0x80	; 128
     534:	04 df       	rcall	.-504    	; 0x33e <lcd_command>
     536:	61 e0       	ldi	r22, 0x01	; 1
     538:	70 e0       	ldi	r23, 0x00	; 0
     53a:	87 e1       	ldi	r24, 0x17	; 23
     53c:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <uart_putchar>
     540:	af 92       	push	r10
     542:	bf 92       	push	r11
     544:	ff 92       	push	r15
     546:	ef 92       	push	r14
     548:	1f 93       	push	r17
     54a:	0f 93       	push	r16
     54c:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <sprintf>
     550:	c8 01       	movw	r24, r16
     552:	3a df       	rcall	.-396    	; 0x3c8 <lcd_puts>
     554:	80 ec       	ldi	r24, 0xC0	; 192
     556:	f3 de       	rcall	.-538    	; 0x33e <lcd_command>
     558:	6f 92       	push	r6
     55a:	7f 92       	push	r7
     55c:	ff 92       	push	r15
     55e:	ef 92       	push	r14
     560:	1f 93       	push	r17
     562:	0f 93       	push	r16
     564:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <sprintf>
     568:	c8 01       	movw	r24, r16
     56a:	2e df       	rcall	.-420    	; 0x3c8 <lcd_puts>
     56c:	6f 92       	push	r6
     56e:	7f 92       	push	r7
     570:	af 92       	push	r10
     572:	bf 92       	push	r11
     574:	9f 92       	push	r9
     576:	8f 92       	push	r8
     578:	df 92       	push	r13
     57a:	cf 92       	push	r12
     57c:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <sprintf>
     580:	61 e0       	ldi	r22, 0x01	; 1
     582:	70 e0       	ldi	r23, 0x00	; 0
     584:	c6 01       	movw	r24, r12
     586:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <uart_send_string>
     58a:	8f ef       	ldi	r24, 0xFF	; 255
     58c:	99 ef       	ldi	r25, 0xF9	; 249
     58e:	20 e0       	ldi	r18, 0x00	; 0
     590:	81 50       	subi	r24, 0x01	; 1
     592:	90 40       	sbci	r25, 0x00	; 0
     594:	20 40       	sbci	r18, 0x00	; 0
     596:	e1 f7       	brne	.-8      	; 0x590 <Poll_Joystick+0xa8>
     598:	00 c0       	rjmp	.+0      	; 0x59a <Poll_Joystick+0xb2>
     59a:	00 00       	nop
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	de bf       	out	0x3e, r29	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	cd bf       	out	0x3d, r28	; 61
     5a6:	bd cf       	rjmp	.-134    	; 0x522 <Poll_Joystick+0x3a>

000005a8 <a_main>:
	
}

// Application level main function
// Creates the required tasks and then terminates
void a_main() {
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
     5b4:	60 97       	sbiw	r28, 0x10	; 16
     5b6:	0f b6       	in	r0, 0x3f	; 63
     5b8:	f8 94       	cli
     5ba:	de bf       	out	0x3e, r29	; 62
     5bc:	0f be       	out	0x3f, r0	; 63
     5be:	cd bf       	out	0x3d, r28	; 61
	char line[16];
	portL2_Mutex = Mutex_Init();
     5c0:	12 d7       	rcall	.+3620   	; 0x13e6 <Mutex_Init>
     5c2:	90 93 d0 14 	sts	0x14D0, r25
     5c6:	80 93 cf 14 	sts	0x14CF, r24
	portL6_Mutex = Mutex_Init();
     5ca:	0d d7       	rcall	.+3610   	; 0x13e6 <Mutex_Init>
     5cc:	90 93 f0 14 	sts	0x14F0, r25
     5d0:	80 93 ef 14 	sts	0x14EF, r24
	unsigned char jsBtn;
	
	
	e1 = Event_Init();
     5d4:	23 d7       	rcall	.+3654   	; 0x141c <Event_Init>
     5d6:	90 93 f4 14 	sts	0x14F4, r25
     5da:	80 93 f3 14 	sts	0x14F3, r24
	e2 = Event_Init();
     5de:	1e d7       	rcall	.+3644   	; 0x141c <Event_Init>
     5e0:	90 93 d4 14 	sts	0x14D4, r25
     5e4:	80 93 d3 14 	sts	0x14D3, r24
	adc_init();
     5e8:	56 de       	rcall	.-852    	; 0x296 <adc_init>
	uint16_t adc_test = adc_read(7);
     5ea:	87 e0       	ldi	r24, 0x07	; 7
     5ec:	5b de       	rcall	.-842    	; 0x2a4 <adc_read>
     5ee:	8c 01       	movw	r16, r24
	//PongPID = Task_Create(Pong, 8, 1);
	//PingPID = Task_Create(Ping, 8, 1);
	//IdlePID = Task_Create(Idle, MINPRIORITY, 1);
	lcd_init(); // initialized the LCD
     5f0:	f9 de       	rcall	.-526    	; 0x3e4 <lcd_init>
	lcd_xy(0,0);
     5f2:	80 e8       	ldi	r24, 0x80	; 128
     5f4:	a4 de       	rcall	.-696    	; 0x33e <lcd_command>
	DDRB |= (1<<DDB4); // enable output mode of Digital Pin 10 (PORTB Pin 4) for backlit control
     5f6:	24 9a       	sbi	0x04, 4	; 4
	PORTB |= (1<<DDB4); // enable back light
     5f8:	2c 9a       	sbi	0x05, 4	; 5
	itoa(adc_test, jsBtn);
     5fa:	60 e0       	ldi	r22, 0x00	; 0
     5fc:	70 e0       	ldi	r23, 0x00	; 0
     5fe:	c8 01       	movw	r24, r16
     600:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <itoa>
	//sprintf(line, "ADC:%2d", adc_test);
	lcd_puts(line);
     604:	ce 01       	movw	r24, r28
     606:	01 96       	adiw	r24, 0x01	; 1
     608:	df de       	rcall	.-578    	; 0x3c8 <lcd_puts>
	//lcd_xy(0,1);
	//sprintf(line, "Laser: %s", jsBtn);
	//lcd_puts(line);
	Roomba_Init();
     60a:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <Roomba_Init>
	


	
	
    InitPID = Task_Create(Poll_Joystick,0,1);
     60e:	41 e0       	ldi	r20, 0x01	; 1
     610:	50 e0       	ldi	r21, 0x00	; 0
     612:	60 e0       	ldi	r22, 0x00	; 0
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	84 e7       	ldi	r24, 0x74	; 116
     618:	92 e0       	ldi	r25, 0x02	; 2
     61a:	1b d7       	rcall	.+3638   	; 0x1452 <Task_Create>
     61c:	90 93 f2 14 	sts	0x14F2, r25
     620:	80 93 f1 14 	sts	0x14F1, r24
	//DrivePID = Task_Create(Init_Drive, 8, 1);
	//IdlePID = Task_Create(Idle, 8, 1);
	Task_Terminate();
     624:	0b d0       	rcall	.+22     	; 0x63c <Task_Terminate>
}
     626:	60 96       	adiw	r28, 0x10	; 16
     628:	0f b6       	in	r0, 0x3f	; 63
     62a:	f8 94       	cli
     62c:	de bf       	out	0x3e, r29	; 62
     62e:	0f be       	out	0x3f, r0	; 63
     630:	cd bf       	out	0x3d, r28	; 61
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	1f 91       	pop	r17
     638:	0f 91       	pop	r16
     63a:	08 95       	ret

0000063c <Task_Terminate>:
/**
  * Application level task getarg to return intiial arg value
  */
int Task_GetArg(PID p) {
	return (Cp->arg);
}
     63c:	80 91 47 02 	lds	r24, 0x0247
     640:	90 91 48 02 	lds	r25, 0x0248
     644:	89 2b       	or	r24, r25
     646:	51 f0       	breq	.+20     	; 0x65c <Task_Terminate+0x20>
     648:	f8 94       	cli
     64a:	e0 91 49 02 	lds	r30, 0x0249
     64e:	f0 91 4a 02 	lds	r31, 0x024A
     652:	e3 5f       	subi	r30, 0xF3	; 243
     654:	fe 4f       	sbci	r31, 0xFE	; 254
     656:	84 e0       	ldi	r24, 0x04	; 4
     658:	80 83       	st	Z, r24
     65a:	c8 cd       	rjmp	.-1136   	; 0x1ec <Enter_Kernel>
     65c:	08 95       	ret

0000065e <Kernel_Create_Task_At>:
     65e:	ef 92       	push	r14
     660:	ff 92       	push	r15
     662:	0f 93       	push	r16
     664:	1f 93       	push	r17
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
     66a:	1f 92       	push	r1
     66c:	1f 92       	push	r1
     66e:	cd b7       	in	r28, 0x3d	; 61
     670:	de b7       	in	r29, 0x3e	; 62
     672:	9a 83       	std	Y+2, r25	; 0x02
     674:	89 83       	std	Y+1, r24	; 0x01
     676:	dc 01       	movw	r26, r24
     678:	7c 01       	movw	r14, r24
     67a:	04 e0       	ldi	r16, 0x04	; 4
     67c:	e0 0e       	add	r14, r16
     67e:	f1 1c       	adc	r15, r1
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	91 e0       	ldi	r25, 0x01	; 1
     684:	f7 01       	movw	r30, r14
     686:	8c 01       	movw	r16, r24
     688:	11 92       	st	Z+, r1
     68a:	01 50       	subi	r16, 0x01	; 1
     68c:	10 40       	sbci	r17, 0x00	; 0
     68e:	e1 f7       	brne	.-8      	; 0x688 <Kernel_Create_Task_At+0x2a>
     690:	fd 01       	movw	r30, r26
     692:	ed 5f       	subi	r30, 0xFD	; 253
     694:	fe 4f       	sbci	r31, 0xFE	; 254
     696:	8e e1       	ldi	r24, 0x1E	; 30
     698:	93 e0       	ldi	r25, 0x03	; 3
     69a:	80 83       	st	Z, r24
     69c:	31 97       	sbiw	r30, 0x01	; 1
     69e:	90 83       	st	Z, r25
     6a0:	31 97       	sbiw	r30, 0x01	; 1
     6a2:	60 83       	st	Z, r22
     6a4:	31 97       	sbiw	r30, 0x01	; 1
     6a6:	70 83       	st	Z, r23
     6a8:	31 97       	sbiw	r30, 0x01	; 1
     6aa:	10 82       	st	Z, r1
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	92 93       	st	-Z, r25
     6b0:	9f 5f       	subi	r25, 0xFF	; 255
     6b2:	92 32       	cpi	r25, 0x22	; 34
     6b4:	e1 f7       	brne	.-8      	; 0x6ae <Kernel_Create_Task_At+0x50>
     6b6:	a4 52       	subi	r26, 0x24	; 36
     6b8:	bf 4f       	sbci	r27, 0xFF	; 255
     6ba:	e9 81       	ldd	r30, Y+1	; 0x01
     6bc:	fa 81       	ldd	r31, Y+2	; 0x02
     6be:	b3 83       	std	Z+3, r27	; 0x03
     6c0:	a2 83       	std	Z+2, r26	; 0x02
     6c2:	df 01       	movw	r26, r30
     6c4:	a5 5f       	subi	r26, 0xF5	; 245
     6c6:	be 4f       	sbci	r27, 0xFE	; 254
     6c8:	11 96       	adiw	r26, 0x01	; 1
     6ca:	7c 93       	st	X, r23
     6cc:	6e 93       	st	-X, r22
     6ce:	12 96       	adiw	r26, 0x02	; 2
     6d0:	1c 92       	st	X, r1
     6d2:	80 91 43 02 	lds	r24, 0x0243
     6d6:	90 91 44 02 	lds	r25, 0x0244
     6da:	91 83       	std	Z+1, r25	; 0x01
     6dc:	80 83       	st	Z, r24
     6de:	89 81       	ldd	r24, Y+1	; 0x01
     6e0:	9a 81       	ldd	r25, Y+2	; 0x02
     6e2:	fc 01       	movw	r30, r24
     6e4:	eb 5f       	subi	r30, 0xFB	; 251
     6e6:	fe 4f       	sbci	r31, 0xFE	; 254
     6e8:	51 83       	std	Z+1, r21	; 0x01
     6ea:	40 83       	st	Z, r20
     6ec:	32 96       	adiw	r30, 0x02	; 2
     6ee:	51 83       	std	Z+1, r21	; 0x01
     6f0:	40 83       	st	Z, r20
     6f2:	32 96       	adiw	r30, 0x02	; 2
     6f4:	31 83       	std	Z+1, r19	; 0x01
     6f6:	20 83       	st	Z, r18
     6f8:	71 96       	adiw	r30, 0x11	; 17
     6fa:	11 82       	std	Z+1, r1	; 0x01
     6fc:	10 82       	st	Z, r1
     6fe:	34 97       	sbiw	r30, 0x04	; 4
     700:	23 e6       	ldi	r18, 0x63	; 99
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	31 83       	std	Z+1, r19	; 0x01
     706:	20 83       	st	Z, r18
     708:	20 91 45 02 	lds	r18, 0x0245
     70c:	30 91 46 02 	lds	r19, 0x0246
     710:	2f 5f       	subi	r18, 0xFF	; 255
     712:	3f 4f       	sbci	r19, 0xFF	; 255
     714:	30 93 46 02 	sts	0x0246, r19
     718:	20 93 45 02 	sts	0x0245, r18
     71c:	20 91 43 02 	lds	r18, 0x0243
     720:	30 91 44 02 	lds	r19, 0x0244
     724:	2f 5f       	subi	r18, 0xFF	; 255
     726:	3f 4f       	sbci	r19, 0xFF	; 255
     728:	30 93 44 02 	sts	0x0244, r19
     72c:	20 93 43 02 	sts	0x0243, r18
     730:	72 97       	sbiw	r30, 0x12	; 18
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	80 83       	st	Z, r24
     736:	4b e3       	ldi	r20, 0x3B	; 59
     738:	52 e0       	ldi	r21, 0x02	; 2
     73a:	65 e1       	ldi	r22, 0x15	; 21
     73c:	75 e1       	ldi	r23, 0x15	; 21
     73e:	ce 01       	movw	r24, r28
     740:	01 96       	adiw	r24, 0x01	; 1
     742:	0e 94 28 0c 	call	0x1850	; 0x1850 <enqueueRQ>
     746:	e9 81       	ldd	r30, Y+1	; 0x01
     748:	fa 81       	ldd	r31, Y+2	; 0x02
     74a:	80 81       	ld	r24, Z
     74c:	91 81       	ldd	r25, Z+1	; 0x01
     74e:	0f 90       	pop	r0
     750:	0f 90       	pop	r0
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	1f 91       	pop	r17
     758:	0f 91       	pop	r16
     75a:	ff 90       	pop	r15
     75c:	ef 90       	pop	r14
     75e:	08 95       	ret

00000760 <Kernel_Create_Task>:
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
     764:	ec 01       	movw	r28, r24
     766:	80 91 45 02 	lds	r24, 0x0245
     76a:	90 91 46 02 	lds	r25, 0x0246
     76e:	40 97       	sbiw	r24, 0x10	; 16
     770:	21 f1       	breq	.+72     	; 0x7ba <Kernel_Create_Task+0x5a>
     772:	80 91 af 03 	lds	r24, 0x03AF
     776:	88 23       	and	r24, r24
     778:	71 f0       	breq	.+28     	; 0x796 <Kernel_Create_Task+0x36>
     77a:	ad ec       	ldi	r26, 0xCD	; 205
     77c:	b4 e0       	ldi	r27, 0x04	; 4
     77e:	e1 e0       	ldi	r30, 0x01	; 1
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	9c 91       	ld	r25, X
     784:	99 23       	and	r25, r25
     786:	49 f0       	breq	.+18     	; 0x79a <Kernel_Create_Task+0x3a>
     788:	31 96       	adiw	r30, 0x01	; 1
     78a:	a2 5e       	subi	r26, 0xE2	; 226
     78c:	be 4f       	sbci	r27, 0xFE	; 254
     78e:	e0 31       	cpi	r30, 0x10	; 16
     790:	f1 05       	cpc	r31, r1
     792:	b9 f7       	brne	.-18     	; 0x782 <Kernel_Create_Task+0x22>
     794:	02 c0       	rjmp	.+4      	; 0x79a <Kernel_Create_Task+0x3a>
     796:	e0 e0       	ldi	r30, 0x00	; 0
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	9a 01       	movw	r18, r20
     79c:	ab 01       	movw	r20, r22
     79e:	be 01       	movw	r22, r28
     7a0:	ae e1       	ldi	r26, 0x1E	; 30
     7a2:	b1 e0       	ldi	r27, 0x01	; 1
     7a4:	ea 9f       	mul	r30, r26
     7a6:	c0 01       	movw	r24, r0
     7a8:	eb 9f       	mul	r30, r27
     7aa:	90 0d       	add	r25, r0
     7ac:	fa 9f       	mul	r31, r26
     7ae:	90 0d       	add	r25, r0
     7b0:	11 24       	eor	r1, r1
     7b2:	85 55       	subi	r24, 0x55	; 85
     7b4:	9d 4f       	sbci	r25, 0xFD	; 253
     7b6:	53 df       	rcall	.-346    	; 0x65e <Kernel_Create_Task_At>
     7b8:	00 c0       	rjmp	.+0      	; 0x7ba <Kernel_Create_Task+0x5a>
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	08 95       	ret

000007c0 <Kernel_Init_Mutex_At>:
     7c0:	fc 01       	movw	r30, r24
     7c2:	80 91 41 02 	lds	r24, 0x0241
     7c6:	90 91 42 02 	lds	r25, 0x0242
     7ca:	91 83       	std	Z+1, r25	; 0x01
     7cc:	80 83       	st	Z, r24
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	82 83       	std	Z+2, r24	; 0x02
     7d2:	80 91 41 02 	lds	r24, 0x0241
     7d6:	90 91 42 02 	lds	r25, 0x0242
     7da:	01 96       	adiw	r24, 0x01	; 1
     7dc:	90 93 42 02 	sts	0x0242, r25
     7e0:	80 93 41 02 	sts	0x0241, r24
     7e4:	80 81       	ld	r24, Z
     7e6:	91 81       	ldd	r25, Z+1	; 0x01
     7e8:	08 95       	ret

000007ea <Kernel_Init_Event_At>:
     7ea:	fc 01       	movw	r30, r24
     7ec:	80 91 3f 02 	lds	r24, 0x023F
     7f0:	90 91 40 02 	lds	r25, 0x0240
     7f4:	91 83       	std	Z+1, r25	; 0x01
     7f6:	80 83       	st	Z, r24
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	82 83       	std	Z+2, r24	; 0x02
     7fc:	14 82       	std	Z+4, r1	; 0x04
     7fe:	13 82       	std	Z+3, r1	; 0x03
     800:	80 91 3f 02 	lds	r24, 0x023F
     804:	90 91 40 02 	lds	r25, 0x0240
     808:	01 96       	adiw	r24, 0x01	; 1
     80a:	90 93 40 02 	sts	0x0240, r25
     80e:	80 93 3f 02 	sts	0x023F, r24
     812:	80 81       	ld	r24, Z
     814:	91 81       	ldd	r25, Z+1	; 0x01
     816:	08 95       	ret

00000818 <OS_Init>:
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
     81c:	10 92 46 02 	sts	0x0246, r1
     820:	10 92 45 02 	sts	0x0245, r1
     824:	10 92 48 02 	sts	0x0248, r1
     828:	10 92 47 02 	sts	0x0247, r1
     82c:	10 92 42 02 	sts	0x0242, r1
     830:	10 92 41 02 	sts	0x0241, r1
     834:	10 92 40 02 	sts	0x0240, r1
     838:	10 92 3f 02 	sts	0x023F, r1
     83c:	10 92 44 02 	sts	0x0244, r1
     840:	10 92 43 02 	sts	0x0243, r1
     844:	eb ea       	ldi	r30, 0xAB	; 171
     846:	f2 e0       	ldi	r31, 0x02	; 2
     848:	af ea       	ldi	r26, 0xAF	; 175
     84a:	b3 e0       	ldi	r27, 0x03	; 3
     84c:	4b e8       	ldi	r20, 0x8B	; 139
     84e:	54 e1       	ldi	r21, 0x14	; 20
     850:	2e e1       	ldi	r18, 0x1E	; 30
     852:	31 e0       	ldi	r19, 0x01	; 1
     854:	83 e6       	ldi	r24, 0x63	; 99
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	ef 01       	movw	r28, r30
     85a:	b9 01       	movw	r22, r18
     85c:	19 92       	st	Y+, r1
     85e:	61 50       	subi	r22, 0x01	; 1
     860:	70 40       	sbci	r23, 0x00	; 0
     862:	e1 f7       	brne	.-8      	; 0x85c <OS_Init+0x44>
     864:	1c 92       	st	X, r1
     866:	53 96       	adiw	r26, 0x13	; 19
     868:	9c 93       	st	X, r25
     86a:	8e 93       	st	-X, r24
     86c:	52 97       	sbiw	r26, 0x12	; 18
     86e:	11 82       	std	Z+1, r1	; 0x01
     870:	10 82       	st	Z, r1
     872:	e2 5e       	subi	r30, 0xE2	; 226
     874:	fe 4f       	sbci	r31, 0xFE	; 254
     876:	a2 5e       	subi	r26, 0xE2	; 226
     878:	be 4f       	sbci	r27, 0xFE	; 254
     87a:	e4 17       	cp	r30, r20
     87c:	f5 07       	cpc	r31, r21
     87e:	61 f7       	brne	.-40     	; 0x858 <OS_Init+0x40>
     880:	e5 e7       	ldi	r30, 0x75	; 117
     882:	f2 e0       	ldi	r31, 0x02	; 2
     884:	2d ea       	ldi	r18, 0xAD	; 173
     886:	32 e0       	ldi	r19, 0x02	; 2
     888:	87 e0       	ldi	r24, 0x07	; 7
     88a:	df 01       	movw	r26, r30
     88c:	12 97       	sbiw	r26, 0x02	; 2
     88e:	ed 01       	movw	r28, r26
     890:	68 2f       	mov	r22, r24
     892:	19 92       	st	Y+, r1
     894:	6a 95       	dec	r22
     896:	e9 f7       	brne	.-6      	; 0x892 <OS_Init+0x7a>
     898:	10 82       	st	Z, r1
     89a:	37 96       	adiw	r30, 0x07	; 7
     89c:	e2 17       	cp	r30, r18
     89e:	f3 07       	cpc	r31, r19
     8a0:	a1 f7       	brne	.-24     	; 0x88a <OS_Init+0x72>
     8a2:	ed e4       	ldi	r30, 0x4D	; 77
     8a4:	f2 e0       	ldi	r31, 0x02	; 2
     8a6:	25 e7       	ldi	r18, 0x75	; 117
     8a8:	32 e0       	ldi	r19, 0x02	; 2
     8aa:	85 e0       	ldi	r24, 0x05	; 5
     8ac:	df 01       	movw	r26, r30
     8ae:	12 97       	sbiw	r26, 0x02	; 2
     8b0:	ed 01       	movw	r28, r26
     8b2:	68 2f       	mov	r22, r24
     8b4:	19 92       	st	Y+, r1
     8b6:	6a 95       	dec	r22
     8b8:	e9 f7       	brne	.-6      	; 0x8b4 <OS_Init+0x9c>
     8ba:	10 82       	st	Z, r1
     8bc:	35 96       	adiw	r30, 0x05	; 5
     8be:	e2 17       	cp	r30, r18
     8c0:	f3 07       	cpc	r31, r19
     8c2:	a1 f7       	brne	.-24     	; 0x8ac <OS_Init+0x94>
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	08 95       	ret

000008ca <OS_Abort>:
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	0e 94 b5 12 	call	0x256a	; 0x256a <_exit>

000008d2 <Dispatch>:
     8d2:	6b e3       	ldi	r22, 0x3B	; 59
     8d4:	72 e0       	ldi	r23, 0x02	; 2
     8d6:	85 e1       	ldi	r24, 0x15	; 21
     8d8:	95 e1       	ldi	r25, 0x15	; 21
     8da:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <dequeueRQ>
     8de:	fc 01       	movw	r30, r24
     8e0:	90 93 4a 02 	sts	0x024A, r25
     8e4:	80 93 49 02 	sts	0x0249, r24
     8e8:	89 2b       	or	r24, r25
     8ea:	09 f4       	brne	.+2      	; 0x8ee <Dispatch+0x1c>
     8ec:	ee df       	rcall	.-36     	; 0x8ca <OS_Abort>
     8ee:	82 81       	ldd	r24, Z+2	; 0x02
     8f0:	93 81       	ldd	r25, Z+3	; 0x03
     8f2:	90 93 36 15 	sts	0x1536, r25
     8f6:	80 93 35 15 	sts	0x1535, r24
     8fa:	82 e0       	ldi	r24, 0x02	; 2
     8fc:	df 01       	movw	r26, r30
     8fe:	ac 5f       	subi	r26, 0xFC	; 252
     900:	be 4f       	sbci	r27, 0xFE	; 254
     902:	8c 93       	st	X, r24
     904:	80 81       	ld	r24, Z
     906:	91 81       	ldd	r25, Z+1	; 0x01
     908:	02 97       	sbiw	r24, 0x02	; 2
     90a:	20 f4       	brcc	.+8      	; 0x914 <Dispatch+0x42>
     90c:	82 e0       	ldi	r24, 0x02	; 2
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	d0 cd       	rjmp	.-1120   	; 0x4b2 <enable_LED>
     912:	08 95       	ret
     914:	80 81       	ld	r24, Z
     916:	91 81       	ldd	r25, Z+1	; 0x01
     918:	02 97       	sbiw	r24, 0x02	; 2
     91a:	21 f4       	brne	.+8      	; 0x924 <Dispatch+0x52>
     91c:	85 e0       	ldi	r24, 0x05	; 5
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	c8 cd       	rjmp	.-1136   	; 0x4b2 <enable_LED>
     922:	08 95       	ret
     924:	80 81       	ld	r24, Z
     926:	91 81       	ldd	r25, Z+1	; 0x01
     928:	03 97       	sbiw	r24, 0x03	; 3
     92a:	19 f4       	brne	.+6      	; 0x932 <Dispatch+0x60>
     92c:	86 e0       	ldi	r24, 0x06	; 6
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	c0 cd       	rjmp	.-1152   	; 0x4b2 <enable_LED>
     932:	08 95       	ret

00000934 <Kernel_Unlock_Mutex>:
     934:	0f 93       	push	r16
     936:	1f 93       	push	r17
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	1f 92       	push	r1
     93e:	1f 92       	push	r1
     940:	cd b7       	in	r28, 0x3d	; 61
     942:	de b7       	in	r29, 0x3e	; 62
     944:	a0 91 49 02 	lds	r26, 0x0249
     948:	b0 91 4a 02 	lds	r27, 0x024A
     94c:	fd 01       	movw	r30, r26
     94e:	ec 5e       	subi	r30, 0xEC	; 236
     950:	fe 4f       	sbci	r31, 0xFE	; 254
     952:	40 81       	ld	r20, Z
     954:	51 81       	ldd	r21, Z+1	; 0x01
     956:	e3 e7       	ldi	r30, 0x73	; 115
     958:	f2 e0       	ldi	r31, 0x02	; 2
     95a:	00 e0       	ldi	r16, 0x00	; 0
     95c:	10 e0       	ldi	r17, 0x00	; 0
     95e:	80 81       	ld	r24, Z
     960:	91 81       	ldd	r25, Z+1	; 0x01
     962:	84 17       	cp	r24, r20
     964:	95 07       	cpc	r25, r21
     966:	39 f0       	breq	.+14     	; 0x976 <Kernel_Unlock_Mutex+0x42>
     968:	0f 5f       	subi	r16, 0xFF	; 255
     96a:	1f 4f       	sbci	r17, 0xFF	; 255
     96c:	37 96       	adiw	r30, 0x07	; 7
     96e:	08 30       	cpi	r16, 0x08	; 8
     970:	11 05       	cpc	r17, r1
     972:	a9 f7       	brne	.-22     	; 0x95e <Kernel_Unlock_Mutex+0x2a>
     974:	f7 c0       	rjmp	.+494    	; 0xb64 <Kernel_Unlock_Mutex+0x230>
     976:	8d 91       	ld	r24, X+
     978:	9c 91       	ld	r25, X
     97a:	11 97       	sbiw	r26, 0x01	; 1
     97c:	27 e0       	ldi	r18, 0x07	; 7
     97e:	20 9f       	mul	r18, r16
     980:	f0 01       	movw	r30, r0
     982:	21 9f       	mul	r18, r17
     984:	f0 0d       	add	r31, r0
     986:	11 24       	eor	r1, r1
     988:	ed 58       	subi	r30, 0x8D	; 141
     98a:	fd 4f       	sbci	r31, 0xFD	; 253
     98c:	23 81       	ldd	r18, Z+3	; 0x03
     98e:	34 81       	ldd	r19, Z+4	; 0x04
     990:	28 17       	cp	r18, r24
     992:	39 07       	cpc	r19, r25
     994:	09 f0       	breq	.+2      	; 0x998 <Kernel_Unlock_Mutex+0x64>
     996:	e6 c0       	rjmp	.+460    	; 0xb64 <Kernel_Unlock_Mutex+0x230>
     998:	ac 5f       	subi	r26, 0xFC	; 252
     99a:	be 4f       	sbci	r27, 0xFE	; 254
     99c:	8c 91       	ld	r24, X
     99e:	86 30       	cpi	r24, 0x06	; 6
     9a0:	09 f0       	breq	.+2      	; 0x9a4 <Kernel_Unlock_Mutex+0x70>
     9a2:	4d c0       	rjmp	.+154    	; 0xa3e <Kernel_Unlock_Mutex+0x10a>
     9a4:	67 e3       	ldi	r22, 0x37	; 55
     9a6:	72 e0       	ldi	r23, 0x02	; 2
     9a8:	87 e3       	ldi	r24, 0x37	; 55
     9aa:	95 e1       	ldi	r25, 0x15	; 21
     9ac:	b4 d7       	rcall	.+3944   	; 0x1916 <dequeueWQ>
     9ae:	9a 83       	std	Y+2, r25	; 0x02
     9b0:	89 83       	std	Y+1, r24	; 0x01
     9b2:	00 97       	sbiw	r24, 0x00	; 0
     9b4:	79 f4       	brne	.+30     	; 0x9d4 <Kernel_Unlock_Mutex+0xa0>
     9b6:	87 e0       	ldi	r24, 0x07	; 7
     9b8:	80 9f       	mul	r24, r16
     9ba:	f0 01       	movw	r30, r0
     9bc:	81 9f       	mul	r24, r17
     9be:	f0 0d       	add	r31, r0
     9c0:	11 24       	eor	r1, r1
     9c2:	ed 58       	subi	r30, 0x8D	; 141
     9c4:	fd 4f       	sbci	r31, 0xFD	; 253
     9c6:	16 82       	std	Z+6, r1	; 0x06
     9c8:	15 82       	std	Z+5, r1	; 0x05
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	82 83       	std	Z+2, r24	; 0x02
     9ce:	14 82       	std	Z+4, r1	; 0x04
     9d0:	13 82       	std	Z+3, r1	; 0x03
     9d2:	c8 c0       	rjmp	.+400    	; 0xb64 <Kernel_Unlock_Mutex+0x230>
     9d4:	27 e0       	ldi	r18, 0x07	; 7
     9d6:	20 9f       	mul	r18, r16
     9d8:	f0 01       	movw	r30, r0
     9da:	21 9f       	mul	r18, r17
     9dc:	f0 0d       	add	r31, r0
     9de:	11 24       	eor	r1, r1
     9e0:	ed 58       	subi	r30, 0x8D	; 141
     9e2:	fd 4f       	sbci	r31, 0xFD	; 253
     9e4:	21 e0       	ldi	r18, 0x01	; 1
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	36 83       	std	Z+6, r19	; 0x06
     9ea:	25 83       	std	Z+5, r18	; 0x05
     9ec:	dc 01       	movw	r26, r24
     9ee:	2d 91       	ld	r18, X+
     9f0:	3c 91       	ld	r19, X
     9f2:	34 83       	std	Z+4, r19	; 0x04
     9f4:	23 83       	std	Z+3, r18	; 0x03
     9f6:	20 91 49 02 	lds	r18, 0x0249
     9fa:	30 91 4a 02 	lds	r19, 0x024A
     9fe:	d9 01       	movw	r26, r18
     a00:	a9 5f       	subi	r26, 0xF9	; 249
     a02:	be 4f       	sbci	r27, 0xFE	; 254
     a04:	4d 91       	ld	r20, X+
     a06:	5c 91       	ld	r21, X
     a08:	11 97       	sbiw	r26, 0x01	; 1
     a0a:	fc 01       	movw	r30, r24
     a0c:	e9 5f       	subi	r30, 0xF9	; 249
     a0e:	fe 4f       	sbci	r31, 0xFE	; 254
     a10:	51 83       	std	Z+1, r21	; 0x01
     a12:	40 83       	st	Z, r20
     a14:	33 97       	sbiw	r30, 0x03	; 3
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	80 83       	st	Z, r24
     a1a:	f9 01       	movw	r30, r18
     a1c:	eb 5f       	subi	r30, 0xFB	; 251
     a1e:	fe 4f       	sbci	r31, 0xFE	; 254
     a20:	40 81       	ld	r20, Z
     a22:	51 81       	ldd	r21, Z+1	; 0x01
     a24:	11 96       	adiw	r26, 0x01	; 1
     a26:	5c 93       	st	X, r21
     a28:	4e 93       	st	-X, r20
     a2a:	31 97       	sbiw	r30, 0x01	; 1
     a2c:	80 83       	st	Z, r24
     a2e:	4b e3       	ldi	r20, 0x3B	; 59
     a30:	52 e0       	ldi	r21, 0x02	; 2
     a32:	65 e1       	ldi	r22, 0x15	; 21
     a34:	75 e1       	ldi	r23, 0x15	; 21
     a36:	ce 01       	movw	r24, r28
     a38:	01 96       	adiw	r24, 0x01	; 1
     a3a:	0a d7       	rcall	.+3604   	; 0x1850 <enqueueRQ>
     a3c:	93 c0       	rjmp	.+294    	; 0xb64 <Kernel_Unlock_Mutex+0x230>
     a3e:	87 e0       	ldi	r24, 0x07	; 7
     a40:	80 9f       	mul	r24, r16
     a42:	f0 01       	movw	r30, r0
     a44:	81 9f       	mul	r24, r17
     a46:	f0 0d       	add	r31, r0
     a48:	11 24       	eor	r1, r1
     a4a:	ed 58       	subi	r30, 0x8D	; 141
     a4c:	fd 4f       	sbci	r31, 0xFD	; 253
     a4e:	85 81       	ldd	r24, Z+5	; 0x05
     a50:	96 81       	ldd	r25, Z+6	; 0x06
     a52:	82 30       	cpi	r24, 0x02	; 2
     a54:	91 05       	cpc	r25, r1
     a56:	60 f0       	brcs	.+24     	; 0xa70 <Kernel_Unlock_Mutex+0x13c>
     a58:	27 e0       	ldi	r18, 0x07	; 7
     a5a:	20 9f       	mul	r18, r16
     a5c:	f0 01       	movw	r30, r0
     a5e:	21 9f       	mul	r18, r17
     a60:	f0 0d       	add	r31, r0
     a62:	11 24       	eor	r1, r1
     a64:	ed 58       	subi	r30, 0x8D	; 141
     a66:	fd 4f       	sbci	r31, 0xFD	; 253
     a68:	01 97       	sbiw	r24, 0x01	; 1
     a6a:	96 83       	std	Z+6, r25	; 0x06
     a6c:	85 83       	std	Z+5, r24	; 0x05
     a6e:	7a c0       	rjmp	.+244    	; 0xb64 <Kernel_Unlock_Mutex+0x230>
     a70:	67 e3       	ldi	r22, 0x37	; 55
     a72:	72 e0       	ldi	r23, 0x02	; 2
     a74:	87 e3       	ldi	r24, 0x37	; 55
     a76:	95 e1       	ldi	r25, 0x15	; 21
     a78:	4e d7       	rcall	.+3740   	; 0x1916 <dequeueWQ>
     a7a:	9a 83       	std	Y+2, r25	; 0x02
     a7c:	89 83       	std	Y+1, r24	; 0x01
     a7e:	00 97       	sbiw	r24, 0x00	; 0
     a80:	a9 f5       	brne	.+106    	; 0xaec <Kernel_Unlock_Mutex+0x1b8>
     a82:	87 e0       	ldi	r24, 0x07	; 7
     a84:	80 9f       	mul	r24, r16
     a86:	f0 01       	movw	r30, r0
     a88:	81 9f       	mul	r24, r17
     a8a:	f0 0d       	add	r31, r0
     a8c:	11 24       	eor	r1, r1
     a8e:	ed 58       	subi	r30, 0x8D	; 141
     a90:	fd 4f       	sbci	r31, 0xFD	; 253
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	82 83       	std	Z+2, r24	; 0x02
     a96:	16 82       	std	Z+6, r1	; 0x06
     a98:	15 82       	std	Z+5, r1	; 0x05
     a9a:	14 82       	std	Z+4, r1	; 0x04
     a9c:	13 82       	std	Z+3, r1	; 0x03
     a9e:	e0 91 49 02 	lds	r30, 0x0249
     aa2:	f0 91 4a 02 	lds	r31, 0x024A
     aa6:	df 01       	movw	r26, r30
     aa8:	ab 5f       	subi	r26, 0xFB	; 251
     aaa:	be 4f       	sbci	r27, 0xFE	; 254
     aac:	8d 91       	ld	r24, X+
     aae:	9c 91       	ld	r25, X
     ab0:	11 97       	sbiw	r26, 0x01	; 1
     ab2:	12 96       	adiw	r26, 0x02	; 2
     ab4:	11 96       	adiw	r26, 0x01	; 1
     ab6:	9c 93       	st	X, r25
     ab8:	8e 93       	st	-X, r24
     aba:	80 81       	ld	r24, Z
     abc:	91 81       	ldd	r25, Z+1	; 0x01
     abe:	02 97       	sbiw	r24, 0x02	; 2
     ac0:	20 f4       	brcc	.+8      	; 0xaca <Kernel_Unlock_Mutex+0x196>
     ac2:	82 e0       	ldi	r24, 0x02	; 2
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	f5 dc       	rcall	.-1558   	; 0x4b2 <enable_LED>
     ac8:	4d c0       	rjmp	.+154    	; 0xb64 <Kernel_Unlock_Mutex+0x230>
     aca:	80 81       	ld	r24, Z
     acc:	91 81       	ldd	r25, Z+1	; 0x01
     ace:	02 97       	sbiw	r24, 0x02	; 2
     ad0:	21 f4       	brne	.+8      	; 0xada <Kernel_Unlock_Mutex+0x1a6>
     ad2:	85 e0       	ldi	r24, 0x05	; 5
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	ed dc       	rcall	.-1574   	; 0x4b2 <enable_LED>
     ad8:	45 c0       	rjmp	.+138    	; 0xb64 <Kernel_Unlock_Mutex+0x230>
     ada:	80 81       	ld	r24, Z
     adc:	91 81       	ldd	r25, Z+1	; 0x01
     ade:	03 97       	sbiw	r24, 0x03	; 3
     ae0:	09 f0       	breq	.+2      	; 0xae4 <Kernel_Unlock_Mutex+0x1b0>
     ae2:	40 c0       	rjmp	.+128    	; 0xb64 <Kernel_Unlock_Mutex+0x230>
     ae4:	86 e0       	ldi	r24, 0x06	; 6
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	e4 dc       	rcall	.-1592   	; 0x4b2 <enable_LED>
     aea:	3c c0       	rjmp	.+120    	; 0xb64 <Kernel_Unlock_Mutex+0x230>
     aec:	27 e0       	ldi	r18, 0x07	; 7
     aee:	20 9f       	mul	r18, r16
     af0:	f0 01       	movw	r30, r0
     af2:	21 9f       	mul	r18, r17
     af4:	f0 0d       	add	r31, r0
     af6:	11 24       	eor	r1, r1
     af8:	ed 58       	subi	r30, 0x8D	; 141
     afa:	fd 4f       	sbci	r31, 0xFD	; 253
     afc:	21 e0       	ldi	r18, 0x01	; 1
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	36 83       	std	Z+6, r19	; 0x06
     b02:	25 83       	std	Z+5, r18	; 0x05
     b04:	dc 01       	movw	r26, r24
     b06:	2d 91       	ld	r18, X+
     b08:	3c 91       	ld	r19, X
     b0a:	34 83       	std	Z+4, r19	; 0x04
     b0c:	23 83       	std	Z+3, r18	; 0x03
     b0e:	20 91 49 02 	lds	r18, 0x0249
     b12:	30 91 4a 02 	lds	r19, 0x024A
     b16:	d9 01       	movw	r26, r18
     b18:	a9 5f       	subi	r26, 0xF9	; 249
     b1a:	be 4f       	sbci	r27, 0xFE	; 254
     b1c:	4d 91       	ld	r20, X+
     b1e:	5c 91       	ld	r21, X
     b20:	11 97       	sbiw	r26, 0x01	; 1
     b22:	fc 01       	movw	r30, r24
     b24:	e9 5f       	subi	r30, 0xF9	; 249
     b26:	fe 4f       	sbci	r31, 0xFE	; 254
     b28:	51 83       	std	Z+1, r21	; 0x01
     b2a:	40 83       	st	Z, r20
     b2c:	33 97       	sbiw	r30, 0x03	; 3
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	80 83       	st	Z, r24
     b32:	f9 01       	movw	r30, r18
     b34:	eb 5f       	subi	r30, 0xFB	; 251
     b36:	fe 4f       	sbci	r31, 0xFE	; 254
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	11 96       	adiw	r26, 0x01	; 1
     b3e:	5c 93       	st	X, r21
     b40:	4e 93       	st	-X, r20
     b42:	31 97       	sbiw	r30, 0x01	; 1
     b44:	80 83       	st	Z, r24
     b46:	4b e3       	ldi	r20, 0x3B	; 59
     b48:	52 e0       	ldi	r21, 0x02	; 2
     b4a:	65 e1       	ldi	r22, 0x15	; 21
     b4c:	75 e1       	ldi	r23, 0x15	; 21
     b4e:	ce 01       	movw	r24, r28
     b50:	01 96       	adiw	r24, 0x01	; 1
     b52:	7e d6       	rcall	.+3324   	; 0x1850 <enqueueRQ>
     b54:	4b e3       	ldi	r20, 0x3B	; 59
     b56:	52 e0       	ldi	r21, 0x02	; 2
     b58:	65 e1       	ldi	r22, 0x15	; 21
     b5a:	75 e1       	ldi	r23, 0x15	; 21
     b5c:	89 e4       	ldi	r24, 0x49	; 73
     b5e:	92 e0       	ldi	r25, 0x02	; 2
     b60:	77 d6       	rcall	.+3310   	; 0x1850 <enqueueRQ>
     b62:	b7 de       	rcall	.-658    	; 0x8d2 <Dispatch>
     b64:	0f 90       	pop	r0
     b66:	0f 90       	pop	r0
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	1f 91       	pop	r17
     b6e:	0f 91       	pop	r16
     b70:	08 95       	ret

00000b72 <OS_Start>:
     b72:	2f 92       	push	r2
     b74:	3f 92       	push	r3
     b76:	4f 92       	push	r4
     b78:	5f 92       	push	r5
     b7a:	6f 92       	push	r6
     b7c:	7f 92       	push	r7
     b7e:	8f 92       	push	r8
     b80:	9f 92       	push	r9
     b82:	af 92       	push	r10
     b84:	bf 92       	push	r11
     b86:	cf 92       	push	r12
     b88:	df 92       	push	r13
     b8a:	ef 92       	push	r14
     b8c:	ff 92       	push	r15
     b8e:	0f 93       	push	r16
     b90:	1f 93       	push	r17
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
     b96:	00 d0       	rcall	.+0      	; 0xb98 <OS_Start+0x26>
     b98:	1f 92       	push	r1
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
     b9e:	80 91 47 02 	lds	r24, 0x0247
     ba2:	90 91 48 02 	lds	r25, 0x0248
     ba6:	89 2b       	or	r24, r25
     ba8:	09 f0       	breq	.+2      	; 0xbac <OS_Start+0x3a>
     baa:	06 c4       	rjmp	.+2060   	; 0x13b8 <OS_Start+0x846>
     bac:	80 91 45 02 	lds	r24, 0x0245
     bb0:	90 91 46 02 	lds	r25, 0x0246
     bb4:	89 2b       	or	r24, r25
     bb6:	09 f4       	brne	.+2      	; 0xbba <OS_Start+0x48>
     bb8:	ff c3       	rjmp	.+2046   	; 0x13b8 <OS_Start+0x846>
     bba:	f8 94       	cli
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	90 93 48 02 	sts	0x0248, r25
     bc4:	80 93 47 02 	sts	0x0247, r24
     bc8:	84 de       	rcall	.-760    	; 0x8d2 <Dispatch>
     bca:	0f 2e       	mov	r0, r31
     bcc:	fb e4       	ldi	r31, 0x4B	; 75
     bce:	ef 2e       	mov	r14, r31
     bd0:	f2 e0       	ldi	r31, 0x02	; 2
     bd2:	ff 2e       	mov	r15, r31
     bd4:	f0 2d       	mov	r31, r0
     bd6:	0f 2e       	mov	r0, r31
     bd8:	fe e1       	ldi	r31, 0x1E	; 30
     bda:	af 2e       	mov	r10, r31
     bdc:	bb 24       	eor	r11, r11
     bde:	b3 94       	inc	r11
     be0:	f0 2d       	mov	r31, r0
     be2:	0f 2e       	mov	r0, r31
     be4:	f3 e6       	ldi	r31, 0x63	; 99
     be6:	2f 2e       	mov	r2, r31
     be8:	31 2c       	mov	r3, r1
     bea:	f0 2d       	mov	r31, r0
     bec:	88 24       	eor	r8, r8
     bee:	83 94       	inc	r8
     bf0:	91 2c       	mov	r9, r1
     bf2:	0f 2e       	mov	r0, r31
     bf4:	f3 e7       	ldi	r31, 0x73	; 115
     bf6:	cf 2e       	mov	r12, r31
     bf8:	f2 e0       	ldi	r31, 0x02	; 2
     bfa:	df 2e       	mov	r13, r31
     bfc:	f0 2d       	mov	r31, r0
     bfe:	0b ea       	ldi	r16, 0xAB	; 171
     c00:	12 e0       	ldi	r17, 0x02	; 2
     c02:	0f 2e       	mov	r0, r31
     c04:	fa e0       	ldi	r31, 0x0A	; 10
     c06:	6f 2e       	mov	r6, r31
     c08:	71 2c       	mov	r7, r1
     c0a:	f0 2d       	mov	r31, r0
     c0c:	e0 91 49 02 	lds	r30, 0x0249
     c10:	f0 91 4a 02 	lds	r31, 0x024A
     c14:	df 01       	movw	r26, r30
     c16:	a3 5f       	subi	r26, 0xF3	; 243
     c18:	be 4f       	sbci	r27, 0xFE	; 254
     c1a:	1c 92       	st	X, r1
     c1c:	82 81       	ldd	r24, Z+2	; 0x02
     c1e:	93 81       	ldd	r25, Z+3	; 0x03
     c20:	90 93 36 15 	sts	0x1536, r25
     c24:	80 93 35 15 	sts	0x1535, r24
     c28:	8c da       	rcall	.-2792   	; 0x142 <CSwitch>
     c2a:	82 e0       	ldi	r24, 0x02	; 2
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	4e dc       	rcall	.-1892   	; 0x4cc <disable_LED>
     c30:	85 e0       	ldi	r24, 0x05	; 5
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	4b dc       	rcall	.-1898   	; 0x4cc <disable_LED>
     c36:	86 e0       	ldi	r24, 0x06	; 6
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	48 dc       	rcall	.-1904   	; 0x4cc <disable_LED>
     c3c:	80 91 49 02 	lds	r24, 0x0249
     c40:	90 91 4a 02 	lds	r25, 0x024A
     c44:	9c 83       	std	Y+4, r25	; 0x04
     c46:	8b 83       	std	Y+3, r24	; 0x03
     c48:	80 91 35 15 	lds	r24, 0x1535
     c4c:	90 91 36 15 	lds	r25, 0x1536
     c50:	ab 81       	ldd	r26, Y+3	; 0x03
     c52:	bc 81       	ldd	r27, Y+4	; 0x04
     c54:	13 96       	adiw	r26, 0x03	; 3
     c56:	9c 93       	st	X, r25
     c58:	8e 93       	st	-X, r24
     c5a:	12 97       	sbiw	r26, 0x02	; 2
     c5c:	fd 01       	movw	r30, r26
     c5e:	e3 5f       	subi	r30, 0xF3	; 243
     c60:	fe 4f       	sbci	r31, 0xFE	; 254
     c62:	e0 81       	ld	r30, Z
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	ed 30       	cpi	r30, 0x0D	; 13
     c68:	f1 05       	cpc	r31, r1
     c6a:	80 f6       	brcc	.-96     	; 0xc0c <OS_Start+0x9a>
     c6c:	88 27       	eor	r24, r24
     c6e:	ee 58       	subi	r30, 0x8E	; 142
     c70:	ff 4f       	sbci	r31, 0xFF	; 255
     c72:	8f 4f       	sbci	r24, 0xFF	; 255
     c74:	0c 94 a7 0f 	jmp	0x1f4e	; 0x1f4e <__tablejump2__>
     c78:	eb 81       	ldd	r30, Y+3	; 0x03
     c7a:	fc 81       	ldd	r31, Y+4	; 0x04
     c7c:	e4 5e       	subi	r30, 0xE4	; 228
     c7e:	fe 4f       	sbci	r31, 0xFE	; 254
     c80:	80 81       	ld	r24, Z
     c82:	91 81       	ldd	r25, Z+1	; 0x01
     c84:	eb ea       	ldi	r30, 0xAB	; 171
     c86:	f2 e0       	ldi	r31, 0x02	; 2
     c88:	20 81       	ld	r18, Z
     c8a:	31 81       	ldd	r19, Z+1	; 0x01
     c8c:	28 17       	cp	r18, r24
     c8e:	39 07       	cpc	r19, r25
     c90:	09 f0       	breq	.+2      	; 0xc94 <OS_Start+0x122>
     c92:	89 c0       	rjmp	.+274    	; 0xda6 <OS_Start+0x234>
     c94:	0d c3       	rjmp	.+1562   	; 0x12b0 <OS_Start+0x73e>
     c96:	eb 81       	ldd	r30, Y+3	; 0x03
     c98:	fc 81       	ldd	r31, Y+4	; 0x04
     c9a:	e7 5f       	subi	r30, 0xF7	; 247
     c9c:	fe 4f       	sbci	r31, 0xFE	; 254
     c9e:	40 81       	ld	r20, Z
     ca0:	51 81       	ldd	r21, Z+1	; 0x01
     ca2:	eb 81       	ldd	r30, Y+3	; 0x03
     ca4:	fc 81       	ldd	r31, Y+4	; 0x04
     ca6:	eb 5f       	subi	r30, 0xFB	; 251
     ca8:	fe 4f       	sbci	r31, 0xFE	; 254
     caa:	60 81       	ld	r22, Z
     cac:	71 81       	ldd	r23, Z+1	; 0x01
     cae:	eb 81       	ldd	r30, Y+3	; 0x03
     cb0:	fc 81       	ldd	r31, Y+4	; 0x04
     cb2:	e5 5f       	subi	r30, 0xF5	; 245
     cb4:	fe 4f       	sbci	r31, 0xFE	; 254
     cb6:	80 81       	ld	r24, Z
     cb8:	91 81       	ldd	r25, Z+1	; 0x01
     cba:	52 dd       	rcall	.-1372   	; 0x760 <Kernel_Create_Task>
     cbc:	eb 81       	ldd	r30, Y+3	; 0x03
     cbe:	fc 81       	ldd	r31, Y+4	; 0x04
     cc0:	e2 5f       	subi	r30, 0xF2	; 242
     cc2:	fe 4f       	sbci	r31, 0xFE	; 254
     cc4:	91 83       	std	Z+1, r25	; 0x01
     cc6:	80 83       	st	Z, r24
     cc8:	a1 cf       	rjmp	.-190    	; 0xc0c <OS_Start+0x9a>
     cca:	eb 81       	ldd	r30, Y+3	; 0x03
     ccc:	fc 81       	ldd	r31, Y+4	; 0x04
     cce:	ec 5f       	subi	r30, 0xFC	; 252
     cd0:	fe 4f       	sbci	r31, 0xFE	; 254
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	80 83       	st	Z, r24
     cd6:	4b e3       	ldi	r20, 0x3B	; 59
     cd8:	52 e0       	ldi	r21, 0x02	; 2
     cda:	65 e1       	ldi	r22, 0x15	; 21
     cdc:	75 e1       	ldi	r23, 0x15	; 21
     cde:	89 e4       	ldi	r24, 0x49	; 73
     ce0:	92 e0       	ldi	r25, 0x02	; 2
     ce2:	b6 d5       	rcall	.+2924   	; 0x1850 <enqueueRQ>
     ce4:	f6 dd       	rcall	.-1044   	; 0x8d2 <Dispatch>
     ce6:	92 cf       	rjmp	.-220    	; 0xc0c <OS_Start+0x9a>
     ce8:	eb 81       	ldd	r30, Y+3	; 0x03
     cea:	fc 81       	ldd	r31, Y+4	; 0x04
     cec:	ec 5f       	subi	r30, 0xFC	; 252
     cee:	fe 4f       	sbci	r31, 0xFE	; 254
     cf0:	83 e0       	ldi	r24, 0x03	; 3
     cf2:	80 83       	st	Z, r24
     cf4:	49 e3       	ldi	r20, 0x39	; 57
     cf6:	52 e0       	ldi	r21, 0x02	; 2
     cf8:	65 ef       	ldi	r22, 0xF5	; 245
     cfa:	74 e1       	ldi	r23, 0x14	; 20
     cfc:	89 e4       	ldi	r24, 0x49	; 73
     cfe:	92 e0       	ldi	r25, 0x02	; 2
     d00:	36 d5       	rcall	.+2668   	; 0x176e <enqueueSQ>
     d02:	e7 dd       	rcall	.-1074   	; 0x8d2 <Dispatch>
     d04:	83 cf       	rjmp	.-250    	; 0xc0c <OS_Start+0x9a>
     d06:	ab 81       	ldd	r26, Y+3	; 0x03
     d08:	bc 81       	ldd	r27, Y+4	; 0x04
     d0a:	2d 91       	ld	r18, X+
     d0c:	3c 91       	ld	r19, X
     d0e:	11 97       	sbiw	r26, 0x01	; 1
     d10:	fd 01       	movw	r30, r26
     d12:	e4 5e       	subi	r30, 0xE4	; 228
     d14:	fe 4f       	sbci	r31, 0xFE	; 254
     d16:	80 81       	ld	r24, Z
     d18:	91 81       	ldd	r25, Z+1	; 0x01
     d1a:	28 17       	cp	r18, r24
     d1c:	39 07       	cpc	r19, r25
     d1e:	51 f0       	breq	.+20     	; 0xd34 <OS_Start+0x1c2>
     d20:	80 81       	ld	r24, Z
     d22:	91 81       	ldd	r25, Z+1	; 0x01
     d24:	eb ea       	ldi	r30, 0xAB	; 171
     d26:	f2 e0       	ldi	r31, 0x02	; 2
     d28:	20 81       	ld	r18, Z
     d2a:	31 81       	ldd	r19, Z+1	; 0x01
     d2c:	28 17       	cp	r18, r24
     d2e:	39 07       	cpc	r19, r25
     d30:	41 f4       	brne	.+16     	; 0xd42 <OS_Start+0x1d0>
     d32:	ad c2       	rjmp	.+1370   	; 0x128e <OS_Start+0x71c>
     d34:	eb 81       	ldd	r30, Y+3	; 0x03
     d36:	fc 81       	ldd	r31, Y+4	; 0x04
     d38:	e6 5e       	subi	r30, 0xE6	; 230
     d3a:	fe 4f       	sbci	r31, 0xFE	; 254
     d3c:	91 82       	std	Z+1, r9	; 0x01
     d3e:	80 82       	st	Z, r8
     d40:	1a c0       	rjmp	.+52     	; 0xd76 <OS_Start+0x204>
     d42:	e9 ec       	ldi	r30, 0xC9	; 201
     d44:	f3 e0       	ldi	r31, 0x03	; 3
     d46:	c4 01       	movw	r24, r8
     d48:	ab 81       	ldd	r26, Y+3	; 0x03
     d4a:	bc 81       	ldd	r27, Y+4	; 0x04
     d4c:	a4 5e       	subi	r26, 0xE4	; 228
     d4e:	be 4f       	sbci	r27, 0xFE	; 254
     d50:	6b 81       	ldd	r22, Y+3	; 0x03
     d52:	7c 81       	ldd	r23, Y+4	; 0x04
     d54:	2d 91       	ld	r18, X+
     d56:	3c 91       	ld	r19, X
     d58:	11 97       	sbiw	r26, 0x01	; 1
     d5a:	40 81       	ld	r20, Z
     d5c:	51 81       	ldd	r21, Z+1	; 0x01
     d5e:	42 17       	cp	r20, r18
     d60:	53 07       	cpc	r21, r19
     d62:	09 f4       	brne	.+2      	; 0xd66 <OS_Start+0x1f4>
     d64:	97 c2       	rjmp	.+1326   	; 0x1294 <OS_Start+0x722>
     d66:	01 96       	adiw	r24, 0x01	; 1
     d68:	e2 5e       	subi	r30, 0xE2	; 226
     d6a:	fe 4f       	sbci	r31, 0xFE	; 254
     d6c:	80 31       	cpi	r24, 0x10	; 16
     d6e:	91 05       	cpc	r25, r1
     d70:	89 f7       	brne	.-30     	; 0xd54 <OS_Start+0x1e2>
     d72:	7c 83       	std	Y+4, r23	; 0x04
     d74:	6b 83       	std	Y+3, r22	; 0x03
     d76:	eb 81       	ldd	r30, Y+3	; 0x03
     d78:	fc 81       	ldd	r31, Y+4	; 0x04
     d7a:	e6 5e       	subi	r30, 0xE6	; 230
     d7c:	fe 4f       	sbci	r31, 0xFE	; 254
     d7e:	80 81       	ld	r24, Z
     d80:	91 81       	ldd	r25, Z+1	; 0x01
     d82:	89 2b       	or	r24, r25
     d84:	09 f4       	brne	.+2      	; 0xd88 <OS_Start+0x216>
     d86:	42 cf       	rjmp	.-380    	; 0xc0c <OS_Start+0x9a>
     d88:	eb 81       	ldd	r30, Y+3	; 0x03
     d8a:	fc 81       	ldd	r31, Y+4	; 0x04
     d8c:	ec 5f       	subi	r30, 0xFC	; 252
     d8e:	fe 4f       	sbci	r31, 0xFE	; 254
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	80 83       	st	Z, r24
     d94:	4b e3       	ldi	r20, 0x3B	; 59
     d96:	52 e0       	ldi	r21, 0x02	; 2
     d98:	65 e1       	ldi	r22, 0x15	; 21
     d9a:	75 e1       	ldi	r23, 0x15	; 21
     d9c:	89 e4       	ldi	r24, 0x49	; 73
     d9e:	92 e0       	ldi	r25, 0x02	; 2
     da0:	57 d5       	rcall	.+2734   	; 0x1850 <enqueueRQ>
     da2:	97 dd       	rcall	.-1234   	; 0x8d2 <Dispatch>
     da4:	33 cf       	rjmp	.-410    	; 0xc0c <OS_Start+0x9a>
     da6:	e9 ec       	ldi	r30, 0xC9	; 201
     da8:	f3 e0       	ldi	r31, 0x03	; 3
     daa:	c4 01       	movw	r24, r8
     dac:	ab 81       	ldd	r26, Y+3	; 0x03
     dae:	bc 81       	ldd	r27, Y+4	; 0x04
     db0:	a4 5e       	subi	r26, 0xE4	; 228
     db2:	be 4f       	sbci	r27, 0xFE	; 254
     db4:	6b 81       	ldd	r22, Y+3	; 0x03
     db6:	7c 81       	ldd	r23, Y+4	; 0x04
     db8:	2d 91       	ld	r18, X+
     dba:	3c 91       	ld	r19, X
     dbc:	11 97       	sbiw	r26, 0x01	; 1
     dbe:	40 81       	ld	r20, Z
     dc0:	51 81       	ldd	r21, Z+1	; 0x01
     dc2:	42 17       	cp	r20, r18
     dc4:	53 07       	cpc	r21, r19
     dc6:	09 f4       	brne	.+2      	; 0xdca <OS_Start+0x258>
     dc8:	76 c2       	rjmp	.+1260   	; 0x12b6 <OS_Start+0x744>
     dca:	01 96       	adiw	r24, 0x01	; 1
     dcc:	e2 5e       	subi	r30, 0xE2	; 226
     dce:	fe 4f       	sbci	r31, 0xFE	; 254
     dd0:	80 31       	cpi	r24, 0x10	; 16
     dd2:	91 05       	cpc	r25, r1
     dd4:	89 f7       	brne	.-30     	; 0xdb8 <OS_Start+0x246>
     dd6:	1a cf       	rjmp	.-460    	; 0xc0c <OS_Start+0x9a>
     dd8:	8a 9d       	mul	r24, r10
     dda:	90 01       	movw	r18, r0
     ddc:	8b 9d       	mul	r24, r11
     dde:	30 0d       	add	r19, r0
     de0:	9a 9d       	mul	r25, r10
     de2:	30 0d       	add	r19, r0
     de4:	11 24       	eor	r1, r1
     de6:	c9 01       	movw	r24, r18
     de8:	85 55       	subi	r24, 0x55	; 85
     dea:	9d 4f       	sbci	r25, 0xFD	; 253
     dec:	fc 01       	movw	r30, r24
     dee:	e6 5e       	subi	r30, 0xE6	; 230
     df0:	fe 4f       	sbci	r31, 0xFE	; 254
     df2:	11 82       	std	Z+1, r1	; 0x01
     df4:	10 82       	st	Z, r1
     df6:	eb 81       	ldd	r30, Y+3	; 0x03
     df8:	fc 81       	ldd	r31, Y+4	; 0x04
     dfa:	e9 5f       	subi	r30, 0xF9	; 249
     dfc:	fe 4f       	sbci	r31, 0xFE	; 254
     dfe:	20 81       	ld	r18, Z
     e00:	31 81       	ldd	r19, Z+1	; 0x01
     e02:	fc 01       	movw	r30, r24
     e04:	e9 5f       	subi	r30, 0xF9	; 249
     e06:	fe 4f       	sbci	r31, 0xFE	; 254
     e08:	80 81       	ld	r24, Z
     e0a:	91 81       	ldd	r25, Z+1	; 0x01
     e0c:	82 17       	cp	r24, r18
     e0e:	93 07       	cpc	r25, r19
     e10:	08 f0       	brcs	.+2      	; 0xe14 <OS_Start+0x2a2>
     e12:	fc ce       	rjmp	.-520    	; 0xc0c <OS_Start+0x9a>
     e14:	eb 81       	ldd	r30, Y+3	; 0x03
     e16:	fc 81       	ldd	r31, Y+4	; 0x04
     e18:	ec 5f       	subi	r30, 0xFC	; 252
     e1a:	fe 4f       	sbci	r31, 0xFE	; 254
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	80 83       	st	Z, r24
     e20:	4b e3       	ldi	r20, 0x3B	; 59
     e22:	52 e0       	ldi	r21, 0x02	; 2
     e24:	65 e1       	ldi	r22, 0x15	; 21
     e26:	75 e1       	ldi	r23, 0x15	; 21
     e28:	89 e4       	ldi	r24, 0x49	; 73
     e2a:	92 e0       	ldi	r25, 0x02	; 2
     e2c:	11 d5       	rcall	.+2594   	; 0x1850 <enqueueRQ>
     e2e:	51 dd       	rcall	.-1374   	; 0x8d2 <Dispatch>
     e30:	ed ce       	rjmp	.-550    	; 0xc0c <OS_Start+0x9a>
     e32:	eb 81       	ldd	r30, Y+3	; 0x03
     e34:	fc 81       	ldd	r31, Y+4	; 0x04
     e36:	e9 5f       	subi	r30, 0xF9	; 249
     e38:	fe 4f       	sbci	r31, 0xFE	; 254
     e3a:	11 82       	std	Z+1, r1	; 0x01
     e3c:	10 82       	st	Z, r1
     e3e:	eb 81       	ldd	r30, Y+3	; 0x03
     e40:	fc 81       	ldd	r31, Y+4	; 0x04
     e42:	eb 5f       	subi	r30, 0xFB	; 251
     e44:	fe 4f       	sbci	r31, 0xFE	; 254
     e46:	11 82       	std	Z+1, r1	; 0x01
     e48:	10 82       	st	Z, r1
     e4a:	eb 81       	ldd	r30, Y+3	; 0x03
     e4c:	fc 81       	ldd	r31, Y+4	; 0x04
     e4e:	ec 5f       	subi	r30, 0xFC	; 252
     e50:	fe 4f       	sbci	r31, 0xFE	; 254
     e52:	86 e0       	ldi	r24, 0x06	; 6
     e54:	80 83       	st	Z, r24
     e56:	dc 82       	std	Y+4, r13	; 0x04
     e58:	cb 82       	std	Y+3, r12	; 0x03
     e5a:	e0 91 49 02 	lds	r30, 0x0249
     e5e:	f0 91 4a 02 	lds	r31, 0x024A
     e62:	80 81       	ld	r24, Z
     e64:	91 81       	ldd	r25, Z+1	; 0x01
     e66:	ab 81       	ldd	r26, Y+3	; 0x03
     e68:	bc 81       	ldd	r27, Y+4	; 0x04
     e6a:	13 96       	adiw	r26, 0x03	; 3
     e6c:	2d 91       	ld	r18, X+
     e6e:	3c 91       	ld	r19, X
     e70:	14 97       	sbiw	r26, 0x04	; 4
     e72:	28 17       	cp	r18, r24
     e74:	39 07       	cpc	r19, r25
     e76:	39 f4       	brne	.+14     	; 0xe86 <OS_Start+0x314>
     e78:	8d 91       	ld	r24, X+
     e7a:	9c 91       	ld	r25, X
     e7c:	ec 5e       	subi	r30, 0xEC	; 236
     e7e:	fe 4f       	sbci	r31, 0xFE	; 254
     e80:	91 83       	std	Z+1, r25	; 0x01
     e82:	80 83       	st	Z, r24
     e84:	57 dd       	rcall	.-1362   	; 0x934 <Kernel_Unlock_Mutex>
     e86:	eb 81       	ldd	r30, Y+3	; 0x03
     e88:	fc 81       	ldd	r31, Y+4	; 0x04
     e8a:	37 96       	adiw	r30, 0x07	; 7
     e8c:	fc 83       	std	Y+4, r31	; 0x04
     e8e:	eb 83       	std	Y+3, r30	; 0x03
     e90:	e0 17       	cp	r30, r16
     e92:	f1 07       	cpc	r31, r17
     e94:	11 f7       	brne	.-60     	; 0xe5a <OS_Start+0x2e8>
     e96:	e0 91 49 02 	lds	r30, 0x0249
     e9a:	f0 91 4a 02 	lds	r31, 0x024A
     e9e:	df 01       	movw	r26, r30
     ea0:	ac 5f       	subi	r26, 0xFC	; 252
     ea2:	be 4f       	sbci	r27, 0xFE	; 254
     ea4:	1c 92       	st	X, r1
     ea6:	52 96       	adiw	r26, 0x12	; 18
     ea8:	11 96       	adiw	r26, 0x01	; 1
     eaa:	3c 92       	st	X, r3
     eac:	2e 92       	st	-X, r2
     eae:	1f 97       	sbiw	r26, 0x0f	; 15
     eb0:	11 96       	adiw	r26, 0x01	; 1
     eb2:	7c 92       	st	X, r7
     eb4:	6e 92       	st	-X, r6
     eb6:	12 97       	sbiw	r26, 0x02	; 2
     eb8:	11 96       	adiw	r26, 0x01	; 1
     eba:	7c 92       	st	X, r7
     ebc:	6e 92       	st	-X, r6
     ebe:	11 82       	std	Z+1, r1	; 0x01
     ec0:	10 82       	st	Z, r1
     ec2:	80 91 45 02 	lds	r24, 0x0245
     ec6:	90 91 46 02 	lds	r25, 0x0246
     eca:	01 97       	sbiw	r24, 0x01	; 1
     ecc:	90 93 46 02 	sts	0x0246, r25
     ed0:	80 93 45 02 	sts	0x0245, r24
     ed4:	fe dc       	rcall	.-1540   	; 0x8d2 <Dispatch>
     ed6:	9a ce       	rjmp	.-716    	; 0xc0c <OS_Start+0x9a>
     ed8:	80 91 41 02 	lds	r24, 0x0241
     edc:	90 91 42 02 	lds	r25, 0x0242
     ee0:	08 97       	sbiw	r24, 0x08	; 8
     ee2:	41 f1       	breq	.+80     	; 0xf34 <OS_Start+0x3c2>
     ee4:	d6 01       	movw	r26, r12
     ee6:	12 96       	adiw	r26, 0x02	; 2
     ee8:	8c 91       	ld	r24, X
     eea:	88 23       	and	r24, r24
     eec:	89 f0       	breq	.+34     	; 0xf10 <OS_Start+0x39e>
     eee:	ec e7       	ldi	r30, 0x7C	; 124
     ef0:	f2 e0       	ldi	r31, 0x02	; 2
     ef2:	94 01       	movw	r18, r8
     ef4:	4b 81       	ldd	r20, Y+3	; 0x03
     ef6:	5c 81       	ldd	r21, Y+4	; 0x04
     ef8:	80 81       	ld	r24, Z
     efa:	88 23       	and	r24, r24
     efc:	61 f0       	breq	.+24     	; 0xf16 <OS_Start+0x3a4>
     efe:	2f 5f       	subi	r18, 0xFF	; 255
     f00:	3f 4f       	sbci	r19, 0xFF	; 255
     f02:	37 96       	adiw	r30, 0x07	; 7
     f04:	28 30       	cpi	r18, 0x08	; 8
     f06:	31 05       	cpc	r19, r1
     f08:	b9 f7       	brne	.-18     	; 0xef8 <OS_Start+0x386>
     f0a:	5c 83       	std	Y+4, r21	; 0x04
     f0c:	4b 83       	std	Y+3, r20	; 0x03
     f0e:	05 c0       	rjmp	.+10     	; 0xf1a <OS_Start+0x3a8>
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <OS_Start+0x3a8>
     f16:	5c 83       	std	Y+4, r21	; 0x04
     f18:	4b 83       	std	Y+3, r20	; 0x03
     f1a:	c9 01       	movw	r24, r18
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	82 1b       	sub	r24, r18
     f2a:	93 0b       	sbc	r25, r19
     f2c:	8d 58       	subi	r24, 0x8D	; 141
     f2e:	9d 4f       	sbci	r25, 0xFD	; 253
     f30:	47 dc       	rcall	.-1906   	; 0x7c0 <Kernel_Init_Mutex_At>
     f32:	2c 01       	movw	r4, r24
     f34:	eb 81       	ldd	r30, Y+3	; 0x03
     f36:	fc 81       	ldd	r31, Y+4	; 0x04
     f38:	e2 5f       	subi	r30, 0xF2	; 242
     f3a:	fe 4f       	sbci	r31, 0xFE	; 254
     f3c:	51 82       	std	Z+1, r5	; 0x01
     f3e:	40 82       	st	Z, r4
     f40:	65 ce       	rjmp	.-822    	; 0xc0c <OS_Start+0x9a>
     f42:	eb 81       	ldd	r30, Y+3	; 0x03
     f44:	fc 81       	ldd	r31, Y+4	; 0x04
     f46:	ec 5e       	subi	r30, 0xEC	; 236
     f48:	fe 4f       	sbci	r31, 0xFE	; 254
     f4a:	40 81       	ld	r20, Z
     f4c:	51 81       	ldd	r21, Z+1	; 0x01
     f4e:	f6 01       	movw	r30, r12
     f50:	80 81       	ld	r24, Z
     f52:	91 81       	ldd	r25, Z+1	; 0x01
     f54:	48 17       	cp	r20, r24
     f56:	59 07       	cpc	r21, r25
     f58:	09 f4       	brne	.+2      	; 0xf5c <OS_Start+0x3ea>
     f5a:	bf c1       	rjmp	.+894    	; 0x12da <OS_Start+0x768>
     f5c:	c4 01       	movw	r24, r8
     f5e:	6b 81       	ldd	r22, Y+3	; 0x03
     f60:	7c 81       	ldd	r23, Y+4	; 0x04
     f62:	27 81       	ldd	r18, Z+7	; 0x07
     f64:	30 85       	ldd	r19, Z+8	; 0x08
     f66:	42 17       	cp	r20, r18
     f68:	53 07       	cpc	r21, r19
     f6a:	09 f4       	brne	.+2      	; 0xf6e <OS_Start+0x3fc>
     f6c:	b9 c1       	rjmp	.+882    	; 0x12e0 <OS_Start+0x76e>
     f6e:	01 96       	adiw	r24, 0x01	; 1
     f70:	37 96       	adiw	r30, 0x07	; 7
     f72:	88 30       	cpi	r24, 0x08	; 8
     f74:	91 05       	cpc	r25, r1
     f76:	a9 f7       	brne	.-22     	; 0xf62 <OS_Start+0x3f0>
     f78:	49 ce       	rjmp	.-878    	; 0xc0c <OS_Start+0x9a>
     f7a:	fc 01       	movw	r30, r24
     f7c:	ee 0f       	add	r30, r30
     f7e:	ff 1f       	adc	r31, r31
     f80:	ee 0f       	add	r30, r30
     f82:	ff 1f       	adc	r31, r31
     f84:	ee 0f       	add	r30, r30
     f86:	ff 1f       	adc	r31, r31
     f88:	e8 1b       	sub	r30, r24
     f8a:	f9 0b       	sbc	r31, r25
     f8c:	ed 58       	subi	r30, 0x8D	; 141
     f8e:	fd 4f       	sbci	r31, 0xFD	; 253
     f90:	82 e0       	ldi	r24, 0x02	; 2
     f92:	82 83       	std	Z+2, r24	; 0x02
     f94:	ab 81       	ldd	r26, Y+3	; 0x03
     f96:	bc 81       	ldd	r27, Y+4	; 0x04
     f98:	8d 91       	ld	r24, X+
     f9a:	9c 91       	ld	r25, X
     f9c:	94 83       	std	Z+4, r25	; 0x04
     f9e:	83 83       	std	Z+3, r24	; 0x03
     fa0:	85 81       	ldd	r24, Z+5	; 0x05
     fa2:	96 81       	ldd	r25, Z+6	; 0x06
     fa4:	01 96       	adiw	r24, 0x01	; 1
     fa6:	96 83       	std	Z+6, r25	; 0x06
     fa8:	85 83       	std	Z+5, r24	; 0x05
     faa:	30 ce       	rjmp	.-928    	; 0xc0c <OS_Start+0x9a>
     fac:	fc 01       	movw	r30, r24
     fae:	ee 0f       	add	r30, r30
     fb0:	ff 1f       	adc	r31, r31
     fb2:	ee 0f       	add	r30, r30
     fb4:	ff 1f       	adc	r31, r31
     fb6:	ee 0f       	add	r30, r30
     fb8:	ff 1f       	adc	r31, r31
     fba:	e8 1b       	sub	r30, r24
     fbc:	f9 0b       	sbc	r31, r25
     fbe:	ed 58       	subi	r30, 0x8D	; 141
     fc0:	fd 4f       	sbci	r31, 0xFD	; 253
     fc2:	23 81       	ldd	r18, Z+3	; 0x03
     fc4:	34 81       	ldd	r19, Z+4	; 0x04
     fc6:	eb 81       	ldd	r30, Y+3	; 0x03
     fc8:	fc 81       	ldd	r31, Y+4	; 0x04
     fca:	40 81       	ld	r20, Z
     fcc:	51 81       	ldd	r21, Z+1	; 0x01
     fce:	24 17       	cp	r18, r20
     fd0:	35 07       	cpc	r19, r21
     fd2:	89 f4       	brne	.+34     	; 0xff6 <OS_Start+0x484>
     fd4:	fc 01       	movw	r30, r24
     fd6:	ee 0f       	add	r30, r30
     fd8:	ff 1f       	adc	r31, r31
     fda:	ee 0f       	add	r30, r30
     fdc:	ff 1f       	adc	r31, r31
     fde:	ee 0f       	add	r30, r30
     fe0:	ff 1f       	adc	r31, r31
     fe2:	e8 1b       	sub	r30, r24
     fe4:	f9 0b       	sbc	r31, r25
     fe6:	ed 58       	subi	r30, 0x8D	; 141
     fe8:	fd 4f       	sbci	r31, 0xFD	; 253
     fea:	85 81       	ldd	r24, Z+5	; 0x05
     fec:	96 81       	ldd	r25, Z+6	; 0x06
     fee:	01 96       	adiw	r24, 0x01	; 1
     ff0:	96 83       	std	Z+6, r25	; 0x06
     ff2:	85 83       	std	Z+5, r24	; 0x05
     ff4:	0b ce       	rjmp	.-1002   	; 0xc0c <OS_Start+0x9a>
     ff6:	eb ea       	ldi	r30, 0xAB	; 171
     ff8:	f2 e0       	ldi	r31, 0x02	; 2
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	6b 81       	ldd	r22, Y+3	; 0x03
    1000:	7c 81       	ldd	r23, Y+4	; 0x04
    1002:	40 81       	ld	r20, Z
    1004:	51 81       	ldd	r21, Z+1	; 0x01
    1006:	24 17       	cp	r18, r20
    1008:	35 07       	cpc	r19, r21
    100a:	19 f4       	brne	.+6      	; 0x1012 <OS_Start+0x4a0>
    100c:	21 15       	cp	r18, r1
    100e:	31 05       	cpc	r19, r1
    1010:	31 f4       	brne	.+12     	; 0x101e <OS_Start+0x4ac>
    1012:	01 96       	adiw	r24, 0x01	; 1
    1014:	e2 5e       	subi	r30, 0xE2	; 226
    1016:	fe 4f       	sbci	r31, 0xFE	; 254
    1018:	80 31       	cpi	r24, 0x10	; 16
    101a:	91 05       	cpc	r25, r1
    101c:	91 f7       	brne	.-28     	; 0x1002 <OS_Start+0x490>
    101e:	7c 83       	std	Y+4, r23	; 0x04
    1020:	6b 83       	std	Y+3, r22	; 0x03
    1022:	fb 01       	movw	r30, r22
    1024:	e9 5f       	subi	r30, 0xF9	; 249
    1026:	fe 4f       	sbci	r31, 0xFE	; 254
    1028:	20 81       	ld	r18, Z
    102a:	31 81       	ldd	r19, Z+1	; 0x01
    102c:	8a 9d       	mul	r24, r10
    102e:	f0 01       	movw	r30, r0
    1030:	8b 9d       	mul	r24, r11
    1032:	f0 0d       	add	r31, r0
    1034:	9a 9d       	mul	r25, r10
    1036:	f0 0d       	add	r31, r0
    1038:	11 24       	eor	r1, r1
    103a:	ee 54       	subi	r30, 0x4E	; 78
    103c:	fc 4f       	sbci	r31, 0xFC	; 252
    103e:	40 81       	ld	r20, Z
    1040:	51 81       	ldd	r21, Z+1	; 0x01
    1042:	24 17       	cp	r18, r20
    1044:	35 07       	cpc	r19, r21
    1046:	80 f4       	brcc	.+32     	; 0x1068 <OS_Start+0x4f6>
    1048:	fb 01       	movw	r30, r22
    104a:	e9 5f       	subi	r30, 0xF9	; 249
    104c:	fe 4f       	sbci	r31, 0xFE	; 254
    104e:	20 81       	ld	r18, Z
    1050:	31 81       	ldd	r19, Z+1	; 0x01
    1052:	8a 9d       	mul	r24, r10
    1054:	f0 01       	movw	r30, r0
    1056:	8b 9d       	mul	r24, r11
    1058:	f0 0d       	add	r31, r0
    105a:	9a 9d       	mul	r25, r10
    105c:	f0 0d       	add	r31, r0
    105e:	11 24       	eor	r1, r1
    1060:	ee 54       	subi	r30, 0x4E	; 78
    1062:	fc 4f       	sbci	r31, 0xFC	; 252
    1064:	31 83       	std	Z+1, r19	; 0x01
    1066:	20 83       	st	Z, r18
    1068:	eb 81       	ldd	r30, Y+3	; 0x03
    106a:	fc 81       	ldd	r31, Y+4	; 0x04
    106c:	ec 5f       	subi	r30, 0xFC	; 252
    106e:	fe 4f       	sbci	r31, 0xFE	; 254
    1070:	84 e0       	ldi	r24, 0x04	; 4
    1072:	80 83       	st	Z, r24
    1074:	47 e3       	ldi	r20, 0x37	; 55
    1076:	52 e0       	ldi	r21, 0x02	; 2
    1078:	67 e3       	ldi	r22, 0x37	; 55
    107a:	75 e1       	ldi	r23, 0x15	; 21
    107c:	89 e4       	ldi	r24, 0x49	; 73
    107e:	92 e0       	ldi	r25, 0x02	; 2
    1080:	46 d3       	rcall	.+1676   	; 0x170e <enqueueWQ>
    1082:	27 dc       	rcall	.-1970   	; 0x8d2 <Dispatch>
    1084:	c3 cd       	rjmp	.-1146   	; 0xc0c <OS_Start+0x9a>
    1086:	56 dc       	rcall	.-1876   	; 0x934 <Kernel_Unlock_Mutex>
    1088:	c1 cd       	rjmp	.-1150   	; 0xc0c <OS_Start+0x9a>
    108a:	80 91 3f 02 	lds	r24, 0x023F
    108e:	90 91 40 02 	lds	r25, 0x0240
    1092:	08 97       	sbiw	r24, 0x08	; 8
    1094:	31 f1       	breq	.+76     	; 0x10e2 <OS_Start+0x570>
    1096:	d7 01       	movw	r26, r14
    1098:	12 96       	adiw	r26, 0x02	; 2
    109a:	8c 91       	ld	r24, X
    109c:	88 23       	and	r24, r24
    109e:	81 f0       	breq	.+32     	; 0x10c0 <OS_Start+0x54e>
    10a0:	e2 e5       	ldi	r30, 0x52	; 82
    10a2:	f2 e0       	ldi	r31, 0x02	; 2
    10a4:	c4 01       	movw	r24, r8
    10a6:	4b 81       	ldd	r20, Y+3	; 0x03
    10a8:	5c 81       	ldd	r21, Y+4	; 0x04
    10aa:	20 81       	ld	r18, Z
    10ac:	22 23       	and	r18, r18
    10ae:	59 f0       	breq	.+22     	; 0x10c6 <OS_Start+0x554>
    10b0:	01 96       	adiw	r24, 0x01	; 1
    10b2:	35 96       	adiw	r30, 0x05	; 5
    10b4:	88 30       	cpi	r24, 0x08	; 8
    10b6:	91 05       	cpc	r25, r1
    10b8:	c1 f7       	brne	.-16     	; 0x10aa <OS_Start+0x538>
    10ba:	5c 83       	std	Y+4, r21	; 0x04
    10bc:	4b 83       	std	Y+3, r20	; 0x03
    10be:	05 c0       	rjmp	.+10     	; 0x10ca <OS_Start+0x558>
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <OS_Start+0x558>
    10c6:	5c 83       	std	Y+4, r21	; 0x04
    10c8:	4b 83       	std	Y+3, r20	; 0x03
    10ca:	9c 01       	movw	r18, r24
    10cc:	22 0f       	add	r18, r18
    10ce:	33 1f       	adc	r19, r19
    10d0:	22 0f       	add	r18, r18
    10d2:	33 1f       	adc	r19, r19
    10d4:	82 0f       	add	r24, r18
    10d6:	93 1f       	adc	r25, r19
    10d8:	85 5b       	subi	r24, 0xB5	; 181
    10da:	9d 4f       	sbci	r25, 0xFD	; 253
    10dc:	86 db       	rcall	.-2292   	; 0x7ea <Kernel_Init_Event_At>
    10de:	9a 83       	std	Y+2, r25	; 0x02
    10e0:	89 83       	std	Y+1, r24	; 0x01
    10e2:	ab 81       	ldd	r26, Y+3	; 0x03
    10e4:	bc 81       	ldd	r27, Y+4	; 0x04
    10e6:	a2 5f       	subi	r26, 0xF2	; 242
    10e8:	be 4f       	sbci	r27, 0xFE	; 254
    10ea:	e9 81       	ldd	r30, Y+1	; 0x01
    10ec:	fa 81       	ldd	r31, Y+2	; 0x02
    10ee:	11 96       	adiw	r26, 0x01	; 1
    10f0:	fc 93       	st	X, r31
    10f2:	ee 93       	st	-X, r30
    10f4:	8b cd       	rjmp	.-1258   	; 0xc0c <OS_Start+0x9a>
    10f6:	eb 81       	ldd	r30, Y+3	; 0x03
    10f8:	fc 81       	ldd	r31, Y+4	; 0x04
    10fa:	e8 5e       	subi	r30, 0xE8	; 232
    10fc:	fe 4f       	sbci	r31, 0xFE	; 254
    10fe:	40 81       	ld	r20, Z
    1100:	51 81       	ldd	r21, Z+1	; 0x01
    1102:	d7 01       	movw	r26, r14
    1104:	8d 91       	ld	r24, X+
    1106:	9c 91       	ld	r25, X
    1108:	48 17       	cp	r20, r24
    110a:	59 07       	cpc	r21, r25
    110c:	09 f4       	brne	.+2      	; 0x1110 <OS_Start+0x59e>
    110e:	fa c0       	rjmp	.+500    	; 0x1304 <OS_Start+0x792>
    1110:	f7 01       	movw	r30, r14
    1112:	c4 01       	movw	r24, r8
    1114:	6b 81       	ldd	r22, Y+3	; 0x03
    1116:	7c 81       	ldd	r23, Y+4	; 0x04
    1118:	25 81       	ldd	r18, Z+5	; 0x05
    111a:	36 81       	ldd	r19, Z+6	; 0x06
    111c:	42 17       	cp	r20, r18
    111e:	53 07       	cpc	r21, r19
    1120:	09 f4       	brne	.+2      	; 0x1124 <OS_Start+0x5b2>
    1122:	f3 c0       	rjmp	.+486    	; 0x130a <OS_Start+0x798>
    1124:	01 96       	adiw	r24, 0x01	; 1
    1126:	35 96       	adiw	r30, 0x05	; 5
    1128:	88 30       	cpi	r24, 0x08	; 8
    112a:	91 05       	cpc	r25, r1
    112c:	a9 f7       	brne	.-22     	; 0x1118 <OS_Start+0x5a6>
    112e:	3d c0       	rjmp	.+122    	; 0x11aa <OS_Start+0x638>
    1130:	fc 01       	movw	r30, r24
    1132:	ee 0f       	add	r30, r30
    1134:	ff 1f       	adc	r31, r31
    1136:	ee 0f       	add	r30, r30
    1138:	ff 1f       	adc	r31, r31
    113a:	e8 0f       	add	r30, r24
    113c:	f9 1f       	adc	r31, r25
    113e:	e5 5b       	subi	r30, 0xB5	; 181
    1140:	fd 4f       	sbci	r31, 0xFD	; 253
    1142:	22 81       	ldd	r18, Z+2	; 0x02
    1144:	22 30       	cpi	r18, 0x02	; 2
    1146:	69 f4       	brne	.+26     	; 0x1162 <OS_Start+0x5f0>
    1148:	fc 01       	movw	r30, r24
    114a:	ee 0f       	add	r30, r30
    114c:	ff 1f       	adc	r31, r31
    114e:	ee 0f       	add	r30, r30
    1150:	ff 1f       	adc	r31, r31
    1152:	8e 0f       	add	r24, r30
    1154:	9f 1f       	adc	r25, r31
    1156:	fc 01       	movw	r30, r24
    1158:	e5 5b       	subi	r30, 0xB5	; 181
    115a:	fd 4f       	sbci	r31, 0xFD	; 253
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	82 83       	std	Z+2, r24	; 0x02
    1160:	24 c0       	rjmp	.+72     	; 0x11aa <OS_Start+0x638>
    1162:	eb 81       	ldd	r30, Y+3	; 0x03
    1164:	fc 81       	ldd	r31, Y+4	; 0x04
    1166:	ea 5e       	subi	r30, 0xEA	; 234
    1168:	fe 4f       	sbci	r31, 0xFE	; 254
    116a:	51 83       	std	Z+1, r21	; 0x01
    116c:	40 83       	st	Z, r20
    116e:	eb 81       	ldd	r30, Y+3	; 0x03
    1170:	fc 81       	ldd	r31, Y+4	; 0x04
    1172:	20 81       	ld	r18, Z
    1174:	31 81       	ldd	r19, Z+1	; 0x01
    1176:	fc 01       	movw	r30, r24
    1178:	ee 0f       	add	r30, r30
    117a:	ff 1f       	adc	r31, r31
    117c:	ee 0f       	add	r30, r30
    117e:	ff 1f       	adc	r31, r31
    1180:	8e 0f       	add	r24, r30
    1182:	9f 1f       	adc	r25, r31
    1184:	fc 01       	movw	r30, r24
    1186:	e5 5b       	subi	r30, 0xB5	; 181
    1188:	fd 4f       	sbci	r31, 0xFD	; 253
    118a:	34 83       	std	Z+4, r19	; 0x04
    118c:	23 83       	std	Z+3, r18	; 0x03
    118e:	eb 81       	ldd	r30, Y+3	; 0x03
    1190:	fc 81       	ldd	r31, Y+4	; 0x04
    1192:	ec 5f       	subi	r30, 0xFC	; 252
    1194:	fe 4f       	sbci	r31, 0xFE	; 254
    1196:	85 e0       	ldi	r24, 0x05	; 5
    1198:	80 83       	st	Z, r24
    119a:	4b e3       	ldi	r20, 0x3B	; 59
    119c:	52 e0       	ldi	r21, 0x02	; 2
    119e:	65 e1       	ldi	r22, 0x15	; 21
    11a0:	75 e1       	ldi	r23, 0x15	; 21
    11a2:	89 e4       	ldi	r24, 0x49	; 73
    11a4:	92 e0       	ldi	r25, 0x02	; 2
    11a6:	54 d3       	rcall	.+1704   	; 0x1850 <enqueueRQ>
    11a8:	94 db       	rcall	.-2264   	; 0x8d2 <Dispatch>
    11aa:	e0 91 49 02 	lds	r30, 0x0249
    11ae:	f0 91 4a 02 	lds	r31, 0x024A
    11b2:	80 81       	ld	r24, Z
    11b4:	91 81       	ldd	r25, Z+1	; 0x01
    11b6:	02 97       	sbiw	r24, 0x02	; 2
    11b8:	20 f4       	brcc	.+8      	; 0x11c2 <OS_Start+0x650>
    11ba:	82 e0       	ldi	r24, 0x02	; 2
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	79 d9       	rcall	.-3342   	; 0x4b2 <enable_LED>
    11c0:	25 cd       	rjmp	.-1462   	; 0xc0c <OS_Start+0x9a>
    11c2:	80 81       	ld	r24, Z
    11c4:	91 81       	ldd	r25, Z+1	; 0x01
    11c6:	02 97       	sbiw	r24, 0x02	; 2
    11c8:	21 f4       	brne	.+8      	; 0x11d2 <OS_Start+0x660>
    11ca:	85 e0       	ldi	r24, 0x05	; 5
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	71 d9       	rcall	.-3358   	; 0x4b2 <enable_LED>
    11d0:	1d cd       	rjmp	.-1478   	; 0xc0c <OS_Start+0x9a>
    11d2:	80 81       	ld	r24, Z
    11d4:	91 81       	ldd	r25, Z+1	; 0x01
    11d6:	03 97       	sbiw	r24, 0x03	; 3
    11d8:	09 f0       	breq	.+2      	; 0x11dc <OS_Start+0x66a>
    11da:	18 cd       	rjmp	.-1488   	; 0xc0c <OS_Start+0x9a>
    11dc:	86 e0       	ldi	r24, 0x06	; 6
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	68 d9       	rcall	.-3376   	; 0x4b2 <enable_LED>
    11e2:	14 cd       	rjmp	.-1496   	; 0xc0c <OS_Start+0x9a>
    11e4:	eb 81       	ldd	r30, Y+3	; 0x03
    11e6:	fc 81       	ldd	r31, Y+4	; 0x04
    11e8:	e8 5e       	subi	r30, 0xE8	; 232
    11ea:	fe 4f       	sbci	r31, 0xFE	; 254
    11ec:	40 81       	ld	r20, Z
    11ee:	51 81       	ldd	r21, Z+1	; 0x01
    11f0:	d7 01       	movw	r26, r14
    11f2:	8d 91       	ld	r24, X+
    11f4:	9c 91       	ld	r25, X
    11f6:	48 17       	cp	r20, r24
    11f8:	59 07       	cpc	r21, r25
    11fa:	09 f4       	brne	.+2      	; 0x11fe <OS_Start+0x68c>
    11fc:	97 c0       	rjmp	.+302    	; 0x132c <OS_Start+0x7ba>
    11fe:	f7 01       	movw	r30, r14
    1200:	c4 01       	movw	r24, r8
    1202:	6b 81       	ldd	r22, Y+3	; 0x03
    1204:	7c 81       	ldd	r23, Y+4	; 0x04
    1206:	25 81       	ldd	r18, Z+5	; 0x05
    1208:	36 81       	ldd	r19, Z+6	; 0x06
    120a:	42 17       	cp	r20, r18
    120c:	53 07       	cpc	r21, r19
    120e:	09 f4       	brne	.+2      	; 0x1212 <OS_Start+0x6a0>
    1210:	90 c0       	rjmp	.+288    	; 0x1332 <OS_Start+0x7c0>
    1212:	01 96       	adiw	r24, 0x01	; 1
    1214:	35 96       	adiw	r30, 0x05	; 5
    1216:	88 30       	cpi	r24, 0x08	; 8
    1218:	91 05       	cpc	r25, r1
    121a:	a9 f7       	brne	.-22     	; 0x1206 <OS_Start+0x694>
    121c:	f7 cc       	rjmp	.-1554   	; 0xc0c <OS_Start+0x9a>
    121e:	80 81       	ld	r24, Z
    1220:	91 81       	ldd	r25, Z+1	; 0x01
    1222:	48 17       	cp	r20, r24
    1224:	59 07       	cpc	r21, r25
    1226:	09 f4       	brne	.+2      	; 0x122a <OS_Start+0x6b8>
    1228:	97 c0       	rjmp	.+302    	; 0x1358 <OS_Start+0x7e6>
    122a:	2f 5f       	subi	r18, 0xFF	; 255
    122c:	3f 4f       	sbci	r19, 0xFF	; 255
    122e:	e2 5e       	subi	r30, 0xE2	; 226
    1230:	fe 4f       	sbci	r31, 0xFE	; 254
    1232:	20 31       	cpi	r18, 0x10	; 16
    1234:	31 05       	cpc	r19, r1
    1236:	99 f7       	brne	.-26     	; 0x121e <OS_Start+0x6ac>
    1238:	cb 01       	movw	r24, r22
    123a:	fb 01       	movw	r30, r22
    123c:	ee 0f       	add	r30, r30
    123e:	ff 1f       	adc	r31, r31
    1240:	ee 0f       	add	r30, r30
    1242:	ff 1f       	adc	r31, r31
    1244:	8e 0f       	add	r24, r30
    1246:	9f 1f       	adc	r25, r31
    1248:	fc 01       	movw	r30, r24
    124a:	e5 5b       	subi	r30, 0xB5	; 181
    124c:	fd 4f       	sbci	r31, 0xFD	; 253
    124e:	82 e0       	ldi	r24, 0x02	; 2
    1250:	82 83       	std	Z+2, r24	; 0x02
    1252:	dc cc       	rjmp	.-1608   	; 0xc0c <OS_Start+0x9a>
    1254:	2a 9d       	mul	r18, r10
    1256:	f0 01       	movw	r30, r0
    1258:	2b 9d       	mul	r18, r11
    125a:	f0 0d       	add	r31, r0
    125c:	3a 9d       	mul	r19, r10
    125e:	f0 0d       	add	r31, r0
    1260:	11 24       	eor	r1, r1
    1262:	eb 53       	subi	r30, 0x3B	; 59
    1264:	fc 4f       	sbci	r31, 0xFC	; 252
    1266:	80 81       	ld	r24, Z
    1268:	91 81       	ldd	r25, Z+1	; 0x01
    126a:	89 2b       	or	r24, r25
    126c:	09 f0       	breq	.+2      	; 0x1270 <OS_Start+0x6fe>
    126e:	ce cc       	rjmp	.-1636   	; 0xc0c <OS_Start+0x9a>
    1270:	eb 81       	ldd	r30, Y+3	; 0x03
    1272:	fc 81       	ldd	r31, Y+4	; 0x04
    1274:	ec 5f       	subi	r30, 0xFC	; 252
    1276:	fe 4f       	sbci	r31, 0xFE	; 254
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	80 83       	st	Z, r24
    127c:	4b e3       	ldi	r20, 0x3B	; 59
    127e:	52 e0       	ldi	r21, 0x02	; 2
    1280:	65 e1       	ldi	r22, 0x15	; 21
    1282:	75 e1       	ldi	r23, 0x15	; 21
    1284:	89 e4       	ldi	r24, 0x49	; 73
    1286:	92 e0       	ldi	r25, 0x02	; 2
    1288:	e3 d2       	rcall	.+1478   	; 0x1850 <enqueueRQ>
    128a:	23 db       	rcall	.-2490   	; 0x8d2 <Dispatch>
    128c:	bf cc       	rjmp	.-1666   	; 0xc0c <OS_Start+0x9a>
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <OS_Start+0x726>
    1294:	7c 83       	std	Y+4, r23	; 0x04
    1296:	6b 83       	std	Y+3, r22	; 0x03
    1298:	8a 9d       	mul	r24, r10
    129a:	f0 01       	movw	r30, r0
    129c:	8b 9d       	mul	r24, r11
    129e:	f0 0d       	add	r31, r0
    12a0:	9a 9d       	mul	r25, r10
    12a2:	f0 0d       	add	r31, r0
    12a4:	11 24       	eor	r1, r1
    12a6:	eb 53       	subi	r30, 0x3B	; 59
    12a8:	fc 4f       	sbci	r31, 0xFC	; 252
    12aa:	91 82       	std	Z+1, r9	; 0x01
    12ac:	80 82       	st	Z, r8
    12ae:	63 cd       	rjmp	.-1338   	; 0xd76 <OS_Start+0x204>
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <OS_Start+0x748>
    12b6:	7c 83       	std	Y+4, r23	; 0x04
    12b8:	6b 83       	std	Y+3, r22	; 0x03
    12ba:	8a 9d       	mul	r24, r10
    12bc:	f0 01       	movw	r30, r0
    12be:	8b 9d       	mul	r24, r11
    12c0:	f0 0d       	add	r31, r0
    12c2:	9a 9d       	mul	r25, r10
    12c4:	f0 0d       	add	r31, r0
    12c6:	11 24       	eor	r1, r1
    12c8:	eb 53       	subi	r30, 0x3B	; 59
    12ca:	fc 4f       	sbci	r31, 0xFC	; 252
    12cc:	20 81       	ld	r18, Z
    12ce:	31 81       	ldd	r19, Z+1	; 0x01
    12d0:	21 30       	cpi	r18, 0x01	; 1
    12d2:	31 05       	cpc	r19, r1
    12d4:	09 f0       	breq	.+2      	; 0x12d8 <OS_Start+0x766>
    12d6:	9a cc       	rjmp	.-1740   	; 0xc0c <OS_Start+0x9a>
    12d8:	7f cd       	rjmp	.-1282   	; 0xdd8 <OS_Start+0x266>
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <OS_Start+0x772>
    12e0:	7c 83       	std	Y+4, r23	; 0x04
    12e2:	6b 83       	std	Y+3, r22	; 0x03
    12e4:	fc 01       	movw	r30, r24
    12e6:	ee 0f       	add	r30, r30
    12e8:	ff 1f       	adc	r31, r31
    12ea:	ee 0f       	add	r30, r30
    12ec:	ff 1f       	adc	r31, r31
    12ee:	ee 0f       	add	r30, r30
    12f0:	ff 1f       	adc	r31, r31
    12f2:	e8 1b       	sub	r30, r24
    12f4:	f9 0b       	sbc	r31, r25
    12f6:	ed 58       	subi	r30, 0x8D	; 141
    12f8:	fd 4f       	sbci	r31, 0xFD	; 253
    12fa:	22 81       	ldd	r18, Z+2	; 0x02
    12fc:	21 30       	cpi	r18, 0x01	; 1
    12fe:	09 f0       	breq	.+2      	; 0x1302 <OS_Start+0x790>
    1300:	55 ce       	rjmp	.-854    	; 0xfac <OS_Start+0x43a>
    1302:	3b ce       	rjmp	.-906    	; 0xf7a <OS_Start+0x408>
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	02 c0       	rjmp	.+4      	; 0x130e <OS_Start+0x79c>
    130a:	7c 83       	std	Y+4, r23	; 0x04
    130c:	6b 83       	std	Y+3, r22	; 0x03
    130e:	fc 01       	movw	r30, r24
    1310:	ee 0f       	add	r30, r30
    1312:	ff 1f       	adc	r31, r31
    1314:	ee 0f       	add	r30, r30
    1316:	ff 1f       	adc	r31, r31
    1318:	e8 0f       	add	r30, r24
    131a:	f9 1f       	adc	r31, r25
    131c:	e5 5b       	subi	r30, 0xB5	; 181
    131e:	fd 4f       	sbci	r31, 0xFD	; 253
    1320:	23 81       	ldd	r18, Z+3	; 0x03
    1322:	34 81       	ldd	r19, Z+4	; 0x04
    1324:	23 2b       	or	r18, r19
    1326:	09 f0       	breq	.+2      	; 0x132a <OS_Start+0x7b8>
    1328:	40 cf       	rjmp	.-384    	; 0x11aa <OS_Start+0x638>
    132a:	02 cf       	rjmp	.-508    	; 0x1130 <OS_Start+0x5be>
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <OS_Start+0x7c4>
    1332:	7c 83       	std	Y+4, r23	; 0x04
    1334:	6b 83       	std	Y+3, r22	; 0x03
    1336:	e1 ec       	ldi	r30, 0xC1	; 193
    1338:	f3 e0       	ldi	r31, 0x03	; 3
    133a:	20 81       	ld	r18, Z
    133c:	31 81       	ldd	r19, Z+1	; 0x01
    133e:	42 17       	cp	r20, r18
    1340:	53 07       	cpc	r21, r19
    1342:	39 f0       	breq	.+14     	; 0x1352 <OS_Start+0x7e0>
    1344:	ef ed       	ldi	r30, 0xDF	; 223
    1346:	f4 e0       	ldi	r31, 0x04	; 4
    1348:	94 01       	movw	r18, r8
    134a:	ab 81       	ldd	r26, Y+3	; 0x03
    134c:	bc 81       	ldd	r27, Y+4	; 0x04
    134e:	bc 01       	movw	r22, r24
    1350:	66 cf       	rjmp	.-308    	; 0x121e <OS_Start+0x6ac>
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	03 c0       	rjmp	.+6      	; 0x135e <OS_Start+0x7ec>
    1358:	bc 83       	std	Y+4, r27	; 0x04
    135a:	ab 83       	std	Y+3, r26	; 0x03
    135c:	cb 01       	movw	r24, r22
    135e:	2a 9d       	mul	r18, r10
    1360:	a0 01       	movw	r20, r0
    1362:	2b 9d       	mul	r18, r11
    1364:	50 0d       	add	r21, r0
    1366:	3a 9d       	mul	r19, r10
    1368:	50 0d       	add	r21, r0
    136a:	11 24       	eor	r1, r1
    136c:	45 55       	subi	r20, 0x55	; 85
    136e:	5d 4f       	sbci	r21, 0xFD	; 253
    1370:	fa 01       	movw	r30, r20
    1372:	ec 5f       	subi	r30, 0xFC	; 252
    1374:	fe 4f       	sbci	r31, 0xFE	; 254
    1376:	61 e0       	ldi	r22, 0x01	; 1
    1378:	60 83       	st	Z, r22
    137a:	72 96       	adiw	r30, 0x12	; 18
    137c:	31 82       	std	Z+1, r3	; 0x01
    137e:	20 82       	st	Z, r2
    1380:	fc 01       	movw	r30, r24
    1382:	ee 0f       	add	r30, r30
    1384:	ff 1f       	adc	r31, r31
    1386:	ee 0f       	add	r30, r30
    1388:	ff 1f       	adc	r31, r31
    138a:	8e 0f       	add	r24, r30
    138c:	9f 1f       	adc	r25, r31
    138e:	fc 01       	movw	r30, r24
    1390:	e5 5b       	subi	r30, 0xB5	; 181
    1392:	fd 4f       	sbci	r31, 0xFD	; 253
    1394:	14 82       	std	Z+4, r1	; 0x04
    1396:	13 82       	std	Z+3, r1	; 0x03
    1398:	eb 81       	ldd	r30, Y+3	; 0x03
    139a:	fc 81       	ldd	r31, Y+4	; 0x04
    139c:	e9 5f       	subi	r30, 0xF9	; 249
    139e:	fe 4f       	sbci	r31, 0xFE	; 254
    13a0:	80 81       	ld	r24, Z
    13a2:	91 81       	ldd	r25, Z+1	; 0x01
    13a4:	fa 01       	movw	r30, r20
    13a6:	e9 5f       	subi	r30, 0xF9	; 249
    13a8:	fe 4f       	sbci	r31, 0xFE	; 254
    13aa:	40 81       	ld	r20, Z
    13ac:	51 81       	ldd	r21, Z+1	; 0x01
    13ae:	48 17       	cp	r20, r24
    13b0:	59 07       	cpc	r21, r25
    13b2:	08 f4       	brcc	.+2      	; 0x13b6 <OS_Start+0x844>
    13b4:	4f cf       	rjmp	.-354    	; 0x1254 <OS_Start+0x6e2>
    13b6:	2a cc       	rjmp	.-1964   	; 0xc0c <OS_Start+0x9a>
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	df 91       	pop	r29
    13c2:	cf 91       	pop	r28
    13c4:	1f 91       	pop	r17
    13c6:	0f 91       	pop	r16
    13c8:	ff 90       	pop	r15
    13ca:	ef 90       	pop	r14
    13cc:	df 90       	pop	r13
    13ce:	cf 90       	pop	r12
    13d0:	bf 90       	pop	r11
    13d2:	af 90       	pop	r10
    13d4:	9f 90       	pop	r9
    13d6:	8f 90       	pop	r8
    13d8:	7f 90       	pop	r7
    13da:	6f 90       	pop	r6
    13dc:	5f 90       	pop	r5
    13de:	4f 90       	pop	r4
    13e0:	3f 90       	pop	r3
    13e2:	2f 90       	pop	r2
    13e4:	08 95       	ret

000013e6 <Mutex_Init>:
    13e6:	80 91 47 02 	lds	r24, 0x0247
    13ea:	90 91 48 02 	lds	r25, 0x0248
    13ee:	89 2b       	or	r24, r25
    13f0:	a1 f0       	breq	.+40     	; 0x141a <Mutex_Init+0x34>
    13f2:	f8 94       	cli
    13f4:	e0 91 49 02 	lds	r30, 0x0249
    13f8:	f0 91 4a 02 	lds	r31, 0x024A
    13fc:	e3 5f       	subi	r30, 0xF3	; 243
    13fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1400:	87 e0       	ldi	r24, 0x07	; 7
    1402:	80 83       	st	Z, r24
    1404:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    1408:	e0 91 49 02 	lds	r30, 0x0249
    140c:	f0 91 4a 02 	lds	r31, 0x024A
    1410:	e2 5f       	subi	r30, 0xF2	; 242
    1412:	fe 4f       	sbci	r31, 0xFE	; 254
    1414:	80 81       	ld	r24, Z
    1416:	91 81       	ldd	r25, Z+1	; 0x01
    1418:	08 95       	ret
    141a:	08 95       	ret

0000141c <Event_Init>:
    141c:	80 91 47 02 	lds	r24, 0x0247
    1420:	90 91 48 02 	lds	r25, 0x0248
    1424:	89 2b       	or	r24, r25
    1426:	a1 f0       	breq	.+40     	; 0x1450 <Event_Init+0x34>
    1428:	f8 94       	cli
    142a:	e0 91 49 02 	lds	r30, 0x0249
    142e:	f0 91 4a 02 	lds	r31, 0x024A
    1432:	e3 5f       	subi	r30, 0xF3	; 243
    1434:	fe 4f       	sbci	r31, 0xFE	; 254
    1436:	8a e0       	ldi	r24, 0x0A	; 10
    1438:	80 83       	st	Z, r24
    143a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    143e:	e0 91 49 02 	lds	r30, 0x0249
    1442:	f0 91 4a 02 	lds	r31, 0x024A
    1446:	e2 5f       	subi	r30, 0xF2	; 242
    1448:	fe 4f       	sbci	r31, 0xFE	; 254
    144a:	80 81       	ld	r24, Z
    144c:	91 81       	ldd	r25, Z+1	; 0x01
    144e:	08 95       	ret
    1450:	08 95       	ret

00001452 <Task_Create>:
    1452:	20 91 47 02 	lds	r18, 0x0247
    1456:	30 91 48 02 	lds	r19, 0x0248
    145a:	23 2b       	or	r18, r19
    145c:	f1 f0       	breq	.+60     	; 0x149a <Task_Create+0x48>
    145e:	f8 94       	cli
    1460:	20 91 49 02 	lds	r18, 0x0249
    1464:	30 91 4a 02 	lds	r19, 0x024A
    1468:	f9 01       	movw	r30, r18
    146a:	e3 5f       	subi	r30, 0xF3	; 243
    146c:	fe 4f       	sbci	r31, 0xFE	; 254
    146e:	a1 e0       	ldi	r26, 0x01	; 1
    1470:	a0 83       	st	Z, r26
    1472:	32 97       	sbiw	r30, 0x02	; 2
    1474:	91 83       	std	Z+1, r25	; 0x01
    1476:	80 83       	st	Z, r24
    1478:	36 97       	sbiw	r30, 0x06	; 6
    147a:	71 83       	std	Z+1, r23	; 0x01
    147c:	60 83       	st	Z, r22
    147e:	34 96       	adiw	r30, 0x04	; 4
    1480:	51 83       	std	Z+1, r21	; 0x01
    1482:	40 83       	st	Z, r20
    1484:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    1488:	e0 91 49 02 	lds	r30, 0x0249
    148c:	f0 91 4a 02 	lds	r31, 0x024A
    1490:	e2 5f       	subi	r30, 0xF2	; 242
    1492:	fe 4f       	sbci	r31, 0xFE	; 254
    1494:	80 81       	ld	r24, Z
    1496:	91 81       	ldd	r25, Z+1	; 0x01
    1498:	08 95       	ret
    149a:	62 c9       	rjmp	.-3388   	; 0x760 <Kernel_Create_Task>
    149c:	08 95       	ret

0000149e <Task_Next>:
    149e:	80 91 47 02 	lds	r24, 0x0247
    14a2:	90 91 48 02 	lds	r25, 0x0248
    14a6:	89 2b       	or	r24, r25
    14a8:	59 f0       	breq	.+22     	; 0x14c0 <Task_Next+0x22>
    14aa:	f8 94       	cli
    14ac:	e0 91 49 02 	lds	r30, 0x0249
    14b0:	f0 91 4a 02 	lds	r31, 0x024A
    14b4:	e3 5f       	subi	r30, 0xF3	; 243
    14b6:	fe 4f       	sbci	r31, 0xFE	; 254
    14b8:	82 e0       	ldi	r24, 0x02	; 2
    14ba:	80 83       	st	Z, r24
    14bc:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <Enter_Kernel>
    14c0:	08 95       	ret

000014c2 <setup>:
  * Setup pins and timers
  */
void setup() {
	/** For testing */
	/** pin 47 */
	init_LED_PORTL_pin2();
    14c2:	0e 94 47 02 	call	0x48e	; 0x48e <init_LED_PORTL_pin2>

	/** pin 43 */
	init_LED_PORTL_pin6();
    14c6:	0e 94 53 02 	call	0x4a6	; 0x4a6 <init_LED_PORTL_pin6>

	/** pin 44 */
	init_LED_PORTL_pin5();
    14ca:	0e 94 4d 02 	call	0x49a	; 0x49a <init_LED_PORTL_pin5>

	/** pin 49 */
	init_LED_PORTL_pin0();
    14ce:	0e 94 3b 02 	call	0x476	; 0x476 <init_LED_PORTL_pin0>

	/** pin 48 */
	init_LED_PORTL_pin1();
    14d2:	0e 94 41 02 	call	0x482	; 0x482 <init_LED_PORTL_pin1>

	/** initialize Timer1 16 bit timer */
	Disable_Interrupt();
    14d6:	f8 94       	cli

	/** Timer 1 */
	TCCR1A = 0;                 /** Set TCCR1A register to 0 */
    14d8:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;                 /** Set TCCR1B register to 0 */
    14dc:	e1 e8       	ldi	r30, 0x81	; 129
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	10 82       	st	Z, r1

	TCNT1 = 0;                  /** Initialize counter to 0 */
    14e2:	10 92 85 00 	sts	0x0085, r1
    14e6:	10 92 84 00 	sts	0x0084, r1

	OCR1A = 624;                /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
    14ea:	80 e7       	ldi	r24, 0x70	; 112
    14ec:	92 e0       	ldi	r25, 0x02	; 2
    14ee:	90 93 89 00 	sts	0x0089, r25
    14f2:	80 93 88 00 	sts	0x0088, r24

	TCCR1B |= (1 << WGM12);     /** Turns on CTC mode (TOP is now OCR1A) */
    14f6:	80 81       	ld	r24, Z
    14f8:	88 60       	ori	r24, 0x08	; 8
    14fa:	80 83       	st	Z, r24

	TCCR1B |= (1 << CS12);      /** Prescaler 256 */
    14fc:	80 81       	ld	r24, Z
    14fe:	84 60       	ori	r24, 0x04	; 4
    1500:	80 83       	st	Z, r24

	TIMSK1 |= (1 << OCIE1A);    /** Enable timer compare interrupt */
    1502:	ef e6       	ldi	r30, 0x6F	; 111
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	82 60       	ori	r24, 0x02	; 2
    150a:	80 83       	st	Z, r24

	/** Timer 3 */
	TCCR3A = 0;                 /** Set TCCR0A register to 0 */
    150c:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0;                 /** Set TCCR0B register to 0 */
    1510:	e1 e9       	ldi	r30, 0x91	; 145
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	10 82       	st	Z, r1

	TCNT3 = 0;                  /** Initialize counter to 0 */
    1516:	10 92 95 00 	sts	0x0095, r1
    151a:	10 92 94 00 	sts	0x0094, r1

	OCR3A = 62499;              /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
    151e:	83 e2       	ldi	r24, 0x23	; 35
    1520:	94 ef       	ldi	r25, 0xF4	; 244
    1522:	90 93 99 00 	sts	0x0099, r25
    1526:	80 93 98 00 	sts	0x0098, r24

	TCCR3B |= (1 << WGM32);     /** Turns on CTC mode (TOP is now OCR1A) */
    152a:	80 81       	ld	r24, Z
    152c:	88 60       	ori	r24, 0x08	; 8
    152e:	80 83       	st	Z, r24

	TCCR3B |= (1 << CS32);      /** Prescaler 1024 */
    1530:	80 81       	ld	r24, Z
    1532:	84 60       	ori	r24, 0x04	; 4
    1534:	80 83       	st	Z, r24

	TIMSK3 = (1 << OCIE3A);
    1536:	82 e0       	ldi	r24, 0x02	; 2
    1538:	80 93 71 00 	sts	0x0071, r24

	Enable_Interrupt();
    153c:	78 94       	sei
    153e:	08 95       	ret

00001540 <__vector_17>:
}

/**
  * ISR for timer1
  */
ISR(TIMER1_COMPA_vect) {
    1540:	1f 92       	push	r1
    1542:	0f 92       	push	r0
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	0f 92       	push	r0
    1548:	11 24       	eor	r1, r1
    154a:	0b b6       	in	r0, 0x3b	; 59
    154c:	0f 92       	push	r0
    154e:	df 92       	push	r13
    1550:	ef 92       	push	r14
    1552:	ff 92       	push	r15
    1554:	0f 93       	push	r16
    1556:	1f 93       	push	r17
    1558:	2f 93       	push	r18
    155a:	3f 93       	push	r19
    155c:	4f 93       	push	r20
    155e:	5f 93       	push	r21
    1560:	6f 93       	push	r22
    1562:	7f 93       	push	r23
    1564:	8f 93       	push	r24
    1566:	9f 93       	push	r25
    1568:	af 93       	push	r26
    156a:	bf 93       	push	r27
    156c:	ef 93       	push	r30
    156e:	ff 93       	push	r31
    1570:	cf 93       	push	r28
    1572:	df 93       	push	r29
    1574:	00 d0       	rcall	.+0      	; 0x1576 <__vector_17+0x36>
    1576:	1f 92       	push	r1
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
    157c:	80 91 39 02 	lds	r24, 0x0239
    1580:	90 91 3a 02 	lds	r25, 0x023A
    1584:	01 97       	sbiw	r24, 0x01	; 1
    1586:	9a 83       	std	Y+2, r25	; 0x02
    1588:	89 83       	std	Y+1, r24	; 0x01
    158a:	89 81       	ldd	r24, Y+1	; 0x01
    158c:	9a 81       	ldd	r25, Y+2	; 0x02
    158e:	99 23       	and	r25, r25
    1590:	0c f4       	brge	.+2      	; 0x1594 <__vector_17+0x54>
    1592:	7c c0       	rjmp	.+248    	; 0x168c <__vector_17+0x14c>
		if ((SleepQueue[i]->wakeTickOverflow <= tickOverflowCount) && (SleepQueue[i]->wakeTick <= (TCNT3/625))) {
    1594:	e9 81       	ldd	r30, Y+1	; 0x01
    1596:	fa 81       	ldd	r31, Y+2	; 0x02
    1598:	ee 0f       	add	r30, r30
    159a:	ff 1f       	adc	r31, r31
    159c:	eb 50       	subi	r30, 0x0B	; 11
    159e:	fb 4e       	sbci	r31, 0xEB	; 235
    15a0:	01 90       	ld	r0, Z+
    15a2:	f0 81       	ld	r31, Z
    15a4:	e0 2d       	mov	r30, r0
    15a6:	e0 5f       	subi	r30, 0xF0	; 240
    15a8:	fe 4f       	sbci	r31, 0xFE	; 254
    15aa:	20 81       	ld	r18, Z
    15ac:	31 81       	ldd	r19, Z+1	; 0x01
    15ae:	80 91 3d 02 	lds	r24, 0x023D
    15b2:	90 91 3e 02 	lds	r25, 0x023E
    15b6:	82 17       	cp	r24, r18
    15b8:	93 07       	cpc	r25, r19
    15ba:	08 f4       	brcc	.+2      	; 0x15be <__vector_17+0x7e>
    15bc:	67 c0       	rjmp	.+206    	; 0x168c <__vector_17+0x14c>
    15be:	e9 81       	ldd	r30, Y+1	; 0x01
    15c0:	fa 81       	ldd	r31, Y+2	; 0x02
    15c2:	ee 0f       	add	r30, r30
    15c4:	ff 1f       	adc	r31, r31
    15c6:	eb 50       	subi	r30, 0x0B	; 11
    15c8:	fb 4e       	sbci	r31, 0xEB	; 235
    15ca:	01 90       	ld	r0, Z+
    15cc:	f0 81       	ld	r31, Z
    15ce:	e0 2d       	mov	r30, r0
    15d0:	ee 5e       	subi	r30, 0xEE	; 238
    15d2:	fe 4f       	sbci	r31, 0xFE	; 254
    15d4:	20 81       	ld	r18, Z
    15d6:	31 81       	ldd	r19, Z+1	; 0x01
    15d8:	80 91 94 00 	lds	r24, 0x0094
    15dc:	90 91 95 00 	lds	r25, 0x0095
    15e0:	61 e7       	ldi	r22, 0x71	; 113
    15e2:	72 e0       	ldi	r23, 0x02	; 2
    15e4:	a0 d4       	rcall	.+2368   	; 0x1f26 <__udivmodhi4>
    15e6:	62 17       	cp	r22, r18
    15e8:	73 07       	cpc	r23, r19
    15ea:	58 f5       	brcc	.+86     	; 0x1642 <__vector_17+0x102>
    15ec:	4f c0       	rjmp	.+158    	; 0x168c <__vector_17+0x14c>
    15ee:	e9 81       	ldd	r30, Y+1	; 0x01
    15f0:	fa 81       	ldd	r31, Y+2	; 0x02
    15f2:	ee 0f       	add	r30, r30
    15f4:	ff 1f       	adc	r31, r31
    15f6:	eb 50       	subi	r30, 0x0B	; 11
    15f8:	fb 4e       	sbci	r31, 0xEB	; 235
    15fa:	01 90       	ld	r0, Z+
    15fc:	f0 81       	ld	r31, Z
    15fe:	e0 2d       	mov	r30, r0
    1600:	e0 5f       	subi	r30, 0xF0	; 240
    1602:	fe 4f       	sbci	r31, 0xFE	; 254
    1604:	20 81       	ld	r18, Z
    1606:	31 81       	ldd	r19, Z+1	; 0x01
    1608:	80 91 3d 02 	lds	r24, 0x023D
    160c:	90 91 3e 02 	lds	r25, 0x023E
    1610:	82 17       	cp	r24, r18
    1612:	93 07       	cpc	r25, r19
    1614:	d8 f1       	brcs	.+118    	; 0x168c <__vector_17+0x14c>
    1616:	e9 81       	ldd	r30, Y+1	; 0x01
    1618:	fa 81       	ldd	r31, Y+2	; 0x02
    161a:	ee 0f       	add	r30, r30
    161c:	ff 1f       	adc	r31, r31
    161e:	eb 50       	subi	r30, 0x0B	; 11
    1620:	fb 4e       	sbci	r31, 0xEB	; 235
    1622:	01 90       	ld	r0, Z+
    1624:	f0 81       	ld	r31, Z
    1626:	e0 2d       	mov	r30, r0
    1628:	ee 5e       	subi	r30, 0xEE	; 238
    162a:	fe 4f       	sbci	r31, 0xFE	; 254
    162c:	20 81       	ld	r18, Z
    162e:	31 81       	ldd	r19, Z+1	; 0x01
    1630:	f7 01       	movw	r30, r14
    1632:	80 81       	ld	r24, Z
    1634:	91 81       	ldd	r25, Z+1	; 0x01
    1636:	b8 01       	movw	r22, r16
    1638:	76 d4       	rcall	.+2284   	; 0x1f26 <__udivmodhi4>
    163a:	62 17       	cp	r22, r18
    163c:	73 07       	cpc	r23, r19
    163e:	50 f4       	brcc	.+20     	; 0x1654 <__vector_17+0x114>
    1640:	25 c0       	rjmp	.+74     	; 0x168c <__vector_17+0x14c>
			volatile PD *p = dequeue(&SleepQueue, &SQCount);
			p->state = READY;
    1642:	dd 24       	eor	r13, r13
    1644:	d3 94       	inc	r13
ISR(TIMER1_COMPA_vect) {

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
		if ((SleepQueue[i]->wakeTickOverflow <= tickOverflowCount) && (SleepQueue[i]->wakeTick <= (TCNT3/625))) {
    1646:	0f 2e       	mov	r0, r31
    1648:	f4 e9       	ldi	r31, 0x94	; 148
    164a:	ef 2e       	mov	r14, r31
    164c:	f1 2c       	mov	r15, r1
    164e:	f0 2d       	mov	r31, r0
    1650:	01 e7       	ldi	r16, 0x71	; 113
    1652:	12 e0       	ldi	r17, 0x02	; 2
			volatile PD *p = dequeue(&SleepQueue, &SQCount);
    1654:	69 e3       	ldi	r22, 0x39	; 57
    1656:	72 e0       	ldi	r23, 0x02	; 2
    1658:	85 ef       	ldi	r24, 0xF5	; 245
    165a:	94 e1       	ldi	r25, 0x14	; 20
    165c:	1c d2       	rcall	.+1080   	; 0x1a96 <dequeue>
    165e:	9c 83       	std	Y+4, r25	; 0x04
    1660:	8b 83       	std	Y+3, r24	; 0x03
			p->state = READY;
    1662:	fc 01       	movw	r30, r24
    1664:	ec 5f       	subi	r30, 0xFC	; 252
    1666:	fe 4f       	sbci	r31, 0xFE	; 254
    1668:	d0 82       	st	Z, r13
			enqueueRQ(&p, &ReadyQueue, &RQCount);
    166a:	4b e3       	ldi	r20, 0x3B	; 59
    166c:	52 e0       	ldi	r21, 0x02	; 2
    166e:	65 e1       	ldi	r22, 0x15	; 21
    1670:	75 e1       	ldi	r23, 0x15	; 21
    1672:	ce 01       	movw	r24, r28
    1674:	03 96       	adiw	r24, 0x03	; 3
    1676:	ec d0       	rcall	.+472    	; 0x1850 <enqueueRQ>
  */
ISR(TIMER1_COMPA_vect) {

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	9a 81       	ldd	r25, Y+2	; 0x02
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	9a 83       	std	Y+2, r25	; 0x02
    1680:	89 83       	std	Y+1, r24	; 0x01
    1682:	89 81       	ldd	r24, Y+1	; 0x01
    1684:	9a 81       	ldd	r25, Y+2	; 0x02
    1686:	99 23       	and	r25, r25
    1688:	0c f0       	brlt	.+2      	; 0x168c <__vector_17+0x14c>
    168a:	b1 cf       	rjmp	.-158    	; 0x15ee <__vector_17+0xae>
		else {
			break;
		}
	}

	Task_Next();
    168c:	08 df       	rcall	.-496    	; 0x149e <Task_Next>
}
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	df 91       	pop	r29
    1698:	cf 91       	pop	r28
    169a:	ff 91       	pop	r31
    169c:	ef 91       	pop	r30
    169e:	bf 91       	pop	r27
    16a0:	af 91       	pop	r26
    16a2:	9f 91       	pop	r25
    16a4:	8f 91       	pop	r24
    16a6:	7f 91       	pop	r23
    16a8:	6f 91       	pop	r22
    16aa:	5f 91       	pop	r21
    16ac:	4f 91       	pop	r20
    16ae:	3f 91       	pop	r19
    16b0:	2f 91       	pop	r18
    16b2:	1f 91       	pop	r17
    16b4:	0f 91       	pop	r16
    16b6:	ff 90       	pop	r15
    16b8:	ef 90       	pop	r14
    16ba:	df 90       	pop	r13
    16bc:	0f 90       	pop	r0
    16be:	0b be       	out	0x3b, r0	; 59
    16c0:	0f 90       	pop	r0
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	0f 90       	pop	r0
    16c6:	1f 90       	pop	r1
    16c8:	18 95       	reti

000016ca <__vector_32>:

/**
  * ISR for timer3
  */
ISR(TIMER3_COMPA_vect) {
    16ca:	1f 92       	push	r1
    16cc:	0f 92       	push	r0
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	0f 92       	push	r0
    16d2:	11 24       	eor	r1, r1
    16d4:	8f 93       	push	r24
    16d6:	9f 93       	push	r25
	tickOverflowCount += 1;
    16d8:	80 91 3d 02 	lds	r24, 0x023D
    16dc:	90 91 3e 02 	lds	r25, 0x023E
    16e0:	01 96       	adiw	r24, 0x01	; 1
    16e2:	90 93 3e 02 	sts	0x023E, r25
    16e6:	80 93 3d 02 	sts	0x023D, r24
}
    16ea:	9f 91       	pop	r25
    16ec:	8f 91       	pop	r24
    16ee:	0f 90       	pop	r0
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	0f 90       	pop	r0
    16f4:	1f 90       	pop	r1
    16f6:	18 95       	reti

000016f8 <main>:

/**
  * This function boots the OS and creates the first task: a_main
  */
void main() {
	setup();
    16f8:	e4 de       	rcall	.-568    	; 0x14c2 <setup>
	
	OS_Init();
    16fa:	8e d8       	rcall	.-3812   	; 0x818 <OS_Init>
	Task_Create(a_main, 1, 1);
    16fc:	41 e0       	ldi	r20, 0x01	; 1
    16fe:	50 e0       	ldi	r21, 0x00	; 0
    1700:	61 e0       	ldi	r22, 0x01	; 1
    1702:	70 e0       	ldi	r23, 0x00	; 0
    1704:	84 ed       	ldi	r24, 0xD4	; 212
    1706:	92 e0       	ldi	r25, 0x02	; 2
    1708:	a4 de       	rcall	.-696    	; 0x1452 <Task_Create>
	OS_Start();
    170a:	33 ca       	rjmp	.-2970   	; 0xb72 <OS_Start>
    170c:	08 95       	ret

0000170e <enqueueWQ>:
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
}

void enqueueWQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    170e:	cf 93       	push	r28
    1710:	df 93       	push	r29
    1712:	ea 01       	movw	r28, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    1714:	28 81       	ld	r18, Y
    1716:	39 81       	ldd	r19, Y+1	; 0x01
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
}

void enqueueWQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    1718:	2f 30       	cpi	r18, 0x0F	; 15
    171a:	31 05       	cpc	r19, r1
    171c:	29 f1       	breq	.+74     	; 0x1768 <enqueueWQ+0x5a>
        return;
    }

    int i = (*QCount) - 1;
    171e:	e8 81       	ld	r30, Y
    1720:	f9 81       	ldd	r31, Y+1	; 0x01
    1722:	9f 01       	movw	r18, r30
    1724:	21 50       	subi	r18, 0x01	; 1
    1726:	31 09       	sbc	r19, r1

    while(i >= 0) {
    1728:	72 f0       	brmi	.+28     	; 0x1746 <enqueueWQ+0x38>
    172a:	ee 0f       	add	r30, r30
    172c:	ff 1f       	adc	r31, r31
    172e:	e6 0f       	add	r30, r22
    1730:	f7 1f       	adc	r31, r23
    1732:	db 01       	movw	r26, r22
        Queue[i+1] = Queue[i];
    1734:	32 91       	ld	r19, -Z
    1736:	22 91       	ld	r18, -Z
    1738:	33 83       	std	Z+3, r19	; 0x03
    173a:	22 83       	std	Z+2, r18	; 0x02
        return;
    }

    int i = (*QCount) - 1;

    while(i >= 0) {
    173c:	ea 17       	cp	r30, r26
    173e:	fb 07       	cpc	r31, r27
    1740:	c9 f7       	brne	.-14     	; 0x1734 <enqueueWQ+0x26>
        Queue[i+1] = Queue[i];
        i--;
    1742:	2f ef       	ldi	r18, 0xFF	; 255
    1744:	3f ef       	ldi	r19, 0xFF	; 255
    }

    Queue[i+1] = *p;
    1746:	fc 01       	movw	r30, r24
    1748:	80 81       	ld	r24, Z
    174a:	91 81       	ldd	r25, Z+1	; 0x01
    174c:	2f 5f       	subi	r18, 0xFF	; 255
    174e:	3f 4f       	sbci	r19, 0xFF	; 255
    1750:	22 0f       	add	r18, r18
    1752:	33 1f       	adc	r19, r19
    1754:	fb 01       	movw	r30, r22
    1756:	e2 0f       	add	r30, r18
    1758:	f3 1f       	adc	r31, r19
    175a:	91 83       	std	Z+1, r25	; 0x01
    175c:	80 83       	st	Z, r24
    (*QCount)++;
    175e:	88 81       	ld	r24, Y
    1760:	99 81       	ldd	r25, Y+1	; 0x01
    1762:	01 96       	adiw	r24, 0x01	; 1
    1764:	99 83       	std	Y+1, r25	; 0x01
    1766:	88 83       	st	Y, r24
}
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	08 95       	ret

0000176e <enqueueSQ>:

void enqueueSQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    176e:	cf 92       	push	r12
    1770:	df 92       	push	r13
    1772:	ef 92       	push	r14
    1774:	ff 92       	push	r15
    1776:	0f 93       	push	r16
    1778:	1f 93       	push	r17
    177a:	cf 93       	push	r28
    177c:	df 93       	push	r29

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    177e:	ea 01       	movw	r28, r20
    1780:	28 81       	ld	r18, Y
    1782:	39 81       	ldd	r19, Y+1	; 0x01
    Queue[i+1] = *p;
    (*QCount)++;
}

void enqueueSQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    1784:	2f 30       	cpi	r18, 0x0F	; 15
    1786:	31 05       	cpc	r19, r1
    1788:	09 f4       	brne	.+2      	; 0x178c <enqueueSQ+0x1e>
    178a:	59 c0       	rjmp	.+178    	; 0x183e <enqueueSQ+0xd0>
        return;
    }

    int i = (*QCount) - 1;
    178c:	a8 81       	ld	r26, Y
    178e:	b9 81       	ldd	r27, Y+1	; 0x01
    1790:	11 97       	sbiw	r26, 0x01	; 1

    volatile PD *new = *p;
    1792:	fc 01       	movw	r30, r24
    1794:	c0 80       	ld	r12, Z
    1796:	d1 80       	ldd	r13, Z+1	; 0x01

    volatile PD *temp = Queue[i];
    1798:	fd 01       	movw	r30, r26
    179a:	ee 0f       	add	r30, r30
    179c:	ff 1f       	adc	r31, r31
    179e:	eb 01       	movw	r28, r22
    17a0:	ce 0f       	add	r28, r30
    17a2:	df 1f       	adc	r29, r31
    17a4:	28 81       	ld	r18, Y
    17a6:	39 81       	ldd	r19, Y+1	; 0x01

    while(i >= 0 && ((new->wakeTickOverflow > temp->wakeTickOverflow) || ((new->wakeTickOverflow >= temp->wakeTickOverflow) && (new->wakeTick >= temp->wakeTick)))) {
    17a8:	bb 23       	and	r27, r27
    17aa:	cc f1       	brlt	.+114    	; 0x181e <enqueueSQ+0xb0>
    17ac:	fe 01       	movw	r30, r28
    17ae:	76 01       	movw	r14, r12
    17b0:	c0 ef       	ldi	r28, 0xF0	; 240
    17b2:	ec 1a       	sub	r14, r28
    17b4:	ce ef       	ldi	r28, 0xFE	; 254
    17b6:	fc 0a       	sbc	r15, r28
    17b8:	de ee       	ldi	r29, 0xEE	; 238
    17ba:	cd 1a       	sub	r12, r29
    17bc:	de ef       	ldi	r29, 0xFE	; 254
    17be:	dd 0a       	sbc	r13, r29
    17c0:	0b c0       	rjmp	.+22     	; 0x17d8 <enqueueSQ+0x6a>
        Queue[i+1] = Queue[i];
    17c2:	20 81       	ld	r18, Z
    17c4:	31 81       	ldd	r19, Z+1	; 0x01
    17c6:	33 83       	std	Z+3, r19	; 0x03
    17c8:	22 83       	std	Z+2, r18	; 0x02
        i--;
    17ca:	11 97       	sbiw	r26, 0x01	; 1
        temp = Queue[i];
    17cc:	32 91       	ld	r19, -Z
    17ce:	22 91       	ld	r18, -Z

    volatile PD *new = *p;

    volatile PD *temp = Queue[i];

    while(i >= 0 && ((new->wakeTickOverflow > temp->wakeTickOverflow) || ((new->wakeTickOverflow >= temp->wakeTickOverflow) && (new->wakeTick >= temp->wakeTick)))) {
    17d0:	af 3f       	cpi	r26, 0xFF	; 255
    17d2:	cf ef       	ldi	r28, 0xFF	; 255
    17d4:	bc 07       	cpc	r27, r28
    17d6:	19 f1       	breq	.+70     	; 0x181e <enqueueSQ+0xb0>
    17d8:	e7 01       	movw	r28, r14
    17da:	08 81       	ld	r16, Y
    17dc:	19 81       	ldd	r17, Y+1	; 0x01
    17de:	e9 01       	movw	r28, r18
    17e0:	c0 5f       	subi	r28, 0xF0	; 240
    17e2:	de 4f       	sbci	r29, 0xFE	; 254
    17e4:	09 90       	ld	r0, Y+
    17e6:	d8 81       	ld	r29, Y
    17e8:	c0 2d       	mov	r28, r0
    17ea:	c0 17       	cp	r28, r16
    17ec:	d1 07       	cpc	r29, r17
    17ee:	48 f3       	brcs	.-46     	; 0x17c2 <enqueueSQ+0x54>
    17f0:	e7 01       	movw	r28, r14
    17f2:	08 81       	ld	r16, Y
    17f4:	19 81       	ldd	r17, Y+1	; 0x01
    17f6:	e9 01       	movw	r28, r18
    17f8:	c0 5f       	subi	r28, 0xF0	; 240
    17fa:	de 4f       	sbci	r29, 0xFE	; 254
    17fc:	09 90       	ld	r0, Y+
    17fe:	d8 81       	ld	r29, Y
    1800:	c0 2d       	mov	r28, r0
    1802:	0c 17       	cp	r16, r28
    1804:	1d 07       	cpc	r17, r29
    1806:	58 f0       	brcs	.+22     	; 0x181e <enqueueSQ+0xb0>
    1808:	e6 01       	movw	r28, r12
    180a:	08 81       	ld	r16, Y
    180c:	19 81       	ldd	r17, Y+1	; 0x01
    180e:	2e 5e       	subi	r18, 0xEE	; 238
    1810:	3e 4f       	sbci	r19, 0xFE	; 254
    1812:	e9 01       	movw	r28, r18
    1814:	28 81       	ld	r18, Y
    1816:	39 81       	ldd	r19, Y+1	; 0x01
    1818:	02 17       	cp	r16, r18
    181a:	13 07       	cpc	r17, r19
    181c:	90 f6       	brcc	.-92     	; 0x17c2 <enqueueSQ+0x54>
        Queue[i+1] = Queue[i];
        i--;
        temp = Queue[i];
    }

    Queue[i+1] = *p;
    181e:	fc 01       	movw	r30, r24
    1820:	80 81       	ld	r24, Z
    1822:	91 81       	ldd	r25, Z+1	; 0x01
    1824:	11 96       	adiw	r26, 0x01	; 1
    1826:	aa 0f       	add	r26, r26
    1828:	bb 1f       	adc	r27, r27
    182a:	a6 0f       	add	r26, r22
    182c:	b7 1f       	adc	r27, r23
    182e:	8d 93       	st	X+, r24
    1830:	9c 93       	st	X, r25
    (*QCount)++;
    1832:	ea 01       	movw	r28, r20
    1834:	88 81       	ld	r24, Y
    1836:	99 81       	ldd	r25, Y+1	; 0x01
    1838:	01 96       	adiw	r24, 0x01	; 1
    183a:	99 83       	std	Y+1, r25	; 0x01
    183c:	88 83       	st	Y, r24
}
    183e:	df 91       	pop	r29
    1840:	cf 91       	pop	r28
    1842:	1f 91       	pop	r17
    1844:	0f 91       	pop	r16
    1846:	ff 90       	pop	r15
    1848:	ef 90       	pop	r14
    184a:	df 90       	pop	r13
    184c:	cf 90       	pop	r12
    184e:	08 95       	ret

00001850 <enqueueRQ>:

/*
 *  Insert into the queue sorted by priority
 */
void enqueueRQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    1850:	cf 92       	push	r12
    1852:	df 92       	push	r13
    1854:	ef 92       	push	r14
    1856:	ff 92       	push	r15
    1858:	0f 93       	push	r16
    185a:	1f 93       	push	r17
    185c:	cf 93       	push	r28
    185e:	df 93       	push	r29
    1860:	6a 01       	movw	r12, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    1862:	ea 01       	movw	r28, r20
    1864:	28 81       	ld	r18, Y
    1866:	39 81       	ldd	r19, Y+1	; 0x01

/*
 *  Insert into the queue sorted by priority
 */
void enqueueRQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    1868:	2f 30       	cpi	r18, 0x0F	; 15
    186a:	31 05       	cpc	r19, r1
    186c:	09 f4       	brne	.+2      	; 0x1870 <enqueueRQ+0x20>
    186e:	4a c0       	rjmp	.+148    	; 0x1904 <enqueueRQ+0xb4>
        return;
    }

    int i = (*QCount) - 1;
    1870:	28 81       	ld	r18, Y
    1872:	39 81       	ldd	r19, Y+1	; 0x01
    1874:	21 50       	subi	r18, 0x01	; 1
    1876:	31 09       	sbc	r19, r1

    volatile PD *new = *p;
    1878:	fc 01       	movw	r30, r24
    187a:	00 81       	ld	r16, Z
    187c:	11 81       	ldd	r17, Z+1	; 0x01

    volatile PD *temp = Queue[i];
    187e:	f9 01       	movw	r30, r18
    1880:	ee 0f       	add	r30, r30
    1882:	ff 1f       	adc	r31, r31
    1884:	db 01       	movw	r26, r22
    1886:	ae 0f       	add	r26, r30
    1888:	bf 1f       	adc	r27, r31
    188a:	4d 91       	ld	r20, X+
    188c:	5c 91       	ld	r21, X

    while(i >= 0 && (new->inheritedPy >= temp->inheritedPy)) {
    188e:	33 23       	and	r19, r19
    1890:	3c f1       	brlt	.+78     	; 0x18e0 <enqueueRQ+0x90>
    1892:	d8 01       	movw	r26, r16
    1894:	a9 5f       	subi	r26, 0xF9	; 249
    1896:	be 4f       	sbci	r27, 0xFE	; 254
    1898:	ed 90       	ld	r14, X+
    189a:	fc 90       	ld	r15, X
    189c:	da 01       	movw	r26, r20
    189e:	a9 5f       	subi	r26, 0xF9	; 249
    18a0:	be 4f       	sbci	r27, 0xFE	; 254
    18a2:	4d 91       	ld	r20, X+
    18a4:	5c 91       	ld	r21, X
    18a6:	e4 16       	cp	r14, r20
    18a8:	f5 06       	cpc	r15, r21
    18aa:	d0 f0       	brcs	.+52     	; 0x18e0 <enqueueRQ+0x90>
    18ac:	e6 0f       	add	r30, r22
    18ae:	f7 1f       	adc	r31, r23
    18b0:	09 5f       	subi	r16, 0xF9	; 249
    18b2:	1e 4f       	sbci	r17, 0xFE	; 254
        Queue[i+1] = Queue[i];
    18b4:	a0 81       	ld	r26, Z
    18b6:	b1 81       	ldd	r27, Z+1	; 0x01
    18b8:	b3 83       	std	Z+3, r27	; 0x03
    18ba:	a2 83       	std	Z+2, r26	; 0x02
        i--;
    18bc:	21 50       	subi	r18, 0x01	; 1
    18be:	31 09       	sbc	r19, r1
        temp = Queue[i];
    18c0:	b2 91       	ld	r27, -Z
    18c2:	a2 91       	ld	r26, -Z

    volatile PD *new = *p;

    volatile PD *temp = Queue[i];

    while(i >= 0 && (new->inheritedPy >= temp->inheritedPy)) {
    18c4:	2f 3f       	cpi	r18, 0xFF	; 255
    18c6:	4f ef       	ldi	r20, 0xFF	; 255
    18c8:	34 07       	cpc	r19, r20
    18ca:	51 f0       	breq	.+20     	; 0x18e0 <enqueueRQ+0x90>
    18cc:	e8 01       	movw	r28, r16
    18ce:	e8 80       	ld	r14, Y
    18d0:	f9 80       	ldd	r15, Y+1	; 0x01
    18d2:	a9 5f       	subi	r26, 0xF9	; 249
    18d4:	be 4f       	sbci	r27, 0xFE	; 254
    18d6:	4d 91       	ld	r20, X+
    18d8:	5c 91       	ld	r21, X
    18da:	e4 16       	cp	r14, r20
    18dc:	f5 06       	cpc	r15, r21
    18de:	50 f7       	brcc	.-44     	; 0x18b4 <enqueueRQ+0x64>
        Queue[i+1] = Queue[i];
        i--;
        temp = Queue[i];
    }

    Queue[i+1] = *p;
    18e0:	fc 01       	movw	r30, r24
    18e2:	80 81       	ld	r24, Z
    18e4:	91 81       	ldd	r25, Z+1	; 0x01
    18e6:	2f 5f       	subi	r18, 0xFF	; 255
    18e8:	3f 4f       	sbci	r19, 0xFF	; 255
    18ea:	22 0f       	add	r18, r18
    18ec:	33 1f       	adc	r19, r19
    18ee:	fb 01       	movw	r30, r22
    18f0:	e2 0f       	add	r30, r18
    18f2:	f3 1f       	adc	r31, r19
    18f4:	91 83       	std	Z+1, r25	; 0x01
    18f6:	80 83       	st	Z, r24
    (*QCount)++;
    18f8:	e6 01       	movw	r28, r12
    18fa:	88 81       	ld	r24, Y
    18fc:	99 81       	ldd	r25, Y+1	; 0x01
    18fe:	01 96       	adiw	r24, 0x01	; 1
    1900:	99 83       	std	Y+1, r25	; 0x01
    1902:	88 83       	st	Y, r24
}
    1904:	df 91       	pop	r29
    1906:	cf 91       	pop	r28
    1908:	1f 91       	pop	r17
    190a:	0f 91       	pop	r16
    190c:	ff 90       	pop	r15
    190e:	ef 90       	pop	r14
    1910:	df 90       	pop	r13
    1912:	cf 90       	pop	r12
    1914:	08 95       	ret

00001916 <dequeueWQ>:

/*
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {
    1916:	0f 93       	push	r16
    1918:	1f 93       	push	r17
    191a:	cf 93       	push	r28
    191c:	df 93       	push	r29

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    191e:	eb 01       	movw	r28, r22
    1920:	28 81       	ld	r18, Y
    1922:	39 81       	ldd	r19, Y+1	; 0x01
/*
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {

    if(isEmpty(QCount)) {
    1924:	23 2b       	or	r18, r19
    1926:	09 f4       	brne	.+2      	; 0x192a <dequeueWQ+0x14>
    1928:	54 c0       	rjmp	.+168    	; 0x19d2 <dequeueWQ+0xbc>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
    192a:	28 81       	ld	r18, Y
    192c:	39 81       	ldd	r19, Y+1	; 0x01
    192e:	21 50       	subi	r18, 0x01	; 1
    1930:	31 09       	sbc	r19, r1
    1932:	0a f4       	brpl	.+2      	; 0x1936 <dequeueWQ+0x20>
    1934:	51 c0       	rjmp	.+162    	; 0x19d8 <dequeueWQ+0xc2>
        if(Queue[i]->m == m){
    1936:	e9 01       	movw	r28, r18
    1938:	cc 0f       	add	r28, r28
    193a:	dd 1f       	adc	r29, r29
    193c:	fc 01       	movw	r30, r24
    193e:	ec 0f       	add	r30, r28
    1940:	fd 1f       	adc	r31, r29
    1942:	a0 81       	ld	r26, Z
    1944:	b1 81       	ldd	r27, Z+1	; 0x01
    1946:	fd 01       	movw	r30, r26
    1948:	ec 5e       	subi	r30, 0xEC	; 236
    194a:	fe 4f       	sbci	r31, 0xFE	; 254
    194c:	01 90       	ld	r0, Z+
    194e:	f0 81       	ld	r31, Z
    1950:	e0 2d       	mov	r30, r0
    1952:	e4 17       	cp	r30, r20
    1954:	f5 07       	cpc	r31, r21
    1956:	81 f4       	brne	.+32     	; 0x1978 <dequeueWQ+0x62>
    1958:	0a c0       	rjmp	.+20     	; 0x196e <dequeueWQ+0x58>
    195a:	ba 91       	ld	r27, -Y
    195c:	aa 91       	ld	r26, -Y
    195e:	fd 01       	movw	r30, r26
    1960:	ec 5e       	subi	r30, 0xEC	; 236
    1962:	fe 4f       	sbci	r31, 0xFE	; 254
    1964:	00 81       	ld	r16, Z
    1966:	11 81       	ldd	r17, Z+1	; 0x01
    1968:	04 17       	cp	r16, r20
    196a:	15 07       	cpc	r17, r21
    196c:	39 f4       	brne	.+14     	; 0x197c <dequeueWQ+0x66>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
    196e:	10 97       	sbiw	r26, 0x00	; 0
    1970:	59 f4       	brne	.+22     	; 0x1988 <dequeueWQ+0x72>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	32 c0       	rjmp	.+100    	; 0x19dc <dequeueWQ+0xc6>
    1978:	c8 0f       	add	r28, r24
    197a:	d9 1f       	adc	r29, r25
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
    197c:	21 50       	subi	r18, 0x01	; 1
    197e:	31 09       	sbc	r19, r1
    1980:	60 f7       	brcc	.-40     	; 0x195a <dequeueWQ+0x44>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	2a c0       	rjmp	.+84     	; 0x19dc <dequeueWQ+0xc6>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i<(*QCount)-1) {
    1988:	eb 01       	movw	r28, r22
    198a:	48 81       	ld	r20, Y
    198c:	59 81       	ldd	r21, Y+1	; 0x01
    198e:	41 50       	subi	r20, 0x01	; 1
    1990:	51 09       	sbc	r21, r1
    1992:	24 17       	cp	r18, r20
    1994:	35 07       	cpc	r19, r21
    1996:	a4 f4       	brge	.+40     	; 0x19c0 <dequeueWQ+0xaa>
    1998:	a9 01       	movw	r20, r18
    199a:	44 0f       	add	r20, r20
    199c:	55 1f       	adc	r21, r21
    199e:	fc 01       	movw	r30, r24
    19a0:	e4 0f       	add	r30, r20
    19a2:	f5 1f       	adc	r31, r21
            Queue[i] = Queue[i+1];
    19a4:	82 81       	ldd	r24, Z+2	; 0x02
    19a6:	93 81       	ldd	r25, Z+3	; 0x03
    19a8:	81 93       	st	Z+, r24
    19aa:	91 93       	st	Z+, r25
            i++;
    19ac:	2f 5f       	subi	r18, 0xFF	; 255
    19ae:	3f 4f       	sbci	r19, 0xFF	; 255
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i<(*QCount)-1) {
    19b0:	eb 01       	movw	r28, r22
    19b2:	48 81       	ld	r20, Y
    19b4:	59 81       	ldd	r21, Y+1	; 0x01
    19b6:	41 50       	subi	r20, 0x01	; 1
    19b8:	51 09       	sbc	r21, r1
    19ba:	24 17       	cp	r18, r20
    19bc:	35 07       	cpc	r19, r21
    19be:	94 f3       	brlt	.-28     	; 0x19a4 <dequeueWQ+0x8e>
            Queue[i] = Queue[i+1];
            i++;
        }
        (*QCount)--;
    19c0:	fb 01       	movw	r30, r22
    19c2:	80 81       	ld	r24, Z
    19c4:	91 81       	ldd	r25, Z+1	; 0x01
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	91 83       	std	Z+1, r25	; 0x01
    19ca:	80 83       	st	Z, r24

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
        if(Queue[i]->m == m){
            result = Queue[i];
    19cc:	8a 2f       	mov	r24, r26
    19ce:	9b 2f       	mov	r25, r27
    19d0:	05 c0       	rjmp	.+10     	; 0x19dc <dequeueWQ+0xc6>
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {

    if(isEmpty(QCount)) {
        return NULL;
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <dequeueWQ+0xc6>
            i++;
        }
        (*QCount)--;
    }

    return result;
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	90 e0       	ldi	r25, 0x00	; 0
}
    19dc:	df 91       	pop	r29
    19de:	cf 91       	pop	r28
    19e0:	1f 91       	pop	r17
    19e2:	0f 91       	pop	r16
    19e4:	08 95       	ret

000019e6 <dequeueRQ>:

/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {
    19e6:	cf 93       	push	r28
    19e8:	df 93       	push	r29
    19ea:	eb 01       	movw	r28, r22

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    19ec:	28 81       	ld	r18, Y
    19ee:	39 81       	ldd	r19, Y+1	; 0x01
/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
    19f0:	23 2b       	or	r18, r19
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <dequeueRQ+0x10>
    19f4:	48 c0       	rjmp	.+144    	; 0x1a86 <dequeueRQ+0xa0>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
    19f6:	e8 81       	ld	r30, Y
    19f8:	f9 81       	ldd	r31, Y+1	; 0x01
    19fa:	9f 01       	movw	r18, r30
    19fc:	21 50       	subi	r18, 0x01	; 1
    19fe:	31 09       	sbc	r19, r1
    1a00:	0a f4       	brpl	.+2      	; 0x1a04 <dequeueRQ+0x1e>
    1a02:	44 c0       	rjmp	.+136    	; 0x1a8c <dequeueRQ+0xa6>
    1a04:	ee 0f       	add	r30, r30
    1a06:	ff 1f       	adc	r31, r31
    1a08:	e8 0f       	add	r30, r24
    1a0a:	f9 1f       	adc	r31, r25
        if((Queue[i]->suspended == 0) && (Queue[i]->state == READY)) {
    1a0c:	52 91       	ld	r21, -Z
    1a0e:	42 91       	ld	r20, -Z
    1a10:	da 01       	movw	r26, r20
    1a12:	a6 5e       	subi	r26, 0xE6	; 230
    1a14:	be 4f       	sbci	r27, 0xFE	; 254
    1a16:	6d 91       	ld	r22, X+
    1a18:	7c 91       	ld	r23, X
    1a1a:	11 97       	sbiw	r26, 0x01	; 1
    1a1c:	67 2b       	or	r22, r23
    1a1e:	59 f4       	brne	.+22     	; 0x1a36 <dequeueRQ+0x50>
    1a20:	56 97       	sbiw	r26, 0x16	; 22
    1a22:	6c 91       	ld	r22, X
    1a24:	61 30       	cpi	r22, 0x01	; 1
    1a26:	39 f4       	brne	.+14     	; 0x1a36 <dequeueRQ+0x50>
    1a28:	f9 01       	movw	r30, r18
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
    1a2a:	41 15       	cp	r20, r1
    1a2c:	51 05       	cpc	r21, r1
    1a2e:	49 f4       	brne	.+18     	; 0x1a42 <dequeueRQ+0x5c>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	2d c0       	rjmp	.+90     	; 0x1a90 <dequeueRQ+0xaa>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
    1a36:	21 50       	subi	r18, 0x01	; 1
    1a38:	31 09       	sbc	r19, r1
    1a3a:	40 f7       	brcc	.-48     	; 0x1a0c <dequeueRQ+0x26>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	27 c0       	rjmp	.+78     	; 0x1a90 <dequeueRQ+0xaa>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i < (*QCount)-1) {
    1a42:	68 81       	ld	r22, Y
    1a44:	79 81       	ldd	r23, Y+1	; 0x01
    1a46:	61 50       	subi	r22, 0x01	; 1
    1a48:	71 09       	sbc	r23, r1
    1a4a:	26 17       	cp	r18, r22
    1a4c:	37 07       	cpc	r19, r23
    1a4e:	9c f4       	brge	.+38     	; 0x1a76 <dequeueRQ+0x90>
    1a50:	ee 0f       	add	r30, r30
    1a52:	ff 1f       	adc	r31, r31
    1a54:	dc 01       	movw	r26, r24
    1a56:	ae 0f       	add	r26, r30
    1a58:	bf 1f       	adc	r27, r31
            Queue[i] = Queue[i+1];
    1a5a:	12 96       	adiw	r26, 0x02	; 2
    1a5c:	8d 91       	ld	r24, X+
    1a5e:	9c 91       	ld	r25, X
    1a60:	13 97       	sbiw	r26, 0x03	; 3
    1a62:	8d 93       	st	X+, r24
    1a64:	9d 93       	st	X+, r25
            i++;
    1a66:	2f 5f       	subi	r18, 0xFF	; 255
    1a68:	3f 4f       	sbci	r19, 0xFF	; 255
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i < (*QCount)-1) {
    1a6a:	e8 81       	ld	r30, Y
    1a6c:	f9 81       	ldd	r31, Y+1	; 0x01
    1a6e:	31 97       	sbiw	r30, 0x01	; 1
    1a70:	2e 17       	cp	r18, r30
    1a72:	3f 07       	cpc	r19, r31
    1a74:	94 f3       	brlt	.-28     	; 0x1a5a <dequeueRQ+0x74>
            Queue[i] = Queue[i+1];
            i++;
        }
        (*QCount)--;
    1a76:	88 81       	ld	r24, Y
    1a78:	99 81       	ldd	r25, Y+1	; 0x01
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	99 83       	std	Y+1, r25	; 0x01
    1a7e:	88 83       	st	Y, r24
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
        if((Queue[i]->suspended == 0) && (Queue[i]->state == READY)) {
    1a80:	84 2f       	mov	r24, r20
    1a82:	95 2f       	mov	r25, r21
    1a84:	05 c0       	rjmp	.+10     	; 0x1a90 <dequeueRQ+0xaa>
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
        return NULL;
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <dequeueRQ+0xaa>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
}
    1a90:	df 91       	pop	r29
    1a92:	cf 91       	pop	r28
    1a94:	08 95       	ret

00001a96 <dequeue>:

/*
 *  Return the first element of the queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
    1a96:	db 01       	movw	r26, r22

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    1a98:	2d 91       	ld	r18, X+
    1a9a:	3c 91       	ld	r19, X
    1a9c:	11 97       	sbiw	r26, 0x01	; 1
/*
 *  Return the first element of the queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
    1a9e:	23 2b       	or	r18, r19
    1aa0:	a9 f0       	breq	.+42     	; 0x1acc <dequeue+0x36>
        return;
    }

    volatile PD *result = (Queue[(*QCount)-1]);
    1aa2:	2d 91       	ld	r18, X+
    1aa4:	3c 91       	ld	r19, X
    1aa6:	11 97       	sbiw	r26, 0x01	; 1
    1aa8:	f9 01       	movw	r30, r18
    1aaa:	e1 50       	subi	r30, 0x01	; 1
    1aac:	f0 48       	sbci	r31, 0x80	; 128
    1aae:	ee 0f       	add	r30, r30
    1ab0:	ff 1f       	adc	r31, r31
    1ab2:	e8 0f       	add	r30, r24
    1ab4:	f9 1f       	adc	r31, r25
    1ab6:	80 81       	ld	r24, Z
    1ab8:	91 81       	ldd	r25, Z+1	; 0x01
    (*QCount)--;
    1aba:	2d 91       	ld	r18, X+
    1abc:	3c 91       	ld	r19, X
    1abe:	11 97       	sbiw	r26, 0x01	; 1
    1ac0:	21 50       	subi	r18, 0x01	; 1
    1ac2:	31 09       	sbc	r19, r1
    1ac4:	11 96       	adiw	r26, 0x01	; 1
    1ac6:	3c 93       	st	X, r19
    1ac8:	2e 93       	st	-X, r18
    1aca:	08 95       	ret

    return result;
}
    1acc:	08 95       	ret

00001ace <_get_status>:
	}

	wh = (16 - weight) * 100;
	wh /= 16;
	return wh;
}
    1ace:	2d 98       	cbi	0x05, 5	; 5
    1ad0:	8f ef       	ldi	r24, 0xFF	; 255
    1ad2:	04 d1       	rcall	.+520    	; 0x1cdc <SPI_Write_Byte>
    1ad4:	2d 9a       	sbi	0x05, 5	; 5
    1ad6:	08 95       	ret

00001ad8 <_set_register>:
    1ad8:	0f 93       	push	r16
    1ada:	1f 93       	push	r17
    1adc:	cf 93       	push	r28
    1ade:	df 93       	push	r29
    1ae0:	8b 01       	movw	r16, r22
    1ae2:	d4 2f       	mov	r29, r20
    1ae4:	2d 98       	cbi	0x05, 5	; 5
    1ae6:	8f 71       	andi	r24, 0x1F	; 31
    1ae8:	80 62       	ori	r24, 0x20	; 32
    1aea:	f8 d0       	rcall	.+496    	; 0x1cdc <SPI_Write_Byte>
    1aec:	c8 2f       	mov	r28, r24
    1aee:	6d 2f       	mov	r22, r29
    1af0:	c8 01       	movw	r24, r16
    1af2:	e1 d0       	rcall	.+450    	; 0x1cb6 <SPI_Write_Block>
    1af4:	2d 9a       	sbi	0x05, 5	; 5
    1af6:	8c 2f       	mov	r24, r28
    1af8:	df 91       	pop	r29
    1afa:	cf 91       	pop	r28
    1afc:	1f 91       	pop	r17
    1afe:	0f 91       	pop	r16
    1b00:	08 95       	ret

00001b02 <_get_register>:
    1b02:	0f 93       	push	r16
    1b04:	1f 93       	push	r17
    1b06:	cf 93       	push	r28
    1b08:	df 93       	push	r29
    1b0a:	eb 01       	movw	r28, r22
    1b0c:	14 2f       	mov	r17, r20
    1b0e:	44 23       	and	r20, r20
    1b10:	69 f0       	breq	.+26     	; 0x1b2c <_get_register+0x2a>
    1b12:	fb 01       	movw	r30, r22
    1b14:	2f ef       	ldi	r18, 0xFF	; 255
    1b16:	24 0f       	add	r18, r20
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	2f 5f       	subi	r18, 0xFF	; 255
    1b1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1e:	26 0f       	add	r18, r22
    1b20:	37 1f       	adc	r19, r23
    1b22:	9f ef       	ldi	r25, 0xFF	; 255
    1b24:	91 93       	st	Z+, r25
    1b26:	e2 17       	cp	r30, r18
    1b28:	f3 07       	cpc	r31, r19
    1b2a:	e1 f7       	brne	.-8      	; 0x1b24 <_get_register+0x22>
    1b2c:	2d 98       	cbi	0x05, 5	; 5
    1b2e:	8f 71       	andi	r24, 0x1F	; 31
    1b30:	d5 d0       	rcall	.+426    	; 0x1cdc <SPI_Write_Byte>
    1b32:	08 2f       	mov	r16, r24
    1b34:	41 2f       	mov	r20, r17
    1b36:	be 01       	movw	r22, r28
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	a5 d0       	rcall	.+330    	; 0x1c88 <SPI_ReadWrite_Block>
    1b3e:	2d 9a       	sbi	0x05, 5	; 5
    1b40:	80 2f       	mov	r24, r16
    1b42:	df 91       	pop	r29
    1b44:	cf 91       	pop	r28
    1b46:	1f 91       	pop	r17
    1b48:	0f 91       	pop	r16
    1b4a:	08 95       	ret

00001b4c <_set_rx_mode>:
    1b4c:	cf 93       	push	r28
    1b4e:	df 93       	push	r29
    1b50:	1f 92       	push	r1
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
    1b56:	41 e0       	ldi	r20, 0x01	; 1
    1b58:	be 01       	movw	r22, r28
    1b5a:	6f 5f       	subi	r22, 0xFF	; 255
    1b5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	d0 df       	rcall	.-96     	; 0x1b02 <_get_register>
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	80 fd       	sbrc	r24, 0
    1b66:	10 c0       	rjmp	.+32     	; 0x1b88 <_set_rx_mode+0x3c>
    1b68:	81 60       	ori	r24, 0x01	; 1
    1b6a:	89 83       	std	Y+1, r24	; 0x01
    1b6c:	41 e0       	ldi	r20, 0x01	; 1
    1b6e:	be 01       	movw	r22, r28
    1b70:	6f 5f       	subi	r22, 0xFF	; 255
    1b72:	7f 4f       	sbci	r23, 0xFF	; 255
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	b0 df       	rcall	.-160    	; 0x1ad8 <_set_register>
    1b78:	85 e1       	ldi	r24, 0x15	; 21
    1b7a:	8a 95       	dec	r24
    1b7c:	f1 f7       	brne	.-4      	; 0x1b7a <_set_rx_mode+0x2e>
    1b7e:	00 c0       	rjmp	.+0      	; 0x1b80 <_set_rx_mode+0x34>
    1b80:	85 e1       	ldi	r24, 0x15	; 21
    1b82:	8a 95       	dec	r24
    1b84:	f1 f7       	brne	.-4      	; 0x1b82 <_set_rx_mode+0x36>
    1b86:	00 c0       	rjmp	.+0      	; 0x1b88 <_set_rx_mode+0x3c>
    1b88:	0f 90       	pop	r0
    1b8a:	df 91       	pop	r29
    1b8c:	cf 91       	pop	r28
    1b8e:	08 95       	ret

00001b90 <_reset_pipe0_address>:
    1b90:	80 91 09 02 	lds	r24, 0x0209
    1b94:	88 23       	and	r24, r24
    1b96:	29 f0       	breq	.+10     	; 0x1ba2 <_reset_pipe0_address+0x12>
    1b98:	45 e0       	ldi	r20, 0x05	; 5
    1b9a:	64 e0       	ldi	r22, 0x04	; 4
    1b9c:	72 e0       	ldi	r23, 0x02	; 2
    1b9e:	8a e0       	ldi	r24, 0x0A	; 10
    1ba0:	9b cf       	rjmp	.-202    	; 0x1ad8 <_set_register>
    1ba2:	08 95       	ret

00001ba4 <__vector_1>:

// Interrupt handler
ISR(INT0_vect)
{
    1ba4:	1f 92       	push	r1
    1ba6:	0f 92       	push	r0
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	0f 92       	push	r0
    1bac:	11 24       	eor	r1, r1
    1bae:	0b b6       	in	r0, 0x3b	; 59
    1bb0:	0f 92       	push	r0
    1bb2:	2f 93       	push	r18
    1bb4:	3f 93       	push	r19
    1bb6:	4f 93       	push	r20
    1bb8:	5f 93       	push	r21
    1bba:	6f 93       	push	r22
    1bbc:	7f 93       	push	r23
    1bbe:	8f 93       	push	r24
    1bc0:	9f 93       	push	r25
    1bc2:	af 93       	push	r26
    1bc4:	bf 93       	push	r27
    1bc6:	ef 93       	push	r30
    1bc8:	ff 93       	push	r31
    1bca:	cf 93       	push	r28
    1bcc:	df 93       	push	r29
    1bce:	1f 92       	push	r1
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;
    uint8_t pipe_number;

    RADIO_CE_LOW();
    1bd4:	2c 98       	cbi	0x05, 4	; 5

    status = _get_status();
    1bd6:	7b df       	rcall	.-266    	; 0x1ace <_get_status>
    1bd8:	89 83       	std	Y+1, r24	; 0x01

    if (status & _BV(RX_DR)) {
    1bda:	86 ff       	sbrs	r24, 6
    1bdc:	04 c0       	rjmp	.+8      	; 0x1be6 <__vector_1+0x42>
        pipe_number =  (status & 0xE) >> 1;
    1bde:	8e 70       	andi	r24, 0x0E	; 14
        radio_rxhandler(pipe_number);
    1be0:	86 95       	lsr	r24
    1be2:	0e 94 66 01 	call	0x2cc	; 0x2cc <radio_rxhandler>
    }

    // We can get the TX_DS or the MAX_RT interrupt, but not both.
    if (status & _BV(TX_DS)) {
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	85 ff       	sbrs	r24, 5
    1bea:	1b c0       	rjmp	.+54     	; 0x1c22 <__vector_1+0x7e>
    	// if there's nothing left to transmit, switch back to receive mode.
        transmit_lock = 0;
    1bec:	10 92 59 15 	sts	0x1559, r1
        _reset_pipe0_address();
    1bf0:	cf df       	rcall	.-98     	; 0x1b90 <_reset_pipe0_address>
        _set_rx_mode();
    1bf2:	ac df       	rcall	.-168    	; 0x1b4c <_set_rx_mode>

        // indicate in the history that a packet was transmitted successfully by appending a 1.
        tx_history <<= 1;
    1bf4:	80 91 02 02 	lds	r24, 0x0202
    1bf8:	90 91 03 02 	lds	r25, 0x0203
    1bfc:	88 0f       	add	r24, r24
    1bfe:	99 1f       	adc	r25, r25
    1c00:	90 93 03 02 	sts	0x0203, r25
    1c04:	80 93 02 02 	sts	0x0202, r24
        tx_history |= 1;
    1c08:	80 91 02 02 	lds	r24, 0x0202
    1c0c:	90 91 03 02 	lds	r25, 0x0203
    1c10:	81 60       	ori	r24, 0x01	; 1
    1c12:	90 93 03 02 	sts	0x0203, r25
    1c16:	80 93 02 02 	sts	0x0202, r24
        tx_last_status = RADIO_TX_SUCCESS;
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	80 93 01 02 	sts	0x0201, r24
    1c20:	14 c0       	rjmp	.+40     	; 0x1c4a <__vector_1+0xa6>
    } else if (status & _BV(MAX_RT)) {
    1c22:	84 ff       	sbrs	r24, 4
    1c24:	12 c0       	rjmp	.+36     	; 0x1c4a <__vector_1+0xa6>
        // enable SPI
       // RADIO_CSN_LOW();


        // flush the failed packet (it stays in the Tx FIFO; we could try to resend it by setting CE high)
        SPI_Write_Byte( FLUSH_TX );
    1c26:	81 ee       	ldi	r24, 0xE1	; 225
    1c28:	59 d0       	rcall	.+178    	; 0x1cdc <SPI_Write_Byte>

        // resynch SPI
        //RADIO_CSN_HIGH();

        transmit_lock = 0;
    1c2a:	10 92 59 15 	sts	0x1559, r1
        _reset_pipe0_address();
    1c2e:	b0 df       	rcall	.-160    	; 0x1b90 <_reset_pipe0_address>
        _set_rx_mode();
    1c30:	8d df       	rcall	.-230    	; 0x1b4c <_set_rx_mode>

        // indicate in the history that a packet was dropped by appending a 0.
        tx_history <<= 1;
    1c32:	80 91 02 02 	lds	r24, 0x0202
    1c36:	90 91 03 02 	lds	r25, 0x0203
    1c3a:	88 0f       	add	r24, r24
    1c3c:	99 1f       	adc	r25, r25
    1c3e:	90 93 03 02 	sts	0x0203, r25
    1c42:	80 93 02 02 	sts	0x0202, r24
        tx_last_status = RADIO_TX_MAX_RT;
    1c46:	10 92 01 02 	sts	0x0201, r1
    }

    // clear the interrupt flags.
	status = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
    1c4a:	80 e7       	ldi	r24, 0x70	; 112
    1c4c:	89 83       	std	Y+1, r24	; 0x01
	_set_register(STATUS, &status, 1);
    1c4e:	41 e0       	ldi	r20, 0x01	; 1
    1c50:	be 01       	movw	r22, r28
    1c52:	6f 5f       	subi	r22, 0xFF	; 255
    1c54:	7f 4f       	sbci	r23, 0xFF	; 255
    1c56:	87 e0       	ldi	r24, 0x07	; 7
    1c58:	3f df       	rcall	.-386    	; 0x1ad8 <_set_register>

    RADIO_CE_HIGH();
    1c5a:	2c 9a       	sbi	0x05, 4	; 5
}
    1c5c:	0f 90       	pop	r0
    1c5e:	df 91       	pop	r29
    1c60:	cf 91       	pop	r28
    1c62:	ff 91       	pop	r31
    1c64:	ef 91       	pop	r30
    1c66:	bf 91       	pop	r27
    1c68:	af 91       	pop	r26
    1c6a:	9f 91       	pop	r25
    1c6c:	8f 91       	pop	r24
    1c6e:	7f 91       	pop	r23
    1c70:	6f 91       	pop	r22
    1c72:	5f 91       	pop	r21
    1c74:	4f 91       	pop	r20
    1c76:	3f 91       	pop	r19
    1c78:	2f 91       	pop	r18
    1c7a:	0f 90       	pop	r0
    1c7c:	0b be       	out	0x3b, r0	; 59
    1c7e:	0f 90       	pop	r0
    1c80:	0f be       	out	0x3f, r0	; 63
    1c82:	0f 90       	pop	r0
    1c84:	1f 90       	pop	r1
    1c86:	18 95       	reti

00001c88 <SPI_ReadWrite_Block>:
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1c88:	44 23       	and	r20, r20
    1c8a:	a1 f0       	breq	.+40     	; 0x1cb4 <SPI_ReadWrite_Block+0x2c>
    1c8c:	fc 01       	movw	r30, r24
    1c8e:	a6 2f       	mov	r26, r22
    1c90:	b7 2f       	mov	r27, r23
    1c92:	41 50       	subi	r20, 0x01	; 1
    1c94:	24 2f       	mov	r18, r20
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	2f 5f       	subi	r18, 0xFF	; 255
    1c9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c9c:	28 0f       	add	r18, r24
    1c9e:	39 1f       	adc	r19, r25
          SPDR = data[i];
    1ca0:	91 91       	ld	r25, Z+
    1ca2:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1ca4:	0d b4       	in	r0, 0x2d	; 45
    1ca6:	07 fe       	sbrs	r0, 7
    1ca8:	fd cf       	rjmp	.-6      	; 0x1ca4 <SPI_ReadWrite_Block+0x1c>
          buffer[i] = SPDR;
    1caa:	9e b5       	in	r25, 0x2e	; 46
    1cac:	9d 93       	st	X+, r25
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1cae:	e2 17       	cp	r30, r18
    1cb0:	f3 07       	cpc	r31, r19
    1cb2:	b1 f7       	brne	.-20     	; 0x1ca0 <SPI_ReadWrite_Block+0x18>
    1cb4:	08 95       	ret

00001cb6 <SPI_Write_Block>:
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1cb6:	66 23       	and	r22, r22
    1cb8:	81 f0       	breq	.+32     	; 0x1cda <SPI_Write_Block+0x24>
    1cba:	fc 01       	movw	r30, r24
    1cbc:	61 50       	subi	r22, 0x01	; 1
    1cbe:	26 2f       	mov	r18, r22
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	2f 5f       	subi	r18, 0xFF	; 255
    1cc4:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc6:	28 0f       	add	r18, r24
    1cc8:	39 1f       	adc	r19, r25
          SPDR = data[i];
    1cca:	91 91       	ld	r25, Z+
    1ccc:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1cce:	0d b4       	in	r0, 0x2d	; 45
    1cd0:	07 fe       	sbrs	r0, 7
    1cd2:	fd cf       	rjmp	.-6      	; 0x1cce <SPI_Write_Block+0x18>
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1cd4:	e2 17       	cp	r30, r18
    1cd6:	f3 07       	cpc	r31, r19
    1cd8:	c1 f7       	brne	.-16     	; 0x1cca <SPI_Write_Block+0x14>
    1cda:	08 95       	ret

00001cdc <SPI_Write_Byte>:
    }
}

uint8_t SPI_Write_Byte(uint8_t byte)
{
    SPDR = byte;
    1cdc:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
    1cde:	0d b4       	in	r0, 0x2d	; 45
    1ce0:	07 fe       	sbrs	r0, 7
    1ce2:	fd cf       	rjmp	.-6      	; 0x1cde <SPI_Write_Byte+0x2>
    return SPDR;
    1ce4:	8e b5       	in	r24, 0x2e	; 46
}
    1ce6:	08 95       	ret

00001ce8 <Roomba_Init>:
static void update_leds();

void Roomba_Init()
{
	uint8_t i;
	DD_DDR |= _BV(DD_PIN);
    1ce8:	3d 9a       	sbi	0x07, 5	; 7
	// Wake up the Roomba by driving the DD pin low for 500 ms.
	DD_PORT &= ~_BV(DD_PIN);
    1cea:	45 98       	cbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1cec:	2f ef       	ldi	r18, 0xFF	; 255
    1cee:	39 e6       	ldi	r19, 0x69	; 105
    1cf0:	88 e1       	ldi	r24, 0x18	; 24
    1cf2:	21 50       	subi	r18, 0x01	; 1
    1cf4:	30 40       	sbci	r19, 0x00	; 0
    1cf6:	80 40       	sbci	r24, 0x00	; 0
    1cf8:	e1 f7       	brne	.-8      	; 0x1cf2 <Roomba_Init+0xa>
    1cfa:	00 c0       	rjmp	.+0      	; 0x1cfc <Roomba_Init+0x14>
    1cfc:	00 00       	nop
	_delay_ms(500);
	DD_PORT |= _BV(DD_PIN);
    1cfe:	45 9a       	sbi	0x08, 5	; 8
    1d00:	9f ef       	ldi	r25, 0xFF	; 255
    1d02:	27 ea       	ldi	r18, 0xA7	; 167
    1d04:	31 e6       	ldi	r19, 0x61	; 97
    1d06:	91 50       	subi	r25, 0x01	; 1
    1d08:	20 40       	sbci	r18, 0x00	; 0
    1d0a:	30 40       	sbci	r19, 0x00	; 0
    1d0c:	e1 f7       	brne	.-8      	; 0x1d06 <Roomba_Init+0x1e>
    1d0e:	00 c0       	rjmp	.+0      	; 0x1d10 <Roomba_Init+0x28>
    1d10:	00 00       	nop
    1d12:	83 e0       	ldi	r24, 0x03	; 3
	// Wait for 2 seconds, Then pulse the DD pin 3 times to set the Roomba to operate at 19200 baud.
	// This ensures that we know what baud rate to talk at.
	_delay_ms(2000);
	for (i = 0; i < 3; i++)
	{
		DD_PORT &= ~_BV(DD_PIN);
    1d14:	45 98       	cbi	0x08, 5	; 8
    1d16:	9f ef       	ldi	r25, 0xFF	; 255
    1d18:	20 e7       	ldi	r18, 0x70	; 112
    1d1a:	32 e0       	ldi	r19, 0x02	; 2
    1d1c:	91 50       	subi	r25, 0x01	; 1
    1d1e:	20 40       	sbci	r18, 0x00	; 0
    1d20:	30 40       	sbci	r19, 0x00	; 0
    1d22:	e1 f7       	brne	.-8      	; 0x1d1c <Roomba_Init+0x34>
    1d24:	00 c0       	rjmp	.+0      	; 0x1d26 <Roomba_Init+0x3e>
    1d26:	00 00       	nop
		_delay_ms(50);
		DD_PORT |= _BV(DD_PIN);
    1d28:	45 9a       	sbi	0x08, 5	; 8
    1d2a:	9f ef       	ldi	r25, 0xFF	; 255
    1d2c:	20 e7       	ldi	r18, 0x70	; 112
    1d2e:	32 e0       	ldi	r19, 0x02	; 2
    1d30:	91 50       	subi	r25, 0x01	; 1
    1d32:	20 40       	sbci	r18, 0x00	; 0
    1d34:	30 40       	sbci	r19, 0x00	; 0
    1d36:	e1 f7       	brne	.-8      	; 0x1d30 <Roomba_Init+0x48>
    1d38:	00 c0       	rjmp	.+0      	; 0x1d3a <Roomba_Init+0x52>
    1d3a:	00 00       	nop
    1d3c:	81 50       	subi	r24, 0x01	; 1
	DD_PORT |= _BV(DD_PIN);

	// Wait for 2 seconds, Then pulse the DD pin 3 times to set the Roomba to operate at 19200 baud.
	// This ensures that we know what baud rate to talk at.
	_delay_ms(2000);
	for (i = 0; i < 3; i++)
    1d3e:	51 f7       	brne	.-44     	; 0x1d14 <Roomba_Init+0x2c>
		_delay_ms(50);
		DD_PORT |= _BV(DD_PIN);
		_delay_ms(50);
	}

	uart_init(UART_19200);
    1d40:	24 d0       	rcall	.+72     	; 0x1d8a <uart_init>

	// start the Roomba's SCI
	uart_putchar(START, ROOMBA_UART);
    1d42:	60 e0       	ldi	r22, 0x00	; 0
    1d44:	70 e0       	ldi	r23, 0x00	; 0
    1d46:	80 e8       	ldi	r24, 0x80	; 128
    1d48:	66 d0       	rcall	.+204    	; 0x1e16 <uart_putchar>
    1d4a:	8f ef       	ldi	r24, 0xFF	; 255
    1d4c:	99 ef       	ldi	r25, 0xF9	; 249
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	81 50       	subi	r24, 0x01	; 1
    1d52:	90 40       	sbci	r25, 0x00	; 0
    1d54:	20 40       	sbci	r18, 0x00	; 0
    1d56:	e1 f7       	brne	.-8      	; 0x1d50 <Roomba_Init+0x68>
    1d58:	00 c0       	rjmp	.+0      	; 0x1d5a <Roomba_Init+0x72>
    1d5a:	00 00       	nop
    1d5c:	3f ef       	ldi	r19, 0xFF	; 255
    1d5e:	81 ee       	ldi	r24, 0xE1	; 225
    1d60:	94 e0       	ldi	r25, 0x04	; 4
    1d62:	31 50       	subi	r19, 0x01	; 1
    1d64:	80 40       	sbci	r24, 0x00	; 0
    1d66:	90 40       	sbci	r25, 0x00	; 0
    1d68:	e1 f7       	brne	.-8      	; 0x1d62 <Roomba_Init+0x7a>
    1d6a:	00 c0       	rjmp	.+0      	; 0x1d6c <Roomba_Init+0x84>
    1d6c:	00 00       	nop

	// change the AVR's UART clock to the new baud rate.
	//uart_init(UART_38400);

	// put the Roomba into safe mode.
	uart_putchar(CONTROL, ROOMBA_UART);
    1d6e:	60 e0       	ldi	r22, 0x00	; 0
    1d70:	70 e0       	ldi	r23, 0x00	; 0
    1d72:	82 e8       	ldi	r24, 0x82	; 130
    1d74:	50 d0       	rcall	.+160    	; 0x1e16 <uart_putchar>
    1d76:	2f ef       	ldi	r18, 0xFF	; 255
    1d78:	39 ef       	ldi	r19, 0xF9	; 249
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	21 50       	subi	r18, 0x01	; 1
    1d7e:	30 40       	sbci	r19, 0x00	; 0
    1d80:	80 40       	sbci	r24, 0x00	; 0
    1d82:	e1 f7       	brne	.-8      	; 0x1d7c <Roomba_Init+0x94>
    1d84:	00 c0       	rjmp	.+0      	; 0x1d86 <Roomba_Init+0x9e>
    1d86:	00 00       	nop
    1d88:	08 95       	ret

00001d8a <uart_init>:
void uart_reset_receive(int uart)
{
	if (uart) {
		uart_buffer_1_index = 0;
	} else {
		uart_buffer_index = 0;
    1d8a:	e4 e6       	ldi	r30, 0x64	; 100
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	90 81       	ld	r25, Z
    1d90:	9d 7f       	andi	r25, 0xFD	; 253
    1d92:	90 83       	st	Z, r25
    1d94:	32 e0       	ldi	r19, 0x02	; 2
    1d96:	30 93 c0 00 	sts	0x00C0, r19
    1d9a:	28 e9       	ldi	r18, 0x98	; 152
    1d9c:	20 93 c1 00 	sts	0x00C1, r18
    1da0:	96 e0       	ldi	r25, 0x06	; 6
    1da2:	90 93 c2 00 	sts	0x00C2, r25
    1da6:	30 93 c8 00 	sts	0x00C8, r19
    1daa:	20 93 c9 00 	sts	0x00C9, r18
    1dae:	90 93 ca 00 	sts	0x00CA, r25
    1db2:	27 e6       	ldi	r18, 0x67	; 103
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	30 93 c5 00 	sts	0x00C5, r19
    1dba:	20 93 c4 00 	sts	0x00C4, r18
    1dbe:	2f ec       	ldi	r18, 0xCF	; 207
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	30 93 cd 00 	sts	0x00CD, r19
    1dc6:	20 93 cc 00 	sts	0x00CC, r18
    1dca:	81 30       	cpi	r24, 0x01	; 1
    1dcc:	59 f0       	breq	.+22     	; 0x1de4 <uart_init+0x5a>
    1dce:	18 f0       	brcs	.+6      	; 0x1dd6 <uart_init+0x4c>
    1dd0:	82 30       	cpi	r24, 0x02	; 2
    1dd2:	79 f0       	breq	.+30     	; 0x1df2 <uart_init+0x68>
    1dd4:	15 c0       	rjmp	.+42     	; 0x1e00 <uart_init+0x76>
    1dd6:	87 e6       	ldi	r24, 0x67	; 103
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	90 93 c5 00 	sts	0x00C5, r25
    1dde:	80 93 c4 00 	sts	0x00C4, r24
    1de2:	14 c0       	rjmp	.+40     	; 0x1e0c <uart_init+0x82>
    1de4:	83 e3       	ldi	r24, 0x33	; 51
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	90 93 c5 00 	sts	0x00C5, r25
    1dec:	80 93 c4 00 	sts	0x00C4, r24
    1df0:	0d c0       	rjmp	.+26     	; 0x1e0c <uart_init+0x82>
    1df2:	82 e2       	ldi	r24, 0x22	; 34
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	90 93 c5 00 	sts	0x00C5, r25
    1dfa:	80 93 c4 00 	sts	0x00C4, r24
    1dfe:	06 c0       	rjmp	.+12     	; 0x1e0c <uart_init+0x82>
    1e00:	87 e6       	ldi	r24, 0x67	; 103
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	90 93 c5 00 	sts	0x00C5, r25
    1e08:	80 93 c4 00 	sts	0x00C4, r24
    1e0c:	10 92 8c 14 	sts	0x148C, r1
    1e10:	10 92 8b 14 	sts	0x148B, r1
    1e14:	08 95       	ret

00001e16 <uart_putchar>:
    1e16:	67 2b       	or	r22, r23
    1e18:	41 f0       	breq	.+16     	; 0x1e2a <uart_putchar+0x14>
    1e1a:	e8 ec       	ldi	r30, 0xC8	; 200
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	90 81       	ld	r25, Z
    1e20:	95 ff       	sbrs	r25, 5
    1e22:	fd cf       	rjmp	.-6      	; 0x1e1e <uart_putchar+0x8>
    1e24:	80 93 ce 00 	sts	0x00CE, r24
    1e28:	08 95       	ret
    1e2a:	e0 ec       	ldi	r30, 0xC0	; 192
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	90 81       	ld	r25, Z
    1e30:	95 ff       	sbrs	r25, 5
    1e32:	fd cf       	rjmp	.-6      	; 0x1e2e <uart_putchar+0x18>
    1e34:	80 93 c6 00 	sts	0x00C6, r24
    1e38:	08 95       	ret

00001e3a <uart_send_string>:
	}
}
void uart_send_string(char *string, int uart){
    1e3a:	0f 93       	push	r16
    1e3c:	1f 93       	push	r17
    1e3e:	cf 93       	push	r28
    1e40:	df 93       	push	r29
    1e42:	ec 01       	movw	r28, r24
	
	while (*string != '\0')
    1e44:	88 81       	ld	r24, Y
    1e46:	88 23       	and	r24, r24
    1e48:	39 f0       	breq	.+14     	; 0x1e58 <uart_send_string+0x1e>
    1e4a:	8b 01       	movw	r16, r22
    1e4c:	21 96       	adiw	r28, 0x01	; 1
	{
		uart_putchar(*string, uart);
    1e4e:	b8 01       	movw	r22, r16
    1e50:	e2 df       	rcall	.-60     	; 0x1e16 <uart_putchar>
		uart_buffer_index = 0;
	}
}
void uart_send_string(char *string, int uart){
	
	while (*string != '\0')
    1e52:	89 91       	ld	r24, Y+
    1e54:	81 11       	cpse	r24, r1
    1e56:	fb cf       	rjmp	.-10     	; 0x1e4e <uart_send_string+0x14>
		uart_putchar(*string, uart);
		string++;
	}
	
	
}
    1e58:	df 91       	pop	r29
    1e5a:	cf 91       	pop	r28
    1e5c:	1f 91       	pop	r17
    1e5e:	0f 91       	pop	r16
    1e60:	08 95       	ret

00001e62 <__vector_25>:
/**
 * UART receive byte ISR
 */
ISR(USART0_RX_vect)
{
    1e62:	1f 92       	push	r1
    1e64:	0f 92       	push	r0
    1e66:	0f b6       	in	r0, 0x3f	; 63
    1e68:	0f 92       	push	r0
    1e6a:	11 24       	eor	r1, r1
    1e6c:	0b b6       	in	r0, 0x3b	; 59
    1e6e:	0f 92       	push	r0
    1e70:	8f 93       	push	r24
    1e72:	9f 93       	push	r25
    1e74:	ef 93       	push	r30
    1e76:	ff 93       	push	r31
	while(!(UCSR0A & (1<<RXC0)));
    1e78:	e0 ec       	ldi	r30, 0xC0	; 192
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	88 23       	and	r24, r24
    1e80:	ec f7       	brge	.-6      	; 0x1e7c <__vector_25+0x1a>
    uart_buffer[uart_buffer_index] = UDR0;
    1e82:	e0 91 8c 14 	lds	r30, 0x148C
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 91 c6 00 	lds	r24, 0x00C6
    1e8c:	e3 55       	subi	r30, 0x53	; 83
    1e8e:	fb 4e       	sbci	r31, 0xEB	; 235
    1e90:	80 83       	st	Z, r24
    uart_buffer_index = (uart_buffer_index + 1) % UART_BUFFER_SIZE;
    1e92:	80 91 8c 14 	lds	r24, 0x148C
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	01 96       	adiw	r24, 0x01	; 1
    1e9a:	8f 71       	andi	r24, 0x1F	; 31
    1e9c:	90 78       	andi	r25, 0x80	; 128
    1e9e:	99 23       	and	r25, r25
    1ea0:	24 f4       	brge	.+8      	; 0x1eaa <__vector_25+0x48>
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	80 6e       	ori	r24, 0xE0	; 224
    1ea6:	9f 6f       	ori	r25, 0xFF	; 255
    1ea8:	01 96       	adiw	r24, 0x01	; 1
    1eaa:	80 93 8c 14 	sts	0x148C, r24
}
    1eae:	ff 91       	pop	r31
    1eb0:	ef 91       	pop	r30
    1eb2:	9f 91       	pop	r25
    1eb4:	8f 91       	pop	r24
    1eb6:	0f 90       	pop	r0
    1eb8:	0b be       	out	0x3b, r0	; 59
    1eba:	0f 90       	pop	r0
    1ebc:	0f be       	out	0x3f, r0	; 63
    1ebe:	0f 90       	pop	r0
    1ec0:	1f 90       	pop	r1
    1ec2:	18 95       	reti

00001ec4 <__vector_36>:

/**
 * UART receive byte ISR
 */
ISR(USART1_RX_vect)
{
    1ec4:	1f 92       	push	r1
    1ec6:	0f 92       	push	r0
    1ec8:	0f b6       	in	r0, 0x3f	; 63
    1eca:	0f 92       	push	r0
    1ecc:	11 24       	eor	r1, r1
    1ece:	0b b6       	in	r0, 0x3b	; 59
    1ed0:	0f 92       	push	r0
    1ed2:	8f 93       	push	r24
    1ed4:	9f 93       	push	r25
    1ed6:	ef 93       	push	r30
    1ed8:	ff 93       	push	r31
	while(!(UCSR1A & (1<<RXC1)));
    1eda:	e8 ec       	ldi	r30, 0xC8	; 200
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	88 23       	and	r24, r24
    1ee2:	ec f7       	brge	.-6      	; 0x1ede <__vector_36+0x1a>
    uart_buffer_1[uart_buffer_1_index] = UDR1;
    1ee4:	e0 91 8b 14 	lds	r30, 0x148B
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 91 ce 00 	lds	r24, 0x00CE
    1eee:	e3 57       	subi	r30, 0x73	; 115
    1ef0:	fb 4e       	sbci	r31, 0xEB	; 235
    1ef2:	80 83       	st	Z, r24
    uart_buffer_1_index = (uart_buffer_1_index + 1) % UART_BUFFER_SIZE;
    1ef4:	80 91 8b 14 	lds	r24, 0x148B
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	01 96       	adiw	r24, 0x01	; 1
    1efc:	8f 71       	andi	r24, 0x1F	; 31
    1efe:	90 78       	andi	r25, 0x80	; 128
    1f00:	99 23       	and	r25, r25
    1f02:	24 f4       	brge	.+8      	; 0x1f0c <__vector_36+0x48>
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	80 6e       	ori	r24, 0xE0	; 224
    1f08:	9f 6f       	ori	r25, 0xFF	; 255
    1f0a:	01 96       	adiw	r24, 0x01	; 1
    1f0c:	80 93 8b 14 	sts	0x148B, r24
}
    1f10:	ff 91       	pop	r31
    1f12:	ef 91       	pop	r30
    1f14:	9f 91       	pop	r25
    1f16:	8f 91       	pop	r24
    1f18:	0f 90       	pop	r0
    1f1a:	0b be       	out	0x3b, r0	; 59
    1f1c:	0f 90       	pop	r0
    1f1e:	0f be       	out	0x3f, r0	; 63
    1f20:	0f 90       	pop	r0
    1f22:	1f 90       	pop	r1
    1f24:	18 95       	reti

00001f26 <__udivmodhi4>:
    1f26:	aa 1b       	sub	r26, r26
    1f28:	bb 1b       	sub	r27, r27
    1f2a:	51 e1       	ldi	r21, 0x11	; 17
    1f2c:	07 c0       	rjmp	.+14     	; 0x1f3c <__udivmodhi4_ep>

00001f2e <__udivmodhi4_loop>:
    1f2e:	aa 1f       	adc	r26, r26
    1f30:	bb 1f       	adc	r27, r27
    1f32:	a6 17       	cp	r26, r22
    1f34:	b7 07       	cpc	r27, r23
    1f36:	10 f0       	brcs	.+4      	; 0x1f3c <__udivmodhi4_ep>
    1f38:	a6 1b       	sub	r26, r22
    1f3a:	b7 0b       	sbc	r27, r23

00001f3c <__udivmodhi4_ep>:
    1f3c:	88 1f       	adc	r24, r24
    1f3e:	99 1f       	adc	r25, r25
    1f40:	5a 95       	dec	r21
    1f42:	a9 f7       	brne	.-22     	; 0x1f2e <__udivmodhi4_loop>
    1f44:	80 95       	com	r24
    1f46:	90 95       	com	r25
    1f48:	bc 01       	movw	r22, r24
    1f4a:	cd 01       	movw	r24, r26
    1f4c:	08 95       	ret

00001f4e <__tablejump2__>:
    1f4e:	ee 0f       	add	r30, r30
    1f50:	ff 1f       	adc	r31, r31
    1f52:	88 1f       	adc	r24, r24
    1f54:	8b bf       	out	0x3b, r24	; 59
    1f56:	07 90       	elpm	r0, Z+
    1f58:	f6 91       	elpm	r31, Z
    1f5a:	e0 2d       	mov	r30, r0
    1f5c:	19 94       	eijmp

00001f5e <itoa>:
    1f5e:	45 32       	cpi	r20, 0x25	; 37
    1f60:	51 05       	cpc	r21, r1
    1f62:	18 f4       	brcc	.+6      	; 0x1f6a <itoa+0xc>
    1f64:	42 30       	cpi	r20, 0x02	; 2
    1f66:	08 f0       	brcs	.+2      	; 0x1f6a <itoa+0xc>
    1f68:	04 c0       	rjmp	.+8      	; 0x1f72 <__itoa_ncheck>
    1f6a:	fb 01       	movw	r30, r22
    1f6c:	10 82       	st	Z, r1
    1f6e:	cb 01       	movw	r24, r22
    1f70:	08 95       	ret

00001f72 <__itoa_ncheck>:
    1f72:	bb 27       	eor	r27, r27
    1f74:	4a 30       	cpi	r20, 0x0A	; 10
    1f76:	31 f4       	brne	.+12     	; 0x1f84 <__itoa_ncheck+0x12>
    1f78:	99 23       	and	r25, r25
    1f7a:	22 f4       	brpl	.+8      	; 0x1f84 <__itoa_ncheck+0x12>
    1f7c:	bd e2       	ldi	r27, 0x2D	; 45
    1f7e:	90 95       	com	r25
    1f80:	81 95       	neg	r24
    1f82:	9f 4f       	sbci	r25, 0xFF	; 255
    1f84:	01 c0       	rjmp	.+2      	; 0x1f88 <__utoa_common>

00001f86 <__utoa_ncheck>:
    1f86:	bb 27       	eor	r27, r27

00001f88 <__utoa_common>:
    1f88:	fb 01       	movw	r30, r22
    1f8a:	55 27       	eor	r21, r21
    1f8c:	aa 27       	eor	r26, r26
    1f8e:	88 0f       	add	r24, r24
    1f90:	99 1f       	adc	r25, r25
    1f92:	aa 1f       	adc	r26, r26
    1f94:	a4 17       	cp	r26, r20
    1f96:	10 f0       	brcs	.+4      	; 0x1f9c <__utoa_common+0x14>
    1f98:	a4 1b       	sub	r26, r20
    1f9a:	83 95       	inc	r24
    1f9c:	50 51       	subi	r21, 0x10	; 16
    1f9e:	b9 f7       	brne	.-18     	; 0x1f8e <__utoa_common+0x6>
    1fa0:	a0 5d       	subi	r26, 0xD0	; 208
    1fa2:	aa 33       	cpi	r26, 0x3A	; 58
    1fa4:	08 f0       	brcs	.+2      	; 0x1fa8 <__utoa_common+0x20>
    1fa6:	a9 5d       	subi	r26, 0xD9	; 217
    1fa8:	a1 93       	st	Z+, r26
    1faa:	00 97       	sbiw	r24, 0x00	; 0
    1fac:	79 f7       	brne	.-34     	; 0x1f8c <__utoa_common+0x4>
    1fae:	b1 11       	cpse	r27, r1
    1fb0:	b1 93       	st	Z+, r27
    1fb2:	11 92       	st	Z+, r1
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	33 c2       	rjmp	.+1126   	; 0x241e <strrev>

00001fb8 <sprintf>:
    1fb8:	0f 93       	push	r16
    1fba:	1f 93       	push	r17
    1fbc:	cf 93       	push	r28
    1fbe:	df 93       	push	r29
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
    1fc4:	2e 97       	sbiw	r28, 0x0e	; 14
    1fc6:	0f b6       	in	r0, 0x3f	; 63
    1fc8:	f8 94       	cli
    1fca:	de bf       	out	0x3e, r29	; 62
    1fcc:	0f be       	out	0x3f, r0	; 63
    1fce:	cd bf       	out	0x3d, r28	; 61
    1fd0:	0e 89       	ldd	r16, Y+22	; 0x16
    1fd2:	1f 89       	ldd	r17, Y+23	; 0x17
    1fd4:	86 e0       	ldi	r24, 0x06	; 6
    1fd6:	8c 83       	std	Y+4, r24	; 0x04
    1fd8:	1a 83       	std	Y+2, r17	; 0x02
    1fda:	09 83       	std	Y+1, r16	; 0x01
    1fdc:	8f ef       	ldi	r24, 0xFF	; 255
    1fde:	9f e7       	ldi	r25, 0x7F	; 127
    1fe0:	9e 83       	std	Y+6, r25	; 0x06
    1fe2:	8d 83       	std	Y+5, r24	; 0x05
    1fe4:	ae 01       	movw	r20, r28
    1fe6:	46 5e       	subi	r20, 0xE6	; 230
    1fe8:	5f 4f       	sbci	r21, 0xFF	; 255
    1fea:	68 8d       	ldd	r22, Y+24	; 0x18
    1fec:	79 8d       	ldd	r23, Y+25	; 0x19
    1fee:	ce 01       	movw	r24, r28
    1ff0:	01 96       	adiw	r24, 0x01	; 1
    1ff2:	11 d0       	rcall	.+34     	; 0x2016 <vfprintf>
    1ff4:	2f 81       	ldd	r18, Y+7	; 0x07
    1ff6:	38 85       	ldd	r19, Y+8	; 0x08
    1ff8:	f8 01       	movw	r30, r16
    1ffa:	e2 0f       	add	r30, r18
    1ffc:	f3 1f       	adc	r31, r19
    1ffe:	10 82       	st	Z, r1
    2000:	2e 96       	adiw	r28, 0x0e	; 14
    2002:	0f b6       	in	r0, 0x3f	; 63
    2004:	f8 94       	cli
    2006:	de bf       	out	0x3e, r29	; 62
    2008:	0f be       	out	0x3f, r0	; 63
    200a:	cd bf       	out	0x3d, r28	; 61
    200c:	df 91       	pop	r29
    200e:	cf 91       	pop	r28
    2010:	1f 91       	pop	r17
    2012:	0f 91       	pop	r16
    2014:	08 95       	ret

00002016 <vfprintf>:
    2016:	2f 92       	push	r2
    2018:	3f 92       	push	r3
    201a:	4f 92       	push	r4
    201c:	5f 92       	push	r5
    201e:	6f 92       	push	r6
    2020:	7f 92       	push	r7
    2022:	8f 92       	push	r8
    2024:	9f 92       	push	r9
    2026:	af 92       	push	r10
    2028:	bf 92       	push	r11
    202a:	cf 92       	push	r12
    202c:	df 92       	push	r13
    202e:	ef 92       	push	r14
    2030:	ff 92       	push	r15
    2032:	0f 93       	push	r16
    2034:	1f 93       	push	r17
    2036:	cf 93       	push	r28
    2038:	df 93       	push	r29
    203a:	cd b7       	in	r28, 0x3d	; 61
    203c:	de b7       	in	r29, 0x3e	; 62
    203e:	2c 97       	sbiw	r28, 0x0c	; 12
    2040:	0f b6       	in	r0, 0x3f	; 63
    2042:	f8 94       	cli
    2044:	de bf       	out	0x3e, r29	; 62
    2046:	0f be       	out	0x3f, r0	; 63
    2048:	cd bf       	out	0x3d, r28	; 61
    204a:	7c 01       	movw	r14, r24
    204c:	6b 01       	movw	r12, r22
    204e:	8a 01       	movw	r16, r20
    2050:	fc 01       	movw	r30, r24
    2052:	17 82       	std	Z+7, r1	; 0x07
    2054:	16 82       	std	Z+6, r1	; 0x06
    2056:	83 81       	ldd	r24, Z+3	; 0x03
    2058:	81 ff       	sbrs	r24, 1
    205a:	b0 c1       	rjmp	.+864    	; 0x23bc <__stack+0x1bd>
    205c:	ce 01       	movw	r24, r28
    205e:	01 96       	adiw	r24, 0x01	; 1
    2060:	4c 01       	movw	r8, r24
    2062:	f7 01       	movw	r30, r14
    2064:	93 81       	ldd	r25, Z+3	; 0x03
    2066:	f6 01       	movw	r30, r12
    2068:	93 fd       	sbrc	r25, 3
    206a:	85 91       	lpm	r24, Z+
    206c:	93 ff       	sbrs	r25, 3
    206e:	81 91       	ld	r24, Z+
    2070:	6f 01       	movw	r12, r30
    2072:	88 23       	and	r24, r24
    2074:	09 f4       	brne	.+2      	; 0x2078 <vfprintf+0x62>
    2076:	9e c1       	rjmp	.+828    	; 0x23b4 <__stack+0x1b5>
    2078:	85 32       	cpi	r24, 0x25	; 37
    207a:	39 f4       	brne	.+14     	; 0x208a <vfprintf+0x74>
    207c:	93 fd       	sbrc	r25, 3
    207e:	85 91       	lpm	r24, Z+
    2080:	93 ff       	sbrs	r25, 3
    2082:	81 91       	ld	r24, Z+
    2084:	6f 01       	movw	r12, r30
    2086:	85 32       	cpi	r24, 0x25	; 37
    2088:	21 f4       	brne	.+8      	; 0x2092 <vfprintf+0x7c>
    208a:	b7 01       	movw	r22, r14
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	d7 d1       	rcall	.+942    	; 0x243e <fputc>
    2090:	e8 cf       	rjmp	.-48     	; 0x2062 <vfprintf+0x4c>
    2092:	51 2c       	mov	r5, r1
    2094:	31 2c       	mov	r3, r1
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	20 32       	cpi	r18, 0x20	; 32
    209a:	a0 f4       	brcc	.+40     	; 0x20c4 <vfprintf+0xae>
    209c:	8b 32       	cpi	r24, 0x2B	; 43
    209e:	69 f0       	breq	.+26     	; 0x20ba <vfprintf+0xa4>
    20a0:	30 f4       	brcc	.+12     	; 0x20ae <vfprintf+0x98>
    20a2:	80 32       	cpi	r24, 0x20	; 32
    20a4:	59 f0       	breq	.+22     	; 0x20bc <vfprintf+0xa6>
    20a6:	83 32       	cpi	r24, 0x23	; 35
    20a8:	69 f4       	brne	.+26     	; 0x20c4 <vfprintf+0xae>
    20aa:	20 61       	ori	r18, 0x10	; 16
    20ac:	2c c0       	rjmp	.+88     	; 0x2106 <vfprintf+0xf0>
    20ae:	8d 32       	cpi	r24, 0x2D	; 45
    20b0:	39 f0       	breq	.+14     	; 0x20c0 <vfprintf+0xaa>
    20b2:	80 33       	cpi	r24, 0x30	; 48
    20b4:	39 f4       	brne	.+14     	; 0x20c4 <vfprintf+0xae>
    20b6:	21 60       	ori	r18, 0x01	; 1
    20b8:	26 c0       	rjmp	.+76     	; 0x2106 <vfprintf+0xf0>
    20ba:	22 60       	ori	r18, 0x02	; 2
    20bc:	24 60       	ori	r18, 0x04	; 4
    20be:	23 c0       	rjmp	.+70     	; 0x2106 <vfprintf+0xf0>
    20c0:	28 60       	ori	r18, 0x08	; 8
    20c2:	21 c0       	rjmp	.+66     	; 0x2106 <vfprintf+0xf0>
    20c4:	27 fd       	sbrc	r18, 7
    20c6:	27 c0       	rjmp	.+78     	; 0x2116 <vfprintf+0x100>
    20c8:	30 ed       	ldi	r19, 0xD0	; 208
    20ca:	38 0f       	add	r19, r24
    20cc:	3a 30       	cpi	r19, 0x0A	; 10
    20ce:	78 f4       	brcc	.+30     	; 0x20ee <vfprintf+0xd8>
    20d0:	26 ff       	sbrs	r18, 6
    20d2:	06 c0       	rjmp	.+12     	; 0x20e0 <vfprintf+0xca>
    20d4:	fa e0       	ldi	r31, 0x0A	; 10
    20d6:	5f 9e       	mul	r5, r31
    20d8:	30 0d       	add	r19, r0
    20da:	11 24       	eor	r1, r1
    20dc:	53 2e       	mov	r5, r19
    20de:	13 c0       	rjmp	.+38     	; 0x2106 <vfprintf+0xf0>
    20e0:	8a e0       	ldi	r24, 0x0A	; 10
    20e2:	38 9e       	mul	r3, r24
    20e4:	30 0d       	add	r19, r0
    20e6:	11 24       	eor	r1, r1
    20e8:	33 2e       	mov	r3, r19
    20ea:	20 62       	ori	r18, 0x20	; 32
    20ec:	0c c0       	rjmp	.+24     	; 0x2106 <vfprintf+0xf0>
    20ee:	8e 32       	cpi	r24, 0x2E	; 46
    20f0:	21 f4       	brne	.+8      	; 0x20fa <vfprintf+0xe4>
    20f2:	26 fd       	sbrc	r18, 6
    20f4:	5f c1       	rjmp	.+702    	; 0x23b4 <__stack+0x1b5>
    20f6:	20 64       	ori	r18, 0x40	; 64
    20f8:	06 c0       	rjmp	.+12     	; 0x2106 <vfprintf+0xf0>
    20fa:	8c 36       	cpi	r24, 0x6C	; 108
    20fc:	11 f4       	brne	.+4      	; 0x2102 <vfprintf+0xec>
    20fe:	20 68       	ori	r18, 0x80	; 128
    2100:	02 c0       	rjmp	.+4      	; 0x2106 <vfprintf+0xf0>
    2102:	88 36       	cpi	r24, 0x68	; 104
    2104:	41 f4       	brne	.+16     	; 0x2116 <vfprintf+0x100>
    2106:	f6 01       	movw	r30, r12
    2108:	93 fd       	sbrc	r25, 3
    210a:	85 91       	lpm	r24, Z+
    210c:	93 ff       	sbrs	r25, 3
    210e:	81 91       	ld	r24, Z+
    2110:	6f 01       	movw	r12, r30
    2112:	81 11       	cpse	r24, r1
    2114:	c1 cf       	rjmp	.-126    	; 0x2098 <vfprintf+0x82>
    2116:	98 2f       	mov	r25, r24
    2118:	9f 7d       	andi	r25, 0xDF	; 223
    211a:	95 54       	subi	r25, 0x45	; 69
    211c:	93 30       	cpi	r25, 0x03	; 3
    211e:	28 f4       	brcc	.+10     	; 0x212a <vfprintf+0x114>
    2120:	0c 5f       	subi	r16, 0xFC	; 252
    2122:	1f 4f       	sbci	r17, 0xFF	; 255
    2124:	ff e3       	ldi	r31, 0x3F	; 63
    2126:	f9 83       	std	Y+1, r31	; 0x01
    2128:	0d c0       	rjmp	.+26     	; 0x2144 <vfprintf+0x12e>
    212a:	83 36       	cpi	r24, 0x63	; 99
    212c:	31 f0       	breq	.+12     	; 0x213a <vfprintf+0x124>
    212e:	83 37       	cpi	r24, 0x73	; 115
    2130:	71 f0       	breq	.+28     	; 0x214e <vfprintf+0x138>
    2132:	83 35       	cpi	r24, 0x53	; 83
    2134:	09 f0       	breq	.+2      	; 0x2138 <vfprintf+0x122>
    2136:	57 c0       	rjmp	.+174    	; 0x21e6 <vfprintf+0x1d0>
    2138:	21 c0       	rjmp	.+66     	; 0x217c <vfprintf+0x166>
    213a:	f8 01       	movw	r30, r16
    213c:	80 81       	ld	r24, Z
    213e:	89 83       	std	Y+1, r24	; 0x01
    2140:	0e 5f       	subi	r16, 0xFE	; 254
    2142:	1f 4f       	sbci	r17, 0xFF	; 255
    2144:	44 24       	eor	r4, r4
    2146:	43 94       	inc	r4
    2148:	51 2c       	mov	r5, r1
    214a:	54 01       	movw	r10, r8
    214c:	14 c0       	rjmp	.+40     	; 0x2176 <vfprintf+0x160>
    214e:	38 01       	movw	r6, r16
    2150:	f2 e0       	ldi	r31, 0x02	; 2
    2152:	6f 0e       	add	r6, r31
    2154:	71 1c       	adc	r7, r1
    2156:	f8 01       	movw	r30, r16
    2158:	a0 80       	ld	r10, Z
    215a:	b1 80       	ldd	r11, Z+1	; 0x01
    215c:	26 ff       	sbrs	r18, 6
    215e:	03 c0       	rjmp	.+6      	; 0x2166 <vfprintf+0x150>
    2160:	65 2d       	mov	r22, r5
    2162:	70 e0       	ldi	r23, 0x00	; 0
    2164:	02 c0       	rjmp	.+4      	; 0x216a <vfprintf+0x154>
    2166:	6f ef       	ldi	r22, 0xFF	; 255
    2168:	7f ef       	ldi	r23, 0xFF	; 255
    216a:	c5 01       	movw	r24, r10
    216c:	2c 87       	std	Y+12, r18	; 0x0c
    216e:	4c d1       	rcall	.+664    	; 0x2408 <strnlen>
    2170:	2c 01       	movw	r4, r24
    2172:	83 01       	movw	r16, r6
    2174:	2c 85       	ldd	r18, Y+12	; 0x0c
    2176:	2f 77       	andi	r18, 0x7F	; 127
    2178:	22 2e       	mov	r2, r18
    217a:	16 c0       	rjmp	.+44     	; 0x21a8 <vfprintf+0x192>
    217c:	38 01       	movw	r6, r16
    217e:	f2 e0       	ldi	r31, 0x02	; 2
    2180:	6f 0e       	add	r6, r31
    2182:	71 1c       	adc	r7, r1
    2184:	f8 01       	movw	r30, r16
    2186:	a0 80       	ld	r10, Z
    2188:	b1 80       	ldd	r11, Z+1	; 0x01
    218a:	26 ff       	sbrs	r18, 6
    218c:	03 c0       	rjmp	.+6      	; 0x2194 <vfprintf+0x17e>
    218e:	65 2d       	mov	r22, r5
    2190:	70 e0       	ldi	r23, 0x00	; 0
    2192:	02 c0       	rjmp	.+4      	; 0x2198 <vfprintf+0x182>
    2194:	6f ef       	ldi	r22, 0xFF	; 255
    2196:	7f ef       	ldi	r23, 0xFF	; 255
    2198:	c5 01       	movw	r24, r10
    219a:	2c 87       	std	Y+12, r18	; 0x0c
    219c:	2a d1       	rcall	.+596    	; 0x23f2 <strnlen_P>
    219e:	2c 01       	movw	r4, r24
    21a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    21a2:	20 68       	ori	r18, 0x80	; 128
    21a4:	22 2e       	mov	r2, r18
    21a6:	83 01       	movw	r16, r6
    21a8:	23 fc       	sbrc	r2, 3
    21aa:	19 c0       	rjmp	.+50     	; 0x21de <vfprintf+0x1c8>
    21ac:	83 2d       	mov	r24, r3
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	48 16       	cp	r4, r24
    21b2:	59 06       	cpc	r5, r25
    21b4:	a0 f4       	brcc	.+40     	; 0x21de <vfprintf+0x1c8>
    21b6:	b7 01       	movw	r22, r14
    21b8:	80 e2       	ldi	r24, 0x20	; 32
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	40 d1       	rcall	.+640    	; 0x243e <fputc>
    21be:	3a 94       	dec	r3
    21c0:	f5 cf       	rjmp	.-22     	; 0x21ac <vfprintf+0x196>
    21c2:	f5 01       	movw	r30, r10
    21c4:	27 fc       	sbrc	r2, 7
    21c6:	85 91       	lpm	r24, Z+
    21c8:	27 fe       	sbrs	r2, 7
    21ca:	81 91       	ld	r24, Z+
    21cc:	5f 01       	movw	r10, r30
    21ce:	b7 01       	movw	r22, r14
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	35 d1       	rcall	.+618    	; 0x243e <fputc>
    21d4:	31 10       	cpse	r3, r1
    21d6:	3a 94       	dec	r3
    21d8:	f1 e0       	ldi	r31, 0x01	; 1
    21da:	4f 1a       	sub	r4, r31
    21dc:	51 08       	sbc	r5, r1
    21de:	41 14       	cp	r4, r1
    21e0:	51 04       	cpc	r5, r1
    21e2:	79 f7       	brne	.-34     	; 0x21c2 <vfprintf+0x1ac>
    21e4:	de c0       	rjmp	.+444    	; 0x23a2 <__stack+0x1a3>
    21e6:	84 36       	cpi	r24, 0x64	; 100
    21e8:	11 f0       	breq	.+4      	; 0x21ee <vfprintf+0x1d8>
    21ea:	89 36       	cpi	r24, 0x69	; 105
    21ec:	31 f5       	brne	.+76     	; 0x223a <__stack+0x3b>
    21ee:	f8 01       	movw	r30, r16
    21f0:	27 ff       	sbrs	r18, 7
    21f2:	07 c0       	rjmp	.+14     	; 0x2202 <__stack+0x3>
    21f4:	60 81       	ld	r22, Z
    21f6:	71 81       	ldd	r23, Z+1	; 0x01
    21f8:	82 81       	ldd	r24, Z+2	; 0x02
    21fa:	93 81       	ldd	r25, Z+3	; 0x03
    21fc:	0c 5f       	subi	r16, 0xFC	; 252
    21fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2200:	08 c0       	rjmp	.+16     	; 0x2212 <__stack+0x13>
    2202:	60 81       	ld	r22, Z
    2204:	71 81       	ldd	r23, Z+1	; 0x01
    2206:	07 2e       	mov	r0, r23
    2208:	00 0c       	add	r0, r0
    220a:	88 0b       	sbc	r24, r24
    220c:	99 0b       	sbc	r25, r25
    220e:	0e 5f       	subi	r16, 0xFE	; 254
    2210:	1f 4f       	sbci	r17, 0xFF	; 255
    2212:	2f 76       	andi	r18, 0x6F	; 111
    2214:	72 2e       	mov	r7, r18
    2216:	97 ff       	sbrs	r25, 7
    2218:	09 c0       	rjmp	.+18     	; 0x222c <__stack+0x2d>
    221a:	90 95       	com	r25
    221c:	80 95       	com	r24
    221e:	70 95       	com	r23
    2220:	61 95       	neg	r22
    2222:	7f 4f       	sbci	r23, 0xFF	; 255
    2224:	8f 4f       	sbci	r24, 0xFF	; 255
    2226:	9f 4f       	sbci	r25, 0xFF	; 255
    2228:	20 68       	ori	r18, 0x80	; 128
    222a:	72 2e       	mov	r7, r18
    222c:	2a e0       	ldi	r18, 0x0A	; 10
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	a4 01       	movw	r20, r8
    2232:	3d d1       	rcall	.+634    	; 0x24ae <__ultoa_invert>
    2234:	a8 2e       	mov	r10, r24
    2236:	a8 18       	sub	r10, r8
    2238:	43 c0       	rjmp	.+134    	; 0x22c0 <__stack+0xc1>
    223a:	85 37       	cpi	r24, 0x75	; 117
    223c:	29 f4       	brne	.+10     	; 0x2248 <__stack+0x49>
    223e:	2f 7e       	andi	r18, 0xEF	; 239
    2240:	b2 2e       	mov	r11, r18
    2242:	2a e0       	ldi	r18, 0x0A	; 10
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	25 c0       	rjmp	.+74     	; 0x2292 <__stack+0x93>
    2248:	f2 2f       	mov	r31, r18
    224a:	f9 7f       	andi	r31, 0xF9	; 249
    224c:	bf 2e       	mov	r11, r31
    224e:	8f 36       	cpi	r24, 0x6F	; 111
    2250:	c1 f0       	breq	.+48     	; 0x2282 <__stack+0x83>
    2252:	18 f4       	brcc	.+6      	; 0x225a <__stack+0x5b>
    2254:	88 35       	cpi	r24, 0x58	; 88
    2256:	79 f0       	breq	.+30     	; 0x2276 <__stack+0x77>
    2258:	ad c0       	rjmp	.+346    	; 0x23b4 <__stack+0x1b5>
    225a:	80 37       	cpi	r24, 0x70	; 112
    225c:	19 f0       	breq	.+6      	; 0x2264 <__stack+0x65>
    225e:	88 37       	cpi	r24, 0x78	; 120
    2260:	21 f0       	breq	.+8      	; 0x226a <__stack+0x6b>
    2262:	a8 c0       	rjmp	.+336    	; 0x23b4 <__stack+0x1b5>
    2264:	2f 2f       	mov	r18, r31
    2266:	20 61       	ori	r18, 0x10	; 16
    2268:	b2 2e       	mov	r11, r18
    226a:	b4 fe       	sbrs	r11, 4
    226c:	0d c0       	rjmp	.+26     	; 0x2288 <__stack+0x89>
    226e:	8b 2d       	mov	r24, r11
    2270:	84 60       	ori	r24, 0x04	; 4
    2272:	b8 2e       	mov	r11, r24
    2274:	09 c0       	rjmp	.+18     	; 0x2288 <__stack+0x89>
    2276:	24 ff       	sbrs	r18, 4
    2278:	0a c0       	rjmp	.+20     	; 0x228e <__stack+0x8f>
    227a:	9f 2f       	mov	r25, r31
    227c:	96 60       	ori	r25, 0x06	; 6
    227e:	b9 2e       	mov	r11, r25
    2280:	06 c0       	rjmp	.+12     	; 0x228e <__stack+0x8f>
    2282:	28 e0       	ldi	r18, 0x08	; 8
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	05 c0       	rjmp	.+10     	; 0x2292 <__stack+0x93>
    2288:	20 e1       	ldi	r18, 0x10	; 16
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	02 c0       	rjmp	.+4      	; 0x2292 <__stack+0x93>
    228e:	20 e1       	ldi	r18, 0x10	; 16
    2290:	32 e0       	ldi	r19, 0x02	; 2
    2292:	f8 01       	movw	r30, r16
    2294:	b7 fe       	sbrs	r11, 7
    2296:	07 c0       	rjmp	.+14     	; 0x22a6 <__stack+0xa7>
    2298:	60 81       	ld	r22, Z
    229a:	71 81       	ldd	r23, Z+1	; 0x01
    229c:	82 81       	ldd	r24, Z+2	; 0x02
    229e:	93 81       	ldd	r25, Z+3	; 0x03
    22a0:	0c 5f       	subi	r16, 0xFC	; 252
    22a2:	1f 4f       	sbci	r17, 0xFF	; 255
    22a4:	06 c0       	rjmp	.+12     	; 0x22b2 <__stack+0xb3>
    22a6:	60 81       	ld	r22, Z
    22a8:	71 81       	ldd	r23, Z+1	; 0x01
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	0e 5f       	subi	r16, 0xFE	; 254
    22b0:	1f 4f       	sbci	r17, 0xFF	; 255
    22b2:	a4 01       	movw	r20, r8
    22b4:	fc d0       	rcall	.+504    	; 0x24ae <__ultoa_invert>
    22b6:	a8 2e       	mov	r10, r24
    22b8:	a8 18       	sub	r10, r8
    22ba:	fb 2d       	mov	r31, r11
    22bc:	ff 77       	andi	r31, 0x7F	; 127
    22be:	7f 2e       	mov	r7, r31
    22c0:	76 fe       	sbrs	r7, 6
    22c2:	0b c0       	rjmp	.+22     	; 0x22da <__stack+0xdb>
    22c4:	37 2d       	mov	r19, r7
    22c6:	3e 7f       	andi	r19, 0xFE	; 254
    22c8:	a5 14       	cp	r10, r5
    22ca:	50 f4       	brcc	.+20     	; 0x22e0 <__stack+0xe1>
    22cc:	74 fe       	sbrs	r7, 4
    22ce:	0a c0       	rjmp	.+20     	; 0x22e4 <__stack+0xe5>
    22d0:	72 fc       	sbrc	r7, 2
    22d2:	08 c0       	rjmp	.+16     	; 0x22e4 <__stack+0xe5>
    22d4:	37 2d       	mov	r19, r7
    22d6:	3e 7e       	andi	r19, 0xEE	; 238
    22d8:	05 c0       	rjmp	.+10     	; 0x22e4 <__stack+0xe5>
    22da:	ba 2c       	mov	r11, r10
    22dc:	37 2d       	mov	r19, r7
    22de:	03 c0       	rjmp	.+6      	; 0x22e6 <__stack+0xe7>
    22e0:	ba 2c       	mov	r11, r10
    22e2:	01 c0       	rjmp	.+2      	; 0x22e6 <__stack+0xe7>
    22e4:	b5 2c       	mov	r11, r5
    22e6:	34 ff       	sbrs	r19, 4
    22e8:	0d c0       	rjmp	.+26     	; 0x2304 <__stack+0x105>
    22ea:	fe 01       	movw	r30, r28
    22ec:	ea 0d       	add	r30, r10
    22ee:	f1 1d       	adc	r31, r1
    22f0:	80 81       	ld	r24, Z
    22f2:	80 33       	cpi	r24, 0x30	; 48
    22f4:	11 f4       	brne	.+4      	; 0x22fa <__stack+0xfb>
    22f6:	39 7e       	andi	r19, 0xE9	; 233
    22f8:	09 c0       	rjmp	.+18     	; 0x230c <__stack+0x10d>
    22fa:	32 ff       	sbrs	r19, 2
    22fc:	06 c0       	rjmp	.+12     	; 0x230a <__stack+0x10b>
    22fe:	b3 94       	inc	r11
    2300:	b3 94       	inc	r11
    2302:	04 c0       	rjmp	.+8      	; 0x230c <__stack+0x10d>
    2304:	83 2f       	mov	r24, r19
    2306:	86 78       	andi	r24, 0x86	; 134
    2308:	09 f0       	breq	.+2      	; 0x230c <__stack+0x10d>
    230a:	b3 94       	inc	r11
    230c:	33 fd       	sbrc	r19, 3
    230e:	12 c0       	rjmp	.+36     	; 0x2334 <__stack+0x135>
    2310:	30 ff       	sbrs	r19, 0
    2312:	06 c0       	rjmp	.+12     	; 0x2320 <__stack+0x121>
    2314:	5a 2c       	mov	r5, r10
    2316:	b3 14       	cp	r11, r3
    2318:	18 f4       	brcc	.+6      	; 0x2320 <__stack+0x121>
    231a:	53 0c       	add	r5, r3
    231c:	5b 18       	sub	r5, r11
    231e:	b3 2c       	mov	r11, r3
    2320:	b3 14       	cp	r11, r3
    2322:	60 f4       	brcc	.+24     	; 0x233c <__stack+0x13d>
    2324:	b7 01       	movw	r22, r14
    2326:	80 e2       	ldi	r24, 0x20	; 32
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	3c 87       	std	Y+12, r19	; 0x0c
    232c:	88 d0       	rcall	.+272    	; 0x243e <fputc>
    232e:	b3 94       	inc	r11
    2330:	3c 85       	ldd	r19, Y+12	; 0x0c
    2332:	f6 cf       	rjmp	.-20     	; 0x2320 <__stack+0x121>
    2334:	b3 14       	cp	r11, r3
    2336:	10 f4       	brcc	.+4      	; 0x233c <__stack+0x13d>
    2338:	3b 18       	sub	r3, r11
    233a:	01 c0       	rjmp	.+2      	; 0x233e <__stack+0x13f>
    233c:	31 2c       	mov	r3, r1
    233e:	34 ff       	sbrs	r19, 4
    2340:	11 c0       	rjmp	.+34     	; 0x2364 <__stack+0x165>
    2342:	b7 01       	movw	r22, r14
    2344:	80 e3       	ldi	r24, 0x30	; 48
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	3c 87       	std	Y+12, r19	; 0x0c
    234a:	79 d0       	rcall	.+242    	; 0x243e <fputc>
    234c:	3c 85       	ldd	r19, Y+12	; 0x0c
    234e:	32 ff       	sbrs	r19, 2
    2350:	16 c0       	rjmp	.+44     	; 0x237e <__stack+0x17f>
    2352:	31 fd       	sbrc	r19, 1
    2354:	03 c0       	rjmp	.+6      	; 0x235c <__stack+0x15d>
    2356:	88 e7       	ldi	r24, 0x78	; 120
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	02 c0       	rjmp	.+4      	; 0x2360 <__stack+0x161>
    235c:	88 e5       	ldi	r24, 0x58	; 88
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	b7 01       	movw	r22, r14
    2362:	0c c0       	rjmp	.+24     	; 0x237c <__stack+0x17d>
    2364:	83 2f       	mov	r24, r19
    2366:	86 78       	andi	r24, 0x86	; 134
    2368:	51 f0       	breq	.+20     	; 0x237e <__stack+0x17f>
    236a:	31 ff       	sbrs	r19, 1
    236c:	02 c0       	rjmp	.+4      	; 0x2372 <__stack+0x173>
    236e:	8b e2       	ldi	r24, 0x2B	; 43
    2370:	01 c0       	rjmp	.+2      	; 0x2374 <__stack+0x175>
    2372:	80 e2       	ldi	r24, 0x20	; 32
    2374:	37 fd       	sbrc	r19, 7
    2376:	8d e2       	ldi	r24, 0x2D	; 45
    2378:	b7 01       	movw	r22, r14
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	60 d0       	rcall	.+192    	; 0x243e <fputc>
    237e:	a5 14       	cp	r10, r5
    2380:	30 f4       	brcc	.+12     	; 0x238e <__stack+0x18f>
    2382:	b7 01       	movw	r22, r14
    2384:	80 e3       	ldi	r24, 0x30	; 48
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	5a d0       	rcall	.+180    	; 0x243e <fputc>
    238a:	5a 94       	dec	r5
    238c:	f8 cf       	rjmp	.-16     	; 0x237e <__stack+0x17f>
    238e:	aa 94       	dec	r10
    2390:	f4 01       	movw	r30, r8
    2392:	ea 0d       	add	r30, r10
    2394:	f1 1d       	adc	r31, r1
    2396:	80 81       	ld	r24, Z
    2398:	b7 01       	movw	r22, r14
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	50 d0       	rcall	.+160    	; 0x243e <fputc>
    239e:	a1 10       	cpse	r10, r1
    23a0:	f6 cf       	rjmp	.-20     	; 0x238e <__stack+0x18f>
    23a2:	33 20       	and	r3, r3
    23a4:	09 f4       	brne	.+2      	; 0x23a8 <__stack+0x1a9>
    23a6:	5d ce       	rjmp	.-838    	; 0x2062 <vfprintf+0x4c>
    23a8:	b7 01       	movw	r22, r14
    23aa:	80 e2       	ldi	r24, 0x20	; 32
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	47 d0       	rcall	.+142    	; 0x243e <fputc>
    23b0:	3a 94       	dec	r3
    23b2:	f7 cf       	rjmp	.-18     	; 0x23a2 <__stack+0x1a3>
    23b4:	f7 01       	movw	r30, r14
    23b6:	86 81       	ldd	r24, Z+6	; 0x06
    23b8:	97 81       	ldd	r25, Z+7	; 0x07
    23ba:	02 c0       	rjmp	.+4      	; 0x23c0 <__stack+0x1c1>
    23bc:	8f ef       	ldi	r24, 0xFF	; 255
    23be:	9f ef       	ldi	r25, 0xFF	; 255
    23c0:	2c 96       	adiw	r28, 0x0c	; 12
    23c2:	0f b6       	in	r0, 0x3f	; 63
    23c4:	f8 94       	cli
    23c6:	de bf       	out	0x3e, r29	; 62
    23c8:	0f be       	out	0x3f, r0	; 63
    23ca:	cd bf       	out	0x3d, r28	; 61
    23cc:	df 91       	pop	r29
    23ce:	cf 91       	pop	r28
    23d0:	1f 91       	pop	r17
    23d2:	0f 91       	pop	r16
    23d4:	ff 90       	pop	r15
    23d6:	ef 90       	pop	r14
    23d8:	df 90       	pop	r13
    23da:	cf 90       	pop	r12
    23dc:	bf 90       	pop	r11
    23de:	af 90       	pop	r10
    23e0:	9f 90       	pop	r9
    23e2:	8f 90       	pop	r8
    23e4:	7f 90       	pop	r7
    23e6:	6f 90       	pop	r6
    23e8:	5f 90       	pop	r5
    23ea:	4f 90       	pop	r4
    23ec:	3f 90       	pop	r3
    23ee:	2f 90       	pop	r2
    23f0:	08 95       	ret

000023f2 <strnlen_P>:
    23f2:	fc 01       	movw	r30, r24
    23f4:	05 90       	lpm	r0, Z+
    23f6:	61 50       	subi	r22, 0x01	; 1
    23f8:	70 40       	sbci	r23, 0x00	; 0
    23fa:	01 10       	cpse	r0, r1
    23fc:	d8 f7       	brcc	.-10     	; 0x23f4 <strnlen_P+0x2>
    23fe:	80 95       	com	r24
    2400:	90 95       	com	r25
    2402:	8e 0f       	add	r24, r30
    2404:	9f 1f       	adc	r25, r31
    2406:	08 95       	ret

00002408 <strnlen>:
    2408:	fc 01       	movw	r30, r24
    240a:	61 50       	subi	r22, 0x01	; 1
    240c:	70 40       	sbci	r23, 0x00	; 0
    240e:	01 90       	ld	r0, Z+
    2410:	01 10       	cpse	r0, r1
    2412:	d8 f7       	brcc	.-10     	; 0x240a <strnlen+0x2>
    2414:	80 95       	com	r24
    2416:	90 95       	com	r25
    2418:	8e 0f       	add	r24, r30
    241a:	9f 1f       	adc	r25, r31
    241c:	08 95       	ret

0000241e <strrev>:
    241e:	dc 01       	movw	r26, r24
    2420:	fc 01       	movw	r30, r24
    2422:	67 2f       	mov	r22, r23
    2424:	71 91       	ld	r23, Z+
    2426:	77 23       	and	r23, r23
    2428:	e1 f7       	brne	.-8      	; 0x2422 <strrev+0x4>
    242a:	32 97       	sbiw	r30, 0x02	; 2
    242c:	04 c0       	rjmp	.+8      	; 0x2436 <strrev+0x18>
    242e:	7c 91       	ld	r23, X
    2430:	6d 93       	st	X+, r22
    2432:	70 83       	st	Z, r23
    2434:	62 91       	ld	r22, -Z
    2436:	ae 17       	cp	r26, r30
    2438:	bf 07       	cpc	r27, r31
    243a:	c8 f3       	brcs	.-14     	; 0x242e <strrev+0x10>
    243c:	08 95       	ret

0000243e <fputc>:
    243e:	0f 93       	push	r16
    2440:	1f 93       	push	r17
    2442:	cf 93       	push	r28
    2444:	df 93       	push	r29
    2446:	fb 01       	movw	r30, r22
    2448:	23 81       	ldd	r18, Z+3	; 0x03
    244a:	21 fd       	sbrc	r18, 1
    244c:	03 c0       	rjmp	.+6      	; 0x2454 <fputc+0x16>
    244e:	8f ef       	ldi	r24, 0xFF	; 255
    2450:	9f ef       	ldi	r25, 0xFF	; 255
    2452:	28 c0       	rjmp	.+80     	; 0x24a4 <fputc+0x66>
    2454:	22 ff       	sbrs	r18, 2
    2456:	16 c0       	rjmp	.+44     	; 0x2484 <fputc+0x46>
    2458:	46 81       	ldd	r20, Z+6	; 0x06
    245a:	57 81       	ldd	r21, Z+7	; 0x07
    245c:	24 81       	ldd	r18, Z+4	; 0x04
    245e:	35 81       	ldd	r19, Z+5	; 0x05
    2460:	42 17       	cp	r20, r18
    2462:	53 07       	cpc	r21, r19
    2464:	44 f4       	brge	.+16     	; 0x2476 <fputc+0x38>
    2466:	a0 81       	ld	r26, Z
    2468:	b1 81       	ldd	r27, Z+1	; 0x01
    246a:	9d 01       	movw	r18, r26
    246c:	2f 5f       	subi	r18, 0xFF	; 255
    246e:	3f 4f       	sbci	r19, 0xFF	; 255
    2470:	31 83       	std	Z+1, r19	; 0x01
    2472:	20 83       	st	Z, r18
    2474:	8c 93       	st	X, r24
    2476:	26 81       	ldd	r18, Z+6	; 0x06
    2478:	37 81       	ldd	r19, Z+7	; 0x07
    247a:	2f 5f       	subi	r18, 0xFF	; 255
    247c:	3f 4f       	sbci	r19, 0xFF	; 255
    247e:	37 83       	std	Z+7, r19	; 0x07
    2480:	26 83       	std	Z+6, r18	; 0x06
    2482:	10 c0       	rjmp	.+32     	; 0x24a4 <fputc+0x66>
    2484:	eb 01       	movw	r28, r22
    2486:	09 2f       	mov	r16, r25
    2488:	18 2f       	mov	r17, r24
    248a:	00 84       	ldd	r0, Z+8	; 0x08
    248c:	f1 85       	ldd	r31, Z+9	; 0x09
    248e:	e0 2d       	mov	r30, r0
    2490:	19 95       	eicall
    2492:	89 2b       	or	r24, r25
    2494:	e1 f6       	brne	.-72     	; 0x244e <fputc+0x10>
    2496:	8e 81       	ldd	r24, Y+6	; 0x06
    2498:	9f 81       	ldd	r25, Y+7	; 0x07
    249a:	01 96       	adiw	r24, 0x01	; 1
    249c:	9f 83       	std	Y+7, r25	; 0x07
    249e:	8e 83       	std	Y+6, r24	; 0x06
    24a0:	81 2f       	mov	r24, r17
    24a2:	90 2f       	mov	r25, r16
    24a4:	df 91       	pop	r29
    24a6:	cf 91       	pop	r28
    24a8:	1f 91       	pop	r17
    24aa:	0f 91       	pop	r16
    24ac:	08 95       	ret

000024ae <__ultoa_invert>:
    24ae:	fa 01       	movw	r30, r20
    24b0:	aa 27       	eor	r26, r26
    24b2:	28 30       	cpi	r18, 0x08	; 8
    24b4:	51 f1       	breq	.+84     	; 0x250a <__ultoa_invert+0x5c>
    24b6:	20 31       	cpi	r18, 0x10	; 16
    24b8:	81 f1       	breq	.+96     	; 0x251a <__ultoa_invert+0x6c>
    24ba:	e8 94       	clt
    24bc:	6f 93       	push	r22
    24be:	6e 7f       	andi	r22, 0xFE	; 254
    24c0:	6e 5f       	subi	r22, 0xFE	; 254
    24c2:	7f 4f       	sbci	r23, 0xFF	; 255
    24c4:	8f 4f       	sbci	r24, 0xFF	; 255
    24c6:	9f 4f       	sbci	r25, 0xFF	; 255
    24c8:	af 4f       	sbci	r26, 0xFF	; 255
    24ca:	b1 e0       	ldi	r27, 0x01	; 1
    24cc:	3e d0       	rcall	.+124    	; 0x254a <__ultoa_invert+0x9c>
    24ce:	b4 e0       	ldi	r27, 0x04	; 4
    24d0:	3c d0       	rcall	.+120    	; 0x254a <__ultoa_invert+0x9c>
    24d2:	67 0f       	add	r22, r23
    24d4:	78 1f       	adc	r23, r24
    24d6:	89 1f       	adc	r24, r25
    24d8:	9a 1f       	adc	r25, r26
    24da:	a1 1d       	adc	r26, r1
    24dc:	68 0f       	add	r22, r24
    24de:	79 1f       	adc	r23, r25
    24e0:	8a 1f       	adc	r24, r26
    24e2:	91 1d       	adc	r25, r1
    24e4:	a1 1d       	adc	r26, r1
    24e6:	6a 0f       	add	r22, r26
    24e8:	71 1d       	adc	r23, r1
    24ea:	81 1d       	adc	r24, r1
    24ec:	91 1d       	adc	r25, r1
    24ee:	a1 1d       	adc	r26, r1
    24f0:	20 d0       	rcall	.+64     	; 0x2532 <__ultoa_invert+0x84>
    24f2:	09 f4       	brne	.+2      	; 0x24f6 <__ultoa_invert+0x48>
    24f4:	68 94       	set
    24f6:	3f 91       	pop	r19
    24f8:	2a e0       	ldi	r18, 0x0A	; 10
    24fa:	26 9f       	mul	r18, r22
    24fc:	11 24       	eor	r1, r1
    24fe:	30 19       	sub	r19, r0
    2500:	30 5d       	subi	r19, 0xD0	; 208
    2502:	31 93       	st	Z+, r19
    2504:	de f6       	brtc	.-74     	; 0x24bc <__ultoa_invert+0xe>
    2506:	cf 01       	movw	r24, r30
    2508:	08 95       	ret
    250a:	46 2f       	mov	r20, r22
    250c:	47 70       	andi	r20, 0x07	; 7
    250e:	40 5d       	subi	r20, 0xD0	; 208
    2510:	41 93       	st	Z+, r20
    2512:	b3 e0       	ldi	r27, 0x03	; 3
    2514:	0f d0       	rcall	.+30     	; 0x2534 <__ultoa_invert+0x86>
    2516:	c9 f7       	brne	.-14     	; 0x250a <__ultoa_invert+0x5c>
    2518:	f6 cf       	rjmp	.-20     	; 0x2506 <__ultoa_invert+0x58>
    251a:	46 2f       	mov	r20, r22
    251c:	4f 70       	andi	r20, 0x0F	; 15
    251e:	40 5d       	subi	r20, 0xD0	; 208
    2520:	4a 33       	cpi	r20, 0x3A	; 58
    2522:	18 f0       	brcs	.+6      	; 0x252a <__ultoa_invert+0x7c>
    2524:	49 5d       	subi	r20, 0xD9	; 217
    2526:	31 fd       	sbrc	r19, 1
    2528:	40 52       	subi	r20, 0x20	; 32
    252a:	41 93       	st	Z+, r20
    252c:	02 d0       	rcall	.+4      	; 0x2532 <__ultoa_invert+0x84>
    252e:	a9 f7       	brne	.-22     	; 0x251a <__ultoa_invert+0x6c>
    2530:	ea cf       	rjmp	.-44     	; 0x2506 <__ultoa_invert+0x58>
    2532:	b4 e0       	ldi	r27, 0x04	; 4
    2534:	a6 95       	lsr	r26
    2536:	97 95       	ror	r25
    2538:	87 95       	ror	r24
    253a:	77 95       	ror	r23
    253c:	67 95       	ror	r22
    253e:	ba 95       	dec	r27
    2540:	c9 f7       	brne	.-14     	; 0x2534 <__ultoa_invert+0x86>
    2542:	00 97       	sbiw	r24, 0x00	; 0
    2544:	61 05       	cpc	r22, r1
    2546:	71 05       	cpc	r23, r1
    2548:	08 95       	ret
    254a:	9b 01       	movw	r18, r22
    254c:	ac 01       	movw	r20, r24
    254e:	0a 2e       	mov	r0, r26
    2550:	06 94       	lsr	r0
    2552:	57 95       	ror	r21
    2554:	47 95       	ror	r20
    2556:	37 95       	ror	r19
    2558:	27 95       	ror	r18
    255a:	ba 95       	dec	r27
    255c:	c9 f7       	brne	.-14     	; 0x2550 <__ultoa_invert+0xa2>
    255e:	62 0f       	add	r22, r18
    2560:	73 1f       	adc	r23, r19
    2562:	84 1f       	adc	r24, r20
    2564:	95 1f       	adc	r25, r21
    2566:	a0 1d       	adc	r26, r0
    2568:	08 95       	ret

0000256a <_exit>:
    256a:	f8 94       	cli

0000256c <__stop_program>:
    256c:	ff cf       	rjmp	.-2      	; 0x256c <__stop_program>
