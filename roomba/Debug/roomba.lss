
roomba.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000004ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000043a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020a  00800200  00800200  000004ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001638  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004b6  00000000  00000000  00001cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b00  00000000  00000000  0000217e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d0  00000000  00000000  00002c80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000861  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dd4  00000000  00000000  000038b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00004685  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	d0 c0       	rjmp	.+416    	; 0x206 <__vector_25>
  66:	00 00       	nop
  68:	07 c1       	rjmp	.+526    	; 0x278 <__vector_26>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	69 c1       	rjmp	.+722    	; 0x364 <__vector_36>
  92:	00 00       	nop
  94:	a0 c1       	rjmp	.+832    	; 0x3d6 <__vector_37>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e3       	ldi	r30, 0x3A	; 58
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	24 e0       	ldi	r18, 0x04	; 4
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 30       	cpi	r26, 0x0A	; 10
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	8a c1       	rjmp	.+788    	; 0x436 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
#include "roomba/roomba.h"
#include "uart/uart.h"

int main(void)
{
    Roomba_Init();
 124:	06 d0       	rcall	.+12     	; 0x132 <Roomba_Init>
	Roomba_Drive(100, 0x8000);
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	70 e8       	ldi	r23, 0x80	; 128
 12a:	84 e6       	ldi	r24, 0x64	; 100
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	54 d0       	rcall	.+168    	; 0x1d8 <Roomba_Drive>
	for(;;){}
 130:	ff cf       	rjmp	.-2      	; 0x130 <main+0xc>

00000132 <Roomba_Init>:
		return;
	}

	state = newState;
	_delay_ms(20);
}
 132:	3d 9a       	sbi	0x07, 5	; 7
 134:	45 98       	cbi	0x08, 5	; 8
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	39 e6       	ldi	r19, 0x69	; 105
 13a:	88 e1       	ldi	r24, 0x18	; 24
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	30 40       	sbci	r19, 0x00	; 0
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <Roomba_Init+0xa>
 144:	00 c0       	rjmp	.+0      	; 0x146 <Roomba_Init+0x14>
 146:	00 00       	nop
 148:	45 9a       	sbi	0x08, 5	; 8
 14a:	9f ef       	ldi	r25, 0xFF	; 255
 14c:	27 ea       	ldi	r18, 0xA7	; 167
 14e:	31 e6       	ldi	r19, 0x61	; 97
 150:	91 50       	subi	r25, 0x01	; 1
 152:	20 40       	sbci	r18, 0x00	; 0
 154:	30 40       	sbci	r19, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <Roomba_Init+0x1e>
 158:	00 c0       	rjmp	.+0      	; 0x15a <Roomba_Init+0x28>
 15a:	00 00       	nop
 15c:	83 e0       	ldi	r24, 0x03	; 3
 15e:	45 98       	cbi	0x08, 5	; 8
 160:	9f ef       	ldi	r25, 0xFF	; 255
 162:	20 e7       	ldi	r18, 0x70	; 112
 164:	32 e0       	ldi	r19, 0x02	; 2
 166:	91 50       	subi	r25, 0x01	; 1
 168:	20 40       	sbci	r18, 0x00	; 0
 16a:	30 40       	sbci	r19, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <Roomba_Init+0x34>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <Roomba_Init+0x3e>
 170:	00 00       	nop
 172:	45 9a       	sbi	0x08, 5	; 8
 174:	9f ef       	ldi	r25, 0xFF	; 255
 176:	20 e7       	ldi	r18, 0x70	; 112
 178:	32 e0       	ldi	r19, 0x02	; 2
 17a:	91 50       	subi	r25, 0x01	; 1
 17c:	20 40       	sbci	r18, 0x00	; 0
 17e:	30 40       	sbci	r19, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <Roomba_Init+0x48>
 182:	00 c0       	rjmp	.+0      	; 0x184 <Roomba_Init+0x52>
 184:	00 00       	nop
 186:	81 50       	subi	r24, 0x01	; 1
 188:	51 f7       	brne	.-44     	; 0x15e <Roomba_Init+0x2c>
 18a:	a6 d0       	rcall	.+332    	; 0x2d8 <uart0_init>
 18c:	80 e8       	ldi	r24, 0x80	; 128
 18e:	d1 d0       	rcall	.+418    	; 0x332 <uart0_putc>
 190:	8f ef       	ldi	r24, 0xFF	; 255
 192:	99 ef       	ldi	r25, 0xF9	; 249
 194:	20 e0       	ldi	r18, 0x00	; 0
 196:	81 50       	subi	r24, 0x01	; 1
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	20 40       	sbci	r18, 0x00	; 0
 19c:	e1 f7       	brne	.-8      	; 0x196 <Roomba_Init+0x64>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <Roomba_Init+0x6e>
 1a0:	00 00       	nop
 1a2:	81 e8       	ldi	r24, 0x81	; 129
 1a4:	c6 d0       	rcall	.+396    	; 0x332 <uart0_putc>
 1a6:	89 e0       	ldi	r24, 0x09	; 9
 1a8:	c4 d0       	rcall	.+392    	; 0x332 <uart0_putc>
 1aa:	3f ef       	ldi	r19, 0xFF	; 255
 1ac:	81 ee       	ldi	r24, 0xE1	; 225
 1ae:	94 e0       	ldi	r25, 0x04	; 4
 1b0:	31 50       	subi	r19, 0x01	; 1
 1b2:	80 40       	sbci	r24, 0x00	; 0
 1b4:	90 40       	sbci	r25, 0x00	; 0
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <Roomba_Init+0x7e>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <Roomba_Init+0x88>
 1ba:	00 00       	nop
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	8c d0       	rcall	.+280    	; 0x2d8 <uart0_init>
 1c0:	82 e8       	ldi	r24, 0x82	; 130
 1c2:	b7 d0       	rcall	.+366    	; 0x332 <uart0_putc>
 1c4:	2f ef       	ldi	r18, 0xFF	; 255
 1c6:	39 ef       	ldi	r19, 0xF9	; 249
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	21 50       	subi	r18, 0x01	; 1
 1cc:	30 40       	sbci	r19, 0x00	; 0
 1ce:	80 40       	sbci	r24, 0x00	; 0
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <Roomba_Init+0x98>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <Roomba_Init+0xa2>
 1d4:	00 00       	nop
 1d6:	08 95       	ret

000001d8 <Roomba_Drive>:

void Roomba_Drive( int16_t velocity, int16_t radius )
{
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	18 2f       	mov	r17, r24
 1e2:	09 2f       	mov	r16, r25
 1e4:	c6 2f       	mov	r28, r22
 1e6:	d7 2f       	mov	r29, r23
	uart_putc(DRIVE);
 1e8:	89 e8       	ldi	r24, 0x89	; 137
 1ea:	a3 d0       	rcall	.+326    	; 0x332 <uart0_putc>
	uart_putc(HIGH_BYTE(velocity));
 1ec:	80 2f       	mov	r24, r16
 1ee:	a1 d0       	rcall	.+322    	; 0x332 <uart0_putc>
	uart_putc(LOW_BYTE(velocity));
 1f0:	81 2f       	mov	r24, r17
 1f2:	9f d0       	rcall	.+318    	; 0x332 <uart0_putc>
	uart_putc(HIGH_BYTE(radius));
 1f4:	8d 2f       	mov	r24, r29
 1f6:	9d d0       	rcall	.+314    	; 0x332 <uart0_putc>
	uart_putc(LOW_BYTE(radius));
 1f8:	8c 2f       	mov	r24, r28
 1fa:	9b d0       	rcall	.+310    	; 0x332 <uart0_putc>
}
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	1f 91       	pop	r17
 202:	0f 91       	pop	r16
 204:	08 95       	ret

00000206 <__vector_25>:
Input:    None
Returns:  None
**************************************************************************/
void uart0_flush(void)
{
	UART_RxHead = UART_RxTail;
 206:	1f 92       	push	r1
 208:	0f 92       	push	r0
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	0f 92       	push	r0
 20e:	11 24       	eor	r1, r1
 210:	0b b6       	in	r0, 0x3b	; 59
 212:	0f 92       	push	r0
 214:	2f 93       	push	r18
 216:	3f 93       	push	r19
 218:	4f 93       	push	r20
 21a:	5f 93       	push	r21
 21c:	8f 93       	push	r24
 21e:	9f 93       	push	r25
 220:	ef 93       	push	r30
 222:	ff 93       	push	r31
 224:	20 91 c0 00 	lds	r18, 0x00C0
 228:	30 91 c6 00 	lds	r19, 0x00C6
 22c:	28 71       	andi	r18, 0x18	; 24
 22e:	80 91 07 03 	lds	r24, 0x0307
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	8f 77       	andi	r24, 0x7F	; 127
 238:	99 27       	eor	r25, r25
 23a:	40 91 06 03 	lds	r20, 0x0306
 23e:	50 e0       	ldi	r21, 0x00	; 0
 240:	48 17       	cp	r20, r24
 242:	59 07       	cpc	r21, r25
 244:	39 f0       	breq	.+14     	; 0x254 <__vector_25+0x4e>
 246:	80 93 07 03 	sts	0x0307, r24
 24a:	fc 01       	movw	r30, r24
 24c:	e6 5f       	subi	r30, 0xF6	; 246
 24e:	fc 4f       	sbci	r31, 0xFC	; 252
 250:	30 83       	st	Z, r19
 252:	01 c0       	rjmp	.+2      	; 0x256 <__vector_25+0x50>
 254:	22 e0       	ldi	r18, 0x02	; 2
 256:	20 93 05 03 	sts	0x0305, r18
 25a:	ff 91       	pop	r31
 25c:	ef 91       	pop	r30
 25e:	9f 91       	pop	r25
 260:	8f 91       	pop	r24
 262:	5f 91       	pop	r21
 264:	4f 91       	pop	r20
 266:	3f 91       	pop	r19
 268:	2f 91       	pop	r18
 26a:	0f 90       	pop	r0
 26c:	0b be       	out	0x3b, r0	; 59
 26e:	0f 90       	pop	r0
 270:	0f be       	out	0x3f, r0	; 63
 272:	0f 90       	pop	r0
 274:	1f 90       	pop	r1
 276:	18 95       	reti

00000278 <__vector_26>:
 278:	1f 92       	push	r1
 27a:	0f 92       	push	r0
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	0f 92       	push	r0
 280:	11 24       	eor	r1, r1
 282:	0b b6       	in	r0, 0x3b	; 59
 284:	0f 92       	push	r0
 286:	8f 93       	push	r24
 288:	9f 93       	push	r25
 28a:	ef 93       	push	r30
 28c:	ff 93       	push	r31
 28e:	90 91 09 03 	lds	r25, 0x0309
 292:	80 91 08 03 	lds	r24, 0x0308
 296:	98 17       	cp	r25, r24
 298:	79 f0       	breq	.+30     	; 0x2b8 <__vector_26+0x40>
 29a:	80 91 08 03 	lds	r24, 0x0308
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	01 96       	adiw	r24, 0x01	; 1
 2a2:	8f 77       	andi	r24, 0x7F	; 127
 2a4:	99 27       	eor	r25, r25
 2a6:	80 93 08 03 	sts	0x0308, r24
 2aa:	fc 01       	movw	r30, r24
 2ac:	e6 57       	subi	r30, 0x76	; 118
 2ae:	fc 4f       	sbci	r31, 0xFC	; 252
 2b0:	80 81       	ld	r24, Z
 2b2:	80 93 c6 00 	sts	0x00C6, r24
 2b6:	05 c0       	rjmp	.+10     	; 0x2c2 <__vector_26+0x4a>
 2b8:	e1 ec       	ldi	r30, 0xC1	; 193
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	8f 7d       	andi	r24, 0xDF	; 223
 2c0:	80 83       	st	Z, r24
 2c2:	ff 91       	pop	r31
 2c4:	ef 91       	pop	r30
 2c6:	9f 91       	pop	r25
 2c8:	8f 91       	pop	r24
 2ca:	0f 90       	pop	r0
 2cc:	0b be       	out	0x3b, r0	; 59
 2ce:	0f 90       	pop	r0
 2d0:	0f be       	out	0x3f, r0	; 63
 2d2:	0f 90       	pop	r0
 2d4:	1f 90       	pop	r1
 2d6:	18 95       	reti

000002d8 <uart0_init>:
 2d8:	10 92 09 03 	sts	0x0309, r1
 2dc:	10 92 08 03 	sts	0x0308, r1
 2e0:	10 92 07 03 	sts	0x0307, r1
 2e4:	10 92 06 03 	sts	0x0306, r1
 2e8:	81 30       	cpi	r24, 0x01	; 1
 2ea:	41 f0       	breq	.+16     	; 0x2fc <uart0_init+0x24>
 2ec:	18 f0       	brcs	.+6      	; 0x2f4 <uart0_init+0x1c>
 2ee:	82 30       	cpi	r24, 0x02	; 2
 2f0:	49 f0       	breq	.+18     	; 0x304 <uart0_init+0x2c>
 2f2:	0c c0       	rjmp	.+24     	; 0x30c <uart0_init+0x34>
 2f4:	87 e6       	ldi	r24, 0x67	; 103
 2f6:	80 93 c4 00 	sts	0x00C4, r24
 2fa:	0b c0       	rjmp	.+22     	; 0x312 <uart0_init+0x3a>
 2fc:	83 e3       	ldi	r24, 0x33	; 51
 2fe:	80 93 c4 00 	sts	0x00C4, r24
 302:	07 c0       	rjmp	.+14     	; 0x312 <uart0_init+0x3a>
 304:	82 e2       	ldi	r24, 0x22	; 34
 306:	80 93 c4 00 	sts	0x00C4, r24
 30a:	03 c0       	rjmp	.+6      	; 0x312 <uart0_init+0x3a>
 30c:	87 e6       	ldi	r24, 0x67	; 103
 30e:	80 93 c4 00 	sts	0x00C4, r24
 312:	80 91 c5 00 	lds	r24, 0x00C5
 316:	80 91 c4 00 	lds	r24, 0x00C4
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	80 93 c5 00 	sts	0x00C5, r24
 320:	10 92 c4 00 	sts	0x00C4, r1
 324:	88 e9       	ldi	r24, 0x98	; 152
 326:	80 93 c1 00 	sts	0x00C1, r24
 32a:	86 e0       	ldi	r24, 0x06	; 6
 32c:	80 93 c2 00 	sts	0x00C2, r24
 330:	08 95       	ret

00000332 <uart0_putc>:
 332:	40 91 09 03 	lds	r20, 0x0309
 336:	50 e0       	ldi	r21, 0x00	; 0
 338:	4f 5f       	subi	r20, 0xFF	; 255
 33a:	5f 4f       	sbci	r21, 0xFF	; 255
 33c:	4f 77       	andi	r20, 0x7F	; 127
 33e:	55 27       	eor	r21, r21
 340:	20 91 08 03 	lds	r18, 0x0308
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	24 17       	cp	r18, r20
 348:	35 07       	cpc	r19, r21
 34a:	d1 f3       	breq	.-12     	; 0x340 <uart0_putc+0xe>
 34c:	fa 01       	movw	r30, r20
 34e:	e6 57       	subi	r30, 0x76	; 118
 350:	fc 4f       	sbci	r31, 0xFC	; 252
 352:	80 83       	st	Z, r24
 354:	40 93 09 03 	sts	0x0309, r20
 358:	e1 ec       	ldi	r30, 0xC1	; 193
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	80 62       	ori	r24, 0x20	; 32
 360:	80 83       	st	Z, r24
 362:	08 95       	ret

00000364 <__vector_36>:
ISR(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
 364:	1f 92       	push	r1
 366:	0f 92       	push	r0
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	0f 92       	push	r0
 36c:	11 24       	eor	r1, r1
 36e:	0b b6       	in	r0, 0x3b	; 59
 370:	0f 92       	push	r0
 372:	2f 93       	push	r18
 374:	3f 93       	push	r19
 376:	4f 93       	push	r20
 378:	5f 93       	push	r21
 37a:	8f 93       	push	r24
 37c:	9f 93       	push	r25
 37e:	ef 93       	push	r30
 380:	ff 93       	push	r31
	uint8_t data;
	uint8_t usr;
	uint8_t lastRxError;

	/* read UART status register and UART data register */
	usr  = UART1_STATUS;
 382:	20 91 c8 00 	lds	r18, 0x00C8
	data = UART1_DATA;
 386:	30 91 ce 00 	lds	r19, 0x00CE

	/* */
	lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
 38a:	28 71       	andi	r18, 0x18	; 24

	/* calculate buffer index */
	tmphead = ( UART1_RxHead + 1) & UART_RX1_BUFFER_MASK;
 38c:	80 91 02 02 	lds	r24, 0x0202
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	01 96       	adiw	r24, 0x01	; 1
 394:	8f 77       	andi	r24, 0x7F	; 127
 396:	99 27       	eor	r25, r25

	if ( tmphead == UART1_RxTail ) {
 398:	40 91 01 02 	lds	r20, 0x0201
 39c:	50 e0       	ldi	r21, 0x00	; 0
 39e:	48 17       	cp	r20, r24
 3a0:	59 07       	cpc	r21, r25
 3a2:	39 f0       	breq	.+14     	; 0x3b2 <__vector_36+0x4e>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
	} else {
		/* store new index */
		UART1_RxHead = tmphead;
 3a4:	80 93 02 02 	sts	0x0202, r24
		/* store received data in buffer */
		UART1_RxBuf[tmphead] = data;
 3a8:	fc 01       	movw	r30, r24
 3aa:	eb 5f       	subi	r30, 0xFB	; 251
 3ac:	fd 4f       	sbci	r31, 0xFD	; 253
 3ae:	30 83       	st	Z, r19
 3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <__vector_36+0x50>
	/* calculate buffer index */
	tmphead = ( UART1_RxHead + 1) & UART_RX1_BUFFER_MASK;

	if ( tmphead == UART1_RxTail ) {
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
 3b2:	22 e0       	ldi	r18, 0x02	; 2
		/* store new index */
		UART1_RxHead = tmphead;
		/* store received data in buffer */
		UART1_RxBuf[tmphead] = data;
	}
	UART1_LastRxError = lastRxError;
 3b4:	20 93 00 02 	sts	0x0200, r18
}
 3b8:	ff 91       	pop	r31
 3ba:	ef 91       	pop	r30
 3bc:	9f 91       	pop	r25
 3be:	8f 91       	pop	r24
 3c0:	5f 91       	pop	r21
 3c2:	4f 91       	pop	r20
 3c4:	3f 91       	pop	r19
 3c6:	2f 91       	pop	r18
 3c8:	0f 90       	pop	r0
 3ca:	0b be       	out	0x3b, r0	; 59
 3cc:	0f 90       	pop	r0
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	0f 90       	pop	r0
 3d2:	1f 90       	pop	r1
 3d4:	18 95       	reti

000003d6 <__vector_37>:
ISR(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
 3d6:	1f 92       	push	r1
 3d8:	0f 92       	push	r0
 3da:	0f b6       	in	r0, 0x3f	; 63
 3dc:	0f 92       	push	r0
 3de:	11 24       	eor	r1, r1
 3e0:	0b b6       	in	r0, 0x3b	; 59
 3e2:	0f 92       	push	r0
 3e4:	8f 93       	push	r24
 3e6:	9f 93       	push	r25
 3e8:	ef 93       	push	r30
 3ea:	ff 93       	push	r31
	uint16_t tmptail;

	if ( UART1_TxHead != UART1_TxTail) {
 3ec:	90 91 04 02 	lds	r25, 0x0204
 3f0:	80 91 03 02 	lds	r24, 0x0203
 3f4:	98 17       	cp	r25, r24
 3f6:	79 f0       	breq	.+30     	; 0x416 <__vector_37+0x40>
		/* calculate and store new buffer index */
		tmptail = (UART1_TxTail + 1) & UART_TX1_BUFFER_MASK;
 3f8:	80 91 03 02 	lds	r24, 0x0203
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	01 96       	adiw	r24, 0x01	; 1
 400:	8f 77       	andi	r24, 0x7F	; 127
 402:	99 27       	eor	r25, r25
		UART1_TxTail = tmptail;
 404:	80 93 03 02 	sts	0x0203, r24
		/* get one byte from buffer and write it to UART */
		UART1_DATA = UART1_TxBuf[tmptail];  /* start transmission */
 408:	fc 01       	movw	r30, r24
 40a:	eb 57       	subi	r30, 0x7B	; 123
 40c:	fd 4f       	sbci	r31, 0xFD	; 253
 40e:	80 81       	ld	r24, Z
 410:	80 93 ce 00 	sts	0x00CE, r24
 414:	05 c0       	rjmp	.+10     	; 0x420 <__vector_37+0x4a>
	} else {
		/* tx buffer empty, disable UDRE interrupt */
		UART1_CONTROL &= ~_BV(UART1_UDRIE);
 416:	e9 ec       	ldi	r30, 0xC9	; 201
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	80 81       	ld	r24, Z
 41c:	8f 7d       	andi	r24, 0xDF	; 223
 41e:	80 83       	st	Z, r24
	}
}
 420:	ff 91       	pop	r31
 422:	ef 91       	pop	r30
 424:	9f 91       	pop	r25
 426:	8f 91       	pop	r24
 428:	0f 90       	pop	r0
 42a:	0b be       	out	0x3b, r0	; 59
 42c:	0f 90       	pop	r0
 42e:	0f be       	out	0x3f, r0	; 63
 430:	0f 90       	pop	r0
 432:	1f 90       	pop	r1
 434:	18 95       	reti

00000436 <_exit>:
 436:	f8 94       	cli

00000438 <__stop_program>:
 438:	ff cf       	rjmp	.-2      	; 0x438 <__stop_program>
