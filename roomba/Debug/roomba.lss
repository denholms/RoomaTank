
roomba.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000003fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000388  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000042  00800200  00800200  000003fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000042c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013c5  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000431  00000000  00000000  00001929  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000838  00000000  00000000  00001d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  00002594  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006fe  00000000  00000000  000027dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000741  00000000  00000000  00002eda  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000361b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	2d c1       	rjmp	.+602    	; 0x2c0 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c1       	rjmp	.+656    	; 0x322 <__vector_36>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e8       	ldi	r30, 0x88	; 136
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 34       	cpi	r26, 0x42	; 66
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	31 c1       	rjmp	.+610    	; 0x384 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
#include "roomba/roomba.h"
#include "uart/uart.h"

int main(void)
{
    Roomba_Init();
 124:	0a d0       	rcall	.+20     	; 0x13a <Roomba_Init>
	Roomba_Drive(100, 0x8000);
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	70 e8       	ldi	r23, 0x80	; 128
 12a:	84 e6       	ldi	r24, 0x64	; 100
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	60 d0       	rcall	.+192    	; 0x1f0 <Roomba_Drive>
	for(;;){
		uart_putchar(140,1);
 130:	61 e0       	ldi	r22, 0x01	; 1
 132:	70 e0       	ldi	r23, 0x00	; 0
 134:	8c e8       	ldi	r24, 0x8C	; 140
 136:	b2 d0       	rcall	.+356    	; 0x29c <uart_putchar>
	}
 138:	fb cf       	rjmp	.-10     	; 0x130 <main+0xc>

0000013a <Roomba_Init>:
		return;
	}

	state = newState;
	_delay_ms(20);
}
 13a:	3d 9a       	sbi	0x07, 5	; 7
 13c:	45 98       	cbi	0x08, 5	; 8
 13e:	2f ef       	ldi	r18, 0xFF	; 255
 140:	39 e6       	ldi	r19, 0x69	; 105
 142:	88 e1       	ldi	r24, 0x18	; 24
 144:	21 50       	subi	r18, 0x01	; 1
 146:	30 40       	sbci	r19, 0x00	; 0
 148:	80 40       	sbci	r24, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <Roomba_Init+0xa>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <Roomba_Init+0x14>
 14e:	00 00       	nop
 150:	45 9a       	sbi	0x08, 5	; 8
 152:	9f ef       	ldi	r25, 0xFF	; 255
 154:	27 ea       	ldi	r18, 0xA7	; 167
 156:	31 e6       	ldi	r19, 0x61	; 97
 158:	91 50       	subi	r25, 0x01	; 1
 15a:	20 40       	sbci	r18, 0x00	; 0
 15c:	30 40       	sbci	r19, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <Roomba_Init+0x1e>
 160:	00 c0       	rjmp	.+0      	; 0x162 <Roomba_Init+0x28>
 162:	00 00       	nop
 164:	83 e0       	ldi	r24, 0x03	; 3
 166:	45 98       	cbi	0x08, 5	; 8
 168:	9f ef       	ldi	r25, 0xFF	; 255
 16a:	20 e7       	ldi	r18, 0x70	; 112
 16c:	32 e0       	ldi	r19, 0x02	; 2
 16e:	91 50       	subi	r25, 0x01	; 1
 170:	20 40       	sbci	r18, 0x00	; 0
 172:	30 40       	sbci	r19, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <Roomba_Init+0x34>
 176:	00 c0       	rjmp	.+0      	; 0x178 <Roomba_Init+0x3e>
 178:	00 00       	nop
 17a:	45 9a       	sbi	0x08, 5	; 8
 17c:	9f ef       	ldi	r25, 0xFF	; 255
 17e:	20 e7       	ldi	r18, 0x70	; 112
 180:	32 e0       	ldi	r19, 0x02	; 2
 182:	91 50       	subi	r25, 0x01	; 1
 184:	20 40       	sbci	r18, 0x00	; 0
 186:	30 40       	sbci	r19, 0x00	; 0
 188:	e1 f7       	brne	.-8      	; 0x182 <Roomba_Init+0x48>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <Roomba_Init+0x52>
 18c:	00 00       	nop
 18e:	81 50       	subi	r24, 0x01	; 1
 190:	51 f7       	brne	.-44     	; 0x166 <Roomba_Init+0x2c>
 192:	4f d0       	rcall	.+158    	; 0x232 <uart_init>
 194:	60 e0       	ldi	r22, 0x00	; 0
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	80 e8       	ldi	r24, 0x80	; 128
 19a:	80 d0       	rcall	.+256    	; 0x29c <uart_putchar>
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	99 ef       	ldi	r25, 0xF9	; 249
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	81 50       	subi	r24, 0x01	; 1
 1a4:	90 40       	sbci	r25, 0x00	; 0
 1a6:	20 40       	sbci	r18, 0x00	; 0
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <Roomba_Init+0x68>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <Roomba_Init+0x72>
 1ac:	00 00       	nop
 1ae:	60 e0       	ldi	r22, 0x00	; 0
 1b0:	70 e0       	ldi	r23, 0x00	; 0
 1b2:	81 e8       	ldi	r24, 0x81	; 129
 1b4:	73 d0       	rcall	.+230    	; 0x29c <uart_putchar>
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	89 e0       	ldi	r24, 0x09	; 9
 1bc:	6f d0       	rcall	.+222    	; 0x29c <uart_putchar>
 1be:	3f ef       	ldi	r19, 0xFF	; 255
 1c0:	81 ee       	ldi	r24, 0xE1	; 225
 1c2:	94 e0       	ldi	r25, 0x04	; 4
 1c4:	31 50       	subi	r19, 0x01	; 1
 1c6:	80 40       	sbci	r24, 0x00	; 0
 1c8:	90 40       	sbci	r25, 0x00	; 0
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <Roomba_Init+0x8a>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <Roomba_Init+0x94>
 1ce:	00 00       	nop
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	2f d0       	rcall	.+94     	; 0x232 <uart_init>
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	70 e0       	ldi	r23, 0x00	; 0
 1d8:	82 e8       	ldi	r24, 0x82	; 130
 1da:	60 d0       	rcall	.+192    	; 0x29c <uart_putchar>
 1dc:	2f ef       	ldi	r18, 0xFF	; 255
 1de:	39 ef       	ldi	r19, 0xF9	; 249
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	21 50       	subi	r18, 0x01	; 1
 1e4:	30 40       	sbci	r19, 0x00	; 0
 1e6:	80 40       	sbci	r24, 0x00	; 0
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <Roomba_Init+0xa8>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <Roomba_Init+0xb2>
 1ec:	00 00       	nop
 1ee:	08 95       	ret

000001f0 <Roomba_Drive>:

void Roomba_Drive( int16_t velocity, int16_t radius )
{
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	18 2f       	mov	r17, r24
 1fa:	09 2f       	mov	r16, r25
 1fc:	c6 2f       	mov	r28, r22
 1fe:	d7 2f       	mov	r29, r23
	uart_putchar(DRIVE, ROOMBA_UART);
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	89 e8       	ldi	r24, 0x89	; 137
 206:	4a d0       	rcall	.+148    	; 0x29c <uart_putchar>
	uart_putchar(HIGH_BYTE(velocity), ROOMBA_UART);
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	80 2f       	mov	r24, r16
 20e:	46 d0       	rcall	.+140    	; 0x29c <uart_putchar>
	uart_putchar(LOW_BYTE(velocity), ROOMBA_UART);
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	81 2f       	mov	r24, r17
 216:	42 d0       	rcall	.+132    	; 0x29c <uart_putchar>
	uart_putchar(HIGH_BYTE(radius), ROOMBA_UART);
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	8d 2f       	mov	r24, r29
 21e:	3e d0       	rcall	.+124    	; 0x29c <uart_putchar>
	uart_putchar(LOW_BYTE(radius), ROOMBA_UART);
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	8c 2f       	mov	r24, r28
 226:	3a d0       	rcall	.+116    	; 0x29c <uart_putchar>
}
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	08 95       	ret

00000232 <uart_init>:
void uart_reset_receive(int uart)
{
	if (uart) {
		uart_buffer_1_index = 0;
	} else {
		uart_buffer_index = 0;
 232:	32 e0       	ldi	r19, 0x02	; 2
 234:	30 93 c0 00 	sts	0x00C0, r19
 238:	28 e9       	ldi	r18, 0x98	; 152
 23a:	20 93 c1 00 	sts	0x00C1, r18
 23e:	96 e0       	ldi	r25, 0x06	; 6
 240:	90 93 c2 00 	sts	0x00C2, r25
 244:	30 93 c8 00 	sts	0x00C8, r19
 248:	20 93 c9 00 	sts	0x00C9, r18
 24c:	90 93 ca 00 	sts	0x00CA, r25
 250:	10 92 c5 00 	sts	0x00C5, r1
 254:	10 92 cd 00 	sts	0x00CD, r1
 258:	81 30       	cpi	r24, 0x01	; 1
 25a:	51 f0       	breq	.+20     	; 0x270 <uart_init+0x3e>
 25c:	18 f0       	brcs	.+6      	; 0x264 <uart_init+0x32>
 25e:	82 30       	cpi	r24, 0x02	; 2
 260:	69 f0       	breq	.+26     	; 0x27c <uart_init+0x4a>
 262:	12 c0       	rjmp	.+36     	; 0x288 <uart_init+0x56>
 264:	87 e6       	ldi	r24, 0x67	; 103
 266:	80 93 c4 00 	sts	0x00C4, r24
 26a:	80 93 cc 00 	sts	0x00CC, r24
 26e:	11 c0       	rjmp	.+34     	; 0x292 <uart_init+0x60>
 270:	83 e3       	ldi	r24, 0x33	; 51
 272:	80 93 c4 00 	sts	0x00C4, r24
 276:	80 93 cc 00 	sts	0x00CC, r24
 27a:	0b c0       	rjmp	.+22     	; 0x292 <uart_init+0x60>
 27c:	82 e2       	ldi	r24, 0x22	; 34
 27e:	80 93 c4 00 	sts	0x00C4, r24
 282:	80 93 cc 00 	sts	0x00CC, r24
 286:	05 c0       	rjmp	.+10     	; 0x292 <uart_init+0x60>
 288:	87 e6       	ldi	r24, 0x67	; 103
 28a:	80 93 c4 00 	sts	0x00C4, r24
 28e:	80 93 cc 00 	sts	0x00CC, r24
 292:	10 92 01 02 	sts	0x0201, r1
 296:	10 92 00 02 	sts	0x0200, r1
 29a:	08 95       	ret

0000029c <uart_putchar>:
 29c:	67 2b       	or	r22, r23
 29e:	41 f0       	breq	.+16     	; 0x2b0 <uart_putchar+0x14>
 2a0:	e8 ec       	ldi	r30, 0xC8	; 200
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	90 81       	ld	r25, Z
 2a6:	95 ff       	sbrs	r25, 5
 2a8:	fd cf       	rjmp	.-6      	; 0x2a4 <uart_putchar+0x8>
 2aa:	80 93 ce 00 	sts	0x00CE, r24
 2ae:	08 95       	ret
 2b0:	e0 ec       	ldi	r30, 0xC0	; 192
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	90 81       	ld	r25, Z
 2b6:	95 ff       	sbrs	r25, 5
 2b8:	fd cf       	rjmp	.-6      	; 0x2b4 <uart_putchar+0x18>
 2ba:	80 93 c6 00 	sts	0x00C6, r24
 2be:	08 95       	ret

000002c0 <__vector_25>:

/**
 * UART receive byte ISR
 */
ISR(USART0_RX_vect)
{
 2c0:	1f 92       	push	r1
 2c2:	0f 92       	push	r0
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	0f 92       	push	r0
 2c8:	11 24       	eor	r1, r1
 2ca:	0b b6       	in	r0, 0x3b	; 59
 2cc:	0f 92       	push	r0
 2ce:	8f 93       	push	r24
 2d0:	9f 93       	push	r25
 2d2:	ef 93       	push	r30
 2d4:	ff 93       	push	r31
	while(!(UCSR0A & (1<<RXC0)));
 2d6:	e0 ec       	ldi	r30, 0xC0	; 192
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	80 81       	ld	r24, Z
 2dc:	88 23       	and	r24, r24
 2de:	ec f7       	brge	.-6      	; 0x2da <__vector_25+0x1a>
    uart_buffer[uart_buffer_index] = UDR0;
 2e0:	e0 91 01 02 	lds	r30, 0x0201
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 91 c6 00 	lds	r24, 0x00C6
 2ea:	ee 5d       	subi	r30, 0xDE	; 222
 2ec:	fd 4f       	sbci	r31, 0xFD	; 253
 2ee:	80 83       	st	Z, r24
    uart_buffer_index = (uart_buffer_index + 1) % UART_BUFFER_SIZE;
 2f0:	80 91 01 02 	lds	r24, 0x0201
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	01 96       	adiw	r24, 0x01	; 1
 2f8:	8f 71       	andi	r24, 0x1F	; 31
 2fa:	90 78       	andi	r25, 0x80	; 128
 2fc:	99 23       	and	r25, r25
 2fe:	24 f4       	brge	.+8      	; 0x308 <__vector_25+0x48>
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	80 6e       	ori	r24, 0xE0	; 224
 304:	9f 6f       	ori	r25, 0xFF	; 255
 306:	01 96       	adiw	r24, 0x01	; 1
 308:	80 93 01 02 	sts	0x0201, r24
}
 30c:	ff 91       	pop	r31
 30e:	ef 91       	pop	r30
 310:	9f 91       	pop	r25
 312:	8f 91       	pop	r24
 314:	0f 90       	pop	r0
 316:	0b be       	out	0x3b, r0	; 59
 318:	0f 90       	pop	r0
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	0f 90       	pop	r0
 31e:	1f 90       	pop	r1
 320:	18 95       	reti

00000322 <__vector_36>:

/**
 * UART receive byte ISR
 */
ISR(USART1_RX_vect)
{
 322:	1f 92       	push	r1
 324:	0f 92       	push	r0
 326:	0f b6       	in	r0, 0x3f	; 63
 328:	0f 92       	push	r0
 32a:	11 24       	eor	r1, r1
 32c:	0b b6       	in	r0, 0x3b	; 59
 32e:	0f 92       	push	r0
 330:	8f 93       	push	r24
 332:	9f 93       	push	r25
 334:	ef 93       	push	r30
 336:	ff 93       	push	r31
	while(!(UCSR1A & (1<<RXC1)));
 338:	e8 ec       	ldi	r30, 0xC8	; 200
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	88 23       	and	r24, r24
 340:	ec f7       	brge	.-6      	; 0x33c <__vector_36+0x1a>
    uart_buffer_1[uart_buffer_1_index] = UDR1;
 342:	e0 91 00 02 	lds	r30, 0x0200
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	80 91 ce 00 	lds	r24, 0x00CE
 34c:	ee 5f       	subi	r30, 0xFE	; 254
 34e:	fd 4f       	sbci	r31, 0xFD	; 253
 350:	80 83       	st	Z, r24
    uart_buffer_1_index = (uart_buffer_1_index + 1) % UART_BUFFER_SIZE;
 352:	80 91 00 02 	lds	r24, 0x0200
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	01 96       	adiw	r24, 0x01	; 1
 35a:	8f 71       	andi	r24, 0x1F	; 31
 35c:	90 78       	andi	r25, 0x80	; 128
 35e:	99 23       	and	r25, r25
 360:	24 f4       	brge	.+8      	; 0x36a <__vector_36+0x48>
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	80 6e       	ori	r24, 0xE0	; 224
 366:	9f 6f       	ori	r25, 0xFF	; 255
 368:	01 96       	adiw	r24, 0x01	; 1
 36a:	80 93 00 02 	sts	0x0200, r24
}
 36e:	ff 91       	pop	r31
 370:	ef 91       	pop	r30
 372:	9f 91       	pop	r25
 374:	8f 91       	pop	r24
 376:	0f 90       	pop	r0
 378:	0b be       	out	0x3b, r0	; 59
 37a:	0f 90       	pop	r0
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	0f 90       	pop	r0
 380:	1f 90       	pop	r1
 382:	18 95       	reti

00000384 <_exit>:
 384:	f8 94       	cli

00000386 <__stop_program>:
 386:	ff cf       	rjmp	.-2      	; 0x386 <__stop_program>
