
roomba.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  00001f76  0000200a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000130a  00800210  00800210  0000201a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000201a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000204c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f8  00000000  00000000  00002090  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000052c4  00000000  00000000  00002488  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000133d  00000000  00000000  0000774c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002670  00000000  00000000  00008a89  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a4c  00000000  00000000  0000b0fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011ab  00000000  00000000  0000bb48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002afe  00000000  00000000  0000ccf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000410  00000000  00000000  0000f7f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c0       	rjmp	.+252    	; 0xfe <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__vector_1>
       8:	9b c0       	rjmp	.+310    	; 0x140 <__bad_interrupt>
       a:	00 00       	nop
       c:	99 c0       	rjmp	.+306    	; 0x140 <__bad_interrupt>
       e:	00 00       	nop
      10:	97 c0       	rjmp	.+302    	; 0x140 <__bad_interrupt>
      12:	00 00       	nop
      14:	95 c0       	rjmp	.+298    	; 0x140 <__bad_interrupt>
      16:	00 00       	nop
      18:	93 c0       	rjmp	.+294    	; 0x140 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	91 c0       	rjmp	.+290    	; 0x140 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8f c0       	rjmp	.+286    	; 0x140 <__bad_interrupt>
      22:	00 00       	nop
      24:	8d c0       	rjmp	.+282    	; 0x140 <__bad_interrupt>
      26:	00 00       	nop
      28:	8b c0       	rjmp	.+278    	; 0x140 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	89 c0       	rjmp	.+274    	; 0x140 <__bad_interrupt>
      2e:	00 00       	nop
      30:	87 c0       	rjmp	.+270    	; 0x140 <__bad_interrupt>
      32:	00 00       	nop
      34:	85 c0       	rjmp	.+266    	; 0x140 <__bad_interrupt>
      36:	00 00       	nop
      38:	83 c0       	rjmp	.+262    	; 0x140 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	81 c0       	rjmp	.+258    	; 0x140 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7f c0       	rjmp	.+254    	; 0x140 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 97 0a 	jmp	0x152e	; 0x152e <__vector_17>
      48:	7b c0       	rjmp	.+246    	; 0x140 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	79 c0       	rjmp	.+242    	; 0x140 <__bad_interrupt>
      4e:	00 00       	nop
      50:	77 c0       	rjmp	.+238    	; 0x140 <__bad_interrupt>
      52:	00 00       	nop
      54:	75 c0       	rjmp	.+234    	; 0x140 <__bad_interrupt>
      56:	00 00       	nop
      58:	73 c0       	rjmp	.+230    	; 0x140 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	71 c0       	rjmp	.+226    	; 0x140 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6f c0       	rjmp	.+222    	; 0x140 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 3b 0f 	jmp	0x1e76	; 0x1e76 <__vector_25>
      68:	6b c0       	rjmp	.+214    	; 0x140 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	69 c0       	rjmp	.+210    	; 0x140 <__bad_interrupt>
      6e:	00 00       	nop
      70:	67 c0       	rjmp	.+206    	; 0x140 <__bad_interrupt>
      72:	00 00       	nop
      74:	65 c0       	rjmp	.+202    	; 0x140 <__bad_interrupt>
      76:	00 00       	nop
      78:	63 c0       	rjmp	.+198    	; 0x140 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	61 c0       	rjmp	.+194    	; 0x140 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 5c 0b 	jmp	0x16b8	; 0x16b8 <__vector_32>
      84:	5d c0       	rjmp	.+186    	; 0x140 <__bad_interrupt>
      86:	00 00       	nop
      88:	5b c0       	rjmp	.+182    	; 0x140 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	59 c0       	rjmp	.+178    	; 0x140 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 6c 0f 	jmp	0x1ed8	; 0x1ed8 <__vector_36>
      94:	55 c0       	rjmp	.+170    	; 0x140 <__bad_interrupt>
      96:	00 00       	nop
      98:	53 c0       	rjmp	.+166    	; 0x140 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	51 c0       	rjmp	.+162    	; 0x140 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4f c0       	rjmp	.+158    	; 0x140 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4d c0       	rjmp	.+154    	; 0x140 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4b c0       	rjmp	.+150    	; 0x140 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	49 c0       	rjmp	.+146    	; 0x140 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	47 c0       	rjmp	.+142    	; 0x140 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	45 c0       	rjmp	.+138    	; 0x140 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	43 c0       	rjmp	.+134    	; 0x140 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	41 c0       	rjmp	.+130    	; 0x140 <__bad_interrupt>
      be:	00 00       	nop
      c0:	3f c0       	rjmp	.+126    	; 0x140 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3d c0       	rjmp	.+122    	; 0x140 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3b c0       	rjmp	.+118    	; 0x140 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	39 c0       	rjmp	.+114    	; 0x140 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	37 c0       	rjmp	.+110    	; 0x140 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	35 c0       	rjmp	.+106    	; 0x140 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	33 c0       	rjmp	.+102    	; 0x140 <__bad_interrupt>
      da:	00 00       	nop
      dc:	31 c0       	rjmp	.+98     	; 0x140 <__bad_interrupt>
      de:	00 00       	nop
      e0:	2f c0       	rjmp	.+94     	; 0x140 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	5c 06       	cpc	r5, r28
      e6:	42 06       	cpc	r4, r18
      e8:	5c 06       	cpc	r5, r28
      ea:	6b 06       	cpc	r6, r27
      ec:	10 07       	cpc	r17, r16
      ee:	7a 06       	cpc	r7, r26
      f0:	33 06       	cpc	r3, r19
      f2:	63 07       	cpc	r22, r19
      f4:	98 07       	cpc	r25, r24
      f6:	3a 08       	sbc	r3, r10
      f8:	3c 08       	sbc	r3, r12
      fa:	72 08       	sbc	r7, r2
      fc:	e9 08       	sbc	r14, r9

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d1 e2       	ldi	r29, 0x21	; 33
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0c bf       	out	0x3c, r16	; 60

0000010e <__do_copy_data>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a0 e0       	ldi	r26, 0x00	; 0
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	e6 e7       	ldi	r30, 0x76	; 118
     116:	ff e1       	ldi	r31, 0x1F	; 31
     118:	00 e0       	ldi	r16, 0x00	; 0
     11a:	0b bf       	out	0x3b, r16	; 59
     11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x14>
     11e:	07 90       	elpm	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	a0 31       	cpi	r26, 0x10	; 16
     124:	b1 07       	cpc	r27, r17
     126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0x10>

00000128 <__do_clear_bss>:
     128:	25 e1       	ldi	r18, 0x15	; 21
     12a:	a0 e1       	ldi	r26, 0x10	; 16
     12c:	b2 e0       	ldi	r27, 0x02	; 2
     12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
     130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
     132:	aa 31       	cpi	r26, 0x1A	; 26
     134:	b2 07       	cpc	r27, r18
     136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>
     138:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <main>
     13c:	0c 94 b9 0f 	jmp	0x1f72	; 0x1f72 <_exit>

00000140 <__bad_interrupt>:
     140:	5f cf       	rjmp	.-322    	; 0x0 <__vectors>

00000142 <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
     142:	0f 92       	push	r0
     144:	1f 92       	push	r1
     146:	2f 92       	push	r2
     148:	3f 92       	push	r3
     14a:	4f 92       	push	r4
     14c:	5f 92       	push	r5
     14e:	6f 92       	push	r6
     150:	7f 92       	push	r7
     152:	8f 92       	push	r8
     154:	9f 92       	push	r9
     156:	af 92       	push	r10
     158:	bf 92       	push	r11
     15a:	cf 92       	push	r12
     15c:	df 92       	push	r13
     15e:	ef 92       	push	r14
     160:	ff 92       	push	r15
     162:	0f 93       	push	r16
     164:	1f 93       	push	r17
     166:	2f 93       	push	r18
     168:	3f 93       	push	r19
     16a:	4f 93       	push	r20
     16c:	5f 93       	push	r21
     16e:	6f 93       	push	r22
     170:	7f 93       	push	r23
     172:	8f 93       	push	r24
     174:	9f 93       	push	r25
     176:	af 93       	push	r26
     178:	bf 93       	push	r27
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	ef 93       	push	r30
     180:	ff 93       	push	r31
     182:	0f b7       	in	r16, 0x3f	; 63
     184:	0f 93       	push	r16
     186:	fc b7       	in	r31, 0x3c	; 60
     188:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
     18a:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     18c:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
     18e:	e0 93 17 15 	sts	0x1517, r30
        sts  KernelSp+1, r31
     192:	f0 93 18 15 	sts	0x1518, r31
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
     196:	e0 91 f5 14 	lds	r30, 0x14F5
        lds  r31, CurrentSp+1
     19a:	f0 91 f6 14 	lds	r31, 0x14F6
        out  SPL, r30
     19e:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     1a0:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
     1a2:	ff 91       	pop	r31
     1a4:	fc bf       	out	0x3c, r31	; 60
     1a6:	0f 91       	pop	r16
     1a8:	0f bf       	out	0x3f, r16	; 63
     1aa:	ff 91       	pop	r31
     1ac:	ef 91       	pop	r30
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	bf 91       	pop	r27
     1b4:	af 91       	pop	r26
     1b6:	9f 91       	pop	r25
     1b8:	8f 91       	pop	r24
     1ba:	7f 91       	pop	r23
     1bc:	6f 91       	pop	r22
     1be:	5f 91       	pop	r21
     1c0:	4f 91       	pop	r20
     1c2:	3f 91       	pop	r19
     1c4:	2f 91       	pop	r18
     1c6:	1f 91       	pop	r17
     1c8:	0f 91       	pop	r16
     1ca:	ff 90       	pop	r15
     1cc:	ef 90       	pop	r14
     1ce:	df 90       	pop	r13
     1d0:	cf 90       	pop	r12
     1d2:	bf 90       	pop	r11
     1d4:	af 90       	pop	r10
     1d6:	9f 90       	pop	r9
     1d8:	8f 90       	pop	r8
     1da:	7f 90       	pop	r7
     1dc:	6f 90       	pop	r6
     1de:	5f 90       	pop	r5
     1e0:	4f 90       	pop	r4
     1e2:	3f 90       	pop	r3
     1e4:	2f 90       	pop	r2
     1e6:	1f 90       	pop	r1
     1e8:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
     1ea:	18 95       	reti

000001ec <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
     1ec:	0f 92       	push	r0
     1ee:	1f 92       	push	r1
     1f0:	2f 92       	push	r2
     1f2:	3f 92       	push	r3
     1f4:	4f 92       	push	r4
     1f6:	5f 92       	push	r5
     1f8:	6f 92       	push	r6
     1fa:	7f 92       	push	r7
     1fc:	8f 92       	push	r8
     1fe:	9f 92       	push	r9
     200:	af 92       	push	r10
     202:	bf 92       	push	r11
     204:	cf 92       	push	r12
     206:	df 92       	push	r13
     208:	ef 92       	push	r14
     20a:	ff 92       	push	r15
     20c:	0f 93       	push	r16
     20e:	1f 93       	push	r17
     210:	2f 93       	push	r18
     212:	3f 93       	push	r19
     214:	4f 93       	push	r20
     216:	5f 93       	push	r21
     218:	6f 93       	push	r22
     21a:	7f 93       	push	r23
     21c:	8f 93       	push	r24
     21e:	9f 93       	push	r25
     220:	af 93       	push	r26
     222:	bf 93       	push	r27
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	ef 93       	push	r30
     22a:	ff 93       	push	r31
     22c:	0f b7       	in	r16, 0x3f	; 63
     22e:	0f 93       	push	r16
     230:	fc b7       	in	r31, 0x3c	; 60
     232:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
     234:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     236:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
     238:	e0 93 f5 14 	sts	0x14F5, r30
        sts  CurrentSp+1, r31
     23c:	f0 93 f6 14 	sts	0x14F6, r31
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
     240:	e0 91 17 15 	lds	r30, 0x1517
        lds  r31, KernelSp+1
     244:	f0 91 18 15 	lds	r31, 0x1518
        out  SPL, r30
     248:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     24a:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
     24c:	ff 91       	pop	r31
     24e:	fc bf       	out	0x3c, r31	; 60
     250:	0f 91       	pop	r16
     252:	0f bf       	out	0x3f, r16	; 63
     254:	ff 91       	pop	r31
     256:	ef 91       	pop	r30
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	bf 91       	pop	r27
     25e:	af 91       	pop	r26
     260:	9f 91       	pop	r25
     262:	8f 91       	pop	r24
     264:	7f 91       	pop	r23
     266:	6f 91       	pop	r22
     268:	5f 91       	pop	r21
     26a:	4f 91       	pop	r20
     26c:	3f 91       	pop	r19
     26e:	2f 91       	pop	r18
     270:	1f 91       	pop	r17
     272:	0f 91       	pop	r16
     274:	ff 90       	pop	r15
     276:	ef 90       	pop	r14
     278:	df 90       	pop	r13
     27a:	cf 90       	pop	r12
     27c:	bf 90       	pop	r11
     27e:	af 90       	pop	r10
     280:	9f 90       	pop	r9
     282:	8f 90       	pop	r8
     284:	7f 90       	pop	r7
     286:	6f 90       	pop	r6
     288:	5f 90       	pop	r5
     28a:	4f 90       	pop	r4
     28c:	3f 90       	pop	r3
     28e:	2f 90       	pop	r2
     290:	1f 90       	pop	r1
     292:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
     294:	08 95       	ret

00000296 <adc_init>:

// initialize adc
void adc_init()
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
     296:	80 e4       	ldi	r24, 0x40	; 64
     298:	80 93 7c 00 	sts	0x007C, r24
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     29c:	87 e8       	ldi	r24, 0x87	; 135
     29e:	80 93 7a 00 	sts	0x007A, r24
     2a2:	08 95       	ret

000002a4 <radio_rxhandler>:
	return 0;
}

void radio_rxhandler(uint8_t pipenumber)
{
	rxflag = 1;
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	80 93 10 02 	sts	0x0210, r24
	PORTL ^= _BV(PL7);
     2aa:	eb e0       	ldi	r30, 0x0B	; 11
     2ac:	f1 e0       	ldi	r31, 0x01	; 1
     2ae:	80 81       	ld	r24, Z
     2b0:	80 58       	subi	r24, 0x80	; 128
     2b2:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2b4:	83 ed       	ldi	r24, 0xD3	; 211
     2b6:	90 e3       	ldi	r25, 0x30	; 48
     2b8:	01 97       	sbiw	r24, 0x01	; 1
     2ba:	f1 f7       	brne	.-4      	; 0x2b8 <radio_rxhandler+0x14>
     2bc:	00 c0       	rjmp	.+0      	; 0x2be <radio_rxhandler+0x1a>
     2be:	00 00       	nop
	_delay_ms(50);
	PORTL ^= _BV(PL7);
     2c0:	80 81       	ld	r24, Z
     2c2:	80 58       	subi	r24, 0x80	; 128
     2c4:	80 83       	st	Z, r24
     2c6:	08 95       	ret

000002c8 <init_LED_PORTL_pin0>:
void init_LED_PORTL_pin6(void) {
    DDRL |= _BV(DDL6);
}

void init_LED_PORTL_pin7(void) {
    DDRL |= _BV(DDL7);
     2c8:	ea e0       	ldi	r30, 0x0A	; 10
     2ca:	f1 e0       	ldi	r31, 0x01	; 1
     2cc:	80 81       	ld	r24, Z
     2ce:	81 60       	ori	r24, 0x01	; 1
     2d0:	80 83       	st	Z, r24
     2d2:	08 95       	ret

000002d4 <init_LED_PORTL_pin1>:
     2d4:	ea e0       	ldi	r30, 0x0A	; 10
     2d6:	f1 e0       	ldi	r31, 0x01	; 1
     2d8:	80 81       	ld	r24, Z
     2da:	82 60       	ori	r24, 0x02	; 2
     2dc:	80 83       	st	Z, r24
     2de:	08 95       	ret

000002e0 <init_LED_PORTL_pin2>:
     2e0:	ea e0       	ldi	r30, 0x0A	; 10
     2e2:	f1 e0       	ldi	r31, 0x01	; 1
     2e4:	80 81       	ld	r24, Z
     2e6:	84 60       	ori	r24, 0x04	; 4
     2e8:	80 83       	st	Z, r24
     2ea:	08 95       	ret

000002ec <init_LED_PORTL_pin5>:
     2ec:	ea e0       	ldi	r30, 0x0A	; 10
     2ee:	f1 e0       	ldi	r31, 0x01	; 1
     2f0:	80 81       	ld	r24, Z
     2f2:	80 62       	ori	r24, 0x20	; 32
     2f4:	80 83       	st	Z, r24
     2f6:	08 95       	ret

000002f8 <init_LED_PORTL_pin6>:
     2f8:	ea e0       	ldi	r30, 0x0A	; 10
     2fa:	f1 e0       	ldi	r31, 0x01	; 1
     2fc:	80 81       	ld	r24, Z
     2fe:	80 64       	ori	r24, 0x40	; 64
     300:	80 83       	st	Z, r24
     302:	08 95       	ret

00000304 <enable_LED>:
}

void enable_LED(unsigned int mask) {
    PORTL |= _BV(mask);
     304:	eb e0       	ldi	r30, 0x0B	; 11
     306:	f1 e0       	ldi	r31, 0x01	; 1
     308:	90 81       	ld	r25, Z
     30a:	21 e0       	ldi	r18, 0x01	; 1
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	02 c0       	rjmp	.+4      	; 0x314 <enable_LED+0x10>
     310:	22 0f       	add	r18, r18
     312:	33 1f       	adc	r19, r19
     314:	8a 95       	dec	r24
     316:	e2 f7       	brpl	.-8      	; 0x310 <enable_LED+0xc>
     318:	29 2b       	or	r18, r25
     31a:	20 83       	st	Z, r18
     31c:	08 95       	ret

0000031e <disable_LED>:
}

void disable_LED(unsigned int mask) {
    PORTL &= ~_BV(mask);
     31e:	eb e0       	ldi	r30, 0x0B	; 11
     320:	f1 e0       	ldi	r31, 0x01	; 1
     322:	90 81       	ld	r25, Z
     324:	21 e0       	ldi	r18, 0x01	; 1
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	02 c0       	rjmp	.+4      	; 0x32e <disable_LED+0x10>
     32a:	22 0f       	add	r18, r18
     32c:	33 1f       	adc	r19, r19
     32e:	8a 95       	dec	r24
     330:	e2 f7       	brpl	.-8      	; 0x32a <disable_LED+0xc>
     332:	20 95       	com	r18
     334:	29 23       	and	r18, r25
     336:	20 83       	st	Z, r18
     338:	08 95       	ret

0000033a <move>:
	Task_Terminate();
}

void move(char jsX[], char jsY[]){
	//X high - left
	if (jsX[0] || jsX[1] > 7){
     33a:	fc 01       	movw	r30, r24
     33c:	20 81       	ld	r18, Z
     33e:	21 11       	cpse	r18, r1
     340:	03 c0       	rjmp	.+6      	; 0x348 <move+0xe>
     342:	81 81       	ldd	r24, Z+1	; 0x01
     344:	88 30       	cpi	r24, 0x08	; 8
     346:	90 f0       	brcs	.+36     	; 0x36c <move+0x32>
		radius = radius > -1800 ? radius - 200 : -2000;
     348:	80 91 00 02 	lds	r24, 0x0200
     34c:	90 91 01 02 	lds	r25, 0x0201
     350:	89 3f       	cpi	r24, 0xF9	; 249
     352:	f8 ef       	ldi	r31, 0xF8	; 248
     354:	9f 07       	cpc	r25, r31
     356:	1c f0       	brlt	.+6      	; 0x35e <move+0x24>
     358:	88 5c       	subi	r24, 0xC8	; 200
     35a:	91 09       	sbc	r25, r1
     35c:	02 c0       	rjmp	.+4      	; 0x362 <move+0x28>
     35e:	80 e3       	ldi	r24, 0x30	; 48
     360:	98 ef       	ldi	r25, 0xF8	; 248
     362:	90 93 01 02 	sts	0x0201, r25
     366:	80 93 00 02 	sts	0x0200, r24
     36a:	13 c0       	rjmp	.+38     	; 0x392 <move+0x58>
	} else if (jsX[1] < 3) {
     36c:	83 30       	cpi	r24, 0x03	; 3
     36e:	88 f4       	brcc	.+34     	; 0x392 <move+0x58>
	//X low - right
		radius = radius < 1800 ? radius + 200 : 2000;
     370:	80 91 00 02 	lds	r24, 0x0200
     374:	90 91 01 02 	lds	r25, 0x0201
     378:	88 30       	cpi	r24, 0x08	; 8
     37a:	27 e0       	ldi	r18, 0x07	; 7
     37c:	92 07       	cpc	r25, r18
     37e:	1c f4       	brge	.+6      	; 0x386 <move+0x4c>
     380:	88 53       	subi	r24, 0x38	; 56
     382:	9f 4f       	sbci	r25, 0xFF	; 255
     384:	02 c0       	rjmp	.+4      	; 0x38a <move+0x50>
     386:	80 ed       	ldi	r24, 0xD0	; 208
     388:	97 e0       	ldi	r25, 0x07	; 7
     38a:	90 93 01 02 	sts	0x0201, r25
     38e:	80 93 00 02 	sts	0x0200, r24
	}
	//Y high - down
	if (jsY[0] || jsY[1] > 7) {
     392:	fb 01       	movw	r30, r22
     394:	80 81       	ld	r24, Z
     396:	81 11       	cpse	r24, r1
     398:	03 c0       	rjmp	.+6      	; 0x3a0 <move+0x66>
     39a:	81 81       	ldd	r24, Z+1	; 0x01
     39c:	88 30       	cpi	r24, 0x08	; 8
     39e:	88 f0       	brcs	.+34     	; 0x3c2 <move+0x88>
		velocity = velocity > 0 ? 0 : -100;
     3a0:	80 91 11 02 	lds	r24, 0x0211
     3a4:	90 91 12 02 	lds	r25, 0x0212
     3a8:	18 16       	cp	r1, r24
     3aa:	19 06       	cpc	r1, r25
     3ac:	1c f0       	brlt	.+6      	; 0x3b4 <move+0x7a>
     3ae:	8c e9       	ldi	r24, 0x9C	; 156
     3b0:	9f ef       	ldi	r25, 0xFF	; 255
     3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <move+0x7e>
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	90 93 12 02 	sts	0x0212, r25
     3bc:	80 93 11 02 	sts	0x0211, r24
     3c0:	11 c0       	rjmp	.+34     	; 0x3e4 <move+0xaa>
	} else if (jsY[1] < 3) {
     3c2:	83 30       	cpi	r24, 0x03	; 3
     3c4:	78 f4       	brcc	.+30     	; 0x3e4 <move+0xaa>
	//Y low - up
		velocity = velocity < 0 ? 0 : 100;
     3c6:	80 91 11 02 	lds	r24, 0x0211
     3ca:	90 91 12 02 	lds	r25, 0x0212
     3ce:	99 23       	and	r25, r25
     3d0:	1c f0       	brlt	.+6      	; 0x3d8 <move+0x9e>
     3d2:	84 e6       	ldi	r24, 0x64	; 100
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	02 c0       	rjmp	.+4      	; 0x3dc <move+0xa2>
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	90 93 12 02 	sts	0x0212, r25
     3e0:	80 93 11 02 	sts	0x0211, r24
	}
	
	Roomba_Drive(velocity, radius);
     3e4:	60 91 00 02 	lds	r22, 0x0200
     3e8:	70 91 01 02 	lds	r23, 0x0201
     3ec:	80 91 11 02 	lds	r24, 0x0211
     3f0:	90 91 12 02 	lds	r25, 0x0212
     3f4:	0c 94 bc 0e 	jmp	0x1d78	; 0x1d78 <Roomba_Drive>
     3f8:	08 95       	ret

000003fa <a_main>:
}

// Application level main function
// Creates the required tasks and then terminates
void a_main() {
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
     402:	28 97       	sbiw	r28, 0x08	; 8
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	f8 94       	cli
     408:	de bf       	out	0x3e, r29	; 62
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	cd bf       	out	0x3d, r28	; 61
	Roomba_Init();
     40e:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <Roomba_Init>
	char line[16];
	uint16_t adc_test;
	portL2_Mutex = Mutex_Init();
     412:	e0 d7       	rcall	.+4032   	; 0x13d4 <Mutex_Init>
     414:	90 93 aa 14 	sts	0x14AA, r25
     418:	80 93 a9 14 	sts	0x14A9, r24
	portL6_Mutex = Mutex_Init();
     41c:	db d7       	rcall	.+4022   	; 0x13d4 <Mutex_Init>
     41e:	90 93 b0 14 	sts	0x14B0, r25
     422:	80 93 af 14 	sts	0x14AF, r24
	e1 = Event_Init();
     426:	f1 d7       	rcall	.+4066   	; 0x140a <Event_Init>
     428:	90 93 b4 14 	sts	0x14B4, r25
     42c:	80 93 b3 14 	sts	0x14B3, r24
	e2 = Event_Init();
     430:	ec d7       	rcall	.+4056   	; 0x140a <Event_Init>
     432:	90 93 ae 14 	sts	0x14AE, r25
     436:	80 93 ad 14 	sts	0x14AD, r24
	adc_init();
     43a:	2d df       	rcall	.-422    	; 0x296 <adc_init>
	char jsX[4];
	char jsY[4];
	char end = 'z';
	
	uint8_t song = 50;
	Roomba_PlaySong(song);
     43c:	82 e3       	ldi	r24, 0x32	; 50
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <Roomba_PlaySong>
	portL6_Mutex = Mutex_Init();
	e1 = Event_Init();
	e2 = Event_Init();
	adc_init();
	
	char start = 'z';
     444:	1a e7       	ldi	r17, 0x7A	; 122
	for (;;){
		Roomba_Drive(-500, 0x8000);
		while (uart_bytes_received(BT_UART) < 30){
			Roomba_Drive(100,0x8000);
			_delay_ms(1000);
			Roomba_Drive(0, 0x8000);
     446:	e1 2c       	mov	r14, r1
     448:	f1 2c       	mov	r15, r1
		while (start != 115) {
			start = uart_get_byte(i, BT_UART);
			i++;
			if (i == 23){
				uart_reset_receive(BT_UART);
				i = 0;
     44a:	be 2c       	mov	r11, r14
     44c:	cf 2c       	mov	r12, r15
     44e:	01 c0       	rjmp	.+2      	; 0x452 <a_main+0x58>
     450:	13 e7       	ldi	r17, 0x73	; 115
	
	uint8_t song = 50;
	Roomba_PlaySong(song);
	
	for (;;){
		Roomba_Drive(-500, 0x8000);
     452:	60 e0       	ldi	r22, 0x00	; 0
     454:	70 e8       	ldi	r23, 0x80	; 128
     456:	8c e0       	ldi	r24, 0x0C	; 12
     458:	9e ef       	ldi	r25, 0xFE	; 254
     45a:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <Roomba_Drive>
		while (uart_bytes_received(BT_UART) < 30){
     45e:	3c c0       	rjmp	.+120    	; 0x4d8 <a_main+0xde>
			Roomba_Drive(100,0x8000);
     460:	60 e0       	ldi	r22, 0x00	; 0
     462:	70 e8       	ldi	r23, 0x80	; 128
     464:	84 e6       	ldi	r24, 0x64	; 100
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <Roomba_Drive>
     46c:	2f ef       	ldi	r18, 0xFF	; 255
     46e:	83 ed       	ldi	r24, 0xD3	; 211
     470:	90 e3       	ldi	r25, 0x30	; 48
     472:	21 50       	subi	r18, 0x01	; 1
     474:	80 40       	sbci	r24, 0x00	; 0
     476:	90 40       	sbci	r25, 0x00	; 0
     478:	e1 f7       	brne	.-8      	; 0x472 <a_main+0x78>
     47a:	00 c0       	rjmp	.+0      	; 0x47c <a_main+0x82>
     47c:	00 00       	nop
			_delay_ms(1000);
			Roomba_Drive(0, 0x8000);
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	70 e8       	ldi	r23, 0x80	; 128
     482:	8e 2d       	mov	r24, r14
     484:	9f 2d       	mov	r25, r15
     486:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <Roomba_Drive>
     48a:	2f ef       	ldi	r18, 0xFF	; 255
     48c:	83 ed       	ldi	r24, 0xD3	; 211
     48e:	90 e3       	ldi	r25, 0x30	; 48
     490:	21 50       	subi	r18, 0x01	; 1
     492:	80 40       	sbci	r24, 0x00	; 0
     494:	90 40       	sbci	r25, 0x00	; 0
     496:	e1 f7       	brne	.-8      	; 0x490 <a_main+0x96>
     498:	00 c0       	rjmp	.+0      	; 0x49a <a_main+0xa0>
     49a:	00 00       	nop
			_delay_ms(1000);
			Roomba_Drive(-100, 0x8000);
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	70 e8       	ldi	r23, 0x80	; 128
     4a0:	8c e9       	ldi	r24, 0x9C	; 156
     4a2:	9f ef       	ldi	r25, 0xFF	; 255
     4a4:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <Roomba_Drive>
     4a8:	2f ef       	ldi	r18, 0xFF	; 255
     4aa:	83 ed       	ldi	r24, 0xD3	; 211
     4ac:	90 e3       	ldi	r25, 0x30	; 48
     4ae:	21 50       	subi	r18, 0x01	; 1
     4b0:	80 40       	sbci	r24, 0x00	; 0
     4b2:	90 40       	sbci	r25, 0x00	; 0
     4b4:	e1 f7       	brne	.-8      	; 0x4ae <a_main+0xb4>
     4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <a_main+0xbe>
     4b8:	00 00       	nop
			_delay_ms(1000);
			Roomba_Drive(0, 0x8000);
     4ba:	60 e0       	ldi	r22, 0x00	; 0
     4bc:	70 e8       	ldi	r23, 0x80	; 128
     4be:	8e 2d       	mov	r24, r14
     4c0:	9f 2d       	mov	r25, r15
     4c2:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <Roomba_Drive>
     4c6:	2f ef       	ldi	r18, 0xFF	; 255
     4c8:	83 ed       	ldi	r24, 0xD3	; 211
     4ca:	90 e3       	ldi	r25, 0x30	; 48
     4cc:	21 50       	subi	r18, 0x01	; 1
     4ce:	80 40       	sbci	r24, 0x00	; 0
     4d0:	90 40       	sbci	r25, 0x00	; 0
     4d2:	e1 f7       	brne	.-8      	; 0x4cc <a_main+0xd2>
     4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <a_main+0xdc>
     4d6:	00 00       	nop
	uint8_t song = 50;
	Roomba_PlaySong(song);
	
	for (;;){
		Roomba_Drive(-500, 0x8000);
		while (uart_bytes_received(BT_UART) < 30){
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <uart_bytes_received>
     4e0:	8e 31       	cpi	r24, 0x1E	; 30
     4e2:	08 f4       	brcc	.+2      	; 0x4e6 <a_main+0xec>
     4e4:	bd cf       	rjmp	.-134    	; 0x460 <a_main+0x66>
			Roomba_Drive(0, 0x8000);
			_delay_ms(1000);
		}
		
		int i = 0;
		while (start != 115) {
     4e6:	13 37       	cpi	r17, 0x73	; 115
     4e8:	09 f0       	breq	.+2      	; 0x4ec <a_main+0xf2>
     4ea:	95 c0       	rjmp	.+298    	; 0x616 <a_main+0x21c>
     4ec:	0e 2d       	mov	r16, r14
     4ee:	1f 2d       	mov	r17, r15
     4f0:	14 c0       	rjmp	.+40     	; 0x51a <a_main+0x120>
			start = uart_get_byte(i, BT_UART);
     4f2:	61 e0       	ldi	r22, 0x01	; 1
     4f4:	70 e0       	ldi	r23, 0x00	; 0
     4f6:	c8 01       	movw	r24, r16
     4f8:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <uart_get_byte>
     4fc:	d8 2e       	mov	r13, r24
			i++;
     4fe:	0f 5f       	subi	r16, 0xFF	; 255
     500:	1f 4f       	sbci	r17, 0xFF	; 255
			if (i == 23){
     502:	07 31       	cpi	r16, 0x17	; 23
     504:	11 05       	cpc	r17, r1
     506:	31 f4       	brne	.+12     	; 0x514 <a_main+0x11a>
				uart_reset_receive(BT_UART);
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <uart_reset_receive>
				i = 0;
     510:	0b 2d       	mov	r16, r11
     512:	1c 2d       	mov	r17, r12
			Roomba_Drive(0, 0x8000);
			_delay_ms(1000);
		}
		
		int i = 0;
		while (start != 115) {
     514:	23 e7       	ldi	r18, 0x73	; 115
     516:	d2 12       	cpse	r13, r18
     518:	ec cf       	rjmp	.-40     	; 0x4f2 <a_main+0xf8>
			if (i == 23){
				uart_reset_receive(BT_UART);
				i = 0;
			}
		}
		jsX[0] = uart_get_byte(i++, BT_UART);
     51a:	61 e0       	ldi	r22, 0x01	; 1
     51c:	70 e0       	ldi	r23, 0x00	; 0
     51e:	c8 01       	movw	r24, r16
     520:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <uart_get_byte>
     524:	89 83       	std	Y+1, r24	; 0x01
		jsX[1] = uart_get_byte(i++, BT_UART);
     526:	61 e0       	ldi	r22, 0x01	; 1
     528:	70 e0       	ldi	r23, 0x00	; 0
     52a:	c8 01       	movw	r24, r16
     52c:	01 96       	adiw	r24, 0x01	; 1
     52e:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <uart_get_byte>
     532:	8a 83       	std	Y+2, r24	; 0x02
		jsX[2] = uart_get_byte(i++, BT_UART);
     534:	61 e0       	ldi	r22, 0x01	; 1
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	c8 01       	movw	r24, r16
     53a:	02 96       	adiw	r24, 0x02	; 2
     53c:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <uart_get_byte>
     540:	8b 83       	std	Y+3, r24	; 0x03
		jsX[3] = uart_get_byte(i++, BT_UART);
     542:	61 e0       	ldi	r22, 0x01	; 1
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	c8 01       	movw	r24, r16
     548:	03 96       	adiw	r24, 0x03	; 3
     54a:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <uart_get_byte>
     54e:	8c 83       	std	Y+4, r24	; 0x04
		jsY[0] = uart_get_byte(i++, BT_UART);
     550:	61 e0       	ldi	r22, 0x01	; 1
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	c8 01       	movw	r24, r16
     556:	04 96       	adiw	r24, 0x04	; 4
     558:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <uart_get_byte>
     55c:	8d 83       	std	Y+5, r24	; 0x05
		jsY[1] = uart_get_byte(i++, BT_UART);
     55e:	61 e0       	ldi	r22, 0x01	; 1
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	c8 01       	movw	r24, r16
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <uart_get_byte>
     56a:	8e 83       	std	Y+6, r24	; 0x06
		jsY[2] = uart_get_byte(i++, BT_UART);
     56c:	61 e0       	ldi	r22, 0x01	; 1
     56e:	70 e0       	ldi	r23, 0x00	; 0
     570:	c8 01       	movw	r24, r16
     572:	06 96       	adiw	r24, 0x06	; 6
     574:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <uart_get_byte>
     578:	8f 83       	std	Y+7, r24	; 0x07
		jsY[3] = uart_get_byte(i++, BT_UART);
     57a:	61 e0       	ldi	r22, 0x01	; 1
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	c8 01       	movw	r24, r16
     580:	07 96       	adiw	r24, 0x07	; 7
     582:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <uart_get_byte>
     586:	88 87       	std	Y+8, r24	; 0x08
		end = uart_get_byte(i++, BT_UART);
     588:	61 e0       	ldi	r22, 0x01	; 1
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	c8 01       	movw	r24, r16
     58e:	08 96       	adiw	r24, 0x08	; 8
     590:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <uart_get_byte>
     594:	18 2f       	mov	r17, r24
		uart_putchar(start, BT_UART);
     596:	61 e0       	ldi	r22, 0x01	; 1
     598:	70 e0       	ldi	r23, 0x00	; 0
     59a:	83 e7       	ldi	r24, 0x73	; 115
     59c:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <uart_putchar>
		uart_putchar(end, BT_UART);
     5a0:	61 e0       	ldi	r22, 0x01	; 1
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	81 2f       	mov	r24, r17
     5a6:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <uart_putchar>
		if (start != 115 || end != 101) {
     5aa:	15 36       	cpi	r17, 0x65	; 101
     5ac:	d1 f0       	breq	.+52     	; 0x5e2 <a_main+0x1e8>
			uart_putchar(start, BT_UART);
     5ae:	61 e0       	ldi	r22, 0x01	; 1
     5b0:	70 e0       	ldi	r23, 0x00	; 0
     5b2:	83 e7       	ldi	r24, 0x73	; 115
     5b4:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <uart_putchar>
			uart_putchar(end, BT_UART);
     5b8:	61 e0       	ldi	r22, 0x01	; 1
     5ba:	70 e0       	ldi	r23, 0x00	; 0
     5bc:	81 2f       	mov	r24, r17
     5be:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <uart_putchar>
			Roomba_Drive(500, 0x8000);
     5c2:	60 e0       	ldi	r22, 0x00	; 0
     5c4:	70 e8       	ldi	r23, 0x80	; 128
     5c6:	84 ef       	ldi	r24, 0xF4	; 244
     5c8:	91 e0       	ldi	r25, 0x01	; 1
     5ca:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <Roomba_Drive>
     5ce:	8f ef       	ldi	r24, 0xFF	; 255
     5d0:	93 ed       	ldi	r25, 0xD3	; 211
     5d2:	20 e3       	ldi	r18, 0x30	; 48
     5d4:	81 50       	subi	r24, 0x01	; 1
     5d6:	90 40       	sbci	r25, 0x00	; 0
     5d8:	20 40       	sbci	r18, 0x00	; 0
     5da:	e1 f7       	brne	.-8      	; 0x5d4 <a_main+0x1da>
     5dc:	00 c0       	rjmp	.+0      	; 0x5de <a_main+0x1e4>
     5de:	00 00       	nop
			_delay_ms(1000);
			continue;
     5e0:	37 cf       	rjmp	.-402    	; 0x450 <a_main+0x56>
		}
		move(jsX, jsY);
     5e2:	be 01       	movw	r22, r28
     5e4:	6b 5f       	subi	r22, 0xFB	; 251
     5e6:	7f 4f       	sbci	r23, 0xFF	; 255
     5e8:	ce 01       	movw	r24, r28
     5ea:	01 96       	adiw	r24, 0x01	; 1
     5ec:	a6 de       	rcall	.-692    	; 0x33a <move>
		uart_reset_receive(BT_UART);
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <uart_reset_receive>
		Roomba_Drive(200, 2000);
     5f6:	60 ed       	ldi	r22, 0xD0	; 208
     5f8:	77 e0       	ldi	r23, 0x07	; 7
     5fa:	88 ec       	ldi	r24, 0xC8	; 200
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <Roomba_Drive>
     602:	8f ef       	ldi	r24, 0xFF	; 255
     604:	93 ed       	ldi	r25, 0xD3	; 211
     606:	20 e3       	ldi	r18, 0x30	; 48
     608:	81 50       	subi	r24, 0x01	; 1
     60a:	90 40       	sbci	r25, 0x00	; 0
     60c:	20 40       	sbci	r18, 0x00	; 0
     60e:	e1 f7       	brne	.-8      	; 0x608 <a_main+0x20e>
     610:	00 c0       	rjmp	.+0      	; 0x612 <a_main+0x218>
     612:	00 00       	nop
     614:	1d cf       	rjmp	.-454    	; 0x450 <a_main+0x56>
			_delay_ms(1000);
		}
		
		int i = 0;
		while (start != 115) {
			start = uart_get_byte(i, BT_UART);
     616:	61 e0       	ldi	r22, 0x01	; 1
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	8e 2d       	mov	r24, r14
     61c:	9f 2d       	mov	r25, r15
     61e:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <uart_get_byte>
     622:	d8 2e       	mov	r13, r24
			i++;
     624:	01 e0       	ldi	r16, 0x01	; 1
     626:	10 e0       	ldi	r17, 0x00	; 0
     628:	75 cf       	rjmp	.-278    	; 0x514 <a_main+0x11a>

0000062a <Task_Terminate>:
/**
  * Application level task getarg to return intiial arg value
  */
int Task_GetArg(PID p) {
	return (Cp->arg);
}
     62a:	80 91 23 02 	lds	r24, 0x0223
     62e:	90 91 24 02 	lds	r25, 0x0224
     632:	89 2b       	or	r24, r25
     634:	51 f0       	breq	.+20     	; 0x64a <Task_Terminate+0x20>
     636:	f8 94       	cli
     638:	e0 91 25 02 	lds	r30, 0x0225
     63c:	f0 91 26 02 	lds	r31, 0x0226
     640:	e3 5f       	subi	r30, 0xF3	; 243
     642:	fe 4f       	sbci	r31, 0xFE	; 254
     644:	84 e0       	ldi	r24, 0x04	; 4
     646:	80 83       	st	Z, r24
     648:	d1 cd       	rjmp	.-1118   	; 0x1ec <Enter_Kernel>
     64a:	08 95       	ret

0000064c <Kernel_Create_Task_At>:
     64c:	ef 92       	push	r14
     64e:	ff 92       	push	r15
     650:	0f 93       	push	r16
     652:	1f 93       	push	r17
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	1f 92       	push	r1
     65a:	1f 92       	push	r1
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
     660:	9a 83       	std	Y+2, r25	; 0x02
     662:	89 83       	std	Y+1, r24	; 0x01
     664:	dc 01       	movw	r26, r24
     666:	7c 01       	movw	r14, r24
     668:	04 e0       	ldi	r16, 0x04	; 4
     66a:	e0 0e       	add	r14, r16
     66c:	f1 1c       	adc	r15, r1
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	91 e0       	ldi	r25, 0x01	; 1
     672:	f7 01       	movw	r30, r14
     674:	8c 01       	movw	r16, r24
     676:	11 92       	st	Z+, r1
     678:	01 50       	subi	r16, 0x01	; 1
     67a:	10 40       	sbci	r17, 0x00	; 0
     67c:	e1 f7       	brne	.-8      	; 0x676 <Kernel_Create_Task_At+0x2a>
     67e:	fd 01       	movw	r30, r26
     680:	ed 5f       	subi	r30, 0xFD	; 253
     682:	fe 4f       	sbci	r31, 0xFE	; 254
     684:	85 e1       	ldi	r24, 0x15	; 21
     686:	93 e0       	ldi	r25, 0x03	; 3
     688:	80 83       	st	Z, r24
     68a:	31 97       	sbiw	r30, 0x01	; 1
     68c:	90 83       	st	Z, r25
     68e:	31 97       	sbiw	r30, 0x01	; 1
     690:	60 83       	st	Z, r22
     692:	31 97       	sbiw	r30, 0x01	; 1
     694:	70 83       	st	Z, r23
     696:	31 97       	sbiw	r30, 0x01	; 1
     698:	10 82       	st	Z, r1
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	92 93       	st	-Z, r25
     69e:	9f 5f       	subi	r25, 0xFF	; 255
     6a0:	92 32       	cpi	r25, 0x22	; 34
     6a2:	e1 f7       	brne	.-8      	; 0x69c <Kernel_Create_Task_At+0x50>
     6a4:	a4 52       	subi	r26, 0x24	; 36
     6a6:	bf 4f       	sbci	r27, 0xFF	; 255
     6a8:	e9 81       	ldd	r30, Y+1	; 0x01
     6aa:	fa 81       	ldd	r31, Y+2	; 0x02
     6ac:	b3 83       	std	Z+3, r27	; 0x03
     6ae:	a2 83       	std	Z+2, r26	; 0x02
     6b0:	df 01       	movw	r26, r30
     6b2:	a5 5f       	subi	r26, 0xF5	; 245
     6b4:	be 4f       	sbci	r27, 0xFE	; 254
     6b6:	11 96       	adiw	r26, 0x01	; 1
     6b8:	7c 93       	st	X, r23
     6ba:	6e 93       	st	-X, r22
     6bc:	12 96       	adiw	r26, 0x02	; 2
     6be:	1c 92       	st	X, r1
     6c0:	80 91 1f 02 	lds	r24, 0x021F
     6c4:	90 91 20 02 	lds	r25, 0x0220
     6c8:	91 83       	std	Z+1, r25	; 0x01
     6ca:	80 83       	st	Z, r24
     6cc:	89 81       	ldd	r24, Y+1	; 0x01
     6ce:	9a 81       	ldd	r25, Y+2	; 0x02
     6d0:	fc 01       	movw	r30, r24
     6d2:	eb 5f       	subi	r30, 0xFB	; 251
     6d4:	fe 4f       	sbci	r31, 0xFE	; 254
     6d6:	51 83       	std	Z+1, r21	; 0x01
     6d8:	40 83       	st	Z, r20
     6da:	32 96       	adiw	r30, 0x02	; 2
     6dc:	51 83       	std	Z+1, r21	; 0x01
     6de:	40 83       	st	Z, r20
     6e0:	32 96       	adiw	r30, 0x02	; 2
     6e2:	31 83       	std	Z+1, r19	; 0x01
     6e4:	20 83       	st	Z, r18
     6e6:	71 96       	adiw	r30, 0x11	; 17
     6e8:	11 82       	std	Z+1, r1	; 0x01
     6ea:	10 82       	st	Z, r1
     6ec:	34 97       	sbiw	r30, 0x04	; 4
     6ee:	23 e6       	ldi	r18, 0x63	; 99
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	31 83       	std	Z+1, r19	; 0x01
     6f4:	20 83       	st	Z, r18
     6f6:	20 91 21 02 	lds	r18, 0x0221
     6fa:	30 91 22 02 	lds	r19, 0x0222
     6fe:	2f 5f       	subi	r18, 0xFF	; 255
     700:	3f 4f       	sbci	r19, 0xFF	; 255
     702:	30 93 22 02 	sts	0x0222, r19
     706:	20 93 21 02 	sts	0x0221, r18
     70a:	20 91 1f 02 	lds	r18, 0x021F
     70e:	30 91 20 02 	lds	r19, 0x0220
     712:	2f 5f       	subi	r18, 0xFF	; 255
     714:	3f 4f       	sbci	r19, 0xFF	; 255
     716:	30 93 20 02 	sts	0x0220, r19
     71a:	20 93 1f 02 	sts	0x021F, r18
     71e:	72 97       	sbiw	r30, 0x12	; 18
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	80 83       	st	Z, r24
     724:	47 e1       	ldi	r20, 0x17	; 23
     726:	52 e0       	ldi	r21, 0x02	; 2
     728:	65 ed       	ldi	r22, 0xD5	; 213
     72a:	74 e1       	ldi	r23, 0x14	; 20
     72c:	ce 01       	movw	r24, r28
     72e:	01 96       	adiw	r24, 0x01	; 1
     730:	0e 94 1f 0c 	call	0x183e	; 0x183e <enqueueRQ>
     734:	e9 81       	ldd	r30, Y+1	; 0x01
     736:	fa 81       	ldd	r31, Y+2	; 0x02
     738:	80 81       	ld	r24, Z
     73a:	91 81       	ldd	r25, Z+1	; 0x01
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	1f 91       	pop	r17
     746:	0f 91       	pop	r16
     748:	ff 90       	pop	r15
     74a:	ef 90       	pop	r14
     74c:	08 95       	ret

0000074e <Kernel_Create_Task>:
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	ec 01       	movw	r28, r24
     754:	80 91 21 02 	lds	r24, 0x0221
     758:	90 91 22 02 	lds	r25, 0x0222
     75c:	40 97       	sbiw	r24, 0x10	; 16
     75e:	21 f1       	breq	.+72     	; 0x7a8 <Kernel_Create_Task+0x5a>
     760:	80 91 8b 03 	lds	r24, 0x038B
     764:	88 23       	and	r24, r24
     766:	71 f0       	breq	.+28     	; 0x784 <Kernel_Create_Task+0x36>
     768:	a9 ea       	ldi	r26, 0xA9	; 169
     76a:	b4 e0       	ldi	r27, 0x04	; 4
     76c:	e1 e0       	ldi	r30, 0x01	; 1
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	9c 91       	ld	r25, X
     772:	99 23       	and	r25, r25
     774:	49 f0       	breq	.+18     	; 0x788 <Kernel_Create_Task+0x3a>
     776:	31 96       	adiw	r30, 0x01	; 1
     778:	a2 5e       	subi	r26, 0xE2	; 226
     77a:	be 4f       	sbci	r27, 0xFE	; 254
     77c:	e0 31       	cpi	r30, 0x10	; 16
     77e:	f1 05       	cpc	r31, r1
     780:	b9 f7       	brne	.-18     	; 0x770 <Kernel_Create_Task+0x22>
     782:	02 c0       	rjmp	.+4      	; 0x788 <Kernel_Create_Task+0x3a>
     784:	e0 e0       	ldi	r30, 0x00	; 0
     786:	f0 e0       	ldi	r31, 0x00	; 0
     788:	9a 01       	movw	r18, r20
     78a:	ab 01       	movw	r20, r22
     78c:	be 01       	movw	r22, r28
     78e:	ae e1       	ldi	r26, 0x1E	; 30
     790:	b1 e0       	ldi	r27, 0x01	; 1
     792:	ea 9f       	mul	r30, r26
     794:	c0 01       	movw	r24, r0
     796:	eb 9f       	mul	r30, r27
     798:	90 0d       	add	r25, r0
     79a:	fa 9f       	mul	r31, r26
     79c:	90 0d       	add	r25, r0
     79e:	11 24       	eor	r1, r1
     7a0:	89 57       	subi	r24, 0x79	; 121
     7a2:	9d 4f       	sbci	r25, 0xFD	; 253
     7a4:	53 df       	rcall	.-346    	; 0x64c <Kernel_Create_Task_At>
     7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <Kernel_Create_Task+0x5a>
     7a8:	df 91       	pop	r29
     7aa:	cf 91       	pop	r28
     7ac:	08 95       	ret

000007ae <Kernel_Init_Mutex_At>:
     7ae:	fc 01       	movw	r30, r24
     7b0:	80 91 1d 02 	lds	r24, 0x021D
     7b4:	90 91 1e 02 	lds	r25, 0x021E
     7b8:	91 83       	std	Z+1, r25	; 0x01
     7ba:	80 83       	st	Z, r24
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	82 83       	std	Z+2, r24	; 0x02
     7c0:	80 91 1d 02 	lds	r24, 0x021D
     7c4:	90 91 1e 02 	lds	r25, 0x021E
     7c8:	01 96       	adiw	r24, 0x01	; 1
     7ca:	90 93 1e 02 	sts	0x021E, r25
     7ce:	80 93 1d 02 	sts	0x021D, r24
     7d2:	80 81       	ld	r24, Z
     7d4:	91 81       	ldd	r25, Z+1	; 0x01
     7d6:	08 95       	ret

000007d8 <Kernel_Init_Event_At>:
     7d8:	fc 01       	movw	r30, r24
     7da:	80 91 1b 02 	lds	r24, 0x021B
     7de:	90 91 1c 02 	lds	r25, 0x021C
     7e2:	91 83       	std	Z+1, r25	; 0x01
     7e4:	80 83       	st	Z, r24
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	82 83       	std	Z+2, r24	; 0x02
     7ea:	14 82       	std	Z+4, r1	; 0x04
     7ec:	13 82       	std	Z+3, r1	; 0x03
     7ee:	80 91 1b 02 	lds	r24, 0x021B
     7f2:	90 91 1c 02 	lds	r25, 0x021C
     7f6:	01 96       	adiw	r24, 0x01	; 1
     7f8:	90 93 1c 02 	sts	0x021C, r25
     7fc:	80 93 1b 02 	sts	0x021B, r24
     800:	80 81       	ld	r24, Z
     802:	91 81       	ldd	r25, Z+1	; 0x01
     804:	08 95       	ret

00000806 <OS_Init>:
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	10 92 22 02 	sts	0x0222, r1
     80e:	10 92 21 02 	sts	0x0221, r1
     812:	10 92 24 02 	sts	0x0224, r1
     816:	10 92 23 02 	sts	0x0223, r1
     81a:	10 92 1e 02 	sts	0x021E, r1
     81e:	10 92 1d 02 	sts	0x021D, r1
     822:	10 92 1c 02 	sts	0x021C, r1
     826:	10 92 1b 02 	sts	0x021B, r1
     82a:	10 92 20 02 	sts	0x0220, r1
     82e:	10 92 1f 02 	sts	0x021F, r1
     832:	e7 e8       	ldi	r30, 0x87	; 135
     834:	f2 e0       	ldi	r31, 0x02	; 2
     836:	ab e8       	ldi	r26, 0x8B	; 139
     838:	b3 e0       	ldi	r27, 0x03	; 3
     83a:	47 e6       	ldi	r20, 0x67	; 103
     83c:	54 e1       	ldi	r21, 0x14	; 20
     83e:	2e e1       	ldi	r18, 0x1E	; 30
     840:	31 e0       	ldi	r19, 0x01	; 1
     842:	83 e6       	ldi	r24, 0x63	; 99
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	ef 01       	movw	r28, r30
     848:	b9 01       	movw	r22, r18
     84a:	19 92       	st	Y+, r1
     84c:	61 50       	subi	r22, 0x01	; 1
     84e:	70 40       	sbci	r23, 0x00	; 0
     850:	e1 f7       	brne	.-8      	; 0x84a <OS_Init+0x44>
     852:	1c 92       	st	X, r1
     854:	53 96       	adiw	r26, 0x13	; 19
     856:	9c 93       	st	X, r25
     858:	8e 93       	st	-X, r24
     85a:	52 97       	sbiw	r26, 0x12	; 18
     85c:	11 82       	std	Z+1, r1	; 0x01
     85e:	10 82       	st	Z, r1
     860:	e2 5e       	subi	r30, 0xE2	; 226
     862:	fe 4f       	sbci	r31, 0xFE	; 254
     864:	a2 5e       	subi	r26, 0xE2	; 226
     866:	be 4f       	sbci	r27, 0xFE	; 254
     868:	e4 17       	cp	r30, r20
     86a:	f5 07       	cpc	r31, r21
     86c:	61 f7       	brne	.-40     	; 0x846 <OS_Init+0x40>
     86e:	e1 e5       	ldi	r30, 0x51	; 81
     870:	f2 e0       	ldi	r31, 0x02	; 2
     872:	29 e8       	ldi	r18, 0x89	; 137
     874:	32 e0       	ldi	r19, 0x02	; 2
     876:	87 e0       	ldi	r24, 0x07	; 7
     878:	df 01       	movw	r26, r30
     87a:	12 97       	sbiw	r26, 0x02	; 2
     87c:	ed 01       	movw	r28, r26
     87e:	68 2f       	mov	r22, r24
     880:	19 92       	st	Y+, r1
     882:	6a 95       	dec	r22
     884:	e9 f7       	brne	.-6      	; 0x880 <OS_Init+0x7a>
     886:	10 82       	st	Z, r1
     888:	37 96       	adiw	r30, 0x07	; 7
     88a:	e2 17       	cp	r30, r18
     88c:	f3 07       	cpc	r31, r19
     88e:	a1 f7       	brne	.-24     	; 0x878 <OS_Init+0x72>
     890:	e9 e2       	ldi	r30, 0x29	; 41
     892:	f2 e0       	ldi	r31, 0x02	; 2
     894:	21 e5       	ldi	r18, 0x51	; 81
     896:	32 e0       	ldi	r19, 0x02	; 2
     898:	85 e0       	ldi	r24, 0x05	; 5
     89a:	df 01       	movw	r26, r30
     89c:	12 97       	sbiw	r26, 0x02	; 2
     89e:	ed 01       	movw	r28, r26
     8a0:	68 2f       	mov	r22, r24
     8a2:	19 92       	st	Y+, r1
     8a4:	6a 95       	dec	r22
     8a6:	e9 f7       	brne	.-6      	; 0x8a2 <OS_Init+0x9c>
     8a8:	10 82       	st	Z, r1
     8aa:	35 96       	adiw	r30, 0x05	; 5
     8ac:	e2 17       	cp	r30, r18
     8ae:	f3 07       	cpc	r31, r19
     8b0:	a1 f7       	brne	.-24     	; 0x89a <OS_Init+0x94>
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	08 95       	ret

000008b8 <OS_Abort>:
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <_exit>

000008c0 <Dispatch>:
     8c0:	67 e1       	ldi	r22, 0x17	; 23
     8c2:	72 e0       	ldi	r23, 0x02	; 2
     8c4:	85 ed       	ldi	r24, 0xD5	; 213
     8c6:	94 e1       	ldi	r25, 0x14	; 20
     8c8:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <dequeueRQ>
     8cc:	fc 01       	movw	r30, r24
     8ce:	90 93 26 02 	sts	0x0226, r25
     8d2:	80 93 25 02 	sts	0x0225, r24
     8d6:	89 2b       	or	r24, r25
     8d8:	09 f4       	brne	.+2      	; 0x8dc <Dispatch+0x1c>
     8da:	ee df       	rcall	.-36     	; 0x8b8 <OS_Abort>
     8dc:	82 81       	ldd	r24, Z+2	; 0x02
     8de:	93 81       	ldd	r25, Z+3	; 0x03
     8e0:	90 93 f6 14 	sts	0x14F6, r25
     8e4:	80 93 f5 14 	sts	0x14F5, r24
     8e8:	82 e0       	ldi	r24, 0x02	; 2
     8ea:	df 01       	movw	r26, r30
     8ec:	ac 5f       	subi	r26, 0xFC	; 252
     8ee:	be 4f       	sbci	r27, 0xFE	; 254
     8f0:	8c 93       	st	X, r24
     8f2:	80 81       	ld	r24, Z
     8f4:	91 81       	ldd	r25, Z+1	; 0x01
     8f6:	02 97       	sbiw	r24, 0x02	; 2
     8f8:	20 f4       	brcc	.+8      	; 0x902 <Dispatch+0x42>
     8fa:	82 e0       	ldi	r24, 0x02	; 2
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	02 cd       	rjmp	.-1532   	; 0x304 <enable_LED>
     900:	08 95       	ret
     902:	80 81       	ld	r24, Z
     904:	91 81       	ldd	r25, Z+1	; 0x01
     906:	02 97       	sbiw	r24, 0x02	; 2
     908:	21 f4       	brne	.+8      	; 0x912 <Dispatch+0x52>
     90a:	85 e0       	ldi	r24, 0x05	; 5
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	fa cc       	rjmp	.-1548   	; 0x304 <enable_LED>
     910:	08 95       	ret
     912:	80 81       	ld	r24, Z
     914:	91 81       	ldd	r25, Z+1	; 0x01
     916:	03 97       	sbiw	r24, 0x03	; 3
     918:	19 f4       	brne	.+6      	; 0x920 <Dispatch+0x60>
     91a:	86 e0       	ldi	r24, 0x06	; 6
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	f2 cc       	rjmp	.-1564   	; 0x304 <enable_LED>
     920:	08 95       	ret

00000922 <Kernel_Unlock_Mutex>:
     922:	0f 93       	push	r16
     924:	1f 93       	push	r17
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	1f 92       	push	r1
     92c:	1f 92       	push	r1
     92e:	cd b7       	in	r28, 0x3d	; 61
     930:	de b7       	in	r29, 0x3e	; 62
     932:	a0 91 25 02 	lds	r26, 0x0225
     936:	b0 91 26 02 	lds	r27, 0x0226
     93a:	fd 01       	movw	r30, r26
     93c:	ec 5e       	subi	r30, 0xEC	; 236
     93e:	fe 4f       	sbci	r31, 0xFE	; 254
     940:	40 81       	ld	r20, Z
     942:	51 81       	ldd	r21, Z+1	; 0x01
     944:	ef e4       	ldi	r30, 0x4F	; 79
     946:	f2 e0       	ldi	r31, 0x02	; 2
     948:	00 e0       	ldi	r16, 0x00	; 0
     94a:	10 e0       	ldi	r17, 0x00	; 0
     94c:	80 81       	ld	r24, Z
     94e:	91 81       	ldd	r25, Z+1	; 0x01
     950:	84 17       	cp	r24, r20
     952:	95 07       	cpc	r25, r21
     954:	39 f0       	breq	.+14     	; 0x964 <Kernel_Unlock_Mutex+0x42>
     956:	0f 5f       	subi	r16, 0xFF	; 255
     958:	1f 4f       	sbci	r17, 0xFF	; 255
     95a:	37 96       	adiw	r30, 0x07	; 7
     95c:	08 30       	cpi	r16, 0x08	; 8
     95e:	11 05       	cpc	r17, r1
     960:	a9 f7       	brne	.-22     	; 0x94c <Kernel_Unlock_Mutex+0x2a>
     962:	f7 c0       	rjmp	.+494    	; 0xb52 <Kernel_Unlock_Mutex+0x230>
     964:	8d 91       	ld	r24, X+
     966:	9c 91       	ld	r25, X
     968:	11 97       	sbiw	r26, 0x01	; 1
     96a:	27 e0       	ldi	r18, 0x07	; 7
     96c:	20 9f       	mul	r18, r16
     96e:	f0 01       	movw	r30, r0
     970:	21 9f       	mul	r18, r17
     972:	f0 0d       	add	r31, r0
     974:	11 24       	eor	r1, r1
     976:	e1 5b       	subi	r30, 0xB1	; 177
     978:	fd 4f       	sbci	r31, 0xFD	; 253
     97a:	23 81       	ldd	r18, Z+3	; 0x03
     97c:	34 81       	ldd	r19, Z+4	; 0x04
     97e:	28 17       	cp	r18, r24
     980:	39 07       	cpc	r19, r25
     982:	09 f0       	breq	.+2      	; 0x986 <Kernel_Unlock_Mutex+0x64>
     984:	e6 c0       	rjmp	.+460    	; 0xb52 <Kernel_Unlock_Mutex+0x230>
     986:	ac 5f       	subi	r26, 0xFC	; 252
     988:	be 4f       	sbci	r27, 0xFE	; 254
     98a:	8c 91       	ld	r24, X
     98c:	86 30       	cpi	r24, 0x06	; 6
     98e:	09 f0       	breq	.+2      	; 0x992 <Kernel_Unlock_Mutex+0x70>
     990:	4d c0       	rjmp	.+154    	; 0xa2c <Kernel_Unlock_Mutex+0x10a>
     992:	63 e1       	ldi	r22, 0x13	; 19
     994:	72 e0       	ldi	r23, 0x02	; 2
     996:	87 ef       	ldi	r24, 0xF7	; 247
     998:	94 e1       	ldi	r25, 0x14	; 20
     99a:	b4 d7       	rcall	.+3944   	; 0x1904 <dequeueWQ>
     99c:	9a 83       	std	Y+2, r25	; 0x02
     99e:	89 83       	std	Y+1, r24	; 0x01
     9a0:	00 97       	sbiw	r24, 0x00	; 0
     9a2:	79 f4       	brne	.+30     	; 0x9c2 <Kernel_Unlock_Mutex+0xa0>
     9a4:	87 e0       	ldi	r24, 0x07	; 7
     9a6:	80 9f       	mul	r24, r16
     9a8:	f0 01       	movw	r30, r0
     9aa:	81 9f       	mul	r24, r17
     9ac:	f0 0d       	add	r31, r0
     9ae:	11 24       	eor	r1, r1
     9b0:	e1 5b       	subi	r30, 0xB1	; 177
     9b2:	fd 4f       	sbci	r31, 0xFD	; 253
     9b4:	16 82       	std	Z+6, r1	; 0x06
     9b6:	15 82       	std	Z+5, r1	; 0x05
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	82 83       	std	Z+2, r24	; 0x02
     9bc:	14 82       	std	Z+4, r1	; 0x04
     9be:	13 82       	std	Z+3, r1	; 0x03
     9c0:	c8 c0       	rjmp	.+400    	; 0xb52 <Kernel_Unlock_Mutex+0x230>
     9c2:	27 e0       	ldi	r18, 0x07	; 7
     9c4:	20 9f       	mul	r18, r16
     9c6:	f0 01       	movw	r30, r0
     9c8:	21 9f       	mul	r18, r17
     9ca:	f0 0d       	add	r31, r0
     9cc:	11 24       	eor	r1, r1
     9ce:	e1 5b       	subi	r30, 0xB1	; 177
     9d0:	fd 4f       	sbci	r31, 0xFD	; 253
     9d2:	21 e0       	ldi	r18, 0x01	; 1
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	36 83       	std	Z+6, r19	; 0x06
     9d8:	25 83       	std	Z+5, r18	; 0x05
     9da:	dc 01       	movw	r26, r24
     9dc:	2d 91       	ld	r18, X+
     9de:	3c 91       	ld	r19, X
     9e0:	34 83       	std	Z+4, r19	; 0x04
     9e2:	23 83       	std	Z+3, r18	; 0x03
     9e4:	20 91 25 02 	lds	r18, 0x0225
     9e8:	30 91 26 02 	lds	r19, 0x0226
     9ec:	d9 01       	movw	r26, r18
     9ee:	a9 5f       	subi	r26, 0xF9	; 249
     9f0:	be 4f       	sbci	r27, 0xFE	; 254
     9f2:	4d 91       	ld	r20, X+
     9f4:	5c 91       	ld	r21, X
     9f6:	11 97       	sbiw	r26, 0x01	; 1
     9f8:	fc 01       	movw	r30, r24
     9fa:	e9 5f       	subi	r30, 0xF9	; 249
     9fc:	fe 4f       	sbci	r31, 0xFE	; 254
     9fe:	51 83       	std	Z+1, r21	; 0x01
     a00:	40 83       	st	Z, r20
     a02:	33 97       	sbiw	r30, 0x03	; 3
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	80 83       	st	Z, r24
     a08:	f9 01       	movw	r30, r18
     a0a:	eb 5f       	subi	r30, 0xFB	; 251
     a0c:	fe 4f       	sbci	r31, 0xFE	; 254
     a0e:	40 81       	ld	r20, Z
     a10:	51 81       	ldd	r21, Z+1	; 0x01
     a12:	11 96       	adiw	r26, 0x01	; 1
     a14:	5c 93       	st	X, r21
     a16:	4e 93       	st	-X, r20
     a18:	31 97       	sbiw	r30, 0x01	; 1
     a1a:	80 83       	st	Z, r24
     a1c:	47 e1       	ldi	r20, 0x17	; 23
     a1e:	52 e0       	ldi	r21, 0x02	; 2
     a20:	65 ed       	ldi	r22, 0xD5	; 213
     a22:	74 e1       	ldi	r23, 0x14	; 20
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0a d7       	rcall	.+3604   	; 0x183e <enqueueRQ>
     a2a:	93 c0       	rjmp	.+294    	; 0xb52 <Kernel_Unlock_Mutex+0x230>
     a2c:	87 e0       	ldi	r24, 0x07	; 7
     a2e:	80 9f       	mul	r24, r16
     a30:	f0 01       	movw	r30, r0
     a32:	81 9f       	mul	r24, r17
     a34:	f0 0d       	add	r31, r0
     a36:	11 24       	eor	r1, r1
     a38:	e1 5b       	subi	r30, 0xB1	; 177
     a3a:	fd 4f       	sbci	r31, 0xFD	; 253
     a3c:	85 81       	ldd	r24, Z+5	; 0x05
     a3e:	96 81       	ldd	r25, Z+6	; 0x06
     a40:	82 30       	cpi	r24, 0x02	; 2
     a42:	91 05       	cpc	r25, r1
     a44:	60 f0       	brcs	.+24     	; 0xa5e <Kernel_Unlock_Mutex+0x13c>
     a46:	27 e0       	ldi	r18, 0x07	; 7
     a48:	20 9f       	mul	r18, r16
     a4a:	f0 01       	movw	r30, r0
     a4c:	21 9f       	mul	r18, r17
     a4e:	f0 0d       	add	r31, r0
     a50:	11 24       	eor	r1, r1
     a52:	e1 5b       	subi	r30, 0xB1	; 177
     a54:	fd 4f       	sbci	r31, 0xFD	; 253
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	96 83       	std	Z+6, r25	; 0x06
     a5a:	85 83       	std	Z+5, r24	; 0x05
     a5c:	7a c0       	rjmp	.+244    	; 0xb52 <Kernel_Unlock_Mutex+0x230>
     a5e:	63 e1       	ldi	r22, 0x13	; 19
     a60:	72 e0       	ldi	r23, 0x02	; 2
     a62:	87 ef       	ldi	r24, 0xF7	; 247
     a64:	94 e1       	ldi	r25, 0x14	; 20
     a66:	4e d7       	rcall	.+3740   	; 0x1904 <dequeueWQ>
     a68:	9a 83       	std	Y+2, r25	; 0x02
     a6a:	89 83       	std	Y+1, r24	; 0x01
     a6c:	00 97       	sbiw	r24, 0x00	; 0
     a6e:	a9 f5       	brne	.+106    	; 0xada <Kernel_Unlock_Mutex+0x1b8>
     a70:	87 e0       	ldi	r24, 0x07	; 7
     a72:	80 9f       	mul	r24, r16
     a74:	f0 01       	movw	r30, r0
     a76:	81 9f       	mul	r24, r17
     a78:	f0 0d       	add	r31, r0
     a7a:	11 24       	eor	r1, r1
     a7c:	e1 5b       	subi	r30, 0xB1	; 177
     a7e:	fd 4f       	sbci	r31, 0xFD	; 253
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	82 83       	std	Z+2, r24	; 0x02
     a84:	16 82       	std	Z+6, r1	; 0x06
     a86:	15 82       	std	Z+5, r1	; 0x05
     a88:	14 82       	std	Z+4, r1	; 0x04
     a8a:	13 82       	std	Z+3, r1	; 0x03
     a8c:	e0 91 25 02 	lds	r30, 0x0225
     a90:	f0 91 26 02 	lds	r31, 0x0226
     a94:	df 01       	movw	r26, r30
     a96:	ab 5f       	subi	r26, 0xFB	; 251
     a98:	be 4f       	sbci	r27, 0xFE	; 254
     a9a:	8d 91       	ld	r24, X+
     a9c:	9c 91       	ld	r25, X
     a9e:	11 97       	sbiw	r26, 0x01	; 1
     aa0:	12 96       	adiw	r26, 0x02	; 2
     aa2:	11 96       	adiw	r26, 0x01	; 1
     aa4:	9c 93       	st	X, r25
     aa6:	8e 93       	st	-X, r24
     aa8:	80 81       	ld	r24, Z
     aaa:	91 81       	ldd	r25, Z+1	; 0x01
     aac:	02 97       	sbiw	r24, 0x02	; 2
     aae:	20 f4       	brcc	.+8      	; 0xab8 <Kernel_Unlock_Mutex+0x196>
     ab0:	82 e0       	ldi	r24, 0x02	; 2
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	27 dc       	rcall	.-1970   	; 0x304 <enable_LED>
     ab6:	4d c0       	rjmp	.+154    	; 0xb52 <Kernel_Unlock_Mutex+0x230>
     ab8:	80 81       	ld	r24, Z
     aba:	91 81       	ldd	r25, Z+1	; 0x01
     abc:	02 97       	sbiw	r24, 0x02	; 2
     abe:	21 f4       	brne	.+8      	; 0xac8 <Kernel_Unlock_Mutex+0x1a6>
     ac0:	85 e0       	ldi	r24, 0x05	; 5
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	1f dc       	rcall	.-1986   	; 0x304 <enable_LED>
     ac6:	45 c0       	rjmp	.+138    	; 0xb52 <Kernel_Unlock_Mutex+0x230>
     ac8:	80 81       	ld	r24, Z
     aca:	91 81       	ldd	r25, Z+1	; 0x01
     acc:	03 97       	sbiw	r24, 0x03	; 3
     ace:	09 f0       	breq	.+2      	; 0xad2 <Kernel_Unlock_Mutex+0x1b0>
     ad0:	40 c0       	rjmp	.+128    	; 0xb52 <Kernel_Unlock_Mutex+0x230>
     ad2:	86 e0       	ldi	r24, 0x06	; 6
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	16 dc       	rcall	.-2004   	; 0x304 <enable_LED>
     ad8:	3c c0       	rjmp	.+120    	; 0xb52 <Kernel_Unlock_Mutex+0x230>
     ada:	27 e0       	ldi	r18, 0x07	; 7
     adc:	20 9f       	mul	r18, r16
     ade:	f0 01       	movw	r30, r0
     ae0:	21 9f       	mul	r18, r17
     ae2:	f0 0d       	add	r31, r0
     ae4:	11 24       	eor	r1, r1
     ae6:	e1 5b       	subi	r30, 0xB1	; 177
     ae8:	fd 4f       	sbci	r31, 0xFD	; 253
     aea:	21 e0       	ldi	r18, 0x01	; 1
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	36 83       	std	Z+6, r19	; 0x06
     af0:	25 83       	std	Z+5, r18	; 0x05
     af2:	dc 01       	movw	r26, r24
     af4:	2d 91       	ld	r18, X+
     af6:	3c 91       	ld	r19, X
     af8:	34 83       	std	Z+4, r19	; 0x04
     afa:	23 83       	std	Z+3, r18	; 0x03
     afc:	20 91 25 02 	lds	r18, 0x0225
     b00:	30 91 26 02 	lds	r19, 0x0226
     b04:	d9 01       	movw	r26, r18
     b06:	a9 5f       	subi	r26, 0xF9	; 249
     b08:	be 4f       	sbci	r27, 0xFE	; 254
     b0a:	4d 91       	ld	r20, X+
     b0c:	5c 91       	ld	r21, X
     b0e:	11 97       	sbiw	r26, 0x01	; 1
     b10:	fc 01       	movw	r30, r24
     b12:	e9 5f       	subi	r30, 0xF9	; 249
     b14:	fe 4f       	sbci	r31, 0xFE	; 254
     b16:	51 83       	std	Z+1, r21	; 0x01
     b18:	40 83       	st	Z, r20
     b1a:	33 97       	sbiw	r30, 0x03	; 3
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	80 83       	st	Z, r24
     b20:	f9 01       	movw	r30, r18
     b22:	eb 5f       	subi	r30, 0xFB	; 251
     b24:	fe 4f       	sbci	r31, 0xFE	; 254
     b26:	40 81       	ld	r20, Z
     b28:	51 81       	ldd	r21, Z+1	; 0x01
     b2a:	11 96       	adiw	r26, 0x01	; 1
     b2c:	5c 93       	st	X, r21
     b2e:	4e 93       	st	-X, r20
     b30:	31 97       	sbiw	r30, 0x01	; 1
     b32:	80 83       	st	Z, r24
     b34:	47 e1       	ldi	r20, 0x17	; 23
     b36:	52 e0       	ldi	r21, 0x02	; 2
     b38:	65 ed       	ldi	r22, 0xD5	; 213
     b3a:	74 e1       	ldi	r23, 0x14	; 20
     b3c:	ce 01       	movw	r24, r28
     b3e:	01 96       	adiw	r24, 0x01	; 1
     b40:	7e d6       	rcall	.+3324   	; 0x183e <enqueueRQ>
     b42:	47 e1       	ldi	r20, 0x17	; 23
     b44:	52 e0       	ldi	r21, 0x02	; 2
     b46:	65 ed       	ldi	r22, 0xD5	; 213
     b48:	74 e1       	ldi	r23, 0x14	; 20
     b4a:	85 e2       	ldi	r24, 0x25	; 37
     b4c:	92 e0       	ldi	r25, 0x02	; 2
     b4e:	77 d6       	rcall	.+3310   	; 0x183e <enqueueRQ>
     b50:	b7 de       	rcall	.-658    	; 0x8c0 <Dispatch>
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	1f 91       	pop	r17
     b5c:	0f 91       	pop	r16
     b5e:	08 95       	ret

00000b60 <OS_Start>:
     b60:	2f 92       	push	r2
     b62:	3f 92       	push	r3
     b64:	4f 92       	push	r4
     b66:	5f 92       	push	r5
     b68:	6f 92       	push	r6
     b6a:	7f 92       	push	r7
     b6c:	8f 92       	push	r8
     b6e:	9f 92       	push	r9
     b70:	af 92       	push	r10
     b72:	bf 92       	push	r11
     b74:	cf 92       	push	r12
     b76:	df 92       	push	r13
     b78:	ef 92       	push	r14
     b7a:	ff 92       	push	r15
     b7c:	0f 93       	push	r16
     b7e:	1f 93       	push	r17
     b80:	cf 93       	push	r28
     b82:	df 93       	push	r29
     b84:	00 d0       	rcall	.+0      	; 0xb86 <OS_Start+0x26>
     b86:	1f 92       	push	r1
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
     b8c:	80 91 23 02 	lds	r24, 0x0223
     b90:	90 91 24 02 	lds	r25, 0x0224
     b94:	89 2b       	or	r24, r25
     b96:	09 f0       	breq	.+2      	; 0xb9a <OS_Start+0x3a>
     b98:	06 c4       	rjmp	.+2060   	; 0x13a6 <OS_Start+0x846>
     b9a:	80 91 21 02 	lds	r24, 0x0221
     b9e:	90 91 22 02 	lds	r25, 0x0222
     ba2:	89 2b       	or	r24, r25
     ba4:	09 f4       	brne	.+2      	; 0xba8 <OS_Start+0x48>
     ba6:	ff c3       	rjmp	.+2046   	; 0x13a6 <OS_Start+0x846>
     ba8:	f8 94       	cli
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	90 93 24 02 	sts	0x0224, r25
     bb2:	80 93 23 02 	sts	0x0223, r24
     bb6:	84 de       	rcall	.-760    	; 0x8c0 <Dispatch>
     bb8:	0f 2e       	mov	r0, r31
     bba:	f7 e2       	ldi	r31, 0x27	; 39
     bbc:	ef 2e       	mov	r14, r31
     bbe:	f2 e0       	ldi	r31, 0x02	; 2
     bc0:	ff 2e       	mov	r15, r31
     bc2:	f0 2d       	mov	r31, r0
     bc4:	0f 2e       	mov	r0, r31
     bc6:	fe e1       	ldi	r31, 0x1E	; 30
     bc8:	af 2e       	mov	r10, r31
     bca:	bb 24       	eor	r11, r11
     bcc:	b3 94       	inc	r11
     bce:	f0 2d       	mov	r31, r0
     bd0:	0f 2e       	mov	r0, r31
     bd2:	f3 e6       	ldi	r31, 0x63	; 99
     bd4:	2f 2e       	mov	r2, r31
     bd6:	31 2c       	mov	r3, r1
     bd8:	f0 2d       	mov	r31, r0
     bda:	88 24       	eor	r8, r8
     bdc:	83 94       	inc	r8
     bde:	91 2c       	mov	r9, r1
     be0:	0f 2e       	mov	r0, r31
     be2:	ff e4       	ldi	r31, 0x4F	; 79
     be4:	cf 2e       	mov	r12, r31
     be6:	f2 e0       	ldi	r31, 0x02	; 2
     be8:	df 2e       	mov	r13, r31
     bea:	f0 2d       	mov	r31, r0
     bec:	07 e8       	ldi	r16, 0x87	; 135
     bee:	12 e0       	ldi	r17, 0x02	; 2
     bf0:	0f 2e       	mov	r0, r31
     bf2:	fa e0       	ldi	r31, 0x0A	; 10
     bf4:	6f 2e       	mov	r6, r31
     bf6:	71 2c       	mov	r7, r1
     bf8:	f0 2d       	mov	r31, r0
     bfa:	e0 91 25 02 	lds	r30, 0x0225
     bfe:	f0 91 26 02 	lds	r31, 0x0226
     c02:	df 01       	movw	r26, r30
     c04:	a3 5f       	subi	r26, 0xF3	; 243
     c06:	be 4f       	sbci	r27, 0xFE	; 254
     c08:	1c 92       	st	X, r1
     c0a:	82 81       	ldd	r24, Z+2	; 0x02
     c0c:	93 81       	ldd	r25, Z+3	; 0x03
     c0e:	90 93 f6 14 	sts	0x14F6, r25
     c12:	80 93 f5 14 	sts	0x14F5, r24
     c16:	95 da       	rcall	.-2774   	; 0x142 <CSwitch>
     c18:	82 e0       	ldi	r24, 0x02	; 2
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	80 db       	rcall	.-2304   	; 0x31e <disable_LED>
     c1e:	85 e0       	ldi	r24, 0x05	; 5
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	7d db       	rcall	.-2310   	; 0x31e <disable_LED>
     c24:	86 e0       	ldi	r24, 0x06	; 6
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	7a db       	rcall	.-2316   	; 0x31e <disable_LED>
     c2a:	80 91 25 02 	lds	r24, 0x0225
     c2e:	90 91 26 02 	lds	r25, 0x0226
     c32:	9c 83       	std	Y+4, r25	; 0x04
     c34:	8b 83       	std	Y+3, r24	; 0x03
     c36:	80 91 f5 14 	lds	r24, 0x14F5
     c3a:	90 91 f6 14 	lds	r25, 0x14F6
     c3e:	ab 81       	ldd	r26, Y+3	; 0x03
     c40:	bc 81       	ldd	r27, Y+4	; 0x04
     c42:	13 96       	adiw	r26, 0x03	; 3
     c44:	9c 93       	st	X, r25
     c46:	8e 93       	st	-X, r24
     c48:	12 97       	sbiw	r26, 0x02	; 2
     c4a:	fd 01       	movw	r30, r26
     c4c:	e3 5f       	subi	r30, 0xF3	; 243
     c4e:	fe 4f       	sbci	r31, 0xFE	; 254
     c50:	e0 81       	ld	r30, Z
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	ed 30       	cpi	r30, 0x0D	; 13
     c56:	f1 05       	cpc	r31, r1
     c58:	80 f6       	brcc	.-96     	; 0xbfa <OS_Start+0x9a>
     c5a:	88 27       	eor	r24, r24
     c5c:	ee 58       	subi	r30, 0x8E	; 142
     c5e:	ff 4f       	sbci	r31, 0xFF	; 255
     c60:	8f 4f       	sbci	r24, 0xFF	; 255
     c62:	0c 94 b1 0f 	jmp	0x1f62	; 0x1f62 <__tablejump2__>
     c66:	eb 81       	ldd	r30, Y+3	; 0x03
     c68:	fc 81       	ldd	r31, Y+4	; 0x04
     c6a:	e4 5e       	subi	r30, 0xE4	; 228
     c6c:	fe 4f       	sbci	r31, 0xFE	; 254
     c6e:	80 81       	ld	r24, Z
     c70:	91 81       	ldd	r25, Z+1	; 0x01
     c72:	e7 e8       	ldi	r30, 0x87	; 135
     c74:	f2 e0       	ldi	r31, 0x02	; 2
     c76:	20 81       	ld	r18, Z
     c78:	31 81       	ldd	r19, Z+1	; 0x01
     c7a:	28 17       	cp	r18, r24
     c7c:	39 07       	cpc	r19, r25
     c7e:	09 f0       	breq	.+2      	; 0xc82 <OS_Start+0x122>
     c80:	89 c0       	rjmp	.+274    	; 0xd94 <OS_Start+0x234>
     c82:	0d c3       	rjmp	.+1562   	; 0x129e <OS_Start+0x73e>
     c84:	eb 81       	ldd	r30, Y+3	; 0x03
     c86:	fc 81       	ldd	r31, Y+4	; 0x04
     c88:	e7 5f       	subi	r30, 0xF7	; 247
     c8a:	fe 4f       	sbci	r31, 0xFE	; 254
     c8c:	40 81       	ld	r20, Z
     c8e:	51 81       	ldd	r21, Z+1	; 0x01
     c90:	eb 81       	ldd	r30, Y+3	; 0x03
     c92:	fc 81       	ldd	r31, Y+4	; 0x04
     c94:	eb 5f       	subi	r30, 0xFB	; 251
     c96:	fe 4f       	sbci	r31, 0xFE	; 254
     c98:	60 81       	ld	r22, Z
     c9a:	71 81       	ldd	r23, Z+1	; 0x01
     c9c:	eb 81       	ldd	r30, Y+3	; 0x03
     c9e:	fc 81       	ldd	r31, Y+4	; 0x04
     ca0:	e5 5f       	subi	r30, 0xF5	; 245
     ca2:	fe 4f       	sbci	r31, 0xFE	; 254
     ca4:	80 81       	ld	r24, Z
     ca6:	91 81       	ldd	r25, Z+1	; 0x01
     ca8:	52 dd       	rcall	.-1372   	; 0x74e <Kernel_Create_Task>
     caa:	eb 81       	ldd	r30, Y+3	; 0x03
     cac:	fc 81       	ldd	r31, Y+4	; 0x04
     cae:	e2 5f       	subi	r30, 0xF2	; 242
     cb0:	fe 4f       	sbci	r31, 0xFE	; 254
     cb2:	91 83       	std	Z+1, r25	; 0x01
     cb4:	80 83       	st	Z, r24
     cb6:	a1 cf       	rjmp	.-190    	; 0xbfa <OS_Start+0x9a>
     cb8:	eb 81       	ldd	r30, Y+3	; 0x03
     cba:	fc 81       	ldd	r31, Y+4	; 0x04
     cbc:	ec 5f       	subi	r30, 0xFC	; 252
     cbe:	fe 4f       	sbci	r31, 0xFE	; 254
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	80 83       	st	Z, r24
     cc4:	47 e1       	ldi	r20, 0x17	; 23
     cc6:	52 e0       	ldi	r21, 0x02	; 2
     cc8:	65 ed       	ldi	r22, 0xD5	; 213
     cca:	74 e1       	ldi	r23, 0x14	; 20
     ccc:	85 e2       	ldi	r24, 0x25	; 37
     cce:	92 e0       	ldi	r25, 0x02	; 2
     cd0:	b6 d5       	rcall	.+2924   	; 0x183e <enqueueRQ>
     cd2:	f6 dd       	rcall	.-1044   	; 0x8c0 <Dispatch>
     cd4:	92 cf       	rjmp	.-220    	; 0xbfa <OS_Start+0x9a>
     cd6:	eb 81       	ldd	r30, Y+3	; 0x03
     cd8:	fc 81       	ldd	r31, Y+4	; 0x04
     cda:	ec 5f       	subi	r30, 0xFC	; 252
     cdc:	fe 4f       	sbci	r31, 0xFE	; 254
     cde:	83 e0       	ldi	r24, 0x03	; 3
     ce0:	80 83       	st	Z, r24
     ce2:	45 e1       	ldi	r20, 0x15	; 21
     ce4:	52 e0       	ldi	r21, 0x02	; 2
     ce6:	65 eb       	ldi	r22, 0xB5	; 181
     ce8:	74 e1       	ldi	r23, 0x14	; 20
     cea:	85 e2       	ldi	r24, 0x25	; 37
     cec:	92 e0       	ldi	r25, 0x02	; 2
     cee:	36 d5       	rcall	.+2668   	; 0x175c <enqueueSQ>
     cf0:	e7 dd       	rcall	.-1074   	; 0x8c0 <Dispatch>
     cf2:	83 cf       	rjmp	.-250    	; 0xbfa <OS_Start+0x9a>
     cf4:	ab 81       	ldd	r26, Y+3	; 0x03
     cf6:	bc 81       	ldd	r27, Y+4	; 0x04
     cf8:	2d 91       	ld	r18, X+
     cfa:	3c 91       	ld	r19, X
     cfc:	11 97       	sbiw	r26, 0x01	; 1
     cfe:	fd 01       	movw	r30, r26
     d00:	e4 5e       	subi	r30, 0xE4	; 228
     d02:	fe 4f       	sbci	r31, 0xFE	; 254
     d04:	80 81       	ld	r24, Z
     d06:	91 81       	ldd	r25, Z+1	; 0x01
     d08:	28 17       	cp	r18, r24
     d0a:	39 07       	cpc	r19, r25
     d0c:	51 f0       	breq	.+20     	; 0xd22 <OS_Start+0x1c2>
     d0e:	80 81       	ld	r24, Z
     d10:	91 81       	ldd	r25, Z+1	; 0x01
     d12:	e7 e8       	ldi	r30, 0x87	; 135
     d14:	f2 e0       	ldi	r31, 0x02	; 2
     d16:	20 81       	ld	r18, Z
     d18:	31 81       	ldd	r19, Z+1	; 0x01
     d1a:	28 17       	cp	r18, r24
     d1c:	39 07       	cpc	r19, r25
     d1e:	41 f4       	brne	.+16     	; 0xd30 <OS_Start+0x1d0>
     d20:	ad c2       	rjmp	.+1370   	; 0x127c <OS_Start+0x71c>
     d22:	eb 81       	ldd	r30, Y+3	; 0x03
     d24:	fc 81       	ldd	r31, Y+4	; 0x04
     d26:	e6 5e       	subi	r30, 0xE6	; 230
     d28:	fe 4f       	sbci	r31, 0xFE	; 254
     d2a:	91 82       	std	Z+1, r9	; 0x01
     d2c:	80 82       	st	Z, r8
     d2e:	1a c0       	rjmp	.+52     	; 0xd64 <OS_Start+0x204>
     d30:	e5 ea       	ldi	r30, 0xA5	; 165
     d32:	f3 e0       	ldi	r31, 0x03	; 3
     d34:	c4 01       	movw	r24, r8
     d36:	ab 81       	ldd	r26, Y+3	; 0x03
     d38:	bc 81       	ldd	r27, Y+4	; 0x04
     d3a:	a4 5e       	subi	r26, 0xE4	; 228
     d3c:	be 4f       	sbci	r27, 0xFE	; 254
     d3e:	6b 81       	ldd	r22, Y+3	; 0x03
     d40:	7c 81       	ldd	r23, Y+4	; 0x04
     d42:	2d 91       	ld	r18, X+
     d44:	3c 91       	ld	r19, X
     d46:	11 97       	sbiw	r26, 0x01	; 1
     d48:	40 81       	ld	r20, Z
     d4a:	51 81       	ldd	r21, Z+1	; 0x01
     d4c:	42 17       	cp	r20, r18
     d4e:	53 07       	cpc	r21, r19
     d50:	09 f4       	brne	.+2      	; 0xd54 <OS_Start+0x1f4>
     d52:	97 c2       	rjmp	.+1326   	; 0x1282 <OS_Start+0x722>
     d54:	01 96       	adiw	r24, 0x01	; 1
     d56:	e2 5e       	subi	r30, 0xE2	; 226
     d58:	fe 4f       	sbci	r31, 0xFE	; 254
     d5a:	80 31       	cpi	r24, 0x10	; 16
     d5c:	91 05       	cpc	r25, r1
     d5e:	89 f7       	brne	.-30     	; 0xd42 <OS_Start+0x1e2>
     d60:	7c 83       	std	Y+4, r23	; 0x04
     d62:	6b 83       	std	Y+3, r22	; 0x03
     d64:	eb 81       	ldd	r30, Y+3	; 0x03
     d66:	fc 81       	ldd	r31, Y+4	; 0x04
     d68:	e6 5e       	subi	r30, 0xE6	; 230
     d6a:	fe 4f       	sbci	r31, 0xFE	; 254
     d6c:	80 81       	ld	r24, Z
     d6e:	91 81       	ldd	r25, Z+1	; 0x01
     d70:	89 2b       	or	r24, r25
     d72:	09 f4       	brne	.+2      	; 0xd76 <OS_Start+0x216>
     d74:	42 cf       	rjmp	.-380    	; 0xbfa <OS_Start+0x9a>
     d76:	eb 81       	ldd	r30, Y+3	; 0x03
     d78:	fc 81       	ldd	r31, Y+4	; 0x04
     d7a:	ec 5f       	subi	r30, 0xFC	; 252
     d7c:	fe 4f       	sbci	r31, 0xFE	; 254
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	80 83       	st	Z, r24
     d82:	47 e1       	ldi	r20, 0x17	; 23
     d84:	52 e0       	ldi	r21, 0x02	; 2
     d86:	65 ed       	ldi	r22, 0xD5	; 213
     d88:	74 e1       	ldi	r23, 0x14	; 20
     d8a:	85 e2       	ldi	r24, 0x25	; 37
     d8c:	92 e0       	ldi	r25, 0x02	; 2
     d8e:	57 d5       	rcall	.+2734   	; 0x183e <enqueueRQ>
     d90:	97 dd       	rcall	.-1234   	; 0x8c0 <Dispatch>
     d92:	33 cf       	rjmp	.-410    	; 0xbfa <OS_Start+0x9a>
     d94:	e5 ea       	ldi	r30, 0xA5	; 165
     d96:	f3 e0       	ldi	r31, 0x03	; 3
     d98:	c4 01       	movw	r24, r8
     d9a:	ab 81       	ldd	r26, Y+3	; 0x03
     d9c:	bc 81       	ldd	r27, Y+4	; 0x04
     d9e:	a4 5e       	subi	r26, 0xE4	; 228
     da0:	be 4f       	sbci	r27, 0xFE	; 254
     da2:	6b 81       	ldd	r22, Y+3	; 0x03
     da4:	7c 81       	ldd	r23, Y+4	; 0x04
     da6:	2d 91       	ld	r18, X+
     da8:	3c 91       	ld	r19, X
     daa:	11 97       	sbiw	r26, 0x01	; 1
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	42 17       	cp	r20, r18
     db2:	53 07       	cpc	r21, r19
     db4:	09 f4       	brne	.+2      	; 0xdb8 <OS_Start+0x258>
     db6:	76 c2       	rjmp	.+1260   	; 0x12a4 <OS_Start+0x744>
     db8:	01 96       	adiw	r24, 0x01	; 1
     dba:	e2 5e       	subi	r30, 0xE2	; 226
     dbc:	fe 4f       	sbci	r31, 0xFE	; 254
     dbe:	80 31       	cpi	r24, 0x10	; 16
     dc0:	91 05       	cpc	r25, r1
     dc2:	89 f7       	brne	.-30     	; 0xda6 <OS_Start+0x246>
     dc4:	1a cf       	rjmp	.-460    	; 0xbfa <OS_Start+0x9a>
     dc6:	8a 9d       	mul	r24, r10
     dc8:	90 01       	movw	r18, r0
     dca:	8b 9d       	mul	r24, r11
     dcc:	30 0d       	add	r19, r0
     dce:	9a 9d       	mul	r25, r10
     dd0:	30 0d       	add	r19, r0
     dd2:	11 24       	eor	r1, r1
     dd4:	c9 01       	movw	r24, r18
     dd6:	89 57       	subi	r24, 0x79	; 121
     dd8:	9d 4f       	sbci	r25, 0xFD	; 253
     dda:	fc 01       	movw	r30, r24
     ddc:	e6 5e       	subi	r30, 0xE6	; 230
     dde:	fe 4f       	sbci	r31, 0xFE	; 254
     de0:	11 82       	std	Z+1, r1	; 0x01
     de2:	10 82       	st	Z, r1
     de4:	eb 81       	ldd	r30, Y+3	; 0x03
     de6:	fc 81       	ldd	r31, Y+4	; 0x04
     de8:	e9 5f       	subi	r30, 0xF9	; 249
     dea:	fe 4f       	sbci	r31, 0xFE	; 254
     dec:	20 81       	ld	r18, Z
     dee:	31 81       	ldd	r19, Z+1	; 0x01
     df0:	fc 01       	movw	r30, r24
     df2:	e9 5f       	subi	r30, 0xF9	; 249
     df4:	fe 4f       	sbci	r31, 0xFE	; 254
     df6:	80 81       	ld	r24, Z
     df8:	91 81       	ldd	r25, Z+1	; 0x01
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	08 f0       	brcs	.+2      	; 0xe02 <OS_Start+0x2a2>
     e00:	fc ce       	rjmp	.-520    	; 0xbfa <OS_Start+0x9a>
     e02:	eb 81       	ldd	r30, Y+3	; 0x03
     e04:	fc 81       	ldd	r31, Y+4	; 0x04
     e06:	ec 5f       	subi	r30, 0xFC	; 252
     e08:	fe 4f       	sbci	r31, 0xFE	; 254
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	80 83       	st	Z, r24
     e0e:	47 e1       	ldi	r20, 0x17	; 23
     e10:	52 e0       	ldi	r21, 0x02	; 2
     e12:	65 ed       	ldi	r22, 0xD5	; 213
     e14:	74 e1       	ldi	r23, 0x14	; 20
     e16:	85 e2       	ldi	r24, 0x25	; 37
     e18:	92 e0       	ldi	r25, 0x02	; 2
     e1a:	11 d5       	rcall	.+2594   	; 0x183e <enqueueRQ>
     e1c:	51 dd       	rcall	.-1374   	; 0x8c0 <Dispatch>
     e1e:	ed ce       	rjmp	.-550    	; 0xbfa <OS_Start+0x9a>
     e20:	eb 81       	ldd	r30, Y+3	; 0x03
     e22:	fc 81       	ldd	r31, Y+4	; 0x04
     e24:	e9 5f       	subi	r30, 0xF9	; 249
     e26:	fe 4f       	sbci	r31, 0xFE	; 254
     e28:	11 82       	std	Z+1, r1	; 0x01
     e2a:	10 82       	st	Z, r1
     e2c:	eb 81       	ldd	r30, Y+3	; 0x03
     e2e:	fc 81       	ldd	r31, Y+4	; 0x04
     e30:	eb 5f       	subi	r30, 0xFB	; 251
     e32:	fe 4f       	sbci	r31, 0xFE	; 254
     e34:	11 82       	std	Z+1, r1	; 0x01
     e36:	10 82       	st	Z, r1
     e38:	eb 81       	ldd	r30, Y+3	; 0x03
     e3a:	fc 81       	ldd	r31, Y+4	; 0x04
     e3c:	ec 5f       	subi	r30, 0xFC	; 252
     e3e:	fe 4f       	sbci	r31, 0xFE	; 254
     e40:	86 e0       	ldi	r24, 0x06	; 6
     e42:	80 83       	st	Z, r24
     e44:	dc 82       	std	Y+4, r13	; 0x04
     e46:	cb 82       	std	Y+3, r12	; 0x03
     e48:	e0 91 25 02 	lds	r30, 0x0225
     e4c:	f0 91 26 02 	lds	r31, 0x0226
     e50:	80 81       	ld	r24, Z
     e52:	91 81       	ldd	r25, Z+1	; 0x01
     e54:	ab 81       	ldd	r26, Y+3	; 0x03
     e56:	bc 81       	ldd	r27, Y+4	; 0x04
     e58:	13 96       	adiw	r26, 0x03	; 3
     e5a:	2d 91       	ld	r18, X+
     e5c:	3c 91       	ld	r19, X
     e5e:	14 97       	sbiw	r26, 0x04	; 4
     e60:	28 17       	cp	r18, r24
     e62:	39 07       	cpc	r19, r25
     e64:	39 f4       	brne	.+14     	; 0xe74 <OS_Start+0x314>
     e66:	8d 91       	ld	r24, X+
     e68:	9c 91       	ld	r25, X
     e6a:	ec 5e       	subi	r30, 0xEC	; 236
     e6c:	fe 4f       	sbci	r31, 0xFE	; 254
     e6e:	91 83       	std	Z+1, r25	; 0x01
     e70:	80 83       	st	Z, r24
     e72:	57 dd       	rcall	.-1362   	; 0x922 <Kernel_Unlock_Mutex>
     e74:	eb 81       	ldd	r30, Y+3	; 0x03
     e76:	fc 81       	ldd	r31, Y+4	; 0x04
     e78:	37 96       	adiw	r30, 0x07	; 7
     e7a:	fc 83       	std	Y+4, r31	; 0x04
     e7c:	eb 83       	std	Y+3, r30	; 0x03
     e7e:	e0 17       	cp	r30, r16
     e80:	f1 07       	cpc	r31, r17
     e82:	11 f7       	brne	.-60     	; 0xe48 <OS_Start+0x2e8>
     e84:	e0 91 25 02 	lds	r30, 0x0225
     e88:	f0 91 26 02 	lds	r31, 0x0226
     e8c:	df 01       	movw	r26, r30
     e8e:	ac 5f       	subi	r26, 0xFC	; 252
     e90:	be 4f       	sbci	r27, 0xFE	; 254
     e92:	1c 92       	st	X, r1
     e94:	52 96       	adiw	r26, 0x12	; 18
     e96:	11 96       	adiw	r26, 0x01	; 1
     e98:	3c 92       	st	X, r3
     e9a:	2e 92       	st	-X, r2
     e9c:	1f 97       	sbiw	r26, 0x0f	; 15
     e9e:	11 96       	adiw	r26, 0x01	; 1
     ea0:	7c 92       	st	X, r7
     ea2:	6e 92       	st	-X, r6
     ea4:	12 97       	sbiw	r26, 0x02	; 2
     ea6:	11 96       	adiw	r26, 0x01	; 1
     ea8:	7c 92       	st	X, r7
     eaa:	6e 92       	st	-X, r6
     eac:	11 82       	std	Z+1, r1	; 0x01
     eae:	10 82       	st	Z, r1
     eb0:	80 91 21 02 	lds	r24, 0x0221
     eb4:	90 91 22 02 	lds	r25, 0x0222
     eb8:	01 97       	sbiw	r24, 0x01	; 1
     eba:	90 93 22 02 	sts	0x0222, r25
     ebe:	80 93 21 02 	sts	0x0221, r24
     ec2:	fe dc       	rcall	.-1540   	; 0x8c0 <Dispatch>
     ec4:	9a ce       	rjmp	.-716    	; 0xbfa <OS_Start+0x9a>
     ec6:	80 91 1d 02 	lds	r24, 0x021D
     eca:	90 91 1e 02 	lds	r25, 0x021E
     ece:	08 97       	sbiw	r24, 0x08	; 8
     ed0:	41 f1       	breq	.+80     	; 0xf22 <OS_Start+0x3c2>
     ed2:	d6 01       	movw	r26, r12
     ed4:	12 96       	adiw	r26, 0x02	; 2
     ed6:	8c 91       	ld	r24, X
     ed8:	88 23       	and	r24, r24
     eda:	89 f0       	breq	.+34     	; 0xefe <OS_Start+0x39e>
     edc:	e8 e5       	ldi	r30, 0x58	; 88
     ede:	f2 e0       	ldi	r31, 0x02	; 2
     ee0:	94 01       	movw	r18, r8
     ee2:	4b 81       	ldd	r20, Y+3	; 0x03
     ee4:	5c 81       	ldd	r21, Y+4	; 0x04
     ee6:	80 81       	ld	r24, Z
     ee8:	88 23       	and	r24, r24
     eea:	61 f0       	breq	.+24     	; 0xf04 <OS_Start+0x3a4>
     eec:	2f 5f       	subi	r18, 0xFF	; 255
     eee:	3f 4f       	sbci	r19, 0xFF	; 255
     ef0:	37 96       	adiw	r30, 0x07	; 7
     ef2:	28 30       	cpi	r18, 0x08	; 8
     ef4:	31 05       	cpc	r19, r1
     ef6:	b9 f7       	brne	.-18     	; 0xee6 <OS_Start+0x386>
     ef8:	5c 83       	std	Y+4, r21	; 0x04
     efa:	4b 83       	std	Y+3, r20	; 0x03
     efc:	05 c0       	rjmp	.+10     	; 0xf08 <OS_Start+0x3a8>
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <OS_Start+0x3a8>
     f04:	5c 83       	std	Y+4, r21	; 0x04
     f06:	4b 83       	std	Y+3, r20	; 0x03
     f08:	c9 01       	movw	r24, r18
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	82 1b       	sub	r24, r18
     f18:	93 0b       	sbc	r25, r19
     f1a:	81 5b       	subi	r24, 0xB1	; 177
     f1c:	9d 4f       	sbci	r25, 0xFD	; 253
     f1e:	47 dc       	rcall	.-1906   	; 0x7ae <Kernel_Init_Mutex_At>
     f20:	2c 01       	movw	r4, r24
     f22:	eb 81       	ldd	r30, Y+3	; 0x03
     f24:	fc 81       	ldd	r31, Y+4	; 0x04
     f26:	e2 5f       	subi	r30, 0xF2	; 242
     f28:	fe 4f       	sbci	r31, 0xFE	; 254
     f2a:	51 82       	std	Z+1, r5	; 0x01
     f2c:	40 82       	st	Z, r4
     f2e:	65 ce       	rjmp	.-822    	; 0xbfa <OS_Start+0x9a>
     f30:	eb 81       	ldd	r30, Y+3	; 0x03
     f32:	fc 81       	ldd	r31, Y+4	; 0x04
     f34:	ec 5e       	subi	r30, 0xEC	; 236
     f36:	fe 4f       	sbci	r31, 0xFE	; 254
     f38:	40 81       	ld	r20, Z
     f3a:	51 81       	ldd	r21, Z+1	; 0x01
     f3c:	f6 01       	movw	r30, r12
     f3e:	80 81       	ld	r24, Z
     f40:	91 81       	ldd	r25, Z+1	; 0x01
     f42:	48 17       	cp	r20, r24
     f44:	59 07       	cpc	r21, r25
     f46:	09 f4       	brne	.+2      	; 0xf4a <OS_Start+0x3ea>
     f48:	bf c1       	rjmp	.+894    	; 0x12c8 <OS_Start+0x768>
     f4a:	c4 01       	movw	r24, r8
     f4c:	6b 81       	ldd	r22, Y+3	; 0x03
     f4e:	7c 81       	ldd	r23, Y+4	; 0x04
     f50:	27 81       	ldd	r18, Z+7	; 0x07
     f52:	30 85       	ldd	r19, Z+8	; 0x08
     f54:	42 17       	cp	r20, r18
     f56:	53 07       	cpc	r21, r19
     f58:	09 f4       	brne	.+2      	; 0xf5c <OS_Start+0x3fc>
     f5a:	b9 c1       	rjmp	.+882    	; 0x12ce <OS_Start+0x76e>
     f5c:	01 96       	adiw	r24, 0x01	; 1
     f5e:	37 96       	adiw	r30, 0x07	; 7
     f60:	88 30       	cpi	r24, 0x08	; 8
     f62:	91 05       	cpc	r25, r1
     f64:	a9 f7       	brne	.-22     	; 0xf50 <OS_Start+0x3f0>
     f66:	49 ce       	rjmp	.-878    	; 0xbfa <OS_Start+0x9a>
     f68:	fc 01       	movw	r30, r24
     f6a:	ee 0f       	add	r30, r30
     f6c:	ff 1f       	adc	r31, r31
     f6e:	ee 0f       	add	r30, r30
     f70:	ff 1f       	adc	r31, r31
     f72:	ee 0f       	add	r30, r30
     f74:	ff 1f       	adc	r31, r31
     f76:	e8 1b       	sub	r30, r24
     f78:	f9 0b       	sbc	r31, r25
     f7a:	e1 5b       	subi	r30, 0xB1	; 177
     f7c:	fd 4f       	sbci	r31, 0xFD	; 253
     f7e:	82 e0       	ldi	r24, 0x02	; 2
     f80:	82 83       	std	Z+2, r24	; 0x02
     f82:	ab 81       	ldd	r26, Y+3	; 0x03
     f84:	bc 81       	ldd	r27, Y+4	; 0x04
     f86:	8d 91       	ld	r24, X+
     f88:	9c 91       	ld	r25, X
     f8a:	94 83       	std	Z+4, r25	; 0x04
     f8c:	83 83       	std	Z+3, r24	; 0x03
     f8e:	85 81       	ldd	r24, Z+5	; 0x05
     f90:	96 81       	ldd	r25, Z+6	; 0x06
     f92:	01 96       	adiw	r24, 0x01	; 1
     f94:	96 83       	std	Z+6, r25	; 0x06
     f96:	85 83       	std	Z+5, r24	; 0x05
     f98:	30 ce       	rjmp	.-928    	; 0xbfa <OS_Start+0x9a>
     f9a:	fc 01       	movw	r30, r24
     f9c:	ee 0f       	add	r30, r30
     f9e:	ff 1f       	adc	r31, r31
     fa0:	ee 0f       	add	r30, r30
     fa2:	ff 1f       	adc	r31, r31
     fa4:	ee 0f       	add	r30, r30
     fa6:	ff 1f       	adc	r31, r31
     fa8:	e8 1b       	sub	r30, r24
     faa:	f9 0b       	sbc	r31, r25
     fac:	e1 5b       	subi	r30, 0xB1	; 177
     fae:	fd 4f       	sbci	r31, 0xFD	; 253
     fb0:	23 81       	ldd	r18, Z+3	; 0x03
     fb2:	34 81       	ldd	r19, Z+4	; 0x04
     fb4:	eb 81       	ldd	r30, Y+3	; 0x03
     fb6:	fc 81       	ldd	r31, Y+4	; 0x04
     fb8:	40 81       	ld	r20, Z
     fba:	51 81       	ldd	r21, Z+1	; 0x01
     fbc:	24 17       	cp	r18, r20
     fbe:	35 07       	cpc	r19, r21
     fc0:	89 f4       	brne	.+34     	; 0xfe4 <OS_Start+0x484>
     fc2:	fc 01       	movw	r30, r24
     fc4:	ee 0f       	add	r30, r30
     fc6:	ff 1f       	adc	r31, r31
     fc8:	ee 0f       	add	r30, r30
     fca:	ff 1f       	adc	r31, r31
     fcc:	ee 0f       	add	r30, r30
     fce:	ff 1f       	adc	r31, r31
     fd0:	e8 1b       	sub	r30, r24
     fd2:	f9 0b       	sbc	r31, r25
     fd4:	e1 5b       	subi	r30, 0xB1	; 177
     fd6:	fd 4f       	sbci	r31, 0xFD	; 253
     fd8:	85 81       	ldd	r24, Z+5	; 0x05
     fda:	96 81       	ldd	r25, Z+6	; 0x06
     fdc:	01 96       	adiw	r24, 0x01	; 1
     fde:	96 83       	std	Z+6, r25	; 0x06
     fe0:	85 83       	std	Z+5, r24	; 0x05
     fe2:	0b ce       	rjmp	.-1002   	; 0xbfa <OS_Start+0x9a>
     fe4:	e7 e8       	ldi	r30, 0x87	; 135
     fe6:	f2 e0       	ldi	r31, 0x02	; 2
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	6b 81       	ldd	r22, Y+3	; 0x03
     fee:	7c 81       	ldd	r23, Y+4	; 0x04
     ff0:	40 81       	ld	r20, Z
     ff2:	51 81       	ldd	r21, Z+1	; 0x01
     ff4:	24 17       	cp	r18, r20
     ff6:	35 07       	cpc	r19, r21
     ff8:	19 f4       	brne	.+6      	; 0x1000 <OS_Start+0x4a0>
     ffa:	21 15       	cp	r18, r1
     ffc:	31 05       	cpc	r19, r1
     ffe:	31 f4       	brne	.+12     	; 0x100c <OS_Start+0x4ac>
    1000:	01 96       	adiw	r24, 0x01	; 1
    1002:	e2 5e       	subi	r30, 0xE2	; 226
    1004:	fe 4f       	sbci	r31, 0xFE	; 254
    1006:	80 31       	cpi	r24, 0x10	; 16
    1008:	91 05       	cpc	r25, r1
    100a:	91 f7       	brne	.-28     	; 0xff0 <OS_Start+0x490>
    100c:	7c 83       	std	Y+4, r23	; 0x04
    100e:	6b 83       	std	Y+3, r22	; 0x03
    1010:	fb 01       	movw	r30, r22
    1012:	e9 5f       	subi	r30, 0xF9	; 249
    1014:	fe 4f       	sbci	r31, 0xFE	; 254
    1016:	20 81       	ld	r18, Z
    1018:	31 81       	ldd	r19, Z+1	; 0x01
    101a:	8a 9d       	mul	r24, r10
    101c:	f0 01       	movw	r30, r0
    101e:	8b 9d       	mul	r24, r11
    1020:	f0 0d       	add	r31, r0
    1022:	9a 9d       	mul	r25, r10
    1024:	f0 0d       	add	r31, r0
    1026:	11 24       	eor	r1, r1
    1028:	e2 57       	subi	r30, 0x72	; 114
    102a:	fc 4f       	sbci	r31, 0xFC	; 252
    102c:	40 81       	ld	r20, Z
    102e:	51 81       	ldd	r21, Z+1	; 0x01
    1030:	24 17       	cp	r18, r20
    1032:	35 07       	cpc	r19, r21
    1034:	80 f4       	brcc	.+32     	; 0x1056 <OS_Start+0x4f6>
    1036:	fb 01       	movw	r30, r22
    1038:	e9 5f       	subi	r30, 0xF9	; 249
    103a:	fe 4f       	sbci	r31, 0xFE	; 254
    103c:	20 81       	ld	r18, Z
    103e:	31 81       	ldd	r19, Z+1	; 0x01
    1040:	8a 9d       	mul	r24, r10
    1042:	f0 01       	movw	r30, r0
    1044:	8b 9d       	mul	r24, r11
    1046:	f0 0d       	add	r31, r0
    1048:	9a 9d       	mul	r25, r10
    104a:	f0 0d       	add	r31, r0
    104c:	11 24       	eor	r1, r1
    104e:	e2 57       	subi	r30, 0x72	; 114
    1050:	fc 4f       	sbci	r31, 0xFC	; 252
    1052:	31 83       	std	Z+1, r19	; 0x01
    1054:	20 83       	st	Z, r18
    1056:	eb 81       	ldd	r30, Y+3	; 0x03
    1058:	fc 81       	ldd	r31, Y+4	; 0x04
    105a:	ec 5f       	subi	r30, 0xFC	; 252
    105c:	fe 4f       	sbci	r31, 0xFE	; 254
    105e:	84 e0       	ldi	r24, 0x04	; 4
    1060:	80 83       	st	Z, r24
    1062:	43 e1       	ldi	r20, 0x13	; 19
    1064:	52 e0       	ldi	r21, 0x02	; 2
    1066:	67 ef       	ldi	r22, 0xF7	; 247
    1068:	74 e1       	ldi	r23, 0x14	; 20
    106a:	85 e2       	ldi	r24, 0x25	; 37
    106c:	92 e0       	ldi	r25, 0x02	; 2
    106e:	46 d3       	rcall	.+1676   	; 0x16fc <enqueueWQ>
    1070:	27 dc       	rcall	.-1970   	; 0x8c0 <Dispatch>
    1072:	c3 cd       	rjmp	.-1146   	; 0xbfa <OS_Start+0x9a>
    1074:	56 dc       	rcall	.-1876   	; 0x922 <Kernel_Unlock_Mutex>
    1076:	c1 cd       	rjmp	.-1150   	; 0xbfa <OS_Start+0x9a>
    1078:	80 91 1b 02 	lds	r24, 0x021B
    107c:	90 91 1c 02 	lds	r25, 0x021C
    1080:	08 97       	sbiw	r24, 0x08	; 8
    1082:	31 f1       	breq	.+76     	; 0x10d0 <OS_Start+0x570>
    1084:	d7 01       	movw	r26, r14
    1086:	12 96       	adiw	r26, 0x02	; 2
    1088:	8c 91       	ld	r24, X
    108a:	88 23       	and	r24, r24
    108c:	81 f0       	breq	.+32     	; 0x10ae <OS_Start+0x54e>
    108e:	ee e2       	ldi	r30, 0x2E	; 46
    1090:	f2 e0       	ldi	r31, 0x02	; 2
    1092:	c4 01       	movw	r24, r8
    1094:	4b 81       	ldd	r20, Y+3	; 0x03
    1096:	5c 81       	ldd	r21, Y+4	; 0x04
    1098:	20 81       	ld	r18, Z
    109a:	22 23       	and	r18, r18
    109c:	59 f0       	breq	.+22     	; 0x10b4 <OS_Start+0x554>
    109e:	01 96       	adiw	r24, 0x01	; 1
    10a0:	35 96       	adiw	r30, 0x05	; 5
    10a2:	88 30       	cpi	r24, 0x08	; 8
    10a4:	91 05       	cpc	r25, r1
    10a6:	c1 f7       	brne	.-16     	; 0x1098 <OS_Start+0x538>
    10a8:	5c 83       	std	Y+4, r21	; 0x04
    10aa:	4b 83       	std	Y+3, r20	; 0x03
    10ac:	05 c0       	rjmp	.+10     	; 0x10b8 <OS_Start+0x558>
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <OS_Start+0x558>
    10b4:	5c 83       	std	Y+4, r21	; 0x04
    10b6:	4b 83       	std	Y+3, r20	; 0x03
    10b8:	9c 01       	movw	r18, r24
    10ba:	22 0f       	add	r18, r18
    10bc:	33 1f       	adc	r19, r19
    10be:	22 0f       	add	r18, r18
    10c0:	33 1f       	adc	r19, r19
    10c2:	82 0f       	add	r24, r18
    10c4:	93 1f       	adc	r25, r19
    10c6:	89 5d       	subi	r24, 0xD9	; 217
    10c8:	9d 4f       	sbci	r25, 0xFD	; 253
    10ca:	86 db       	rcall	.-2292   	; 0x7d8 <Kernel_Init_Event_At>
    10cc:	9a 83       	std	Y+2, r25	; 0x02
    10ce:	89 83       	std	Y+1, r24	; 0x01
    10d0:	ab 81       	ldd	r26, Y+3	; 0x03
    10d2:	bc 81       	ldd	r27, Y+4	; 0x04
    10d4:	a2 5f       	subi	r26, 0xF2	; 242
    10d6:	be 4f       	sbci	r27, 0xFE	; 254
    10d8:	e9 81       	ldd	r30, Y+1	; 0x01
    10da:	fa 81       	ldd	r31, Y+2	; 0x02
    10dc:	11 96       	adiw	r26, 0x01	; 1
    10de:	fc 93       	st	X, r31
    10e0:	ee 93       	st	-X, r30
    10e2:	8b cd       	rjmp	.-1258   	; 0xbfa <OS_Start+0x9a>
    10e4:	eb 81       	ldd	r30, Y+3	; 0x03
    10e6:	fc 81       	ldd	r31, Y+4	; 0x04
    10e8:	e8 5e       	subi	r30, 0xE8	; 232
    10ea:	fe 4f       	sbci	r31, 0xFE	; 254
    10ec:	40 81       	ld	r20, Z
    10ee:	51 81       	ldd	r21, Z+1	; 0x01
    10f0:	d7 01       	movw	r26, r14
    10f2:	8d 91       	ld	r24, X+
    10f4:	9c 91       	ld	r25, X
    10f6:	48 17       	cp	r20, r24
    10f8:	59 07       	cpc	r21, r25
    10fa:	09 f4       	brne	.+2      	; 0x10fe <OS_Start+0x59e>
    10fc:	fa c0       	rjmp	.+500    	; 0x12f2 <OS_Start+0x792>
    10fe:	f7 01       	movw	r30, r14
    1100:	c4 01       	movw	r24, r8
    1102:	6b 81       	ldd	r22, Y+3	; 0x03
    1104:	7c 81       	ldd	r23, Y+4	; 0x04
    1106:	25 81       	ldd	r18, Z+5	; 0x05
    1108:	36 81       	ldd	r19, Z+6	; 0x06
    110a:	42 17       	cp	r20, r18
    110c:	53 07       	cpc	r21, r19
    110e:	09 f4       	brne	.+2      	; 0x1112 <OS_Start+0x5b2>
    1110:	f3 c0       	rjmp	.+486    	; 0x12f8 <OS_Start+0x798>
    1112:	01 96       	adiw	r24, 0x01	; 1
    1114:	35 96       	adiw	r30, 0x05	; 5
    1116:	88 30       	cpi	r24, 0x08	; 8
    1118:	91 05       	cpc	r25, r1
    111a:	a9 f7       	brne	.-22     	; 0x1106 <OS_Start+0x5a6>
    111c:	3d c0       	rjmp	.+122    	; 0x1198 <OS_Start+0x638>
    111e:	fc 01       	movw	r30, r24
    1120:	ee 0f       	add	r30, r30
    1122:	ff 1f       	adc	r31, r31
    1124:	ee 0f       	add	r30, r30
    1126:	ff 1f       	adc	r31, r31
    1128:	e8 0f       	add	r30, r24
    112a:	f9 1f       	adc	r31, r25
    112c:	e9 5d       	subi	r30, 0xD9	; 217
    112e:	fd 4f       	sbci	r31, 0xFD	; 253
    1130:	22 81       	ldd	r18, Z+2	; 0x02
    1132:	22 30       	cpi	r18, 0x02	; 2
    1134:	69 f4       	brne	.+26     	; 0x1150 <OS_Start+0x5f0>
    1136:	fc 01       	movw	r30, r24
    1138:	ee 0f       	add	r30, r30
    113a:	ff 1f       	adc	r31, r31
    113c:	ee 0f       	add	r30, r30
    113e:	ff 1f       	adc	r31, r31
    1140:	8e 0f       	add	r24, r30
    1142:	9f 1f       	adc	r25, r31
    1144:	fc 01       	movw	r30, r24
    1146:	e9 5d       	subi	r30, 0xD9	; 217
    1148:	fd 4f       	sbci	r31, 0xFD	; 253
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	82 83       	std	Z+2, r24	; 0x02
    114e:	24 c0       	rjmp	.+72     	; 0x1198 <OS_Start+0x638>
    1150:	eb 81       	ldd	r30, Y+3	; 0x03
    1152:	fc 81       	ldd	r31, Y+4	; 0x04
    1154:	ea 5e       	subi	r30, 0xEA	; 234
    1156:	fe 4f       	sbci	r31, 0xFE	; 254
    1158:	51 83       	std	Z+1, r21	; 0x01
    115a:	40 83       	st	Z, r20
    115c:	eb 81       	ldd	r30, Y+3	; 0x03
    115e:	fc 81       	ldd	r31, Y+4	; 0x04
    1160:	20 81       	ld	r18, Z
    1162:	31 81       	ldd	r19, Z+1	; 0x01
    1164:	fc 01       	movw	r30, r24
    1166:	ee 0f       	add	r30, r30
    1168:	ff 1f       	adc	r31, r31
    116a:	ee 0f       	add	r30, r30
    116c:	ff 1f       	adc	r31, r31
    116e:	8e 0f       	add	r24, r30
    1170:	9f 1f       	adc	r25, r31
    1172:	fc 01       	movw	r30, r24
    1174:	e9 5d       	subi	r30, 0xD9	; 217
    1176:	fd 4f       	sbci	r31, 0xFD	; 253
    1178:	34 83       	std	Z+4, r19	; 0x04
    117a:	23 83       	std	Z+3, r18	; 0x03
    117c:	eb 81       	ldd	r30, Y+3	; 0x03
    117e:	fc 81       	ldd	r31, Y+4	; 0x04
    1180:	ec 5f       	subi	r30, 0xFC	; 252
    1182:	fe 4f       	sbci	r31, 0xFE	; 254
    1184:	85 e0       	ldi	r24, 0x05	; 5
    1186:	80 83       	st	Z, r24
    1188:	47 e1       	ldi	r20, 0x17	; 23
    118a:	52 e0       	ldi	r21, 0x02	; 2
    118c:	65 ed       	ldi	r22, 0xD5	; 213
    118e:	74 e1       	ldi	r23, 0x14	; 20
    1190:	85 e2       	ldi	r24, 0x25	; 37
    1192:	92 e0       	ldi	r25, 0x02	; 2
    1194:	54 d3       	rcall	.+1704   	; 0x183e <enqueueRQ>
    1196:	94 db       	rcall	.-2264   	; 0x8c0 <Dispatch>
    1198:	e0 91 25 02 	lds	r30, 0x0225
    119c:	f0 91 26 02 	lds	r31, 0x0226
    11a0:	80 81       	ld	r24, Z
    11a2:	91 81       	ldd	r25, Z+1	; 0x01
    11a4:	02 97       	sbiw	r24, 0x02	; 2
    11a6:	20 f4       	brcc	.+8      	; 0x11b0 <OS_Start+0x650>
    11a8:	82 e0       	ldi	r24, 0x02	; 2
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	ab d8       	rcall	.-3754   	; 0x304 <enable_LED>
    11ae:	25 cd       	rjmp	.-1462   	; 0xbfa <OS_Start+0x9a>
    11b0:	80 81       	ld	r24, Z
    11b2:	91 81       	ldd	r25, Z+1	; 0x01
    11b4:	02 97       	sbiw	r24, 0x02	; 2
    11b6:	21 f4       	brne	.+8      	; 0x11c0 <OS_Start+0x660>
    11b8:	85 e0       	ldi	r24, 0x05	; 5
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	a3 d8       	rcall	.-3770   	; 0x304 <enable_LED>
    11be:	1d cd       	rjmp	.-1478   	; 0xbfa <OS_Start+0x9a>
    11c0:	80 81       	ld	r24, Z
    11c2:	91 81       	ldd	r25, Z+1	; 0x01
    11c4:	03 97       	sbiw	r24, 0x03	; 3
    11c6:	09 f0       	breq	.+2      	; 0x11ca <OS_Start+0x66a>
    11c8:	18 cd       	rjmp	.-1488   	; 0xbfa <OS_Start+0x9a>
    11ca:	86 e0       	ldi	r24, 0x06	; 6
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	9a d8       	rcall	.-3788   	; 0x304 <enable_LED>
    11d0:	14 cd       	rjmp	.-1496   	; 0xbfa <OS_Start+0x9a>
    11d2:	eb 81       	ldd	r30, Y+3	; 0x03
    11d4:	fc 81       	ldd	r31, Y+4	; 0x04
    11d6:	e8 5e       	subi	r30, 0xE8	; 232
    11d8:	fe 4f       	sbci	r31, 0xFE	; 254
    11da:	40 81       	ld	r20, Z
    11dc:	51 81       	ldd	r21, Z+1	; 0x01
    11de:	d7 01       	movw	r26, r14
    11e0:	8d 91       	ld	r24, X+
    11e2:	9c 91       	ld	r25, X
    11e4:	48 17       	cp	r20, r24
    11e6:	59 07       	cpc	r21, r25
    11e8:	09 f4       	brne	.+2      	; 0x11ec <OS_Start+0x68c>
    11ea:	97 c0       	rjmp	.+302    	; 0x131a <OS_Start+0x7ba>
    11ec:	f7 01       	movw	r30, r14
    11ee:	c4 01       	movw	r24, r8
    11f0:	6b 81       	ldd	r22, Y+3	; 0x03
    11f2:	7c 81       	ldd	r23, Y+4	; 0x04
    11f4:	25 81       	ldd	r18, Z+5	; 0x05
    11f6:	36 81       	ldd	r19, Z+6	; 0x06
    11f8:	42 17       	cp	r20, r18
    11fa:	53 07       	cpc	r21, r19
    11fc:	09 f4       	brne	.+2      	; 0x1200 <OS_Start+0x6a0>
    11fe:	90 c0       	rjmp	.+288    	; 0x1320 <OS_Start+0x7c0>
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	35 96       	adiw	r30, 0x05	; 5
    1204:	88 30       	cpi	r24, 0x08	; 8
    1206:	91 05       	cpc	r25, r1
    1208:	a9 f7       	brne	.-22     	; 0x11f4 <OS_Start+0x694>
    120a:	f7 cc       	rjmp	.-1554   	; 0xbfa <OS_Start+0x9a>
    120c:	80 81       	ld	r24, Z
    120e:	91 81       	ldd	r25, Z+1	; 0x01
    1210:	48 17       	cp	r20, r24
    1212:	59 07       	cpc	r21, r25
    1214:	09 f4       	brne	.+2      	; 0x1218 <OS_Start+0x6b8>
    1216:	97 c0       	rjmp	.+302    	; 0x1346 <OS_Start+0x7e6>
    1218:	2f 5f       	subi	r18, 0xFF	; 255
    121a:	3f 4f       	sbci	r19, 0xFF	; 255
    121c:	e2 5e       	subi	r30, 0xE2	; 226
    121e:	fe 4f       	sbci	r31, 0xFE	; 254
    1220:	20 31       	cpi	r18, 0x10	; 16
    1222:	31 05       	cpc	r19, r1
    1224:	99 f7       	brne	.-26     	; 0x120c <OS_Start+0x6ac>
    1226:	cb 01       	movw	r24, r22
    1228:	fb 01       	movw	r30, r22
    122a:	ee 0f       	add	r30, r30
    122c:	ff 1f       	adc	r31, r31
    122e:	ee 0f       	add	r30, r30
    1230:	ff 1f       	adc	r31, r31
    1232:	8e 0f       	add	r24, r30
    1234:	9f 1f       	adc	r25, r31
    1236:	fc 01       	movw	r30, r24
    1238:	e9 5d       	subi	r30, 0xD9	; 217
    123a:	fd 4f       	sbci	r31, 0xFD	; 253
    123c:	82 e0       	ldi	r24, 0x02	; 2
    123e:	82 83       	std	Z+2, r24	; 0x02
    1240:	dc cc       	rjmp	.-1608   	; 0xbfa <OS_Start+0x9a>
    1242:	2a 9d       	mul	r18, r10
    1244:	f0 01       	movw	r30, r0
    1246:	2b 9d       	mul	r18, r11
    1248:	f0 0d       	add	r31, r0
    124a:	3a 9d       	mul	r19, r10
    124c:	f0 0d       	add	r31, r0
    124e:	11 24       	eor	r1, r1
    1250:	ef 55       	subi	r30, 0x5F	; 95
    1252:	fc 4f       	sbci	r31, 0xFC	; 252
    1254:	80 81       	ld	r24, Z
    1256:	91 81       	ldd	r25, Z+1	; 0x01
    1258:	89 2b       	or	r24, r25
    125a:	09 f0       	breq	.+2      	; 0x125e <OS_Start+0x6fe>
    125c:	ce cc       	rjmp	.-1636   	; 0xbfa <OS_Start+0x9a>
    125e:	eb 81       	ldd	r30, Y+3	; 0x03
    1260:	fc 81       	ldd	r31, Y+4	; 0x04
    1262:	ec 5f       	subi	r30, 0xFC	; 252
    1264:	fe 4f       	sbci	r31, 0xFE	; 254
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	80 83       	st	Z, r24
    126a:	47 e1       	ldi	r20, 0x17	; 23
    126c:	52 e0       	ldi	r21, 0x02	; 2
    126e:	65 ed       	ldi	r22, 0xD5	; 213
    1270:	74 e1       	ldi	r23, 0x14	; 20
    1272:	85 e2       	ldi	r24, 0x25	; 37
    1274:	92 e0       	ldi	r25, 0x02	; 2
    1276:	e3 d2       	rcall	.+1478   	; 0x183e <enqueueRQ>
    1278:	23 db       	rcall	.-2490   	; 0x8c0 <Dispatch>
    127a:	bf cc       	rjmp	.-1666   	; 0xbfa <OS_Start+0x9a>
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <OS_Start+0x726>
    1282:	7c 83       	std	Y+4, r23	; 0x04
    1284:	6b 83       	std	Y+3, r22	; 0x03
    1286:	8a 9d       	mul	r24, r10
    1288:	f0 01       	movw	r30, r0
    128a:	8b 9d       	mul	r24, r11
    128c:	f0 0d       	add	r31, r0
    128e:	9a 9d       	mul	r25, r10
    1290:	f0 0d       	add	r31, r0
    1292:	11 24       	eor	r1, r1
    1294:	ef 55       	subi	r30, 0x5F	; 95
    1296:	fc 4f       	sbci	r31, 0xFC	; 252
    1298:	91 82       	std	Z+1, r9	; 0x01
    129a:	80 82       	st	Z, r8
    129c:	63 cd       	rjmp	.-1338   	; 0xd64 <OS_Start+0x204>
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <OS_Start+0x748>
    12a4:	7c 83       	std	Y+4, r23	; 0x04
    12a6:	6b 83       	std	Y+3, r22	; 0x03
    12a8:	8a 9d       	mul	r24, r10
    12aa:	f0 01       	movw	r30, r0
    12ac:	8b 9d       	mul	r24, r11
    12ae:	f0 0d       	add	r31, r0
    12b0:	9a 9d       	mul	r25, r10
    12b2:	f0 0d       	add	r31, r0
    12b4:	11 24       	eor	r1, r1
    12b6:	ef 55       	subi	r30, 0x5F	; 95
    12b8:	fc 4f       	sbci	r31, 0xFC	; 252
    12ba:	20 81       	ld	r18, Z
    12bc:	31 81       	ldd	r19, Z+1	; 0x01
    12be:	21 30       	cpi	r18, 0x01	; 1
    12c0:	31 05       	cpc	r19, r1
    12c2:	09 f0       	breq	.+2      	; 0x12c6 <OS_Start+0x766>
    12c4:	9a cc       	rjmp	.-1740   	; 0xbfa <OS_Start+0x9a>
    12c6:	7f cd       	rjmp	.-1282   	; 0xdc6 <OS_Start+0x266>
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <OS_Start+0x772>
    12ce:	7c 83       	std	Y+4, r23	; 0x04
    12d0:	6b 83       	std	Y+3, r22	; 0x03
    12d2:	fc 01       	movw	r30, r24
    12d4:	ee 0f       	add	r30, r30
    12d6:	ff 1f       	adc	r31, r31
    12d8:	ee 0f       	add	r30, r30
    12da:	ff 1f       	adc	r31, r31
    12dc:	ee 0f       	add	r30, r30
    12de:	ff 1f       	adc	r31, r31
    12e0:	e8 1b       	sub	r30, r24
    12e2:	f9 0b       	sbc	r31, r25
    12e4:	e1 5b       	subi	r30, 0xB1	; 177
    12e6:	fd 4f       	sbci	r31, 0xFD	; 253
    12e8:	22 81       	ldd	r18, Z+2	; 0x02
    12ea:	21 30       	cpi	r18, 0x01	; 1
    12ec:	09 f0       	breq	.+2      	; 0x12f0 <OS_Start+0x790>
    12ee:	55 ce       	rjmp	.-854    	; 0xf9a <OS_Start+0x43a>
    12f0:	3b ce       	rjmp	.-906    	; 0xf68 <OS_Start+0x408>
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <OS_Start+0x79c>
    12f8:	7c 83       	std	Y+4, r23	; 0x04
    12fa:	6b 83       	std	Y+3, r22	; 0x03
    12fc:	fc 01       	movw	r30, r24
    12fe:	ee 0f       	add	r30, r30
    1300:	ff 1f       	adc	r31, r31
    1302:	ee 0f       	add	r30, r30
    1304:	ff 1f       	adc	r31, r31
    1306:	e8 0f       	add	r30, r24
    1308:	f9 1f       	adc	r31, r25
    130a:	e9 5d       	subi	r30, 0xD9	; 217
    130c:	fd 4f       	sbci	r31, 0xFD	; 253
    130e:	23 81       	ldd	r18, Z+3	; 0x03
    1310:	34 81       	ldd	r19, Z+4	; 0x04
    1312:	23 2b       	or	r18, r19
    1314:	09 f0       	breq	.+2      	; 0x1318 <OS_Start+0x7b8>
    1316:	40 cf       	rjmp	.-384    	; 0x1198 <OS_Start+0x638>
    1318:	02 cf       	rjmp	.-508    	; 0x111e <OS_Start+0x5be>
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <OS_Start+0x7c4>
    1320:	7c 83       	std	Y+4, r23	; 0x04
    1322:	6b 83       	std	Y+3, r22	; 0x03
    1324:	ed e9       	ldi	r30, 0x9D	; 157
    1326:	f3 e0       	ldi	r31, 0x03	; 3
    1328:	20 81       	ld	r18, Z
    132a:	31 81       	ldd	r19, Z+1	; 0x01
    132c:	42 17       	cp	r20, r18
    132e:	53 07       	cpc	r21, r19
    1330:	39 f0       	breq	.+14     	; 0x1340 <OS_Start+0x7e0>
    1332:	eb eb       	ldi	r30, 0xBB	; 187
    1334:	f4 e0       	ldi	r31, 0x04	; 4
    1336:	94 01       	movw	r18, r8
    1338:	ab 81       	ldd	r26, Y+3	; 0x03
    133a:	bc 81       	ldd	r27, Y+4	; 0x04
    133c:	bc 01       	movw	r22, r24
    133e:	66 cf       	rjmp	.-308    	; 0x120c <OS_Start+0x6ac>
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	03 c0       	rjmp	.+6      	; 0x134c <OS_Start+0x7ec>
    1346:	bc 83       	std	Y+4, r27	; 0x04
    1348:	ab 83       	std	Y+3, r26	; 0x03
    134a:	cb 01       	movw	r24, r22
    134c:	2a 9d       	mul	r18, r10
    134e:	a0 01       	movw	r20, r0
    1350:	2b 9d       	mul	r18, r11
    1352:	50 0d       	add	r21, r0
    1354:	3a 9d       	mul	r19, r10
    1356:	50 0d       	add	r21, r0
    1358:	11 24       	eor	r1, r1
    135a:	49 57       	subi	r20, 0x79	; 121
    135c:	5d 4f       	sbci	r21, 0xFD	; 253
    135e:	fa 01       	movw	r30, r20
    1360:	ec 5f       	subi	r30, 0xFC	; 252
    1362:	fe 4f       	sbci	r31, 0xFE	; 254
    1364:	61 e0       	ldi	r22, 0x01	; 1
    1366:	60 83       	st	Z, r22
    1368:	72 96       	adiw	r30, 0x12	; 18
    136a:	31 82       	std	Z+1, r3	; 0x01
    136c:	20 82       	st	Z, r2
    136e:	fc 01       	movw	r30, r24
    1370:	ee 0f       	add	r30, r30
    1372:	ff 1f       	adc	r31, r31
    1374:	ee 0f       	add	r30, r30
    1376:	ff 1f       	adc	r31, r31
    1378:	8e 0f       	add	r24, r30
    137a:	9f 1f       	adc	r25, r31
    137c:	fc 01       	movw	r30, r24
    137e:	e9 5d       	subi	r30, 0xD9	; 217
    1380:	fd 4f       	sbci	r31, 0xFD	; 253
    1382:	14 82       	std	Z+4, r1	; 0x04
    1384:	13 82       	std	Z+3, r1	; 0x03
    1386:	eb 81       	ldd	r30, Y+3	; 0x03
    1388:	fc 81       	ldd	r31, Y+4	; 0x04
    138a:	e9 5f       	subi	r30, 0xF9	; 249
    138c:	fe 4f       	sbci	r31, 0xFE	; 254
    138e:	80 81       	ld	r24, Z
    1390:	91 81       	ldd	r25, Z+1	; 0x01
    1392:	fa 01       	movw	r30, r20
    1394:	e9 5f       	subi	r30, 0xF9	; 249
    1396:	fe 4f       	sbci	r31, 0xFE	; 254
    1398:	40 81       	ld	r20, Z
    139a:	51 81       	ldd	r21, Z+1	; 0x01
    139c:	48 17       	cp	r20, r24
    139e:	59 07       	cpc	r21, r25
    13a0:	08 f4       	brcc	.+2      	; 0x13a4 <OS_Start+0x844>
    13a2:	4f cf       	rjmp	.-354    	; 0x1242 <OS_Start+0x6e2>
    13a4:	2a cc       	rjmp	.-1964   	; 0xbfa <OS_Start+0x9a>
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	1f 91       	pop	r17
    13b4:	0f 91       	pop	r16
    13b6:	ff 90       	pop	r15
    13b8:	ef 90       	pop	r14
    13ba:	df 90       	pop	r13
    13bc:	cf 90       	pop	r12
    13be:	bf 90       	pop	r11
    13c0:	af 90       	pop	r10
    13c2:	9f 90       	pop	r9
    13c4:	8f 90       	pop	r8
    13c6:	7f 90       	pop	r7
    13c8:	6f 90       	pop	r6
    13ca:	5f 90       	pop	r5
    13cc:	4f 90       	pop	r4
    13ce:	3f 90       	pop	r3
    13d0:	2f 90       	pop	r2
    13d2:	08 95       	ret

000013d4 <Mutex_Init>:
    13d4:	80 91 23 02 	lds	r24, 0x0223
    13d8:	90 91 24 02 	lds	r25, 0x0224
    13dc:	89 2b       	or	r24, r25
    13de:	a1 f0       	breq	.+40     	; 0x1408 <Mutex_Init+0x34>
    13e0:	f8 94       	cli
    13e2:	e0 91 25 02 	lds	r30, 0x0225
    13e6:	f0 91 26 02 	lds	r31, 0x0226
    13ea:	e3 5f       	subi	r30, 0xF3	; 243
    13ec:	fe 4f       	sbci	r31, 0xFE	; 254
    13ee:	87 e0       	ldi	r24, 0x07	; 7
    13f0:	80 83       	st	Z, r24
    13f2:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    13f6:	e0 91 25 02 	lds	r30, 0x0225
    13fa:	f0 91 26 02 	lds	r31, 0x0226
    13fe:	e2 5f       	subi	r30, 0xF2	; 242
    1400:	fe 4f       	sbci	r31, 0xFE	; 254
    1402:	80 81       	ld	r24, Z
    1404:	91 81       	ldd	r25, Z+1	; 0x01
    1406:	08 95       	ret
    1408:	08 95       	ret

0000140a <Event_Init>:
    140a:	80 91 23 02 	lds	r24, 0x0223
    140e:	90 91 24 02 	lds	r25, 0x0224
    1412:	89 2b       	or	r24, r25
    1414:	a1 f0       	breq	.+40     	; 0x143e <Event_Init+0x34>
    1416:	f8 94       	cli
    1418:	e0 91 25 02 	lds	r30, 0x0225
    141c:	f0 91 26 02 	lds	r31, 0x0226
    1420:	e3 5f       	subi	r30, 0xF3	; 243
    1422:	fe 4f       	sbci	r31, 0xFE	; 254
    1424:	8a e0       	ldi	r24, 0x0A	; 10
    1426:	80 83       	st	Z, r24
    1428:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    142c:	e0 91 25 02 	lds	r30, 0x0225
    1430:	f0 91 26 02 	lds	r31, 0x0226
    1434:	e2 5f       	subi	r30, 0xF2	; 242
    1436:	fe 4f       	sbci	r31, 0xFE	; 254
    1438:	80 81       	ld	r24, Z
    143a:	91 81       	ldd	r25, Z+1	; 0x01
    143c:	08 95       	ret
    143e:	08 95       	ret

00001440 <Task_Create>:
    1440:	20 91 23 02 	lds	r18, 0x0223
    1444:	30 91 24 02 	lds	r19, 0x0224
    1448:	23 2b       	or	r18, r19
    144a:	f1 f0       	breq	.+60     	; 0x1488 <Task_Create+0x48>
    144c:	f8 94       	cli
    144e:	20 91 25 02 	lds	r18, 0x0225
    1452:	30 91 26 02 	lds	r19, 0x0226
    1456:	f9 01       	movw	r30, r18
    1458:	e3 5f       	subi	r30, 0xF3	; 243
    145a:	fe 4f       	sbci	r31, 0xFE	; 254
    145c:	a1 e0       	ldi	r26, 0x01	; 1
    145e:	a0 83       	st	Z, r26
    1460:	32 97       	sbiw	r30, 0x02	; 2
    1462:	91 83       	std	Z+1, r25	; 0x01
    1464:	80 83       	st	Z, r24
    1466:	36 97       	sbiw	r30, 0x06	; 6
    1468:	71 83       	std	Z+1, r23	; 0x01
    146a:	60 83       	st	Z, r22
    146c:	34 96       	adiw	r30, 0x04	; 4
    146e:	51 83       	std	Z+1, r21	; 0x01
    1470:	40 83       	st	Z, r20
    1472:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    1476:	e0 91 25 02 	lds	r30, 0x0225
    147a:	f0 91 26 02 	lds	r31, 0x0226
    147e:	e2 5f       	subi	r30, 0xF2	; 242
    1480:	fe 4f       	sbci	r31, 0xFE	; 254
    1482:	80 81       	ld	r24, Z
    1484:	91 81       	ldd	r25, Z+1	; 0x01
    1486:	08 95       	ret
    1488:	62 c9       	rjmp	.-3388   	; 0x74e <Kernel_Create_Task>
    148a:	08 95       	ret

0000148c <Task_Next>:
    148c:	80 91 23 02 	lds	r24, 0x0223
    1490:	90 91 24 02 	lds	r25, 0x0224
    1494:	89 2b       	or	r24, r25
    1496:	59 f0       	breq	.+22     	; 0x14ae <Task_Next+0x22>
    1498:	f8 94       	cli
    149a:	e0 91 25 02 	lds	r30, 0x0225
    149e:	f0 91 26 02 	lds	r31, 0x0226
    14a2:	e3 5f       	subi	r30, 0xF3	; 243
    14a4:	fe 4f       	sbci	r31, 0xFE	; 254
    14a6:	82 e0       	ldi	r24, 0x02	; 2
    14a8:	80 83       	st	Z, r24
    14aa:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <Enter_Kernel>
    14ae:	08 95       	ret

000014b0 <setup>:
  * Setup pins and timers
  */
void setup() {
	/** For testing */
	/** pin 47 */
	init_LED_PORTL_pin2();
    14b0:	0e 94 70 01 	call	0x2e0	; 0x2e0 <init_LED_PORTL_pin2>

	/** pin 43 */
	init_LED_PORTL_pin6();
    14b4:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <init_LED_PORTL_pin6>

	/** pin 44 */
	init_LED_PORTL_pin5();
    14b8:	0e 94 76 01 	call	0x2ec	; 0x2ec <init_LED_PORTL_pin5>

	/** pin 49 */
	init_LED_PORTL_pin0();
    14bc:	0e 94 64 01 	call	0x2c8	; 0x2c8 <init_LED_PORTL_pin0>

	/** pin 48 */
	init_LED_PORTL_pin1();
    14c0:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <init_LED_PORTL_pin1>

	/** initialize Timer1 16 bit timer */
	Disable_Interrupt();
    14c4:	f8 94       	cli

	/** Timer 1 */
	TCCR1A = 0;                 /** Set TCCR1A register to 0 */
    14c6:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;                 /** Set TCCR1B register to 0 */
    14ca:	e1 e8       	ldi	r30, 0x81	; 129
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	10 82       	st	Z, r1

	TCNT1 = 0;                  /** Initialize counter to 0 */
    14d0:	10 92 85 00 	sts	0x0085, r1
    14d4:	10 92 84 00 	sts	0x0084, r1

	OCR1A = 624;                /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
    14d8:	80 e7       	ldi	r24, 0x70	; 112
    14da:	92 e0       	ldi	r25, 0x02	; 2
    14dc:	90 93 89 00 	sts	0x0089, r25
    14e0:	80 93 88 00 	sts	0x0088, r24

	TCCR1B |= (1 << WGM12);     /** Turns on CTC mode (TOP is now OCR1A) */
    14e4:	80 81       	ld	r24, Z
    14e6:	88 60       	ori	r24, 0x08	; 8
    14e8:	80 83       	st	Z, r24

	TCCR1B |= (1 << CS12);      /** Prescaler 256 */
    14ea:	80 81       	ld	r24, Z
    14ec:	84 60       	ori	r24, 0x04	; 4
    14ee:	80 83       	st	Z, r24

	TIMSK1 |= (1 << OCIE1A);    /** Enable timer compare interrupt */
    14f0:	ef e6       	ldi	r30, 0x6F	; 111
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	82 60       	ori	r24, 0x02	; 2
    14f8:	80 83       	st	Z, r24

	/** Timer 3 */
	TCCR3A = 0;                 /** Set TCCR0A register to 0 */
    14fa:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0;                 /** Set TCCR0B register to 0 */
    14fe:	e1 e9       	ldi	r30, 0x91	; 145
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	10 82       	st	Z, r1

	TCNT3 = 0;                  /** Initialize counter to 0 */
    1504:	10 92 95 00 	sts	0x0095, r1
    1508:	10 92 94 00 	sts	0x0094, r1

	OCR3A = 62499;              /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
    150c:	83 e2       	ldi	r24, 0x23	; 35
    150e:	94 ef       	ldi	r25, 0xF4	; 244
    1510:	90 93 99 00 	sts	0x0099, r25
    1514:	80 93 98 00 	sts	0x0098, r24

	TCCR3B |= (1 << WGM32);     /** Turns on CTC mode (TOP is now OCR1A) */
    1518:	80 81       	ld	r24, Z
    151a:	88 60       	ori	r24, 0x08	; 8
    151c:	80 83       	st	Z, r24

	TCCR3B |= (1 << CS32);      /** Prescaler 1024 */
    151e:	80 81       	ld	r24, Z
    1520:	84 60       	ori	r24, 0x04	; 4
    1522:	80 83       	st	Z, r24

	TIMSK3 = (1 << OCIE3A);
    1524:	82 e0       	ldi	r24, 0x02	; 2
    1526:	80 93 71 00 	sts	0x0071, r24

	Enable_Interrupt();
    152a:	78 94       	sei
    152c:	08 95       	ret

0000152e <__vector_17>:
}

/**
  * ISR for timer1
  */
ISR(TIMER1_COMPA_vect) {
    152e:	1f 92       	push	r1
    1530:	0f 92       	push	r0
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	0f 92       	push	r0
    1536:	11 24       	eor	r1, r1
    1538:	0b b6       	in	r0, 0x3b	; 59
    153a:	0f 92       	push	r0
    153c:	df 92       	push	r13
    153e:	ef 92       	push	r14
    1540:	ff 92       	push	r15
    1542:	0f 93       	push	r16
    1544:	1f 93       	push	r17
    1546:	2f 93       	push	r18
    1548:	3f 93       	push	r19
    154a:	4f 93       	push	r20
    154c:	5f 93       	push	r21
    154e:	6f 93       	push	r22
    1550:	7f 93       	push	r23
    1552:	8f 93       	push	r24
    1554:	9f 93       	push	r25
    1556:	af 93       	push	r26
    1558:	bf 93       	push	r27
    155a:	ef 93       	push	r30
    155c:	ff 93       	push	r31
    155e:	cf 93       	push	r28
    1560:	df 93       	push	r29
    1562:	00 d0       	rcall	.+0      	; 0x1564 <__vector_17+0x36>
    1564:	1f 92       	push	r1
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
    156a:	80 91 15 02 	lds	r24, 0x0215
    156e:	90 91 16 02 	lds	r25, 0x0216
    1572:	01 97       	sbiw	r24, 0x01	; 1
    1574:	9a 83       	std	Y+2, r25	; 0x02
    1576:	89 83       	std	Y+1, r24	; 0x01
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	9a 81       	ldd	r25, Y+2	; 0x02
    157c:	99 23       	and	r25, r25
    157e:	0c f4       	brge	.+2      	; 0x1582 <__vector_17+0x54>
    1580:	7c c0       	rjmp	.+248    	; 0x167a <__vector_17+0x14c>
		if ((SleepQueue[i]->wakeTickOverflow <= tickOverflowCount) && (SleepQueue[i]->wakeTick <= (TCNT3/625))) {
    1582:	e9 81       	ldd	r30, Y+1	; 0x01
    1584:	fa 81       	ldd	r31, Y+2	; 0x02
    1586:	ee 0f       	add	r30, r30
    1588:	ff 1f       	adc	r31, r31
    158a:	eb 54       	subi	r30, 0x4B	; 75
    158c:	fb 4e       	sbci	r31, 0xEB	; 235
    158e:	01 90       	ld	r0, Z+
    1590:	f0 81       	ld	r31, Z
    1592:	e0 2d       	mov	r30, r0
    1594:	e0 5f       	subi	r30, 0xF0	; 240
    1596:	fe 4f       	sbci	r31, 0xFE	; 254
    1598:	20 81       	ld	r18, Z
    159a:	31 81       	ldd	r19, Z+1	; 0x01
    159c:	80 91 19 02 	lds	r24, 0x0219
    15a0:	90 91 1a 02 	lds	r25, 0x021A
    15a4:	82 17       	cp	r24, r18
    15a6:	93 07       	cpc	r25, r19
    15a8:	08 f4       	brcc	.+2      	; 0x15ac <__vector_17+0x7e>
    15aa:	67 c0       	rjmp	.+206    	; 0x167a <__vector_17+0x14c>
    15ac:	e9 81       	ldd	r30, Y+1	; 0x01
    15ae:	fa 81       	ldd	r31, Y+2	; 0x02
    15b0:	ee 0f       	add	r30, r30
    15b2:	ff 1f       	adc	r31, r31
    15b4:	eb 54       	subi	r30, 0x4B	; 75
    15b6:	fb 4e       	sbci	r31, 0xEB	; 235
    15b8:	01 90       	ld	r0, Z+
    15ba:	f0 81       	ld	r31, Z
    15bc:	e0 2d       	mov	r30, r0
    15be:	ee 5e       	subi	r30, 0xEE	; 238
    15c0:	fe 4f       	sbci	r31, 0xFE	; 254
    15c2:	20 81       	ld	r18, Z
    15c4:	31 81       	ldd	r19, Z+1	; 0x01
    15c6:	80 91 94 00 	lds	r24, 0x0094
    15ca:	90 91 95 00 	lds	r25, 0x0095
    15ce:	61 e7       	ldi	r22, 0x71	; 113
    15d0:	72 e0       	ldi	r23, 0x02	; 2
    15d2:	b3 d4       	rcall	.+2406   	; 0x1f3a <__udivmodhi4>
    15d4:	62 17       	cp	r22, r18
    15d6:	73 07       	cpc	r23, r19
    15d8:	58 f5       	brcc	.+86     	; 0x1630 <__vector_17+0x102>
    15da:	4f c0       	rjmp	.+158    	; 0x167a <__vector_17+0x14c>
    15dc:	e9 81       	ldd	r30, Y+1	; 0x01
    15de:	fa 81       	ldd	r31, Y+2	; 0x02
    15e0:	ee 0f       	add	r30, r30
    15e2:	ff 1f       	adc	r31, r31
    15e4:	eb 54       	subi	r30, 0x4B	; 75
    15e6:	fb 4e       	sbci	r31, 0xEB	; 235
    15e8:	01 90       	ld	r0, Z+
    15ea:	f0 81       	ld	r31, Z
    15ec:	e0 2d       	mov	r30, r0
    15ee:	e0 5f       	subi	r30, 0xF0	; 240
    15f0:	fe 4f       	sbci	r31, 0xFE	; 254
    15f2:	20 81       	ld	r18, Z
    15f4:	31 81       	ldd	r19, Z+1	; 0x01
    15f6:	80 91 19 02 	lds	r24, 0x0219
    15fa:	90 91 1a 02 	lds	r25, 0x021A
    15fe:	82 17       	cp	r24, r18
    1600:	93 07       	cpc	r25, r19
    1602:	d8 f1       	brcs	.+118    	; 0x167a <__vector_17+0x14c>
    1604:	e9 81       	ldd	r30, Y+1	; 0x01
    1606:	fa 81       	ldd	r31, Y+2	; 0x02
    1608:	ee 0f       	add	r30, r30
    160a:	ff 1f       	adc	r31, r31
    160c:	eb 54       	subi	r30, 0x4B	; 75
    160e:	fb 4e       	sbci	r31, 0xEB	; 235
    1610:	01 90       	ld	r0, Z+
    1612:	f0 81       	ld	r31, Z
    1614:	e0 2d       	mov	r30, r0
    1616:	ee 5e       	subi	r30, 0xEE	; 238
    1618:	fe 4f       	sbci	r31, 0xFE	; 254
    161a:	20 81       	ld	r18, Z
    161c:	31 81       	ldd	r19, Z+1	; 0x01
    161e:	f7 01       	movw	r30, r14
    1620:	80 81       	ld	r24, Z
    1622:	91 81       	ldd	r25, Z+1	; 0x01
    1624:	b8 01       	movw	r22, r16
    1626:	89 d4       	rcall	.+2322   	; 0x1f3a <__udivmodhi4>
    1628:	62 17       	cp	r22, r18
    162a:	73 07       	cpc	r23, r19
    162c:	50 f4       	brcc	.+20     	; 0x1642 <__vector_17+0x114>
    162e:	25 c0       	rjmp	.+74     	; 0x167a <__vector_17+0x14c>
			volatile PD *p = dequeue(&SleepQueue, &SQCount);
			p->state = READY;
    1630:	dd 24       	eor	r13, r13
    1632:	d3 94       	inc	r13
ISR(TIMER1_COMPA_vect) {

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
		if ((SleepQueue[i]->wakeTickOverflow <= tickOverflowCount) && (SleepQueue[i]->wakeTick <= (TCNT3/625))) {
    1634:	0f 2e       	mov	r0, r31
    1636:	f4 e9       	ldi	r31, 0x94	; 148
    1638:	ef 2e       	mov	r14, r31
    163a:	f1 2c       	mov	r15, r1
    163c:	f0 2d       	mov	r31, r0
    163e:	01 e7       	ldi	r16, 0x71	; 113
    1640:	12 e0       	ldi	r17, 0x02	; 2
			volatile PD *p = dequeue(&SleepQueue, &SQCount);
    1642:	65 e1       	ldi	r22, 0x15	; 21
    1644:	72 e0       	ldi	r23, 0x02	; 2
    1646:	85 eb       	ldi	r24, 0xB5	; 181
    1648:	94 e1       	ldi	r25, 0x14	; 20
    164a:	1c d2       	rcall	.+1080   	; 0x1a84 <dequeue>
    164c:	9c 83       	std	Y+4, r25	; 0x04
    164e:	8b 83       	std	Y+3, r24	; 0x03
			p->state = READY;
    1650:	fc 01       	movw	r30, r24
    1652:	ec 5f       	subi	r30, 0xFC	; 252
    1654:	fe 4f       	sbci	r31, 0xFE	; 254
    1656:	d0 82       	st	Z, r13
			enqueueRQ(&p, &ReadyQueue, &RQCount);
    1658:	47 e1       	ldi	r20, 0x17	; 23
    165a:	52 e0       	ldi	r21, 0x02	; 2
    165c:	65 ed       	ldi	r22, 0xD5	; 213
    165e:	74 e1       	ldi	r23, 0x14	; 20
    1660:	ce 01       	movw	r24, r28
    1662:	03 96       	adiw	r24, 0x03	; 3
    1664:	ec d0       	rcall	.+472    	; 0x183e <enqueueRQ>
  */
ISR(TIMER1_COMPA_vect) {

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	9a 81       	ldd	r25, Y+2	; 0x02
    166a:	01 97       	sbiw	r24, 0x01	; 1
    166c:	9a 83       	std	Y+2, r25	; 0x02
    166e:	89 83       	std	Y+1, r24	; 0x01
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	9a 81       	ldd	r25, Y+2	; 0x02
    1674:	99 23       	and	r25, r25
    1676:	0c f0       	brlt	.+2      	; 0x167a <__vector_17+0x14c>
    1678:	b1 cf       	rjmp	.-158    	; 0x15dc <__vector_17+0xae>
		else {
			break;
		}
	}

	Task_Next();
    167a:	08 df       	rcall	.-496    	; 0x148c <Task_Next>
}
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	df 91       	pop	r29
    1686:	cf 91       	pop	r28
    1688:	ff 91       	pop	r31
    168a:	ef 91       	pop	r30
    168c:	bf 91       	pop	r27
    168e:	af 91       	pop	r26
    1690:	9f 91       	pop	r25
    1692:	8f 91       	pop	r24
    1694:	7f 91       	pop	r23
    1696:	6f 91       	pop	r22
    1698:	5f 91       	pop	r21
    169a:	4f 91       	pop	r20
    169c:	3f 91       	pop	r19
    169e:	2f 91       	pop	r18
    16a0:	1f 91       	pop	r17
    16a2:	0f 91       	pop	r16
    16a4:	ff 90       	pop	r15
    16a6:	ef 90       	pop	r14
    16a8:	df 90       	pop	r13
    16aa:	0f 90       	pop	r0
    16ac:	0b be       	out	0x3b, r0	; 59
    16ae:	0f 90       	pop	r0
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	0f 90       	pop	r0
    16b4:	1f 90       	pop	r1
    16b6:	18 95       	reti

000016b8 <__vector_32>:

/**
  * ISR for timer3
  */
ISR(TIMER3_COMPA_vect) {
    16b8:	1f 92       	push	r1
    16ba:	0f 92       	push	r0
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	0f 92       	push	r0
    16c0:	11 24       	eor	r1, r1
    16c2:	8f 93       	push	r24
    16c4:	9f 93       	push	r25
	tickOverflowCount += 1;
    16c6:	80 91 19 02 	lds	r24, 0x0219
    16ca:	90 91 1a 02 	lds	r25, 0x021A
    16ce:	01 96       	adiw	r24, 0x01	; 1
    16d0:	90 93 1a 02 	sts	0x021A, r25
    16d4:	80 93 19 02 	sts	0x0219, r24
}
    16d8:	9f 91       	pop	r25
    16da:	8f 91       	pop	r24
    16dc:	0f 90       	pop	r0
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	0f 90       	pop	r0
    16e2:	1f 90       	pop	r1
    16e4:	18 95       	reti

000016e6 <main>:

/**
  * This function boots the OS and creates the first task: a_main
  */
void main() {
	setup();
    16e6:	e4 de       	rcall	.-568    	; 0x14b0 <setup>
	
	OS_Init();
    16e8:	8e d8       	rcall	.-3812   	; 0x806 <OS_Init>
	Task_Create(a_main, 0, 1);
    16ea:	41 e0       	ldi	r20, 0x01	; 1
    16ec:	50 e0       	ldi	r21, 0x00	; 0
    16ee:	60 e0       	ldi	r22, 0x00	; 0
    16f0:	70 e0       	ldi	r23, 0x00	; 0
    16f2:	8d ef       	ldi	r24, 0xFD	; 253
    16f4:	91 e0       	ldi	r25, 0x01	; 1
    16f6:	a4 de       	rcall	.-696    	; 0x1440 <Task_Create>
	OS_Start();
    16f8:	33 ca       	rjmp	.-2970   	; 0xb60 <OS_Start>
    16fa:	08 95       	ret

000016fc <enqueueWQ>:
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
}

void enqueueWQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    16fc:	cf 93       	push	r28
    16fe:	df 93       	push	r29
    1700:	ea 01       	movw	r28, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    1702:	28 81       	ld	r18, Y
    1704:	39 81       	ldd	r19, Y+1	; 0x01
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
}

void enqueueWQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    1706:	2f 30       	cpi	r18, 0x0F	; 15
    1708:	31 05       	cpc	r19, r1
    170a:	29 f1       	breq	.+74     	; 0x1756 <enqueueWQ+0x5a>
        return;
    }

    int i = (*QCount) - 1;
    170c:	e8 81       	ld	r30, Y
    170e:	f9 81       	ldd	r31, Y+1	; 0x01
    1710:	9f 01       	movw	r18, r30
    1712:	21 50       	subi	r18, 0x01	; 1
    1714:	31 09       	sbc	r19, r1

    while(i >= 0) {
    1716:	72 f0       	brmi	.+28     	; 0x1734 <enqueueWQ+0x38>
    1718:	ee 0f       	add	r30, r30
    171a:	ff 1f       	adc	r31, r31
    171c:	e6 0f       	add	r30, r22
    171e:	f7 1f       	adc	r31, r23
    1720:	db 01       	movw	r26, r22
        Queue[i+1] = Queue[i];
    1722:	32 91       	ld	r19, -Z
    1724:	22 91       	ld	r18, -Z
    1726:	33 83       	std	Z+3, r19	; 0x03
    1728:	22 83       	std	Z+2, r18	; 0x02
        return;
    }

    int i = (*QCount) - 1;

    while(i >= 0) {
    172a:	ea 17       	cp	r30, r26
    172c:	fb 07       	cpc	r31, r27
    172e:	c9 f7       	brne	.-14     	; 0x1722 <enqueueWQ+0x26>
        Queue[i+1] = Queue[i];
        i--;
    1730:	2f ef       	ldi	r18, 0xFF	; 255
    1732:	3f ef       	ldi	r19, 0xFF	; 255
    }

    Queue[i+1] = *p;
    1734:	fc 01       	movw	r30, r24
    1736:	80 81       	ld	r24, Z
    1738:	91 81       	ldd	r25, Z+1	; 0x01
    173a:	2f 5f       	subi	r18, 0xFF	; 255
    173c:	3f 4f       	sbci	r19, 0xFF	; 255
    173e:	22 0f       	add	r18, r18
    1740:	33 1f       	adc	r19, r19
    1742:	fb 01       	movw	r30, r22
    1744:	e2 0f       	add	r30, r18
    1746:	f3 1f       	adc	r31, r19
    1748:	91 83       	std	Z+1, r25	; 0x01
    174a:	80 83       	st	Z, r24
    (*QCount)++;
    174c:	88 81       	ld	r24, Y
    174e:	99 81       	ldd	r25, Y+1	; 0x01
    1750:	01 96       	adiw	r24, 0x01	; 1
    1752:	99 83       	std	Y+1, r25	; 0x01
    1754:	88 83       	st	Y, r24
}
    1756:	df 91       	pop	r29
    1758:	cf 91       	pop	r28
    175a:	08 95       	ret

0000175c <enqueueSQ>:

void enqueueSQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    175c:	cf 92       	push	r12
    175e:	df 92       	push	r13
    1760:	ef 92       	push	r14
    1762:	ff 92       	push	r15
    1764:	0f 93       	push	r16
    1766:	1f 93       	push	r17
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    176c:	ea 01       	movw	r28, r20
    176e:	28 81       	ld	r18, Y
    1770:	39 81       	ldd	r19, Y+1	; 0x01
    Queue[i+1] = *p;
    (*QCount)++;
}

void enqueueSQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    1772:	2f 30       	cpi	r18, 0x0F	; 15
    1774:	31 05       	cpc	r19, r1
    1776:	09 f4       	brne	.+2      	; 0x177a <enqueueSQ+0x1e>
    1778:	59 c0       	rjmp	.+178    	; 0x182c <enqueueSQ+0xd0>
        return;
    }

    int i = (*QCount) - 1;
    177a:	a8 81       	ld	r26, Y
    177c:	b9 81       	ldd	r27, Y+1	; 0x01
    177e:	11 97       	sbiw	r26, 0x01	; 1

    volatile PD *new = *p;
    1780:	fc 01       	movw	r30, r24
    1782:	c0 80       	ld	r12, Z
    1784:	d1 80       	ldd	r13, Z+1	; 0x01

    volatile PD *temp = Queue[i];
    1786:	fd 01       	movw	r30, r26
    1788:	ee 0f       	add	r30, r30
    178a:	ff 1f       	adc	r31, r31
    178c:	eb 01       	movw	r28, r22
    178e:	ce 0f       	add	r28, r30
    1790:	df 1f       	adc	r29, r31
    1792:	28 81       	ld	r18, Y
    1794:	39 81       	ldd	r19, Y+1	; 0x01

    while(i >= 0 && ((new->wakeTickOverflow > temp->wakeTickOverflow) || ((new->wakeTickOverflow >= temp->wakeTickOverflow) && (new->wakeTick >= temp->wakeTick)))) {
    1796:	bb 23       	and	r27, r27
    1798:	cc f1       	brlt	.+114    	; 0x180c <enqueueSQ+0xb0>
    179a:	fe 01       	movw	r30, r28
    179c:	76 01       	movw	r14, r12
    179e:	c0 ef       	ldi	r28, 0xF0	; 240
    17a0:	ec 1a       	sub	r14, r28
    17a2:	ce ef       	ldi	r28, 0xFE	; 254
    17a4:	fc 0a       	sbc	r15, r28
    17a6:	de ee       	ldi	r29, 0xEE	; 238
    17a8:	cd 1a       	sub	r12, r29
    17aa:	de ef       	ldi	r29, 0xFE	; 254
    17ac:	dd 0a       	sbc	r13, r29
    17ae:	0b c0       	rjmp	.+22     	; 0x17c6 <enqueueSQ+0x6a>
        Queue[i+1] = Queue[i];
    17b0:	20 81       	ld	r18, Z
    17b2:	31 81       	ldd	r19, Z+1	; 0x01
    17b4:	33 83       	std	Z+3, r19	; 0x03
    17b6:	22 83       	std	Z+2, r18	; 0x02
        i--;
    17b8:	11 97       	sbiw	r26, 0x01	; 1
        temp = Queue[i];
    17ba:	32 91       	ld	r19, -Z
    17bc:	22 91       	ld	r18, -Z

    volatile PD *new = *p;

    volatile PD *temp = Queue[i];

    while(i >= 0 && ((new->wakeTickOverflow > temp->wakeTickOverflow) || ((new->wakeTickOverflow >= temp->wakeTickOverflow) && (new->wakeTick >= temp->wakeTick)))) {
    17be:	af 3f       	cpi	r26, 0xFF	; 255
    17c0:	cf ef       	ldi	r28, 0xFF	; 255
    17c2:	bc 07       	cpc	r27, r28
    17c4:	19 f1       	breq	.+70     	; 0x180c <enqueueSQ+0xb0>
    17c6:	e7 01       	movw	r28, r14
    17c8:	08 81       	ld	r16, Y
    17ca:	19 81       	ldd	r17, Y+1	; 0x01
    17cc:	e9 01       	movw	r28, r18
    17ce:	c0 5f       	subi	r28, 0xF0	; 240
    17d0:	de 4f       	sbci	r29, 0xFE	; 254
    17d2:	09 90       	ld	r0, Y+
    17d4:	d8 81       	ld	r29, Y
    17d6:	c0 2d       	mov	r28, r0
    17d8:	c0 17       	cp	r28, r16
    17da:	d1 07       	cpc	r29, r17
    17dc:	48 f3       	brcs	.-46     	; 0x17b0 <enqueueSQ+0x54>
    17de:	e7 01       	movw	r28, r14
    17e0:	08 81       	ld	r16, Y
    17e2:	19 81       	ldd	r17, Y+1	; 0x01
    17e4:	e9 01       	movw	r28, r18
    17e6:	c0 5f       	subi	r28, 0xF0	; 240
    17e8:	de 4f       	sbci	r29, 0xFE	; 254
    17ea:	09 90       	ld	r0, Y+
    17ec:	d8 81       	ld	r29, Y
    17ee:	c0 2d       	mov	r28, r0
    17f0:	0c 17       	cp	r16, r28
    17f2:	1d 07       	cpc	r17, r29
    17f4:	58 f0       	brcs	.+22     	; 0x180c <enqueueSQ+0xb0>
    17f6:	e6 01       	movw	r28, r12
    17f8:	08 81       	ld	r16, Y
    17fa:	19 81       	ldd	r17, Y+1	; 0x01
    17fc:	2e 5e       	subi	r18, 0xEE	; 238
    17fe:	3e 4f       	sbci	r19, 0xFE	; 254
    1800:	e9 01       	movw	r28, r18
    1802:	28 81       	ld	r18, Y
    1804:	39 81       	ldd	r19, Y+1	; 0x01
    1806:	02 17       	cp	r16, r18
    1808:	13 07       	cpc	r17, r19
    180a:	90 f6       	brcc	.-92     	; 0x17b0 <enqueueSQ+0x54>
        Queue[i+1] = Queue[i];
        i--;
        temp = Queue[i];
    }

    Queue[i+1] = *p;
    180c:	fc 01       	movw	r30, r24
    180e:	80 81       	ld	r24, Z
    1810:	91 81       	ldd	r25, Z+1	; 0x01
    1812:	11 96       	adiw	r26, 0x01	; 1
    1814:	aa 0f       	add	r26, r26
    1816:	bb 1f       	adc	r27, r27
    1818:	a6 0f       	add	r26, r22
    181a:	b7 1f       	adc	r27, r23
    181c:	8d 93       	st	X+, r24
    181e:	9c 93       	st	X, r25
    (*QCount)++;
    1820:	ea 01       	movw	r28, r20
    1822:	88 81       	ld	r24, Y
    1824:	99 81       	ldd	r25, Y+1	; 0x01
    1826:	01 96       	adiw	r24, 0x01	; 1
    1828:	99 83       	std	Y+1, r25	; 0x01
    182a:	88 83       	st	Y, r24
}
    182c:	df 91       	pop	r29
    182e:	cf 91       	pop	r28
    1830:	1f 91       	pop	r17
    1832:	0f 91       	pop	r16
    1834:	ff 90       	pop	r15
    1836:	ef 90       	pop	r14
    1838:	df 90       	pop	r13
    183a:	cf 90       	pop	r12
    183c:	08 95       	ret

0000183e <enqueueRQ>:

/*
 *  Insert into the queue sorted by priority
 */
void enqueueRQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    183e:	cf 92       	push	r12
    1840:	df 92       	push	r13
    1842:	ef 92       	push	r14
    1844:	ff 92       	push	r15
    1846:	0f 93       	push	r16
    1848:	1f 93       	push	r17
    184a:	cf 93       	push	r28
    184c:	df 93       	push	r29
    184e:	6a 01       	movw	r12, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    1850:	ea 01       	movw	r28, r20
    1852:	28 81       	ld	r18, Y
    1854:	39 81       	ldd	r19, Y+1	; 0x01

/*
 *  Insert into the queue sorted by priority
 */
void enqueueRQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    1856:	2f 30       	cpi	r18, 0x0F	; 15
    1858:	31 05       	cpc	r19, r1
    185a:	09 f4       	brne	.+2      	; 0x185e <enqueueRQ+0x20>
    185c:	4a c0       	rjmp	.+148    	; 0x18f2 <enqueueRQ+0xb4>
        return;
    }

    int i = (*QCount) - 1;
    185e:	28 81       	ld	r18, Y
    1860:	39 81       	ldd	r19, Y+1	; 0x01
    1862:	21 50       	subi	r18, 0x01	; 1
    1864:	31 09       	sbc	r19, r1

    volatile PD *new = *p;
    1866:	fc 01       	movw	r30, r24
    1868:	00 81       	ld	r16, Z
    186a:	11 81       	ldd	r17, Z+1	; 0x01

    volatile PD *temp = Queue[i];
    186c:	f9 01       	movw	r30, r18
    186e:	ee 0f       	add	r30, r30
    1870:	ff 1f       	adc	r31, r31
    1872:	db 01       	movw	r26, r22
    1874:	ae 0f       	add	r26, r30
    1876:	bf 1f       	adc	r27, r31
    1878:	4d 91       	ld	r20, X+
    187a:	5c 91       	ld	r21, X

    while(i >= 0 && (new->inheritedPy >= temp->inheritedPy)) {
    187c:	33 23       	and	r19, r19
    187e:	3c f1       	brlt	.+78     	; 0x18ce <enqueueRQ+0x90>
    1880:	d8 01       	movw	r26, r16
    1882:	a9 5f       	subi	r26, 0xF9	; 249
    1884:	be 4f       	sbci	r27, 0xFE	; 254
    1886:	ed 90       	ld	r14, X+
    1888:	fc 90       	ld	r15, X
    188a:	da 01       	movw	r26, r20
    188c:	a9 5f       	subi	r26, 0xF9	; 249
    188e:	be 4f       	sbci	r27, 0xFE	; 254
    1890:	4d 91       	ld	r20, X+
    1892:	5c 91       	ld	r21, X
    1894:	e4 16       	cp	r14, r20
    1896:	f5 06       	cpc	r15, r21
    1898:	d0 f0       	brcs	.+52     	; 0x18ce <enqueueRQ+0x90>
    189a:	e6 0f       	add	r30, r22
    189c:	f7 1f       	adc	r31, r23
    189e:	09 5f       	subi	r16, 0xF9	; 249
    18a0:	1e 4f       	sbci	r17, 0xFE	; 254
        Queue[i+1] = Queue[i];
    18a2:	a0 81       	ld	r26, Z
    18a4:	b1 81       	ldd	r27, Z+1	; 0x01
    18a6:	b3 83       	std	Z+3, r27	; 0x03
    18a8:	a2 83       	std	Z+2, r26	; 0x02
        i--;
    18aa:	21 50       	subi	r18, 0x01	; 1
    18ac:	31 09       	sbc	r19, r1
        temp = Queue[i];
    18ae:	b2 91       	ld	r27, -Z
    18b0:	a2 91       	ld	r26, -Z

    volatile PD *new = *p;

    volatile PD *temp = Queue[i];

    while(i >= 0 && (new->inheritedPy >= temp->inheritedPy)) {
    18b2:	2f 3f       	cpi	r18, 0xFF	; 255
    18b4:	4f ef       	ldi	r20, 0xFF	; 255
    18b6:	34 07       	cpc	r19, r20
    18b8:	51 f0       	breq	.+20     	; 0x18ce <enqueueRQ+0x90>
    18ba:	e8 01       	movw	r28, r16
    18bc:	e8 80       	ld	r14, Y
    18be:	f9 80       	ldd	r15, Y+1	; 0x01
    18c0:	a9 5f       	subi	r26, 0xF9	; 249
    18c2:	be 4f       	sbci	r27, 0xFE	; 254
    18c4:	4d 91       	ld	r20, X+
    18c6:	5c 91       	ld	r21, X
    18c8:	e4 16       	cp	r14, r20
    18ca:	f5 06       	cpc	r15, r21
    18cc:	50 f7       	brcc	.-44     	; 0x18a2 <enqueueRQ+0x64>
        Queue[i+1] = Queue[i];
        i--;
        temp = Queue[i];
    }

    Queue[i+1] = *p;
    18ce:	fc 01       	movw	r30, r24
    18d0:	80 81       	ld	r24, Z
    18d2:	91 81       	ldd	r25, Z+1	; 0x01
    18d4:	2f 5f       	subi	r18, 0xFF	; 255
    18d6:	3f 4f       	sbci	r19, 0xFF	; 255
    18d8:	22 0f       	add	r18, r18
    18da:	33 1f       	adc	r19, r19
    18dc:	fb 01       	movw	r30, r22
    18de:	e2 0f       	add	r30, r18
    18e0:	f3 1f       	adc	r31, r19
    18e2:	91 83       	std	Z+1, r25	; 0x01
    18e4:	80 83       	st	Z, r24
    (*QCount)++;
    18e6:	e6 01       	movw	r28, r12
    18e8:	88 81       	ld	r24, Y
    18ea:	99 81       	ldd	r25, Y+1	; 0x01
    18ec:	01 96       	adiw	r24, 0x01	; 1
    18ee:	99 83       	std	Y+1, r25	; 0x01
    18f0:	88 83       	st	Y, r24
}
    18f2:	df 91       	pop	r29
    18f4:	cf 91       	pop	r28
    18f6:	1f 91       	pop	r17
    18f8:	0f 91       	pop	r16
    18fa:	ff 90       	pop	r15
    18fc:	ef 90       	pop	r14
    18fe:	df 90       	pop	r13
    1900:	cf 90       	pop	r12
    1902:	08 95       	ret

00001904 <dequeueWQ>:

/*
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {
    1904:	0f 93       	push	r16
    1906:	1f 93       	push	r17
    1908:	cf 93       	push	r28
    190a:	df 93       	push	r29

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    190c:	eb 01       	movw	r28, r22
    190e:	28 81       	ld	r18, Y
    1910:	39 81       	ldd	r19, Y+1	; 0x01
/*
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {

    if(isEmpty(QCount)) {
    1912:	23 2b       	or	r18, r19
    1914:	09 f4       	brne	.+2      	; 0x1918 <dequeueWQ+0x14>
    1916:	54 c0       	rjmp	.+168    	; 0x19c0 <dequeueWQ+0xbc>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
    1918:	28 81       	ld	r18, Y
    191a:	39 81       	ldd	r19, Y+1	; 0x01
    191c:	21 50       	subi	r18, 0x01	; 1
    191e:	31 09       	sbc	r19, r1
    1920:	0a f4       	brpl	.+2      	; 0x1924 <dequeueWQ+0x20>
    1922:	51 c0       	rjmp	.+162    	; 0x19c6 <dequeueWQ+0xc2>
        if(Queue[i]->m == m){
    1924:	e9 01       	movw	r28, r18
    1926:	cc 0f       	add	r28, r28
    1928:	dd 1f       	adc	r29, r29
    192a:	fc 01       	movw	r30, r24
    192c:	ec 0f       	add	r30, r28
    192e:	fd 1f       	adc	r31, r29
    1930:	a0 81       	ld	r26, Z
    1932:	b1 81       	ldd	r27, Z+1	; 0x01
    1934:	fd 01       	movw	r30, r26
    1936:	ec 5e       	subi	r30, 0xEC	; 236
    1938:	fe 4f       	sbci	r31, 0xFE	; 254
    193a:	01 90       	ld	r0, Z+
    193c:	f0 81       	ld	r31, Z
    193e:	e0 2d       	mov	r30, r0
    1940:	e4 17       	cp	r30, r20
    1942:	f5 07       	cpc	r31, r21
    1944:	81 f4       	brne	.+32     	; 0x1966 <dequeueWQ+0x62>
    1946:	0a c0       	rjmp	.+20     	; 0x195c <dequeueWQ+0x58>
    1948:	ba 91       	ld	r27, -Y
    194a:	aa 91       	ld	r26, -Y
    194c:	fd 01       	movw	r30, r26
    194e:	ec 5e       	subi	r30, 0xEC	; 236
    1950:	fe 4f       	sbci	r31, 0xFE	; 254
    1952:	00 81       	ld	r16, Z
    1954:	11 81       	ldd	r17, Z+1	; 0x01
    1956:	04 17       	cp	r16, r20
    1958:	15 07       	cpc	r17, r21
    195a:	39 f4       	brne	.+14     	; 0x196a <dequeueWQ+0x66>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
    195c:	10 97       	sbiw	r26, 0x00	; 0
    195e:	59 f4       	brne	.+22     	; 0x1976 <dequeueWQ+0x72>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	32 c0       	rjmp	.+100    	; 0x19ca <dequeueWQ+0xc6>
    1966:	c8 0f       	add	r28, r24
    1968:	d9 1f       	adc	r29, r25
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
    196a:	21 50       	subi	r18, 0x01	; 1
    196c:	31 09       	sbc	r19, r1
    196e:	60 f7       	brcc	.-40     	; 0x1948 <dequeueWQ+0x44>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	2a c0       	rjmp	.+84     	; 0x19ca <dequeueWQ+0xc6>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i<(*QCount)-1) {
    1976:	eb 01       	movw	r28, r22
    1978:	48 81       	ld	r20, Y
    197a:	59 81       	ldd	r21, Y+1	; 0x01
    197c:	41 50       	subi	r20, 0x01	; 1
    197e:	51 09       	sbc	r21, r1
    1980:	24 17       	cp	r18, r20
    1982:	35 07       	cpc	r19, r21
    1984:	a4 f4       	brge	.+40     	; 0x19ae <dequeueWQ+0xaa>
    1986:	a9 01       	movw	r20, r18
    1988:	44 0f       	add	r20, r20
    198a:	55 1f       	adc	r21, r21
    198c:	fc 01       	movw	r30, r24
    198e:	e4 0f       	add	r30, r20
    1990:	f5 1f       	adc	r31, r21
            Queue[i] = Queue[i+1];
    1992:	82 81       	ldd	r24, Z+2	; 0x02
    1994:	93 81       	ldd	r25, Z+3	; 0x03
    1996:	81 93       	st	Z+, r24
    1998:	91 93       	st	Z+, r25
            i++;
    199a:	2f 5f       	subi	r18, 0xFF	; 255
    199c:	3f 4f       	sbci	r19, 0xFF	; 255
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i<(*QCount)-1) {
    199e:	eb 01       	movw	r28, r22
    19a0:	48 81       	ld	r20, Y
    19a2:	59 81       	ldd	r21, Y+1	; 0x01
    19a4:	41 50       	subi	r20, 0x01	; 1
    19a6:	51 09       	sbc	r21, r1
    19a8:	24 17       	cp	r18, r20
    19aa:	35 07       	cpc	r19, r21
    19ac:	94 f3       	brlt	.-28     	; 0x1992 <dequeueWQ+0x8e>
            Queue[i] = Queue[i+1];
            i++;
        }
        (*QCount)--;
    19ae:	fb 01       	movw	r30, r22
    19b0:	80 81       	ld	r24, Z
    19b2:	91 81       	ldd	r25, Z+1	; 0x01
    19b4:	01 97       	sbiw	r24, 0x01	; 1
    19b6:	91 83       	std	Z+1, r25	; 0x01
    19b8:	80 83       	st	Z, r24

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
        if(Queue[i]->m == m){
            result = Queue[i];
    19ba:	8a 2f       	mov	r24, r26
    19bc:	9b 2f       	mov	r25, r27
    19be:	05 c0       	rjmp	.+10     	; 0x19ca <dequeueWQ+0xc6>
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {

    if(isEmpty(QCount)) {
        return NULL;
    19c0:	80 e0       	ldi	r24, 0x00	; 0
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	02 c0       	rjmp	.+4      	; 0x19ca <dequeueWQ+0xc6>
            i++;
        }
        (*QCount)--;
    }

    return result;
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	90 e0       	ldi	r25, 0x00	; 0
}
    19ca:	df 91       	pop	r29
    19cc:	cf 91       	pop	r28
    19ce:	1f 91       	pop	r17
    19d0:	0f 91       	pop	r16
    19d2:	08 95       	ret

000019d4 <dequeueRQ>:

/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {
    19d4:	cf 93       	push	r28
    19d6:	df 93       	push	r29
    19d8:	eb 01       	movw	r28, r22

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    19da:	28 81       	ld	r18, Y
    19dc:	39 81       	ldd	r19, Y+1	; 0x01
/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
    19de:	23 2b       	or	r18, r19
    19e0:	09 f4       	brne	.+2      	; 0x19e4 <dequeueRQ+0x10>
    19e2:	48 c0       	rjmp	.+144    	; 0x1a74 <dequeueRQ+0xa0>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
    19e4:	e8 81       	ld	r30, Y
    19e6:	f9 81       	ldd	r31, Y+1	; 0x01
    19e8:	9f 01       	movw	r18, r30
    19ea:	21 50       	subi	r18, 0x01	; 1
    19ec:	31 09       	sbc	r19, r1
    19ee:	0a f4       	brpl	.+2      	; 0x19f2 <dequeueRQ+0x1e>
    19f0:	44 c0       	rjmp	.+136    	; 0x1a7a <dequeueRQ+0xa6>
    19f2:	ee 0f       	add	r30, r30
    19f4:	ff 1f       	adc	r31, r31
    19f6:	e8 0f       	add	r30, r24
    19f8:	f9 1f       	adc	r31, r25
        if((Queue[i]->suspended == 0) && (Queue[i]->state == READY)) {
    19fa:	52 91       	ld	r21, -Z
    19fc:	42 91       	ld	r20, -Z
    19fe:	da 01       	movw	r26, r20
    1a00:	a6 5e       	subi	r26, 0xE6	; 230
    1a02:	be 4f       	sbci	r27, 0xFE	; 254
    1a04:	6d 91       	ld	r22, X+
    1a06:	7c 91       	ld	r23, X
    1a08:	11 97       	sbiw	r26, 0x01	; 1
    1a0a:	67 2b       	or	r22, r23
    1a0c:	59 f4       	brne	.+22     	; 0x1a24 <dequeueRQ+0x50>
    1a0e:	56 97       	sbiw	r26, 0x16	; 22
    1a10:	6c 91       	ld	r22, X
    1a12:	61 30       	cpi	r22, 0x01	; 1
    1a14:	39 f4       	brne	.+14     	; 0x1a24 <dequeueRQ+0x50>
    1a16:	f9 01       	movw	r30, r18
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
    1a18:	41 15       	cp	r20, r1
    1a1a:	51 05       	cpc	r21, r1
    1a1c:	49 f4       	brne	.+18     	; 0x1a30 <dequeueRQ+0x5c>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	2d c0       	rjmp	.+90     	; 0x1a7e <dequeueRQ+0xaa>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
    1a24:	21 50       	subi	r18, 0x01	; 1
    1a26:	31 09       	sbc	r19, r1
    1a28:	40 f7       	brcc	.-48     	; 0x19fa <dequeueRQ+0x26>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	27 c0       	rjmp	.+78     	; 0x1a7e <dequeueRQ+0xaa>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i < (*QCount)-1) {
    1a30:	68 81       	ld	r22, Y
    1a32:	79 81       	ldd	r23, Y+1	; 0x01
    1a34:	61 50       	subi	r22, 0x01	; 1
    1a36:	71 09       	sbc	r23, r1
    1a38:	26 17       	cp	r18, r22
    1a3a:	37 07       	cpc	r19, r23
    1a3c:	9c f4       	brge	.+38     	; 0x1a64 <dequeueRQ+0x90>
    1a3e:	ee 0f       	add	r30, r30
    1a40:	ff 1f       	adc	r31, r31
    1a42:	dc 01       	movw	r26, r24
    1a44:	ae 0f       	add	r26, r30
    1a46:	bf 1f       	adc	r27, r31
            Queue[i] = Queue[i+1];
    1a48:	12 96       	adiw	r26, 0x02	; 2
    1a4a:	8d 91       	ld	r24, X+
    1a4c:	9c 91       	ld	r25, X
    1a4e:	13 97       	sbiw	r26, 0x03	; 3
    1a50:	8d 93       	st	X+, r24
    1a52:	9d 93       	st	X+, r25
            i++;
    1a54:	2f 5f       	subi	r18, 0xFF	; 255
    1a56:	3f 4f       	sbci	r19, 0xFF	; 255
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i < (*QCount)-1) {
    1a58:	e8 81       	ld	r30, Y
    1a5a:	f9 81       	ldd	r31, Y+1	; 0x01
    1a5c:	31 97       	sbiw	r30, 0x01	; 1
    1a5e:	2e 17       	cp	r18, r30
    1a60:	3f 07       	cpc	r19, r31
    1a62:	94 f3       	brlt	.-28     	; 0x1a48 <dequeueRQ+0x74>
            Queue[i] = Queue[i+1];
            i++;
        }
        (*QCount)--;
    1a64:	88 81       	ld	r24, Y
    1a66:	99 81       	ldd	r25, Y+1	; 0x01
    1a68:	01 97       	sbiw	r24, 0x01	; 1
    1a6a:	99 83       	std	Y+1, r25	; 0x01
    1a6c:	88 83       	st	Y, r24
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
        if((Queue[i]->suspended == 0) && (Queue[i]->state == READY)) {
    1a6e:	84 2f       	mov	r24, r20
    1a70:	95 2f       	mov	r25, r21
    1a72:	05 c0       	rjmp	.+10     	; 0x1a7e <dequeueRQ+0xaa>
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
        return NULL;
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	02 c0       	rjmp	.+4      	; 0x1a7e <dequeueRQ+0xaa>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
}
    1a7e:	df 91       	pop	r29
    1a80:	cf 91       	pop	r28
    1a82:	08 95       	ret

00001a84 <dequeue>:

/*
 *  Return the first element of the queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
    1a84:	db 01       	movw	r26, r22

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    1a86:	2d 91       	ld	r18, X+
    1a88:	3c 91       	ld	r19, X
    1a8a:	11 97       	sbiw	r26, 0x01	; 1
/*
 *  Return the first element of the queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
    1a8c:	23 2b       	or	r18, r19
    1a8e:	a9 f0       	breq	.+42     	; 0x1aba <dequeue+0x36>
        return;
    }

    volatile PD *result = (Queue[(*QCount)-1]);
    1a90:	2d 91       	ld	r18, X+
    1a92:	3c 91       	ld	r19, X
    1a94:	11 97       	sbiw	r26, 0x01	; 1
    1a96:	f9 01       	movw	r30, r18
    1a98:	e1 50       	subi	r30, 0x01	; 1
    1a9a:	f0 48       	sbci	r31, 0x80	; 128
    1a9c:	ee 0f       	add	r30, r30
    1a9e:	ff 1f       	adc	r31, r31
    1aa0:	e8 0f       	add	r30, r24
    1aa2:	f9 1f       	adc	r31, r25
    1aa4:	80 81       	ld	r24, Z
    1aa6:	91 81       	ldd	r25, Z+1	; 0x01
    (*QCount)--;
    1aa8:	2d 91       	ld	r18, X+
    1aaa:	3c 91       	ld	r19, X
    1aac:	11 97       	sbiw	r26, 0x01	; 1
    1aae:	21 50       	subi	r18, 0x01	; 1
    1ab0:	31 09       	sbc	r19, r1
    1ab2:	11 96       	adiw	r26, 0x01	; 1
    1ab4:	3c 93       	st	X, r19
    1ab6:	2e 93       	st	-X, r18
    1ab8:	08 95       	ret

    return result;
}
    1aba:	08 95       	ret

00001abc <_get_status>:
	}

	wh = (16 - weight) * 100;
	wh /= 16;
	return wh;
}
    1abc:	2d 98       	cbi	0x05, 5	; 5
    1abe:	8f ef       	ldi	r24, 0xFF	; 255
    1ac0:	04 d1       	rcall	.+520    	; 0x1cca <SPI_Write_Byte>
    1ac2:	2d 9a       	sbi	0x05, 5	; 5
    1ac4:	08 95       	ret

00001ac6 <_set_register>:
    1ac6:	0f 93       	push	r16
    1ac8:	1f 93       	push	r17
    1aca:	cf 93       	push	r28
    1acc:	df 93       	push	r29
    1ace:	8b 01       	movw	r16, r22
    1ad0:	d4 2f       	mov	r29, r20
    1ad2:	2d 98       	cbi	0x05, 5	; 5
    1ad4:	8f 71       	andi	r24, 0x1F	; 31
    1ad6:	80 62       	ori	r24, 0x20	; 32
    1ad8:	f8 d0       	rcall	.+496    	; 0x1cca <SPI_Write_Byte>
    1ada:	c8 2f       	mov	r28, r24
    1adc:	6d 2f       	mov	r22, r29
    1ade:	c8 01       	movw	r24, r16
    1ae0:	e1 d0       	rcall	.+450    	; 0x1ca4 <SPI_Write_Block>
    1ae2:	2d 9a       	sbi	0x05, 5	; 5
    1ae4:	8c 2f       	mov	r24, r28
    1ae6:	df 91       	pop	r29
    1ae8:	cf 91       	pop	r28
    1aea:	1f 91       	pop	r17
    1aec:	0f 91       	pop	r16
    1aee:	08 95       	ret

00001af0 <_get_register>:
    1af0:	0f 93       	push	r16
    1af2:	1f 93       	push	r17
    1af4:	cf 93       	push	r28
    1af6:	df 93       	push	r29
    1af8:	eb 01       	movw	r28, r22
    1afa:	14 2f       	mov	r17, r20
    1afc:	44 23       	and	r20, r20
    1afe:	69 f0       	breq	.+26     	; 0x1b1a <_get_register+0x2a>
    1b00:	fb 01       	movw	r30, r22
    1b02:	2f ef       	ldi	r18, 0xFF	; 255
    1b04:	24 0f       	add	r18, r20
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	2f 5f       	subi	r18, 0xFF	; 255
    1b0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b0c:	26 0f       	add	r18, r22
    1b0e:	37 1f       	adc	r19, r23
    1b10:	9f ef       	ldi	r25, 0xFF	; 255
    1b12:	91 93       	st	Z+, r25
    1b14:	e2 17       	cp	r30, r18
    1b16:	f3 07       	cpc	r31, r19
    1b18:	e1 f7       	brne	.-8      	; 0x1b12 <_get_register+0x22>
    1b1a:	2d 98       	cbi	0x05, 5	; 5
    1b1c:	8f 71       	andi	r24, 0x1F	; 31
    1b1e:	d5 d0       	rcall	.+426    	; 0x1cca <SPI_Write_Byte>
    1b20:	08 2f       	mov	r16, r24
    1b22:	41 2f       	mov	r20, r17
    1b24:	be 01       	movw	r22, r28
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	a5 d0       	rcall	.+330    	; 0x1c76 <SPI_ReadWrite_Block>
    1b2c:	2d 9a       	sbi	0x05, 5	; 5
    1b2e:	80 2f       	mov	r24, r16
    1b30:	df 91       	pop	r29
    1b32:	cf 91       	pop	r28
    1b34:	1f 91       	pop	r17
    1b36:	0f 91       	pop	r16
    1b38:	08 95       	ret

00001b3a <_set_rx_mode>:
    1b3a:	cf 93       	push	r28
    1b3c:	df 93       	push	r29
    1b3e:	1f 92       	push	r1
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
    1b44:	41 e0       	ldi	r20, 0x01	; 1
    1b46:	be 01       	movw	r22, r28
    1b48:	6f 5f       	subi	r22, 0xFF	; 255
    1b4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	d0 df       	rcall	.-96     	; 0x1af0 <_get_register>
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
    1b52:	80 fd       	sbrc	r24, 0
    1b54:	10 c0       	rjmp	.+32     	; 0x1b76 <_set_rx_mode+0x3c>
    1b56:	81 60       	ori	r24, 0x01	; 1
    1b58:	89 83       	std	Y+1, r24	; 0x01
    1b5a:	41 e0       	ldi	r20, 0x01	; 1
    1b5c:	be 01       	movw	r22, r28
    1b5e:	6f 5f       	subi	r22, 0xFF	; 255
    1b60:	7f 4f       	sbci	r23, 0xFF	; 255
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	b0 df       	rcall	.-160    	; 0x1ac6 <_set_register>
    1b66:	85 e1       	ldi	r24, 0x15	; 21
    1b68:	8a 95       	dec	r24
    1b6a:	f1 f7       	brne	.-4      	; 0x1b68 <_set_rx_mode+0x2e>
    1b6c:	00 c0       	rjmp	.+0      	; 0x1b6e <_set_rx_mode+0x34>
    1b6e:	85 e1       	ldi	r24, 0x15	; 21
    1b70:	8a 95       	dec	r24
    1b72:	f1 f7       	brne	.-4      	; 0x1b70 <_set_rx_mode+0x36>
    1b74:	00 c0       	rjmp	.+0      	; 0x1b76 <_set_rx_mode+0x3c>
    1b76:	0f 90       	pop	r0
    1b78:	df 91       	pop	r29
    1b7a:	cf 91       	pop	r28
    1b7c:	08 95       	ret

00001b7e <_reset_pipe0_address>:
    1b7e:	80 91 0a 02 	lds	r24, 0x020A
    1b82:	88 23       	and	r24, r24
    1b84:	29 f0       	breq	.+10     	; 0x1b90 <_reset_pipe0_address+0x12>
    1b86:	45 e0       	ldi	r20, 0x05	; 5
    1b88:	65 e0       	ldi	r22, 0x05	; 5
    1b8a:	72 e0       	ldi	r23, 0x02	; 2
    1b8c:	8a e0       	ldi	r24, 0x0A	; 10
    1b8e:	9b cf       	rjmp	.-202    	; 0x1ac6 <_set_register>
    1b90:	08 95       	ret

00001b92 <__vector_1>:

// Interrupt handler
ISR(INT0_vect)
{
    1b92:	1f 92       	push	r1
    1b94:	0f 92       	push	r0
    1b96:	0f b6       	in	r0, 0x3f	; 63
    1b98:	0f 92       	push	r0
    1b9a:	11 24       	eor	r1, r1
    1b9c:	0b b6       	in	r0, 0x3b	; 59
    1b9e:	0f 92       	push	r0
    1ba0:	2f 93       	push	r18
    1ba2:	3f 93       	push	r19
    1ba4:	4f 93       	push	r20
    1ba6:	5f 93       	push	r21
    1ba8:	6f 93       	push	r22
    1baa:	7f 93       	push	r23
    1bac:	8f 93       	push	r24
    1bae:	9f 93       	push	r25
    1bb0:	af 93       	push	r26
    1bb2:	bf 93       	push	r27
    1bb4:	ef 93       	push	r30
    1bb6:	ff 93       	push	r31
    1bb8:	cf 93       	push	r28
    1bba:	df 93       	push	r29
    1bbc:	1f 92       	push	r1
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;
    uint8_t pipe_number;

    RADIO_CE_LOW();
    1bc2:	2c 98       	cbi	0x05, 4	; 5

    status = _get_status();
    1bc4:	7b df       	rcall	.-266    	; 0x1abc <_get_status>
    1bc6:	89 83       	std	Y+1, r24	; 0x01

    if (status & _BV(RX_DR)) {
    1bc8:	86 ff       	sbrs	r24, 6
    1bca:	04 c0       	rjmp	.+8      	; 0x1bd4 <__vector_1+0x42>
        pipe_number =  (status & 0xE) >> 1;
    1bcc:	8e 70       	andi	r24, 0x0E	; 14
        radio_rxhandler(pipe_number);
    1bce:	86 95       	lsr	r24
    1bd0:	0e 94 52 01 	call	0x2a4	; 0x2a4 <radio_rxhandler>
    }

    // We can get the TX_DS or the MAX_RT interrupt, but not both.
    if (status & _BV(TX_DS)) {
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	85 ff       	sbrs	r24, 5
    1bd8:	1b c0       	rjmp	.+54     	; 0x1c10 <__vector_1+0x7e>
    	// if there's nothing left to transmit, switch back to receive mode.
        transmit_lock = 0;
    1bda:	10 92 19 15 	sts	0x1519, r1
        _reset_pipe0_address();
    1bde:	cf df       	rcall	.-98     	; 0x1b7e <_reset_pipe0_address>
        _set_rx_mode();
    1be0:	ac df       	rcall	.-168    	; 0x1b3a <_set_rx_mode>

        // indicate in the history that a packet was transmitted successfully by appending a 1.
        tx_history <<= 1;
    1be2:	80 91 03 02 	lds	r24, 0x0203
    1be6:	90 91 04 02 	lds	r25, 0x0204
    1bea:	88 0f       	add	r24, r24
    1bec:	99 1f       	adc	r25, r25
    1bee:	90 93 04 02 	sts	0x0204, r25
    1bf2:	80 93 03 02 	sts	0x0203, r24
        tx_history |= 1;
    1bf6:	80 91 03 02 	lds	r24, 0x0203
    1bfa:	90 91 04 02 	lds	r25, 0x0204
    1bfe:	81 60       	ori	r24, 0x01	; 1
    1c00:	90 93 04 02 	sts	0x0204, r25
    1c04:	80 93 03 02 	sts	0x0203, r24
        tx_last_status = RADIO_TX_SUCCESS;
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	80 93 02 02 	sts	0x0202, r24
    1c0e:	14 c0       	rjmp	.+40     	; 0x1c38 <__vector_1+0xa6>
    } else if (status & _BV(MAX_RT)) {
    1c10:	84 ff       	sbrs	r24, 4
    1c12:	12 c0       	rjmp	.+36     	; 0x1c38 <__vector_1+0xa6>
        // enable SPI
       // RADIO_CSN_LOW();


        // flush the failed packet (it stays in the Tx FIFO; we could try to resend it by setting CE high)
        SPI_Write_Byte( FLUSH_TX );
    1c14:	81 ee       	ldi	r24, 0xE1	; 225
    1c16:	59 d0       	rcall	.+178    	; 0x1cca <SPI_Write_Byte>

        // resynch SPI
        //RADIO_CSN_HIGH();

        transmit_lock = 0;
    1c18:	10 92 19 15 	sts	0x1519, r1
        _reset_pipe0_address();
    1c1c:	b0 df       	rcall	.-160    	; 0x1b7e <_reset_pipe0_address>
        _set_rx_mode();
    1c1e:	8d df       	rcall	.-230    	; 0x1b3a <_set_rx_mode>

        // indicate in the history that a packet was dropped by appending a 0.
        tx_history <<= 1;
    1c20:	80 91 03 02 	lds	r24, 0x0203
    1c24:	90 91 04 02 	lds	r25, 0x0204
    1c28:	88 0f       	add	r24, r24
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	90 93 04 02 	sts	0x0204, r25
    1c30:	80 93 03 02 	sts	0x0203, r24
        tx_last_status = RADIO_TX_MAX_RT;
    1c34:	10 92 02 02 	sts	0x0202, r1
    }

    // clear the interrupt flags.
	status = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
    1c38:	80 e7       	ldi	r24, 0x70	; 112
    1c3a:	89 83       	std	Y+1, r24	; 0x01
	_set_register(STATUS, &status, 1);
    1c3c:	41 e0       	ldi	r20, 0x01	; 1
    1c3e:	be 01       	movw	r22, r28
    1c40:	6f 5f       	subi	r22, 0xFF	; 255
    1c42:	7f 4f       	sbci	r23, 0xFF	; 255
    1c44:	87 e0       	ldi	r24, 0x07	; 7
    1c46:	3f df       	rcall	.-386    	; 0x1ac6 <_set_register>

    RADIO_CE_HIGH();
    1c48:	2c 9a       	sbi	0x05, 4	; 5
}
    1c4a:	0f 90       	pop	r0
    1c4c:	df 91       	pop	r29
    1c4e:	cf 91       	pop	r28
    1c50:	ff 91       	pop	r31
    1c52:	ef 91       	pop	r30
    1c54:	bf 91       	pop	r27
    1c56:	af 91       	pop	r26
    1c58:	9f 91       	pop	r25
    1c5a:	8f 91       	pop	r24
    1c5c:	7f 91       	pop	r23
    1c5e:	6f 91       	pop	r22
    1c60:	5f 91       	pop	r21
    1c62:	4f 91       	pop	r20
    1c64:	3f 91       	pop	r19
    1c66:	2f 91       	pop	r18
    1c68:	0f 90       	pop	r0
    1c6a:	0b be       	out	0x3b, r0	; 59
    1c6c:	0f 90       	pop	r0
    1c6e:	0f be       	out	0x3f, r0	; 63
    1c70:	0f 90       	pop	r0
    1c72:	1f 90       	pop	r1
    1c74:	18 95       	reti

00001c76 <SPI_ReadWrite_Block>:
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1c76:	44 23       	and	r20, r20
    1c78:	a1 f0       	breq	.+40     	; 0x1ca2 <SPI_ReadWrite_Block+0x2c>
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	a6 2f       	mov	r26, r22
    1c7e:	b7 2f       	mov	r27, r23
    1c80:	41 50       	subi	r20, 0x01	; 1
    1c82:	24 2f       	mov	r18, r20
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	2f 5f       	subi	r18, 0xFF	; 255
    1c88:	3f 4f       	sbci	r19, 0xFF	; 255
    1c8a:	28 0f       	add	r18, r24
    1c8c:	39 1f       	adc	r19, r25
          SPDR = data[i];
    1c8e:	91 91       	ld	r25, Z+
    1c90:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1c92:	0d b4       	in	r0, 0x2d	; 45
    1c94:	07 fe       	sbrs	r0, 7
    1c96:	fd cf       	rjmp	.-6      	; 0x1c92 <SPI_ReadWrite_Block+0x1c>
          buffer[i] = SPDR;
    1c98:	9e b5       	in	r25, 0x2e	; 46
    1c9a:	9d 93       	st	X+, r25
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1c9c:	e2 17       	cp	r30, r18
    1c9e:	f3 07       	cpc	r31, r19
    1ca0:	b1 f7       	brne	.-20     	; 0x1c8e <SPI_ReadWrite_Block+0x18>
    1ca2:	08 95       	ret

00001ca4 <SPI_Write_Block>:
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1ca4:	66 23       	and	r22, r22
    1ca6:	81 f0       	breq	.+32     	; 0x1cc8 <SPI_Write_Block+0x24>
    1ca8:	fc 01       	movw	r30, r24
    1caa:	61 50       	subi	r22, 0x01	; 1
    1cac:	26 2f       	mov	r18, r22
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	2f 5f       	subi	r18, 0xFF	; 255
    1cb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb4:	28 0f       	add	r18, r24
    1cb6:	39 1f       	adc	r19, r25
          SPDR = data[i];
    1cb8:	91 91       	ld	r25, Z+
    1cba:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1cbc:	0d b4       	in	r0, 0x2d	; 45
    1cbe:	07 fe       	sbrs	r0, 7
    1cc0:	fd cf       	rjmp	.-6      	; 0x1cbc <SPI_Write_Block+0x18>
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1cc2:	e2 17       	cp	r30, r18
    1cc4:	f3 07       	cpc	r31, r19
    1cc6:	c1 f7       	brne	.-16     	; 0x1cb8 <SPI_Write_Block+0x14>
    1cc8:	08 95       	ret

00001cca <SPI_Write_Byte>:
    }
}

uint8_t SPI_Write_Byte(uint8_t byte)
{
    SPDR = byte;
    1cca:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
    1ccc:	0d b4       	in	r0, 0x2d	; 45
    1cce:	07 fe       	sbrs	r0, 7
    1cd0:	fd cf       	rjmp	.-6      	; 0x1ccc <SPI_Write_Byte+0x2>
    return SPDR;
    1cd2:	8e b5       	in	r24, 0x2e	; 46
}
    1cd4:	08 95       	ret

00001cd6 <Roomba_Init>:
	for (i=0; i<numNotes; i++)
	{
		uart_putchar(notes[i], ROOMBA_UART);
		uart_putchar(notelengths[i], ROOMBA_UART);
	}
}
    1cd6:	3d 9a       	sbi	0x07, 5	; 7
    1cd8:	45 98       	cbi	0x08, 5	; 8
    1cda:	2f ef       	ldi	r18, 0xFF	; 255
    1cdc:	39 e6       	ldi	r19, 0x69	; 105
    1cde:	88 e1       	ldi	r24, 0x18	; 24
    1ce0:	21 50       	subi	r18, 0x01	; 1
    1ce2:	30 40       	sbci	r19, 0x00	; 0
    1ce4:	80 40       	sbci	r24, 0x00	; 0
    1ce6:	e1 f7       	brne	.-8      	; 0x1ce0 <Roomba_Init+0xa>
    1ce8:	00 c0       	rjmp	.+0      	; 0x1cea <Roomba_Init+0x14>
    1cea:	00 00       	nop
    1cec:	45 9a       	sbi	0x08, 5	; 8
    1cee:	9f ef       	ldi	r25, 0xFF	; 255
    1cf0:	27 ea       	ldi	r18, 0xA7	; 167
    1cf2:	31 e6       	ldi	r19, 0x61	; 97
    1cf4:	91 50       	subi	r25, 0x01	; 1
    1cf6:	20 40       	sbci	r18, 0x00	; 0
    1cf8:	30 40       	sbci	r19, 0x00	; 0
    1cfa:	e1 f7       	brne	.-8      	; 0x1cf4 <Roomba_Init+0x1e>
    1cfc:	00 c0       	rjmp	.+0      	; 0x1cfe <Roomba_Init+0x28>
    1cfe:	00 00       	nop
    1d00:	83 e0       	ldi	r24, 0x03	; 3
    1d02:	45 98       	cbi	0x08, 5	; 8
    1d04:	9f ef       	ldi	r25, 0xFF	; 255
    1d06:	20 e7       	ldi	r18, 0x70	; 112
    1d08:	32 e0       	ldi	r19, 0x02	; 2
    1d0a:	91 50       	subi	r25, 0x01	; 1
    1d0c:	20 40       	sbci	r18, 0x00	; 0
    1d0e:	30 40       	sbci	r19, 0x00	; 0
    1d10:	e1 f7       	brne	.-8      	; 0x1d0a <Roomba_Init+0x34>
    1d12:	00 c0       	rjmp	.+0      	; 0x1d14 <Roomba_Init+0x3e>
    1d14:	00 00       	nop
    1d16:	45 9a       	sbi	0x08, 5	; 8
    1d18:	9f ef       	ldi	r25, 0xFF	; 255
    1d1a:	20 e7       	ldi	r18, 0x70	; 112
    1d1c:	32 e0       	ldi	r19, 0x02	; 2
    1d1e:	91 50       	subi	r25, 0x01	; 1
    1d20:	20 40       	sbci	r18, 0x00	; 0
    1d22:	30 40       	sbci	r19, 0x00	; 0
    1d24:	e1 f7       	brne	.-8      	; 0x1d1e <Roomba_Init+0x48>
    1d26:	00 c0       	rjmp	.+0      	; 0x1d28 <Roomba_Init+0x52>
    1d28:	00 00       	nop
    1d2a:	81 50       	subi	r24, 0x01	; 1
    1d2c:	51 f7       	brne	.-44     	; 0x1d02 <Roomba_Init+0x2c>
    1d2e:	51 d0       	rcall	.+162    	; 0x1dd2 <uart_init>
    1d30:	60 e0       	ldi	r22, 0x00	; 0
    1d32:	70 e0       	ldi	r23, 0x00	; 0
    1d34:	80 e8       	ldi	r24, 0x80	; 128
    1d36:	6c d0       	rcall	.+216    	; 0x1e10 <uart_putchar>
    1d38:	8f ef       	ldi	r24, 0xFF	; 255
    1d3a:	99 ef       	ldi	r25, 0xF9	; 249
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	81 50       	subi	r24, 0x01	; 1
    1d40:	90 40       	sbci	r25, 0x00	; 0
    1d42:	20 40       	sbci	r18, 0x00	; 0
    1d44:	e1 f7       	brne	.-8      	; 0x1d3e <Roomba_Init+0x68>
    1d46:	00 c0       	rjmp	.+0      	; 0x1d48 <Roomba_Init+0x72>
    1d48:	00 00       	nop
    1d4a:	3f ef       	ldi	r19, 0xFF	; 255
    1d4c:	81 ee       	ldi	r24, 0xE1	; 225
    1d4e:	94 e0       	ldi	r25, 0x04	; 4
    1d50:	31 50       	subi	r19, 0x01	; 1
    1d52:	80 40       	sbci	r24, 0x00	; 0
    1d54:	90 40       	sbci	r25, 0x00	; 0
    1d56:	e1 f7       	brne	.-8      	; 0x1d50 <Roomba_Init+0x7a>
    1d58:	00 c0       	rjmp	.+0      	; 0x1d5a <Roomba_Init+0x84>
    1d5a:	00 00       	nop
    1d5c:	60 e0       	ldi	r22, 0x00	; 0
    1d5e:	70 e0       	ldi	r23, 0x00	; 0
    1d60:	82 e8       	ldi	r24, 0x82	; 130
    1d62:	56 d0       	rcall	.+172    	; 0x1e10 <uart_putchar>
    1d64:	2f ef       	ldi	r18, 0xFF	; 255
    1d66:	39 ef       	ldi	r19, 0xF9	; 249
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	21 50       	subi	r18, 0x01	; 1
    1d6c:	30 40       	sbci	r19, 0x00	; 0
    1d6e:	80 40       	sbci	r24, 0x00	; 0
    1d70:	e1 f7       	brne	.-8      	; 0x1d6a <Roomba_Init+0x94>
    1d72:	00 c0       	rjmp	.+0      	; 0x1d74 <Roomba_Init+0x9e>
    1d74:	00 00       	nop
    1d76:	08 95       	ret

00001d78 <Roomba_Drive>:
    1d78:	0f 93       	push	r16
    1d7a:	1f 93       	push	r17
    1d7c:	cf 93       	push	r28
    1d7e:	df 93       	push	r29
    1d80:	18 2f       	mov	r17, r24
    1d82:	09 2f       	mov	r16, r25
    1d84:	c6 2f       	mov	r28, r22
    1d86:	d7 2f       	mov	r29, r23
    1d88:	60 e0       	ldi	r22, 0x00	; 0
    1d8a:	70 e0       	ldi	r23, 0x00	; 0
    1d8c:	89 e8       	ldi	r24, 0x89	; 137
    1d8e:	40 d0       	rcall	.+128    	; 0x1e10 <uart_putchar>
    1d90:	60 e0       	ldi	r22, 0x00	; 0
    1d92:	70 e0       	ldi	r23, 0x00	; 0
    1d94:	80 2f       	mov	r24, r16
    1d96:	3c d0       	rcall	.+120    	; 0x1e10 <uart_putchar>
    1d98:	60 e0       	ldi	r22, 0x00	; 0
    1d9a:	70 e0       	ldi	r23, 0x00	; 0
    1d9c:	81 2f       	mov	r24, r17
    1d9e:	38 d0       	rcall	.+112    	; 0x1e10 <uart_putchar>
    1da0:	60 e0       	ldi	r22, 0x00	; 0
    1da2:	70 e0       	ldi	r23, 0x00	; 0
    1da4:	8d 2f       	mov	r24, r29
    1da6:	34 d0       	rcall	.+104    	; 0x1e10 <uart_putchar>
    1da8:	60 e0       	ldi	r22, 0x00	; 0
    1daa:	70 e0       	ldi	r23, 0x00	; 0
    1dac:	8c 2f       	mov	r24, r28
    1dae:	30 d0       	rcall	.+96     	; 0x1e10 <uart_putchar>
    1db0:	df 91       	pop	r29
    1db2:	cf 91       	pop	r28
    1db4:	1f 91       	pop	r17
    1db6:	0f 91       	pop	r16
    1db8:	08 95       	ret

00001dba <Roomba_PlaySong>:

void Roomba_PlaySong(int songNum)
{
    1dba:	cf 93       	push	r28
    1dbc:	c8 2f       	mov	r28, r24
	uart_putchar(PLAY, ROOMBA_UART);
    1dbe:	60 e0       	ldi	r22, 0x00	; 0
    1dc0:	70 e0       	ldi	r23, 0x00	; 0
    1dc2:	8d e8       	ldi	r24, 0x8D	; 141
    1dc4:	25 d0       	rcall	.+74     	; 0x1e10 <uart_putchar>
	uart_putchar(songNum, ROOMBA_UART);
    1dc6:	60 e0       	ldi	r22, 0x00	; 0
    1dc8:	70 e0       	ldi	r23, 0x00	; 0
    1dca:	8c 2f       	mov	r24, r28
    1dcc:	21 d0       	rcall	.+66     	; 0x1e10 <uart_putchar>
}
    1dce:	cf 91       	pop	r28
    1dd0:	08 95       	ret

00001dd2 <uart_init>:
 * Initalize UART
 * 
 */
void uart_init(UART_BPS bitrate)
{
	UCSR0A = _BV(U2X1);									// Double speed (async) control (On when U2Xn = 1, set to 0 when doing synchronous transfer)
    1dd2:	22 e0       	ldi	r18, 0x02	; 2
    1dd4:	20 93 c0 00 	sts	0x00C0, r18
	UCSR0B = _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);		// Activate receiver, transmitter, and receive complete flag (0 when buffer empty)
    1dd8:	98 e9       	ldi	r25, 0x98	; 152
    1dda:	90 93 c1 00 	sts	0x00C1, r25
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);					// USART Control and Status Register C (selects async/sync operation), sets frame format
    1dde:	86 e0       	ldi	r24, 0x06	; 6
    1de0:	80 93 c2 00 	sts	0x00C2, r24

	UCSR1A = _BV(U2X1);
    1de4:	20 93 c8 00 	sts	0x00C8, r18
	UCSR1B = _BV(RXEN1) | _BV(TXEN1) | _BV(RXCIE1);
    1de8:	90 93 c9 00 	sts	0x00C9, r25
	UCSR1C = _BV(UCSZ11) | _BV(UCSZ10);
    1dec:	80 93 ca 00 	sts	0x00CA, r24

	//UBRR0H = 0;											// Baud Rate register - for any speed >= 9600 bps, the UBBR value fits in the low byte.
	UBRR1H = 0;
    1df0:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = 207;	//103
    1df4:	8f ec       	ldi	r24, 0xCF	; 207
    1df6:	80 93 cc 00 	sts	0x00CC, r24
	//UBRR0L = 103;
	UBRR0 = 103;
    1dfa:	87 e6       	ldi	r24, 0x67	; 103
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	90 93 c5 00 	sts	0x00C5, r25
    1e02:	80 93 c4 00 	sts	0x00C4, r24
		//UBRR1L = 71;
		break;
#endif
	}
*/
    uart_buffer_index = 0;
    1e06:	10 92 68 14 	sts	0x1468, r1
    uart_buffer_1_index = 0;
    1e0a:	10 92 67 14 	sts	0x1467, r1
    1e0e:	08 95       	ret

00001e10 <uart_putchar>:
 * @param byte data to trasmit
 * @param uart channel
 */
void uart_putchar(uint8_t byte, int uart)
{
	if (uart) { 								// Channel 1
    1e10:	67 2b       	or	r22, r23
    1e12:	41 f0       	breq	.+16     	; 0x1e24 <uart_putchar+0x14>

		/* wait for empty transmit buffer */
		while (!( UCSR1A & (1 << UDRE1)));		// UDRE = Data Register Empty
    1e14:	e8 ec       	ldi	r30, 0xC8	; 200
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	90 81       	ld	r25, Z
    1e1a:	95 ff       	sbrs	r25, 5
    1e1c:	fd cf       	rjmp	.-6      	; 0x1e18 <uart_putchar+0x8>

	 	/* Put data into buffer, sends the data */
    	UDR1 = byte;
    1e1e:	80 93 ce 00 	sts	0x00CE, r24
    1e22:	08 95       	ret

	} else {

	    /* wait for empty transmit buffer */
	    while (!( UCSR0A & (1 << UDRE0)));
    1e24:	e0 ec       	ldi	r30, 0xC0	; 192
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	90 81       	ld	r25, Z
    1e2a:	95 ff       	sbrs	r25, 5
    1e2c:	fd cf       	rjmp	.-6      	; 0x1e28 <uart_putchar+0x18>

	    /* Put data into buffer, sends the data */
	    UDR0 = byte;
    1e2e:	80 93 c6 00 	sts	0x00C6, r24
    1e32:	08 95       	ret

00001e34 <uart_get_byte>:
 *
 * @return
 */
uint8_t uart_get_byte(int index, int uart)
{
  	if (index < UART_BUFFER_SIZE) {
    1e34:	80 32       	cpi	r24, 0x20	; 32
    1e36:	91 05       	cpc	r25, r1
    1e38:	64 f4       	brge	.+24     	; 0x1e52 <uart_get_byte+0x1e>

  		if (uart) {
    1e3a:	67 2b       	or	r22, r23
    1e3c:	29 f0       	breq	.+10     	; 0x1e48 <uart_get_byte+0x14>
  			return uart_buffer_1[index];
    1e3e:	fc 01       	movw	r30, r24
    1e40:	e7 59       	subi	r30, 0x97	; 151
    1e42:	fb 4e       	sbci	r31, 0xEB	; 235
    1e44:	80 81       	ld	r24, Z
    1e46:	08 95       	ret
  		} else {
  			return uart_buffer[index];
    1e48:	fc 01       	movw	r30, r24
    1e4a:	e7 57       	subi	r30, 0x77	; 119
    1e4c:	fb 4e       	sbci	r31, 0xEB	; 235
    1e4e:	80 81       	ld	r24, Z
    1e50:	08 95       	ret
  		}
  	}
  	return 0;
    1e52:	80 e0       	ldi	r24, 0x00	; 0
}
    1e54:	08 95       	ret

00001e56 <uart_bytes_received>:
 *
 * @return number of bytes received on UART
 */
uint8_t uart_bytes_received(int uart)
{
	if (uart) {
    1e56:	89 2b       	or	r24, r25
    1e58:	19 f0       	breq	.+6      	; 0x1e60 <uart_bytes_received+0xa>
    	return uart_buffer_1_index;
    1e5a:	80 91 67 14 	lds	r24, 0x1467
    1e5e:	08 95       	ret
    } else {
    	return uart_buffer_index;
    1e60:	80 91 68 14 	lds	r24, 0x1468
    }
}
    1e64:	08 95       	ret

00001e66 <uart_reset_receive>:
 *
 * @ param uart channel
 */
void uart_reset_receive(int uart)
{
	if (uart) {
    1e66:	89 2b       	or	r24, r25
    1e68:	19 f0       	breq	.+6      	; 0x1e70 <uart_reset_receive+0xa>
		uart_buffer_1_index = 0;
    1e6a:	10 92 67 14 	sts	0x1467, r1
    1e6e:	08 95       	ret
	} else {
		uart_buffer_index = 0;
    1e70:	10 92 68 14 	sts	0x1468, r1
    1e74:	08 95       	ret

00001e76 <__vector_25>:

/**
 * UART receive byte ISR
 */
ISR(USART0_RX_vect)
{
    1e76:	1f 92       	push	r1
    1e78:	0f 92       	push	r0
    1e7a:	0f b6       	in	r0, 0x3f	; 63
    1e7c:	0f 92       	push	r0
    1e7e:	11 24       	eor	r1, r1
    1e80:	0b b6       	in	r0, 0x3b	; 59
    1e82:	0f 92       	push	r0
    1e84:	8f 93       	push	r24
    1e86:	9f 93       	push	r25
    1e88:	ef 93       	push	r30
    1e8a:	ff 93       	push	r31
	while(!(UCSR0A & (1<<RXC0)));
    1e8c:	e0 ec       	ldi	r30, 0xC0	; 192
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 81       	ld	r24, Z
    1e92:	88 23       	and	r24, r24
    1e94:	ec f7       	brge	.-6      	; 0x1e90 <__vector_25+0x1a>
    uart_buffer[uart_buffer_index] = UDR0;
    1e96:	e0 91 68 14 	lds	r30, 0x1468
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 91 c6 00 	lds	r24, 0x00C6
    1ea0:	e7 57       	subi	r30, 0x77	; 119
    1ea2:	fb 4e       	sbci	r31, 0xEB	; 235
    1ea4:	80 83       	st	Z, r24
    uart_buffer_index = (uart_buffer_index + 1) % UART_BUFFER_SIZE;
    1ea6:	80 91 68 14 	lds	r24, 0x1468
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	01 96       	adiw	r24, 0x01	; 1
    1eae:	8f 71       	andi	r24, 0x1F	; 31
    1eb0:	90 78       	andi	r25, 0x80	; 128
    1eb2:	99 23       	and	r25, r25
    1eb4:	24 f4       	brge	.+8      	; 0x1ebe <__vector_25+0x48>
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	80 6e       	ori	r24, 0xE0	; 224
    1eba:	9f 6f       	ori	r25, 0xFF	; 255
    1ebc:	01 96       	adiw	r24, 0x01	; 1
    1ebe:	80 93 68 14 	sts	0x1468, r24
}
    1ec2:	ff 91       	pop	r31
    1ec4:	ef 91       	pop	r30
    1ec6:	9f 91       	pop	r25
    1ec8:	8f 91       	pop	r24
    1eca:	0f 90       	pop	r0
    1ecc:	0b be       	out	0x3b, r0	; 59
    1ece:	0f 90       	pop	r0
    1ed0:	0f be       	out	0x3f, r0	; 63
    1ed2:	0f 90       	pop	r0
    1ed4:	1f 90       	pop	r1
    1ed6:	18 95       	reti

00001ed8 <__vector_36>:

/**
 * UART receive byte ISR
 */
ISR(USART1_RX_vect)
{
    1ed8:	1f 92       	push	r1
    1eda:	0f 92       	push	r0
    1edc:	0f b6       	in	r0, 0x3f	; 63
    1ede:	0f 92       	push	r0
    1ee0:	11 24       	eor	r1, r1
    1ee2:	0b b6       	in	r0, 0x3b	; 59
    1ee4:	0f 92       	push	r0
    1ee6:	8f 93       	push	r24
    1ee8:	9f 93       	push	r25
    1eea:	ef 93       	push	r30
    1eec:	ff 93       	push	r31
	while(!(UCSR1A & (1<<RXC1)));
    1eee:	e8 ec       	ldi	r30, 0xC8	; 200
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	88 23       	and	r24, r24
    1ef6:	ec f7       	brge	.-6      	; 0x1ef2 <__vector_36+0x1a>
    uart_buffer_1[uart_buffer_1_index] = UDR1;
    1ef8:	e0 91 67 14 	lds	r30, 0x1467
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 91 ce 00 	lds	r24, 0x00CE
    1f02:	e7 59       	subi	r30, 0x97	; 151
    1f04:	fb 4e       	sbci	r31, 0xEB	; 235
    1f06:	80 83       	st	Z, r24
    uart_buffer_1_index = (uart_buffer_1_index + 1) % UART_BUFFER_SIZE;
    1f08:	80 91 67 14 	lds	r24, 0x1467
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	01 96       	adiw	r24, 0x01	; 1
    1f10:	8f 71       	andi	r24, 0x1F	; 31
    1f12:	90 78       	andi	r25, 0x80	; 128
    1f14:	99 23       	and	r25, r25
    1f16:	24 f4       	brge	.+8      	; 0x1f20 <__vector_36+0x48>
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	80 6e       	ori	r24, 0xE0	; 224
    1f1c:	9f 6f       	ori	r25, 0xFF	; 255
    1f1e:	01 96       	adiw	r24, 0x01	; 1
    1f20:	80 93 67 14 	sts	0x1467, r24
}
    1f24:	ff 91       	pop	r31
    1f26:	ef 91       	pop	r30
    1f28:	9f 91       	pop	r25
    1f2a:	8f 91       	pop	r24
    1f2c:	0f 90       	pop	r0
    1f2e:	0b be       	out	0x3b, r0	; 59
    1f30:	0f 90       	pop	r0
    1f32:	0f be       	out	0x3f, r0	; 63
    1f34:	0f 90       	pop	r0
    1f36:	1f 90       	pop	r1
    1f38:	18 95       	reti

00001f3a <__udivmodhi4>:
    1f3a:	aa 1b       	sub	r26, r26
    1f3c:	bb 1b       	sub	r27, r27
    1f3e:	51 e1       	ldi	r21, 0x11	; 17
    1f40:	07 c0       	rjmp	.+14     	; 0x1f50 <__udivmodhi4_ep>

00001f42 <__udivmodhi4_loop>:
    1f42:	aa 1f       	adc	r26, r26
    1f44:	bb 1f       	adc	r27, r27
    1f46:	a6 17       	cp	r26, r22
    1f48:	b7 07       	cpc	r27, r23
    1f4a:	10 f0       	brcs	.+4      	; 0x1f50 <__udivmodhi4_ep>
    1f4c:	a6 1b       	sub	r26, r22
    1f4e:	b7 0b       	sbc	r27, r23

00001f50 <__udivmodhi4_ep>:
    1f50:	88 1f       	adc	r24, r24
    1f52:	99 1f       	adc	r25, r25
    1f54:	5a 95       	dec	r21
    1f56:	a9 f7       	brne	.-22     	; 0x1f42 <__udivmodhi4_loop>
    1f58:	80 95       	com	r24
    1f5a:	90 95       	com	r25
    1f5c:	bc 01       	movw	r22, r24
    1f5e:	cd 01       	movw	r24, r26
    1f60:	08 95       	ret

00001f62 <__tablejump2__>:
    1f62:	ee 0f       	add	r30, r30
    1f64:	ff 1f       	adc	r31, r31
    1f66:	88 1f       	adc	r24, r24
    1f68:	8b bf       	out	0x3b, r24	; 59
    1f6a:	07 90       	elpm	r0, Z+
    1f6c:	f6 91       	elpm	r31, Z
    1f6e:	e0 2d       	mov	r30, r0
    1f70:	19 94       	eijmp

00001f72 <_exit>:
    1f72:	f8 94       	cli

00001f74 <__stop_program>:
    1f74:	ff cf       	rjmp	.-2      	; 0x1f74 <__stop_program>
