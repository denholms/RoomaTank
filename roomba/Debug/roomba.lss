
roomba.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800200  00002568  000025fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002568  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001346  0080023c  0080023c  00002638  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002638  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002694  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003c8  00000000  00000000  000026d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004725  00000000  00000000  00002aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012b5  00000000  00000000  000071c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002425  00000000  00000000  0000847a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a24  00000000  00000000  0000a8a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001064  00000000  00000000  0000b2c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000027be  00000000  00000000  0000c328  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e0  00000000  00000000  0000eae6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c0       	rjmp	.+252    	; 0xfe <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 94 0e 	jmp	0x1d28	; 0x1d28 <__vector_1>
       8:	9b c0       	rjmp	.+310    	; 0x140 <__bad_interrupt>
       a:	00 00       	nop
       c:	99 c0       	rjmp	.+306    	; 0x140 <__bad_interrupt>
       e:	00 00       	nop
      10:	97 c0       	rjmp	.+302    	; 0x140 <__bad_interrupt>
      12:	00 00       	nop
      14:	95 c0       	rjmp	.+298    	; 0x140 <__bad_interrupt>
      16:	00 00       	nop
      18:	93 c0       	rjmp	.+294    	; 0x140 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	91 c0       	rjmp	.+290    	; 0x140 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8f c0       	rjmp	.+286    	; 0x140 <__bad_interrupt>
      22:	00 00       	nop
      24:	8d c0       	rjmp	.+282    	; 0x140 <__bad_interrupt>
      26:	00 00       	nop
      28:	8b c0       	rjmp	.+278    	; 0x140 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	89 c0       	rjmp	.+274    	; 0x140 <__bad_interrupt>
      2e:	00 00       	nop
      30:	87 c0       	rjmp	.+270    	; 0x140 <__bad_interrupt>
      32:	00 00       	nop
      34:	85 c0       	rjmp	.+266    	; 0x140 <__bad_interrupt>
      36:	00 00       	nop
      38:	83 c0       	rjmp	.+262    	; 0x140 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	81 c0       	rjmp	.+258    	; 0x140 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7f c0       	rjmp	.+254    	; 0x140 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 50 0b 	jmp	0x16a0	; 0x16a0 <__vector_17>
      48:	7b c0       	rjmp	.+246    	; 0x140 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	79 c0       	rjmp	.+242    	; 0x140 <__bad_interrupt>
      4e:	00 00       	nop
      50:	77 c0       	rjmp	.+238    	; 0x140 <__bad_interrupt>
      52:	00 00       	nop
      54:	75 c0       	rjmp	.+234    	; 0x140 <__bad_interrupt>
      56:	00 00       	nop
      58:	73 c0       	rjmp	.+230    	; 0x140 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	71 c0       	rjmp	.+226    	; 0x140 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6f c0       	rjmp	.+222    	; 0x140 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 5c 0f 	jmp	0x1eb8	; 0x1eb8 <__vector_25>
      68:	6b c0       	rjmp	.+214    	; 0x140 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	69 c0       	rjmp	.+210    	; 0x140 <__bad_interrupt>
      6e:	00 00       	nop
      70:	67 c0       	rjmp	.+206    	; 0x140 <__bad_interrupt>
      72:	00 00       	nop
      74:	65 c0       	rjmp	.+202    	; 0x140 <__bad_interrupt>
      76:	00 00       	nop
      78:	63 c0       	rjmp	.+198    	; 0x140 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	61 c0       	rjmp	.+194    	; 0x140 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 27 0c 	jmp	0x184e	; 0x184e <__vector_32>
      84:	5d c0       	rjmp	.+186    	; 0x140 <__bad_interrupt>
      86:	00 00       	nop
      88:	5b c0       	rjmp	.+182    	; 0x140 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	59 c0       	rjmp	.+178    	; 0x140 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 8d 0f 	jmp	0x1f1a	; 0x1f1a <__vector_36>
      94:	55 c0       	rjmp	.+170    	; 0x140 <__bad_interrupt>
      96:	00 00       	nop
      98:	53 c0       	rjmp	.+166    	; 0x140 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	51 c0       	rjmp	.+162    	; 0x140 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4f c0       	rjmp	.+158    	; 0x140 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4d c0       	rjmp	.+154    	; 0x140 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4b c0       	rjmp	.+150    	; 0x140 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	49 c0       	rjmp	.+146    	; 0x140 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	47 c0       	rjmp	.+142    	; 0x140 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	45 c0       	rjmp	.+138    	; 0x140 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	43 c0       	rjmp	.+134    	; 0x140 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	41 c0       	rjmp	.+130    	; 0x140 <__bad_interrupt>
      be:	00 00       	nop
      c0:	3f c0       	rjmp	.+126    	; 0x140 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3d c0       	rjmp	.+122    	; 0x140 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3b c0       	rjmp	.+118    	; 0x140 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	39 c0       	rjmp	.+114    	; 0x140 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	37 c0       	rjmp	.+110    	; 0x140 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	35 c0       	rjmp	.+106    	; 0x140 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	33 c0       	rjmp	.+102    	; 0x140 <__bad_interrupt>
      da:	00 00       	nop
      dc:	31 c0       	rjmp	.+98     	; 0x140 <__bad_interrupt>
      de:	00 00       	nop
      e0:	2f c0       	rjmp	.+94     	; 0x140 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	d1 06       	cpc	r13, r17
      e6:	b7 06       	cpc	r11, r23
      e8:	d1 06       	cpc	r13, r17
      ea:	e0 06       	cpc	r14, r16
      ec:	85 07       	cpc	r24, r21
      ee:	ef 06       	cpc	r14, r31
      f0:	a8 06       	cpc	r10, r24
      f2:	d8 07       	cpc	r29, r24
      f4:	0d 08       	sbc	r0, r13
      f6:	af 08       	sbc	r10, r15
      f8:	b1 08       	sbc	r11, r1
      fa:	e7 08       	sbc	r14, r7
      fc:	5e 09       	sbc	r21, r14

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d1 e2       	ldi	r29, 0x21	; 33
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0c bf       	out	0x3c, r16	; 60

0000010e <__do_copy_data>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a0 e0       	ldi	r26, 0x00	; 0
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	e8 e6       	ldi	r30, 0x68	; 104
     116:	f5 e2       	ldi	r31, 0x25	; 37
     118:	00 e0       	ldi	r16, 0x00	; 0
     11a:	0b bf       	out	0x3b, r16	; 59
     11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x14>
     11e:	07 90       	elpm	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	ac 33       	cpi	r26, 0x3C	; 60
     124:	b1 07       	cpc	r27, r17
     126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0x10>

00000128 <__do_clear_bss>:
     128:	25 e1       	ldi	r18, 0x15	; 21
     12a:	ac e3       	ldi	r26, 0x3C	; 60
     12c:	b2 e0       	ldi	r27, 0x02	; 2
     12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
     130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
     132:	a2 38       	cpi	r26, 0x82	; 130
     134:	b2 07       	cpc	r27, r18
     136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>
     138:	0e 94 3e 0c 	call	0x187c	; 0x187c <main>
     13c:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <_exit>

00000140 <__bad_interrupt>:
     140:	5f cf       	rjmp	.-322    	; 0x0 <__vectors>

00000142 <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
     142:	0f 92       	push	r0
     144:	1f 92       	push	r1
     146:	2f 92       	push	r2
     148:	3f 92       	push	r3
     14a:	4f 92       	push	r4
     14c:	5f 92       	push	r5
     14e:	6f 92       	push	r6
     150:	7f 92       	push	r7
     152:	8f 92       	push	r8
     154:	9f 92       	push	r9
     156:	af 92       	push	r10
     158:	bf 92       	push	r11
     15a:	cf 92       	push	r12
     15c:	df 92       	push	r13
     15e:	ef 92       	push	r14
     160:	ff 92       	push	r15
     162:	0f 93       	push	r16
     164:	1f 93       	push	r17
     166:	2f 93       	push	r18
     168:	3f 93       	push	r19
     16a:	4f 93       	push	r20
     16c:	5f 93       	push	r21
     16e:	6f 93       	push	r22
     170:	7f 93       	push	r23
     172:	8f 93       	push	r24
     174:	9f 93       	push	r25
     176:	af 93       	push	r26
     178:	bf 93       	push	r27
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	ef 93       	push	r30
     180:	ff 93       	push	r31
     182:	0f b7       	in	r16, 0x3f	; 63
     184:	0f 93       	push	r16
     186:	fc b7       	in	r31, 0x3c	; 60
     188:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
     18a:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     18c:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
     18e:	e0 93 7f 15 	sts	0x157F, r30
        sts  KernelSp+1, r31
     192:	f0 93 80 15 	sts	0x1580, r31
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
     196:	e0 91 5d 15 	lds	r30, 0x155D
        lds  r31, CurrentSp+1
     19a:	f0 91 5e 15 	lds	r31, 0x155E
        out  SPL, r30
     19e:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     1a0:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
     1a2:	ff 91       	pop	r31
     1a4:	fc bf       	out	0x3c, r31	; 60
     1a6:	0f 91       	pop	r16
     1a8:	0f bf       	out	0x3f, r16	; 63
     1aa:	ff 91       	pop	r31
     1ac:	ef 91       	pop	r30
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	bf 91       	pop	r27
     1b4:	af 91       	pop	r26
     1b6:	9f 91       	pop	r25
     1b8:	8f 91       	pop	r24
     1ba:	7f 91       	pop	r23
     1bc:	6f 91       	pop	r22
     1be:	5f 91       	pop	r21
     1c0:	4f 91       	pop	r20
     1c2:	3f 91       	pop	r19
     1c4:	2f 91       	pop	r18
     1c6:	1f 91       	pop	r17
     1c8:	0f 91       	pop	r16
     1ca:	ff 90       	pop	r15
     1cc:	ef 90       	pop	r14
     1ce:	df 90       	pop	r13
     1d0:	cf 90       	pop	r12
     1d2:	bf 90       	pop	r11
     1d4:	af 90       	pop	r10
     1d6:	9f 90       	pop	r9
     1d8:	8f 90       	pop	r8
     1da:	7f 90       	pop	r7
     1dc:	6f 90       	pop	r6
     1de:	5f 90       	pop	r5
     1e0:	4f 90       	pop	r4
     1e2:	3f 90       	pop	r3
     1e4:	2f 90       	pop	r2
     1e6:	1f 90       	pop	r1
     1e8:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
     1ea:	18 95       	reti

000001ec <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
     1ec:	0f 92       	push	r0
     1ee:	1f 92       	push	r1
     1f0:	2f 92       	push	r2
     1f2:	3f 92       	push	r3
     1f4:	4f 92       	push	r4
     1f6:	5f 92       	push	r5
     1f8:	6f 92       	push	r6
     1fa:	7f 92       	push	r7
     1fc:	8f 92       	push	r8
     1fe:	9f 92       	push	r9
     200:	af 92       	push	r10
     202:	bf 92       	push	r11
     204:	cf 92       	push	r12
     206:	df 92       	push	r13
     208:	ef 92       	push	r14
     20a:	ff 92       	push	r15
     20c:	0f 93       	push	r16
     20e:	1f 93       	push	r17
     210:	2f 93       	push	r18
     212:	3f 93       	push	r19
     214:	4f 93       	push	r20
     216:	5f 93       	push	r21
     218:	6f 93       	push	r22
     21a:	7f 93       	push	r23
     21c:	8f 93       	push	r24
     21e:	9f 93       	push	r25
     220:	af 93       	push	r26
     222:	bf 93       	push	r27
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	ef 93       	push	r30
     22a:	ff 93       	push	r31
     22c:	0f b7       	in	r16, 0x3f	; 63
     22e:	0f 93       	push	r16
     230:	fc b7       	in	r31, 0x3c	; 60
     232:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
     234:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     236:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
     238:	e0 93 5d 15 	sts	0x155D, r30
        sts  CurrentSp+1, r31
     23c:	f0 93 5e 15 	sts	0x155E, r31
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
     240:	e0 91 7f 15 	lds	r30, 0x157F
        lds  r31, KernelSp+1
     244:	f0 91 80 15 	lds	r31, 0x1580
        out  SPL, r30
     248:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     24a:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
     24c:	ff 91       	pop	r31
     24e:	fc bf       	out	0x3c, r31	; 60
     250:	0f 91       	pop	r16
     252:	0f bf       	out	0x3f, r16	; 63
     254:	ff 91       	pop	r31
     256:	ef 91       	pop	r30
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	bf 91       	pop	r27
     25e:	af 91       	pop	r26
     260:	9f 91       	pop	r25
     262:	8f 91       	pop	r24
     264:	7f 91       	pop	r23
     266:	6f 91       	pop	r22
     268:	5f 91       	pop	r21
     26a:	4f 91       	pop	r20
     26c:	3f 91       	pop	r19
     26e:	2f 91       	pop	r18
     270:	1f 91       	pop	r17
     272:	0f 91       	pop	r16
     274:	ff 90       	pop	r15
     276:	ef 90       	pop	r14
     278:	df 90       	pop	r13
     27a:	cf 90       	pop	r12
     27c:	bf 90       	pop	r11
     27e:	af 90       	pop	r10
     280:	9f 90       	pop	r9
     282:	8f 90       	pop	r8
     284:	7f 90       	pop	r7
     286:	6f 90       	pop	r6
     288:	5f 90       	pop	r5
     28a:	4f 90       	pop	r4
     28c:	3f 90       	pop	r3
     28e:	2f 90       	pop	r2
     290:	1f 90       	pop	r1
     292:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
     294:	08 95       	ret

00000296 <adc_init>:

// initialize adc
void adc_init()
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
     296:	80 e4       	ldi	r24, 0x40	; 64
     298:	80 93 7c 00 	sts	0x007C, r24
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     29c:	87 e8       	ldi	r24, 0x87	; 135
     29e:	80 93 7a 00 	sts	0x007A, r24
     2a2:	08 95       	ret

000002a4 <adc_read>:
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     2a4:	ec e7       	ldi	r30, 0x7C	; 124
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	90 81       	ld	r25, Z
uint16_t adc_read(uint8_t ch)
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
     2aa:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     2ac:	98 7f       	andi	r25, 0xF8	; 248
     2ae:	89 2b       	or	r24, r25
     2b0:	80 83       	st	Z, r24
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
     2b2:	ea e7       	ldi	r30, 0x7A	; 122
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	80 81       	ld	r24, Z
     2b8:	80 64       	ori	r24, 0x40	; 64
     2ba:	80 83       	st	Z, r24
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
     2bc:	80 81       	ld	r24, Z
     2be:	86 fd       	sbrc	r24, 6
     2c0:	fd cf       	rjmp	.-6      	; 0x2bc <adc_read+0x18>
	
	return (ADC);
     2c2:	80 91 78 00 	lds	r24, 0x0078
     2c6:	90 91 79 00 	lds	r25, 0x0079
}
     2ca:	08 95       	ret

000002cc <radio_rxhandler>:
	return 0;
}

void radio_rxhandler(uint8_t pipenumber)
{
	rxflag = 1;
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	80 93 3c 02 	sts	0x023C, r24
	PORTL ^= _BV(PL7);
     2d2:	eb e0       	ldi	r30, 0x0B	; 11
     2d4:	f1 e0       	ldi	r31, 0x01	; 1
     2d6:	80 81       	ld	r24, Z
     2d8:	80 58       	subi	r24, 0x80	; 128
     2da:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2dc:	83 ed       	ldi	r24, 0xD3	; 211
     2de:	90 e3       	ldi	r25, 0x30	; 48
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <radio_rxhandler+0x14>
     2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <radio_rxhandler+0x1a>
     2e6:	00 00       	nop
	_delay_ms(50);
	PORTL ^= _BV(PL7);
     2e8:	80 81       	ld	r24, Z
     2ea:	80 58       	subi	r24, 0x80	; 128
     2ec:	80 83       	st	Z, r24
     2ee:	08 95       	ret

000002f0 <lcd_nibble>:

void lcd_blank( uint8_t len )                   // blank n digits
{
  while( len-- )
    lcd_putchar( ' ' );
}
     2f0:	e2 e0       	ldi	r30, 0x02	; 2
     2f2:	f1 e0       	ldi	r31, 0x01	; 1
     2f4:	90 81       	ld	r25, Z
     2f6:	9f 7e       	andi	r25, 0xEF	; 239
     2f8:	90 83       	st	Z, r25
     2fa:	88 23       	and	r24, r24
     2fc:	1c f4       	brge	.+6      	; 0x304 <lcd_nibble+0x14>
     2fe:	90 81       	ld	r25, Z
     300:	90 61       	ori	r25, 0x10	; 16
     302:	90 83       	st	Z, r25
     304:	e2 e0       	ldi	r30, 0x02	; 2
     306:	f1 e0       	ldi	r31, 0x01	; 1
     308:	90 81       	ld	r25, Z
     30a:	97 7f       	andi	r25, 0xF7	; 247
     30c:	90 83       	st	Z, r25
     30e:	86 ff       	sbrs	r24, 6
     310:	03 c0       	rjmp	.+6      	; 0x318 <lcd_nibble+0x28>
     312:	90 81       	ld	r25, Z
     314:	98 60       	ori	r25, 0x08	; 8
     316:	90 83       	st	Z, r25
     318:	73 98       	cbi	0x0e, 3	; 14
     31a:	85 fd       	sbrc	r24, 5
     31c:	73 9a       	sbi	0x0e, 3	; 14
     31e:	a5 98       	cbi	0x14, 5	; 20
     320:	84 fd       	sbrc	r24, 4
     322:	a5 9a       	sbi	0x14, 5	; 20
     324:	e2 e0       	ldi	r30, 0x02	; 2
     326:	f1 e0       	ldi	r31, 0x01	; 1
     328:	80 81       	ld	r24, Z
     32a:	80 64       	ori	r24, 0x40	; 64
     32c:	80 83       	st	Z, r24
     32e:	85 e0       	ldi	r24, 0x05	; 5
     330:	8a 95       	dec	r24
     332:	f1 f7       	brne	.-4      	; 0x330 <lcd_nibble+0x40>
     334:	00 00       	nop
     336:	80 81       	ld	r24, Z
     338:	8f 7b       	andi	r24, 0xBF	; 191
     33a:	80 83       	st	Z, r24
     33c:	08 95       	ret

0000033e <lcd_command>:
     33e:	cf 93       	push	r28
     340:	c8 2f       	mov	r28, r24
     342:	e2 e0       	ldi	r30, 0x02	; 2
     344:	f1 e0       	ldi	r31, 0x01	; 1
     346:	80 81       	ld	r24, Z
     348:	8f 7d       	andi	r24, 0xDF	; 223
     34a:	80 83       	st	Z, r24
     34c:	8c 2f       	mov	r24, r28
     34e:	d0 df       	rcall	.-96     	; 0x2f0 <lcd_nibble>
     350:	8c 2f       	mov	r24, r28
     352:	82 95       	swap	r24
     354:	80 7f       	andi	r24, 0xF0	; 240
     356:	cc df       	rcall	.-104    	; 0x2f0 <lcd_nibble>
     358:	87 ec       	ldi	r24, 0xC7	; 199
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	01 97       	sbiw	r24, 0x01	; 1
     35e:	f1 f7       	brne	.-4      	; 0x35c <lcd_command+0x1e>
     360:	00 c0       	rjmp	.+0      	; 0x362 <lcd_command+0x24>
     362:	00 00       	nop
     364:	c4 30       	cpi	r28, 0x04	; 4
     366:	18 f0       	brcs	.+6      	; 0x36e <lcd_command+0x30>
     368:	c0 38       	cpi	r28, 0x80	; 128
     36a:	50 f0       	brcs	.+20     	; 0x380 <lcd_command+0x42>
     36c:	07 c0       	rjmp	.+14     	; 0x37c <lcd_command+0x3e>
     36e:	8f e3       	ldi	r24, 0x3F	; 63
     370:	9f e1       	ldi	r25, 0x1F	; 31
     372:	01 97       	sbiw	r24, 0x01	; 1
     374:	f1 f7       	brne	.-4      	; 0x372 <lcd_command+0x34>
     376:	00 c0       	rjmp	.+0      	; 0x378 <lcd_command+0x3a>
     378:	00 00       	nop
     37a:	c0 e8       	ldi	r28, 0x80	; 128
     37c:	c0 93 00 02 	sts	0x0200, r28
     380:	cf 91       	pop	r28
     382:	08 95       	ret

00000384 <lcd_putchar>:
     384:	cf 93       	push	r28
     386:	c8 2f       	mov	r28, r24
     388:	e2 e0       	ldi	r30, 0x02	; 2
     38a:	f1 e0       	ldi	r31, 0x01	; 1
     38c:	80 81       	ld	r24, Z
     38e:	80 62       	ori	r24, 0x20	; 32
     390:	80 83       	st	Z, r24
     392:	8c 2f       	mov	r24, r28
     394:	ad df       	rcall	.-166    	; 0x2f0 <lcd_nibble>
     396:	8c 2f       	mov	r24, r28
     398:	82 95       	swap	r24
     39a:	80 7f       	andi	r24, 0xF0	; 240
     39c:	a9 df       	rcall	.-174    	; 0x2f0 <lcd_nibble>
     39e:	87 ec       	ldi	r24, 0xC7	; 199
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	01 97       	sbiw	r24, 0x01	; 1
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <lcd_putchar+0x1e>
     3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <lcd_putchar+0x24>
     3a8:	00 00       	nop
     3aa:	80 91 00 02 	lds	r24, 0x0200
     3ae:	8f 5f       	subi	r24, 0xFF	; 255
     3b0:	80 93 00 02 	sts	0x0200, r24
     3b4:	80 39       	cpi	r24, 0x90	; 144
     3b6:	21 f0       	breq	.+8      	; 0x3c0 <lcd_putchar+0x3c>
     3b8:	80 3d       	cpi	r24, 0xD0	; 208
     3ba:	21 f4       	brne	.+8      	; 0x3c4 <lcd_putchar+0x40>
     3bc:	80 e8       	ldi	r24, 0x80	; 128
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <lcd_putchar+0x3e>
     3c0:	80 ec       	ldi	r24, 0xC0	; 192
     3c2:	bd df       	rcall	.-134    	; 0x33e <lcd_command>
     3c4:	cf 91       	pop	r28
     3c6:	08 95       	ret

000003c8 <lcd_puts>:
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	ec 01       	movw	r28, r24
     3ce:	88 81       	ld	r24, Y
     3d0:	88 23       	and	r24, r24
     3d2:	29 f0       	breq	.+10     	; 0x3de <lcd_puts+0x16>
     3d4:	21 96       	adiw	r28, 0x01	; 1
     3d6:	d6 df       	rcall	.-84     	; 0x384 <lcd_putchar>
     3d8:	89 91       	ld	r24, Y+
     3da:	81 11       	cpse	r24, r1
     3dc:	fc cf       	rjmp	.-8      	; 0x3d6 <lcd_puts+0xe>
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	08 95       	ret

000003e4 <lcd_init>:


void lcd_init( void )
{
  LCD_DDR_D4 = 1;                               // enable output pins
     3e4:	9d 9a       	sbi	0x13, 5	; 19
  LCD_DDR_D5 = 1;
     3e6:	6b 9a       	sbi	0x0d, 3	; 13
  LCD_DDR_D6 = 1;
     3e8:	e1 e0       	ldi	r30, 0x01	; 1
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	80 81       	ld	r24, Z
     3ee:	88 60       	ori	r24, 0x08	; 8
     3f0:	80 83       	st	Z, r24
  LCD_DDR_D7 = 1;
     3f2:	80 81       	ld	r24, Z
     3f4:	80 61       	ori	r24, 0x10	; 16
     3f6:	80 83       	st	Z, r24
  LCD_DDR_RS = 1;
     3f8:	80 81       	ld	r24, Z
     3fa:	80 62       	ori	r24, 0x20	; 32
     3fc:	80 83       	st	Z, r24
  LCD_DDR_E0 = 1;
     3fe:	80 81       	ld	r24, Z
     400:	80 64       	ori	r24, 0x40	; 64
     402:	80 83       	st	Z, r24
  LCD_E0 = 0;
     404:	e2 e0       	ldi	r30, 0x02	; 2
     406:	f1 e0       	ldi	r31, 0x01	; 1
     408:	80 81       	ld	r24, Z
     40a:	8f 7b       	andi	r24, 0xBF	; 191
     40c:	80 83       	st	Z, r24
  LCD_RS = 0;                                   // send commands
     40e:	80 81       	ld	r24, Z
     410:	8f 7d       	andi	r24, 0xDF	; 223
     412:	80 83       	st	Z, r24
     414:	8f e5       	ldi	r24, 0x5F	; 95
     416:	9a ee       	ldi	r25, 0xEA	; 234
     418:	01 97       	sbiw	r24, 0x01	; 1
     41a:	f1 f7       	brne	.-4      	; 0x418 <lcd_init+0x34>
     41c:	00 c0       	rjmp	.+0      	; 0x41e <lcd_init+0x3a>
     41e:	00 00       	nop

  _delay_ms( 15 );
  lcd_nibble( 0x30 );
     420:	80 e3       	ldi	r24, 0x30	; 48
     422:	66 df       	rcall	.-308    	; 0x2f0 <lcd_nibble>
     424:	8f e0       	ldi	r24, 0x0F	; 15
     426:	90 e4       	ldi	r25, 0x40	; 64
     428:	01 97       	sbiw	r24, 0x01	; 1
     42a:	f1 f7       	brne	.-4      	; 0x428 <lcd_init+0x44>
     42c:	00 c0       	rjmp	.+0      	; 0x42e <lcd_init+0x4a>
     42e:	00 00       	nop
  _delay_ms( 4.1 );
  lcd_nibble( 0x30 );
     430:	80 e3       	ldi	r24, 0x30	; 48
     432:	5e df       	rcall	.-324    	; 0x2f0 <lcd_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     434:	8f e8       	ldi	r24, 0x8F	; 143
     436:	91 e0       	ldi	r25, 0x01	; 1
     438:	01 97       	sbiw	r24, 0x01	; 1
     43a:	f1 f7       	brne	.-4      	; 0x438 <lcd_init+0x54>
     43c:	00 c0       	rjmp	.+0      	; 0x43e <lcd_init+0x5a>
     43e:	00 00       	nop
  _delay_us( 100 );
  lcd_nibble( 0x30 );
     440:	80 e3       	ldi	r24, 0x30	; 48
     442:	56 df       	rcall	.-340    	; 0x2f0 <lcd_nibble>
     444:	87 ec       	ldi	r24, 0xC7	; 199
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	01 97       	sbiw	r24, 0x01	; 1
     44a:	f1 f7       	brne	.-4      	; 0x448 <lcd_init+0x64>
     44c:	00 c0       	rjmp	.+0      	; 0x44e <lcd_init+0x6a>
     44e:	00 00       	nop
  _delay_us( LCD_TIME_DAT );
  lcd_nibble( 0x20 );                           // 4 bit mode
     450:	80 e2       	ldi	r24, 0x20	; 32
     452:	4e df       	rcall	.-356    	; 0x2f0 <lcd_nibble>
     454:	87 ec       	ldi	r24, 0xC7	; 199
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	01 97       	sbiw	r24, 0x01	; 1
     45a:	f1 f7       	brne	.-4      	; 0x458 <lcd_init+0x74>
     45c:	00 c0       	rjmp	.+0      	; 0x45e <lcd_init+0x7a>
     45e:	00 00       	nop
  _delay_us( LCD_TIME_DAT );
#if LCD_LINE == 1
  lcd_command( 0x20 );                          // 1 line
#else
  lcd_command( 0x28 );                          // 2 lines 5*7
     460:	88 e2       	ldi	r24, 0x28	; 40
     462:	6d df       	rcall	.-294    	; 0x33e <lcd_command>
#endif
  lcd_command( 0x08 );                          // display off
     464:	88 e0       	ldi	r24, 0x08	; 8
     466:	6b df       	rcall	.-298    	; 0x33e <lcd_command>
  lcd_command( 0x01 );                          // display clear
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	69 df       	rcall	.-302    	; 0x33e <lcd_command>
  lcd_command( 0x06 );                          // cursor increment
     46c:	86 e0       	ldi	r24, 0x06	; 6
     46e:	67 df       	rcall	.-306    	; 0x33e <lcd_command>
  lcd_command( 0x0C );                          // on, no cursor, no blink
     470:	8c e0       	ldi	r24, 0x0C	; 12
     472:	65 cf       	rjmp	.-310    	; 0x33e <lcd_command>
     474:	08 95       	ret

00000476 <init_LED_PORTL_pin0>:
void init_LED_PORTL_pin6(void) {
    DDRL |= _BV(DDL6);
}

void init_LED_PORTL_pin7(void) {
    DDRL |= _BV(DDL7);
     476:	ea e0       	ldi	r30, 0x0A	; 10
     478:	f1 e0       	ldi	r31, 0x01	; 1
     47a:	80 81       	ld	r24, Z
     47c:	81 60       	ori	r24, 0x01	; 1
     47e:	80 83       	st	Z, r24
     480:	08 95       	ret

00000482 <init_LED_PORTL_pin1>:
     482:	ea e0       	ldi	r30, 0x0A	; 10
     484:	f1 e0       	ldi	r31, 0x01	; 1
     486:	80 81       	ld	r24, Z
     488:	82 60       	ori	r24, 0x02	; 2
     48a:	80 83       	st	Z, r24
     48c:	08 95       	ret

0000048e <init_LED_PORTL_pin2>:
     48e:	ea e0       	ldi	r30, 0x0A	; 10
     490:	f1 e0       	ldi	r31, 0x01	; 1
     492:	80 81       	ld	r24, Z
     494:	84 60       	ori	r24, 0x04	; 4
     496:	80 83       	st	Z, r24
     498:	08 95       	ret

0000049a <init_LED_PORTL_pin5>:
     49a:	ea e0       	ldi	r30, 0x0A	; 10
     49c:	f1 e0       	ldi	r31, 0x01	; 1
     49e:	80 81       	ld	r24, Z
     4a0:	80 62       	ori	r24, 0x20	; 32
     4a2:	80 83       	st	Z, r24
     4a4:	08 95       	ret

000004a6 <init_LED_PORTL_pin6>:
     4a6:	ea e0       	ldi	r30, 0x0A	; 10
     4a8:	f1 e0       	ldi	r31, 0x01	; 1
     4aa:	80 81       	ld	r24, Z
     4ac:	80 64       	ori	r24, 0x40	; 64
     4ae:	80 83       	st	Z, r24
     4b0:	08 95       	ret

000004b2 <enable_LED>:
}

void enable_LED(unsigned int mask) {
    PORTL |= _BV(mask);
     4b2:	eb e0       	ldi	r30, 0x0B	; 11
     4b4:	f1 e0       	ldi	r31, 0x01	; 1
     4b6:	90 81       	ld	r25, Z
     4b8:	21 e0       	ldi	r18, 0x01	; 1
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <enable_LED+0x10>
     4be:	22 0f       	add	r18, r18
     4c0:	33 1f       	adc	r19, r19
     4c2:	8a 95       	dec	r24
     4c4:	e2 f7       	brpl	.-8      	; 0x4be <enable_LED+0xc>
     4c6:	29 2b       	or	r18, r25
     4c8:	20 83       	st	Z, r18
     4ca:	08 95       	ret

000004cc <disable_LED>:
}

void disable_LED(unsigned int mask) {
    PORTL &= ~_BV(mask);
     4cc:	eb e0       	ldi	r30, 0x0B	; 11
     4ce:	f1 e0       	ldi	r31, 0x01	; 1
     4d0:	90 81       	ld	r25, Z
     4d2:	21 e0       	ldi	r18, 0x01	; 1
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <disable_LED+0x10>
     4d8:	22 0f       	add	r18, r18
     4da:	33 1f       	adc	r19, r19
     4dc:	8a 95       	dec	r24
     4de:	e2 f7       	brpl	.-8      	; 0x4d8 <disable_LED+0xc>
     4e0:	20 95       	com	r18
     4e2:	29 23       	and	r18, r25
     4e4:	20 83       	st	Z, r18
     4e6:	08 95       	ret

000004e8 <Idle>:


uint8_t ButtonRead(){
	
	return (1<<BT)&BTPIN;	
}
     4e8:	ff cf       	rjmp	.-2      	; 0x4e8 <Idle>

000004ea <Poll_Joystick>:
     4ea:	0f 2e       	mov	r0, r31
     4ec:	f6 e6       	ldi	r31, 0x66	; 102
     4ee:	2f 2e       	mov	r2, r31
     4f0:	f0 2d       	mov	r31, r0
     4f2:	0f 2e       	mov	r0, r31
     4f4:	ff e6       	ldi	r31, 0x6F	; 111
     4f6:	3f 2e       	mov	r3, r31
     4f8:	f0 2d       	mov	r31, r0
     4fa:	0f 2e       	mov	r0, r31
     4fc:	f7 e1       	ldi	r31, 0x17	; 23
     4fe:	6f 2e       	mov	r6, r31
     500:	f2 e0       	ldi	r31, 0x02	; 2
     502:	7f 2e       	mov	r7, r31
     504:	f0 2d       	mov	r31, r0
     506:	c2 ee       	ldi	r28, 0xE2	; 226
     508:	d4 e1       	ldi	r29, 0x14	; 20
     50a:	0f 2e       	mov	r0, r31
     50c:	f0 e1       	ldi	r31, 0x10	; 16
     50e:	af 2e       	mov	r10, r31
     510:	f2 e0       	ldi	r31, 0x02	; 2
     512:	bf 2e       	mov	r11, r31
     514:	f0 2d       	mov	r31, r0
     516:	0f 2e       	mov	r0, r31
     518:	f5 e2       	ldi	r31, 0x25	; 37
     51a:	4f 2e       	mov	r4, r31
     51c:	f2 e0       	ldi	r31, 0x02	; 2
     51e:	5f 2e       	mov	r5, r31
     520:	f0 2d       	mov	r31, r0
     522:	0f 2e       	mov	r0, r31
     524:	fe e1       	ldi	r31, 0x1E	; 30
     526:	8f 2e       	mov	r8, r31
     528:	f2 e0       	ldi	r31, 0x02	; 2
     52a:	9f 2e       	mov	r9, r31
     52c:	f0 2d       	mov	r31, r0
     52e:	0f 2e       	mov	r0, r31
     530:	f3 e3       	ldi	r31, 0x33	; 51
     532:	cf 2e       	mov	r12, r31
     534:	f2 e0       	ldi	r31, 0x02	; 2
     536:	df 2e       	mov	r13, r31
     538:	f0 2d       	mov	r31, r0
     53a:	06 e0       	ldi	r16, 0x06	; 6
     53c:	15 e1       	ldi	r17, 0x15	; 21
     53e:	0f 2e       	mov	r0, r31
     540:	fc e2       	ldi	r31, 0x2C	; 44
     542:	ef 2e       	mov	r14, r31
     544:	f2 e0       	ldi	r31, 0x02	; 2
     546:	ff 2e       	mov	r15, r31
     548:	f0 2d       	mov	r31, r0
     54a:	87 e0       	ldi	r24, 0x07	; 7
     54c:	ab de       	rcall	.-682    	; 0x2a4 <adc_read>
     54e:	90 93 e1 14 	sts	0x14E1, r25
     552:	80 93 e0 14 	sts	0x14E0, r24
     556:	85 e0       	ldi	r24, 0x05	; 5
     558:	a5 de       	rcall	.-694    	; 0x2a4 <adc_read>
     55a:	90 93 d5 14 	sts	0x14D5, r25
     55e:	80 93 d4 14 	sts	0x14D4, r24
     562:	89 b1       	in	r24, 0x09	; 9
     564:	80 78       	andi	r24, 0x80	; 128
     566:	80 93 d3 14 	sts	0x14D3, r24
     56a:	88 23       	and	r24, r24
     56c:	1c f0       	brlt	.+6      	; 0x574 <Poll_Joystick+0x8a>
     56e:	30 92 01 02 	sts	0x0201, r3
     572:	02 c0       	rjmp	.+4      	; 0x578 <Poll_Joystick+0x8e>
     574:	20 92 01 02 	sts	0x0201, r2
     578:	80 91 e0 14 	lds	r24, 0x14E0
     57c:	90 91 e1 14 	lds	r25, 0x14E1
     580:	8d 3b       	cpi	r24, 0xBD	; 189
     582:	22 e0       	ldi	r18, 0x02	; 2
     584:	92 07       	cpc	r25, r18
     586:	88 f0       	brcs	.+34     	; 0x5aa <Poll_Joystick+0xc0>
     588:	80 91 01 02 	lds	r24, 0x0201
     58c:	1f 92       	push	r1
     58e:	8f 93       	push	r24
     590:	bf 92       	push	r11
     592:	af 92       	push	r10
     594:	df 93       	push	r29
     596:	cf 93       	push	r28
     598:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <sprintf>
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
     5a8:	13 c0       	rjmp	.+38     	; 0x5d0 <Poll_Joystick+0xe6>
     5aa:	8c 32       	cpi	r24, 0x2C	; 44
     5ac:	91 40       	sbci	r25, 0x01	; 1
     5ae:	80 f4       	brcc	.+32     	; 0x5d0 <Poll_Joystick+0xe6>
     5b0:	80 91 01 02 	lds	r24, 0x0201
     5b4:	1f 92       	push	r1
     5b6:	8f 93       	push	r24
     5b8:	7f 92       	push	r7
     5ba:	6f 92       	push	r6
     5bc:	df 93       	push	r29
     5be:	cf 93       	push	r28
     5c0:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <sprintf>
     5c4:	0f 90       	pop	r0
     5c6:	0f 90       	pop	r0
     5c8:	0f 90       	pop	r0
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	80 91 d4 14 	lds	r24, 0x14D4
     5d4:	90 91 d5 14 	lds	r25, 0x14D5
     5d8:	8d 3b       	cpi	r24, 0xBD	; 189
     5da:	22 e0       	ldi	r18, 0x02	; 2
     5dc:	92 07       	cpc	r25, r18
     5de:	88 f0       	brcs	.+34     	; 0x602 <Poll_Joystick+0x118>
     5e0:	80 91 01 02 	lds	r24, 0x0201
     5e4:	1f 92       	push	r1
     5e6:	8f 93       	push	r24
     5e8:	9f 92       	push	r9
     5ea:	8f 92       	push	r8
     5ec:	df 93       	push	r29
     5ee:	cf 93       	push	r28
     5f0:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <sprintf>
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	0f 90       	pop	r0
     5fc:	0f 90       	pop	r0
     5fe:	0f 90       	pop	r0
     600:	13 c0       	rjmp	.+38     	; 0x628 <Poll_Joystick+0x13e>
     602:	8c 32       	cpi	r24, 0x2C	; 44
     604:	91 40       	sbci	r25, 0x01	; 1
     606:	80 f4       	brcc	.+32     	; 0x628 <Poll_Joystick+0x13e>
     608:	80 91 01 02 	lds	r24, 0x0201
     60c:	1f 92       	push	r1
     60e:	8f 93       	push	r24
     610:	5f 92       	push	r5
     612:	4f 92       	push	r4
     614:	df 93       	push	r29
     616:	cf 93       	push	r28
     618:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <sprintf>
     61c:	0f 90       	pop	r0
     61e:	0f 90       	pop	r0
     620:	0f 90       	pop	r0
     622:	0f 90       	pop	r0
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	80 e8       	ldi	r24, 0x80	; 128
     62a:	89 de       	rcall	.-750    	; 0x33e <lcd_command>
     62c:	80 91 d3 14 	lds	r24, 0x14D3
     630:	1f 92       	push	r1
     632:	8f 93       	push	r24
     634:	df 92       	push	r13
     636:	cf 92       	push	r12
     638:	1f 93       	push	r17
     63a:	0f 93       	push	r16
     63c:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <sprintf>
     640:	c8 01       	movw	r24, r16
     642:	c2 de       	rcall	.-636    	; 0x3c8 <lcd_puts>
     644:	80 ec       	ldi	r24, 0xC0	; 192
     646:	7b de       	rcall	.-778    	; 0x33e <lcd_command>
     648:	ce 01       	movw	r24, r28
     64a:	be de       	rcall	.-644    	; 0x3c8 <lcd_puts>
     64c:	61 e0       	ldi	r22, 0x01	; 1
     64e:	70 e0       	ldi	r23, 0x00	; 0
     650:	ce 01       	movw	r24, r28
     652:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <uart_send_string>
     656:	80 91 01 02 	lds	r24, 0x0201
     65a:	1f 92       	push	r1
     65c:	8f 93       	push	r24
     65e:	ff 92       	push	r15
     660:	ef 92       	push	r14
     662:	df 93       	push	r29
     664:	cf 93       	push	r28
     666:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <sprintf>
     66a:	9f ef       	ldi	r25, 0xFF	; 255
     66c:	29 ef       	ldi	r18, 0xF9	; 249
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	91 50       	subi	r25, 0x01	; 1
     672:	20 40       	sbci	r18, 0x00	; 0
     674:	80 40       	sbci	r24, 0x00	; 0
     676:	e1 f7       	brne	.-8      	; 0x670 <Poll_Joystick+0x186>
     678:	00 c0       	rjmp	.+0      	; 0x67a <Poll_Joystick+0x190>
     67a:	00 00       	nop
     67c:	8d b7       	in	r24, 0x3d	; 61
     67e:	9e b7       	in	r25, 0x3e	; 62
     680:	0c 96       	adiw	r24, 0x0c	; 12
     682:	0f b6       	in	r0, 0x3f	; 63
     684:	f8 94       	cli
     686:	9e bf       	out	0x3e, r25	; 62
     688:	0f be       	out	0x3f, r0	; 63
     68a:	8d bf       	out	0x3d, r24	; 61
     68c:	84 e1       	ldi	r24, 0x14	; 20
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	84 d7       	rcall	.+3848   	; 0x159a <Task_Sleep>
     692:	5b cf       	rjmp	.-330    	; 0x54a <Poll_Joystick+0x60>

00000694 <ButtonInit>:
     694:	6f 98       	cbi	0x0d, 7	; 13
     696:	5f 9a       	sbi	0x0b, 7	; 11
     698:	08 95       	ret

0000069a <Init_All>:
     69a:	fc df       	rcall	.-8      	; 0x694 <ButtonInit>
     69c:	10 d7       	rcall	.+3616   	; 0x14be <Mutex_Init>
     69e:	90 93 dd 14 	sts	0x14DD, r25
     6a2:	80 93 dc 14 	sts	0x14DC, r24
     6a6:	0b d7       	rcall	.+3606   	; 0x14be <Mutex_Init>
     6a8:	90 93 18 15 	sts	0x1518, r25
     6ac:	80 93 17 15 	sts	0x1517, r24
     6b0:	21 d7       	rcall	.+3650   	; 0x14f4 <Event_Init>
     6b2:	90 93 1c 15 	sts	0x151C, r25
     6b6:	80 93 1b 15 	sts	0x151B, r24
     6ba:	1c d7       	rcall	.+3640   	; 0x14f4 <Event_Init>
     6bc:	90 93 e9 14 	sts	0x14E9, r25
     6c0:	80 93 e8 14 	sts	0x14E8, r24
     6c4:	e8 dd       	rcall	.-1072   	; 0x296 <adc_init>
     6c6:	8e de       	rcall	.-740    	; 0x3e4 <lcd_init>
     6c8:	24 c0       	rjmp	.+72     	; 0x712 <Task_Terminate>
     6ca:	08 95       	ret

000006cc <a_main>:
// Creates the required tasks and then terminates
void a_main() {


	
    InitPID = Task_Create(Init_All,0,1);
     6cc:	41 e0       	ldi	r20, 0x01	; 1
     6ce:	50 e0       	ldi	r21, 0x00	; 0
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	8d e4       	ldi	r24, 0x4D	; 77
     6d6:	93 e0       	ldi	r25, 0x03	; 3
     6d8:	28 d7       	rcall	.+3664   	; 0x152a <Task_Create>
     6da:	90 93 1a 15 	sts	0x151A, r25
     6de:	80 93 19 15 	sts	0x1519, r24
	PollPID = Task_Create(Poll_Joystick, 1, 1);
     6e2:	41 e0       	ldi	r20, 0x01	; 1
     6e4:	50 e0       	ldi	r21, 0x00	; 0
     6e6:	61 e0       	ldi	r22, 0x01	; 1
     6e8:	70 e0       	ldi	r23, 0x00	; 0
     6ea:	85 e7       	ldi	r24, 0x75	; 117
     6ec:	92 e0       	ldi	r25, 0x02	; 2
     6ee:	1d d7       	rcall	.+3642   	; 0x152a <Task_Create>
     6f0:	90 93 db 14 	sts	0x14DB, r25
     6f4:	80 93 da 14 	sts	0x14DA, r24
	IdlePID = Task_Create(Idle, 8, 1);
     6f8:	41 e0       	ldi	r20, 0x01	; 1
     6fa:	50 e0       	ldi	r21, 0x00	; 0
     6fc:	68 e0       	ldi	r22, 0x08	; 8
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	84 e7       	ldi	r24, 0x74	; 116
     702:	92 e0       	ldi	r25, 0x02	; 2
     704:	12 d7       	rcall	.+3620   	; 0x152a <Task_Create>
     706:	90 93 d9 14 	sts	0x14D9, r25
     70a:	80 93 d8 14 	sts	0x14D8, r24
	Task_Terminate();
     70e:	01 c0       	rjmp	.+2      	; 0x712 <Task_Terminate>
     710:	08 95       	ret

00000712 <Task_Terminate>:
/**
  * Application level task getarg to return intiial arg value
  */
int Task_GetArg(PID p) {
	return (Cp->arg);
}
     712:	80 91 4d 02 	lds	r24, 0x024D
     716:	90 91 4e 02 	lds	r25, 0x024E
     71a:	89 2b       	or	r24, r25
     71c:	51 f0       	breq	.+20     	; 0x732 <Task_Terminate+0x20>
     71e:	f8 94       	cli
     720:	e0 91 4f 02 	lds	r30, 0x024F
     724:	f0 91 50 02 	lds	r31, 0x0250
     728:	e3 5f       	subi	r30, 0xF3	; 243
     72a:	fe 4f       	sbci	r31, 0xFE	; 254
     72c:	84 e0       	ldi	r24, 0x04	; 4
     72e:	80 83       	st	Z, r24
     730:	5d cd       	rjmp	.-1350   	; 0x1ec <Enter_Kernel>
     732:	08 95       	ret

00000734 <Kernel_Create_Task_At>:
     734:	ef 92       	push	r14
     736:	ff 92       	push	r15
     738:	0f 93       	push	r16
     73a:	1f 93       	push	r17
     73c:	cf 93       	push	r28
     73e:	df 93       	push	r29
     740:	1f 92       	push	r1
     742:	1f 92       	push	r1
     744:	cd b7       	in	r28, 0x3d	; 61
     746:	de b7       	in	r29, 0x3e	; 62
     748:	9a 83       	std	Y+2, r25	; 0x02
     74a:	89 83       	std	Y+1, r24	; 0x01
     74c:	dc 01       	movw	r26, r24
     74e:	7c 01       	movw	r14, r24
     750:	04 e0       	ldi	r16, 0x04	; 4
     752:	e0 0e       	add	r14, r16
     754:	f1 1c       	adc	r15, r1
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	f7 01       	movw	r30, r14
     75c:	8c 01       	movw	r16, r24
     75e:	11 92       	st	Z+, r1
     760:	01 50       	subi	r16, 0x01	; 1
     762:	10 40       	sbci	r17, 0x00	; 0
     764:	e1 f7       	brne	.-8      	; 0x75e <Kernel_Create_Task_At+0x2a>
     766:	fd 01       	movw	r30, r26
     768:	ed 5f       	subi	r30, 0xFD	; 253
     76a:	fe 4f       	sbci	r31, 0xFE	; 254
     76c:	89 e8       	ldi	r24, 0x89	; 137
     76e:	93 e0       	ldi	r25, 0x03	; 3
     770:	80 83       	st	Z, r24
     772:	31 97       	sbiw	r30, 0x01	; 1
     774:	90 83       	st	Z, r25
     776:	31 97       	sbiw	r30, 0x01	; 1
     778:	60 83       	st	Z, r22
     77a:	31 97       	sbiw	r30, 0x01	; 1
     77c:	70 83       	st	Z, r23
     77e:	31 97       	sbiw	r30, 0x01	; 1
     780:	10 82       	st	Z, r1
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	92 93       	st	-Z, r25
     786:	9f 5f       	subi	r25, 0xFF	; 255
     788:	92 32       	cpi	r25, 0x22	; 34
     78a:	e1 f7       	brne	.-8      	; 0x784 <Kernel_Create_Task_At+0x50>
     78c:	a4 52       	subi	r26, 0x24	; 36
     78e:	bf 4f       	sbci	r27, 0xFF	; 255
     790:	e9 81       	ldd	r30, Y+1	; 0x01
     792:	fa 81       	ldd	r31, Y+2	; 0x02
     794:	b3 83       	std	Z+3, r27	; 0x03
     796:	a2 83       	std	Z+2, r26	; 0x02
     798:	df 01       	movw	r26, r30
     79a:	a5 5f       	subi	r26, 0xF5	; 245
     79c:	be 4f       	sbci	r27, 0xFE	; 254
     79e:	11 96       	adiw	r26, 0x01	; 1
     7a0:	7c 93       	st	X, r23
     7a2:	6e 93       	st	-X, r22
     7a4:	12 96       	adiw	r26, 0x02	; 2
     7a6:	1c 92       	st	X, r1
     7a8:	80 91 49 02 	lds	r24, 0x0249
     7ac:	90 91 4a 02 	lds	r25, 0x024A
     7b0:	91 83       	std	Z+1, r25	; 0x01
     7b2:	80 83       	st	Z, r24
     7b4:	89 81       	ldd	r24, Y+1	; 0x01
     7b6:	9a 81       	ldd	r25, Y+2	; 0x02
     7b8:	fc 01       	movw	r30, r24
     7ba:	eb 5f       	subi	r30, 0xFB	; 251
     7bc:	fe 4f       	sbci	r31, 0xFE	; 254
     7be:	51 83       	std	Z+1, r21	; 0x01
     7c0:	40 83       	st	Z, r20
     7c2:	32 96       	adiw	r30, 0x02	; 2
     7c4:	51 83       	std	Z+1, r21	; 0x01
     7c6:	40 83       	st	Z, r20
     7c8:	32 96       	adiw	r30, 0x02	; 2
     7ca:	31 83       	std	Z+1, r19	; 0x01
     7cc:	20 83       	st	Z, r18
     7ce:	71 96       	adiw	r30, 0x11	; 17
     7d0:	11 82       	std	Z+1, r1	; 0x01
     7d2:	10 82       	st	Z, r1
     7d4:	34 97       	sbiw	r30, 0x04	; 4
     7d6:	23 e6       	ldi	r18, 0x63	; 99
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	31 83       	std	Z+1, r19	; 0x01
     7dc:	20 83       	st	Z, r18
     7de:	20 91 4b 02 	lds	r18, 0x024B
     7e2:	30 91 4c 02 	lds	r19, 0x024C
     7e6:	2f 5f       	subi	r18, 0xFF	; 255
     7e8:	3f 4f       	sbci	r19, 0xFF	; 255
     7ea:	30 93 4c 02 	sts	0x024C, r19
     7ee:	20 93 4b 02 	sts	0x024B, r18
     7f2:	20 91 49 02 	lds	r18, 0x0249
     7f6:	30 91 4a 02 	lds	r19, 0x024A
     7fa:	2f 5f       	subi	r18, 0xFF	; 255
     7fc:	3f 4f       	sbci	r19, 0xFF	; 255
     7fe:	30 93 4a 02 	sts	0x024A, r19
     802:	20 93 49 02 	sts	0x0249, r18
     806:	72 97       	sbiw	r30, 0x12	; 18
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	80 83       	st	Z, r24
     80c:	41 e4       	ldi	r20, 0x41	; 65
     80e:	52 e0       	ldi	r21, 0x02	; 2
     810:	6d e3       	ldi	r22, 0x3D	; 61
     812:	75 e1       	ldi	r23, 0x15	; 21
     814:	ce 01       	movw	r24, r28
     816:	01 96       	adiw	r24, 0x01	; 1
     818:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <enqueueRQ>
     81c:	e9 81       	ldd	r30, Y+1	; 0x01
     81e:	fa 81       	ldd	r31, Y+2	; 0x02
     820:	80 81       	ld	r24, Z
     822:	91 81       	ldd	r25, Z+1	; 0x01
     824:	0f 90       	pop	r0
     826:	0f 90       	pop	r0
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	1f 91       	pop	r17
     82e:	0f 91       	pop	r16
     830:	ff 90       	pop	r15
     832:	ef 90       	pop	r14
     834:	08 95       	ret

00000836 <Kernel_Create_Task>:
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	ec 01       	movw	r28, r24
     83c:	80 91 4b 02 	lds	r24, 0x024B
     840:	90 91 4c 02 	lds	r25, 0x024C
     844:	40 97       	sbiw	r24, 0x10	; 16
     846:	21 f1       	breq	.+72     	; 0x890 <Kernel_Create_Task+0x5a>
     848:	80 91 b5 03 	lds	r24, 0x03B5
     84c:	88 23       	and	r24, r24
     84e:	71 f0       	breq	.+28     	; 0x86c <Kernel_Create_Task+0x36>
     850:	a3 ed       	ldi	r26, 0xD3	; 211
     852:	b4 e0       	ldi	r27, 0x04	; 4
     854:	e1 e0       	ldi	r30, 0x01	; 1
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	9c 91       	ld	r25, X
     85a:	99 23       	and	r25, r25
     85c:	49 f0       	breq	.+18     	; 0x870 <Kernel_Create_Task+0x3a>
     85e:	31 96       	adiw	r30, 0x01	; 1
     860:	a2 5e       	subi	r26, 0xE2	; 226
     862:	be 4f       	sbci	r27, 0xFE	; 254
     864:	e0 31       	cpi	r30, 0x10	; 16
     866:	f1 05       	cpc	r31, r1
     868:	b9 f7       	brne	.-18     	; 0x858 <Kernel_Create_Task+0x22>
     86a:	02 c0       	rjmp	.+4      	; 0x870 <Kernel_Create_Task+0x3a>
     86c:	e0 e0       	ldi	r30, 0x00	; 0
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	9a 01       	movw	r18, r20
     872:	ab 01       	movw	r20, r22
     874:	be 01       	movw	r22, r28
     876:	ae e1       	ldi	r26, 0x1E	; 30
     878:	b1 e0       	ldi	r27, 0x01	; 1
     87a:	ea 9f       	mul	r30, r26
     87c:	c0 01       	movw	r24, r0
     87e:	eb 9f       	mul	r30, r27
     880:	90 0d       	add	r25, r0
     882:	fa 9f       	mul	r31, r26
     884:	90 0d       	add	r25, r0
     886:	11 24       	eor	r1, r1
     888:	8f 54       	subi	r24, 0x4F	; 79
     88a:	9d 4f       	sbci	r25, 0xFD	; 253
     88c:	53 df       	rcall	.-346    	; 0x734 <Kernel_Create_Task_At>
     88e:	00 c0       	rjmp	.+0      	; 0x890 <Kernel_Create_Task+0x5a>
     890:	df 91       	pop	r29
     892:	cf 91       	pop	r28
     894:	08 95       	ret

00000896 <Kernel_Init_Mutex_At>:
     896:	fc 01       	movw	r30, r24
     898:	80 91 47 02 	lds	r24, 0x0247
     89c:	90 91 48 02 	lds	r25, 0x0248
     8a0:	91 83       	std	Z+1, r25	; 0x01
     8a2:	80 83       	st	Z, r24
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	82 83       	std	Z+2, r24	; 0x02
     8a8:	80 91 47 02 	lds	r24, 0x0247
     8ac:	90 91 48 02 	lds	r25, 0x0248
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	90 93 48 02 	sts	0x0248, r25
     8b6:	80 93 47 02 	sts	0x0247, r24
     8ba:	80 81       	ld	r24, Z
     8bc:	91 81       	ldd	r25, Z+1	; 0x01
     8be:	08 95       	ret

000008c0 <Kernel_Init_Event_At>:
     8c0:	fc 01       	movw	r30, r24
     8c2:	80 91 45 02 	lds	r24, 0x0245
     8c6:	90 91 46 02 	lds	r25, 0x0246
     8ca:	91 83       	std	Z+1, r25	; 0x01
     8cc:	80 83       	st	Z, r24
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	82 83       	std	Z+2, r24	; 0x02
     8d2:	14 82       	std	Z+4, r1	; 0x04
     8d4:	13 82       	std	Z+3, r1	; 0x03
     8d6:	80 91 45 02 	lds	r24, 0x0245
     8da:	90 91 46 02 	lds	r25, 0x0246
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	90 93 46 02 	sts	0x0246, r25
     8e4:	80 93 45 02 	sts	0x0245, r24
     8e8:	80 81       	ld	r24, Z
     8ea:	91 81       	ldd	r25, Z+1	; 0x01
     8ec:	08 95       	ret

000008ee <OS_Init>:
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
     8f2:	10 92 4c 02 	sts	0x024C, r1
     8f6:	10 92 4b 02 	sts	0x024B, r1
     8fa:	10 92 4e 02 	sts	0x024E, r1
     8fe:	10 92 4d 02 	sts	0x024D, r1
     902:	10 92 48 02 	sts	0x0248, r1
     906:	10 92 47 02 	sts	0x0247, r1
     90a:	10 92 46 02 	sts	0x0246, r1
     90e:	10 92 45 02 	sts	0x0245, r1
     912:	10 92 4a 02 	sts	0x024A, r1
     916:	10 92 49 02 	sts	0x0249, r1
     91a:	e1 eb       	ldi	r30, 0xB1	; 177
     91c:	f2 e0       	ldi	r31, 0x02	; 2
     91e:	a5 eb       	ldi	r26, 0xB5	; 181
     920:	b3 e0       	ldi	r27, 0x03	; 3
     922:	41 e9       	ldi	r20, 0x91	; 145
     924:	54 e1       	ldi	r21, 0x14	; 20
     926:	2e e1       	ldi	r18, 0x1E	; 30
     928:	31 e0       	ldi	r19, 0x01	; 1
     92a:	83 e6       	ldi	r24, 0x63	; 99
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	ef 01       	movw	r28, r30
     930:	b9 01       	movw	r22, r18
     932:	19 92       	st	Y+, r1
     934:	61 50       	subi	r22, 0x01	; 1
     936:	70 40       	sbci	r23, 0x00	; 0
     938:	e1 f7       	brne	.-8      	; 0x932 <OS_Init+0x44>
     93a:	1c 92       	st	X, r1
     93c:	53 96       	adiw	r26, 0x13	; 19
     93e:	9c 93       	st	X, r25
     940:	8e 93       	st	-X, r24
     942:	52 97       	sbiw	r26, 0x12	; 18
     944:	11 82       	std	Z+1, r1	; 0x01
     946:	10 82       	st	Z, r1
     948:	e2 5e       	subi	r30, 0xE2	; 226
     94a:	fe 4f       	sbci	r31, 0xFE	; 254
     94c:	a2 5e       	subi	r26, 0xE2	; 226
     94e:	be 4f       	sbci	r27, 0xFE	; 254
     950:	e4 17       	cp	r30, r20
     952:	f5 07       	cpc	r31, r21
     954:	61 f7       	brne	.-40     	; 0x92e <OS_Init+0x40>
     956:	eb e7       	ldi	r30, 0x7B	; 123
     958:	f2 e0       	ldi	r31, 0x02	; 2
     95a:	23 eb       	ldi	r18, 0xB3	; 179
     95c:	32 e0       	ldi	r19, 0x02	; 2
     95e:	87 e0       	ldi	r24, 0x07	; 7
     960:	df 01       	movw	r26, r30
     962:	12 97       	sbiw	r26, 0x02	; 2
     964:	ed 01       	movw	r28, r26
     966:	68 2f       	mov	r22, r24
     968:	19 92       	st	Y+, r1
     96a:	6a 95       	dec	r22
     96c:	e9 f7       	brne	.-6      	; 0x968 <OS_Init+0x7a>
     96e:	10 82       	st	Z, r1
     970:	37 96       	adiw	r30, 0x07	; 7
     972:	e2 17       	cp	r30, r18
     974:	f3 07       	cpc	r31, r19
     976:	a1 f7       	brne	.-24     	; 0x960 <OS_Init+0x72>
     978:	e3 e5       	ldi	r30, 0x53	; 83
     97a:	f2 e0       	ldi	r31, 0x02	; 2
     97c:	2b e7       	ldi	r18, 0x7B	; 123
     97e:	32 e0       	ldi	r19, 0x02	; 2
     980:	85 e0       	ldi	r24, 0x05	; 5
     982:	df 01       	movw	r26, r30
     984:	12 97       	sbiw	r26, 0x02	; 2
     986:	ed 01       	movw	r28, r26
     988:	68 2f       	mov	r22, r24
     98a:	19 92       	st	Y+, r1
     98c:	6a 95       	dec	r22
     98e:	e9 f7       	brne	.-6      	; 0x98a <OS_Init+0x9c>
     990:	10 82       	st	Z, r1
     992:	35 96       	adiw	r30, 0x05	; 5
     994:	e2 17       	cp	r30, r18
     996:	f3 07       	cpc	r31, r19
     998:	a1 f7       	brne	.-24     	; 0x982 <OS_Init+0x94>
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	08 95       	ret

000009a0 <OS_Abort>:
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	0e 94 b2 12 	call	0x2564	; 0x2564 <_exit>

000009a8 <Dispatch>:
     9a8:	61 e4       	ldi	r22, 0x41	; 65
     9aa:	72 e0       	ldi	r23, 0x02	; 2
     9ac:	8d e3       	ldi	r24, 0x3D	; 61
     9ae:	95 e1       	ldi	r25, 0x15	; 21
     9b0:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <dequeueRQ>
     9b4:	fc 01       	movw	r30, r24
     9b6:	90 93 50 02 	sts	0x0250, r25
     9ba:	80 93 4f 02 	sts	0x024F, r24
     9be:	89 2b       	or	r24, r25
     9c0:	09 f4       	brne	.+2      	; 0x9c4 <Dispatch+0x1c>
     9c2:	ee df       	rcall	.-36     	; 0x9a0 <OS_Abort>
     9c4:	82 81       	ldd	r24, Z+2	; 0x02
     9c6:	93 81       	ldd	r25, Z+3	; 0x03
     9c8:	90 93 5e 15 	sts	0x155E, r25
     9cc:	80 93 5d 15 	sts	0x155D, r24
     9d0:	82 e0       	ldi	r24, 0x02	; 2
     9d2:	df 01       	movw	r26, r30
     9d4:	ac 5f       	subi	r26, 0xFC	; 252
     9d6:	be 4f       	sbci	r27, 0xFE	; 254
     9d8:	8c 93       	st	X, r24
     9da:	80 81       	ld	r24, Z
     9dc:	91 81       	ldd	r25, Z+1	; 0x01
     9de:	02 97       	sbiw	r24, 0x02	; 2
     9e0:	20 f4       	brcc	.+8      	; 0x9ea <Dispatch+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	65 cd       	rjmp	.-1334   	; 0x4b2 <enable_LED>
     9e8:	08 95       	ret
     9ea:	80 81       	ld	r24, Z
     9ec:	91 81       	ldd	r25, Z+1	; 0x01
     9ee:	02 97       	sbiw	r24, 0x02	; 2
     9f0:	21 f4       	brne	.+8      	; 0x9fa <Dispatch+0x52>
     9f2:	85 e0       	ldi	r24, 0x05	; 5
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	5d cd       	rjmp	.-1350   	; 0x4b2 <enable_LED>
     9f8:	08 95       	ret
     9fa:	80 81       	ld	r24, Z
     9fc:	91 81       	ldd	r25, Z+1	; 0x01
     9fe:	03 97       	sbiw	r24, 0x03	; 3
     a00:	19 f4       	brne	.+6      	; 0xa08 <Dispatch+0x60>
     a02:	86 e0       	ldi	r24, 0x06	; 6
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	55 cd       	rjmp	.-1366   	; 0x4b2 <enable_LED>
     a08:	08 95       	ret

00000a0a <Kernel_Unlock_Mutex>:
     a0a:	0f 93       	push	r16
     a0c:	1f 93       	push	r17
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	1f 92       	push	r1
     a14:	1f 92       	push	r1
     a16:	cd b7       	in	r28, 0x3d	; 61
     a18:	de b7       	in	r29, 0x3e	; 62
     a1a:	a0 91 4f 02 	lds	r26, 0x024F
     a1e:	b0 91 50 02 	lds	r27, 0x0250
     a22:	fd 01       	movw	r30, r26
     a24:	ec 5e       	subi	r30, 0xEC	; 236
     a26:	fe 4f       	sbci	r31, 0xFE	; 254
     a28:	40 81       	ld	r20, Z
     a2a:	51 81       	ldd	r21, Z+1	; 0x01
     a2c:	e9 e7       	ldi	r30, 0x79	; 121
     a2e:	f2 e0       	ldi	r31, 0x02	; 2
     a30:	00 e0       	ldi	r16, 0x00	; 0
     a32:	10 e0       	ldi	r17, 0x00	; 0
     a34:	80 81       	ld	r24, Z
     a36:	91 81       	ldd	r25, Z+1	; 0x01
     a38:	84 17       	cp	r24, r20
     a3a:	95 07       	cpc	r25, r21
     a3c:	39 f0       	breq	.+14     	; 0xa4c <Kernel_Unlock_Mutex+0x42>
     a3e:	0f 5f       	subi	r16, 0xFF	; 255
     a40:	1f 4f       	sbci	r17, 0xFF	; 255
     a42:	37 96       	adiw	r30, 0x07	; 7
     a44:	08 30       	cpi	r16, 0x08	; 8
     a46:	11 05       	cpc	r17, r1
     a48:	a9 f7       	brne	.-22     	; 0xa34 <Kernel_Unlock_Mutex+0x2a>
     a4a:	f8 c0       	rjmp	.+496    	; 0xc3c <Kernel_Unlock_Mutex+0x232>
     a4c:	8d 91       	ld	r24, X+
     a4e:	9c 91       	ld	r25, X
     a50:	11 97       	sbiw	r26, 0x01	; 1
     a52:	27 e0       	ldi	r18, 0x07	; 7
     a54:	20 9f       	mul	r18, r16
     a56:	f0 01       	movw	r30, r0
     a58:	21 9f       	mul	r18, r17
     a5a:	f0 0d       	add	r31, r0
     a5c:	11 24       	eor	r1, r1
     a5e:	e7 58       	subi	r30, 0x87	; 135
     a60:	fd 4f       	sbci	r31, 0xFD	; 253
     a62:	23 81       	ldd	r18, Z+3	; 0x03
     a64:	34 81       	ldd	r19, Z+4	; 0x04
     a66:	28 17       	cp	r18, r24
     a68:	39 07       	cpc	r19, r25
     a6a:	09 f0       	breq	.+2      	; 0xa6e <Kernel_Unlock_Mutex+0x64>
     a6c:	e7 c0       	rjmp	.+462    	; 0xc3c <Kernel_Unlock_Mutex+0x232>
     a6e:	ac 5f       	subi	r26, 0xFC	; 252
     a70:	be 4f       	sbci	r27, 0xFE	; 254
     a72:	8c 91       	ld	r24, X
     a74:	86 30       	cpi	r24, 0x06	; 6
     a76:	09 f0       	breq	.+2      	; 0xa7a <Kernel_Unlock_Mutex+0x70>
     a78:	4e c0       	rjmp	.+156    	; 0xb16 <Kernel_Unlock_Mutex+0x10c>
     a7a:	6d e3       	ldi	r22, 0x3D	; 61
     a7c:	72 e0       	ldi	r23, 0x02	; 2
     a7e:	8f e5       	ldi	r24, 0x5F	; 95
     a80:	95 e1       	ldi	r25, 0x15	; 21
     a82:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <dequeueWQ>
     a86:	9a 83       	std	Y+2, r25	; 0x02
     a88:	89 83       	std	Y+1, r24	; 0x01
     a8a:	00 97       	sbiw	r24, 0x00	; 0
     a8c:	79 f4       	brne	.+30     	; 0xaac <Kernel_Unlock_Mutex+0xa2>
     a8e:	87 e0       	ldi	r24, 0x07	; 7
     a90:	80 9f       	mul	r24, r16
     a92:	f0 01       	movw	r30, r0
     a94:	81 9f       	mul	r24, r17
     a96:	f0 0d       	add	r31, r0
     a98:	11 24       	eor	r1, r1
     a9a:	e7 58       	subi	r30, 0x87	; 135
     a9c:	fd 4f       	sbci	r31, 0xFD	; 253
     a9e:	16 82       	std	Z+6, r1	; 0x06
     aa0:	15 82       	std	Z+5, r1	; 0x05
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	82 83       	std	Z+2, r24	; 0x02
     aa6:	14 82       	std	Z+4, r1	; 0x04
     aa8:	13 82       	std	Z+3, r1	; 0x03
     aaa:	c8 c0       	rjmp	.+400    	; 0xc3c <Kernel_Unlock_Mutex+0x232>
     aac:	27 e0       	ldi	r18, 0x07	; 7
     aae:	20 9f       	mul	r18, r16
     ab0:	f0 01       	movw	r30, r0
     ab2:	21 9f       	mul	r18, r17
     ab4:	f0 0d       	add	r31, r0
     ab6:	11 24       	eor	r1, r1
     ab8:	e7 58       	subi	r30, 0x87	; 135
     aba:	fd 4f       	sbci	r31, 0xFD	; 253
     abc:	21 e0       	ldi	r18, 0x01	; 1
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	36 83       	std	Z+6, r19	; 0x06
     ac2:	25 83       	std	Z+5, r18	; 0x05
     ac4:	dc 01       	movw	r26, r24
     ac6:	2d 91       	ld	r18, X+
     ac8:	3c 91       	ld	r19, X
     aca:	34 83       	std	Z+4, r19	; 0x04
     acc:	23 83       	std	Z+3, r18	; 0x03
     ace:	20 91 4f 02 	lds	r18, 0x024F
     ad2:	30 91 50 02 	lds	r19, 0x0250
     ad6:	d9 01       	movw	r26, r18
     ad8:	a9 5f       	subi	r26, 0xF9	; 249
     ada:	be 4f       	sbci	r27, 0xFE	; 254
     adc:	4d 91       	ld	r20, X+
     ade:	5c 91       	ld	r21, X
     ae0:	11 97       	sbiw	r26, 0x01	; 1
     ae2:	fc 01       	movw	r30, r24
     ae4:	e9 5f       	subi	r30, 0xF9	; 249
     ae6:	fe 4f       	sbci	r31, 0xFE	; 254
     ae8:	51 83       	std	Z+1, r21	; 0x01
     aea:	40 83       	st	Z, r20
     aec:	33 97       	sbiw	r30, 0x03	; 3
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	80 83       	st	Z, r24
     af2:	f9 01       	movw	r30, r18
     af4:	eb 5f       	subi	r30, 0xFB	; 251
     af6:	fe 4f       	sbci	r31, 0xFE	; 254
     af8:	40 81       	ld	r20, Z
     afa:	51 81       	ldd	r21, Z+1	; 0x01
     afc:	11 96       	adiw	r26, 0x01	; 1
     afe:	5c 93       	st	X, r21
     b00:	4e 93       	st	-X, r20
     b02:	31 97       	sbiw	r30, 0x01	; 1
     b04:	80 83       	st	Z, r24
     b06:	41 e4       	ldi	r20, 0x41	; 65
     b08:	52 e0       	ldi	r21, 0x02	; 2
     b0a:	6d e3       	ldi	r22, 0x3D	; 61
     b0c:	75 e1       	ldi	r23, 0x15	; 21
     b0e:	ce 01       	movw	r24, r28
     b10:	01 96       	adiw	r24, 0x01	; 1
     b12:	60 d7       	rcall	.+3776   	; 0x19d4 <enqueueRQ>
     b14:	93 c0       	rjmp	.+294    	; 0xc3c <Kernel_Unlock_Mutex+0x232>
     b16:	87 e0       	ldi	r24, 0x07	; 7
     b18:	80 9f       	mul	r24, r16
     b1a:	f0 01       	movw	r30, r0
     b1c:	81 9f       	mul	r24, r17
     b1e:	f0 0d       	add	r31, r0
     b20:	11 24       	eor	r1, r1
     b22:	e7 58       	subi	r30, 0x87	; 135
     b24:	fd 4f       	sbci	r31, 0xFD	; 253
     b26:	85 81       	ldd	r24, Z+5	; 0x05
     b28:	96 81       	ldd	r25, Z+6	; 0x06
     b2a:	82 30       	cpi	r24, 0x02	; 2
     b2c:	91 05       	cpc	r25, r1
     b2e:	60 f0       	brcs	.+24     	; 0xb48 <Kernel_Unlock_Mutex+0x13e>
     b30:	27 e0       	ldi	r18, 0x07	; 7
     b32:	20 9f       	mul	r18, r16
     b34:	f0 01       	movw	r30, r0
     b36:	21 9f       	mul	r18, r17
     b38:	f0 0d       	add	r31, r0
     b3a:	11 24       	eor	r1, r1
     b3c:	e7 58       	subi	r30, 0x87	; 135
     b3e:	fd 4f       	sbci	r31, 0xFD	; 253
     b40:	01 97       	sbiw	r24, 0x01	; 1
     b42:	96 83       	std	Z+6, r25	; 0x06
     b44:	85 83       	std	Z+5, r24	; 0x05
     b46:	7a c0       	rjmp	.+244    	; 0xc3c <Kernel_Unlock_Mutex+0x232>
     b48:	6d e3       	ldi	r22, 0x3D	; 61
     b4a:	72 e0       	ldi	r23, 0x02	; 2
     b4c:	8f e5       	ldi	r24, 0x5F	; 95
     b4e:	95 e1       	ldi	r25, 0x15	; 21
     b50:	a4 d7       	rcall	.+3912   	; 0x1a9a <dequeueWQ>
     b52:	9a 83       	std	Y+2, r25	; 0x02
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	00 97       	sbiw	r24, 0x00	; 0
     b58:	a9 f5       	brne	.+106    	; 0xbc4 <Kernel_Unlock_Mutex+0x1ba>
     b5a:	87 e0       	ldi	r24, 0x07	; 7
     b5c:	80 9f       	mul	r24, r16
     b5e:	f0 01       	movw	r30, r0
     b60:	81 9f       	mul	r24, r17
     b62:	f0 0d       	add	r31, r0
     b64:	11 24       	eor	r1, r1
     b66:	e7 58       	subi	r30, 0x87	; 135
     b68:	fd 4f       	sbci	r31, 0xFD	; 253
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	82 83       	std	Z+2, r24	; 0x02
     b6e:	16 82       	std	Z+6, r1	; 0x06
     b70:	15 82       	std	Z+5, r1	; 0x05
     b72:	14 82       	std	Z+4, r1	; 0x04
     b74:	13 82       	std	Z+3, r1	; 0x03
     b76:	e0 91 4f 02 	lds	r30, 0x024F
     b7a:	f0 91 50 02 	lds	r31, 0x0250
     b7e:	df 01       	movw	r26, r30
     b80:	ab 5f       	subi	r26, 0xFB	; 251
     b82:	be 4f       	sbci	r27, 0xFE	; 254
     b84:	8d 91       	ld	r24, X+
     b86:	9c 91       	ld	r25, X
     b88:	11 97       	sbiw	r26, 0x01	; 1
     b8a:	12 96       	adiw	r26, 0x02	; 2
     b8c:	11 96       	adiw	r26, 0x01	; 1
     b8e:	9c 93       	st	X, r25
     b90:	8e 93       	st	-X, r24
     b92:	80 81       	ld	r24, Z
     b94:	91 81       	ldd	r25, Z+1	; 0x01
     b96:	02 97       	sbiw	r24, 0x02	; 2
     b98:	20 f4       	brcc	.+8      	; 0xba2 <Kernel_Unlock_Mutex+0x198>
     b9a:	82 e0       	ldi	r24, 0x02	; 2
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	89 dc       	rcall	.-1774   	; 0x4b2 <enable_LED>
     ba0:	4d c0       	rjmp	.+154    	; 0xc3c <Kernel_Unlock_Mutex+0x232>
     ba2:	80 81       	ld	r24, Z
     ba4:	91 81       	ldd	r25, Z+1	; 0x01
     ba6:	02 97       	sbiw	r24, 0x02	; 2
     ba8:	21 f4       	brne	.+8      	; 0xbb2 <Kernel_Unlock_Mutex+0x1a8>
     baa:	85 e0       	ldi	r24, 0x05	; 5
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	81 dc       	rcall	.-1790   	; 0x4b2 <enable_LED>
     bb0:	45 c0       	rjmp	.+138    	; 0xc3c <Kernel_Unlock_Mutex+0x232>
     bb2:	80 81       	ld	r24, Z
     bb4:	91 81       	ldd	r25, Z+1	; 0x01
     bb6:	03 97       	sbiw	r24, 0x03	; 3
     bb8:	09 f0       	breq	.+2      	; 0xbbc <Kernel_Unlock_Mutex+0x1b2>
     bba:	40 c0       	rjmp	.+128    	; 0xc3c <Kernel_Unlock_Mutex+0x232>
     bbc:	86 e0       	ldi	r24, 0x06	; 6
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	78 dc       	rcall	.-1808   	; 0x4b2 <enable_LED>
     bc2:	3c c0       	rjmp	.+120    	; 0xc3c <Kernel_Unlock_Mutex+0x232>
     bc4:	27 e0       	ldi	r18, 0x07	; 7
     bc6:	20 9f       	mul	r18, r16
     bc8:	f0 01       	movw	r30, r0
     bca:	21 9f       	mul	r18, r17
     bcc:	f0 0d       	add	r31, r0
     bce:	11 24       	eor	r1, r1
     bd0:	e7 58       	subi	r30, 0x87	; 135
     bd2:	fd 4f       	sbci	r31, 0xFD	; 253
     bd4:	21 e0       	ldi	r18, 0x01	; 1
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	36 83       	std	Z+6, r19	; 0x06
     bda:	25 83       	std	Z+5, r18	; 0x05
     bdc:	dc 01       	movw	r26, r24
     bde:	2d 91       	ld	r18, X+
     be0:	3c 91       	ld	r19, X
     be2:	34 83       	std	Z+4, r19	; 0x04
     be4:	23 83       	std	Z+3, r18	; 0x03
     be6:	20 91 4f 02 	lds	r18, 0x024F
     bea:	30 91 50 02 	lds	r19, 0x0250
     bee:	d9 01       	movw	r26, r18
     bf0:	a9 5f       	subi	r26, 0xF9	; 249
     bf2:	be 4f       	sbci	r27, 0xFE	; 254
     bf4:	4d 91       	ld	r20, X+
     bf6:	5c 91       	ld	r21, X
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	fc 01       	movw	r30, r24
     bfc:	e9 5f       	subi	r30, 0xF9	; 249
     bfe:	fe 4f       	sbci	r31, 0xFE	; 254
     c00:	51 83       	std	Z+1, r21	; 0x01
     c02:	40 83       	st	Z, r20
     c04:	33 97       	sbiw	r30, 0x03	; 3
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	80 83       	st	Z, r24
     c0a:	f9 01       	movw	r30, r18
     c0c:	eb 5f       	subi	r30, 0xFB	; 251
     c0e:	fe 4f       	sbci	r31, 0xFE	; 254
     c10:	40 81       	ld	r20, Z
     c12:	51 81       	ldd	r21, Z+1	; 0x01
     c14:	11 96       	adiw	r26, 0x01	; 1
     c16:	5c 93       	st	X, r21
     c18:	4e 93       	st	-X, r20
     c1a:	31 97       	sbiw	r30, 0x01	; 1
     c1c:	80 83       	st	Z, r24
     c1e:	41 e4       	ldi	r20, 0x41	; 65
     c20:	52 e0       	ldi	r21, 0x02	; 2
     c22:	6d e3       	ldi	r22, 0x3D	; 61
     c24:	75 e1       	ldi	r23, 0x15	; 21
     c26:	ce 01       	movw	r24, r28
     c28:	01 96       	adiw	r24, 0x01	; 1
     c2a:	d4 d6       	rcall	.+3496   	; 0x19d4 <enqueueRQ>
     c2c:	41 e4       	ldi	r20, 0x41	; 65
     c2e:	52 e0       	ldi	r21, 0x02	; 2
     c30:	6d e3       	ldi	r22, 0x3D	; 61
     c32:	75 e1       	ldi	r23, 0x15	; 21
     c34:	8f e4       	ldi	r24, 0x4F	; 79
     c36:	92 e0       	ldi	r25, 0x02	; 2
     c38:	cd d6       	rcall	.+3482   	; 0x19d4 <enqueueRQ>
     c3a:	b6 de       	rcall	.-660    	; 0x9a8 <Dispatch>
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	df 91       	pop	r29
     c42:	cf 91       	pop	r28
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	08 95       	ret

00000c4a <OS_Start>:
     c4a:	2f 92       	push	r2
     c4c:	3f 92       	push	r3
     c4e:	4f 92       	push	r4
     c50:	5f 92       	push	r5
     c52:	6f 92       	push	r6
     c54:	7f 92       	push	r7
     c56:	8f 92       	push	r8
     c58:	9f 92       	push	r9
     c5a:	af 92       	push	r10
     c5c:	bf 92       	push	r11
     c5e:	cf 92       	push	r12
     c60:	df 92       	push	r13
     c62:	ef 92       	push	r14
     c64:	ff 92       	push	r15
     c66:	0f 93       	push	r16
     c68:	1f 93       	push	r17
     c6a:	cf 93       	push	r28
     c6c:	df 93       	push	r29
     c6e:	00 d0       	rcall	.+0      	; 0xc70 <OS_Start+0x26>
     c70:	1f 92       	push	r1
     c72:	cd b7       	in	r28, 0x3d	; 61
     c74:	de b7       	in	r29, 0x3e	; 62
     c76:	80 91 4d 02 	lds	r24, 0x024D
     c7a:	90 91 4e 02 	lds	r25, 0x024E
     c7e:	89 2b       	or	r24, r25
     c80:	09 f0       	breq	.+2      	; 0xc84 <OS_Start+0x3a>
     c82:	06 c4       	rjmp	.+2060   	; 0x1490 <OS_Start+0x846>
     c84:	80 91 4b 02 	lds	r24, 0x024B
     c88:	90 91 4c 02 	lds	r25, 0x024C
     c8c:	89 2b       	or	r24, r25
     c8e:	09 f4       	brne	.+2      	; 0xc92 <OS_Start+0x48>
     c90:	ff c3       	rjmp	.+2046   	; 0x1490 <OS_Start+0x846>
     c92:	f8 94       	cli
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	90 93 4e 02 	sts	0x024E, r25
     c9c:	80 93 4d 02 	sts	0x024D, r24
     ca0:	83 de       	rcall	.-762    	; 0x9a8 <Dispatch>
     ca2:	0f 2e       	mov	r0, r31
     ca4:	f1 e5       	ldi	r31, 0x51	; 81
     ca6:	ef 2e       	mov	r14, r31
     ca8:	f2 e0       	ldi	r31, 0x02	; 2
     caa:	ff 2e       	mov	r15, r31
     cac:	f0 2d       	mov	r31, r0
     cae:	0f 2e       	mov	r0, r31
     cb0:	fe e1       	ldi	r31, 0x1E	; 30
     cb2:	af 2e       	mov	r10, r31
     cb4:	bb 24       	eor	r11, r11
     cb6:	b3 94       	inc	r11
     cb8:	f0 2d       	mov	r31, r0
     cba:	0f 2e       	mov	r0, r31
     cbc:	f3 e6       	ldi	r31, 0x63	; 99
     cbe:	2f 2e       	mov	r2, r31
     cc0:	31 2c       	mov	r3, r1
     cc2:	f0 2d       	mov	r31, r0
     cc4:	88 24       	eor	r8, r8
     cc6:	83 94       	inc	r8
     cc8:	91 2c       	mov	r9, r1
     cca:	0f 2e       	mov	r0, r31
     ccc:	f9 e7       	ldi	r31, 0x79	; 121
     cce:	cf 2e       	mov	r12, r31
     cd0:	f2 e0       	ldi	r31, 0x02	; 2
     cd2:	df 2e       	mov	r13, r31
     cd4:	f0 2d       	mov	r31, r0
     cd6:	01 eb       	ldi	r16, 0xB1	; 177
     cd8:	12 e0       	ldi	r17, 0x02	; 2
     cda:	0f 2e       	mov	r0, r31
     cdc:	fa e0       	ldi	r31, 0x0A	; 10
     cde:	6f 2e       	mov	r6, r31
     ce0:	71 2c       	mov	r7, r1
     ce2:	f0 2d       	mov	r31, r0
     ce4:	e0 91 4f 02 	lds	r30, 0x024F
     ce8:	f0 91 50 02 	lds	r31, 0x0250
     cec:	df 01       	movw	r26, r30
     cee:	a3 5f       	subi	r26, 0xF3	; 243
     cf0:	be 4f       	sbci	r27, 0xFE	; 254
     cf2:	1c 92       	st	X, r1
     cf4:	82 81       	ldd	r24, Z+2	; 0x02
     cf6:	93 81       	ldd	r25, Z+3	; 0x03
     cf8:	90 93 5e 15 	sts	0x155E, r25
     cfc:	80 93 5d 15 	sts	0x155D, r24
     d00:	20 da       	rcall	.-3008   	; 0x142 <CSwitch>
     d02:	82 e0       	ldi	r24, 0x02	; 2
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	e2 db       	rcall	.-2108   	; 0x4cc <disable_LED>
     d08:	85 e0       	ldi	r24, 0x05	; 5
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	df db       	rcall	.-2114   	; 0x4cc <disable_LED>
     d0e:	86 e0       	ldi	r24, 0x06	; 6
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	dc db       	rcall	.-2120   	; 0x4cc <disable_LED>
     d14:	80 91 4f 02 	lds	r24, 0x024F
     d18:	90 91 50 02 	lds	r25, 0x0250
     d1c:	9c 83       	std	Y+4, r25	; 0x04
     d1e:	8b 83       	std	Y+3, r24	; 0x03
     d20:	80 91 5d 15 	lds	r24, 0x155D
     d24:	90 91 5e 15 	lds	r25, 0x155E
     d28:	ab 81       	ldd	r26, Y+3	; 0x03
     d2a:	bc 81       	ldd	r27, Y+4	; 0x04
     d2c:	13 96       	adiw	r26, 0x03	; 3
     d2e:	9c 93       	st	X, r25
     d30:	8e 93       	st	-X, r24
     d32:	12 97       	sbiw	r26, 0x02	; 2
     d34:	fd 01       	movw	r30, r26
     d36:	e3 5f       	subi	r30, 0xF3	; 243
     d38:	fe 4f       	sbci	r31, 0xFE	; 254
     d3a:	e0 81       	ld	r30, Z
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	ed 30       	cpi	r30, 0x0D	; 13
     d40:	f1 05       	cpc	r31, r1
     d42:	80 f6       	brcc	.-96     	; 0xce4 <OS_Start+0x9a>
     d44:	88 27       	eor	r24, r24
     d46:	ee 58       	subi	r30, 0x8E	; 142
     d48:	ff 4f       	sbci	r31, 0xFF	; 255
     d4a:	8f 4f       	sbci	r24, 0xFF	; 255
     d4c:	0c 94 d2 0f 	jmp	0x1fa4	; 0x1fa4 <__tablejump2__>
     d50:	eb 81       	ldd	r30, Y+3	; 0x03
     d52:	fc 81       	ldd	r31, Y+4	; 0x04
     d54:	e4 5e       	subi	r30, 0xE4	; 228
     d56:	fe 4f       	sbci	r31, 0xFE	; 254
     d58:	80 81       	ld	r24, Z
     d5a:	91 81       	ldd	r25, Z+1	; 0x01
     d5c:	e1 eb       	ldi	r30, 0xB1	; 177
     d5e:	f2 e0       	ldi	r31, 0x02	; 2
     d60:	20 81       	ld	r18, Z
     d62:	31 81       	ldd	r19, Z+1	; 0x01
     d64:	28 17       	cp	r18, r24
     d66:	39 07       	cpc	r19, r25
     d68:	09 f0       	breq	.+2      	; 0xd6c <OS_Start+0x122>
     d6a:	89 c0       	rjmp	.+274    	; 0xe7e <OS_Start+0x234>
     d6c:	0d c3       	rjmp	.+1562   	; 0x1388 <OS_Start+0x73e>
     d6e:	eb 81       	ldd	r30, Y+3	; 0x03
     d70:	fc 81       	ldd	r31, Y+4	; 0x04
     d72:	e7 5f       	subi	r30, 0xF7	; 247
     d74:	fe 4f       	sbci	r31, 0xFE	; 254
     d76:	40 81       	ld	r20, Z
     d78:	51 81       	ldd	r21, Z+1	; 0x01
     d7a:	eb 81       	ldd	r30, Y+3	; 0x03
     d7c:	fc 81       	ldd	r31, Y+4	; 0x04
     d7e:	eb 5f       	subi	r30, 0xFB	; 251
     d80:	fe 4f       	sbci	r31, 0xFE	; 254
     d82:	60 81       	ld	r22, Z
     d84:	71 81       	ldd	r23, Z+1	; 0x01
     d86:	eb 81       	ldd	r30, Y+3	; 0x03
     d88:	fc 81       	ldd	r31, Y+4	; 0x04
     d8a:	e5 5f       	subi	r30, 0xF5	; 245
     d8c:	fe 4f       	sbci	r31, 0xFE	; 254
     d8e:	80 81       	ld	r24, Z
     d90:	91 81       	ldd	r25, Z+1	; 0x01
     d92:	51 dd       	rcall	.-1374   	; 0x836 <Kernel_Create_Task>
     d94:	eb 81       	ldd	r30, Y+3	; 0x03
     d96:	fc 81       	ldd	r31, Y+4	; 0x04
     d98:	e2 5f       	subi	r30, 0xF2	; 242
     d9a:	fe 4f       	sbci	r31, 0xFE	; 254
     d9c:	91 83       	std	Z+1, r25	; 0x01
     d9e:	80 83       	st	Z, r24
     da0:	a1 cf       	rjmp	.-190    	; 0xce4 <OS_Start+0x9a>
     da2:	eb 81       	ldd	r30, Y+3	; 0x03
     da4:	fc 81       	ldd	r31, Y+4	; 0x04
     da6:	ec 5f       	subi	r30, 0xFC	; 252
     da8:	fe 4f       	sbci	r31, 0xFE	; 254
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	80 83       	st	Z, r24
     dae:	41 e4       	ldi	r20, 0x41	; 65
     db0:	52 e0       	ldi	r21, 0x02	; 2
     db2:	6d e3       	ldi	r22, 0x3D	; 61
     db4:	75 e1       	ldi	r23, 0x15	; 21
     db6:	8f e4       	ldi	r24, 0x4F	; 79
     db8:	92 e0       	ldi	r25, 0x02	; 2
     dba:	0c d6       	rcall	.+3096   	; 0x19d4 <enqueueRQ>
     dbc:	f5 dd       	rcall	.-1046   	; 0x9a8 <Dispatch>
     dbe:	92 cf       	rjmp	.-220    	; 0xce4 <OS_Start+0x9a>
     dc0:	eb 81       	ldd	r30, Y+3	; 0x03
     dc2:	fc 81       	ldd	r31, Y+4	; 0x04
     dc4:	ec 5f       	subi	r30, 0xFC	; 252
     dc6:	fe 4f       	sbci	r31, 0xFE	; 254
     dc8:	83 e0       	ldi	r24, 0x03	; 3
     dca:	80 83       	st	Z, r24
     dcc:	4f e3       	ldi	r20, 0x3F	; 63
     dce:	52 e0       	ldi	r21, 0x02	; 2
     dd0:	6d e1       	ldi	r22, 0x1D	; 29
     dd2:	75 e1       	ldi	r23, 0x15	; 21
     dd4:	8f e4       	ldi	r24, 0x4F	; 79
     dd6:	92 e0       	ldi	r25, 0x02	; 2
     dd8:	8c d5       	rcall	.+2840   	; 0x18f2 <enqueueSQ>
     dda:	e6 dd       	rcall	.-1076   	; 0x9a8 <Dispatch>
     ddc:	83 cf       	rjmp	.-250    	; 0xce4 <OS_Start+0x9a>
     dde:	ab 81       	ldd	r26, Y+3	; 0x03
     de0:	bc 81       	ldd	r27, Y+4	; 0x04
     de2:	2d 91       	ld	r18, X+
     de4:	3c 91       	ld	r19, X
     de6:	11 97       	sbiw	r26, 0x01	; 1
     de8:	fd 01       	movw	r30, r26
     dea:	e4 5e       	subi	r30, 0xE4	; 228
     dec:	fe 4f       	sbci	r31, 0xFE	; 254
     dee:	80 81       	ld	r24, Z
     df0:	91 81       	ldd	r25, Z+1	; 0x01
     df2:	28 17       	cp	r18, r24
     df4:	39 07       	cpc	r19, r25
     df6:	51 f0       	breq	.+20     	; 0xe0c <OS_Start+0x1c2>
     df8:	80 81       	ld	r24, Z
     dfa:	91 81       	ldd	r25, Z+1	; 0x01
     dfc:	e1 eb       	ldi	r30, 0xB1	; 177
     dfe:	f2 e0       	ldi	r31, 0x02	; 2
     e00:	20 81       	ld	r18, Z
     e02:	31 81       	ldd	r19, Z+1	; 0x01
     e04:	28 17       	cp	r18, r24
     e06:	39 07       	cpc	r19, r25
     e08:	41 f4       	brne	.+16     	; 0xe1a <OS_Start+0x1d0>
     e0a:	ad c2       	rjmp	.+1370   	; 0x1366 <OS_Start+0x71c>
     e0c:	eb 81       	ldd	r30, Y+3	; 0x03
     e0e:	fc 81       	ldd	r31, Y+4	; 0x04
     e10:	e6 5e       	subi	r30, 0xE6	; 230
     e12:	fe 4f       	sbci	r31, 0xFE	; 254
     e14:	91 82       	std	Z+1, r9	; 0x01
     e16:	80 82       	st	Z, r8
     e18:	1a c0       	rjmp	.+52     	; 0xe4e <OS_Start+0x204>
     e1a:	ef ec       	ldi	r30, 0xCF	; 207
     e1c:	f3 e0       	ldi	r31, 0x03	; 3
     e1e:	c4 01       	movw	r24, r8
     e20:	ab 81       	ldd	r26, Y+3	; 0x03
     e22:	bc 81       	ldd	r27, Y+4	; 0x04
     e24:	a4 5e       	subi	r26, 0xE4	; 228
     e26:	be 4f       	sbci	r27, 0xFE	; 254
     e28:	6b 81       	ldd	r22, Y+3	; 0x03
     e2a:	7c 81       	ldd	r23, Y+4	; 0x04
     e2c:	2d 91       	ld	r18, X+
     e2e:	3c 91       	ld	r19, X
     e30:	11 97       	sbiw	r26, 0x01	; 1
     e32:	40 81       	ld	r20, Z
     e34:	51 81       	ldd	r21, Z+1	; 0x01
     e36:	42 17       	cp	r20, r18
     e38:	53 07       	cpc	r21, r19
     e3a:	09 f4       	brne	.+2      	; 0xe3e <OS_Start+0x1f4>
     e3c:	97 c2       	rjmp	.+1326   	; 0x136c <OS_Start+0x722>
     e3e:	01 96       	adiw	r24, 0x01	; 1
     e40:	e2 5e       	subi	r30, 0xE2	; 226
     e42:	fe 4f       	sbci	r31, 0xFE	; 254
     e44:	80 31       	cpi	r24, 0x10	; 16
     e46:	91 05       	cpc	r25, r1
     e48:	89 f7       	brne	.-30     	; 0xe2c <OS_Start+0x1e2>
     e4a:	7c 83       	std	Y+4, r23	; 0x04
     e4c:	6b 83       	std	Y+3, r22	; 0x03
     e4e:	eb 81       	ldd	r30, Y+3	; 0x03
     e50:	fc 81       	ldd	r31, Y+4	; 0x04
     e52:	e6 5e       	subi	r30, 0xE6	; 230
     e54:	fe 4f       	sbci	r31, 0xFE	; 254
     e56:	80 81       	ld	r24, Z
     e58:	91 81       	ldd	r25, Z+1	; 0x01
     e5a:	89 2b       	or	r24, r25
     e5c:	09 f4       	brne	.+2      	; 0xe60 <OS_Start+0x216>
     e5e:	42 cf       	rjmp	.-380    	; 0xce4 <OS_Start+0x9a>
     e60:	eb 81       	ldd	r30, Y+3	; 0x03
     e62:	fc 81       	ldd	r31, Y+4	; 0x04
     e64:	ec 5f       	subi	r30, 0xFC	; 252
     e66:	fe 4f       	sbci	r31, 0xFE	; 254
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	80 83       	st	Z, r24
     e6c:	41 e4       	ldi	r20, 0x41	; 65
     e6e:	52 e0       	ldi	r21, 0x02	; 2
     e70:	6d e3       	ldi	r22, 0x3D	; 61
     e72:	75 e1       	ldi	r23, 0x15	; 21
     e74:	8f e4       	ldi	r24, 0x4F	; 79
     e76:	92 e0       	ldi	r25, 0x02	; 2
     e78:	ad d5       	rcall	.+2906   	; 0x19d4 <enqueueRQ>
     e7a:	96 dd       	rcall	.-1236   	; 0x9a8 <Dispatch>
     e7c:	33 cf       	rjmp	.-410    	; 0xce4 <OS_Start+0x9a>
     e7e:	ef ec       	ldi	r30, 0xCF	; 207
     e80:	f3 e0       	ldi	r31, 0x03	; 3
     e82:	c4 01       	movw	r24, r8
     e84:	ab 81       	ldd	r26, Y+3	; 0x03
     e86:	bc 81       	ldd	r27, Y+4	; 0x04
     e88:	a4 5e       	subi	r26, 0xE4	; 228
     e8a:	be 4f       	sbci	r27, 0xFE	; 254
     e8c:	6b 81       	ldd	r22, Y+3	; 0x03
     e8e:	7c 81       	ldd	r23, Y+4	; 0x04
     e90:	2d 91       	ld	r18, X+
     e92:	3c 91       	ld	r19, X
     e94:	11 97       	sbiw	r26, 0x01	; 1
     e96:	40 81       	ld	r20, Z
     e98:	51 81       	ldd	r21, Z+1	; 0x01
     e9a:	42 17       	cp	r20, r18
     e9c:	53 07       	cpc	r21, r19
     e9e:	09 f4       	brne	.+2      	; 0xea2 <OS_Start+0x258>
     ea0:	76 c2       	rjmp	.+1260   	; 0x138e <OS_Start+0x744>
     ea2:	01 96       	adiw	r24, 0x01	; 1
     ea4:	e2 5e       	subi	r30, 0xE2	; 226
     ea6:	fe 4f       	sbci	r31, 0xFE	; 254
     ea8:	80 31       	cpi	r24, 0x10	; 16
     eaa:	91 05       	cpc	r25, r1
     eac:	89 f7       	brne	.-30     	; 0xe90 <OS_Start+0x246>
     eae:	1a cf       	rjmp	.-460    	; 0xce4 <OS_Start+0x9a>
     eb0:	8a 9d       	mul	r24, r10
     eb2:	90 01       	movw	r18, r0
     eb4:	8b 9d       	mul	r24, r11
     eb6:	30 0d       	add	r19, r0
     eb8:	9a 9d       	mul	r25, r10
     eba:	30 0d       	add	r19, r0
     ebc:	11 24       	eor	r1, r1
     ebe:	c9 01       	movw	r24, r18
     ec0:	8f 54       	subi	r24, 0x4F	; 79
     ec2:	9d 4f       	sbci	r25, 0xFD	; 253
     ec4:	fc 01       	movw	r30, r24
     ec6:	e6 5e       	subi	r30, 0xE6	; 230
     ec8:	fe 4f       	sbci	r31, 0xFE	; 254
     eca:	11 82       	std	Z+1, r1	; 0x01
     ecc:	10 82       	st	Z, r1
     ece:	eb 81       	ldd	r30, Y+3	; 0x03
     ed0:	fc 81       	ldd	r31, Y+4	; 0x04
     ed2:	e9 5f       	subi	r30, 0xF9	; 249
     ed4:	fe 4f       	sbci	r31, 0xFE	; 254
     ed6:	20 81       	ld	r18, Z
     ed8:	31 81       	ldd	r19, Z+1	; 0x01
     eda:	fc 01       	movw	r30, r24
     edc:	e9 5f       	subi	r30, 0xF9	; 249
     ede:	fe 4f       	sbci	r31, 0xFE	; 254
     ee0:	80 81       	ld	r24, Z
     ee2:	91 81       	ldd	r25, Z+1	; 0x01
     ee4:	82 17       	cp	r24, r18
     ee6:	93 07       	cpc	r25, r19
     ee8:	08 f0       	brcs	.+2      	; 0xeec <OS_Start+0x2a2>
     eea:	fc ce       	rjmp	.-520    	; 0xce4 <OS_Start+0x9a>
     eec:	eb 81       	ldd	r30, Y+3	; 0x03
     eee:	fc 81       	ldd	r31, Y+4	; 0x04
     ef0:	ec 5f       	subi	r30, 0xFC	; 252
     ef2:	fe 4f       	sbci	r31, 0xFE	; 254
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	80 83       	st	Z, r24
     ef8:	41 e4       	ldi	r20, 0x41	; 65
     efa:	52 e0       	ldi	r21, 0x02	; 2
     efc:	6d e3       	ldi	r22, 0x3D	; 61
     efe:	75 e1       	ldi	r23, 0x15	; 21
     f00:	8f e4       	ldi	r24, 0x4F	; 79
     f02:	92 e0       	ldi	r25, 0x02	; 2
     f04:	67 d5       	rcall	.+2766   	; 0x19d4 <enqueueRQ>
     f06:	50 dd       	rcall	.-1376   	; 0x9a8 <Dispatch>
     f08:	ed ce       	rjmp	.-550    	; 0xce4 <OS_Start+0x9a>
     f0a:	eb 81       	ldd	r30, Y+3	; 0x03
     f0c:	fc 81       	ldd	r31, Y+4	; 0x04
     f0e:	e9 5f       	subi	r30, 0xF9	; 249
     f10:	fe 4f       	sbci	r31, 0xFE	; 254
     f12:	11 82       	std	Z+1, r1	; 0x01
     f14:	10 82       	st	Z, r1
     f16:	eb 81       	ldd	r30, Y+3	; 0x03
     f18:	fc 81       	ldd	r31, Y+4	; 0x04
     f1a:	eb 5f       	subi	r30, 0xFB	; 251
     f1c:	fe 4f       	sbci	r31, 0xFE	; 254
     f1e:	11 82       	std	Z+1, r1	; 0x01
     f20:	10 82       	st	Z, r1
     f22:	eb 81       	ldd	r30, Y+3	; 0x03
     f24:	fc 81       	ldd	r31, Y+4	; 0x04
     f26:	ec 5f       	subi	r30, 0xFC	; 252
     f28:	fe 4f       	sbci	r31, 0xFE	; 254
     f2a:	86 e0       	ldi	r24, 0x06	; 6
     f2c:	80 83       	st	Z, r24
     f2e:	dc 82       	std	Y+4, r13	; 0x04
     f30:	cb 82       	std	Y+3, r12	; 0x03
     f32:	e0 91 4f 02 	lds	r30, 0x024F
     f36:	f0 91 50 02 	lds	r31, 0x0250
     f3a:	80 81       	ld	r24, Z
     f3c:	91 81       	ldd	r25, Z+1	; 0x01
     f3e:	ab 81       	ldd	r26, Y+3	; 0x03
     f40:	bc 81       	ldd	r27, Y+4	; 0x04
     f42:	13 96       	adiw	r26, 0x03	; 3
     f44:	2d 91       	ld	r18, X+
     f46:	3c 91       	ld	r19, X
     f48:	14 97       	sbiw	r26, 0x04	; 4
     f4a:	28 17       	cp	r18, r24
     f4c:	39 07       	cpc	r19, r25
     f4e:	39 f4       	brne	.+14     	; 0xf5e <OS_Start+0x314>
     f50:	8d 91       	ld	r24, X+
     f52:	9c 91       	ld	r25, X
     f54:	ec 5e       	subi	r30, 0xEC	; 236
     f56:	fe 4f       	sbci	r31, 0xFE	; 254
     f58:	91 83       	std	Z+1, r25	; 0x01
     f5a:	80 83       	st	Z, r24
     f5c:	56 dd       	rcall	.-1364   	; 0xa0a <Kernel_Unlock_Mutex>
     f5e:	eb 81       	ldd	r30, Y+3	; 0x03
     f60:	fc 81       	ldd	r31, Y+4	; 0x04
     f62:	37 96       	adiw	r30, 0x07	; 7
     f64:	fc 83       	std	Y+4, r31	; 0x04
     f66:	eb 83       	std	Y+3, r30	; 0x03
     f68:	e0 17       	cp	r30, r16
     f6a:	f1 07       	cpc	r31, r17
     f6c:	11 f7       	brne	.-60     	; 0xf32 <OS_Start+0x2e8>
     f6e:	e0 91 4f 02 	lds	r30, 0x024F
     f72:	f0 91 50 02 	lds	r31, 0x0250
     f76:	df 01       	movw	r26, r30
     f78:	ac 5f       	subi	r26, 0xFC	; 252
     f7a:	be 4f       	sbci	r27, 0xFE	; 254
     f7c:	1c 92       	st	X, r1
     f7e:	52 96       	adiw	r26, 0x12	; 18
     f80:	11 96       	adiw	r26, 0x01	; 1
     f82:	3c 92       	st	X, r3
     f84:	2e 92       	st	-X, r2
     f86:	1f 97       	sbiw	r26, 0x0f	; 15
     f88:	11 96       	adiw	r26, 0x01	; 1
     f8a:	7c 92       	st	X, r7
     f8c:	6e 92       	st	-X, r6
     f8e:	12 97       	sbiw	r26, 0x02	; 2
     f90:	11 96       	adiw	r26, 0x01	; 1
     f92:	7c 92       	st	X, r7
     f94:	6e 92       	st	-X, r6
     f96:	11 82       	std	Z+1, r1	; 0x01
     f98:	10 82       	st	Z, r1
     f9a:	80 91 4b 02 	lds	r24, 0x024B
     f9e:	90 91 4c 02 	lds	r25, 0x024C
     fa2:	01 97       	sbiw	r24, 0x01	; 1
     fa4:	90 93 4c 02 	sts	0x024C, r25
     fa8:	80 93 4b 02 	sts	0x024B, r24
     fac:	fd dc       	rcall	.-1542   	; 0x9a8 <Dispatch>
     fae:	9a ce       	rjmp	.-716    	; 0xce4 <OS_Start+0x9a>
     fb0:	80 91 47 02 	lds	r24, 0x0247
     fb4:	90 91 48 02 	lds	r25, 0x0248
     fb8:	08 97       	sbiw	r24, 0x08	; 8
     fba:	41 f1       	breq	.+80     	; 0x100c <OS_Start+0x3c2>
     fbc:	d6 01       	movw	r26, r12
     fbe:	12 96       	adiw	r26, 0x02	; 2
     fc0:	8c 91       	ld	r24, X
     fc2:	88 23       	and	r24, r24
     fc4:	89 f0       	breq	.+34     	; 0xfe8 <OS_Start+0x39e>
     fc6:	e2 e8       	ldi	r30, 0x82	; 130
     fc8:	f2 e0       	ldi	r31, 0x02	; 2
     fca:	94 01       	movw	r18, r8
     fcc:	4b 81       	ldd	r20, Y+3	; 0x03
     fce:	5c 81       	ldd	r21, Y+4	; 0x04
     fd0:	80 81       	ld	r24, Z
     fd2:	88 23       	and	r24, r24
     fd4:	61 f0       	breq	.+24     	; 0xfee <OS_Start+0x3a4>
     fd6:	2f 5f       	subi	r18, 0xFF	; 255
     fd8:	3f 4f       	sbci	r19, 0xFF	; 255
     fda:	37 96       	adiw	r30, 0x07	; 7
     fdc:	28 30       	cpi	r18, 0x08	; 8
     fde:	31 05       	cpc	r19, r1
     fe0:	b9 f7       	brne	.-18     	; 0xfd0 <OS_Start+0x386>
     fe2:	5c 83       	std	Y+4, r21	; 0x04
     fe4:	4b 83       	std	Y+3, r20	; 0x03
     fe6:	05 c0       	rjmp	.+10     	; 0xff2 <OS_Start+0x3a8>
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <OS_Start+0x3a8>
     fee:	5c 83       	std	Y+4, r21	; 0x04
     ff0:	4b 83       	std	Y+3, r20	; 0x03
     ff2:	c9 01       	movw	r24, r18
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	82 1b       	sub	r24, r18
    1002:	93 0b       	sbc	r25, r19
    1004:	87 58       	subi	r24, 0x87	; 135
    1006:	9d 4f       	sbci	r25, 0xFD	; 253
    1008:	46 dc       	rcall	.-1908   	; 0x896 <Kernel_Init_Mutex_At>
    100a:	2c 01       	movw	r4, r24
    100c:	eb 81       	ldd	r30, Y+3	; 0x03
    100e:	fc 81       	ldd	r31, Y+4	; 0x04
    1010:	e2 5f       	subi	r30, 0xF2	; 242
    1012:	fe 4f       	sbci	r31, 0xFE	; 254
    1014:	51 82       	std	Z+1, r5	; 0x01
    1016:	40 82       	st	Z, r4
    1018:	65 ce       	rjmp	.-822    	; 0xce4 <OS_Start+0x9a>
    101a:	eb 81       	ldd	r30, Y+3	; 0x03
    101c:	fc 81       	ldd	r31, Y+4	; 0x04
    101e:	ec 5e       	subi	r30, 0xEC	; 236
    1020:	fe 4f       	sbci	r31, 0xFE	; 254
    1022:	40 81       	ld	r20, Z
    1024:	51 81       	ldd	r21, Z+1	; 0x01
    1026:	f6 01       	movw	r30, r12
    1028:	80 81       	ld	r24, Z
    102a:	91 81       	ldd	r25, Z+1	; 0x01
    102c:	48 17       	cp	r20, r24
    102e:	59 07       	cpc	r21, r25
    1030:	09 f4       	brne	.+2      	; 0x1034 <OS_Start+0x3ea>
    1032:	bf c1       	rjmp	.+894    	; 0x13b2 <OS_Start+0x768>
    1034:	c4 01       	movw	r24, r8
    1036:	6b 81       	ldd	r22, Y+3	; 0x03
    1038:	7c 81       	ldd	r23, Y+4	; 0x04
    103a:	27 81       	ldd	r18, Z+7	; 0x07
    103c:	30 85       	ldd	r19, Z+8	; 0x08
    103e:	42 17       	cp	r20, r18
    1040:	53 07       	cpc	r21, r19
    1042:	09 f4       	brne	.+2      	; 0x1046 <OS_Start+0x3fc>
    1044:	b9 c1       	rjmp	.+882    	; 0x13b8 <OS_Start+0x76e>
    1046:	01 96       	adiw	r24, 0x01	; 1
    1048:	37 96       	adiw	r30, 0x07	; 7
    104a:	88 30       	cpi	r24, 0x08	; 8
    104c:	91 05       	cpc	r25, r1
    104e:	a9 f7       	brne	.-22     	; 0x103a <OS_Start+0x3f0>
    1050:	49 ce       	rjmp	.-878    	; 0xce4 <OS_Start+0x9a>
    1052:	fc 01       	movw	r30, r24
    1054:	ee 0f       	add	r30, r30
    1056:	ff 1f       	adc	r31, r31
    1058:	ee 0f       	add	r30, r30
    105a:	ff 1f       	adc	r31, r31
    105c:	ee 0f       	add	r30, r30
    105e:	ff 1f       	adc	r31, r31
    1060:	e8 1b       	sub	r30, r24
    1062:	f9 0b       	sbc	r31, r25
    1064:	e7 58       	subi	r30, 0x87	; 135
    1066:	fd 4f       	sbci	r31, 0xFD	; 253
    1068:	82 e0       	ldi	r24, 0x02	; 2
    106a:	82 83       	std	Z+2, r24	; 0x02
    106c:	ab 81       	ldd	r26, Y+3	; 0x03
    106e:	bc 81       	ldd	r27, Y+4	; 0x04
    1070:	8d 91       	ld	r24, X+
    1072:	9c 91       	ld	r25, X
    1074:	94 83       	std	Z+4, r25	; 0x04
    1076:	83 83       	std	Z+3, r24	; 0x03
    1078:	85 81       	ldd	r24, Z+5	; 0x05
    107a:	96 81       	ldd	r25, Z+6	; 0x06
    107c:	01 96       	adiw	r24, 0x01	; 1
    107e:	96 83       	std	Z+6, r25	; 0x06
    1080:	85 83       	std	Z+5, r24	; 0x05
    1082:	30 ce       	rjmp	.-928    	; 0xce4 <OS_Start+0x9a>
    1084:	fc 01       	movw	r30, r24
    1086:	ee 0f       	add	r30, r30
    1088:	ff 1f       	adc	r31, r31
    108a:	ee 0f       	add	r30, r30
    108c:	ff 1f       	adc	r31, r31
    108e:	ee 0f       	add	r30, r30
    1090:	ff 1f       	adc	r31, r31
    1092:	e8 1b       	sub	r30, r24
    1094:	f9 0b       	sbc	r31, r25
    1096:	e7 58       	subi	r30, 0x87	; 135
    1098:	fd 4f       	sbci	r31, 0xFD	; 253
    109a:	23 81       	ldd	r18, Z+3	; 0x03
    109c:	34 81       	ldd	r19, Z+4	; 0x04
    109e:	eb 81       	ldd	r30, Y+3	; 0x03
    10a0:	fc 81       	ldd	r31, Y+4	; 0x04
    10a2:	40 81       	ld	r20, Z
    10a4:	51 81       	ldd	r21, Z+1	; 0x01
    10a6:	24 17       	cp	r18, r20
    10a8:	35 07       	cpc	r19, r21
    10aa:	89 f4       	brne	.+34     	; 0x10ce <OS_Start+0x484>
    10ac:	fc 01       	movw	r30, r24
    10ae:	ee 0f       	add	r30, r30
    10b0:	ff 1f       	adc	r31, r31
    10b2:	ee 0f       	add	r30, r30
    10b4:	ff 1f       	adc	r31, r31
    10b6:	ee 0f       	add	r30, r30
    10b8:	ff 1f       	adc	r31, r31
    10ba:	e8 1b       	sub	r30, r24
    10bc:	f9 0b       	sbc	r31, r25
    10be:	e7 58       	subi	r30, 0x87	; 135
    10c0:	fd 4f       	sbci	r31, 0xFD	; 253
    10c2:	85 81       	ldd	r24, Z+5	; 0x05
    10c4:	96 81       	ldd	r25, Z+6	; 0x06
    10c6:	01 96       	adiw	r24, 0x01	; 1
    10c8:	96 83       	std	Z+6, r25	; 0x06
    10ca:	85 83       	std	Z+5, r24	; 0x05
    10cc:	0b ce       	rjmp	.-1002   	; 0xce4 <OS_Start+0x9a>
    10ce:	e1 eb       	ldi	r30, 0xB1	; 177
    10d0:	f2 e0       	ldi	r31, 0x02	; 2
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	6b 81       	ldd	r22, Y+3	; 0x03
    10d8:	7c 81       	ldd	r23, Y+4	; 0x04
    10da:	40 81       	ld	r20, Z
    10dc:	51 81       	ldd	r21, Z+1	; 0x01
    10de:	24 17       	cp	r18, r20
    10e0:	35 07       	cpc	r19, r21
    10e2:	19 f4       	brne	.+6      	; 0x10ea <OS_Start+0x4a0>
    10e4:	21 15       	cp	r18, r1
    10e6:	31 05       	cpc	r19, r1
    10e8:	31 f4       	brne	.+12     	; 0x10f6 <OS_Start+0x4ac>
    10ea:	01 96       	adiw	r24, 0x01	; 1
    10ec:	e2 5e       	subi	r30, 0xE2	; 226
    10ee:	fe 4f       	sbci	r31, 0xFE	; 254
    10f0:	80 31       	cpi	r24, 0x10	; 16
    10f2:	91 05       	cpc	r25, r1
    10f4:	91 f7       	brne	.-28     	; 0x10da <OS_Start+0x490>
    10f6:	7c 83       	std	Y+4, r23	; 0x04
    10f8:	6b 83       	std	Y+3, r22	; 0x03
    10fa:	fb 01       	movw	r30, r22
    10fc:	e9 5f       	subi	r30, 0xF9	; 249
    10fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1100:	20 81       	ld	r18, Z
    1102:	31 81       	ldd	r19, Z+1	; 0x01
    1104:	8a 9d       	mul	r24, r10
    1106:	f0 01       	movw	r30, r0
    1108:	8b 9d       	mul	r24, r11
    110a:	f0 0d       	add	r31, r0
    110c:	9a 9d       	mul	r25, r10
    110e:	f0 0d       	add	r31, r0
    1110:	11 24       	eor	r1, r1
    1112:	e8 54       	subi	r30, 0x48	; 72
    1114:	fc 4f       	sbci	r31, 0xFC	; 252
    1116:	40 81       	ld	r20, Z
    1118:	51 81       	ldd	r21, Z+1	; 0x01
    111a:	24 17       	cp	r18, r20
    111c:	35 07       	cpc	r19, r21
    111e:	80 f4       	brcc	.+32     	; 0x1140 <OS_Start+0x4f6>
    1120:	fb 01       	movw	r30, r22
    1122:	e9 5f       	subi	r30, 0xF9	; 249
    1124:	fe 4f       	sbci	r31, 0xFE	; 254
    1126:	20 81       	ld	r18, Z
    1128:	31 81       	ldd	r19, Z+1	; 0x01
    112a:	8a 9d       	mul	r24, r10
    112c:	f0 01       	movw	r30, r0
    112e:	8b 9d       	mul	r24, r11
    1130:	f0 0d       	add	r31, r0
    1132:	9a 9d       	mul	r25, r10
    1134:	f0 0d       	add	r31, r0
    1136:	11 24       	eor	r1, r1
    1138:	e8 54       	subi	r30, 0x48	; 72
    113a:	fc 4f       	sbci	r31, 0xFC	; 252
    113c:	31 83       	std	Z+1, r19	; 0x01
    113e:	20 83       	st	Z, r18
    1140:	eb 81       	ldd	r30, Y+3	; 0x03
    1142:	fc 81       	ldd	r31, Y+4	; 0x04
    1144:	ec 5f       	subi	r30, 0xFC	; 252
    1146:	fe 4f       	sbci	r31, 0xFE	; 254
    1148:	84 e0       	ldi	r24, 0x04	; 4
    114a:	80 83       	st	Z, r24
    114c:	4d e3       	ldi	r20, 0x3D	; 61
    114e:	52 e0       	ldi	r21, 0x02	; 2
    1150:	6f e5       	ldi	r22, 0x5F	; 95
    1152:	75 e1       	ldi	r23, 0x15	; 21
    1154:	8f e4       	ldi	r24, 0x4F	; 79
    1156:	92 e0       	ldi	r25, 0x02	; 2
    1158:	9c d3       	rcall	.+1848   	; 0x1892 <enqueueWQ>
    115a:	26 dc       	rcall	.-1972   	; 0x9a8 <Dispatch>
    115c:	c3 cd       	rjmp	.-1146   	; 0xce4 <OS_Start+0x9a>
    115e:	55 dc       	rcall	.-1878   	; 0xa0a <Kernel_Unlock_Mutex>
    1160:	c1 cd       	rjmp	.-1150   	; 0xce4 <OS_Start+0x9a>
    1162:	80 91 45 02 	lds	r24, 0x0245
    1166:	90 91 46 02 	lds	r25, 0x0246
    116a:	08 97       	sbiw	r24, 0x08	; 8
    116c:	31 f1       	breq	.+76     	; 0x11ba <OS_Start+0x570>
    116e:	d7 01       	movw	r26, r14
    1170:	12 96       	adiw	r26, 0x02	; 2
    1172:	8c 91       	ld	r24, X
    1174:	88 23       	and	r24, r24
    1176:	81 f0       	breq	.+32     	; 0x1198 <OS_Start+0x54e>
    1178:	e8 e5       	ldi	r30, 0x58	; 88
    117a:	f2 e0       	ldi	r31, 0x02	; 2
    117c:	c4 01       	movw	r24, r8
    117e:	4b 81       	ldd	r20, Y+3	; 0x03
    1180:	5c 81       	ldd	r21, Y+4	; 0x04
    1182:	20 81       	ld	r18, Z
    1184:	22 23       	and	r18, r18
    1186:	59 f0       	breq	.+22     	; 0x119e <OS_Start+0x554>
    1188:	01 96       	adiw	r24, 0x01	; 1
    118a:	35 96       	adiw	r30, 0x05	; 5
    118c:	88 30       	cpi	r24, 0x08	; 8
    118e:	91 05       	cpc	r25, r1
    1190:	c1 f7       	brne	.-16     	; 0x1182 <OS_Start+0x538>
    1192:	5c 83       	std	Y+4, r21	; 0x04
    1194:	4b 83       	std	Y+3, r20	; 0x03
    1196:	05 c0       	rjmp	.+10     	; 0x11a2 <OS_Start+0x558>
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <OS_Start+0x558>
    119e:	5c 83       	std	Y+4, r21	; 0x04
    11a0:	4b 83       	std	Y+3, r20	; 0x03
    11a2:	9c 01       	movw	r18, r24
    11a4:	22 0f       	add	r18, r18
    11a6:	33 1f       	adc	r19, r19
    11a8:	22 0f       	add	r18, r18
    11aa:	33 1f       	adc	r19, r19
    11ac:	82 0f       	add	r24, r18
    11ae:	93 1f       	adc	r25, r19
    11b0:	8f 5a       	subi	r24, 0xAF	; 175
    11b2:	9d 4f       	sbci	r25, 0xFD	; 253
    11b4:	85 db       	rcall	.-2294   	; 0x8c0 <Kernel_Init_Event_At>
    11b6:	9a 83       	std	Y+2, r25	; 0x02
    11b8:	89 83       	std	Y+1, r24	; 0x01
    11ba:	ab 81       	ldd	r26, Y+3	; 0x03
    11bc:	bc 81       	ldd	r27, Y+4	; 0x04
    11be:	a2 5f       	subi	r26, 0xF2	; 242
    11c0:	be 4f       	sbci	r27, 0xFE	; 254
    11c2:	e9 81       	ldd	r30, Y+1	; 0x01
    11c4:	fa 81       	ldd	r31, Y+2	; 0x02
    11c6:	11 96       	adiw	r26, 0x01	; 1
    11c8:	fc 93       	st	X, r31
    11ca:	ee 93       	st	-X, r30
    11cc:	8b cd       	rjmp	.-1258   	; 0xce4 <OS_Start+0x9a>
    11ce:	eb 81       	ldd	r30, Y+3	; 0x03
    11d0:	fc 81       	ldd	r31, Y+4	; 0x04
    11d2:	e8 5e       	subi	r30, 0xE8	; 232
    11d4:	fe 4f       	sbci	r31, 0xFE	; 254
    11d6:	40 81       	ld	r20, Z
    11d8:	51 81       	ldd	r21, Z+1	; 0x01
    11da:	d7 01       	movw	r26, r14
    11dc:	8d 91       	ld	r24, X+
    11de:	9c 91       	ld	r25, X
    11e0:	48 17       	cp	r20, r24
    11e2:	59 07       	cpc	r21, r25
    11e4:	09 f4       	brne	.+2      	; 0x11e8 <OS_Start+0x59e>
    11e6:	fa c0       	rjmp	.+500    	; 0x13dc <OS_Start+0x792>
    11e8:	f7 01       	movw	r30, r14
    11ea:	c4 01       	movw	r24, r8
    11ec:	6b 81       	ldd	r22, Y+3	; 0x03
    11ee:	7c 81       	ldd	r23, Y+4	; 0x04
    11f0:	25 81       	ldd	r18, Z+5	; 0x05
    11f2:	36 81       	ldd	r19, Z+6	; 0x06
    11f4:	42 17       	cp	r20, r18
    11f6:	53 07       	cpc	r21, r19
    11f8:	09 f4       	brne	.+2      	; 0x11fc <OS_Start+0x5b2>
    11fa:	f3 c0       	rjmp	.+486    	; 0x13e2 <OS_Start+0x798>
    11fc:	01 96       	adiw	r24, 0x01	; 1
    11fe:	35 96       	adiw	r30, 0x05	; 5
    1200:	88 30       	cpi	r24, 0x08	; 8
    1202:	91 05       	cpc	r25, r1
    1204:	a9 f7       	brne	.-22     	; 0x11f0 <OS_Start+0x5a6>
    1206:	3d c0       	rjmp	.+122    	; 0x1282 <OS_Start+0x638>
    1208:	fc 01       	movw	r30, r24
    120a:	ee 0f       	add	r30, r30
    120c:	ff 1f       	adc	r31, r31
    120e:	ee 0f       	add	r30, r30
    1210:	ff 1f       	adc	r31, r31
    1212:	e8 0f       	add	r30, r24
    1214:	f9 1f       	adc	r31, r25
    1216:	ef 5a       	subi	r30, 0xAF	; 175
    1218:	fd 4f       	sbci	r31, 0xFD	; 253
    121a:	22 81       	ldd	r18, Z+2	; 0x02
    121c:	22 30       	cpi	r18, 0x02	; 2
    121e:	69 f4       	brne	.+26     	; 0x123a <OS_Start+0x5f0>
    1220:	fc 01       	movw	r30, r24
    1222:	ee 0f       	add	r30, r30
    1224:	ff 1f       	adc	r31, r31
    1226:	ee 0f       	add	r30, r30
    1228:	ff 1f       	adc	r31, r31
    122a:	8e 0f       	add	r24, r30
    122c:	9f 1f       	adc	r25, r31
    122e:	fc 01       	movw	r30, r24
    1230:	ef 5a       	subi	r30, 0xAF	; 175
    1232:	fd 4f       	sbci	r31, 0xFD	; 253
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	82 83       	std	Z+2, r24	; 0x02
    1238:	24 c0       	rjmp	.+72     	; 0x1282 <OS_Start+0x638>
    123a:	eb 81       	ldd	r30, Y+3	; 0x03
    123c:	fc 81       	ldd	r31, Y+4	; 0x04
    123e:	ea 5e       	subi	r30, 0xEA	; 234
    1240:	fe 4f       	sbci	r31, 0xFE	; 254
    1242:	51 83       	std	Z+1, r21	; 0x01
    1244:	40 83       	st	Z, r20
    1246:	eb 81       	ldd	r30, Y+3	; 0x03
    1248:	fc 81       	ldd	r31, Y+4	; 0x04
    124a:	20 81       	ld	r18, Z
    124c:	31 81       	ldd	r19, Z+1	; 0x01
    124e:	fc 01       	movw	r30, r24
    1250:	ee 0f       	add	r30, r30
    1252:	ff 1f       	adc	r31, r31
    1254:	ee 0f       	add	r30, r30
    1256:	ff 1f       	adc	r31, r31
    1258:	8e 0f       	add	r24, r30
    125a:	9f 1f       	adc	r25, r31
    125c:	fc 01       	movw	r30, r24
    125e:	ef 5a       	subi	r30, 0xAF	; 175
    1260:	fd 4f       	sbci	r31, 0xFD	; 253
    1262:	34 83       	std	Z+4, r19	; 0x04
    1264:	23 83       	std	Z+3, r18	; 0x03
    1266:	eb 81       	ldd	r30, Y+3	; 0x03
    1268:	fc 81       	ldd	r31, Y+4	; 0x04
    126a:	ec 5f       	subi	r30, 0xFC	; 252
    126c:	fe 4f       	sbci	r31, 0xFE	; 254
    126e:	85 e0       	ldi	r24, 0x05	; 5
    1270:	80 83       	st	Z, r24
    1272:	41 e4       	ldi	r20, 0x41	; 65
    1274:	52 e0       	ldi	r21, 0x02	; 2
    1276:	6d e3       	ldi	r22, 0x3D	; 61
    1278:	75 e1       	ldi	r23, 0x15	; 21
    127a:	8f e4       	ldi	r24, 0x4F	; 79
    127c:	92 e0       	ldi	r25, 0x02	; 2
    127e:	aa d3       	rcall	.+1876   	; 0x19d4 <enqueueRQ>
    1280:	93 db       	rcall	.-2266   	; 0x9a8 <Dispatch>
    1282:	e0 91 4f 02 	lds	r30, 0x024F
    1286:	f0 91 50 02 	lds	r31, 0x0250
    128a:	80 81       	ld	r24, Z
    128c:	91 81       	ldd	r25, Z+1	; 0x01
    128e:	02 97       	sbiw	r24, 0x02	; 2
    1290:	20 f4       	brcc	.+8      	; 0x129a <OS_Start+0x650>
    1292:	82 e0       	ldi	r24, 0x02	; 2
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	0d d9       	rcall	.-3558   	; 0x4b2 <enable_LED>
    1298:	25 cd       	rjmp	.-1462   	; 0xce4 <OS_Start+0x9a>
    129a:	80 81       	ld	r24, Z
    129c:	91 81       	ldd	r25, Z+1	; 0x01
    129e:	02 97       	sbiw	r24, 0x02	; 2
    12a0:	21 f4       	brne	.+8      	; 0x12aa <OS_Start+0x660>
    12a2:	85 e0       	ldi	r24, 0x05	; 5
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	05 d9       	rcall	.-3574   	; 0x4b2 <enable_LED>
    12a8:	1d cd       	rjmp	.-1478   	; 0xce4 <OS_Start+0x9a>
    12aa:	80 81       	ld	r24, Z
    12ac:	91 81       	ldd	r25, Z+1	; 0x01
    12ae:	03 97       	sbiw	r24, 0x03	; 3
    12b0:	09 f0       	breq	.+2      	; 0x12b4 <OS_Start+0x66a>
    12b2:	18 cd       	rjmp	.-1488   	; 0xce4 <OS_Start+0x9a>
    12b4:	86 e0       	ldi	r24, 0x06	; 6
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	fc d8       	rcall	.-3592   	; 0x4b2 <enable_LED>
    12ba:	14 cd       	rjmp	.-1496   	; 0xce4 <OS_Start+0x9a>
    12bc:	eb 81       	ldd	r30, Y+3	; 0x03
    12be:	fc 81       	ldd	r31, Y+4	; 0x04
    12c0:	e8 5e       	subi	r30, 0xE8	; 232
    12c2:	fe 4f       	sbci	r31, 0xFE	; 254
    12c4:	40 81       	ld	r20, Z
    12c6:	51 81       	ldd	r21, Z+1	; 0x01
    12c8:	d7 01       	movw	r26, r14
    12ca:	8d 91       	ld	r24, X+
    12cc:	9c 91       	ld	r25, X
    12ce:	48 17       	cp	r20, r24
    12d0:	59 07       	cpc	r21, r25
    12d2:	09 f4       	brne	.+2      	; 0x12d6 <OS_Start+0x68c>
    12d4:	97 c0       	rjmp	.+302    	; 0x1404 <OS_Start+0x7ba>
    12d6:	f7 01       	movw	r30, r14
    12d8:	c4 01       	movw	r24, r8
    12da:	6b 81       	ldd	r22, Y+3	; 0x03
    12dc:	7c 81       	ldd	r23, Y+4	; 0x04
    12de:	25 81       	ldd	r18, Z+5	; 0x05
    12e0:	36 81       	ldd	r19, Z+6	; 0x06
    12e2:	42 17       	cp	r20, r18
    12e4:	53 07       	cpc	r21, r19
    12e6:	09 f4       	brne	.+2      	; 0x12ea <OS_Start+0x6a0>
    12e8:	90 c0       	rjmp	.+288    	; 0x140a <OS_Start+0x7c0>
    12ea:	01 96       	adiw	r24, 0x01	; 1
    12ec:	35 96       	adiw	r30, 0x05	; 5
    12ee:	88 30       	cpi	r24, 0x08	; 8
    12f0:	91 05       	cpc	r25, r1
    12f2:	a9 f7       	brne	.-22     	; 0x12de <OS_Start+0x694>
    12f4:	f7 cc       	rjmp	.-1554   	; 0xce4 <OS_Start+0x9a>
    12f6:	80 81       	ld	r24, Z
    12f8:	91 81       	ldd	r25, Z+1	; 0x01
    12fa:	48 17       	cp	r20, r24
    12fc:	59 07       	cpc	r21, r25
    12fe:	09 f4       	brne	.+2      	; 0x1302 <OS_Start+0x6b8>
    1300:	97 c0       	rjmp	.+302    	; 0x1430 <OS_Start+0x7e6>
    1302:	2f 5f       	subi	r18, 0xFF	; 255
    1304:	3f 4f       	sbci	r19, 0xFF	; 255
    1306:	e2 5e       	subi	r30, 0xE2	; 226
    1308:	fe 4f       	sbci	r31, 0xFE	; 254
    130a:	20 31       	cpi	r18, 0x10	; 16
    130c:	31 05       	cpc	r19, r1
    130e:	99 f7       	brne	.-26     	; 0x12f6 <OS_Start+0x6ac>
    1310:	cb 01       	movw	r24, r22
    1312:	fb 01       	movw	r30, r22
    1314:	ee 0f       	add	r30, r30
    1316:	ff 1f       	adc	r31, r31
    1318:	ee 0f       	add	r30, r30
    131a:	ff 1f       	adc	r31, r31
    131c:	8e 0f       	add	r24, r30
    131e:	9f 1f       	adc	r25, r31
    1320:	fc 01       	movw	r30, r24
    1322:	ef 5a       	subi	r30, 0xAF	; 175
    1324:	fd 4f       	sbci	r31, 0xFD	; 253
    1326:	82 e0       	ldi	r24, 0x02	; 2
    1328:	82 83       	std	Z+2, r24	; 0x02
    132a:	dc cc       	rjmp	.-1608   	; 0xce4 <OS_Start+0x9a>
    132c:	2a 9d       	mul	r18, r10
    132e:	f0 01       	movw	r30, r0
    1330:	2b 9d       	mul	r18, r11
    1332:	f0 0d       	add	r31, r0
    1334:	3a 9d       	mul	r19, r10
    1336:	f0 0d       	add	r31, r0
    1338:	11 24       	eor	r1, r1
    133a:	e5 53       	subi	r30, 0x35	; 53
    133c:	fc 4f       	sbci	r31, 0xFC	; 252
    133e:	80 81       	ld	r24, Z
    1340:	91 81       	ldd	r25, Z+1	; 0x01
    1342:	89 2b       	or	r24, r25
    1344:	09 f0       	breq	.+2      	; 0x1348 <OS_Start+0x6fe>
    1346:	ce cc       	rjmp	.-1636   	; 0xce4 <OS_Start+0x9a>
    1348:	eb 81       	ldd	r30, Y+3	; 0x03
    134a:	fc 81       	ldd	r31, Y+4	; 0x04
    134c:	ec 5f       	subi	r30, 0xFC	; 252
    134e:	fe 4f       	sbci	r31, 0xFE	; 254
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	80 83       	st	Z, r24
    1354:	41 e4       	ldi	r20, 0x41	; 65
    1356:	52 e0       	ldi	r21, 0x02	; 2
    1358:	6d e3       	ldi	r22, 0x3D	; 61
    135a:	75 e1       	ldi	r23, 0x15	; 21
    135c:	8f e4       	ldi	r24, 0x4F	; 79
    135e:	92 e0       	ldi	r25, 0x02	; 2
    1360:	39 d3       	rcall	.+1650   	; 0x19d4 <enqueueRQ>
    1362:	22 db       	rcall	.-2492   	; 0x9a8 <Dispatch>
    1364:	bf cc       	rjmp	.-1666   	; 0xce4 <OS_Start+0x9a>
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <OS_Start+0x726>
    136c:	7c 83       	std	Y+4, r23	; 0x04
    136e:	6b 83       	std	Y+3, r22	; 0x03
    1370:	8a 9d       	mul	r24, r10
    1372:	f0 01       	movw	r30, r0
    1374:	8b 9d       	mul	r24, r11
    1376:	f0 0d       	add	r31, r0
    1378:	9a 9d       	mul	r25, r10
    137a:	f0 0d       	add	r31, r0
    137c:	11 24       	eor	r1, r1
    137e:	e5 53       	subi	r30, 0x35	; 53
    1380:	fc 4f       	sbci	r31, 0xFC	; 252
    1382:	91 82       	std	Z+1, r9	; 0x01
    1384:	80 82       	st	Z, r8
    1386:	63 cd       	rjmp	.-1338   	; 0xe4e <OS_Start+0x204>
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <OS_Start+0x748>
    138e:	7c 83       	std	Y+4, r23	; 0x04
    1390:	6b 83       	std	Y+3, r22	; 0x03
    1392:	8a 9d       	mul	r24, r10
    1394:	f0 01       	movw	r30, r0
    1396:	8b 9d       	mul	r24, r11
    1398:	f0 0d       	add	r31, r0
    139a:	9a 9d       	mul	r25, r10
    139c:	f0 0d       	add	r31, r0
    139e:	11 24       	eor	r1, r1
    13a0:	e5 53       	subi	r30, 0x35	; 53
    13a2:	fc 4f       	sbci	r31, 0xFC	; 252
    13a4:	20 81       	ld	r18, Z
    13a6:	31 81       	ldd	r19, Z+1	; 0x01
    13a8:	21 30       	cpi	r18, 0x01	; 1
    13aa:	31 05       	cpc	r19, r1
    13ac:	09 f0       	breq	.+2      	; 0x13b0 <OS_Start+0x766>
    13ae:	9a cc       	rjmp	.-1740   	; 0xce4 <OS_Start+0x9a>
    13b0:	7f cd       	rjmp	.-1282   	; 0xeb0 <OS_Start+0x266>
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <OS_Start+0x772>
    13b8:	7c 83       	std	Y+4, r23	; 0x04
    13ba:	6b 83       	std	Y+3, r22	; 0x03
    13bc:	fc 01       	movw	r30, r24
    13be:	ee 0f       	add	r30, r30
    13c0:	ff 1f       	adc	r31, r31
    13c2:	ee 0f       	add	r30, r30
    13c4:	ff 1f       	adc	r31, r31
    13c6:	ee 0f       	add	r30, r30
    13c8:	ff 1f       	adc	r31, r31
    13ca:	e8 1b       	sub	r30, r24
    13cc:	f9 0b       	sbc	r31, r25
    13ce:	e7 58       	subi	r30, 0x87	; 135
    13d0:	fd 4f       	sbci	r31, 0xFD	; 253
    13d2:	22 81       	ldd	r18, Z+2	; 0x02
    13d4:	21 30       	cpi	r18, 0x01	; 1
    13d6:	09 f0       	breq	.+2      	; 0x13da <OS_Start+0x790>
    13d8:	55 ce       	rjmp	.-854    	; 0x1084 <OS_Start+0x43a>
    13da:	3b ce       	rjmp	.-906    	; 0x1052 <OS_Start+0x408>
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <OS_Start+0x79c>
    13e2:	7c 83       	std	Y+4, r23	; 0x04
    13e4:	6b 83       	std	Y+3, r22	; 0x03
    13e6:	fc 01       	movw	r30, r24
    13e8:	ee 0f       	add	r30, r30
    13ea:	ff 1f       	adc	r31, r31
    13ec:	ee 0f       	add	r30, r30
    13ee:	ff 1f       	adc	r31, r31
    13f0:	e8 0f       	add	r30, r24
    13f2:	f9 1f       	adc	r31, r25
    13f4:	ef 5a       	subi	r30, 0xAF	; 175
    13f6:	fd 4f       	sbci	r31, 0xFD	; 253
    13f8:	23 81       	ldd	r18, Z+3	; 0x03
    13fa:	34 81       	ldd	r19, Z+4	; 0x04
    13fc:	23 2b       	or	r18, r19
    13fe:	09 f0       	breq	.+2      	; 0x1402 <OS_Start+0x7b8>
    1400:	40 cf       	rjmp	.-384    	; 0x1282 <OS_Start+0x638>
    1402:	02 cf       	rjmp	.-508    	; 0x1208 <OS_Start+0x5be>
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	02 c0       	rjmp	.+4      	; 0x140e <OS_Start+0x7c4>
    140a:	7c 83       	std	Y+4, r23	; 0x04
    140c:	6b 83       	std	Y+3, r22	; 0x03
    140e:	e7 ec       	ldi	r30, 0xC7	; 199
    1410:	f3 e0       	ldi	r31, 0x03	; 3
    1412:	20 81       	ld	r18, Z
    1414:	31 81       	ldd	r19, Z+1	; 0x01
    1416:	42 17       	cp	r20, r18
    1418:	53 07       	cpc	r21, r19
    141a:	39 f0       	breq	.+14     	; 0x142a <OS_Start+0x7e0>
    141c:	e5 ee       	ldi	r30, 0xE5	; 229
    141e:	f4 e0       	ldi	r31, 0x04	; 4
    1420:	94 01       	movw	r18, r8
    1422:	ab 81       	ldd	r26, Y+3	; 0x03
    1424:	bc 81       	ldd	r27, Y+4	; 0x04
    1426:	bc 01       	movw	r22, r24
    1428:	66 cf       	rjmp	.-308    	; 0x12f6 <OS_Start+0x6ac>
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	03 c0       	rjmp	.+6      	; 0x1436 <OS_Start+0x7ec>
    1430:	bc 83       	std	Y+4, r27	; 0x04
    1432:	ab 83       	std	Y+3, r26	; 0x03
    1434:	cb 01       	movw	r24, r22
    1436:	2a 9d       	mul	r18, r10
    1438:	a0 01       	movw	r20, r0
    143a:	2b 9d       	mul	r18, r11
    143c:	50 0d       	add	r21, r0
    143e:	3a 9d       	mul	r19, r10
    1440:	50 0d       	add	r21, r0
    1442:	11 24       	eor	r1, r1
    1444:	4f 54       	subi	r20, 0x4F	; 79
    1446:	5d 4f       	sbci	r21, 0xFD	; 253
    1448:	fa 01       	movw	r30, r20
    144a:	ec 5f       	subi	r30, 0xFC	; 252
    144c:	fe 4f       	sbci	r31, 0xFE	; 254
    144e:	61 e0       	ldi	r22, 0x01	; 1
    1450:	60 83       	st	Z, r22
    1452:	72 96       	adiw	r30, 0x12	; 18
    1454:	31 82       	std	Z+1, r3	; 0x01
    1456:	20 82       	st	Z, r2
    1458:	fc 01       	movw	r30, r24
    145a:	ee 0f       	add	r30, r30
    145c:	ff 1f       	adc	r31, r31
    145e:	ee 0f       	add	r30, r30
    1460:	ff 1f       	adc	r31, r31
    1462:	8e 0f       	add	r24, r30
    1464:	9f 1f       	adc	r25, r31
    1466:	fc 01       	movw	r30, r24
    1468:	ef 5a       	subi	r30, 0xAF	; 175
    146a:	fd 4f       	sbci	r31, 0xFD	; 253
    146c:	14 82       	std	Z+4, r1	; 0x04
    146e:	13 82       	std	Z+3, r1	; 0x03
    1470:	eb 81       	ldd	r30, Y+3	; 0x03
    1472:	fc 81       	ldd	r31, Y+4	; 0x04
    1474:	e9 5f       	subi	r30, 0xF9	; 249
    1476:	fe 4f       	sbci	r31, 0xFE	; 254
    1478:	80 81       	ld	r24, Z
    147a:	91 81       	ldd	r25, Z+1	; 0x01
    147c:	fa 01       	movw	r30, r20
    147e:	e9 5f       	subi	r30, 0xF9	; 249
    1480:	fe 4f       	sbci	r31, 0xFE	; 254
    1482:	40 81       	ld	r20, Z
    1484:	51 81       	ldd	r21, Z+1	; 0x01
    1486:	48 17       	cp	r20, r24
    1488:	59 07       	cpc	r21, r25
    148a:	08 f4       	brcc	.+2      	; 0x148e <OS_Start+0x844>
    148c:	4f cf       	rjmp	.-354    	; 0x132c <OS_Start+0x6e2>
    148e:	2a cc       	rjmp	.-1964   	; 0xce4 <OS_Start+0x9a>
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	df 91       	pop	r29
    149a:	cf 91       	pop	r28
    149c:	1f 91       	pop	r17
    149e:	0f 91       	pop	r16
    14a0:	ff 90       	pop	r15
    14a2:	ef 90       	pop	r14
    14a4:	df 90       	pop	r13
    14a6:	cf 90       	pop	r12
    14a8:	bf 90       	pop	r11
    14aa:	af 90       	pop	r10
    14ac:	9f 90       	pop	r9
    14ae:	8f 90       	pop	r8
    14b0:	7f 90       	pop	r7
    14b2:	6f 90       	pop	r6
    14b4:	5f 90       	pop	r5
    14b6:	4f 90       	pop	r4
    14b8:	3f 90       	pop	r3
    14ba:	2f 90       	pop	r2
    14bc:	08 95       	ret

000014be <Mutex_Init>:
    14be:	80 91 4d 02 	lds	r24, 0x024D
    14c2:	90 91 4e 02 	lds	r25, 0x024E
    14c6:	89 2b       	or	r24, r25
    14c8:	a1 f0       	breq	.+40     	; 0x14f2 <Mutex_Init+0x34>
    14ca:	f8 94       	cli
    14cc:	e0 91 4f 02 	lds	r30, 0x024F
    14d0:	f0 91 50 02 	lds	r31, 0x0250
    14d4:	e3 5f       	subi	r30, 0xF3	; 243
    14d6:	fe 4f       	sbci	r31, 0xFE	; 254
    14d8:	87 e0       	ldi	r24, 0x07	; 7
    14da:	80 83       	st	Z, r24
    14dc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    14e0:	e0 91 4f 02 	lds	r30, 0x024F
    14e4:	f0 91 50 02 	lds	r31, 0x0250
    14e8:	e2 5f       	subi	r30, 0xF2	; 242
    14ea:	fe 4f       	sbci	r31, 0xFE	; 254
    14ec:	80 81       	ld	r24, Z
    14ee:	91 81       	ldd	r25, Z+1	; 0x01
    14f0:	08 95       	ret
    14f2:	08 95       	ret

000014f4 <Event_Init>:
    14f4:	80 91 4d 02 	lds	r24, 0x024D
    14f8:	90 91 4e 02 	lds	r25, 0x024E
    14fc:	89 2b       	or	r24, r25
    14fe:	a1 f0       	breq	.+40     	; 0x1528 <Event_Init+0x34>
    1500:	f8 94       	cli
    1502:	e0 91 4f 02 	lds	r30, 0x024F
    1506:	f0 91 50 02 	lds	r31, 0x0250
    150a:	e3 5f       	subi	r30, 0xF3	; 243
    150c:	fe 4f       	sbci	r31, 0xFE	; 254
    150e:	8a e0       	ldi	r24, 0x0A	; 10
    1510:	80 83       	st	Z, r24
    1512:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    1516:	e0 91 4f 02 	lds	r30, 0x024F
    151a:	f0 91 50 02 	lds	r31, 0x0250
    151e:	e2 5f       	subi	r30, 0xF2	; 242
    1520:	fe 4f       	sbci	r31, 0xFE	; 254
    1522:	80 81       	ld	r24, Z
    1524:	91 81       	ldd	r25, Z+1	; 0x01
    1526:	08 95       	ret
    1528:	08 95       	ret

0000152a <Task_Create>:
    152a:	20 91 4d 02 	lds	r18, 0x024D
    152e:	30 91 4e 02 	lds	r19, 0x024E
    1532:	23 2b       	or	r18, r19
    1534:	f1 f0       	breq	.+60     	; 0x1572 <Task_Create+0x48>
    1536:	f8 94       	cli
    1538:	20 91 4f 02 	lds	r18, 0x024F
    153c:	30 91 50 02 	lds	r19, 0x0250
    1540:	f9 01       	movw	r30, r18
    1542:	e3 5f       	subi	r30, 0xF3	; 243
    1544:	fe 4f       	sbci	r31, 0xFE	; 254
    1546:	a1 e0       	ldi	r26, 0x01	; 1
    1548:	a0 83       	st	Z, r26
    154a:	32 97       	sbiw	r30, 0x02	; 2
    154c:	91 83       	std	Z+1, r25	; 0x01
    154e:	80 83       	st	Z, r24
    1550:	36 97       	sbiw	r30, 0x06	; 6
    1552:	71 83       	std	Z+1, r23	; 0x01
    1554:	60 83       	st	Z, r22
    1556:	34 96       	adiw	r30, 0x04	; 4
    1558:	51 83       	std	Z+1, r21	; 0x01
    155a:	40 83       	st	Z, r20
    155c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    1560:	e0 91 4f 02 	lds	r30, 0x024F
    1564:	f0 91 50 02 	lds	r31, 0x0250
    1568:	e2 5f       	subi	r30, 0xF2	; 242
    156a:	fe 4f       	sbci	r31, 0xFE	; 254
    156c:	80 81       	ld	r24, Z
    156e:	91 81       	ldd	r25, Z+1	; 0x01
    1570:	08 95       	ret
    1572:	61 c9       	rjmp	.-3390   	; 0x836 <Kernel_Create_Task>
    1574:	08 95       	ret

00001576 <Task_Next>:
    1576:	80 91 4d 02 	lds	r24, 0x024D
    157a:	90 91 4e 02 	lds	r25, 0x024E
    157e:	89 2b       	or	r24, r25
    1580:	59 f0       	breq	.+22     	; 0x1598 <Task_Next+0x22>
    1582:	f8 94       	cli
    1584:	e0 91 4f 02 	lds	r30, 0x024F
    1588:	f0 91 50 02 	lds	r31, 0x0250
    158c:	e3 5f       	subi	r30, 0xF3	; 243
    158e:	fe 4f       	sbci	r31, 0xFE	; 254
    1590:	82 e0       	ldi	r24, 0x02	; 2
    1592:	80 83       	st	Z, r24
    1594:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <Enter_Kernel>
    1598:	08 95       	ret

0000159a <Task_Sleep>:
    159a:	cf 93       	push	r28
    159c:	df 93       	push	r29
    159e:	20 91 4d 02 	lds	r18, 0x024D
    15a2:	30 91 4e 02 	lds	r19, 0x024E
    15a6:	23 2b       	or	r18, r19
    15a8:	c9 f1       	breq	.+114    	; 0x161c <Task_Sleep+0x82>
    15aa:	9c 01       	movw	r18, r24
    15ac:	f8 94       	cli
    15ae:	e0 91 4f 02 	lds	r30, 0x024F
    15b2:	f0 91 50 02 	lds	r31, 0x0250
    15b6:	df 01       	movw	r26, r30
    15b8:	a3 5f       	subi	r26, 0xF3	; 243
    15ba:	be 4f       	sbci	r27, 0xFE	; 254
    15bc:	83 e0       	ldi	r24, 0x03	; 3
    15be:	8c 93       	st	X, r24
    15c0:	80 91 94 00 	lds	r24, 0x0094
    15c4:	90 91 95 00 	lds	r25, 0x0095
    15c8:	61 e7       	ldi	r22, 0x71	; 113
    15ca:	72 e0       	ldi	r23, 0x02	; 2
    15cc:	d7 d4       	rcall	.+2478   	; 0x1f7c <__udivmodhi4>
    15ce:	a9 01       	movw	r20, r18
    15d0:	46 0f       	add	r20, r22
    15d2:	57 1f       	adc	r21, r23
    15d4:	c0 91 43 02 	lds	r28, 0x0243
    15d8:	d0 91 44 02 	lds	r29, 0x0244
    15dc:	9a 01       	movw	r18, r20
    15de:	36 95       	lsr	r19
    15e0:	27 95       	ror	r18
    15e2:	36 95       	lsr	r19
    15e4:	27 95       	ror	r18
    15e6:	ab e7       	ldi	r26, 0x7B	; 123
    15e8:	b4 e1       	ldi	r27, 0x14	; 20
    15ea:	e4 d4       	rcall	.+2504   	; 0x1fb4 <__umulhisi3>
    15ec:	96 95       	lsr	r25
    15ee:	87 95       	ror	r24
    15f0:	c8 0f       	add	r28, r24
    15f2:	d9 1f       	adc	r29, r25
    15f4:	df 01       	movw	r26, r30
    15f6:	a0 5f       	subi	r26, 0xF0	; 240
    15f8:	be 4f       	sbci	r27, 0xFE	; 254
    15fa:	11 96       	adiw	r26, 0x01	; 1
    15fc:	dc 93       	st	X, r29
    15fe:	ce 93       	st	-X, r28
    1600:	64 e6       	ldi	r22, 0x64	; 100
    1602:	68 9f       	mul	r22, r24
    1604:	90 01       	movw	r18, r0
    1606:	69 9f       	mul	r22, r25
    1608:	30 0d       	add	r19, r0
    160a:	11 24       	eor	r1, r1
    160c:	42 1b       	sub	r20, r18
    160e:	53 0b       	sbc	r21, r19
    1610:	ee 5e       	subi	r30, 0xEE	; 238
    1612:	fe 4f       	sbci	r31, 0xFE	; 254
    1614:	51 83       	std	Z+1, r21	; 0x01
    1616:	40 83       	st	Z, r20
    1618:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    161c:	df 91       	pop	r29
    161e:	cf 91       	pop	r28
    1620:	08 95       	ret

00001622 <setup>:
  * Setup pins and timers
  */
void setup() {
	/** For testing */
	/** pin 47 */
	init_LED_PORTL_pin2();
    1622:	0e 94 47 02 	call	0x48e	; 0x48e <init_LED_PORTL_pin2>

	/** pin 43 */
	init_LED_PORTL_pin6();
    1626:	0e 94 53 02 	call	0x4a6	; 0x4a6 <init_LED_PORTL_pin6>

	/** pin 44 */
	init_LED_PORTL_pin5();
    162a:	0e 94 4d 02 	call	0x49a	; 0x49a <init_LED_PORTL_pin5>

	/** pin 49 */
	init_LED_PORTL_pin0();
    162e:	0e 94 3b 02 	call	0x476	; 0x476 <init_LED_PORTL_pin0>

	/** pin 48 */
	init_LED_PORTL_pin1();
    1632:	0e 94 41 02 	call	0x482	; 0x482 <init_LED_PORTL_pin1>

	/** initialize Timer1 16 bit timer */
	Disable_Interrupt();
    1636:	f8 94       	cli

	/** Timer 1 */
	TCCR1A = 0;                 /** Set TCCR1A register to 0 */
    1638:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;                 /** Set TCCR1B register to 0 */
    163c:	e1 e8       	ldi	r30, 0x81	; 129
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	10 82       	st	Z, r1

	TCNT1 = 0;                  /** Initialize counter to 0 */
    1642:	10 92 85 00 	sts	0x0085, r1
    1646:	10 92 84 00 	sts	0x0084, r1

	OCR1A = 624;                /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
    164a:	80 e7       	ldi	r24, 0x70	; 112
    164c:	92 e0       	ldi	r25, 0x02	; 2
    164e:	90 93 89 00 	sts	0x0089, r25
    1652:	80 93 88 00 	sts	0x0088, r24

	TCCR1B |= (1 << WGM12);     /** Turns on CTC mode (TOP is now OCR1A) */
    1656:	80 81       	ld	r24, Z
    1658:	88 60       	ori	r24, 0x08	; 8
    165a:	80 83       	st	Z, r24

	TCCR1B |= (1 << CS12);      /** Prescaler 256 */
    165c:	80 81       	ld	r24, Z
    165e:	84 60       	ori	r24, 0x04	; 4
    1660:	80 83       	st	Z, r24

	TIMSK1 |= (1 << OCIE1A);    /** Enable timer compare interrupt */
    1662:	ef e6       	ldi	r30, 0x6F	; 111
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	82 60       	ori	r24, 0x02	; 2
    166a:	80 83       	st	Z, r24

	/** Timer 3 */
	TCCR3A = 0;                 /** Set TCCR0A register to 0 */
    166c:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0;                 /** Set TCCR0B register to 0 */
    1670:	e1 e9       	ldi	r30, 0x91	; 145
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	10 82       	st	Z, r1

	TCNT3 = 0;                  /** Initialize counter to 0 */
    1676:	10 92 95 00 	sts	0x0095, r1
    167a:	10 92 94 00 	sts	0x0094, r1

	OCR3A = 62499;              /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
    167e:	83 e2       	ldi	r24, 0x23	; 35
    1680:	94 ef       	ldi	r25, 0xF4	; 244
    1682:	90 93 99 00 	sts	0x0099, r25
    1686:	80 93 98 00 	sts	0x0098, r24

	TCCR3B |= (1 << WGM32);     /** Turns on CTC mode (TOP is now OCR1A) */
    168a:	80 81       	ld	r24, Z
    168c:	88 60       	ori	r24, 0x08	; 8
    168e:	80 83       	st	Z, r24

	TCCR3B |= (1 << CS32);      /** Prescaler 1024 */
    1690:	80 81       	ld	r24, Z
    1692:	84 60       	ori	r24, 0x04	; 4
    1694:	80 83       	st	Z, r24

	TIMSK3 = (1 << OCIE3A);
    1696:	82 e0       	ldi	r24, 0x02	; 2
    1698:	80 93 71 00 	sts	0x0071, r24

	Enable_Interrupt();
    169c:	78 94       	sei
    169e:	08 95       	ret

000016a0 <__vector_17>:
}

/**
  * ISR for timer1
  */
ISR(TIMER1_COMPA_vect) {
    16a0:	1f 92       	push	r1
    16a2:	0f 92       	push	r0
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	0f 92       	push	r0
    16a8:	11 24       	eor	r1, r1
    16aa:	0b b6       	in	r0, 0x3b	; 59
    16ac:	0f 92       	push	r0
    16ae:	df 92       	push	r13
    16b0:	ef 92       	push	r14
    16b2:	ff 92       	push	r15
    16b4:	0f 93       	push	r16
    16b6:	1f 93       	push	r17
    16b8:	2f 93       	push	r18
    16ba:	3f 93       	push	r19
    16bc:	4f 93       	push	r20
    16be:	5f 93       	push	r21
    16c0:	6f 93       	push	r22
    16c2:	7f 93       	push	r23
    16c4:	8f 93       	push	r24
    16c6:	9f 93       	push	r25
    16c8:	af 93       	push	r26
    16ca:	bf 93       	push	r27
    16cc:	ef 93       	push	r30
    16ce:	ff 93       	push	r31
    16d0:	cf 93       	push	r28
    16d2:	df 93       	push	r29
    16d4:	00 d0       	rcall	.+0      	; 0x16d6 <__vector_17+0x36>
    16d6:	1f 92       	push	r1
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
    16dc:	80 91 3f 02 	lds	r24, 0x023F
    16e0:	90 91 40 02 	lds	r25, 0x0240
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	9a 83       	std	Y+2, r25	; 0x02
    16e8:	89 83       	std	Y+1, r24	; 0x01
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	9a 81       	ldd	r25, Y+2	; 0x02
    16ee:	99 23       	and	r25, r25
    16f0:	0c f4       	brge	.+2      	; 0x16f4 <__vector_17+0x54>
    16f2:	8f c0       	rjmp	.+286    	; 0x1812 <__vector_17+0x172>
		if ((SleepQueue[i]->wakeTickOverflow <= tickOverflowCount) && (SleepQueue[i]->wakeTick <= (TCNT3/625))) {
    16f4:	e9 81       	ldd	r30, Y+1	; 0x01
    16f6:	fa 81       	ldd	r31, Y+2	; 0x02
    16f8:	ee 0f       	add	r30, r30
    16fa:	ff 1f       	adc	r31, r31
    16fc:	e3 5e       	subi	r30, 0xE3	; 227
    16fe:	fa 4e       	sbci	r31, 0xEA	; 234
    1700:	01 90       	ld	r0, Z+
    1702:	f0 81       	ld	r31, Z
    1704:	e0 2d       	mov	r30, r0
    1706:	e0 5f       	subi	r30, 0xF0	; 240
    1708:	fe 4f       	sbci	r31, 0xFE	; 254
    170a:	20 81       	ld	r18, Z
    170c:	31 81       	ldd	r19, Z+1	; 0x01
    170e:	80 91 43 02 	lds	r24, 0x0243
    1712:	90 91 44 02 	lds	r25, 0x0244
    1716:	82 17       	cp	r24, r18
    1718:	93 07       	cpc	r25, r19
    171a:	08 f4       	brcc	.+2      	; 0x171e <__vector_17+0x7e>
    171c:	7a c0       	rjmp	.+244    	; 0x1812 <__vector_17+0x172>
    171e:	e9 81       	ldd	r30, Y+1	; 0x01
    1720:	fa 81       	ldd	r31, Y+2	; 0x02
    1722:	ee 0f       	add	r30, r30
    1724:	ff 1f       	adc	r31, r31
    1726:	e3 5e       	subi	r30, 0xE3	; 227
    1728:	fa 4e       	sbci	r31, 0xEA	; 234
    172a:	01 90       	ld	r0, Z+
    172c:	f0 81       	ld	r31, Z
    172e:	e0 2d       	mov	r30, r0
    1730:	ee 5e       	subi	r30, 0xEE	; 238
    1732:	fe 4f       	sbci	r31, 0xFE	; 254
    1734:	20 81       	ld	r18, Z
    1736:	31 81       	ldd	r19, Z+1	; 0x01
    1738:	80 91 94 00 	lds	r24, 0x0094
    173c:	90 91 95 00 	lds	r25, 0x0095
    1740:	61 e7       	ldi	r22, 0x71	; 113
    1742:	72 e0       	ldi	r23, 0x02	; 2
    1744:	1b d4       	rcall	.+2102   	; 0x1f7c <__udivmodhi4>
    1746:	62 17       	cp	r22, r18
    1748:	73 07       	cpc	r23, r19
    174a:	60 f5       	brcc	.+88     	; 0x17a4 <__vector_17+0x104>
    174c:	62 c0       	rjmp	.+196    	; 0x1812 <__vector_17+0x172>
    174e:	e9 81       	ldd	r30, Y+1	; 0x01
    1750:	fa 81       	ldd	r31, Y+2	; 0x02
    1752:	ee 0f       	add	r30, r30
    1754:	ff 1f       	adc	r31, r31
    1756:	e3 5e       	subi	r30, 0xE3	; 227
    1758:	fa 4e       	sbci	r31, 0xEA	; 234
    175a:	01 90       	ld	r0, Z+
    175c:	f0 81       	ld	r31, Z
    175e:	e0 2d       	mov	r30, r0
    1760:	e0 5f       	subi	r30, 0xF0	; 240
    1762:	fe 4f       	sbci	r31, 0xFE	; 254
    1764:	20 81       	ld	r18, Z
    1766:	31 81       	ldd	r19, Z+1	; 0x01
    1768:	80 91 43 02 	lds	r24, 0x0243
    176c:	90 91 44 02 	lds	r25, 0x0244
    1770:	82 17       	cp	r24, r18
    1772:	93 07       	cpc	r25, r19
    1774:	08 f4       	brcc	.+2      	; 0x1778 <__vector_17+0xd8>
    1776:	4d c0       	rjmp	.+154    	; 0x1812 <__vector_17+0x172>
    1778:	e9 81       	ldd	r30, Y+1	; 0x01
    177a:	fa 81       	ldd	r31, Y+2	; 0x02
    177c:	ee 0f       	add	r30, r30
    177e:	ff 1f       	adc	r31, r31
    1780:	e3 5e       	subi	r30, 0xE3	; 227
    1782:	fa 4e       	sbci	r31, 0xEA	; 234
    1784:	01 90       	ld	r0, Z+
    1786:	f0 81       	ld	r31, Z
    1788:	e0 2d       	mov	r30, r0
    178a:	ee 5e       	subi	r30, 0xEE	; 238
    178c:	fe 4f       	sbci	r31, 0xFE	; 254
    178e:	20 81       	ld	r18, Z
    1790:	31 81       	ldd	r19, Z+1	; 0x01
    1792:	f7 01       	movw	r30, r14
    1794:	80 81       	ld	r24, Z
    1796:	91 81       	ldd	r25, Z+1	; 0x01
    1798:	b8 01       	movw	r22, r16
    179a:	f0 d3       	rcall	.+2016   	; 0x1f7c <__udivmodhi4>
    179c:	62 17       	cp	r22, r18
    179e:	73 07       	cpc	r23, r19
    17a0:	50 f4       	brcc	.+20     	; 0x17b6 <__vector_17+0x116>
    17a2:	37 c0       	rjmp	.+110    	; 0x1812 <__vector_17+0x172>
			volatile PD *p = dequeue(&SleepQueue, &SQCount);
			p->state = READY;
    17a4:	dd 24       	eor	r13, r13
    17a6:	d3 94       	inc	r13
ISR(TIMER1_COMPA_vect) {

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
		if ((SleepQueue[i]->wakeTickOverflow <= tickOverflowCount) && (SleepQueue[i]->wakeTick <= (TCNT3/625))) {
    17a8:	0f 2e       	mov	r0, r31
    17aa:	f4 e9       	ldi	r31, 0x94	; 148
    17ac:	ef 2e       	mov	r14, r31
    17ae:	f1 2c       	mov	r15, r1
    17b0:	f0 2d       	mov	r31, r0
    17b2:	01 e7       	ldi	r16, 0x71	; 113
    17b4:	12 e0       	ldi	r17, 0x02	; 2
			volatile PD *p = dequeue(&SleepQueue, &SQCount);
    17b6:	6f e3       	ldi	r22, 0x3F	; 63
    17b8:	72 e0       	ldi	r23, 0x02	; 2
    17ba:	8d e1       	ldi	r24, 0x1D	; 29
    17bc:	95 e1       	ldi	r25, 0x15	; 21
    17be:	2d d2       	rcall	.+1114   	; 0x1c1a <dequeue>
    17c0:	9c 83       	std	Y+4, r25	; 0x04
    17c2:	8b 83       	std	Y+3, r24	; 0x03
			p->state = READY;
    17c4:	fc 01       	movw	r30, r24
    17c6:	ec 5f       	subi	r30, 0xFC	; 252
    17c8:	fe 4f       	sbci	r31, 0xFE	; 254
    17ca:	d0 82       	st	Z, r13
			enqueueRQ(&p, &ReadyQueue, &RQCount);
    17cc:	41 e4       	ldi	r20, 0x41	; 65
    17ce:	52 e0       	ldi	r21, 0x02	; 2
    17d0:	6d e3       	ldi	r22, 0x3D	; 61
    17d2:	75 e1       	ldi	r23, 0x15	; 21
    17d4:	ce 01       	movw	r24, r28
    17d6:	03 96       	adiw	r24, 0x03	; 3
    17d8:	fd d0       	rcall	.+506    	; 0x19d4 <enqueueRQ>
			
			if (p->inheritedPy < Cp->inheritedPy)
    17da:	eb 81       	ldd	r30, Y+3	; 0x03
    17dc:	fc 81       	ldd	r31, Y+4	; 0x04
    17de:	e9 5f       	subi	r30, 0xF9	; 249
    17e0:	fe 4f       	sbci	r31, 0xFE	; 254
    17e2:	20 81       	ld	r18, Z
    17e4:	31 81       	ldd	r19, Z+1	; 0x01
    17e6:	e0 91 4f 02 	lds	r30, 0x024F
    17ea:	f0 91 50 02 	lds	r31, 0x0250
    17ee:	e9 5f       	subi	r30, 0xF9	; 249
    17f0:	fe 4f       	sbci	r31, 0xFE	; 254
    17f2:	80 81       	ld	r24, Z
    17f4:	91 81       	ldd	r25, Z+1	; 0x01
    17f6:	28 17       	cp	r18, r24
    17f8:	39 07       	cpc	r19, r25
    17fa:	08 f4       	brcc	.+2      	; 0x17fe <__vector_17+0x15e>
			
			{
				Task_Next();
    17fc:	bc de       	rcall	.-648    	; 0x1576 <Task_Next>
  */
ISR(TIMER1_COMPA_vect) {

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	9a 81       	ldd	r25, Y+2	; 0x02
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	9a 83       	std	Y+2, r25	; 0x02
    1806:	89 83       	std	Y+1, r24	; 0x01
    1808:	89 81       	ldd	r24, Y+1	; 0x01
    180a:	9a 81       	ldd	r25, Y+2	; 0x02
    180c:	99 23       	and	r25, r25
    180e:	0c f0       	brlt	.+2      	; 0x1812 <__vector_17+0x172>
    1810:	9e cf       	rjmp	.-196    	; 0x174e <__vector_17+0xae>
			break;
		}
	}

	//Task_Next();
}
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	df 91       	pop	r29
    181c:	cf 91       	pop	r28
    181e:	ff 91       	pop	r31
    1820:	ef 91       	pop	r30
    1822:	bf 91       	pop	r27
    1824:	af 91       	pop	r26
    1826:	9f 91       	pop	r25
    1828:	8f 91       	pop	r24
    182a:	7f 91       	pop	r23
    182c:	6f 91       	pop	r22
    182e:	5f 91       	pop	r21
    1830:	4f 91       	pop	r20
    1832:	3f 91       	pop	r19
    1834:	2f 91       	pop	r18
    1836:	1f 91       	pop	r17
    1838:	0f 91       	pop	r16
    183a:	ff 90       	pop	r15
    183c:	ef 90       	pop	r14
    183e:	df 90       	pop	r13
    1840:	0f 90       	pop	r0
    1842:	0b be       	out	0x3b, r0	; 59
    1844:	0f 90       	pop	r0
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	0f 90       	pop	r0
    184a:	1f 90       	pop	r1
    184c:	18 95       	reti

0000184e <__vector_32>:

/**
  * ISR for timer3
  */
ISR(TIMER3_COMPA_vect) {
    184e:	1f 92       	push	r1
    1850:	0f 92       	push	r0
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	0f 92       	push	r0
    1856:	11 24       	eor	r1, r1
    1858:	8f 93       	push	r24
    185a:	9f 93       	push	r25
	tickOverflowCount += 1;
    185c:	80 91 43 02 	lds	r24, 0x0243
    1860:	90 91 44 02 	lds	r25, 0x0244
    1864:	01 96       	adiw	r24, 0x01	; 1
    1866:	90 93 44 02 	sts	0x0244, r25
    186a:	80 93 43 02 	sts	0x0243, r24
}
    186e:	9f 91       	pop	r25
    1870:	8f 91       	pop	r24
    1872:	0f 90       	pop	r0
    1874:	0f be       	out	0x3f, r0	; 63
    1876:	0f 90       	pop	r0
    1878:	1f 90       	pop	r1
    187a:	18 95       	reti

0000187c <main>:

/**
  * This function boots the OS and creates the first task: a_main
  */
void main() {
	setup();
    187c:	d2 de       	rcall	.-604    	; 0x1622 <setup>
	
	OS_Init();
    187e:	37 d8       	rcall	.-3986   	; 0x8ee <OS_Init>
	Task_Create(a_main, 1, 1);
    1880:	41 e0       	ldi	r20, 0x01	; 1
    1882:	50 e0       	ldi	r21, 0x00	; 0
    1884:	61 e0       	ldi	r22, 0x01	; 1
    1886:	70 e0       	ldi	r23, 0x00	; 0
    1888:	86 e6       	ldi	r24, 0x66	; 102
    188a:	93 e0       	ldi	r25, 0x03	; 3
    188c:	4e de       	rcall	.-868    	; 0x152a <Task_Create>
	OS_Start();
    188e:	dd c9       	rjmp	.-3142   	; 0xc4a <OS_Start>
    1890:	08 95       	ret

00001892 <enqueueWQ>:
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
}

void enqueueWQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    1892:	cf 93       	push	r28
    1894:	df 93       	push	r29
    1896:	ea 01       	movw	r28, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    1898:	28 81       	ld	r18, Y
    189a:	39 81       	ldd	r19, Y+1	; 0x01
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
}

void enqueueWQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    189c:	2f 30       	cpi	r18, 0x0F	; 15
    189e:	31 05       	cpc	r19, r1
    18a0:	29 f1       	breq	.+74     	; 0x18ec <enqueueWQ+0x5a>
        return;
    }

    int i = (*QCount) - 1;
    18a2:	e8 81       	ld	r30, Y
    18a4:	f9 81       	ldd	r31, Y+1	; 0x01
    18a6:	9f 01       	movw	r18, r30
    18a8:	21 50       	subi	r18, 0x01	; 1
    18aa:	31 09       	sbc	r19, r1

    while(i >= 0) {
    18ac:	72 f0       	brmi	.+28     	; 0x18ca <enqueueWQ+0x38>
    18ae:	ee 0f       	add	r30, r30
    18b0:	ff 1f       	adc	r31, r31
    18b2:	e6 0f       	add	r30, r22
    18b4:	f7 1f       	adc	r31, r23
    18b6:	db 01       	movw	r26, r22
        Queue[i+1] = Queue[i];
    18b8:	32 91       	ld	r19, -Z
    18ba:	22 91       	ld	r18, -Z
    18bc:	33 83       	std	Z+3, r19	; 0x03
    18be:	22 83       	std	Z+2, r18	; 0x02
        return;
    }

    int i = (*QCount) - 1;

    while(i >= 0) {
    18c0:	ea 17       	cp	r30, r26
    18c2:	fb 07       	cpc	r31, r27
    18c4:	c9 f7       	brne	.-14     	; 0x18b8 <enqueueWQ+0x26>
        Queue[i+1] = Queue[i];
        i--;
    18c6:	2f ef       	ldi	r18, 0xFF	; 255
    18c8:	3f ef       	ldi	r19, 0xFF	; 255
    }

    Queue[i+1] = *p;
    18ca:	fc 01       	movw	r30, r24
    18cc:	80 81       	ld	r24, Z
    18ce:	91 81       	ldd	r25, Z+1	; 0x01
    18d0:	2f 5f       	subi	r18, 0xFF	; 255
    18d2:	3f 4f       	sbci	r19, 0xFF	; 255
    18d4:	22 0f       	add	r18, r18
    18d6:	33 1f       	adc	r19, r19
    18d8:	fb 01       	movw	r30, r22
    18da:	e2 0f       	add	r30, r18
    18dc:	f3 1f       	adc	r31, r19
    18de:	91 83       	std	Z+1, r25	; 0x01
    18e0:	80 83       	st	Z, r24
    (*QCount)++;
    18e2:	88 81       	ld	r24, Y
    18e4:	99 81       	ldd	r25, Y+1	; 0x01
    18e6:	01 96       	adiw	r24, 0x01	; 1
    18e8:	99 83       	std	Y+1, r25	; 0x01
    18ea:	88 83       	st	Y, r24
}
    18ec:	df 91       	pop	r29
    18ee:	cf 91       	pop	r28
    18f0:	08 95       	ret

000018f2 <enqueueSQ>:

void enqueueSQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    18f2:	cf 92       	push	r12
    18f4:	df 92       	push	r13
    18f6:	ef 92       	push	r14
    18f8:	ff 92       	push	r15
    18fa:	0f 93       	push	r16
    18fc:	1f 93       	push	r17
    18fe:	cf 93       	push	r28
    1900:	df 93       	push	r29

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    1902:	ea 01       	movw	r28, r20
    1904:	28 81       	ld	r18, Y
    1906:	39 81       	ldd	r19, Y+1	; 0x01
    Queue[i+1] = *p;
    (*QCount)++;
}

void enqueueSQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    1908:	2f 30       	cpi	r18, 0x0F	; 15
    190a:	31 05       	cpc	r19, r1
    190c:	09 f4       	brne	.+2      	; 0x1910 <enqueueSQ+0x1e>
    190e:	59 c0       	rjmp	.+178    	; 0x19c2 <enqueueSQ+0xd0>
        return;
    }

    int i = (*QCount) - 1;
    1910:	a8 81       	ld	r26, Y
    1912:	b9 81       	ldd	r27, Y+1	; 0x01
    1914:	11 97       	sbiw	r26, 0x01	; 1

    volatile PD *new = *p;
    1916:	fc 01       	movw	r30, r24
    1918:	c0 80       	ld	r12, Z
    191a:	d1 80       	ldd	r13, Z+1	; 0x01

    volatile PD *temp = Queue[i];
    191c:	fd 01       	movw	r30, r26
    191e:	ee 0f       	add	r30, r30
    1920:	ff 1f       	adc	r31, r31
    1922:	eb 01       	movw	r28, r22
    1924:	ce 0f       	add	r28, r30
    1926:	df 1f       	adc	r29, r31
    1928:	28 81       	ld	r18, Y
    192a:	39 81       	ldd	r19, Y+1	; 0x01

    while(i >= 0 && ((new->wakeTickOverflow > temp->wakeTickOverflow) || ((new->wakeTickOverflow >= temp->wakeTickOverflow) && (new->wakeTick >= temp->wakeTick)))) {
    192c:	bb 23       	and	r27, r27
    192e:	cc f1       	brlt	.+114    	; 0x19a2 <enqueueSQ+0xb0>
    1930:	fe 01       	movw	r30, r28
    1932:	76 01       	movw	r14, r12
    1934:	c0 ef       	ldi	r28, 0xF0	; 240
    1936:	ec 1a       	sub	r14, r28
    1938:	ce ef       	ldi	r28, 0xFE	; 254
    193a:	fc 0a       	sbc	r15, r28
    193c:	de ee       	ldi	r29, 0xEE	; 238
    193e:	cd 1a       	sub	r12, r29
    1940:	de ef       	ldi	r29, 0xFE	; 254
    1942:	dd 0a       	sbc	r13, r29
    1944:	0b c0       	rjmp	.+22     	; 0x195c <enqueueSQ+0x6a>
        Queue[i+1] = Queue[i];
    1946:	20 81       	ld	r18, Z
    1948:	31 81       	ldd	r19, Z+1	; 0x01
    194a:	33 83       	std	Z+3, r19	; 0x03
    194c:	22 83       	std	Z+2, r18	; 0x02
        i--;
    194e:	11 97       	sbiw	r26, 0x01	; 1
        temp = Queue[i];
    1950:	32 91       	ld	r19, -Z
    1952:	22 91       	ld	r18, -Z

    volatile PD *new = *p;

    volatile PD *temp = Queue[i];

    while(i >= 0 && ((new->wakeTickOverflow > temp->wakeTickOverflow) || ((new->wakeTickOverflow >= temp->wakeTickOverflow) && (new->wakeTick >= temp->wakeTick)))) {
    1954:	af 3f       	cpi	r26, 0xFF	; 255
    1956:	cf ef       	ldi	r28, 0xFF	; 255
    1958:	bc 07       	cpc	r27, r28
    195a:	19 f1       	breq	.+70     	; 0x19a2 <enqueueSQ+0xb0>
    195c:	e7 01       	movw	r28, r14
    195e:	08 81       	ld	r16, Y
    1960:	19 81       	ldd	r17, Y+1	; 0x01
    1962:	e9 01       	movw	r28, r18
    1964:	c0 5f       	subi	r28, 0xF0	; 240
    1966:	de 4f       	sbci	r29, 0xFE	; 254
    1968:	09 90       	ld	r0, Y+
    196a:	d8 81       	ld	r29, Y
    196c:	c0 2d       	mov	r28, r0
    196e:	c0 17       	cp	r28, r16
    1970:	d1 07       	cpc	r29, r17
    1972:	48 f3       	brcs	.-46     	; 0x1946 <enqueueSQ+0x54>
    1974:	e7 01       	movw	r28, r14
    1976:	08 81       	ld	r16, Y
    1978:	19 81       	ldd	r17, Y+1	; 0x01
    197a:	e9 01       	movw	r28, r18
    197c:	c0 5f       	subi	r28, 0xF0	; 240
    197e:	de 4f       	sbci	r29, 0xFE	; 254
    1980:	09 90       	ld	r0, Y+
    1982:	d8 81       	ld	r29, Y
    1984:	c0 2d       	mov	r28, r0
    1986:	0c 17       	cp	r16, r28
    1988:	1d 07       	cpc	r17, r29
    198a:	58 f0       	brcs	.+22     	; 0x19a2 <enqueueSQ+0xb0>
    198c:	e6 01       	movw	r28, r12
    198e:	08 81       	ld	r16, Y
    1990:	19 81       	ldd	r17, Y+1	; 0x01
    1992:	2e 5e       	subi	r18, 0xEE	; 238
    1994:	3e 4f       	sbci	r19, 0xFE	; 254
    1996:	e9 01       	movw	r28, r18
    1998:	28 81       	ld	r18, Y
    199a:	39 81       	ldd	r19, Y+1	; 0x01
    199c:	02 17       	cp	r16, r18
    199e:	13 07       	cpc	r17, r19
    19a0:	90 f6       	brcc	.-92     	; 0x1946 <enqueueSQ+0x54>
        Queue[i+1] = Queue[i];
        i--;
        temp = Queue[i];
    }

    Queue[i+1] = *p;
    19a2:	fc 01       	movw	r30, r24
    19a4:	80 81       	ld	r24, Z
    19a6:	91 81       	ldd	r25, Z+1	; 0x01
    19a8:	11 96       	adiw	r26, 0x01	; 1
    19aa:	aa 0f       	add	r26, r26
    19ac:	bb 1f       	adc	r27, r27
    19ae:	a6 0f       	add	r26, r22
    19b0:	b7 1f       	adc	r27, r23
    19b2:	8d 93       	st	X+, r24
    19b4:	9c 93       	st	X, r25
    (*QCount)++;
    19b6:	ea 01       	movw	r28, r20
    19b8:	88 81       	ld	r24, Y
    19ba:	99 81       	ldd	r25, Y+1	; 0x01
    19bc:	01 96       	adiw	r24, 0x01	; 1
    19be:	99 83       	std	Y+1, r25	; 0x01
    19c0:	88 83       	st	Y, r24
}
    19c2:	df 91       	pop	r29
    19c4:	cf 91       	pop	r28
    19c6:	1f 91       	pop	r17
    19c8:	0f 91       	pop	r16
    19ca:	ff 90       	pop	r15
    19cc:	ef 90       	pop	r14
    19ce:	df 90       	pop	r13
    19d0:	cf 90       	pop	r12
    19d2:	08 95       	ret

000019d4 <enqueueRQ>:

/*
 *  Insert into the queue sorted by priority
 */
void enqueueRQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    19d4:	cf 92       	push	r12
    19d6:	df 92       	push	r13
    19d8:	ef 92       	push	r14
    19da:	ff 92       	push	r15
    19dc:	0f 93       	push	r16
    19de:	1f 93       	push	r17
    19e0:	cf 93       	push	r28
    19e2:	df 93       	push	r29
    19e4:	6a 01       	movw	r12, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    19e6:	ea 01       	movw	r28, r20
    19e8:	28 81       	ld	r18, Y
    19ea:	39 81       	ldd	r19, Y+1	; 0x01

/*
 *  Insert into the queue sorted by priority
 */
void enqueueRQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    19ec:	2f 30       	cpi	r18, 0x0F	; 15
    19ee:	31 05       	cpc	r19, r1
    19f0:	09 f4       	brne	.+2      	; 0x19f4 <enqueueRQ+0x20>
    19f2:	4a c0       	rjmp	.+148    	; 0x1a88 <enqueueRQ+0xb4>
        return;
    }

    int i = (*QCount) - 1;
    19f4:	28 81       	ld	r18, Y
    19f6:	39 81       	ldd	r19, Y+1	; 0x01
    19f8:	21 50       	subi	r18, 0x01	; 1
    19fa:	31 09       	sbc	r19, r1

    volatile PD *new = *p;
    19fc:	fc 01       	movw	r30, r24
    19fe:	00 81       	ld	r16, Z
    1a00:	11 81       	ldd	r17, Z+1	; 0x01

    volatile PD *temp = Queue[i];
    1a02:	f9 01       	movw	r30, r18
    1a04:	ee 0f       	add	r30, r30
    1a06:	ff 1f       	adc	r31, r31
    1a08:	db 01       	movw	r26, r22
    1a0a:	ae 0f       	add	r26, r30
    1a0c:	bf 1f       	adc	r27, r31
    1a0e:	4d 91       	ld	r20, X+
    1a10:	5c 91       	ld	r21, X

    while(i >= 0 && (new->inheritedPy >= temp->inheritedPy)) {
    1a12:	33 23       	and	r19, r19
    1a14:	3c f1       	brlt	.+78     	; 0x1a64 <enqueueRQ+0x90>
    1a16:	d8 01       	movw	r26, r16
    1a18:	a9 5f       	subi	r26, 0xF9	; 249
    1a1a:	be 4f       	sbci	r27, 0xFE	; 254
    1a1c:	ed 90       	ld	r14, X+
    1a1e:	fc 90       	ld	r15, X
    1a20:	da 01       	movw	r26, r20
    1a22:	a9 5f       	subi	r26, 0xF9	; 249
    1a24:	be 4f       	sbci	r27, 0xFE	; 254
    1a26:	4d 91       	ld	r20, X+
    1a28:	5c 91       	ld	r21, X
    1a2a:	e4 16       	cp	r14, r20
    1a2c:	f5 06       	cpc	r15, r21
    1a2e:	d0 f0       	brcs	.+52     	; 0x1a64 <enqueueRQ+0x90>
    1a30:	e6 0f       	add	r30, r22
    1a32:	f7 1f       	adc	r31, r23
    1a34:	09 5f       	subi	r16, 0xF9	; 249
    1a36:	1e 4f       	sbci	r17, 0xFE	; 254
        Queue[i+1] = Queue[i];
    1a38:	a0 81       	ld	r26, Z
    1a3a:	b1 81       	ldd	r27, Z+1	; 0x01
    1a3c:	b3 83       	std	Z+3, r27	; 0x03
    1a3e:	a2 83       	std	Z+2, r26	; 0x02
        i--;
    1a40:	21 50       	subi	r18, 0x01	; 1
    1a42:	31 09       	sbc	r19, r1
        temp = Queue[i];
    1a44:	b2 91       	ld	r27, -Z
    1a46:	a2 91       	ld	r26, -Z

    volatile PD *new = *p;

    volatile PD *temp = Queue[i];

    while(i >= 0 && (new->inheritedPy >= temp->inheritedPy)) {
    1a48:	2f 3f       	cpi	r18, 0xFF	; 255
    1a4a:	4f ef       	ldi	r20, 0xFF	; 255
    1a4c:	34 07       	cpc	r19, r20
    1a4e:	51 f0       	breq	.+20     	; 0x1a64 <enqueueRQ+0x90>
    1a50:	e8 01       	movw	r28, r16
    1a52:	e8 80       	ld	r14, Y
    1a54:	f9 80       	ldd	r15, Y+1	; 0x01
    1a56:	a9 5f       	subi	r26, 0xF9	; 249
    1a58:	be 4f       	sbci	r27, 0xFE	; 254
    1a5a:	4d 91       	ld	r20, X+
    1a5c:	5c 91       	ld	r21, X
    1a5e:	e4 16       	cp	r14, r20
    1a60:	f5 06       	cpc	r15, r21
    1a62:	50 f7       	brcc	.-44     	; 0x1a38 <enqueueRQ+0x64>
        Queue[i+1] = Queue[i];
        i--;
        temp = Queue[i];
    }

    Queue[i+1] = *p;
    1a64:	fc 01       	movw	r30, r24
    1a66:	80 81       	ld	r24, Z
    1a68:	91 81       	ldd	r25, Z+1	; 0x01
    1a6a:	2f 5f       	subi	r18, 0xFF	; 255
    1a6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a6e:	22 0f       	add	r18, r18
    1a70:	33 1f       	adc	r19, r19
    1a72:	fb 01       	movw	r30, r22
    1a74:	e2 0f       	add	r30, r18
    1a76:	f3 1f       	adc	r31, r19
    1a78:	91 83       	std	Z+1, r25	; 0x01
    1a7a:	80 83       	st	Z, r24
    (*QCount)++;
    1a7c:	e6 01       	movw	r28, r12
    1a7e:	88 81       	ld	r24, Y
    1a80:	99 81       	ldd	r25, Y+1	; 0x01
    1a82:	01 96       	adiw	r24, 0x01	; 1
    1a84:	99 83       	std	Y+1, r25	; 0x01
    1a86:	88 83       	st	Y, r24
}
    1a88:	df 91       	pop	r29
    1a8a:	cf 91       	pop	r28
    1a8c:	1f 91       	pop	r17
    1a8e:	0f 91       	pop	r16
    1a90:	ff 90       	pop	r15
    1a92:	ef 90       	pop	r14
    1a94:	df 90       	pop	r13
    1a96:	cf 90       	pop	r12
    1a98:	08 95       	ret

00001a9a <dequeueWQ>:

/*
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {
    1a9a:	0f 93       	push	r16
    1a9c:	1f 93       	push	r17
    1a9e:	cf 93       	push	r28
    1aa0:	df 93       	push	r29

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    1aa2:	eb 01       	movw	r28, r22
    1aa4:	28 81       	ld	r18, Y
    1aa6:	39 81       	ldd	r19, Y+1	; 0x01
/*
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {

    if(isEmpty(QCount)) {
    1aa8:	23 2b       	or	r18, r19
    1aaa:	09 f4       	brne	.+2      	; 0x1aae <dequeueWQ+0x14>
    1aac:	54 c0       	rjmp	.+168    	; 0x1b56 <dequeueWQ+0xbc>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
    1aae:	28 81       	ld	r18, Y
    1ab0:	39 81       	ldd	r19, Y+1	; 0x01
    1ab2:	21 50       	subi	r18, 0x01	; 1
    1ab4:	31 09       	sbc	r19, r1
    1ab6:	0a f4       	brpl	.+2      	; 0x1aba <dequeueWQ+0x20>
    1ab8:	51 c0       	rjmp	.+162    	; 0x1b5c <dequeueWQ+0xc2>
        if(Queue[i]->m == m){
    1aba:	e9 01       	movw	r28, r18
    1abc:	cc 0f       	add	r28, r28
    1abe:	dd 1f       	adc	r29, r29
    1ac0:	fc 01       	movw	r30, r24
    1ac2:	ec 0f       	add	r30, r28
    1ac4:	fd 1f       	adc	r31, r29
    1ac6:	a0 81       	ld	r26, Z
    1ac8:	b1 81       	ldd	r27, Z+1	; 0x01
    1aca:	fd 01       	movw	r30, r26
    1acc:	ec 5e       	subi	r30, 0xEC	; 236
    1ace:	fe 4f       	sbci	r31, 0xFE	; 254
    1ad0:	01 90       	ld	r0, Z+
    1ad2:	f0 81       	ld	r31, Z
    1ad4:	e0 2d       	mov	r30, r0
    1ad6:	e4 17       	cp	r30, r20
    1ad8:	f5 07       	cpc	r31, r21
    1ada:	81 f4       	brne	.+32     	; 0x1afc <dequeueWQ+0x62>
    1adc:	0a c0       	rjmp	.+20     	; 0x1af2 <dequeueWQ+0x58>
    1ade:	ba 91       	ld	r27, -Y
    1ae0:	aa 91       	ld	r26, -Y
    1ae2:	fd 01       	movw	r30, r26
    1ae4:	ec 5e       	subi	r30, 0xEC	; 236
    1ae6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ae8:	00 81       	ld	r16, Z
    1aea:	11 81       	ldd	r17, Z+1	; 0x01
    1aec:	04 17       	cp	r16, r20
    1aee:	15 07       	cpc	r17, r21
    1af0:	39 f4       	brne	.+14     	; 0x1b00 <dequeueWQ+0x66>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
    1af2:	10 97       	sbiw	r26, 0x00	; 0
    1af4:	59 f4       	brne	.+22     	; 0x1b0c <dequeueWQ+0x72>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	32 c0       	rjmp	.+100    	; 0x1b60 <dequeueWQ+0xc6>
    1afc:	c8 0f       	add	r28, r24
    1afe:	d9 1f       	adc	r29, r25
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
    1b00:	21 50       	subi	r18, 0x01	; 1
    1b02:	31 09       	sbc	r19, r1
    1b04:	60 f7       	brcc	.-40     	; 0x1ade <dequeueWQ+0x44>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	2a c0       	rjmp	.+84     	; 0x1b60 <dequeueWQ+0xc6>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i<(*QCount)-1) {
    1b0c:	eb 01       	movw	r28, r22
    1b0e:	48 81       	ld	r20, Y
    1b10:	59 81       	ldd	r21, Y+1	; 0x01
    1b12:	41 50       	subi	r20, 0x01	; 1
    1b14:	51 09       	sbc	r21, r1
    1b16:	24 17       	cp	r18, r20
    1b18:	35 07       	cpc	r19, r21
    1b1a:	a4 f4       	brge	.+40     	; 0x1b44 <dequeueWQ+0xaa>
    1b1c:	a9 01       	movw	r20, r18
    1b1e:	44 0f       	add	r20, r20
    1b20:	55 1f       	adc	r21, r21
    1b22:	fc 01       	movw	r30, r24
    1b24:	e4 0f       	add	r30, r20
    1b26:	f5 1f       	adc	r31, r21
            Queue[i] = Queue[i+1];
    1b28:	82 81       	ldd	r24, Z+2	; 0x02
    1b2a:	93 81       	ldd	r25, Z+3	; 0x03
    1b2c:	81 93       	st	Z+, r24
    1b2e:	91 93       	st	Z+, r25
            i++;
    1b30:	2f 5f       	subi	r18, 0xFF	; 255
    1b32:	3f 4f       	sbci	r19, 0xFF	; 255
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i<(*QCount)-1) {
    1b34:	eb 01       	movw	r28, r22
    1b36:	48 81       	ld	r20, Y
    1b38:	59 81       	ldd	r21, Y+1	; 0x01
    1b3a:	41 50       	subi	r20, 0x01	; 1
    1b3c:	51 09       	sbc	r21, r1
    1b3e:	24 17       	cp	r18, r20
    1b40:	35 07       	cpc	r19, r21
    1b42:	94 f3       	brlt	.-28     	; 0x1b28 <dequeueWQ+0x8e>
            Queue[i] = Queue[i+1];
            i++;
        }
        (*QCount)--;
    1b44:	fb 01       	movw	r30, r22
    1b46:	80 81       	ld	r24, Z
    1b48:	91 81       	ldd	r25, Z+1	; 0x01
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	91 83       	std	Z+1, r25	; 0x01
    1b4e:	80 83       	st	Z, r24

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
        if(Queue[i]->m == m){
            result = Queue[i];
    1b50:	8a 2f       	mov	r24, r26
    1b52:	9b 2f       	mov	r25, r27
    1b54:	05 c0       	rjmp	.+10     	; 0x1b60 <dequeueWQ+0xc6>
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {

    if(isEmpty(QCount)) {
        return NULL;
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	02 c0       	rjmp	.+4      	; 0x1b60 <dequeueWQ+0xc6>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
}
    1b60:	df 91       	pop	r29
    1b62:	cf 91       	pop	r28
    1b64:	1f 91       	pop	r17
    1b66:	0f 91       	pop	r16
    1b68:	08 95       	ret

00001b6a <dequeueRQ>:

/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {
    1b6a:	cf 93       	push	r28
    1b6c:	df 93       	push	r29
    1b6e:	eb 01       	movw	r28, r22

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    1b70:	28 81       	ld	r18, Y
    1b72:	39 81       	ldd	r19, Y+1	; 0x01
/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
    1b74:	23 2b       	or	r18, r19
    1b76:	09 f4       	brne	.+2      	; 0x1b7a <dequeueRQ+0x10>
    1b78:	48 c0       	rjmp	.+144    	; 0x1c0a <dequeueRQ+0xa0>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
    1b7a:	e8 81       	ld	r30, Y
    1b7c:	f9 81       	ldd	r31, Y+1	; 0x01
    1b7e:	9f 01       	movw	r18, r30
    1b80:	21 50       	subi	r18, 0x01	; 1
    1b82:	31 09       	sbc	r19, r1
    1b84:	0a f4       	brpl	.+2      	; 0x1b88 <dequeueRQ+0x1e>
    1b86:	44 c0       	rjmp	.+136    	; 0x1c10 <dequeueRQ+0xa6>
    1b88:	ee 0f       	add	r30, r30
    1b8a:	ff 1f       	adc	r31, r31
    1b8c:	e8 0f       	add	r30, r24
    1b8e:	f9 1f       	adc	r31, r25
        if((Queue[i]->suspended == 0) && (Queue[i]->state == READY)) {
    1b90:	52 91       	ld	r21, -Z
    1b92:	42 91       	ld	r20, -Z
    1b94:	da 01       	movw	r26, r20
    1b96:	a6 5e       	subi	r26, 0xE6	; 230
    1b98:	be 4f       	sbci	r27, 0xFE	; 254
    1b9a:	6d 91       	ld	r22, X+
    1b9c:	7c 91       	ld	r23, X
    1b9e:	11 97       	sbiw	r26, 0x01	; 1
    1ba0:	67 2b       	or	r22, r23
    1ba2:	59 f4       	brne	.+22     	; 0x1bba <dequeueRQ+0x50>
    1ba4:	56 97       	sbiw	r26, 0x16	; 22
    1ba6:	6c 91       	ld	r22, X
    1ba8:	61 30       	cpi	r22, 0x01	; 1
    1baa:	39 f4       	brne	.+14     	; 0x1bba <dequeueRQ+0x50>
    1bac:	f9 01       	movw	r30, r18
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
    1bae:	41 15       	cp	r20, r1
    1bb0:	51 05       	cpc	r21, r1
    1bb2:	49 f4       	brne	.+18     	; 0x1bc6 <dequeueRQ+0x5c>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	2d c0       	rjmp	.+90     	; 0x1c14 <dequeueRQ+0xaa>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
    1bba:	21 50       	subi	r18, 0x01	; 1
    1bbc:	31 09       	sbc	r19, r1
    1bbe:	40 f7       	brcc	.-48     	; 0x1b90 <dequeueRQ+0x26>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	27 c0       	rjmp	.+78     	; 0x1c14 <dequeueRQ+0xaa>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i < (*QCount)-1) {
    1bc6:	68 81       	ld	r22, Y
    1bc8:	79 81       	ldd	r23, Y+1	; 0x01
    1bca:	61 50       	subi	r22, 0x01	; 1
    1bcc:	71 09       	sbc	r23, r1
    1bce:	26 17       	cp	r18, r22
    1bd0:	37 07       	cpc	r19, r23
    1bd2:	9c f4       	brge	.+38     	; 0x1bfa <dequeueRQ+0x90>
    1bd4:	ee 0f       	add	r30, r30
    1bd6:	ff 1f       	adc	r31, r31
    1bd8:	dc 01       	movw	r26, r24
    1bda:	ae 0f       	add	r26, r30
    1bdc:	bf 1f       	adc	r27, r31
            Queue[i] = Queue[i+1];
    1bde:	12 96       	adiw	r26, 0x02	; 2
    1be0:	8d 91       	ld	r24, X+
    1be2:	9c 91       	ld	r25, X
    1be4:	13 97       	sbiw	r26, 0x03	; 3
    1be6:	8d 93       	st	X+, r24
    1be8:	9d 93       	st	X+, r25
            i++;
    1bea:	2f 5f       	subi	r18, 0xFF	; 255
    1bec:	3f 4f       	sbci	r19, 0xFF	; 255
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i < (*QCount)-1) {
    1bee:	e8 81       	ld	r30, Y
    1bf0:	f9 81       	ldd	r31, Y+1	; 0x01
    1bf2:	31 97       	sbiw	r30, 0x01	; 1
    1bf4:	2e 17       	cp	r18, r30
    1bf6:	3f 07       	cpc	r19, r31
    1bf8:	94 f3       	brlt	.-28     	; 0x1bde <dequeueRQ+0x74>
            Queue[i] = Queue[i+1];
            i++;
        }
        (*QCount)--;
    1bfa:	88 81       	ld	r24, Y
    1bfc:	99 81       	ldd	r25, Y+1	; 0x01
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	99 83       	std	Y+1, r25	; 0x01
    1c02:	88 83       	st	Y, r24
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
        if((Queue[i]->suspended == 0) && (Queue[i]->state == READY)) {
    1c04:	84 2f       	mov	r24, r20
    1c06:	95 2f       	mov	r25, r21
    1c08:	05 c0       	rjmp	.+10     	; 0x1c14 <dequeueRQ+0xaa>
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
        return NULL;
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	02 c0       	rjmp	.+4      	; 0x1c14 <dequeueRQ+0xaa>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	90 e0       	ldi	r25, 0x00	; 0
}
    1c14:	df 91       	pop	r29
    1c16:	cf 91       	pop	r28
    1c18:	08 95       	ret

00001c1a <dequeue>:

/*
 *  Return the first element of the queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
    1c1a:	db 01       	movw	r26, r22

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    1c1c:	2d 91       	ld	r18, X+
    1c1e:	3c 91       	ld	r19, X
    1c20:	11 97       	sbiw	r26, 0x01	; 1
/*
 *  Return the first element of the queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
    1c22:	23 2b       	or	r18, r19
    1c24:	a9 f0       	breq	.+42     	; 0x1c50 <dequeue+0x36>
        return;
    }

    volatile PD *result = (Queue[(*QCount)-1]);
    1c26:	2d 91       	ld	r18, X+
    1c28:	3c 91       	ld	r19, X
    1c2a:	11 97       	sbiw	r26, 0x01	; 1
    1c2c:	f9 01       	movw	r30, r18
    1c2e:	e1 50       	subi	r30, 0x01	; 1
    1c30:	f0 48       	sbci	r31, 0x80	; 128
    1c32:	ee 0f       	add	r30, r30
    1c34:	ff 1f       	adc	r31, r31
    1c36:	e8 0f       	add	r30, r24
    1c38:	f9 1f       	adc	r31, r25
    1c3a:	80 81       	ld	r24, Z
    1c3c:	91 81       	ldd	r25, Z+1	; 0x01
    (*QCount)--;
    1c3e:	2d 91       	ld	r18, X+
    1c40:	3c 91       	ld	r19, X
    1c42:	11 97       	sbiw	r26, 0x01	; 1
    1c44:	21 50       	subi	r18, 0x01	; 1
    1c46:	31 09       	sbc	r19, r1
    1c48:	11 96       	adiw	r26, 0x01	; 1
    1c4a:	3c 93       	st	X, r19
    1c4c:	2e 93       	st	-X, r18
    1c4e:	08 95       	ret

    return result;
}
    1c50:	08 95       	ret

00001c52 <_get_status>:
	}

	wh = (16 - weight) * 100;
	wh /= 16;
	return wh;
}
    1c52:	2d 98       	cbi	0x05, 5	; 5
    1c54:	8f ef       	ldi	r24, 0xFF	; 255
    1c56:	04 d1       	rcall	.+520    	; 0x1e60 <SPI_Write_Byte>
    1c58:	2d 9a       	sbi	0x05, 5	; 5
    1c5a:	08 95       	ret

00001c5c <_set_register>:
    1c5c:	0f 93       	push	r16
    1c5e:	1f 93       	push	r17
    1c60:	cf 93       	push	r28
    1c62:	df 93       	push	r29
    1c64:	8b 01       	movw	r16, r22
    1c66:	d4 2f       	mov	r29, r20
    1c68:	2d 98       	cbi	0x05, 5	; 5
    1c6a:	8f 71       	andi	r24, 0x1F	; 31
    1c6c:	80 62       	ori	r24, 0x20	; 32
    1c6e:	f8 d0       	rcall	.+496    	; 0x1e60 <SPI_Write_Byte>
    1c70:	c8 2f       	mov	r28, r24
    1c72:	6d 2f       	mov	r22, r29
    1c74:	c8 01       	movw	r24, r16
    1c76:	e1 d0       	rcall	.+450    	; 0x1e3a <SPI_Write_Block>
    1c78:	2d 9a       	sbi	0x05, 5	; 5
    1c7a:	8c 2f       	mov	r24, r28
    1c7c:	df 91       	pop	r29
    1c7e:	cf 91       	pop	r28
    1c80:	1f 91       	pop	r17
    1c82:	0f 91       	pop	r16
    1c84:	08 95       	ret

00001c86 <_get_register>:
    1c86:	0f 93       	push	r16
    1c88:	1f 93       	push	r17
    1c8a:	cf 93       	push	r28
    1c8c:	df 93       	push	r29
    1c8e:	eb 01       	movw	r28, r22
    1c90:	14 2f       	mov	r17, r20
    1c92:	44 23       	and	r20, r20
    1c94:	69 f0       	breq	.+26     	; 0x1cb0 <_get_register+0x2a>
    1c96:	fb 01       	movw	r30, r22
    1c98:	2f ef       	ldi	r18, 0xFF	; 255
    1c9a:	24 0f       	add	r18, r20
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	2f 5f       	subi	r18, 0xFF	; 255
    1ca0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca2:	26 0f       	add	r18, r22
    1ca4:	37 1f       	adc	r19, r23
    1ca6:	9f ef       	ldi	r25, 0xFF	; 255
    1ca8:	91 93       	st	Z+, r25
    1caa:	e2 17       	cp	r30, r18
    1cac:	f3 07       	cpc	r31, r19
    1cae:	e1 f7       	brne	.-8      	; 0x1ca8 <_get_register+0x22>
    1cb0:	2d 98       	cbi	0x05, 5	; 5
    1cb2:	8f 71       	andi	r24, 0x1F	; 31
    1cb4:	d5 d0       	rcall	.+426    	; 0x1e60 <SPI_Write_Byte>
    1cb6:	08 2f       	mov	r16, r24
    1cb8:	41 2f       	mov	r20, r17
    1cba:	be 01       	movw	r22, r28
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	a5 d0       	rcall	.+330    	; 0x1e0c <SPI_ReadWrite_Block>
    1cc2:	2d 9a       	sbi	0x05, 5	; 5
    1cc4:	80 2f       	mov	r24, r16
    1cc6:	df 91       	pop	r29
    1cc8:	cf 91       	pop	r28
    1cca:	1f 91       	pop	r17
    1ccc:	0f 91       	pop	r16
    1cce:	08 95       	ret

00001cd0 <_set_rx_mode>:
    1cd0:	cf 93       	push	r28
    1cd2:	df 93       	push	r29
    1cd4:	1f 92       	push	r1
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
    1cda:	41 e0       	ldi	r20, 0x01	; 1
    1cdc:	be 01       	movw	r22, r28
    1cde:	6f 5f       	subi	r22, 0xFF	; 255
    1ce0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	d0 df       	rcall	.-96     	; 0x1c86 <_get_register>
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	80 fd       	sbrc	r24, 0
    1cea:	10 c0       	rjmp	.+32     	; 0x1d0c <_set_rx_mode+0x3c>
    1cec:	81 60       	ori	r24, 0x01	; 1
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	41 e0       	ldi	r20, 0x01	; 1
    1cf2:	be 01       	movw	r22, r28
    1cf4:	6f 5f       	subi	r22, 0xFF	; 255
    1cf6:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	b0 df       	rcall	.-160    	; 0x1c5c <_set_register>
    1cfc:	85 e1       	ldi	r24, 0x15	; 21
    1cfe:	8a 95       	dec	r24
    1d00:	f1 f7       	brne	.-4      	; 0x1cfe <_set_rx_mode+0x2e>
    1d02:	00 c0       	rjmp	.+0      	; 0x1d04 <_set_rx_mode+0x34>
    1d04:	85 e1       	ldi	r24, 0x15	; 21
    1d06:	8a 95       	dec	r24
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <_set_rx_mode+0x36>
    1d0a:	00 c0       	rjmp	.+0      	; 0x1d0c <_set_rx_mode+0x3c>
    1d0c:	0f 90       	pop	r0
    1d0e:	df 91       	pop	r29
    1d10:	cf 91       	pop	r28
    1d12:	08 95       	ret

00001d14 <_reset_pipe0_address>:
    1d14:	80 91 0a 02 	lds	r24, 0x020A
    1d18:	88 23       	and	r24, r24
    1d1a:	29 f0       	breq	.+10     	; 0x1d26 <_reset_pipe0_address+0x12>
    1d1c:	45 e0       	ldi	r20, 0x05	; 5
    1d1e:	65 e0       	ldi	r22, 0x05	; 5
    1d20:	72 e0       	ldi	r23, 0x02	; 2
    1d22:	8a e0       	ldi	r24, 0x0A	; 10
    1d24:	9b cf       	rjmp	.-202    	; 0x1c5c <_set_register>
    1d26:	08 95       	ret

00001d28 <__vector_1>:

// Interrupt handler
ISR(INT0_vect)
{
    1d28:	1f 92       	push	r1
    1d2a:	0f 92       	push	r0
    1d2c:	0f b6       	in	r0, 0x3f	; 63
    1d2e:	0f 92       	push	r0
    1d30:	11 24       	eor	r1, r1
    1d32:	0b b6       	in	r0, 0x3b	; 59
    1d34:	0f 92       	push	r0
    1d36:	2f 93       	push	r18
    1d38:	3f 93       	push	r19
    1d3a:	4f 93       	push	r20
    1d3c:	5f 93       	push	r21
    1d3e:	6f 93       	push	r22
    1d40:	7f 93       	push	r23
    1d42:	8f 93       	push	r24
    1d44:	9f 93       	push	r25
    1d46:	af 93       	push	r26
    1d48:	bf 93       	push	r27
    1d4a:	ef 93       	push	r30
    1d4c:	ff 93       	push	r31
    1d4e:	cf 93       	push	r28
    1d50:	df 93       	push	r29
    1d52:	1f 92       	push	r1
    1d54:	cd b7       	in	r28, 0x3d	; 61
    1d56:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;
    uint8_t pipe_number;

    RADIO_CE_LOW();
    1d58:	2c 98       	cbi	0x05, 4	; 5

    status = _get_status();
    1d5a:	7b df       	rcall	.-266    	; 0x1c52 <_get_status>
    1d5c:	89 83       	std	Y+1, r24	; 0x01

    if (status & _BV(RX_DR)) {
    1d5e:	86 ff       	sbrs	r24, 6
    1d60:	04 c0       	rjmp	.+8      	; 0x1d6a <__vector_1+0x42>
        pipe_number =  (status & 0xE) >> 1;
    1d62:	8e 70       	andi	r24, 0x0E	; 14
        radio_rxhandler(pipe_number);
    1d64:	86 95       	lsr	r24
    1d66:	0e 94 66 01 	call	0x2cc	; 0x2cc <radio_rxhandler>
    }

    // We can get the TX_DS or the MAX_RT interrupt, but not both.
    if (status & _BV(TX_DS)) {
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
    1d6c:	85 ff       	sbrs	r24, 5
    1d6e:	1b c0       	rjmp	.+54     	; 0x1da6 <__vector_1+0x7e>
    	// if there's nothing left to transmit, switch back to receive mode.
        transmit_lock = 0;
    1d70:	10 92 81 15 	sts	0x1581, r1
        _reset_pipe0_address();
    1d74:	cf df       	rcall	.-98     	; 0x1d14 <_reset_pipe0_address>
        _set_rx_mode();
    1d76:	ac df       	rcall	.-168    	; 0x1cd0 <_set_rx_mode>

        // indicate in the history that a packet was transmitted successfully by appending a 1.
        tx_history <<= 1;
    1d78:	80 91 03 02 	lds	r24, 0x0203
    1d7c:	90 91 04 02 	lds	r25, 0x0204
    1d80:	88 0f       	add	r24, r24
    1d82:	99 1f       	adc	r25, r25
    1d84:	90 93 04 02 	sts	0x0204, r25
    1d88:	80 93 03 02 	sts	0x0203, r24
        tx_history |= 1;
    1d8c:	80 91 03 02 	lds	r24, 0x0203
    1d90:	90 91 04 02 	lds	r25, 0x0204
    1d94:	81 60       	ori	r24, 0x01	; 1
    1d96:	90 93 04 02 	sts	0x0204, r25
    1d9a:	80 93 03 02 	sts	0x0203, r24
        tx_last_status = RADIO_TX_SUCCESS;
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	80 93 02 02 	sts	0x0202, r24
    1da4:	14 c0       	rjmp	.+40     	; 0x1dce <__vector_1+0xa6>
    } else if (status & _BV(MAX_RT)) {
    1da6:	84 ff       	sbrs	r24, 4
    1da8:	12 c0       	rjmp	.+36     	; 0x1dce <__vector_1+0xa6>
        // enable SPI
       // RADIO_CSN_LOW();


        // flush the failed packet (it stays in the Tx FIFO; we could try to resend it by setting CE high)
        SPI_Write_Byte( FLUSH_TX );
    1daa:	81 ee       	ldi	r24, 0xE1	; 225
    1dac:	59 d0       	rcall	.+178    	; 0x1e60 <SPI_Write_Byte>

        // resynch SPI
        //RADIO_CSN_HIGH();

        transmit_lock = 0;
    1dae:	10 92 81 15 	sts	0x1581, r1
        _reset_pipe0_address();
    1db2:	b0 df       	rcall	.-160    	; 0x1d14 <_reset_pipe0_address>
        _set_rx_mode();
    1db4:	8d df       	rcall	.-230    	; 0x1cd0 <_set_rx_mode>

        // indicate in the history that a packet was dropped by appending a 0.
        tx_history <<= 1;
    1db6:	80 91 03 02 	lds	r24, 0x0203
    1dba:	90 91 04 02 	lds	r25, 0x0204
    1dbe:	88 0f       	add	r24, r24
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	90 93 04 02 	sts	0x0204, r25
    1dc6:	80 93 03 02 	sts	0x0203, r24
        tx_last_status = RADIO_TX_MAX_RT;
    1dca:	10 92 02 02 	sts	0x0202, r1
    }

    // clear the interrupt flags.
	status = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
    1dce:	80 e7       	ldi	r24, 0x70	; 112
    1dd0:	89 83       	std	Y+1, r24	; 0x01
	_set_register(STATUS, &status, 1);
    1dd2:	41 e0       	ldi	r20, 0x01	; 1
    1dd4:	be 01       	movw	r22, r28
    1dd6:	6f 5f       	subi	r22, 0xFF	; 255
    1dd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dda:	87 e0       	ldi	r24, 0x07	; 7
    1ddc:	3f df       	rcall	.-386    	; 0x1c5c <_set_register>

    RADIO_CE_HIGH();
    1dde:	2c 9a       	sbi	0x05, 4	; 5
}
    1de0:	0f 90       	pop	r0
    1de2:	df 91       	pop	r29
    1de4:	cf 91       	pop	r28
    1de6:	ff 91       	pop	r31
    1de8:	ef 91       	pop	r30
    1dea:	bf 91       	pop	r27
    1dec:	af 91       	pop	r26
    1dee:	9f 91       	pop	r25
    1df0:	8f 91       	pop	r24
    1df2:	7f 91       	pop	r23
    1df4:	6f 91       	pop	r22
    1df6:	5f 91       	pop	r21
    1df8:	4f 91       	pop	r20
    1dfa:	3f 91       	pop	r19
    1dfc:	2f 91       	pop	r18
    1dfe:	0f 90       	pop	r0
    1e00:	0b be       	out	0x3b, r0	; 59
    1e02:	0f 90       	pop	r0
    1e04:	0f be       	out	0x3f, r0	; 63
    1e06:	0f 90       	pop	r0
    1e08:	1f 90       	pop	r1
    1e0a:	18 95       	reti

00001e0c <SPI_ReadWrite_Block>:
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1e0c:	44 23       	and	r20, r20
    1e0e:	a1 f0       	breq	.+40     	; 0x1e38 <SPI_ReadWrite_Block+0x2c>
    1e10:	fc 01       	movw	r30, r24
    1e12:	a6 2f       	mov	r26, r22
    1e14:	b7 2f       	mov	r27, r23
    1e16:	41 50       	subi	r20, 0x01	; 1
    1e18:	24 2f       	mov	r18, r20
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	2f 5f       	subi	r18, 0xFF	; 255
    1e1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e20:	28 0f       	add	r18, r24
    1e22:	39 1f       	adc	r19, r25
          SPDR = data[i];
    1e24:	91 91       	ld	r25, Z+
    1e26:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1e28:	0d b4       	in	r0, 0x2d	; 45
    1e2a:	07 fe       	sbrs	r0, 7
    1e2c:	fd cf       	rjmp	.-6      	; 0x1e28 <SPI_ReadWrite_Block+0x1c>
          buffer[i] = SPDR;
    1e2e:	9e b5       	in	r25, 0x2e	; 46
    1e30:	9d 93       	st	X+, r25
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1e32:	e2 17       	cp	r30, r18
    1e34:	f3 07       	cpc	r31, r19
    1e36:	b1 f7       	brne	.-20     	; 0x1e24 <SPI_ReadWrite_Block+0x18>
    1e38:	08 95       	ret

00001e3a <SPI_Write_Block>:
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1e3a:	66 23       	and	r22, r22
    1e3c:	81 f0       	breq	.+32     	; 0x1e5e <SPI_Write_Block+0x24>
    1e3e:	fc 01       	movw	r30, r24
    1e40:	61 50       	subi	r22, 0x01	; 1
    1e42:	26 2f       	mov	r18, r22
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	2f 5f       	subi	r18, 0xFF	; 255
    1e48:	3f 4f       	sbci	r19, 0xFF	; 255
    1e4a:	28 0f       	add	r18, r24
    1e4c:	39 1f       	adc	r19, r25
          SPDR = data[i];
    1e4e:	91 91       	ld	r25, Z+
    1e50:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1e52:	0d b4       	in	r0, 0x2d	; 45
    1e54:	07 fe       	sbrs	r0, 7
    1e56:	fd cf       	rjmp	.-6      	; 0x1e52 <SPI_Write_Block+0x18>
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1e58:	e2 17       	cp	r30, r18
    1e5a:	f3 07       	cpc	r31, r19
    1e5c:	c1 f7       	brne	.-16     	; 0x1e4e <SPI_Write_Block+0x14>
    1e5e:	08 95       	ret

00001e60 <SPI_Write_Byte>:
    }
}

uint8_t SPI_Write_Byte(uint8_t byte)
{
    SPDR = byte;
    1e60:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
    1e62:	0d b4       	in	r0, 0x2d	; 45
    1e64:	07 fe       	sbrs	r0, 7
    1e66:	fd cf       	rjmp	.-6      	; 0x1e62 <SPI_Write_Byte+0x2>
    return SPDR;
    1e68:	8e b5       	in	r24, 0x2e	; 46
}
    1e6a:	08 95       	ret

00001e6c <uart_putchar>:
void uart_reset_receive(int uart)
{
	if (uart) {
		uart_buffer_1_index = 0;
	} else {
		uart_buffer_index = 0;
    1e6c:	67 2b       	or	r22, r23
    1e6e:	41 f0       	breq	.+16     	; 0x1e80 <uart_putchar+0x14>
    1e70:	e8 ec       	ldi	r30, 0xC8	; 200
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	90 81       	ld	r25, Z
    1e76:	95 ff       	sbrs	r25, 5
    1e78:	fd cf       	rjmp	.-6      	; 0x1e74 <uart_putchar+0x8>
    1e7a:	80 93 ce 00 	sts	0x00CE, r24
    1e7e:	08 95       	ret
    1e80:	e0 ec       	ldi	r30, 0xC0	; 192
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	90 81       	ld	r25, Z
    1e86:	95 ff       	sbrs	r25, 5
    1e88:	fd cf       	rjmp	.-6      	; 0x1e84 <uart_putchar+0x18>
    1e8a:	80 93 c6 00 	sts	0x00C6, r24
    1e8e:	08 95       	ret

00001e90 <uart_send_string>:
	}
}
void uart_send_string(char *string, int uart){
    1e90:	0f 93       	push	r16
    1e92:	1f 93       	push	r17
    1e94:	cf 93       	push	r28
    1e96:	df 93       	push	r29
    1e98:	ec 01       	movw	r28, r24
	
	while (*string != '\0')
    1e9a:	88 81       	ld	r24, Y
    1e9c:	88 23       	and	r24, r24
    1e9e:	39 f0       	breq	.+14     	; 0x1eae <uart_send_string+0x1e>
    1ea0:	8b 01       	movw	r16, r22
    1ea2:	21 96       	adiw	r28, 0x01	; 1
	{
		uart_putchar(*string, uart);
    1ea4:	b8 01       	movw	r22, r16
    1ea6:	e2 df       	rcall	.-60     	; 0x1e6c <uart_putchar>
		uart_buffer_index = 0;
	}
}
void uart_send_string(char *string, int uart){
	
	while (*string != '\0')
    1ea8:	89 91       	ld	r24, Y+
    1eaa:	81 11       	cpse	r24, r1
    1eac:	fb cf       	rjmp	.-10     	; 0x1ea4 <uart_send_string+0x14>
		uart_putchar(*string, uart);
		string++;
	}
	
	
}
    1eae:	df 91       	pop	r29
    1eb0:	cf 91       	pop	r28
    1eb2:	1f 91       	pop	r17
    1eb4:	0f 91       	pop	r16
    1eb6:	08 95       	ret

00001eb8 <__vector_25>:
/**
 * UART receive byte ISR
 */
ISR(USART0_RX_vect)
{
    1eb8:	1f 92       	push	r1
    1eba:	0f 92       	push	r0
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	0f 92       	push	r0
    1ec0:	11 24       	eor	r1, r1
    1ec2:	0b b6       	in	r0, 0x3b	; 59
    1ec4:	0f 92       	push	r0
    1ec6:	8f 93       	push	r24
    1ec8:	9f 93       	push	r25
    1eca:	ef 93       	push	r30
    1ecc:	ff 93       	push	r31
	while(!(UCSR0A & (1<<RXC0)));
    1ece:	e0 ec       	ldi	r30, 0xC0	; 192
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	88 23       	and	r24, r24
    1ed6:	ec f7       	brge	.-6      	; 0x1ed2 <__vector_25+0x1a>
    uart_buffer[uart_buffer_index] = UDR0;
    1ed8:	e0 91 92 14 	lds	r30, 0x1492
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 91 c6 00 	lds	r24, 0x00C6
    1ee2:	ed 54       	subi	r30, 0x4D	; 77
    1ee4:	fb 4e       	sbci	r31, 0xEB	; 235
    1ee6:	80 83       	st	Z, r24
    uart_buffer_index = (uart_buffer_index + 1) % UART_BUFFER_SIZE;
    1ee8:	80 91 92 14 	lds	r24, 0x1492
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	01 96       	adiw	r24, 0x01	; 1
    1ef0:	8f 71       	andi	r24, 0x1F	; 31
    1ef2:	90 78       	andi	r25, 0x80	; 128
    1ef4:	99 23       	and	r25, r25
    1ef6:	24 f4       	brge	.+8      	; 0x1f00 <__vector_25+0x48>
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	80 6e       	ori	r24, 0xE0	; 224
    1efc:	9f 6f       	ori	r25, 0xFF	; 255
    1efe:	01 96       	adiw	r24, 0x01	; 1
    1f00:	80 93 92 14 	sts	0x1492, r24
}
    1f04:	ff 91       	pop	r31
    1f06:	ef 91       	pop	r30
    1f08:	9f 91       	pop	r25
    1f0a:	8f 91       	pop	r24
    1f0c:	0f 90       	pop	r0
    1f0e:	0b be       	out	0x3b, r0	; 59
    1f10:	0f 90       	pop	r0
    1f12:	0f be       	out	0x3f, r0	; 63
    1f14:	0f 90       	pop	r0
    1f16:	1f 90       	pop	r1
    1f18:	18 95       	reti

00001f1a <__vector_36>:

/**
 * UART receive byte ISR
 */
ISR(USART1_RX_vect)
{
    1f1a:	1f 92       	push	r1
    1f1c:	0f 92       	push	r0
    1f1e:	0f b6       	in	r0, 0x3f	; 63
    1f20:	0f 92       	push	r0
    1f22:	11 24       	eor	r1, r1
    1f24:	0b b6       	in	r0, 0x3b	; 59
    1f26:	0f 92       	push	r0
    1f28:	8f 93       	push	r24
    1f2a:	9f 93       	push	r25
    1f2c:	ef 93       	push	r30
    1f2e:	ff 93       	push	r31
	while(!(UCSR1A & (1<<RXC1)));
    1f30:	e8 ec       	ldi	r30, 0xC8	; 200
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	80 81       	ld	r24, Z
    1f36:	88 23       	and	r24, r24
    1f38:	ec f7       	brge	.-6      	; 0x1f34 <__vector_36+0x1a>
    uart_buffer_1[uart_buffer_1_index] = UDR1;
    1f3a:	e0 91 91 14 	lds	r30, 0x1491
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 91 ce 00 	lds	r24, 0x00CE
    1f44:	ed 56       	subi	r30, 0x6D	; 109
    1f46:	fb 4e       	sbci	r31, 0xEB	; 235
    1f48:	80 83       	st	Z, r24
    uart_buffer_1_index = (uart_buffer_1_index + 1) % UART_BUFFER_SIZE;
    1f4a:	80 91 91 14 	lds	r24, 0x1491
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	01 96       	adiw	r24, 0x01	; 1
    1f52:	8f 71       	andi	r24, 0x1F	; 31
    1f54:	90 78       	andi	r25, 0x80	; 128
    1f56:	99 23       	and	r25, r25
    1f58:	24 f4       	brge	.+8      	; 0x1f62 <__vector_36+0x48>
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
    1f5c:	80 6e       	ori	r24, 0xE0	; 224
    1f5e:	9f 6f       	ori	r25, 0xFF	; 255
    1f60:	01 96       	adiw	r24, 0x01	; 1
    1f62:	80 93 91 14 	sts	0x1491, r24
}
    1f66:	ff 91       	pop	r31
    1f68:	ef 91       	pop	r30
    1f6a:	9f 91       	pop	r25
    1f6c:	8f 91       	pop	r24
    1f6e:	0f 90       	pop	r0
    1f70:	0b be       	out	0x3b, r0	; 59
    1f72:	0f 90       	pop	r0
    1f74:	0f be       	out	0x3f, r0	; 63
    1f76:	0f 90       	pop	r0
    1f78:	1f 90       	pop	r1
    1f7a:	18 95       	reti

00001f7c <__udivmodhi4>:
    1f7c:	aa 1b       	sub	r26, r26
    1f7e:	bb 1b       	sub	r27, r27
    1f80:	51 e1       	ldi	r21, 0x11	; 17
    1f82:	07 c0       	rjmp	.+14     	; 0x1f92 <__udivmodhi4_ep>

00001f84 <__udivmodhi4_loop>:
    1f84:	aa 1f       	adc	r26, r26
    1f86:	bb 1f       	adc	r27, r27
    1f88:	a6 17       	cp	r26, r22
    1f8a:	b7 07       	cpc	r27, r23
    1f8c:	10 f0       	brcs	.+4      	; 0x1f92 <__udivmodhi4_ep>
    1f8e:	a6 1b       	sub	r26, r22
    1f90:	b7 0b       	sbc	r27, r23

00001f92 <__udivmodhi4_ep>:
    1f92:	88 1f       	adc	r24, r24
    1f94:	99 1f       	adc	r25, r25
    1f96:	5a 95       	dec	r21
    1f98:	a9 f7       	brne	.-22     	; 0x1f84 <__udivmodhi4_loop>
    1f9a:	80 95       	com	r24
    1f9c:	90 95       	com	r25
    1f9e:	bc 01       	movw	r22, r24
    1fa0:	cd 01       	movw	r24, r26
    1fa2:	08 95       	ret

00001fa4 <__tablejump2__>:
    1fa4:	ee 0f       	add	r30, r30
    1fa6:	ff 1f       	adc	r31, r31
    1fa8:	88 1f       	adc	r24, r24
    1faa:	8b bf       	out	0x3b, r24	; 59
    1fac:	07 90       	elpm	r0, Z+
    1fae:	f6 91       	elpm	r31, Z
    1fb0:	e0 2d       	mov	r30, r0
    1fb2:	19 94       	eijmp

00001fb4 <__umulhisi3>:
    1fb4:	a2 9f       	mul	r26, r18
    1fb6:	b0 01       	movw	r22, r0
    1fb8:	b3 9f       	mul	r27, r19
    1fba:	c0 01       	movw	r24, r0
    1fbc:	a3 9f       	mul	r26, r19
    1fbe:	70 0d       	add	r23, r0
    1fc0:	81 1d       	adc	r24, r1
    1fc2:	11 24       	eor	r1, r1
    1fc4:	91 1d       	adc	r25, r1
    1fc6:	b2 9f       	mul	r27, r18
    1fc8:	70 0d       	add	r23, r0
    1fca:	81 1d       	adc	r24, r1
    1fcc:	11 24       	eor	r1, r1
    1fce:	91 1d       	adc	r25, r1
    1fd0:	08 95       	ret

00001fd2 <sprintf>:
    1fd2:	0f 93       	push	r16
    1fd4:	1f 93       	push	r17
    1fd6:	cf 93       	push	r28
    1fd8:	df 93       	push	r29
    1fda:	cd b7       	in	r28, 0x3d	; 61
    1fdc:	de b7       	in	r29, 0x3e	; 62
    1fde:	2e 97       	sbiw	r28, 0x0e	; 14
    1fe0:	0f b6       	in	r0, 0x3f	; 63
    1fe2:	f8 94       	cli
    1fe4:	de bf       	out	0x3e, r29	; 62
    1fe6:	0f be       	out	0x3f, r0	; 63
    1fe8:	cd bf       	out	0x3d, r28	; 61
    1fea:	0e 89       	ldd	r16, Y+22	; 0x16
    1fec:	1f 89       	ldd	r17, Y+23	; 0x17
    1fee:	86 e0       	ldi	r24, 0x06	; 6
    1ff0:	8c 83       	std	Y+4, r24	; 0x04
    1ff2:	1a 83       	std	Y+2, r17	; 0x02
    1ff4:	09 83       	std	Y+1, r16	; 0x01
    1ff6:	8f ef       	ldi	r24, 0xFF	; 255
    1ff8:	9f e7       	ldi	r25, 0x7F	; 127
    1ffa:	9e 83       	std	Y+6, r25	; 0x06
    1ffc:	8d 83       	std	Y+5, r24	; 0x05
    1ffe:	ae 01       	movw	r20, r28
    2000:	46 5e       	subi	r20, 0xE6	; 230
    2002:	5f 4f       	sbci	r21, 0xFF	; 255
    2004:	68 8d       	ldd	r22, Y+24	; 0x18
    2006:	79 8d       	ldd	r23, Y+25	; 0x19
    2008:	ce 01       	movw	r24, r28
    200a:	01 96       	adiw	r24, 0x01	; 1
    200c:	11 d0       	rcall	.+34     	; 0x2030 <vfprintf>
    200e:	2f 81       	ldd	r18, Y+7	; 0x07
    2010:	38 85       	ldd	r19, Y+8	; 0x08
    2012:	f8 01       	movw	r30, r16
    2014:	e2 0f       	add	r30, r18
    2016:	f3 1f       	adc	r31, r19
    2018:	10 82       	st	Z, r1
    201a:	2e 96       	adiw	r28, 0x0e	; 14
    201c:	0f b6       	in	r0, 0x3f	; 63
    201e:	f8 94       	cli
    2020:	de bf       	out	0x3e, r29	; 62
    2022:	0f be       	out	0x3f, r0	; 63
    2024:	cd bf       	out	0x3d, r28	; 61
    2026:	df 91       	pop	r29
    2028:	cf 91       	pop	r28
    202a:	1f 91       	pop	r17
    202c:	0f 91       	pop	r16
    202e:	08 95       	ret

00002030 <vfprintf>:
    2030:	2f 92       	push	r2
    2032:	3f 92       	push	r3
    2034:	4f 92       	push	r4
    2036:	5f 92       	push	r5
    2038:	6f 92       	push	r6
    203a:	7f 92       	push	r7
    203c:	8f 92       	push	r8
    203e:	9f 92       	push	r9
    2040:	af 92       	push	r10
    2042:	bf 92       	push	r11
    2044:	cf 92       	push	r12
    2046:	df 92       	push	r13
    2048:	ef 92       	push	r14
    204a:	ff 92       	push	r15
    204c:	0f 93       	push	r16
    204e:	1f 93       	push	r17
    2050:	cf 93       	push	r28
    2052:	df 93       	push	r29
    2054:	cd b7       	in	r28, 0x3d	; 61
    2056:	de b7       	in	r29, 0x3e	; 62
    2058:	2c 97       	sbiw	r28, 0x0c	; 12
    205a:	0f b6       	in	r0, 0x3f	; 63
    205c:	f8 94       	cli
    205e:	de bf       	out	0x3e, r29	; 62
    2060:	0f be       	out	0x3f, r0	; 63
    2062:	cd bf       	out	0x3d, r28	; 61
    2064:	7c 01       	movw	r14, r24
    2066:	6b 01       	movw	r12, r22
    2068:	8a 01       	movw	r16, r20
    206a:	fc 01       	movw	r30, r24
    206c:	17 82       	std	Z+7, r1	; 0x07
    206e:	16 82       	std	Z+6, r1	; 0x06
    2070:	83 81       	ldd	r24, Z+3	; 0x03
    2072:	81 ff       	sbrs	r24, 1
    2074:	b0 c1       	rjmp	.+864    	; 0x23d6 <__stack+0x1d7>
    2076:	ce 01       	movw	r24, r28
    2078:	01 96       	adiw	r24, 0x01	; 1
    207a:	4c 01       	movw	r8, r24
    207c:	f7 01       	movw	r30, r14
    207e:	93 81       	ldd	r25, Z+3	; 0x03
    2080:	f6 01       	movw	r30, r12
    2082:	93 fd       	sbrc	r25, 3
    2084:	85 91       	lpm	r24, Z+
    2086:	93 ff       	sbrs	r25, 3
    2088:	81 91       	ld	r24, Z+
    208a:	6f 01       	movw	r12, r30
    208c:	88 23       	and	r24, r24
    208e:	09 f4       	brne	.+2      	; 0x2092 <vfprintf+0x62>
    2090:	9e c1       	rjmp	.+828    	; 0x23ce <__stack+0x1cf>
    2092:	85 32       	cpi	r24, 0x25	; 37
    2094:	39 f4       	brne	.+14     	; 0x20a4 <vfprintf+0x74>
    2096:	93 fd       	sbrc	r25, 3
    2098:	85 91       	lpm	r24, Z+
    209a:	93 ff       	sbrs	r25, 3
    209c:	81 91       	ld	r24, Z+
    209e:	6f 01       	movw	r12, r30
    20a0:	85 32       	cpi	r24, 0x25	; 37
    20a2:	21 f4       	brne	.+8      	; 0x20ac <vfprintf+0x7c>
    20a4:	b7 01       	movw	r22, r14
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	c7 d1       	rcall	.+910    	; 0x2438 <fputc>
    20aa:	e8 cf       	rjmp	.-48     	; 0x207c <vfprintf+0x4c>
    20ac:	51 2c       	mov	r5, r1
    20ae:	31 2c       	mov	r3, r1
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	20 32       	cpi	r18, 0x20	; 32
    20b4:	a0 f4       	brcc	.+40     	; 0x20de <vfprintf+0xae>
    20b6:	8b 32       	cpi	r24, 0x2B	; 43
    20b8:	69 f0       	breq	.+26     	; 0x20d4 <vfprintf+0xa4>
    20ba:	30 f4       	brcc	.+12     	; 0x20c8 <vfprintf+0x98>
    20bc:	80 32       	cpi	r24, 0x20	; 32
    20be:	59 f0       	breq	.+22     	; 0x20d6 <vfprintf+0xa6>
    20c0:	83 32       	cpi	r24, 0x23	; 35
    20c2:	69 f4       	brne	.+26     	; 0x20de <vfprintf+0xae>
    20c4:	20 61       	ori	r18, 0x10	; 16
    20c6:	2c c0       	rjmp	.+88     	; 0x2120 <vfprintf+0xf0>
    20c8:	8d 32       	cpi	r24, 0x2D	; 45
    20ca:	39 f0       	breq	.+14     	; 0x20da <vfprintf+0xaa>
    20cc:	80 33       	cpi	r24, 0x30	; 48
    20ce:	39 f4       	brne	.+14     	; 0x20de <vfprintf+0xae>
    20d0:	21 60       	ori	r18, 0x01	; 1
    20d2:	26 c0       	rjmp	.+76     	; 0x2120 <vfprintf+0xf0>
    20d4:	22 60       	ori	r18, 0x02	; 2
    20d6:	24 60       	ori	r18, 0x04	; 4
    20d8:	23 c0       	rjmp	.+70     	; 0x2120 <vfprintf+0xf0>
    20da:	28 60       	ori	r18, 0x08	; 8
    20dc:	21 c0       	rjmp	.+66     	; 0x2120 <vfprintf+0xf0>
    20de:	27 fd       	sbrc	r18, 7
    20e0:	27 c0       	rjmp	.+78     	; 0x2130 <vfprintf+0x100>
    20e2:	30 ed       	ldi	r19, 0xD0	; 208
    20e4:	38 0f       	add	r19, r24
    20e6:	3a 30       	cpi	r19, 0x0A	; 10
    20e8:	78 f4       	brcc	.+30     	; 0x2108 <vfprintf+0xd8>
    20ea:	26 ff       	sbrs	r18, 6
    20ec:	06 c0       	rjmp	.+12     	; 0x20fa <vfprintf+0xca>
    20ee:	fa e0       	ldi	r31, 0x0A	; 10
    20f0:	5f 9e       	mul	r5, r31
    20f2:	30 0d       	add	r19, r0
    20f4:	11 24       	eor	r1, r1
    20f6:	53 2e       	mov	r5, r19
    20f8:	13 c0       	rjmp	.+38     	; 0x2120 <vfprintf+0xf0>
    20fa:	8a e0       	ldi	r24, 0x0A	; 10
    20fc:	38 9e       	mul	r3, r24
    20fe:	30 0d       	add	r19, r0
    2100:	11 24       	eor	r1, r1
    2102:	33 2e       	mov	r3, r19
    2104:	20 62       	ori	r18, 0x20	; 32
    2106:	0c c0       	rjmp	.+24     	; 0x2120 <vfprintf+0xf0>
    2108:	8e 32       	cpi	r24, 0x2E	; 46
    210a:	21 f4       	brne	.+8      	; 0x2114 <vfprintf+0xe4>
    210c:	26 fd       	sbrc	r18, 6
    210e:	5f c1       	rjmp	.+702    	; 0x23ce <__stack+0x1cf>
    2110:	20 64       	ori	r18, 0x40	; 64
    2112:	06 c0       	rjmp	.+12     	; 0x2120 <vfprintf+0xf0>
    2114:	8c 36       	cpi	r24, 0x6C	; 108
    2116:	11 f4       	brne	.+4      	; 0x211c <vfprintf+0xec>
    2118:	20 68       	ori	r18, 0x80	; 128
    211a:	02 c0       	rjmp	.+4      	; 0x2120 <vfprintf+0xf0>
    211c:	88 36       	cpi	r24, 0x68	; 104
    211e:	41 f4       	brne	.+16     	; 0x2130 <vfprintf+0x100>
    2120:	f6 01       	movw	r30, r12
    2122:	93 fd       	sbrc	r25, 3
    2124:	85 91       	lpm	r24, Z+
    2126:	93 ff       	sbrs	r25, 3
    2128:	81 91       	ld	r24, Z+
    212a:	6f 01       	movw	r12, r30
    212c:	81 11       	cpse	r24, r1
    212e:	c1 cf       	rjmp	.-126    	; 0x20b2 <vfprintf+0x82>
    2130:	98 2f       	mov	r25, r24
    2132:	9f 7d       	andi	r25, 0xDF	; 223
    2134:	95 54       	subi	r25, 0x45	; 69
    2136:	93 30       	cpi	r25, 0x03	; 3
    2138:	28 f4       	brcc	.+10     	; 0x2144 <vfprintf+0x114>
    213a:	0c 5f       	subi	r16, 0xFC	; 252
    213c:	1f 4f       	sbci	r17, 0xFF	; 255
    213e:	ff e3       	ldi	r31, 0x3F	; 63
    2140:	f9 83       	std	Y+1, r31	; 0x01
    2142:	0d c0       	rjmp	.+26     	; 0x215e <vfprintf+0x12e>
    2144:	83 36       	cpi	r24, 0x63	; 99
    2146:	31 f0       	breq	.+12     	; 0x2154 <vfprintf+0x124>
    2148:	83 37       	cpi	r24, 0x73	; 115
    214a:	71 f0       	breq	.+28     	; 0x2168 <vfprintf+0x138>
    214c:	83 35       	cpi	r24, 0x53	; 83
    214e:	09 f0       	breq	.+2      	; 0x2152 <vfprintf+0x122>
    2150:	57 c0       	rjmp	.+174    	; 0x2200 <__stack+0x1>
    2152:	21 c0       	rjmp	.+66     	; 0x2196 <vfprintf+0x166>
    2154:	f8 01       	movw	r30, r16
    2156:	80 81       	ld	r24, Z
    2158:	89 83       	std	Y+1, r24	; 0x01
    215a:	0e 5f       	subi	r16, 0xFE	; 254
    215c:	1f 4f       	sbci	r17, 0xFF	; 255
    215e:	44 24       	eor	r4, r4
    2160:	43 94       	inc	r4
    2162:	51 2c       	mov	r5, r1
    2164:	54 01       	movw	r10, r8
    2166:	14 c0       	rjmp	.+40     	; 0x2190 <vfprintf+0x160>
    2168:	38 01       	movw	r6, r16
    216a:	f2 e0       	ldi	r31, 0x02	; 2
    216c:	6f 0e       	add	r6, r31
    216e:	71 1c       	adc	r7, r1
    2170:	f8 01       	movw	r30, r16
    2172:	a0 80       	ld	r10, Z
    2174:	b1 80       	ldd	r11, Z+1	; 0x01
    2176:	26 ff       	sbrs	r18, 6
    2178:	03 c0       	rjmp	.+6      	; 0x2180 <vfprintf+0x150>
    217a:	65 2d       	mov	r22, r5
    217c:	70 e0       	ldi	r23, 0x00	; 0
    217e:	02 c0       	rjmp	.+4      	; 0x2184 <vfprintf+0x154>
    2180:	6f ef       	ldi	r22, 0xFF	; 255
    2182:	7f ef       	ldi	r23, 0xFF	; 255
    2184:	c5 01       	movw	r24, r10
    2186:	2c 87       	std	Y+12, r18	; 0x0c
    2188:	4c d1       	rcall	.+664    	; 0x2422 <strnlen>
    218a:	2c 01       	movw	r4, r24
    218c:	83 01       	movw	r16, r6
    218e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2190:	2f 77       	andi	r18, 0x7F	; 127
    2192:	22 2e       	mov	r2, r18
    2194:	16 c0       	rjmp	.+44     	; 0x21c2 <vfprintf+0x192>
    2196:	38 01       	movw	r6, r16
    2198:	f2 e0       	ldi	r31, 0x02	; 2
    219a:	6f 0e       	add	r6, r31
    219c:	71 1c       	adc	r7, r1
    219e:	f8 01       	movw	r30, r16
    21a0:	a0 80       	ld	r10, Z
    21a2:	b1 80       	ldd	r11, Z+1	; 0x01
    21a4:	26 ff       	sbrs	r18, 6
    21a6:	03 c0       	rjmp	.+6      	; 0x21ae <vfprintf+0x17e>
    21a8:	65 2d       	mov	r22, r5
    21aa:	70 e0       	ldi	r23, 0x00	; 0
    21ac:	02 c0       	rjmp	.+4      	; 0x21b2 <vfprintf+0x182>
    21ae:	6f ef       	ldi	r22, 0xFF	; 255
    21b0:	7f ef       	ldi	r23, 0xFF	; 255
    21b2:	c5 01       	movw	r24, r10
    21b4:	2c 87       	std	Y+12, r18	; 0x0c
    21b6:	2a d1       	rcall	.+596    	; 0x240c <strnlen_P>
    21b8:	2c 01       	movw	r4, r24
    21ba:	2c 85       	ldd	r18, Y+12	; 0x0c
    21bc:	20 68       	ori	r18, 0x80	; 128
    21be:	22 2e       	mov	r2, r18
    21c0:	83 01       	movw	r16, r6
    21c2:	23 fc       	sbrc	r2, 3
    21c4:	19 c0       	rjmp	.+50     	; 0x21f8 <vfprintf+0x1c8>
    21c6:	83 2d       	mov	r24, r3
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	48 16       	cp	r4, r24
    21cc:	59 06       	cpc	r5, r25
    21ce:	a0 f4       	brcc	.+40     	; 0x21f8 <vfprintf+0x1c8>
    21d0:	b7 01       	movw	r22, r14
    21d2:	80 e2       	ldi	r24, 0x20	; 32
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	30 d1       	rcall	.+608    	; 0x2438 <fputc>
    21d8:	3a 94       	dec	r3
    21da:	f5 cf       	rjmp	.-22     	; 0x21c6 <vfprintf+0x196>
    21dc:	f5 01       	movw	r30, r10
    21de:	27 fc       	sbrc	r2, 7
    21e0:	85 91       	lpm	r24, Z+
    21e2:	27 fe       	sbrs	r2, 7
    21e4:	81 91       	ld	r24, Z+
    21e6:	5f 01       	movw	r10, r30
    21e8:	b7 01       	movw	r22, r14
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	25 d1       	rcall	.+586    	; 0x2438 <fputc>
    21ee:	31 10       	cpse	r3, r1
    21f0:	3a 94       	dec	r3
    21f2:	f1 e0       	ldi	r31, 0x01	; 1
    21f4:	4f 1a       	sub	r4, r31
    21f6:	51 08       	sbc	r5, r1
    21f8:	41 14       	cp	r4, r1
    21fa:	51 04       	cpc	r5, r1
    21fc:	79 f7       	brne	.-34     	; 0x21dc <vfprintf+0x1ac>
    21fe:	de c0       	rjmp	.+444    	; 0x23bc <__stack+0x1bd>
    2200:	84 36       	cpi	r24, 0x64	; 100
    2202:	11 f0       	breq	.+4      	; 0x2208 <__stack+0x9>
    2204:	89 36       	cpi	r24, 0x69	; 105
    2206:	31 f5       	brne	.+76     	; 0x2254 <__stack+0x55>
    2208:	f8 01       	movw	r30, r16
    220a:	27 ff       	sbrs	r18, 7
    220c:	07 c0       	rjmp	.+14     	; 0x221c <__stack+0x1d>
    220e:	60 81       	ld	r22, Z
    2210:	71 81       	ldd	r23, Z+1	; 0x01
    2212:	82 81       	ldd	r24, Z+2	; 0x02
    2214:	93 81       	ldd	r25, Z+3	; 0x03
    2216:	0c 5f       	subi	r16, 0xFC	; 252
    2218:	1f 4f       	sbci	r17, 0xFF	; 255
    221a:	08 c0       	rjmp	.+16     	; 0x222c <__stack+0x2d>
    221c:	60 81       	ld	r22, Z
    221e:	71 81       	ldd	r23, Z+1	; 0x01
    2220:	07 2e       	mov	r0, r23
    2222:	00 0c       	add	r0, r0
    2224:	88 0b       	sbc	r24, r24
    2226:	99 0b       	sbc	r25, r25
    2228:	0e 5f       	subi	r16, 0xFE	; 254
    222a:	1f 4f       	sbci	r17, 0xFF	; 255
    222c:	2f 76       	andi	r18, 0x6F	; 111
    222e:	72 2e       	mov	r7, r18
    2230:	97 ff       	sbrs	r25, 7
    2232:	09 c0       	rjmp	.+18     	; 0x2246 <__stack+0x47>
    2234:	90 95       	com	r25
    2236:	80 95       	com	r24
    2238:	70 95       	com	r23
    223a:	61 95       	neg	r22
    223c:	7f 4f       	sbci	r23, 0xFF	; 255
    223e:	8f 4f       	sbci	r24, 0xFF	; 255
    2240:	9f 4f       	sbci	r25, 0xFF	; 255
    2242:	20 68       	ori	r18, 0x80	; 128
    2244:	72 2e       	mov	r7, r18
    2246:	2a e0       	ldi	r18, 0x0A	; 10
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	a4 01       	movw	r20, r8
    224c:	2d d1       	rcall	.+602    	; 0x24a8 <__ultoa_invert>
    224e:	a8 2e       	mov	r10, r24
    2250:	a8 18       	sub	r10, r8
    2252:	43 c0       	rjmp	.+134    	; 0x22da <__stack+0xdb>
    2254:	85 37       	cpi	r24, 0x75	; 117
    2256:	29 f4       	brne	.+10     	; 0x2262 <__stack+0x63>
    2258:	2f 7e       	andi	r18, 0xEF	; 239
    225a:	b2 2e       	mov	r11, r18
    225c:	2a e0       	ldi	r18, 0x0A	; 10
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	25 c0       	rjmp	.+74     	; 0x22ac <__stack+0xad>
    2262:	f2 2f       	mov	r31, r18
    2264:	f9 7f       	andi	r31, 0xF9	; 249
    2266:	bf 2e       	mov	r11, r31
    2268:	8f 36       	cpi	r24, 0x6F	; 111
    226a:	c1 f0       	breq	.+48     	; 0x229c <__stack+0x9d>
    226c:	18 f4       	brcc	.+6      	; 0x2274 <__stack+0x75>
    226e:	88 35       	cpi	r24, 0x58	; 88
    2270:	79 f0       	breq	.+30     	; 0x2290 <__stack+0x91>
    2272:	ad c0       	rjmp	.+346    	; 0x23ce <__stack+0x1cf>
    2274:	80 37       	cpi	r24, 0x70	; 112
    2276:	19 f0       	breq	.+6      	; 0x227e <__stack+0x7f>
    2278:	88 37       	cpi	r24, 0x78	; 120
    227a:	21 f0       	breq	.+8      	; 0x2284 <__stack+0x85>
    227c:	a8 c0       	rjmp	.+336    	; 0x23ce <__stack+0x1cf>
    227e:	2f 2f       	mov	r18, r31
    2280:	20 61       	ori	r18, 0x10	; 16
    2282:	b2 2e       	mov	r11, r18
    2284:	b4 fe       	sbrs	r11, 4
    2286:	0d c0       	rjmp	.+26     	; 0x22a2 <__stack+0xa3>
    2288:	8b 2d       	mov	r24, r11
    228a:	84 60       	ori	r24, 0x04	; 4
    228c:	b8 2e       	mov	r11, r24
    228e:	09 c0       	rjmp	.+18     	; 0x22a2 <__stack+0xa3>
    2290:	24 ff       	sbrs	r18, 4
    2292:	0a c0       	rjmp	.+20     	; 0x22a8 <__stack+0xa9>
    2294:	9f 2f       	mov	r25, r31
    2296:	96 60       	ori	r25, 0x06	; 6
    2298:	b9 2e       	mov	r11, r25
    229a:	06 c0       	rjmp	.+12     	; 0x22a8 <__stack+0xa9>
    229c:	28 e0       	ldi	r18, 0x08	; 8
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	05 c0       	rjmp	.+10     	; 0x22ac <__stack+0xad>
    22a2:	20 e1       	ldi	r18, 0x10	; 16
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	02 c0       	rjmp	.+4      	; 0x22ac <__stack+0xad>
    22a8:	20 e1       	ldi	r18, 0x10	; 16
    22aa:	32 e0       	ldi	r19, 0x02	; 2
    22ac:	f8 01       	movw	r30, r16
    22ae:	b7 fe       	sbrs	r11, 7
    22b0:	07 c0       	rjmp	.+14     	; 0x22c0 <__stack+0xc1>
    22b2:	60 81       	ld	r22, Z
    22b4:	71 81       	ldd	r23, Z+1	; 0x01
    22b6:	82 81       	ldd	r24, Z+2	; 0x02
    22b8:	93 81       	ldd	r25, Z+3	; 0x03
    22ba:	0c 5f       	subi	r16, 0xFC	; 252
    22bc:	1f 4f       	sbci	r17, 0xFF	; 255
    22be:	06 c0       	rjmp	.+12     	; 0x22cc <__stack+0xcd>
    22c0:	60 81       	ld	r22, Z
    22c2:	71 81       	ldd	r23, Z+1	; 0x01
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	0e 5f       	subi	r16, 0xFE	; 254
    22ca:	1f 4f       	sbci	r17, 0xFF	; 255
    22cc:	a4 01       	movw	r20, r8
    22ce:	ec d0       	rcall	.+472    	; 0x24a8 <__ultoa_invert>
    22d0:	a8 2e       	mov	r10, r24
    22d2:	a8 18       	sub	r10, r8
    22d4:	fb 2d       	mov	r31, r11
    22d6:	ff 77       	andi	r31, 0x7F	; 127
    22d8:	7f 2e       	mov	r7, r31
    22da:	76 fe       	sbrs	r7, 6
    22dc:	0b c0       	rjmp	.+22     	; 0x22f4 <__stack+0xf5>
    22de:	37 2d       	mov	r19, r7
    22e0:	3e 7f       	andi	r19, 0xFE	; 254
    22e2:	a5 14       	cp	r10, r5
    22e4:	50 f4       	brcc	.+20     	; 0x22fa <__stack+0xfb>
    22e6:	74 fe       	sbrs	r7, 4
    22e8:	0a c0       	rjmp	.+20     	; 0x22fe <__stack+0xff>
    22ea:	72 fc       	sbrc	r7, 2
    22ec:	08 c0       	rjmp	.+16     	; 0x22fe <__stack+0xff>
    22ee:	37 2d       	mov	r19, r7
    22f0:	3e 7e       	andi	r19, 0xEE	; 238
    22f2:	05 c0       	rjmp	.+10     	; 0x22fe <__stack+0xff>
    22f4:	ba 2c       	mov	r11, r10
    22f6:	37 2d       	mov	r19, r7
    22f8:	03 c0       	rjmp	.+6      	; 0x2300 <__stack+0x101>
    22fa:	ba 2c       	mov	r11, r10
    22fc:	01 c0       	rjmp	.+2      	; 0x2300 <__stack+0x101>
    22fe:	b5 2c       	mov	r11, r5
    2300:	34 ff       	sbrs	r19, 4
    2302:	0d c0       	rjmp	.+26     	; 0x231e <__stack+0x11f>
    2304:	fe 01       	movw	r30, r28
    2306:	ea 0d       	add	r30, r10
    2308:	f1 1d       	adc	r31, r1
    230a:	80 81       	ld	r24, Z
    230c:	80 33       	cpi	r24, 0x30	; 48
    230e:	11 f4       	brne	.+4      	; 0x2314 <__stack+0x115>
    2310:	39 7e       	andi	r19, 0xE9	; 233
    2312:	09 c0       	rjmp	.+18     	; 0x2326 <__stack+0x127>
    2314:	32 ff       	sbrs	r19, 2
    2316:	06 c0       	rjmp	.+12     	; 0x2324 <__stack+0x125>
    2318:	b3 94       	inc	r11
    231a:	b3 94       	inc	r11
    231c:	04 c0       	rjmp	.+8      	; 0x2326 <__stack+0x127>
    231e:	83 2f       	mov	r24, r19
    2320:	86 78       	andi	r24, 0x86	; 134
    2322:	09 f0       	breq	.+2      	; 0x2326 <__stack+0x127>
    2324:	b3 94       	inc	r11
    2326:	33 fd       	sbrc	r19, 3
    2328:	12 c0       	rjmp	.+36     	; 0x234e <__stack+0x14f>
    232a:	30 ff       	sbrs	r19, 0
    232c:	06 c0       	rjmp	.+12     	; 0x233a <__stack+0x13b>
    232e:	5a 2c       	mov	r5, r10
    2330:	b3 14       	cp	r11, r3
    2332:	18 f4       	brcc	.+6      	; 0x233a <__stack+0x13b>
    2334:	53 0c       	add	r5, r3
    2336:	5b 18       	sub	r5, r11
    2338:	b3 2c       	mov	r11, r3
    233a:	b3 14       	cp	r11, r3
    233c:	60 f4       	brcc	.+24     	; 0x2356 <__stack+0x157>
    233e:	b7 01       	movw	r22, r14
    2340:	80 e2       	ldi	r24, 0x20	; 32
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	3c 87       	std	Y+12, r19	; 0x0c
    2346:	78 d0       	rcall	.+240    	; 0x2438 <fputc>
    2348:	b3 94       	inc	r11
    234a:	3c 85       	ldd	r19, Y+12	; 0x0c
    234c:	f6 cf       	rjmp	.-20     	; 0x233a <__stack+0x13b>
    234e:	b3 14       	cp	r11, r3
    2350:	10 f4       	brcc	.+4      	; 0x2356 <__stack+0x157>
    2352:	3b 18       	sub	r3, r11
    2354:	01 c0       	rjmp	.+2      	; 0x2358 <__stack+0x159>
    2356:	31 2c       	mov	r3, r1
    2358:	34 ff       	sbrs	r19, 4
    235a:	11 c0       	rjmp	.+34     	; 0x237e <__stack+0x17f>
    235c:	b7 01       	movw	r22, r14
    235e:	80 e3       	ldi	r24, 0x30	; 48
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	3c 87       	std	Y+12, r19	; 0x0c
    2364:	69 d0       	rcall	.+210    	; 0x2438 <fputc>
    2366:	3c 85       	ldd	r19, Y+12	; 0x0c
    2368:	32 ff       	sbrs	r19, 2
    236a:	16 c0       	rjmp	.+44     	; 0x2398 <__stack+0x199>
    236c:	31 fd       	sbrc	r19, 1
    236e:	03 c0       	rjmp	.+6      	; 0x2376 <__stack+0x177>
    2370:	88 e7       	ldi	r24, 0x78	; 120
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	02 c0       	rjmp	.+4      	; 0x237a <__stack+0x17b>
    2376:	88 e5       	ldi	r24, 0x58	; 88
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	b7 01       	movw	r22, r14
    237c:	0c c0       	rjmp	.+24     	; 0x2396 <__stack+0x197>
    237e:	83 2f       	mov	r24, r19
    2380:	86 78       	andi	r24, 0x86	; 134
    2382:	51 f0       	breq	.+20     	; 0x2398 <__stack+0x199>
    2384:	31 ff       	sbrs	r19, 1
    2386:	02 c0       	rjmp	.+4      	; 0x238c <__stack+0x18d>
    2388:	8b e2       	ldi	r24, 0x2B	; 43
    238a:	01 c0       	rjmp	.+2      	; 0x238e <__stack+0x18f>
    238c:	80 e2       	ldi	r24, 0x20	; 32
    238e:	37 fd       	sbrc	r19, 7
    2390:	8d e2       	ldi	r24, 0x2D	; 45
    2392:	b7 01       	movw	r22, r14
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	50 d0       	rcall	.+160    	; 0x2438 <fputc>
    2398:	a5 14       	cp	r10, r5
    239a:	30 f4       	brcc	.+12     	; 0x23a8 <__stack+0x1a9>
    239c:	b7 01       	movw	r22, r14
    239e:	80 e3       	ldi	r24, 0x30	; 48
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	4a d0       	rcall	.+148    	; 0x2438 <fputc>
    23a4:	5a 94       	dec	r5
    23a6:	f8 cf       	rjmp	.-16     	; 0x2398 <__stack+0x199>
    23a8:	aa 94       	dec	r10
    23aa:	f4 01       	movw	r30, r8
    23ac:	ea 0d       	add	r30, r10
    23ae:	f1 1d       	adc	r31, r1
    23b0:	80 81       	ld	r24, Z
    23b2:	b7 01       	movw	r22, r14
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	40 d0       	rcall	.+128    	; 0x2438 <fputc>
    23b8:	a1 10       	cpse	r10, r1
    23ba:	f6 cf       	rjmp	.-20     	; 0x23a8 <__stack+0x1a9>
    23bc:	33 20       	and	r3, r3
    23be:	09 f4       	brne	.+2      	; 0x23c2 <__stack+0x1c3>
    23c0:	5d ce       	rjmp	.-838    	; 0x207c <vfprintf+0x4c>
    23c2:	b7 01       	movw	r22, r14
    23c4:	80 e2       	ldi	r24, 0x20	; 32
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	37 d0       	rcall	.+110    	; 0x2438 <fputc>
    23ca:	3a 94       	dec	r3
    23cc:	f7 cf       	rjmp	.-18     	; 0x23bc <__stack+0x1bd>
    23ce:	f7 01       	movw	r30, r14
    23d0:	86 81       	ldd	r24, Z+6	; 0x06
    23d2:	97 81       	ldd	r25, Z+7	; 0x07
    23d4:	02 c0       	rjmp	.+4      	; 0x23da <__stack+0x1db>
    23d6:	8f ef       	ldi	r24, 0xFF	; 255
    23d8:	9f ef       	ldi	r25, 0xFF	; 255
    23da:	2c 96       	adiw	r28, 0x0c	; 12
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	f8 94       	cli
    23e0:	de bf       	out	0x3e, r29	; 62
    23e2:	0f be       	out	0x3f, r0	; 63
    23e4:	cd bf       	out	0x3d, r28	; 61
    23e6:	df 91       	pop	r29
    23e8:	cf 91       	pop	r28
    23ea:	1f 91       	pop	r17
    23ec:	0f 91       	pop	r16
    23ee:	ff 90       	pop	r15
    23f0:	ef 90       	pop	r14
    23f2:	df 90       	pop	r13
    23f4:	cf 90       	pop	r12
    23f6:	bf 90       	pop	r11
    23f8:	af 90       	pop	r10
    23fa:	9f 90       	pop	r9
    23fc:	8f 90       	pop	r8
    23fe:	7f 90       	pop	r7
    2400:	6f 90       	pop	r6
    2402:	5f 90       	pop	r5
    2404:	4f 90       	pop	r4
    2406:	3f 90       	pop	r3
    2408:	2f 90       	pop	r2
    240a:	08 95       	ret

0000240c <strnlen_P>:
    240c:	fc 01       	movw	r30, r24
    240e:	05 90       	lpm	r0, Z+
    2410:	61 50       	subi	r22, 0x01	; 1
    2412:	70 40       	sbci	r23, 0x00	; 0
    2414:	01 10       	cpse	r0, r1
    2416:	d8 f7       	brcc	.-10     	; 0x240e <strnlen_P+0x2>
    2418:	80 95       	com	r24
    241a:	90 95       	com	r25
    241c:	8e 0f       	add	r24, r30
    241e:	9f 1f       	adc	r25, r31
    2420:	08 95       	ret

00002422 <strnlen>:
    2422:	fc 01       	movw	r30, r24
    2424:	61 50       	subi	r22, 0x01	; 1
    2426:	70 40       	sbci	r23, 0x00	; 0
    2428:	01 90       	ld	r0, Z+
    242a:	01 10       	cpse	r0, r1
    242c:	d8 f7       	brcc	.-10     	; 0x2424 <strnlen+0x2>
    242e:	80 95       	com	r24
    2430:	90 95       	com	r25
    2432:	8e 0f       	add	r24, r30
    2434:	9f 1f       	adc	r25, r31
    2436:	08 95       	ret

00002438 <fputc>:
    2438:	0f 93       	push	r16
    243a:	1f 93       	push	r17
    243c:	cf 93       	push	r28
    243e:	df 93       	push	r29
    2440:	fb 01       	movw	r30, r22
    2442:	23 81       	ldd	r18, Z+3	; 0x03
    2444:	21 fd       	sbrc	r18, 1
    2446:	03 c0       	rjmp	.+6      	; 0x244e <fputc+0x16>
    2448:	8f ef       	ldi	r24, 0xFF	; 255
    244a:	9f ef       	ldi	r25, 0xFF	; 255
    244c:	28 c0       	rjmp	.+80     	; 0x249e <fputc+0x66>
    244e:	22 ff       	sbrs	r18, 2
    2450:	16 c0       	rjmp	.+44     	; 0x247e <fputc+0x46>
    2452:	46 81       	ldd	r20, Z+6	; 0x06
    2454:	57 81       	ldd	r21, Z+7	; 0x07
    2456:	24 81       	ldd	r18, Z+4	; 0x04
    2458:	35 81       	ldd	r19, Z+5	; 0x05
    245a:	42 17       	cp	r20, r18
    245c:	53 07       	cpc	r21, r19
    245e:	44 f4       	brge	.+16     	; 0x2470 <fputc+0x38>
    2460:	a0 81       	ld	r26, Z
    2462:	b1 81       	ldd	r27, Z+1	; 0x01
    2464:	9d 01       	movw	r18, r26
    2466:	2f 5f       	subi	r18, 0xFF	; 255
    2468:	3f 4f       	sbci	r19, 0xFF	; 255
    246a:	31 83       	std	Z+1, r19	; 0x01
    246c:	20 83       	st	Z, r18
    246e:	8c 93       	st	X, r24
    2470:	26 81       	ldd	r18, Z+6	; 0x06
    2472:	37 81       	ldd	r19, Z+7	; 0x07
    2474:	2f 5f       	subi	r18, 0xFF	; 255
    2476:	3f 4f       	sbci	r19, 0xFF	; 255
    2478:	37 83       	std	Z+7, r19	; 0x07
    247a:	26 83       	std	Z+6, r18	; 0x06
    247c:	10 c0       	rjmp	.+32     	; 0x249e <fputc+0x66>
    247e:	eb 01       	movw	r28, r22
    2480:	09 2f       	mov	r16, r25
    2482:	18 2f       	mov	r17, r24
    2484:	00 84       	ldd	r0, Z+8	; 0x08
    2486:	f1 85       	ldd	r31, Z+9	; 0x09
    2488:	e0 2d       	mov	r30, r0
    248a:	19 95       	eicall
    248c:	89 2b       	or	r24, r25
    248e:	e1 f6       	brne	.-72     	; 0x2448 <fputc+0x10>
    2490:	8e 81       	ldd	r24, Y+6	; 0x06
    2492:	9f 81       	ldd	r25, Y+7	; 0x07
    2494:	01 96       	adiw	r24, 0x01	; 1
    2496:	9f 83       	std	Y+7, r25	; 0x07
    2498:	8e 83       	std	Y+6, r24	; 0x06
    249a:	81 2f       	mov	r24, r17
    249c:	90 2f       	mov	r25, r16
    249e:	df 91       	pop	r29
    24a0:	cf 91       	pop	r28
    24a2:	1f 91       	pop	r17
    24a4:	0f 91       	pop	r16
    24a6:	08 95       	ret

000024a8 <__ultoa_invert>:
    24a8:	fa 01       	movw	r30, r20
    24aa:	aa 27       	eor	r26, r26
    24ac:	28 30       	cpi	r18, 0x08	; 8
    24ae:	51 f1       	breq	.+84     	; 0x2504 <__ultoa_invert+0x5c>
    24b0:	20 31       	cpi	r18, 0x10	; 16
    24b2:	81 f1       	breq	.+96     	; 0x2514 <__ultoa_invert+0x6c>
    24b4:	e8 94       	clt
    24b6:	6f 93       	push	r22
    24b8:	6e 7f       	andi	r22, 0xFE	; 254
    24ba:	6e 5f       	subi	r22, 0xFE	; 254
    24bc:	7f 4f       	sbci	r23, 0xFF	; 255
    24be:	8f 4f       	sbci	r24, 0xFF	; 255
    24c0:	9f 4f       	sbci	r25, 0xFF	; 255
    24c2:	af 4f       	sbci	r26, 0xFF	; 255
    24c4:	b1 e0       	ldi	r27, 0x01	; 1
    24c6:	3e d0       	rcall	.+124    	; 0x2544 <__ultoa_invert+0x9c>
    24c8:	b4 e0       	ldi	r27, 0x04	; 4
    24ca:	3c d0       	rcall	.+120    	; 0x2544 <__ultoa_invert+0x9c>
    24cc:	67 0f       	add	r22, r23
    24ce:	78 1f       	adc	r23, r24
    24d0:	89 1f       	adc	r24, r25
    24d2:	9a 1f       	adc	r25, r26
    24d4:	a1 1d       	adc	r26, r1
    24d6:	68 0f       	add	r22, r24
    24d8:	79 1f       	adc	r23, r25
    24da:	8a 1f       	adc	r24, r26
    24dc:	91 1d       	adc	r25, r1
    24de:	a1 1d       	adc	r26, r1
    24e0:	6a 0f       	add	r22, r26
    24e2:	71 1d       	adc	r23, r1
    24e4:	81 1d       	adc	r24, r1
    24e6:	91 1d       	adc	r25, r1
    24e8:	a1 1d       	adc	r26, r1
    24ea:	20 d0       	rcall	.+64     	; 0x252c <__ultoa_invert+0x84>
    24ec:	09 f4       	brne	.+2      	; 0x24f0 <__ultoa_invert+0x48>
    24ee:	68 94       	set
    24f0:	3f 91       	pop	r19
    24f2:	2a e0       	ldi	r18, 0x0A	; 10
    24f4:	26 9f       	mul	r18, r22
    24f6:	11 24       	eor	r1, r1
    24f8:	30 19       	sub	r19, r0
    24fa:	30 5d       	subi	r19, 0xD0	; 208
    24fc:	31 93       	st	Z+, r19
    24fe:	de f6       	brtc	.-74     	; 0x24b6 <__ultoa_invert+0xe>
    2500:	cf 01       	movw	r24, r30
    2502:	08 95       	ret
    2504:	46 2f       	mov	r20, r22
    2506:	47 70       	andi	r20, 0x07	; 7
    2508:	40 5d       	subi	r20, 0xD0	; 208
    250a:	41 93       	st	Z+, r20
    250c:	b3 e0       	ldi	r27, 0x03	; 3
    250e:	0f d0       	rcall	.+30     	; 0x252e <__ultoa_invert+0x86>
    2510:	c9 f7       	brne	.-14     	; 0x2504 <__ultoa_invert+0x5c>
    2512:	f6 cf       	rjmp	.-20     	; 0x2500 <__ultoa_invert+0x58>
    2514:	46 2f       	mov	r20, r22
    2516:	4f 70       	andi	r20, 0x0F	; 15
    2518:	40 5d       	subi	r20, 0xD0	; 208
    251a:	4a 33       	cpi	r20, 0x3A	; 58
    251c:	18 f0       	brcs	.+6      	; 0x2524 <__ultoa_invert+0x7c>
    251e:	49 5d       	subi	r20, 0xD9	; 217
    2520:	31 fd       	sbrc	r19, 1
    2522:	40 52       	subi	r20, 0x20	; 32
    2524:	41 93       	st	Z+, r20
    2526:	02 d0       	rcall	.+4      	; 0x252c <__ultoa_invert+0x84>
    2528:	a9 f7       	brne	.-22     	; 0x2514 <__ultoa_invert+0x6c>
    252a:	ea cf       	rjmp	.-44     	; 0x2500 <__ultoa_invert+0x58>
    252c:	b4 e0       	ldi	r27, 0x04	; 4
    252e:	a6 95       	lsr	r26
    2530:	97 95       	ror	r25
    2532:	87 95       	ror	r24
    2534:	77 95       	ror	r23
    2536:	67 95       	ror	r22
    2538:	ba 95       	dec	r27
    253a:	c9 f7       	brne	.-14     	; 0x252e <__ultoa_invert+0x86>
    253c:	00 97       	sbiw	r24, 0x00	; 0
    253e:	61 05       	cpc	r22, r1
    2540:	71 05       	cpc	r23, r1
    2542:	08 95       	ret
    2544:	9b 01       	movw	r18, r22
    2546:	ac 01       	movw	r20, r24
    2548:	0a 2e       	mov	r0, r26
    254a:	06 94       	lsr	r0
    254c:	57 95       	ror	r21
    254e:	47 95       	ror	r20
    2550:	37 95       	ror	r19
    2552:	27 95       	ror	r18
    2554:	ba 95       	dec	r27
    2556:	c9 f7       	brne	.-14     	; 0x254a <__ultoa_invert+0xa2>
    2558:	62 0f       	add	r22, r18
    255a:	73 1f       	adc	r23, r19
    255c:	84 1f       	adc	r24, r20
    255e:	95 1f       	adc	r25, r21
    2560:	a0 1d       	adc	r26, r0
    2562:	08 95       	ret

00002564 <_exit>:
    2564:	f8 94       	cli

00002566 <__stop_program>:
    2566:	ff cf       	rjmp	.-2      	; 0x2566 <__stop_program>
