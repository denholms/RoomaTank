
roomba.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800200  0000245c  000024f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000245c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001324  0080021a  0080021a  0000250a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000250a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002568  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d0  00000000  00000000  000025a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000048c6  00000000  00000000  00002978  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001325  00000000  00000000  0000723e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002457  00000000  00000000  00008563  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009e4  00000000  00000000  0000a9bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001072  00000000  00000000  0000b3a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000266c  00000000  00000000  0000c412  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e8  00000000  00000000  0000ea7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c0       	rjmp	.+252    	; 0xfe <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 a6 0d 	jmp	0x1b4c	; 0x1b4c <__vector_1>
       8:	9b c0       	rjmp	.+310    	; 0x140 <__bad_interrupt>
       a:	00 00       	nop
       c:	99 c0       	rjmp	.+306    	; 0x140 <__bad_interrupt>
       e:	00 00       	nop
      10:	97 c0       	rjmp	.+302    	; 0x140 <__bad_interrupt>
      12:	00 00       	nop
      14:	95 c0       	rjmp	.+298    	; 0x140 <__bad_interrupt>
      16:	00 00       	nop
      18:	93 c0       	rjmp	.+294    	; 0x140 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	91 c0       	rjmp	.+290    	; 0x140 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8f c0       	rjmp	.+286    	; 0x140 <__bad_interrupt>
      22:	00 00       	nop
      24:	8d c0       	rjmp	.+282    	; 0x140 <__bad_interrupt>
      26:	00 00       	nop
      28:	8b c0       	rjmp	.+278    	; 0x140 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	89 c0       	rjmp	.+274    	; 0x140 <__bad_interrupt>
      2e:	00 00       	nop
      30:	87 c0       	rjmp	.+270    	; 0x140 <__bad_interrupt>
      32:	00 00       	nop
      34:	85 c0       	rjmp	.+266    	; 0x140 <__bad_interrupt>
      36:	00 00       	nop
      38:	83 c0       	rjmp	.+262    	; 0x140 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	81 c0       	rjmp	.+258    	; 0x140 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7f c0       	rjmp	.+254    	; 0x140 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <__vector_17>
      48:	7b c0       	rjmp	.+246    	; 0x140 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	79 c0       	rjmp	.+242    	; 0x140 <__bad_interrupt>
      4e:	00 00       	nop
      50:	77 c0       	rjmp	.+238    	; 0x140 <__bad_interrupt>
      52:	00 00       	nop
      54:	75 c0       	rjmp	.+234    	; 0x140 <__bad_interrupt>
      56:	00 00       	nop
      58:	73 c0       	rjmp	.+230    	; 0x140 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	71 c0       	rjmp	.+226    	; 0x140 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6f c0       	rjmp	.+222    	; 0x140 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 a8 0e 	jmp	0x1d50	; 0x1d50 <__vector_25>
      68:	6b c0       	rjmp	.+214    	; 0x140 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	69 c0       	rjmp	.+210    	; 0x140 <__bad_interrupt>
      6e:	00 00       	nop
      70:	67 c0       	rjmp	.+206    	; 0x140 <__bad_interrupt>
      72:	00 00       	nop
      74:	65 c0       	rjmp	.+202    	; 0x140 <__bad_interrupt>
      76:	00 00       	nop
      78:	63 c0       	rjmp	.+198    	; 0x140 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	61 c0       	rjmp	.+194    	; 0x140 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 39 0b 	jmp	0x1672	; 0x1672 <__vector_32>
      84:	5d c0       	rjmp	.+186    	; 0x140 <__bad_interrupt>
      86:	00 00       	nop
      88:	5b c0       	rjmp	.+182    	; 0x140 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	59 c0       	rjmp	.+178    	; 0x140 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 d9 0e 	jmp	0x1db2	; 0x1db2 <__vector_36>
      94:	55 c0       	rjmp	.+170    	; 0x140 <__bad_interrupt>
      96:	00 00       	nop
      98:	53 c0       	rjmp	.+166    	; 0x140 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	51 c0       	rjmp	.+162    	; 0x140 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4f c0       	rjmp	.+158    	; 0x140 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4d c0       	rjmp	.+154    	; 0x140 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4b c0       	rjmp	.+150    	; 0x140 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	49 c0       	rjmp	.+146    	; 0x140 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	47 c0       	rjmp	.+142    	; 0x140 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	45 c0       	rjmp	.+138    	; 0x140 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	43 c0       	rjmp	.+134    	; 0x140 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	41 c0       	rjmp	.+130    	; 0x140 <__bad_interrupt>
      be:	00 00       	nop
      c0:	3f c0       	rjmp	.+126    	; 0x140 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3d c0       	rjmp	.+122    	; 0x140 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3b c0       	rjmp	.+118    	; 0x140 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	39 c0       	rjmp	.+114    	; 0x140 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	37 c0       	rjmp	.+110    	; 0x140 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	35 c0       	rjmp	.+106    	; 0x140 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	33 c0       	rjmp	.+102    	; 0x140 <__bad_interrupt>
      da:	00 00       	nop
      dc:	31 c0       	rjmp	.+98     	; 0x140 <__bad_interrupt>
      de:	00 00       	nop
      e0:	2f c0       	rjmp	.+94     	; 0x140 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	3d 06       	cpc	r3, r29
      e6:	23 06       	cpc	r2, r19
      e8:	3d 06       	cpc	r3, r29
      ea:	4c 06       	cpc	r4, r28
      ec:	f1 06       	cpc	r15, r17
      ee:	5b 06       	cpc	r5, r27
      f0:	14 06       	cpc	r1, r20
      f2:	44 07       	cpc	r20, r20
      f4:	79 07       	cpc	r23, r25
      f6:	1b 08       	sbc	r1, r11
      f8:	1d 08       	sbc	r1, r13
      fa:	53 08       	sbc	r5, r3
      fc:	ca 08       	sbc	r12, r10

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d1 e2       	ldi	r29, 0x21	; 33
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0c bf       	out	0x3c, r16	; 60

0000010e <__do_copy_data>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a0 e0       	ldi	r26, 0x00	; 0
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	ec e5       	ldi	r30, 0x5C	; 92
     116:	f4 e2       	ldi	r31, 0x24	; 36
     118:	00 e0       	ldi	r16, 0x00	; 0
     11a:	0b bf       	out	0x3b, r16	; 59
     11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x14>
     11e:	07 90       	elpm	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	aa 31       	cpi	r26, 0x1A	; 26
     124:	b1 07       	cpc	r27, r17
     126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0x10>

00000128 <__do_clear_bss>:
     128:	25 e1       	ldi	r18, 0x15	; 21
     12a:	aa e1       	ldi	r26, 0x1A	; 26
     12c:	b2 e0       	ldi	r27, 0x02	; 2
     12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
     130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
     132:	ae 33       	cpi	r26, 0x3E	; 62
     134:	b2 07       	cpc	r27, r18
     136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>
     138:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <main>
     13c:	0c 94 2c 12 	jmp	0x2458	; 0x2458 <_exit>

00000140 <__bad_interrupt>:
     140:	5f cf       	rjmp	.-322    	; 0x0 <__vectors>

00000142 <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
     142:	0f 92       	push	r0
     144:	1f 92       	push	r1
     146:	2f 92       	push	r2
     148:	3f 92       	push	r3
     14a:	4f 92       	push	r4
     14c:	5f 92       	push	r5
     14e:	6f 92       	push	r6
     150:	7f 92       	push	r7
     152:	8f 92       	push	r8
     154:	9f 92       	push	r9
     156:	af 92       	push	r10
     158:	bf 92       	push	r11
     15a:	cf 92       	push	r12
     15c:	df 92       	push	r13
     15e:	ef 92       	push	r14
     160:	ff 92       	push	r15
     162:	0f 93       	push	r16
     164:	1f 93       	push	r17
     166:	2f 93       	push	r18
     168:	3f 93       	push	r19
     16a:	4f 93       	push	r20
     16c:	5f 93       	push	r21
     16e:	6f 93       	push	r22
     170:	7f 93       	push	r23
     172:	8f 93       	push	r24
     174:	9f 93       	push	r25
     176:	af 93       	push	r26
     178:	bf 93       	push	r27
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	ef 93       	push	r30
     180:	ff 93       	push	r31
     182:	0f b7       	in	r16, 0x3f	; 63
     184:	0f 93       	push	r16
     186:	fc b7       	in	r31, 0x3c	; 60
     188:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
     18a:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     18c:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
     18e:	e0 93 3b 15 	sts	0x153B, r30
        sts  KernelSp+1, r31
     192:	f0 93 3c 15 	sts	0x153C, r31
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
     196:	e0 91 19 15 	lds	r30, 0x1519
        lds  r31, CurrentSp+1
     19a:	f0 91 1a 15 	lds	r31, 0x151A
        out  SPL, r30
     19e:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     1a0:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
     1a2:	ff 91       	pop	r31
     1a4:	fc bf       	out	0x3c, r31	; 60
     1a6:	0f 91       	pop	r16
     1a8:	0f bf       	out	0x3f, r16	; 63
     1aa:	ff 91       	pop	r31
     1ac:	ef 91       	pop	r30
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	bf 91       	pop	r27
     1b4:	af 91       	pop	r26
     1b6:	9f 91       	pop	r25
     1b8:	8f 91       	pop	r24
     1ba:	7f 91       	pop	r23
     1bc:	6f 91       	pop	r22
     1be:	5f 91       	pop	r21
     1c0:	4f 91       	pop	r20
     1c2:	3f 91       	pop	r19
     1c4:	2f 91       	pop	r18
     1c6:	1f 91       	pop	r17
     1c8:	0f 91       	pop	r16
     1ca:	ff 90       	pop	r15
     1cc:	ef 90       	pop	r14
     1ce:	df 90       	pop	r13
     1d0:	cf 90       	pop	r12
     1d2:	bf 90       	pop	r11
     1d4:	af 90       	pop	r10
     1d6:	9f 90       	pop	r9
     1d8:	8f 90       	pop	r8
     1da:	7f 90       	pop	r7
     1dc:	6f 90       	pop	r6
     1de:	5f 90       	pop	r5
     1e0:	4f 90       	pop	r4
     1e2:	3f 90       	pop	r3
     1e4:	2f 90       	pop	r2
     1e6:	1f 90       	pop	r1
     1e8:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
     1ea:	18 95       	reti

000001ec <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
     1ec:	0f 92       	push	r0
     1ee:	1f 92       	push	r1
     1f0:	2f 92       	push	r2
     1f2:	3f 92       	push	r3
     1f4:	4f 92       	push	r4
     1f6:	5f 92       	push	r5
     1f8:	6f 92       	push	r6
     1fa:	7f 92       	push	r7
     1fc:	8f 92       	push	r8
     1fe:	9f 92       	push	r9
     200:	af 92       	push	r10
     202:	bf 92       	push	r11
     204:	cf 92       	push	r12
     206:	df 92       	push	r13
     208:	ef 92       	push	r14
     20a:	ff 92       	push	r15
     20c:	0f 93       	push	r16
     20e:	1f 93       	push	r17
     210:	2f 93       	push	r18
     212:	3f 93       	push	r19
     214:	4f 93       	push	r20
     216:	5f 93       	push	r21
     218:	6f 93       	push	r22
     21a:	7f 93       	push	r23
     21c:	8f 93       	push	r24
     21e:	9f 93       	push	r25
     220:	af 93       	push	r26
     222:	bf 93       	push	r27
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	ef 93       	push	r30
     22a:	ff 93       	push	r31
     22c:	0f b7       	in	r16, 0x3f	; 63
     22e:	0f 93       	push	r16
     230:	fc b7       	in	r31, 0x3c	; 60
     232:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
     234:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     236:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
     238:	e0 93 19 15 	sts	0x1519, r30
        sts  CurrentSp+1, r31
     23c:	f0 93 1a 15 	sts	0x151A, r31
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
     240:	e0 91 3b 15 	lds	r30, 0x153B
        lds  r31, KernelSp+1
     244:	f0 91 3c 15 	lds	r31, 0x153C
        out  SPL, r30
     248:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     24a:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
     24c:	ff 91       	pop	r31
     24e:	fc bf       	out	0x3c, r31	; 60
     250:	0f 91       	pop	r16
     252:	0f bf       	out	0x3f, r16	; 63
     254:	ff 91       	pop	r31
     256:	ef 91       	pop	r30
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	bf 91       	pop	r27
     25e:	af 91       	pop	r26
     260:	9f 91       	pop	r25
     262:	8f 91       	pop	r24
     264:	7f 91       	pop	r23
     266:	6f 91       	pop	r22
     268:	5f 91       	pop	r21
     26a:	4f 91       	pop	r20
     26c:	3f 91       	pop	r19
     26e:	2f 91       	pop	r18
     270:	1f 91       	pop	r17
     272:	0f 91       	pop	r16
     274:	ff 90       	pop	r15
     276:	ef 90       	pop	r14
     278:	df 90       	pop	r13
     27a:	cf 90       	pop	r12
     27c:	bf 90       	pop	r11
     27e:	af 90       	pop	r10
     280:	9f 90       	pop	r9
     282:	8f 90       	pop	r8
     284:	7f 90       	pop	r7
     286:	6f 90       	pop	r6
     288:	5f 90       	pop	r5
     28a:	4f 90       	pop	r4
     28c:	3f 90       	pop	r3
     28e:	2f 90       	pop	r2
     290:	1f 90       	pop	r1
     292:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
     294:	08 95       	ret

00000296 <adc_init>:

// initialize adc
void adc_init()
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
     296:	80 e4       	ldi	r24, 0x40	; 64
     298:	80 93 7c 00 	sts	0x007C, r24
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     29c:	87 e8       	ldi	r24, 0x87	; 135
     29e:	80 93 7a 00 	sts	0x007A, r24
     2a2:	08 95       	ret

000002a4 <adc_read>:
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     2a4:	ec e7       	ldi	r30, 0x7C	; 124
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	90 81       	ld	r25, Z
uint16_t adc_read(uint8_t ch)
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
     2aa:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     2ac:	98 7f       	andi	r25, 0xF8	; 248
     2ae:	89 2b       	or	r24, r25
     2b0:	80 83       	st	Z, r24
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
     2b2:	ea e7       	ldi	r30, 0x7A	; 122
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	80 81       	ld	r24, Z
     2b8:	80 64       	ori	r24, 0x40	; 64
     2ba:	80 83       	st	Z, r24
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
     2bc:	80 81       	ld	r24, Z
     2be:	86 fd       	sbrc	r24, 6
     2c0:	fd cf       	rjmp	.-6      	; 0x2bc <adc_read+0x18>
	
	return (ADC);
     2c2:	80 91 78 00 	lds	r24, 0x0078
     2c6:	90 91 79 00 	lds	r25, 0x0079
}
     2ca:	08 95       	ret

000002cc <radio_rxhandler>:
	return 0;
}

void radio_rxhandler(uint8_t pipenumber)
{
	rxflag = 1;
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	80 93 1a 02 	sts	0x021A, r24
	PORTL ^= _BV(PL7);
     2d2:	eb e0       	ldi	r30, 0x0B	; 11
     2d4:	f1 e0       	ldi	r31, 0x01	; 1
     2d6:	80 81       	ld	r24, Z
     2d8:	80 58       	subi	r24, 0x80	; 128
     2da:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2dc:	83 ed       	ldi	r24, 0xD3	; 211
     2de:	90 e3       	ldi	r25, 0x30	; 48
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <radio_rxhandler+0x14>
     2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <radio_rxhandler+0x1a>
     2e6:	00 00       	nop
	_delay_ms(50);
	PORTL ^= _BV(PL7);
     2e8:	80 81       	ld	r24, Z
     2ea:	80 58       	subi	r24, 0x80	; 128
     2ec:	80 83       	st	Z, r24
     2ee:	08 95       	ret

000002f0 <lcd_nibble>:

void lcd_blank( uint8_t len )                   // blank n digits
{
  while( len-- )
    lcd_putchar( ' ' );
}
     2f0:	e2 e0       	ldi	r30, 0x02	; 2
     2f2:	f1 e0       	ldi	r31, 0x01	; 1
     2f4:	90 81       	ld	r25, Z
     2f6:	9f 7e       	andi	r25, 0xEF	; 239
     2f8:	90 83       	st	Z, r25
     2fa:	88 23       	and	r24, r24
     2fc:	1c f4       	brge	.+6      	; 0x304 <lcd_nibble+0x14>
     2fe:	90 81       	ld	r25, Z
     300:	90 61       	ori	r25, 0x10	; 16
     302:	90 83       	st	Z, r25
     304:	e2 e0       	ldi	r30, 0x02	; 2
     306:	f1 e0       	ldi	r31, 0x01	; 1
     308:	90 81       	ld	r25, Z
     30a:	97 7f       	andi	r25, 0xF7	; 247
     30c:	90 83       	st	Z, r25
     30e:	86 ff       	sbrs	r24, 6
     310:	03 c0       	rjmp	.+6      	; 0x318 <lcd_nibble+0x28>
     312:	90 81       	ld	r25, Z
     314:	98 60       	ori	r25, 0x08	; 8
     316:	90 83       	st	Z, r25
     318:	73 98       	cbi	0x0e, 3	; 14
     31a:	85 fd       	sbrc	r24, 5
     31c:	73 9a       	sbi	0x0e, 3	; 14
     31e:	a5 98       	cbi	0x14, 5	; 20
     320:	84 fd       	sbrc	r24, 4
     322:	a5 9a       	sbi	0x14, 5	; 20
     324:	e2 e0       	ldi	r30, 0x02	; 2
     326:	f1 e0       	ldi	r31, 0x01	; 1
     328:	80 81       	ld	r24, Z
     32a:	80 64       	ori	r24, 0x40	; 64
     32c:	80 83       	st	Z, r24
     32e:	85 e0       	ldi	r24, 0x05	; 5
     330:	8a 95       	dec	r24
     332:	f1 f7       	brne	.-4      	; 0x330 <lcd_nibble+0x40>
     334:	00 00       	nop
     336:	80 81       	ld	r24, Z
     338:	8f 7b       	andi	r24, 0xBF	; 191
     33a:	80 83       	st	Z, r24
     33c:	08 95       	ret

0000033e <lcd_command>:
     33e:	cf 93       	push	r28
     340:	c8 2f       	mov	r28, r24
     342:	e2 e0       	ldi	r30, 0x02	; 2
     344:	f1 e0       	ldi	r31, 0x01	; 1
     346:	80 81       	ld	r24, Z
     348:	8f 7d       	andi	r24, 0xDF	; 223
     34a:	80 83       	st	Z, r24
     34c:	8c 2f       	mov	r24, r28
     34e:	d0 df       	rcall	.-96     	; 0x2f0 <lcd_nibble>
     350:	8c 2f       	mov	r24, r28
     352:	82 95       	swap	r24
     354:	80 7f       	andi	r24, 0xF0	; 240
     356:	cc df       	rcall	.-104    	; 0x2f0 <lcd_nibble>
     358:	87 ec       	ldi	r24, 0xC7	; 199
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	01 97       	sbiw	r24, 0x01	; 1
     35e:	f1 f7       	brne	.-4      	; 0x35c <lcd_command+0x1e>
     360:	00 c0       	rjmp	.+0      	; 0x362 <lcd_command+0x24>
     362:	00 00       	nop
     364:	c4 30       	cpi	r28, 0x04	; 4
     366:	18 f0       	brcs	.+6      	; 0x36e <lcd_command+0x30>
     368:	c0 38       	cpi	r28, 0x80	; 128
     36a:	50 f0       	brcs	.+20     	; 0x380 <lcd_command+0x42>
     36c:	07 c0       	rjmp	.+14     	; 0x37c <lcd_command+0x3e>
     36e:	8f e3       	ldi	r24, 0x3F	; 63
     370:	9f e1       	ldi	r25, 0x1F	; 31
     372:	01 97       	sbiw	r24, 0x01	; 1
     374:	f1 f7       	brne	.-4      	; 0x372 <lcd_command+0x34>
     376:	00 c0       	rjmp	.+0      	; 0x378 <lcd_command+0x3a>
     378:	00 00       	nop
     37a:	c0 e8       	ldi	r28, 0x80	; 128
     37c:	c0 93 00 02 	sts	0x0200, r28
     380:	cf 91       	pop	r28
     382:	08 95       	ret

00000384 <lcd_putchar>:
     384:	cf 93       	push	r28
     386:	c8 2f       	mov	r28, r24
     388:	e2 e0       	ldi	r30, 0x02	; 2
     38a:	f1 e0       	ldi	r31, 0x01	; 1
     38c:	80 81       	ld	r24, Z
     38e:	80 62       	ori	r24, 0x20	; 32
     390:	80 83       	st	Z, r24
     392:	8c 2f       	mov	r24, r28
     394:	ad df       	rcall	.-166    	; 0x2f0 <lcd_nibble>
     396:	8c 2f       	mov	r24, r28
     398:	82 95       	swap	r24
     39a:	80 7f       	andi	r24, 0xF0	; 240
     39c:	a9 df       	rcall	.-174    	; 0x2f0 <lcd_nibble>
     39e:	87 ec       	ldi	r24, 0xC7	; 199
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	01 97       	sbiw	r24, 0x01	; 1
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <lcd_putchar+0x1e>
     3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <lcd_putchar+0x24>
     3a8:	00 00       	nop
     3aa:	80 91 00 02 	lds	r24, 0x0200
     3ae:	8f 5f       	subi	r24, 0xFF	; 255
     3b0:	80 93 00 02 	sts	0x0200, r24
     3b4:	80 39       	cpi	r24, 0x90	; 144
     3b6:	21 f0       	breq	.+8      	; 0x3c0 <lcd_putchar+0x3c>
     3b8:	80 3d       	cpi	r24, 0xD0	; 208
     3ba:	21 f4       	brne	.+8      	; 0x3c4 <lcd_putchar+0x40>
     3bc:	80 e8       	ldi	r24, 0x80	; 128
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <lcd_putchar+0x3e>
     3c0:	80 ec       	ldi	r24, 0xC0	; 192
     3c2:	bd df       	rcall	.-134    	; 0x33e <lcd_command>
     3c4:	cf 91       	pop	r28
     3c6:	08 95       	ret

000003c8 <lcd_puts>:
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	ec 01       	movw	r28, r24
     3ce:	88 81       	ld	r24, Y
     3d0:	88 23       	and	r24, r24
     3d2:	29 f0       	breq	.+10     	; 0x3de <lcd_puts+0x16>
     3d4:	21 96       	adiw	r28, 0x01	; 1
     3d6:	d6 df       	rcall	.-84     	; 0x384 <lcd_putchar>
     3d8:	89 91       	ld	r24, Y+
     3da:	81 11       	cpse	r24, r1
     3dc:	fc cf       	rjmp	.-8      	; 0x3d6 <lcd_puts+0xe>
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	08 95       	ret

000003e4 <lcd_init>:


void lcd_init( void )
{
  LCD_DDR_D4 = 1;                               // enable output pins
     3e4:	9d 9a       	sbi	0x13, 5	; 19
  LCD_DDR_D5 = 1;
     3e6:	6b 9a       	sbi	0x0d, 3	; 13
  LCD_DDR_D6 = 1;
     3e8:	e1 e0       	ldi	r30, 0x01	; 1
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	80 81       	ld	r24, Z
     3ee:	88 60       	ori	r24, 0x08	; 8
     3f0:	80 83       	st	Z, r24
  LCD_DDR_D7 = 1;
     3f2:	80 81       	ld	r24, Z
     3f4:	80 61       	ori	r24, 0x10	; 16
     3f6:	80 83       	st	Z, r24
  LCD_DDR_RS = 1;
     3f8:	80 81       	ld	r24, Z
     3fa:	80 62       	ori	r24, 0x20	; 32
     3fc:	80 83       	st	Z, r24
  LCD_DDR_E0 = 1;
     3fe:	80 81       	ld	r24, Z
     400:	80 64       	ori	r24, 0x40	; 64
     402:	80 83       	st	Z, r24
  LCD_E0 = 0;
     404:	e2 e0       	ldi	r30, 0x02	; 2
     406:	f1 e0       	ldi	r31, 0x01	; 1
     408:	80 81       	ld	r24, Z
     40a:	8f 7b       	andi	r24, 0xBF	; 191
     40c:	80 83       	st	Z, r24
  LCD_RS = 0;                                   // send commands
     40e:	80 81       	ld	r24, Z
     410:	8f 7d       	andi	r24, 0xDF	; 223
     412:	80 83       	st	Z, r24
     414:	8f e5       	ldi	r24, 0x5F	; 95
     416:	9a ee       	ldi	r25, 0xEA	; 234
     418:	01 97       	sbiw	r24, 0x01	; 1
     41a:	f1 f7       	brne	.-4      	; 0x418 <lcd_init+0x34>
     41c:	00 c0       	rjmp	.+0      	; 0x41e <lcd_init+0x3a>
     41e:	00 00       	nop

  _delay_ms( 15 );
  lcd_nibble( 0x30 );
     420:	80 e3       	ldi	r24, 0x30	; 48
     422:	66 df       	rcall	.-308    	; 0x2f0 <lcd_nibble>
     424:	8f e0       	ldi	r24, 0x0F	; 15
     426:	90 e4       	ldi	r25, 0x40	; 64
     428:	01 97       	sbiw	r24, 0x01	; 1
     42a:	f1 f7       	brne	.-4      	; 0x428 <lcd_init+0x44>
     42c:	00 c0       	rjmp	.+0      	; 0x42e <lcd_init+0x4a>
     42e:	00 00       	nop
  _delay_ms( 4.1 );
  lcd_nibble( 0x30 );
     430:	80 e3       	ldi	r24, 0x30	; 48
     432:	5e df       	rcall	.-324    	; 0x2f0 <lcd_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     434:	8f e8       	ldi	r24, 0x8F	; 143
     436:	91 e0       	ldi	r25, 0x01	; 1
     438:	01 97       	sbiw	r24, 0x01	; 1
     43a:	f1 f7       	brne	.-4      	; 0x438 <lcd_init+0x54>
     43c:	00 c0       	rjmp	.+0      	; 0x43e <lcd_init+0x5a>
     43e:	00 00       	nop
  _delay_us( 100 );
  lcd_nibble( 0x30 );
     440:	80 e3       	ldi	r24, 0x30	; 48
     442:	56 df       	rcall	.-340    	; 0x2f0 <lcd_nibble>
     444:	87 ec       	ldi	r24, 0xC7	; 199
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	01 97       	sbiw	r24, 0x01	; 1
     44a:	f1 f7       	brne	.-4      	; 0x448 <lcd_init+0x64>
     44c:	00 c0       	rjmp	.+0      	; 0x44e <lcd_init+0x6a>
     44e:	00 00       	nop
  _delay_us( LCD_TIME_DAT );
  lcd_nibble( 0x20 );                           // 4 bit mode
     450:	80 e2       	ldi	r24, 0x20	; 32
     452:	4e df       	rcall	.-356    	; 0x2f0 <lcd_nibble>
     454:	87 ec       	ldi	r24, 0xC7	; 199
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	01 97       	sbiw	r24, 0x01	; 1
     45a:	f1 f7       	brne	.-4      	; 0x458 <lcd_init+0x74>
     45c:	00 c0       	rjmp	.+0      	; 0x45e <lcd_init+0x7a>
     45e:	00 00       	nop
  _delay_us( LCD_TIME_DAT );
#if LCD_LINE == 1
  lcd_command( 0x20 );                          // 1 line
#else
  lcd_command( 0x28 );                          // 2 lines 5*7
     460:	88 e2       	ldi	r24, 0x28	; 40
     462:	6d df       	rcall	.-294    	; 0x33e <lcd_command>
#endif
  lcd_command( 0x08 );                          // display off
     464:	88 e0       	ldi	r24, 0x08	; 8
     466:	6b df       	rcall	.-298    	; 0x33e <lcd_command>
  lcd_command( 0x01 );                          // display clear
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	69 df       	rcall	.-302    	; 0x33e <lcd_command>
  lcd_command( 0x06 );                          // cursor increment
     46c:	86 e0       	ldi	r24, 0x06	; 6
     46e:	67 df       	rcall	.-306    	; 0x33e <lcd_command>
  lcd_command( 0x0C );                          // on, no cursor, no blink
     470:	8c e0       	ldi	r24, 0x0C	; 12
     472:	65 cf       	rjmp	.-310    	; 0x33e <lcd_command>
     474:	08 95       	ret

00000476 <init_LED_PORTL_pin0>:
void init_LED_PORTL_pin6(void) {
    DDRL |= _BV(DDL6);
}

void init_LED_PORTL_pin7(void) {
    DDRL |= _BV(DDL7);
     476:	ea e0       	ldi	r30, 0x0A	; 10
     478:	f1 e0       	ldi	r31, 0x01	; 1
     47a:	80 81       	ld	r24, Z
     47c:	81 60       	ori	r24, 0x01	; 1
     47e:	80 83       	st	Z, r24
     480:	08 95       	ret

00000482 <init_LED_PORTL_pin1>:
     482:	ea e0       	ldi	r30, 0x0A	; 10
     484:	f1 e0       	ldi	r31, 0x01	; 1
     486:	80 81       	ld	r24, Z
     488:	82 60       	ori	r24, 0x02	; 2
     48a:	80 83       	st	Z, r24
     48c:	08 95       	ret

0000048e <init_LED_PORTL_pin2>:
     48e:	ea e0       	ldi	r30, 0x0A	; 10
     490:	f1 e0       	ldi	r31, 0x01	; 1
     492:	80 81       	ld	r24, Z
     494:	84 60       	ori	r24, 0x04	; 4
     496:	80 83       	st	Z, r24
     498:	08 95       	ret

0000049a <init_LED_PORTL_pin5>:
     49a:	ea e0       	ldi	r30, 0x0A	; 10
     49c:	f1 e0       	ldi	r31, 0x01	; 1
     49e:	80 81       	ld	r24, Z
     4a0:	80 62       	ori	r24, 0x20	; 32
     4a2:	80 83       	st	Z, r24
     4a4:	08 95       	ret

000004a6 <init_LED_PORTL_pin6>:
     4a6:	ea e0       	ldi	r30, 0x0A	; 10
     4a8:	f1 e0       	ldi	r31, 0x01	; 1
     4aa:	80 81       	ld	r24, Z
     4ac:	80 64       	ori	r24, 0x40	; 64
     4ae:	80 83       	st	Z, r24
     4b0:	08 95       	ret

000004b2 <enable_LED>:
}

void enable_LED(unsigned int mask) {
    PORTL |= _BV(mask);
     4b2:	eb e0       	ldi	r30, 0x0B	; 11
     4b4:	f1 e0       	ldi	r31, 0x01	; 1
     4b6:	90 81       	ld	r25, Z
     4b8:	21 e0       	ldi	r18, 0x01	; 1
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <enable_LED+0x10>
     4be:	22 0f       	add	r18, r18
     4c0:	33 1f       	adc	r19, r19
     4c2:	8a 95       	dec	r24
     4c4:	e2 f7       	brpl	.-8      	; 0x4be <enable_LED+0xc>
     4c6:	29 2b       	or	r18, r25
     4c8:	20 83       	st	Z, r18
     4ca:	08 95       	ret

000004cc <disable_LED>:
}

void disable_LED(unsigned int mask) {
    PORTL &= ~_BV(mask);
     4cc:	eb e0       	ldi	r30, 0x0B	; 11
     4ce:	f1 e0       	ldi	r31, 0x01	; 1
     4d0:	90 81       	ld	r25, Z
     4d2:	21 e0       	ldi	r18, 0x01	; 1
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <disable_LED+0x10>
     4d8:	22 0f       	add	r18, r18
     4da:	33 1f       	adc	r19, r19
     4dc:	8a 95       	dec	r24
     4de:	e2 f7       	brpl	.-8      	; 0x4d8 <disable_LED+0xc>
     4e0:	20 95       	com	r18
     4e2:	29 23       	and	r18, r25
     4e4:	20 83       	st	Z, r18
     4e6:	08 95       	ret

000004e8 <Poll_Joystick>:

void Poll_Roomba_Data()
{
	
	
	Roomba_UpdateSensorPacket(EXTERNAL, &data);
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
     4ec:	cd b7       	in	r28, 0x3d	; 61
     4ee:	de b7       	in	r29, 0x3e	; 62
     4f0:	27 97       	sbiw	r28, 0x07	; 7
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	f8 94       	cli
     4f6:	de bf       	out	0x3e, r29	; 62
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	cd bf       	out	0x3d, r28	; 61
     4fc:	0f 2e       	mov	r0, r31
     4fe:	ff e0       	ldi	r31, 0x0F	; 15
     500:	ef 2e       	mov	r14, r31
     502:	f2 e0       	ldi	r31, 0x02	; 2
     504:	ff 2e       	mov	r15, r31
     506:	f0 2d       	mov	r31, r0
     508:	8e 01       	movw	r16, r28
     50a:	0f 5f       	subi	r16, 0xFF	; 255
     50c:	1f 4f       	sbci	r17, 0xFF	; 255
     50e:	87 e0       	ldi	r24, 0x07	; 7
     510:	c9 de       	rcall	.-622    	; 0x2a4 <adc_read>
     512:	d8 2e       	mov	r13, r24
     514:	c9 2e       	mov	r12, r25
     516:	85 e0       	ldi	r24, 0x05	; 5
     518:	c5 de       	rcall	.-630    	; 0x2a4 <adc_read>
     51a:	9f 93       	push	r25
     51c:	8f 93       	push	r24
     51e:	cf 92       	push	r12
     520:	df 92       	push	r13
     522:	ff 92       	push	r15
     524:	ef 92       	push	r14
     526:	1f 93       	push	r17
     528:	0f 93       	push	r16
     52a:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <sprintf>
     52e:	61 e0       	ldi	r22, 0x01	; 1
     530:	70 e0       	ldi	r23, 0x00	; 0
     532:	c8 01       	movw	r24, r16
     534:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <uart_send_string>
     538:	2f ef       	ldi	r18, 0xFF	; 255
     53a:	89 ef       	ldi	r24, 0xF9	; 249
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	21 50       	subi	r18, 0x01	; 1
     540:	80 40       	sbci	r24, 0x00	; 0
     542:	90 40       	sbci	r25, 0x00	; 0
     544:	e1 f7       	brne	.-8      	; 0x53e <Poll_Joystick+0x56>
     546:	00 c0       	rjmp	.+0      	; 0x548 <Poll_Joystick+0x60>
     548:	00 00       	nop
     54a:	0f b6       	in	r0, 0x3f	; 63
     54c:	f8 94       	cli
     54e:	de bf       	out	0x3e, r29	; 62
     550:	0f be       	out	0x3f, r0	; 63
     552:	cd bf       	out	0x3d, r28	; 61
     554:	dc cf       	rjmp	.-72     	; 0x50e <Poll_Joystick+0x26>

00000556 <a_main>:
	
}

// Application level main function
// Creates the required tasks and then terminates
void a_main() {
     556:	0f 93       	push	r16
     558:	1f 93       	push	r17
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	cd b7       	in	r28, 0x3d	; 61
     560:	de b7       	in	r29, 0x3e	; 62
     562:	60 97       	sbiw	r28, 0x10	; 16
     564:	0f b6       	in	r0, 0x3f	; 63
     566:	f8 94       	cli
     568:	de bf       	out	0x3e, r29	; 62
     56a:	0f be       	out	0x3f, r0	; 63
     56c:	cd bf       	out	0x3d, r28	; 61
	char line[16];
	portL2_Mutex = Mutex_Init();
     56e:	13 d7       	rcall	.+3622   	; 0x1396 <Mutex_Init>
     570:	90 93 b4 14 	sts	0x14B4, r25
     574:	80 93 b3 14 	sts	0x14B3, r24
	portL6_Mutex = Mutex_Init();
     578:	0e d7       	rcall	.+3612   	; 0x1396 <Mutex_Init>
     57a:	90 93 d4 14 	sts	0x14D4, r25
     57e:	80 93 d3 14 	sts	0x14D3, r24
	unsigned char jsBtn;
	
	
	e1 = Event_Init();
     582:	24 d7       	rcall	.+3656   	; 0x13cc <Event_Init>
     584:	90 93 d8 14 	sts	0x14D8, r25
     588:	80 93 d7 14 	sts	0x14D7, r24
	e2 = Event_Init();
     58c:	1f d7       	rcall	.+3646   	; 0x13cc <Event_Init>
     58e:	90 93 b8 14 	sts	0x14B8, r25
     592:	80 93 b7 14 	sts	0x14B7, r24
	adc_init();
     596:	7f de       	rcall	.-770    	; 0x296 <adc_init>
	uint16_t adc_test = adc_read(7);
     598:	87 e0       	ldi	r24, 0x07	; 7
     59a:	84 de       	rcall	.-760    	; 0x2a4 <adc_read>
     59c:	8c 01       	movw	r16, r24
	//PongPID = Task_Create(Pong, 8, 1);
	//PingPID = Task_Create(Ping, 8, 1);
	//IdlePID = Task_Create(Idle, MINPRIORITY, 1);
	lcd_init(); // initialized the LCD
     59e:	22 df       	rcall	.-444    	; 0x3e4 <lcd_init>
	lcd_xy(0,0);
     5a0:	80 e8       	ldi	r24, 0x80	; 128
     5a2:	cd de       	rcall	.-614    	; 0x33e <lcd_command>
	DDRB |= (1<<DDB4); // enable output mode of Digital Pin 10 (PORTB Pin 4) for backlit control
     5a4:	24 9a       	sbi	0x04, 4	; 4
	PORTB |= (1<<DDB4); // enable back light
     5a6:	2c 9a       	sbi	0x05, 4	; 5
	itoa(adc_test, jsBtn);
     5a8:	60 e0       	ldi	r22, 0x00	; 0
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	c8 01       	movw	r24, r16
     5ae:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <itoa>
	//sprintf(line, "ADC:%2d", adc_test);
	lcd_puts(line);
     5b2:	ce 01       	movw	r24, r28
     5b4:	01 96       	adiw	r24, 0x01	; 1
     5b6:	08 df       	rcall	.-496    	; 0x3c8 <lcd_puts>
	//lcd_xy(0,1);
	//sprintf(line, "Laser: %s", jsBtn);
	//lcd_puts(line);
	//Roomba_Init();
	uart_init(UART_38400);
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <uart_init>
	
	//Roomba_PlaySong(50);

	
	
	InitPID = Task_Create(Poll_Joystick,0,1);
     5be:	41 e0       	ldi	r20, 0x01	; 1
     5c0:	50 e0       	ldi	r21, 0x00	; 0
     5c2:	60 e0       	ldi	r22, 0x00	; 0
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	84 e7       	ldi	r24, 0x74	; 116
     5c8:	92 e0       	ldi	r25, 0x02	; 2
     5ca:	1b d7       	rcall	.+3638   	; 0x1402 <Task_Create>
     5cc:	90 93 d6 14 	sts	0x14D6, r25
     5d0:	80 93 d5 14 	sts	0x14D5, r24
	//DrivePID = Task_Create(Init_Drive, 8, 1);
	//IdlePID = Task_Create(Idle, 8, 1);
	Task_Terminate();
     5d4:	0b d0       	rcall	.+22     	; 0x5ec <Task_Terminate>
}
     5d6:	60 96       	adiw	r28, 0x10	; 16
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	f8 94       	cli
     5dc:	de bf       	out	0x3e, r29	; 62
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	cd bf       	out	0x3d, r28	; 61
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	1f 91       	pop	r17
     5e8:	0f 91       	pop	r16
     5ea:	08 95       	ret

000005ec <Task_Terminate>:
/**
  * Application level task getarg to return intiial arg value
  */
int Task_GetArg(PID p) {
	return (Cp->arg);
}
     5ec:	80 91 2b 02 	lds	r24, 0x022B
     5f0:	90 91 2c 02 	lds	r25, 0x022C
     5f4:	89 2b       	or	r24, r25
     5f6:	51 f0       	breq	.+20     	; 0x60c <Task_Terminate+0x20>
     5f8:	f8 94       	cli
     5fa:	e0 91 2d 02 	lds	r30, 0x022D
     5fe:	f0 91 2e 02 	lds	r31, 0x022E
     602:	e3 5f       	subi	r30, 0xF3	; 243
     604:	fe 4f       	sbci	r31, 0xFE	; 254
     606:	84 e0       	ldi	r24, 0x04	; 4
     608:	80 83       	st	Z, r24
     60a:	f0 cd       	rjmp	.-1056   	; 0x1ec <Enter_Kernel>
     60c:	08 95       	ret

0000060e <Kernel_Create_Task_At>:
     60e:	ef 92       	push	r14
     610:	ff 92       	push	r15
     612:	0f 93       	push	r16
     614:	1f 93       	push	r17
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	1f 92       	push	r1
     61c:	1f 92       	push	r1
     61e:	cd b7       	in	r28, 0x3d	; 61
     620:	de b7       	in	r29, 0x3e	; 62
     622:	9a 83       	std	Y+2, r25	; 0x02
     624:	89 83       	std	Y+1, r24	; 0x01
     626:	dc 01       	movw	r26, r24
     628:	7c 01       	movw	r14, r24
     62a:	04 e0       	ldi	r16, 0x04	; 4
     62c:	e0 0e       	add	r14, r16
     62e:	f1 1c       	adc	r15, r1
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	91 e0       	ldi	r25, 0x01	; 1
     634:	f7 01       	movw	r30, r14
     636:	8c 01       	movw	r16, r24
     638:	11 92       	st	Z+, r1
     63a:	01 50       	subi	r16, 0x01	; 1
     63c:	10 40       	sbci	r17, 0x00	; 0
     63e:	e1 f7       	brne	.-8      	; 0x638 <Kernel_Create_Task_At+0x2a>
     640:	fd 01       	movw	r30, r26
     642:	ed 5f       	subi	r30, 0xFD	; 253
     644:	fe 4f       	sbci	r31, 0xFE	; 254
     646:	86 ef       	ldi	r24, 0xF6	; 246
     648:	92 e0       	ldi	r25, 0x02	; 2
     64a:	80 83       	st	Z, r24
     64c:	31 97       	sbiw	r30, 0x01	; 1
     64e:	90 83       	st	Z, r25
     650:	31 97       	sbiw	r30, 0x01	; 1
     652:	60 83       	st	Z, r22
     654:	31 97       	sbiw	r30, 0x01	; 1
     656:	70 83       	st	Z, r23
     658:	31 97       	sbiw	r30, 0x01	; 1
     65a:	10 82       	st	Z, r1
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	92 93       	st	-Z, r25
     660:	9f 5f       	subi	r25, 0xFF	; 255
     662:	92 32       	cpi	r25, 0x22	; 34
     664:	e1 f7       	brne	.-8      	; 0x65e <Kernel_Create_Task_At+0x50>
     666:	a4 52       	subi	r26, 0x24	; 36
     668:	bf 4f       	sbci	r27, 0xFF	; 255
     66a:	e9 81       	ldd	r30, Y+1	; 0x01
     66c:	fa 81       	ldd	r31, Y+2	; 0x02
     66e:	b3 83       	std	Z+3, r27	; 0x03
     670:	a2 83       	std	Z+2, r26	; 0x02
     672:	df 01       	movw	r26, r30
     674:	a5 5f       	subi	r26, 0xF5	; 245
     676:	be 4f       	sbci	r27, 0xFE	; 254
     678:	11 96       	adiw	r26, 0x01	; 1
     67a:	7c 93       	st	X, r23
     67c:	6e 93       	st	-X, r22
     67e:	12 96       	adiw	r26, 0x02	; 2
     680:	1c 92       	st	X, r1
     682:	80 91 27 02 	lds	r24, 0x0227
     686:	90 91 28 02 	lds	r25, 0x0228
     68a:	91 83       	std	Z+1, r25	; 0x01
     68c:	80 83       	st	Z, r24
     68e:	89 81       	ldd	r24, Y+1	; 0x01
     690:	9a 81       	ldd	r25, Y+2	; 0x02
     692:	fc 01       	movw	r30, r24
     694:	eb 5f       	subi	r30, 0xFB	; 251
     696:	fe 4f       	sbci	r31, 0xFE	; 254
     698:	51 83       	std	Z+1, r21	; 0x01
     69a:	40 83       	st	Z, r20
     69c:	32 96       	adiw	r30, 0x02	; 2
     69e:	51 83       	std	Z+1, r21	; 0x01
     6a0:	40 83       	st	Z, r20
     6a2:	32 96       	adiw	r30, 0x02	; 2
     6a4:	31 83       	std	Z+1, r19	; 0x01
     6a6:	20 83       	st	Z, r18
     6a8:	71 96       	adiw	r30, 0x11	; 17
     6aa:	11 82       	std	Z+1, r1	; 0x01
     6ac:	10 82       	st	Z, r1
     6ae:	34 97       	sbiw	r30, 0x04	; 4
     6b0:	23 e6       	ldi	r18, 0x63	; 99
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	31 83       	std	Z+1, r19	; 0x01
     6b6:	20 83       	st	Z, r18
     6b8:	20 91 29 02 	lds	r18, 0x0229
     6bc:	30 91 2a 02 	lds	r19, 0x022A
     6c0:	2f 5f       	subi	r18, 0xFF	; 255
     6c2:	3f 4f       	sbci	r19, 0xFF	; 255
     6c4:	30 93 2a 02 	sts	0x022A, r19
     6c8:	20 93 29 02 	sts	0x0229, r18
     6cc:	20 91 27 02 	lds	r18, 0x0227
     6d0:	30 91 28 02 	lds	r19, 0x0228
     6d4:	2f 5f       	subi	r18, 0xFF	; 255
     6d6:	3f 4f       	sbci	r19, 0xFF	; 255
     6d8:	30 93 28 02 	sts	0x0228, r19
     6dc:	20 93 27 02 	sts	0x0227, r18
     6e0:	72 97       	sbiw	r30, 0x12	; 18
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	80 83       	st	Z, r24
     6e6:	4f e1       	ldi	r20, 0x1F	; 31
     6e8:	52 e0       	ldi	r21, 0x02	; 2
     6ea:	69 ef       	ldi	r22, 0xF9	; 249
     6ec:	74 e1       	ldi	r23, 0x14	; 20
     6ee:	ce 01       	movw	r24, r28
     6f0:	01 96       	adiw	r24, 0x01	; 1
     6f2:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <enqueueRQ>
     6f6:	e9 81       	ldd	r30, Y+1	; 0x01
     6f8:	fa 81       	ldd	r31, Y+2	; 0x02
     6fa:	80 81       	ld	r24, Z
     6fc:	91 81       	ldd	r25, Z+1	; 0x01
     6fe:	0f 90       	pop	r0
     700:	0f 90       	pop	r0
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	1f 91       	pop	r17
     708:	0f 91       	pop	r16
     70a:	ff 90       	pop	r15
     70c:	ef 90       	pop	r14
     70e:	08 95       	ret

00000710 <Kernel_Create_Task>:
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	ec 01       	movw	r28, r24
     716:	80 91 29 02 	lds	r24, 0x0229
     71a:	90 91 2a 02 	lds	r25, 0x022A
     71e:	40 97       	sbiw	r24, 0x10	; 16
     720:	21 f1       	breq	.+72     	; 0x76a <Kernel_Create_Task+0x5a>
     722:	80 91 93 03 	lds	r24, 0x0393
     726:	88 23       	and	r24, r24
     728:	71 f0       	breq	.+28     	; 0x746 <Kernel_Create_Task+0x36>
     72a:	a1 eb       	ldi	r26, 0xB1	; 177
     72c:	b4 e0       	ldi	r27, 0x04	; 4
     72e:	e1 e0       	ldi	r30, 0x01	; 1
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	9c 91       	ld	r25, X
     734:	99 23       	and	r25, r25
     736:	49 f0       	breq	.+18     	; 0x74a <Kernel_Create_Task+0x3a>
     738:	31 96       	adiw	r30, 0x01	; 1
     73a:	a2 5e       	subi	r26, 0xE2	; 226
     73c:	be 4f       	sbci	r27, 0xFE	; 254
     73e:	e0 31       	cpi	r30, 0x10	; 16
     740:	f1 05       	cpc	r31, r1
     742:	b9 f7       	brne	.-18     	; 0x732 <Kernel_Create_Task+0x22>
     744:	02 c0       	rjmp	.+4      	; 0x74a <Kernel_Create_Task+0x3a>
     746:	e0 e0       	ldi	r30, 0x00	; 0
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	9a 01       	movw	r18, r20
     74c:	ab 01       	movw	r20, r22
     74e:	be 01       	movw	r22, r28
     750:	ae e1       	ldi	r26, 0x1E	; 30
     752:	b1 e0       	ldi	r27, 0x01	; 1
     754:	ea 9f       	mul	r30, r26
     756:	c0 01       	movw	r24, r0
     758:	eb 9f       	mul	r30, r27
     75a:	90 0d       	add	r25, r0
     75c:	fa 9f       	mul	r31, r26
     75e:	90 0d       	add	r25, r0
     760:	11 24       	eor	r1, r1
     762:	81 57       	subi	r24, 0x71	; 113
     764:	9d 4f       	sbci	r25, 0xFD	; 253
     766:	53 df       	rcall	.-346    	; 0x60e <Kernel_Create_Task_At>
     768:	00 c0       	rjmp	.+0      	; 0x76a <Kernel_Create_Task+0x5a>
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	08 95       	ret

00000770 <Kernel_Init_Mutex_At>:
     770:	fc 01       	movw	r30, r24
     772:	80 91 25 02 	lds	r24, 0x0225
     776:	90 91 26 02 	lds	r25, 0x0226
     77a:	91 83       	std	Z+1, r25	; 0x01
     77c:	80 83       	st	Z, r24
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	82 83       	std	Z+2, r24	; 0x02
     782:	80 91 25 02 	lds	r24, 0x0225
     786:	90 91 26 02 	lds	r25, 0x0226
     78a:	01 96       	adiw	r24, 0x01	; 1
     78c:	90 93 26 02 	sts	0x0226, r25
     790:	80 93 25 02 	sts	0x0225, r24
     794:	80 81       	ld	r24, Z
     796:	91 81       	ldd	r25, Z+1	; 0x01
     798:	08 95       	ret

0000079a <Kernel_Init_Event_At>:
     79a:	fc 01       	movw	r30, r24
     79c:	80 91 23 02 	lds	r24, 0x0223
     7a0:	90 91 24 02 	lds	r25, 0x0224
     7a4:	91 83       	std	Z+1, r25	; 0x01
     7a6:	80 83       	st	Z, r24
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	82 83       	std	Z+2, r24	; 0x02
     7ac:	14 82       	std	Z+4, r1	; 0x04
     7ae:	13 82       	std	Z+3, r1	; 0x03
     7b0:	80 91 23 02 	lds	r24, 0x0223
     7b4:	90 91 24 02 	lds	r25, 0x0224
     7b8:	01 96       	adiw	r24, 0x01	; 1
     7ba:	90 93 24 02 	sts	0x0224, r25
     7be:	80 93 23 02 	sts	0x0223, r24
     7c2:	80 81       	ld	r24, Z
     7c4:	91 81       	ldd	r25, Z+1	; 0x01
     7c6:	08 95       	ret

000007c8 <OS_Init>:
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	10 92 2a 02 	sts	0x022A, r1
     7d0:	10 92 29 02 	sts	0x0229, r1
     7d4:	10 92 2c 02 	sts	0x022C, r1
     7d8:	10 92 2b 02 	sts	0x022B, r1
     7dc:	10 92 26 02 	sts	0x0226, r1
     7e0:	10 92 25 02 	sts	0x0225, r1
     7e4:	10 92 24 02 	sts	0x0224, r1
     7e8:	10 92 23 02 	sts	0x0223, r1
     7ec:	10 92 28 02 	sts	0x0228, r1
     7f0:	10 92 27 02 	sts	0x0227, r1
     7f4:	ef e8       	ldi	r30, 0x8F	; 143
     7f6:	f2 e0       	ldi	r31, 0x02	; 2
     7f8:	a3 e9       	ldi	r26, 0x93	; 147
     7fa:	b3 e0       	ldi	r27, 0x03	; 3
     7fc:	4f e6       	ldi	r20, 0x6F	; 111
     7fe:	54 e1       	ldi	r21, 0x14	; 20
     800:	2e e1       	ldi	r18, 0x1E	; 30
     802:	31 e0       	ldi	r19, 0x01	; 1
     804:	83 e6       	ldi	r24, 0x63	; 99
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	ef 01       	movw	r28, r30
     80a:	b9 01       	movw	r22, r18
     80c:	19 92       	st	Y+, r1
     80e:	61 50       	subi	r22, 0x01	; 1
     810:	70 40       	sbci	r23, 0x00	; 0
     812:	e1 f7       	brne	.-8      	; 0x80c <OS_Init+0x44>
     814:	1c 92       	st	X, r1
     816:	53 96       	adiw	r26, 0x13	; 19
     818:	9c 93       	st	X, r25
     81a:	8e 93       	st	-X, r24
     81c:	52 97       	sbiw	r26, 0x12	; 18
     81e:	11 82       	std	Z+1, r1	; 0x01
     820:	10 82       	st	Z, r1
     822:	e2 5e       	subi	r30, 0xE2	; 226
     824:	fe 4f       	sbci	r31, 0xFE	; 254
     826:	a2 5e       	subi	r26, 0xE2	; 226
     828:	be 4f       	sbci	r27, 0xFE	; 254
     82a:	e4 17       	cp	r30, r20
     82c:	f5 07       	cpc	r31, r21
     82e:	61 f7       	brne	.-40     	; 0x808 <OS_Init+0x40>
     830:	e9 e5       	ldi	r30, 0x59	; 89
     832:	f2 e0       	ldi	r31, 0x02	; 2
     834:	21 e9       	ldi	r18, 0x91	; 145
     836:	32 e0       	ldi	r19, 0x02	; 2
     838:	87 e0       	ldi	r24, 0x07	; 7
     83a:	df 01       	movw	r26, r30
     83c:	12 97       	sbiw	r26, 0x02	; 2
     83e:	ed 01       	movw	r28, r26
     840:	68 2f       	mov	r22, r24
     842:	19 92       	st	Y+, r1
     844:	6a 95       	dec	r22
     846:	e9 f7       	brne	.-6      	; 0x842 <OS_Init+0x7a>
     848:	10 82       	st	Z, r1
     84a:	37 96       	adiw	r30, 0x07	; 7
     84c:	e2 17       	cp	r30, r18
     84e:	f3 07       	cpc	r31, r19
     850:	a1 f7       	brne	.-24     	; 0x83a <OS_Init+0x72>
     852:	e1 e3       	ldi	r30, 0x31	; 49
     854:	f2 e0       	ldi	r31, 0x02	; 2
     856:	29 e5       	ldi	r18, 0x59	; 89
     858:	32 e0       	ldi	r19, 0x02	; 2
     85a:	85 e0       	ldi	r24, 0x05	; 5
     85c:	df 01       	movw	r26, r30
     85e:	12 97       	sbiw	r26, 0x02	; 2
     860:	ed 01       	movw	r28, r26
     862:	68 2f       	mov	r22, r24
     864:	19 92       	st	Y+, r1
     866:	6a 95       	dec	r22
     868:	e9 f7       	brne	.-6      	; 0x864 <OS_Init+0x9c>
     86a:	10 82       	st	Z, r1
     86c:	35 96       	adiw	r30, 0x05	; 5
     86e:	e2 17       	cp	r30, r18
     870:	f3 07       	cpc	r31, r19
     872:	a1 f7       	brne	.-24     	; 0x85c <OS_Init+0x94>
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	08 95       	ret

0000087a <OS_Abort>:
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	0e 94 2c 12 	call	0x2458	; 0x2458 <_exit>

00000882 <Dispatch>:
     882:	6f e1       	ldi	r22, 0x1F	; 31
     884:	72 e0       	ldi	r23, 0x02	; 2
     886:	89 ef       	ldi	r24, 0xF9	; 249
     888:	94 e1       	ldi	r25, 0x14	; 20
     88a:	0e 94 c7 0c 	call	0x198e	; 0x198e <dequeueRQ>
     88e:	fc 01       	movw	r30, r24
     890:	90 93 2e 02 	sts	0x022E, r25
     894:	80 93 2d 02 	sts	0x022D, r24
     898:	89 2b       	or	r24, r25
     89a:	09 f4       	brne	.+2      	; 0x89e <Dispatch+0x1c>
     89c:	ee df       	rcall	.-36     	; 0x87a <OS_Abort>
     89e:	82 81       	ldd	r24, Z+2	; 0x02
     8a0:	93 81       	ldd	r25, Z+3	; 0x03
     8a2:	90 93 1a 15 	sts	0x151A, r25
     8a6:	80 93 19 15 	sts	0x1519, r24
     8aa:	82 e0       	ldi	r24, 0x02	; 2
     8ac:	df 01       	movw	r26, r30
     8ae:	ac 5f       	subi	r26, 0xFC	; 252
     8b0:	be 4f       	sbci	r27, 0xFE	; 254
     8b2:	8c 93       	st	X, r24
     8b4:	80 81       	ld	r24, Z
     8b6:	91 81       	ldd	r25, Z+1	; 0x01
     8b8:	02 97       	sbiw	r24, 0x02	; 2
     8ba:	20 f4       	brcc	.+8      	; 0x8c4 <Dispatch+0x42>
     8bc:	82 e0       	ldi	r24, 0x02	; 2
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	f8 cd       	rjmp	.-1040   	; 0x4b2 <enable_LED>
     8c2:	08 95       	ret
     8c4:	80 81       	ld	r24, Z
     8c6:	91 81       	ldd	r25, Z+1	; 0x01
     8c8:	02 97       	sbiw	r24, 0x02	; 2
     8ca:	21 f4       	brne	.+8      	; 0x8d4 <Dispatch+0x52>
     8cc:	85 e0       	ldi	r24, 0x05	; 5
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	f0 cd       	rjmp	.-1056   	; 0x4b2 <enable_LED>
     8d2:	08 95       	ret
     8d4:	80 81       	ld	r24, Z
     8d6:	91 81       	ldd	r25, Z+1	; 0x01
     8d8:	03 97       	sbiw	r24, 0x03	; 3
     8da:	19 f4       	brne	.+6      	; 0x8e2 <Dispatch+0x60>
     8dc:	86 e0       	ldi	r24, 0x06	; 6
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	e8 cd       	rjmp	.-1072   	; 0x4b2 <enable_LED>
     8e2:	08 95       	ret

000008e4 <Kernel_Unlock_Mutex>:
     8e4:	0f 93       	push	r16
     8e6:	1f 93       	push	r17
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
     8ec:	1f 92       	push	r1
     8ee:	1f 92       	push	r1
     8f0:	cd b7       	in	r28, 0x3d	; 61
     8f2:	de b7       	in	r29, 0x3e	; 62
     8f4:	a0 91 2d 02 	lds	r26, 0x022D
     8f8:	b0 91 2e 02 	lds	r27, 0x022E
     8fc:	fd 01       	movw	r30, r26
     8fe:	ec 5e       	subi	r30, 0xEC	; 236
     900:	fe 4f       	sbci	r31, 0xFE	; 254
     902:	40 81       	ld	r20, Z
     904:	51 81       	ldd	r21, Z+1	; 0x01
     906:	e7 e5       	ldi	r30, 0x57	; 87
     908:	f2 e0       	ldi	r31, 0x02	; 2
     90a:	00 e0       	ldi	r16, 0x00	; 0
     90c:	10 e0       	ldi	r17, 0x00	; 0
     90e:	80 81       	ld	r24, Z
     910:	91 81       	ldd	r25, Z+1	; 0x01
     912:	84 17       	cp	r24, r20
     914:	95 07       	cpc	r25, r21
     916:	39 f0       	breq	.+14     	; 0x926 <Kernel_Unlock_Mutex+0x42>
     918:	0f 5f       	subi	r16, 0xFF	; 255
     91a:	1f 4f       	sbci	r17, 0xFF	; 255
     91c:	37 96       	adiw	r30, 0x07	; 7
     91e:	08 30       	cpi	r16, 0x08	; 8
     920:	11 05       	cpc	r17, r1
     922:	a9 f7       	brne	.-22     	; 0x90e <Kernel_Unlock_Mutex+0x2a>
     924:	f7 c0       	rjmp	.+494    	; 0xb14 <Kernel_Unlock_Mutex+0x230>
     926:	8d 91       	ld	r24, X+
     928:	9c 91       	ld	r25, X
     92a:	11 97       	sbiw	r26, 0x01	; 1
     92c:	27 e0       	ldi	r18, 0x07	; 7
     92e:	20 9f       	mul	r18, r16
     930:	f0 01       	movw	r30, r0
     932:	21 9f       	mul	r18, r17
     934:	f0 0d       	add	r31, r0
     936:	11 24       	eor	r1, r1
     938:	e9 5a       	subi	r30, 0xA9	; 169
     93a:	fd 4f       	sbci	r31, 0xFD	; 253
     93c:	23 81       	ldd	r18, Z+3	; 0x03
     93e:	34 81       	ldd	r19, Z+4	; 0x04
     940:	28 17       	cp	r18, r24
     942:	39 07       	cpc	r19, r25
     944:	09 f0       	breq	.+2      	; 0x948 <Kernel_Unlock_Mutex+0x64>
     946:	e6 c0       	rjmp	.+460    	; 0xb14 <Kernel_Unlock_Mutex+0x230>
     948:	ac 5f       	subi	r26, 0xFC	; 252
     94a:	be 4f       	sbci	r27, 0xFE	; 254
     94c:	8c 91       	ld	r24, X
     94e:	86 30       	cpi	r24, 0x06	; 6
     950:	09 f0       	breq	.+2      	; 0x954 <Kernel_Unlock_Mutex+0x70>
     952:	4d c0       	rjmp	.+154    	; 0x9ee <Kernel_Unlock_Mutex+0x10a>
     954:	6b e1       	ldi	r22, 0x1B	; 27
     956:	72 e0       	ldi	r23, 0x02	; 2
     958:	8b e1       	ldi	r24, 0x1B	; 27
     95a:	95 e1       	ldi	r25, 0x15	; 21
     95c:	b0 d7       	rcall	.+3936   	; 0x18be <dequeueWQ>
     95e:	9a 83       	std	Y+2, r25	; 0x02
     960:	89 83       	std	Y+1, r24	; 0x01
     962:	00 97       	sbiw	r24, 0x00	; 0
     964:	79 f4       	brne	.+30     	; 0x984 <Kernel_Unlock_Mutex+0xa0>
     966:	87 e0       	ldi	r24, 0x07	; 7
     968:	80 9f       	mul	r24, r16
     96a:	f0 01       	movw	r30, r0
     96c:	81 9f       	mul	r24, r17
     96e:	f0 0d       	add	r31, r0
     970:	11 24       	eor	r1, r1
     972:	e9 5a       	subi	r30, 0xA9	; 169
     974:	fd 4f       	sbci	r31, 0xFD	; 253
     976:	16 82       	std	Z+6, r1	; 0x06
     978:	15 82       	std	Z+5, r1	; 0x05
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	82 83       	std	Z+2, r24	; 0x02
     97e:	14 82       	std	Z+4, r1	; 0x04
     980:	13 82       	std	Z+3, r1	; 0x03
     982:	c8 c0       	rjmp	.+400    	; 0xb14 <Kernel_Unlock_Mutex+0x230>
     984:	27 e0       	ldi	r18, 0x07	; 7
     986:	20 9f       	mul	r18, r16
     988:	f0 01       	movw	r30, r0
     98a:	21 9f       	mul	r18, r17
     98c:	f0 0d       	add	r31, r0
     98e:	11 24       	eor	r1, r1
     990:	e9 5a       	subi	r30, 0xA9	; 169
     992:	fd 4f       	sbci	r31, 0xFD	; 253
     994:	21 e0       	ldi	r18, 0x01	; 1
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	36 83       	std	Z+6, r19	; 0x06
     99a:	25 83       	std	Z+5, r18	; 0x05
     99c:	dc 01       	movw	r26, r24
     99e:	2d 91       	ld	r18, X+
     9a0:	3c 91       	ld	r19, X
     9a2:	34 83       	std	Z+4, r19	; 0x04
     9a4:	23 83       	std	Z+3, r18	; 0x03
     9a6:	20 91 2d 02 	lds	r18, 0x022D
     9aa:	30 91 2e 02 	lds	r19, 0x022E
     9ae:	d9 01       	movw	r26, r18
     9b0:	a9 5f       	subi	r26, 0xF9	; 249
     9b2:	be 4f       	sbci	r27, 0xFE	; 254
     9b4:	4d 91       	ld	r20, X+
     9b6:	5c 91       	ld	r21, X
     9b8:	11 97       	sbiw	r26, 0x01	; 1
     9ba:	fc 01       	movw	r30, r24
     9bc:	e9 5f       	subi	r30, 0xF9	; 249
     9be:	fe 4f       	sbci	r31, 0xFE	; 254
     9c0:	51 83       	std	Z+1, r21	; 0x01
     9c2:	40 83       	st	Z, r20
     9c4:	33 97       	sbiw	r30, 0x03	; 3
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	80 83       	st	Z, r24
     9ca:	f9 01       	movw	r30, r18
     9cc:	eb 5f       	subi	r30, 0xFB	; 251
     9ce:	fe 4f       	sbci	r31, 0xFE	; 254
     9d0:	40 81       	ld	r20, Z
     9d2:	51 81       	ldd	r21, Z+1	; 0x01
     9d4:	11 96       	adiw	r26, 0x01	; 1
     9d6:	5c 93       	st	X, r21
     9d8:	4e 93       	st	-X, r20
     9da:	31 97       	sbiw	r30, 0x01	; 1
     9dc:	80 83       	st	Z, r24
     9de:	4f e1       	ldi	r20, 0x1F	; 31
     9e0:	52 e0       	ldi	r21, 0x02	; 2
     9e2:	69 ef       	ldi	r22, 0xF9	; 249
     9e4:	74 e1       	ldi	r23, 0x14	; 20
     9e6:	ce 01       	movw	r24, r28
     9e8:	01 96       	adiw	r24, 0x01	; 1
     9ea:	06 d7       	rcall	.+3596   	; 0x17f8 <enqueueRQ>
     9ec:	93 c0       	rjmp	.+294    	; 0xb14 <Kernel_Unlock_Mutex+0x230>
     9ee:	87 e0       	ldi	r24, 0x07	; 7
     9f0:	80 9f       	mul	r24, r16
     9f2:	f0 01       	movw	r30, r0
     9f4:	81 9f       	mul	r24, r17
     9f6:	f0 0d       	add	r31, r0
     9f8:	11 24       	eor	r1, r1
     9fa:	e9 5a       	subi	r30, 0xA9	; 169
     9fc:	fd 4f       	sbci	r31, 0xFD	; 253
     9fe:	85 81       	ldd	r24, Z+5	; 0x05
     a00:	96 81       	ldd	r25, Z+6	; 0x06
     a02:	82 30       	cpi	r24, 0x02	; 2
     a04:	91 05       	cpc	r25, r1
     a06:	60 f0       	brcs	.+24     	; 0xa20 <Kernel_Unlock_Mutex+0x13c>
     a08:	27 e0       	ldi	r18, 0x07	; 7
     a0a:	20 9f       	mul	r18, r16
     a0c:	f0 01       	movw	r30, r0
     a0e:	21 9f       	mul	r18, r17
     a10:	f0 0d       	add	r31, r0
     a12:	11 24       	eor	r1, r1
     a14:	e9 5a       	subi	r30, 0xA9	; 169
     a16:	fd 4f       	sbci	r31, 0xFD	; 253
     a18:	01 97       	sbiw	r24, 0x01	; 1
     a1a:	96 83       	std	Z+6, r25	; 0x06
     a1c:	85 83       	std	Z+5, r24	; 0x05
     a1e:	7a c0       	rjmp	.+244    	; 0xb14 <Kernel_Unlock_Mutex+0x230>
     a20:	6b e1       	ldi	r22, 0x1B	; 27
     a22:	72 e0       	ldi	r23, 0x02	; 2
     a24:	8b e1       	ldi	r24, 0x1B	; 27
     a26:	95 e1       	ldi	r25, 0x15	; 21
     a28:	4a d7       	rcall	.+3732   	; 0x18be <dequeueWQ>
     a2a:	9a 83       	std	Y+2, r25	; 0x02
     a2c:	89 83       	std	Y+1, r24	; 0x01
     a2e:	00 97       	sbiw	r24, 0x00	; 0
     a30:	a9 f5       	brne	.+106    	; 0xa9c <Kernel_Unlock_Mutex+0x1b8>
     a32:	87 e0       	ldi	r24, 0x07	; 7
     a34:	80 9f       	mul	r24, r16
     a36:	f0 01       	movw	r30, r0
     a38:	81 9f       	mul	r24, r17
     a3a:	f0 0d       	add	r31, r0
     a3c:	11 24       	eor	r1, r1
     a3e:	e9 5a       	subi	r30, 0xA9	; 169
     a40:	fd 4f       	sbci	r31, 0xFD	; 253
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	82 83       	std	Z+2, r24	; 0x02
     a46:	16 82       	std	Z+6, r1	; 0x06
     a48:	15 82       	std	Z+5, r1	; 0x05
     a4a:	14 82       	std	Z+4, r1	; 0x04
     a4c:	13 82       	std	Z+3, r1	; 0x03
     a4e:	e0 91 2d 02 	lds	r30, 0x022D
     a52:	f0 91 2e 02 	lds	r31, 0x022E
     a56:	df 01       	movw	r26, r30
     a58:	ab 5f       	subi	r26, 0xFB	; 251
     a5a:	be 4f       	sbci	r27, 0xFE	; 254
     a5c:	8d 91       	ld	r24, X+
     a5e:	9c 91       	ld	r25, X
     a60:	11 97       	sbiw	r26, 0x01	; 1
     a62:	12 96       	adiw	r26, 0x02	; 2
     a64:	11 96       	adiw	r26, 0x01	; 1
     a66:	9c 93       	st	X, r25
     a68:	8e 93       	st	-X, r24
     a6a:	80 81       	ld	r24, Z
     a6c:	91 81       	ldd	r25, Z+1	; 0x01
     a6e:	02 97       	sbiw	r24, 0x02	; 2
     a70:	20 f4       	brcc	.+8      	; 0xa7a <Kernel_Unlock_Mutex+0x196>
     a72:	82 e0       	ldi	r24, 0x02	; 2
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	1d dd       	rcall	.-1478   	; 0x4b2 <enable_LED>
     a78:	4d c0       	rjmp	.+154    	; 0xb14 <Kernel_Unlock_Mutex+0x230>
     a7a:	80 81       	ld	r24, Z
     a7c:	91 81       	ldd	r25, Z+1	; 0x01
     a7e:	02 97       	sbiw	r24, 0x02	; 2
     a80:	21 f4       	brne	.+8      	; 0xa8a <Kernel_Unlock_Mutex+0x1a6>
     a82:	85 e0       	ldi	r24, 0x05	; 5
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	15 dd       	rcall	.-1494   	; 0x4b2 <enable_LED>
     a88:	45 c0       	rjmp	.+138    	; 0xb14 <Kernel_Unlock_Mutex+0x230>
     a8a:	80 81       	ld	r24, Z
     a8c:	91 81       	ldd	r25, Z+1	; 0x01
     a8e:	03 97       	sbiw	r24, 0x03	; 3
     a90:	09 f0       	breq	.+2      	; 0xa94 <Kernel_Unlock_Mutex+0x1b0>
     a92:	40 c0       	rjmp	.+128    	; 0xb14 <Kernel_Unlock_Mutex+0x230>
     a94:	86 e0       	ldi	r24, 0x06	; 6
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	0c dd       	rcall	.-1512   	; 0x4b2 <enable_LED>
     a9a:	3c c0       	rjmp	.+120    	; 0xb14 <Kernel_Unlock_Mutex+0x230>
     a9c:	27 e0       	ldi	r18, 0x07	; 7
     a9e:	20 9f       	mul	r18, r16
     aa0:	f0 01       	movw	r30, r0
     aa2:	21 9f       	mul	r18, r17
     aa4:	f0 0d       	add	r31, r0
     aa6:	11 24       	eor	r1, r1
     aa8:	e9 5a       	subi	r30, 0xA9	; 169
     aaa:	fd 4f       	sbci	r31, 0xFD	; 253
     aac:	21 e0       	ldi	r18, 0x01	; 1
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	36 83       	std	Z+6, r19	; 0x06
     ab2:	25 83       	std	Z+5, r18	; 0x05
     ab4:	dc 01       	movw	r26, r24
     ab6:	2d 91       	ld	r18, X+
     ab8:	3c 91       	ld	r19, X
     aba:	34 83       	std	Z+4, r19	; 0x04
     abc:	23 83       	std	Z+3, r18	; 0x03
     abe:	20 91 2d 02 	lds	r18, 0x022D
     ac2:	30 91 2e 02 	lds	r19, 0x022E
     ac6:	d9 01       	movw	r26, r18
     ac8:	a9 5f       	subi	r26, 0xF9	; 249
     aca:	be 4f       	sbci	r27, 0xFE	; 254
     acc:	4d 91       	ld	r20, X+
     ace:	5c 91       	ld	r21, X
     ad0:	11 97       	sbiw	r26, 0x01	; 1
     ad2:	fc 01       	movw	r30, r24
     ad4:	e9 5f       	subi	r30, 0xF9	; 249
     ad6:	fe 4f       	sbci	r31, 0xFE	; 254
     ad8:	51 83       	std	Z+1, r21	; 0x01
     ada:	40 83       	st	Z, r20
     adc:	33 97       	sbiw	r30, 0x03	; 3
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	80 83       	st	Z, r24
     ae2:	f9 01       	movw	r30, r18
     ae4:	eb 5f       	subi	r30, 0xFB	; 251
     ae6:	fe 4f       	sbci	r31, 0xFE	; 254
     ae8:	40 81       	ld	r20, Z
     aea:	51 81       	ldd	r21, Z+1	; 0x01
     aec:	11 96       	adiw	r26, 0x01	; 1
     aee:	5c 93       	st	X, r21
     af0:	4e 93       	st	-X, r20
     af2:	31 97       	sbiw	r30, 0x01	; 1
     af4:	80 83       	st	Z, r24
     af6:	4f e1       	ldi	r20, 0x1F	; 31
     af8:	52 e0       	ldi	r21, 0x02	; 2
     afa:	69 ef       	ldi	r22, 0xF9	; 249
     afc:	74 e1       	ldi	r23, 0x14	; 20
     afe:	ce 01       	movw	r24, r28
     b00:	01 96       	adiw	r24, 0x01	; 1
     b02:	7a d6       	rcall	.+3316   	; 0x17f8 <enqueueRQ>
     b04:	4f e1       	ldi	r20, 0x1F	; 31
     b06:	52 e0       	ldi	r21, 0x02	; 2
     b08:	69 ef       	ldi	r22, 0xF9	; 249
     b0a:	74 e1       	ldi	r23, 0x14	; 20
     b0c:	8d e2       	ldi	r24, 0x2D	; 45
     b0e:	92 e0       	ldi	r25, 0x02	; 2
     b10:	73 d6       	rcall	.+3302   	; 0x17f8 <enqueueRQ>
     b12:	b7 de       	rcall	.-658    	; 0x882 <Dispatch>
     b14:	0f 90       	pop	r0
     b16:	0f 90       	pop	r0
     b18:	df 91       	pop	r29
     b1a:	cf 91       	pop	r28
     b1c:	1f 91       	pop	r17
     b1e:	0f 91       	pop	r16
     b20:	08 95       	ret

00000b22 <OS_Start>:
     b22:	2f 92       	push	r2
     b24:	3f 92       	push	r3
     b26:	4f 92       	push	r4
     b28:	5f 92       	push	r5
     b2a:	6f 92       	push	r6
     b2c:	7f 92       	push	r7
     b2e:	8f 92       	push	r8
     b30:	9f 92       	push	r9
     b32:	af 92       	push	r10
     b34:	bf 92       	push	r11
     b36:	cf 92       	push	r12
     b38:	df 92       	push	r13
     b3a:	ef 92       	push	r14
     b3c:	ff 92       	push	r15
     b3e:	0f 93       	push	r16
     b40:	1f 93       	push	r17
     b42:	cf 93       	push	r28
     b44:	df 93       	push	r29
     b46:	00 d0       	rcall	.+0      	; 0xb48 <OS_Start+0x26>
     b48:	1f 92       	push	r1
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	80 91 2b 02 	lds	r24, 0x022B
     b52:	90 91 2c 02 	lds	r25, 0x022C
     b56:	89 2b       	or	r24, r25
     b58:	09 f0       	breq	.+2      	; 0xb5c <OS_Start+0x3a>
     b5a:	06 c4       	rjmp	.+2060   	; 0x1368 <OS_Start+0x846>
     b5c:	80 91 29 02 	lds	r24, 0x0229
     b60:	90 91 2a 02 	lds	r25, 0x022A
     b64:	89 2b       	or	r24, r25
     b66:	09 f4       	brne	.+2      	; 0xb6a <OS_Start+0x48>
     b68:	ff c3       	rjmp	.+2046   	; 0x1368 <OS_Start+0x846>
     b6a:	f8 94       	cli
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	90 93 2c 02 	sts	0x022C, r25
     b74:	80 93 2b 02 	sts	0x022B, r24
     b78:	84 de       	rcall	.-760    	; 0x882 <Dispatch>
     b7a:	0f 2e       	mov	r0, r31
     b7c:	ff e2       	ldi	r31, 0x2F	; 47
     b7e:	ef 2e       	mov	r14, r31
     b80:	f2 e0       	ldi	r31, 0x02	; 2
     b82:	ff 2e       	mov	r15, r31
     b84:	f0 2d       	mov	r31, r0
     b86:	0f 2e       	mov	r0, r31
     b88:	fe e1       	ldi	r31, 0x1E	; 30
     b8a:	af 2e       	mov	r10, r31
     b8c:	bb 24       	eor	r11, r11
     b8e:	b3 94       	inc	r11
     b90:	f0 2d       	mov	r31, r0
     b92:	0f 2e       	mov	r0, r31
     b94:	f3 e6       	ldi	r31, 0x63	; 99
     b96:	2f 2e       	mov	r2, r31
     b98:	31 2c       	mov	r3, r1
     b9a:	f0 2d       	mov	r31, r0
     b9c:	88 24       	eor	r8, r8
     b9e:	83 94       	inc	r8
     ba0:	91 2c       	mov	r9, r1
     ba2:	0f 2e       	mov	r0, r31
     ba4:	f7 e5       	ldi	r31, 0x57	; 87
     ba6:	cf 2e       	mov	r12, r31
     ba8:	f2 e0       	ldi	r31, 0x02	; 2
     baa:	df 2e       	mov	r13, r31
     bac:	f0 2d       	mov	r31, r0
     bae:	0f e8       	ldi	r16, 0x8F	; 143
     bb0:	12 e0       	ldi	r17, 0x02	; 2
     bb2:	0f 2e       	mov	r0, r31
     bb4:	fa e0       	ldi	r31, 0x0A	; 10
     bb6:	6f 2e       	mov	r6, r31
     bb8:	71 2c       	mov	r7, r1
     bba:	f0 2d       	mov	r31, r0
     bbc:	e0 91 2d 02 	lds	r30, 0x022D
     bc0:	f0 91 2e 02 	lds	r31, 0x022E
     bc4:	df 01       	movw	r26, r30
     bc6:	a3 5f       	subi	r26, 0xF3	; 243
     bc8:	be 4f       	sbci	r27, 0xFE	; 254
     bca:	1c 92       	st	X, r1
     bcc:	82 81       	ldd	r24, Z+2	; 0x02
     bce:	93 81       	ldd	r25, Z+3	; 0x03
     bd0:	90 93 1a 15 	sts	0x151A, r25
     bd4:	80 93 19 15 	sts	0x1519, r24
     bd8:	b4 da       	rcall	.-2712   	; 0x142 <CSwitch>
     bda:	82 e0       	ldi	r24, 0x02	; 2
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	76 dc       	rcall	.-1812   	; 0x4cc <disable_LED>
     be0:	85 e0       	ldi	r24, 0x05	; 5
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	73 dc       	rcall	.-1818   	; 0x4cc <disable_LED>
     be6:	86 e0       	ldi	r24, 0x06	; 6
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	70 dc       	rcall	.-1824   	; 0x4cc <disable_LED>
     bec:	80 91 2d 02 	lds	r24, 0x022D
     bf0:	90 91 2e 02 	lds	r25, 0x022E
     bf4:	9c 83       	std	Y+4, r25	; 0x04
     bf6:	8b 83       	std	Y+3, r24	; 0x03
     bf8:	80 91 19 15 	lds	r24, 0x1519
     bfc:	90 91 1a 15 	lds	r25, 0x151A
     c00:	ab 81       	ldd	r26, Y+3	; 0x03
     c02:	bc 81       	ldd	r27, Y+4	; 0x04
     c04:	13 96       	adiw	r26, 0x03	; 3
     c06:	9c 93       	st	X, r25
     c08:	8e 93       	st	-X, r24
     c0a:	12 97       	sbiw	r26, 0x02	; 2
     c0c:	fd 01       	movw	r30, r26
     c0e:	e3 5f       	subi	r30, 0xF3	; 243
     c10:	fe 4f       	sbci	r31, 0xFE	; 254
     c12:	e0 81       	ld	r30, Z
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	ed 30       	cpi	r30, 0x0D	; 13
     c18:	f1 05       	cpc	r31, r1
     c1a:	80 f6       	brcc	.-96     	; 0xbbc <OS_Start+0x9a>
     c1c:	88 27       	eor	r24, r24
     c1e:	ee 58       	subi	r30, 0x8E	; 142
     c20:	ff 4f       	sbci	r31, 0xFF	; 255
     c22:	8f 4f       	sbci	r24, 0xFF	; 255
     c24:	0c 94 1e 0f 	jmp	0x1e3c	; 0x1e3c <__tablejump2__>
     c28:	eb 81       	ldd	r30, Y+3	; 0x03
     c2a:	fc 81       	ldd	r31, Y+4	; 0x04
     c2c:	e4 5e       	subi	r30, 0xE4	; 228
     c2e:	fe 4f       	sbci	r31, 0xFE	; 254
     c30:	80 81       	ld	r24, Z
     c32:	91 81       	ldd	r25, Z+1	; 0x01
     c34:	ef e8       	ldi	r30, 0x8F	; 143
     c36:	f2 e0       	ldi	r31, 0x02	; 2
     c38:	20 81       	ld	r18, Z
     c3a:	31 81       	ldd	r19, Z+1	; 0x01
     c3c:	28 17       	cp	r18, r24
     c3e:	39 07       	cpc	r19, r25
     c40:	09 f0       	breq	.+2      	; 0xc44 <OS_Start+0x122>
     c42:	89 c0       	rjmp	.+274    	; 0xd56 <OS_Start+0x234>
     c44:	0d c3       	rjmp	.+1562   	; 0x1260 <OS_Start+0x73e>
     c46:	eb 81       	ldd	r30, Y+3	; 0x03
     c48:	fc 81       	ldd	r31, Y+4	; 0x04
     c4a:	e7 5f       	subi	r30, 0xF7	; 247
     c4c:	fe 4f       	sbci	r31, 0xFE	; 254
     c4e:	40 81       	ld	r20, Z
     c50:	51 81       	ldd	r21, Z+1	; 0x01
     c52:	eb 81       	ldd	r30, Y+3	; 0x03
     c54:	fc 81       	ldd	r31, Y+4	; 0x04
     c56:	eb 5f       	subi	r30, 0xFB	; 251
     c58:	fe 4f       	sbci	r31, 0xFE	; 254
     c5a:	60 81       	ld	r22, Z
     c5c:	71 81       	ldd	r23, Z+1	; 0x01
     c5e:	eb 81       	ldd	r30, Y+3	; 0x03
     c60:	fc 81       	ldd	r31, Y+4	; 0x04
     c62:	e5 5f       	subi	r30, 0xF5	; 245
     c64:	fe 4f       	sbci	r31, 0xFE	; 254
     c66:	80 81       	ld	r24, Z
     c68:	91 81       	ldd	r25, Z+1	; 0x01
     c6a:	52 dd       	rcall	.-1372   	; 0x710 <Kernel_Create_Task>
     c6c:	eb 81       	ldd	r30, Y+3	; 0x03
     c6e:	fc 81       	ldd	r31, Y+4	; 0x04
     c70:	e2 5f       	subi	r30, 0xF2	; 242
     c72:	fe 4f       	sbci	r31, 0xFE	; 254
     c74:	91 83       	std	Z+1, r25	; 0x01
     c76:	80 83       	st	Z, r24
     c78:	a1 cf       	rjmp	.-190    	; 0xbbc <OS_Start+0x9a>
     c7a:	eb 81       	ldd	r30, Y+3	; 0x03
     c7c:	fc 81       	ldd	r31, Y+4	; 0x04
     c7e:	ec 5f       	subi	r30, 0xFC	; 252
     c80:	fe 4f       	sbci	r31, 0xFE	; 254
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	80 83       	st	Z, r24
     c86:	4f e1       	ldi	r20, 0x1F	; 31
     c88:	52 e0       	ldi	r21, 0x02	; 2
     c8a:	69 ef       	ldi	r22, 0xF9	; 249
     c8c:	74 e1       	ldi	r23, 0x14	; 20
     c8e:	8d e2       	ldi	r24, 0x2D	; 45
     c90:	92 e0       	ldi	r25, 0x02	; 2
     c92:	b2 d5       	rcall	.+2916   	; 0x17f8 <enqueueRQ>
     c94:	f6 dd       	rcall	.-1044   	; 0x882 <Dispatch>
     c96:	92 cf       	rjmp	.-220    	; 0xbbc <OS_Start+0x9a>
     c98:	eb 81       	ldd	r30, Y+3	; 0x03
     c9a:	fc 81       	ldd	r31, Y+4	; 0x04
     c9c:	ec 5f       	subi	r30, 0xFC	; 252
     c9e:	fe 4f       	sbci	r31, 0xFE	; 254
     ca0:	83 e0       	ldi	r24, 0x03	; 3
     ca2:	80 83       	st	Z, r24
     ca4:	4d e1       	ldi	r20, 0x1D	; 29
     ca6:	52 e0       	ldi	r21, 0x02	; 2
     ca8:	69 ed       	ldi	r22, 0xD9	; 217
     caa:	74 e1       	ldi	r23, 0x14	; 20
     cac:	8d e2       	ldi	r24, 0x2D	; 45
     cae:	92 e0       	ldi	r25, 0x02	; 2
     cb0:	32 d5       	rcall	.+2660   	; 0x1716 <enqueueSQ>
     cb2:	e7 dd       	rcall	.-1074   	; 0x882 <Dispatch>
     cb4:	83 cf       	rjmp	.-250    	; 0xbbc <OS_Start+0x9a>
     cb6:	ab 81       	ldd	r26, Y+3	; 0x03
     cb8:	bc 81       	ldd	r27, Y+4	; 0x04
     cba:	2d 91       	ld	r18, X+
     cbc:	3c 91       	ld	r19, X
     cbe:	11 97       	sbiw	r26, 0x01	; 1
     cc0:	fd 01       	movw	r30, r26
     cc2:	e4 5e       	subi	r30, 0xE4	; 228
     cc4:	fe 4f       	sbci	r31, 0xFE	; 254
     cc6:	80 81       	ld	r24, Z
     cc8:	91 81       	ldd	r25, Z+1	; 0x01
     cca:	28 17       	cp	r18, r24
     ccc:	39 07       	cpc	r19, r25
     cce:	51 f0       	breq	.+20     	; 0xce4 <OS_Start+0x1c2>
     cd0:	80 81       	ld	r24, Z
     cd2:	91 81       	ldd	r25, Z+1	; 0x01
     cd4:	ef e8       	ldi	r30, 0x8F	; 143
     cd6:	f2 e0       	ldi	r31, 0x02	; 2
     cd8:	20 81       	ld	r18, Z
     cda:	31 81       	ldd	r19, Z+1	; 0x01
     cdc:	28 17       	cp	r18, r24
     cde:	39 07       	cpc	r19, r25
     ce0:	41 f4       	brne	.+16     	; 0xcf2 <OS_Start+0x1d0>
     ce2:	ad c2       	rjmp	.+1370   	; 0x123e <OS_Start+0x71c>
     ce4:	eb 81       	ldd	r30, Y+3	; 0x03
     ce6:	fc 81       	ldd	r31, Y+4	; 0x04
     ce8:	e6 5e       	subi	r30, 0xE6	; 230
     cea:	fe 4f       	sbci	r31, 0xFE	; 254
     cec:	91 82       	std	Z+1, r9	; 0x01
     cee:	80 82       	st	Z, r8
     cf0:	1a c0       	rjmp	.+52     	; 0xd26 <OS_Start+0x204>
     cf2:	ed ea       	ldi	r30, 0xAD	; 173
     cf4:	f3 e0       	ldi	r31, 0x03	; 3
     cf6:	c4 01       	movw	r24, r8
     cf8:	ab 81       	ldd	r26, Y+3	; 0x03
     cfa:	bc 81       	ldd	r27, Y+4	; 0x04
     cfc:	a4 5e       	subi	r26, 0xE4	; 228
     cfe:	be 4f       	sbci	r27, 0xFE	; 254
     d00:	6b 81       	ldd	r22, Y+3	; 0x03
     d02:	7c 81       	ldd	r23, Y+4	; 0x04
     d04:	2d 91       	ld	r18, X+
     d06:	3c 91       	ld	r19, X
     d08:	11 97       	sbiw	r26, 0x01	; 1
     d0a:	40 81       	ld	r20, Z
     d0c:	51 81       	ldd	r21, Z+1	; 0x01
     d0e:	42 17       	cp	r20, r18
     d10:	53 07       	cpc	r21, r19
     d12:	09 f4       	brne	.+2      	; 0xd16 <OS_Start+0x1f4>
     d14:	97 c2       	rjmp	.+1326   	; 0x1244 <OS_Start+0x722>
     d16:	01 96       	adiw	r24, 0x01	; 1
     d18:	e2 5e       	subi	r30, 0xE2	; 226
     d1a:	fe 4f       	sbci	r31, 0xFE	; 254
     d1c:	80 31       	cpi	r24, 0x10	; 16
     d1e:	91 05       	cpc	r25, r1
     d20:	89 f7       	brne	.-30     	; 0xd04 <OS_Start+0x1e2>
     d22:	7c 83       	std	Y+4, r23	; 0x04
     d24:	6b 83       	std	Y+3, r22	; 0x03
     d26:	eb 81       	ldd	r30, Y+3	; 0x03
     d28:	fc 81       	ldd	r31, Y+4	; 0x04
     d2a:	e6 5e       	subi	r30, 0xE6	; 230
     d2c:	fe 4f       	sbci	r31, 0xFE	; 254
     d2e:	80 81       	ld	r24, Z
     d30:	91 81       	ldd	r25, Z+1	; 0x01
     d32:	89 2b       	or	r24, r25
     d34:	09 f4       	brne	.+2      	; 0xd38 <OS_Start+0x216>
     d36:	42 cf       	rjmp	.-380    	; 0xbbc <OS_Start+0x9a>
     d38:	eb 81       	ldd	r30, Y+3	; 0x03
     d3a:	fc 81       	ldd	r31, Y+4	; 0x04
     d3c:	ec 5f       	subi	r30, 0xFC	; 252
     d3e:	fe 4f       	sbci	r31, 0xFE	; 254
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	80 83       	st	Z, r24
     d44:	4f e1       	ldi	r20, 0x1F	; 31
     d46:	52 e0       	ldi	r21, 0x02	; 2
     d48:	69 ef       	ldi	r22, 0xF9	; 249
     d4a:	74 e1       	ldi	r23, 0x14	; 20
     d4c:	8d e2       	ldi	r24, 0x2D	; 45
     d4e:	92 e0       	ldi	r25, 0x02	; 2
     d50:	53 d5       	rcall	.+2726   	; 0x17f8 <enqueueRQ>
     d52:	97 dd       	rcall	.-1234   	; 0x882 <Dispatch>
     d54:	33 cf       	rjmp	.-410    	; 0xbbc <OS_Start+0x9a>
     d56:	ed ea       	ldi	r30, 0xAD	; 173
     d58:	f3 e0       	ldi	r31, 0x03	; 3
     d5a:	c4 01       	movw	r24, r8
     d5c:	ab 81       	ldd	r26, Y+3	; 0x03
     d5e:	bc 81       	ldd	r27, Y+4	; 0x04
     d60:	a4 5e       	subi	r26, 0xE4	; 228
     d62:	be 4f       	sbci	r27, 0xFE	; 254
     d64:	6b 81       	ldd	r22, Y+3	; 0x03
     d66:	7c 81       	ldd	r23, Y+4	; 0x04
     d68:	2d 91       	ld	r18, X+
     d6a:	3c 91       	ld	r19, X
     d6c:	11 97       	sbiw	r26, 0x01	; 1
     d6e:	40 81       	ld	r20, Z
     d70:	51 81       	ldd	r21, Z+1	; 0x01
     d72:	42 17       	cp	r20, r18
     d74:	53 07       	cpc	r21, r19
     d76:	09 f4       	brne	.+2      	; 0xd7a <OS_Start+0x258>
     d78:	76 c2       	rjmp	.+1260   	; 0x1266 <OS_Start+0x744>
     d7a:	01 96       	adiw	r24, 0x01	; 1
     d7c:	e2 5e       	subi	r30, 0xE2	; 226
     d7e:	fe 4f       	sbci	r31, 0xFE	; 254
     d80:	80 31       	cpi	r24, 0x10	; 16
     d82:	91 05       	cpc	r25, r1
     d84:	89 f7       	brne	.-30     	; 0xd68 <OS_Start+0x246>
     d86:	1a cf       	rjmp	.-460    	; 0xbbc <OS_Start+0x9a>
     d88:	8a 9d       	mul	r24, r10
     d8a:	90 01       	movw	r18, r0
     d8c:	8b 9d       	mul	r24, r11
     d8e:	30 0d       	add	r19, r0
     d90:	9a 9d       	mul	r25, r10
     d92:	30 0d       	add	r19, r0
     d94:	11 24       	eor	r1, r1
     d96:	c9 01       	movw	r24, r18
     d98:	81 57       	subi	r24, 0x71	; 113
     d9a:	9d 4f       	sbci	r25, 0xFD	; 253
     d9c:	fc 01       	movw	r30, r24
     d9e:	e6 5e       	subi	r30, 0xE6	; 230
     da0:	fe 4f       	sbci	r31, 0xFE	; 254
     da2:	11 82       	std	Z+1, r1	; 0x01
     da4:	10 82       	st	Z, r1
     da6:	eb 81       	ldd	r30, Y+3	; 0x03
     da8:	fc 81       	ldd	r31, Y+4	; 0x04
     daa:	e9 5f       	subi	r30, 0xF9	; 249
     dac:	fe 4f       	sbci	r31, 0xFE	; 254
     dae:	20 81       	ld	r18, Z
     db0:	31 81       	ldd	r19, Z+1	; 0x01
     db2:	fc 01       	movw	r30, r24
     db4:	e9 5f       	subi	r30, 0xF9	; 249
     db6:	fe 4f       	sbci	r31, 0xFE	; 254
     db8:	80 81       	ld	r24, Z
     dba:	91 81       	ldd	r25, Z+1	; 0x01
     dbc:	82 17       	cp	r24, r18
     dbe:	93 07       	cpc	r25, r19
     dc0:	08 f0       	brcs	.+2      	; 0xdc4 <OS_Start+0x2a2>
     dc2:	fc ce       	rjmp	.-520    	; 0xbbc <OS_Start+0x9a>
     dc4:	eb 81       	ldd	r30, Y+3	; 0x03
     dc6:	fc 81       	ldd	r31, Y+4	; 0x04
     dc8:	ec 5f       	subi	r30, 0xFC	; 252
     dca:	fe 4f       	sbci	r31, 0xFE	; 254
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	80 83       	st	Z, r24
     dd0:	4f e1       	ldi	r20, 0x1F	; 31
     dd2:	52 e0       	ldi	r21, 0x02	; 2
     dd4:	69 ef       	ldi	r22, 0xF9	; 249
     dd6:	74 e1       	ldi	r23, 0x14	; 20
     dd8:	8d e2       	ldi	r24, 0x2D	; 45
     dda:	92 e0       	ldi	r25, 0x02	; 2
     ddc:	0d d5       	rcall	.+2586   	; 0x17f8 <enqueueRQ>
     dde:	51 dd       	rcall	.-1374   	; 0x882 <Dispatch>
     de0:	ed ce       	rjmp	.-550    	; 0xbbc <OS_Start+0x9a>
     de2:	eb 81       	ldd	r30, Y+3	; 0x03
     de4:	fc 81       	ldd	r31, Y+4	; 0x04
     de6:	e9 5f       	subi	r30, 0xF9	; 249
     de8:	fe 4f       	sbci	r31, 0xFE	; 254
     dea:	11 82       	std	Z+1, r1	; 0x01
     dec:	10 82       	st	Z, r1
     dee:	eb 81       	ldd	r30, Y+3	; 0x03
     df0:	fc 81       	ldd	r31, Y+4	; 0x04
     df2:	eb 5f       	subi	r30, 0xFB	; 251
     df4:	fe 4f       	sbci	r31, 0xFE	; 254
     df6:	11 82       	std	Z+1, r1	; 0x01
     df8:	10 82       	st	Z, r1
     dfa:	eb 81       	ldd	r30, Y+3	; 0x03
     dfc:	fc 81       	ldd	r31, Y+4	; 0x04
     dfe:	ec 5f       	subi	r30, 0xFC	; 252
     e00:	fe 4f       	sbci	r31, 0xFE	; 254
     e02:	86 e0       	ldi	r24, 0x06	; 6
     e04:	80 83       	st	Z, r24
     e06:	dc 82       	std	Y+4, r13	; 0x04
     e08:	cb 82       	std	Y+3, r12	; 0x03
     e0a:	e0 91 2d 02 	lds	r30, 0x022D
     e0e:	f0 91 2e 02 	lds	r31, 0x022E
     e12:	80 81       	ld	r24, Z
     e14:	91 81       	ldd	r25, Z+1	; 0x01
     e16:	ab 81       	ldd	r26, Y+3	; 0x03
     e18:	bc 81       	ldd	r27, Y+4	; 0x04
     e1a:	13 96       	adiw	r26, 0x03	; 3
     e1c:	2d 91       	ld	r18, X+
     e1e:	3c 91       	ld	r19, X
     e20:	14 97       	sbiw	r26, 0x04	; 4
     e22:	28 17       	cp	r18, r24
     e24:	39 07       	cpc	r19, r25
     e26:	39 f4       	brne	.+14     	; 0xe36 <OS_Start+0x314>
     e28:	8d 91       	ld	r24, X+
     e2a:	9c 91       	ld	r25, X
     e2c:	ec 5e       	subi	r30, 0xEC	; 236
     e2e:	fe 4f       	sbci	r31, 0xFE	; 254
     e30:	91 83       	std	Z+1, r25	; 0x01
     e32:	80 83       	st	Z, r24
     e34:	57 dd       	rcall	.-1362   	; 0x8e4 <Kernel_Unlock_Mutex>
     e36:	eb 81       	ldd	r30, Y+3	; 0x03
     e38:	fc 81       	ldd	r31, Y+4	; 0x04
     e3a:	37 96       	adiw	r30, 0x07	; 7
     e3c:	fc 83       	std	Y+4, r31	; 0x04
     e3e:	eb 83       	std	Y+3, r30	; 0x03
     e40:	e0 17       	cp	r30, r16
     e42:	f1 07       	cpc	r31, r17
     e44:	11 f7       	brne	.-60     	; 0xe0a <OS_Start+0x2e8>
     e46:	e0 91 2d 02 	lds	r30, 0x022D
     e4a:	f0 91 2e 02 	lds	r31, 0x022E
     e4e:	df 01       	movw	r26, r30
     e50:	ac 5f       	subi	r26, 0xFC	; 252
     e52:	be 4f       	sbci	r27, 0xFE	; 254
     e54:	1c 92       	st	X, r1
     e56:	52 96       	adiw	r26, 0x12	; 18
     e58:	11 96       	adiw	r26, 0x01	; 1
     e5a:	3c 92       	st	X, r3
     e5c:	2e 92       	st	-X, r2
     e5e:	1f 97       	sbiw	r26, 0x0f	; 15
     e60:	11 96       	adiw	r26, 0x01	; 1
     e62:	7c 92       	st	X, r7
     e64:	6e 92       	st	-X, r6
     e66:	12 97       	sbiw	r26, 0x02	; 2
     e68:	11 96       	adiw	r26, 0x01	; 1
     e6a:	7c 92       	st	X, r7
     e6c:	6e 92       	st	-X, r6
     e6e:	11 82       	std	Z+1, r1	; 0x01
     e70:	10 82       	st	Z, r1
     e72:	80 91 29 02 	lds	r24, 0x0229
     e76:	90 91 2a 02 	lds	r25, 0x022A
     e7a:	01 97       	sbiw	r24, 0x01	; 1
     e7c:	90 93 2a 02 	sts	0x022A, r25
     e80:	80 93 29 02 	sts	0x0229, r24
     e84:	fe dc       	rcall	.-1540   	; 0x882 <Dispatch>
     e86:	9a ce       	rjmp	.-716    	; 0xbbc <OS_Start+0x9a>
     e88:	80 91 25 02 	lds	r24, 0x0225
     e8c:	90 91 26 02 	lds	r25, 0x0226
     e90:	08 97       	sbiw	r24, 0x08	; 8
     e92:	41 f1       	breq	.+80     	; 0xee4 <OS_Start+0x3c2>
     e94:	d6 01       	movw	r26, r12
     e96:	12 96       	adiw	r26, 0x02	; 2
     e98:	8c 91       	ld	r24, X
     e9a:	88 23       	and	r24, r24
     e9c:	89 f0       	breq	.+34     	; 0xec0 <OS_Start+0x39e>
     e9e:	e0 e6       	ldi	r30, 0x60	; 96
     ea0:	f2 e0       	ldi	r31, 0x02	; 2
     ea2:	94 01       	movw	r18, r8
     ea4:	4b 81       	ldd	r20, Y+3	; 0x03
     ea6:	5c 81       	ldd	r21, Y+4	; 0x04
     ea8:	80 81       	ld	r24, Z
     eaa:	88 23       	and	r24, r24
     eac:	61 f0       	breq	.+24     	; 0xec6 <OS_Start+0x3a4>
     eae:	2f 5f       	subi	r18, 0xFF	; 255
     eb0:	3f 4f       	sbci	r19, 0xFF	; 255
     eb2:	37 96       	adiw	r30, 0x07	; 7
     eb4:	28 30       	cpi	r18, 0x08	; 8
     eb6:	31 05       	cpc	r19, r1
     eb8:	b9 f7       	brne	.-18     	; 0xea8 <OS_Start+0x386>
     eba:	5c 83       	std	Y+4, r21	; 0x04
     ebc:	4b 83       	std	Y+3, r20	; 0x03
     ebe:	05 c0       	rjmp	.+10     	; 0xeca <OS_Start+0x3a8>
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <OS_Start+0x3a8>
     ec6:	5c 83       	std	Y+4, r21	; 0x04
     ec8:	4b 83       	std	Y+3, r20	; 0x03
     eca:	c9 01       	movw	r24, r18
     ecc:	88 0f       	add	r24, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	82 1b       	sub	r24, r18
     eda:	93 0b       	sbc	r25, r19
     edc:	89 5a       	subi	r24, 0xA9	; 169
     ede:	9d 4f       	sbci	r25, 0xFD	; 253
     ee0:	47 dc       	rcall	.-1906   	; 0x770 <Kernel_Init_Mutex_At>
     ee2:	2c 01       	movw	r4, r24
     ee4:	eb 81       	ldd	r30, Y+3	; 0x03
     ee6:	fc 81       	ldd	r31, Y+4	; 0x04
     ee8:	e2 5f       	subi	r30, 0xF2	; 242
     eea:	fe 4f       	sbci	r31, 0xFE	; 254
     eec:	51 82       	std	Z+1, r5	; 0x01
     eee:	40 82       	st	Z, r4
     ef0:	65 ce       	rjmp	.-822    	; 0xbbc <OS_Start+0x9a>
     ef2:	eb 81       	ldd	r30, Y+3	; 0x03
     ef4:	fc 81       	ldd	r31, Y+4	; 0x04
     ef6:	ec 5e       	subi	r30, 0xEC	; 236
     ef8:	fe 4f       	sbci	r31, 0xFE	; 254
     efa:	40 81       	ld	r20, Z
     efc:	51 81       	ldd	r21, Z+1	; 0x01
     efe:	f6 01       	movw	r30, r12
     f00:	80 81       	ld	r24, Z
     f02:	91 81       	ldd	r25, Z+1	; 0x01
     f04:	48 17       	cp	r20, r24
     f06:	59 07       	cpc	r21, r25
     f08:	09 f4       	brne	.+2      	; 0xf0c <OS_Start+0x3ea>
     f0a:	bf c1       	rjmp	.+894    	; 0x128a <OS_Start+0x768>
     f0c:	c4 01       	movw	r24, r8
     f0e:	6b 81       	ldd	r22, Y+3	; 0x03
     f10:	7c 81       	ldd	r23, Y+4	; 0x04
     f12:	27 81       	ldd	r18, Z+7	; 0x07
     f14:	30 85       	ldd	r19, Z+8	; 0x08
     f16:	42 17       	cp	r20, r18
     f18:	53 07       	cpc	r21, r19
     f1a:	09 f4       	brne	.+2      	; 0xf1e <OS_Start+0x3fc>
     f1c:	b9 c1       	rjmp	.+882    	; 0x1290 <OS_Start+0x76e>
     f1e:	01 96       	adiw	r24, 0x01	; 1
     f20:	37 96       	adiw	r30, 0x07	; 7
     f22:	88 30       	cpi	r24, 0x08	; 8
     f24:	91 05       	cpc	r25, r1
     f26:	a9 f7       	brne	.-22     	; 0xf12 <OS_Start+0x3f0>
     f28:	49 ce       	rjmp	.-878    	; 0xbbc <OS_Start+0x9a>
     f2a:	fc 01       	movw	r30, r24
     f2c:	ee 0f       	add	r30, r30
     f2e:	ff 1f       	adc	r31, r31
     f30:	ee 0f       	add	r30, r30
     f32:	ff 1f       	adc	r31, r31
     f34:	ee 0f       	add	r30, r30
     f36:	ff 1f       	adc	r31, r31
     f38:	e8 1b       	sub	r30, r24
     f3a:	f9 0b       	sbc	r31, r25
     f3c:	e9 5a       	subi	r30, 0xA9	; 169
     f3e:	fd 4f       	sbci	r31, 0xFD	; 253
     f40:	82 e0       	ldi	r24, 0x02	; 2
     f42:	82 83       	std	Z+2, r24	; 0x02
     f44:	ab 81       	ldd	r26, Y+3	; 0x03
     f46:	bc 81       	ldd	r27, Y+4	; 0x04
     f48:	8d 91       	ld	r24, X+
     f4a:	9c 91       	ld	r25, X
     f4c:	94 83       	std	Z+4, r25	; 0x04
     f4e:	83 83       	std	Z+3, r24	; 0x03
     f50:	85 81       	ldd	r24, Z+5	; 0x05
     f52:	96 81       	ldd	r25, Z+6	; 0x06
     f54:	01 96       	adiw	r24, 0x01	; 1
     f56:	96 83       	std	Z+6, r25	; 0x06
     f58:	85 83       	std	Z+5, r24	; 0x05
     f5a:	30 ce       	rjmp	.-928    	; 0xbbc <OS_Start+0x9a>
     f5c:	fc 01       	movw	r30, r24
     f5e:	ee 0f       	add	r30, r30
     f60:	ff 1f       	adc	r31, r31
     f62:	ee 0f       	add	r30, r30
     f64:	ff 1f       	adc	r31, r31
     f66:	ee 0f       	add	r30, r30
     f68:	ff 1f       	adc	r31, r31
     f6a:	e8 1b       	sub	r30, r24
     f6c:	f9 0b       	sbc	r31, r25
     f6e:	e9 5a       	subi	r30, 0xA9	; 169
     f70:	fd 4f       	sbci	r31, 0xFD	; 253
     f72:	23 81       	ldd	r18, Z+3	; 0x03
     f74:	34 81       	ldd	r19, Z+4	; 0x04
     f76:	eb 81       	ldd	r30, Y+3	; 0x03
     f78:	fc 81       	ldd	r31, Y+4	; 0x04
     f7a:	40 81       	ld	r20, Z
     f7c:	51 81       	ldd	r21, Z+1	; 0x01
     f7e:	24 17       	cp	r18, r20
     f80:	35 07       	cpc	r19, r21
     f82:	89 f4       	brne	.+34     	; 0xfa6 <OS_Start+0x484>
     f84:	fc 01       	movw	r30, r24
     f86:	ee 0f       	add	r30, r30
     f88:	ff 1f       	adc	r31, r31
     f8a:	ee 0f       	add	r30, r30
     f8c:	ff 1f       	adc	r31, r31
     f8e:	ee 0f       	add	r30, r30
     f90:	ff 1f       	adc	r31, r31
     f92:	e8 1b       	sub	r30, r24
     f94:	f9 0b       	sbc	r31, r25
     f96:	e9 5a       	subi	r30, 0xA9	; 169
     f98:	fd 4f       	sbci	r31, 0xFD	; 253
     f9a:	85 81       	ldd	r24, Z+5	; 0x05
     f9c:	96 81       	ldd	r25, Z+6	; 0x06
     f9e:	01 96       	adiw	r24, 0x01	; 1
     fa0:	96 83       	std	Z+6, r25	; 0x06
     fa2:	85 83       	std	Z+5, r24	; 0x05
     fa4:	0b ce       	rjmp	.-1002   	; 0xbbc <OS_Start+0x9a>
     fa6:	ef e8       	ldi	r30, 0x8F	; 143
     fa8:	f2 e0       	ldi	r31, 0x02	; 2
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	6b 81       	ldd	r22, Y+3	; 0x03
     fb0:	7c 81       	ldd	r23, Y+4	; 0x04
     fb2:	40 81       	ld	r20, Z
     fb4:	51 81       	ldd	r21, Z+1	; 0x01
     fb6:	24 17       	cp	r18, r20
     fb8:	35 07       	cpc	r19, r21
     fba:	19 f4       	brne	.+6      	; 0xfc2 <OS_Start+0x4a0>
     fbc:	21 15       	cp	r18, r1
     fbe:	31 05       	cpc	r19, r1
     fc0:	31 f4       	brne	.+12     	; 0xfce <OS_Start+0x4ac>
     fc2:	01 96       	adiw	r24, 0x01	; 1
     fc4:	e2 5e       	subi	r30, 0xE2	; 226
     fc6:	fe 4f       	sbci	r31, 0xFE	; 254
     fc8:	80 31       	cpi	r24, 0x10	; 16
     fca:	91 05       	cpc	r25, r1
     fcc:	91 f7       	brne	.-28     	; 0xfb2 <OS_Start+0x490>
     fce:	7c 83       	std	Y+4, r23	; 0x04
     fd0:	6b 83       	std	Y+3, r22	; 0x03
     fd2:	fb 01       	movw	r30, r22
     fd4:	e9 5f       	subi	r30, 0xF9	; 249
     fd6:	fe 4f       	sbci	r31, 0xFE	; 254
     fd8:	20 81       	ld	r18, Z
     fda:	31 81       	ldd	r19, Z+1	; 0x01
     fdc:	8a 9d       	mul	r24, r10
     fde:	f0 01       	movw	r30, r0
     fe0:	8b 9d       	mul	r24, r11
     fe2:	f0 0d       	add	r31, r0
     fe4:	9a 9d       	mul	r25, r10
     fe6:	f0 0d       	add	r31, r0
     fe8:	11 24       	eor	r1, r1
     fea:	ea 56       	subi	r30, 0x6A	; 106
     fec:	fc 4f       	sbci	r31, 0xFC	; 252
     fee:	40 81       	ld	r20, Z
     ff0:	51 81       	ldd	r21, Z+1	; 0x01
     ff2:	24 17       	cp	r18, r20
     ff4:	35 07       	cpc	r19, r21
     ff6:	80 f4       	brcc	.+32     	; 0x1018 <OS_Start+0x4f6>
     ff8:	fb 01       	movw	r30, r22
     ffa:	e9 5f       	subi	r30, 0xF9	; 249
     ffc:	fe 4f       	sbci	r31, 0xFE	; 254
     ffe:	20 81       	ld	r18, Z
    1000:	31 81       	ldd	r19, Z+1	; 0x01
    1002:	8a 9d       	mul	r24, r10
    1004:	f0 01       	movw	r30, r0
    1006:	8b 9d       	mul	r24, r11
    1008:	f0 0d       	add	r31, r0
    100a:	9a 9d       	mul	r25, r10
    100c:	f0 0d       	add	r31, r0
    100e:	11 24       	eor	r1, r1
    1010:	ea 56       	subi	r30, 0x6A	; 106
    1012:	fc 4f       	sbci	r31, 0xFC	; 252
    1014:	31 83       	std	Z+1, r19	; 0x01
    1016:	20 83       	st	Z, r18
    1018:	eb 81       	ldd	r30, Y+3	; 0x03
    101a:	fc 81       	ldd	r31, Y+4	; 0x04
    101c:	ec 5f       	subi	r30, 0xFC	; 252
    101e:	fe 4f       	sbci	r31, 0xFE	; 254
    1020:	84 e0       	ldi	r24, 0x04	; 4
    1022:	80 83       	st	Z, r24
    1024:	4b e1       	ldi	r20, 0x1B	; 27
    1026:	52 e0       	ldi	r21, 0x02	; 2
    1028:	6b e1       	ldi	r22, 0x1B	; 27
    102a:	75 e1       	ldi	r23, 0x15	; 21
    102c:	8d e2       	ldi	r24, 0x2D	; 45
    102e:	92 e0       	ldi	r25, 0x02	; 2
    1030:	42 d3       	rcall	.+1668   	; 0x16b6 <enqueueWQ>
    1032:	27 dc       	rcall	.-1970   	; 0x882 <Dispatch>
    1034:	c3 cd       	rjmp	.-1146   	; 0xbbc <OS_Start+0x9a>
    1036:	56 dc       	rcall	.-1876   	; 0x8e4 <Kernel_Unlock_Mutex>
    1038:	c1 cd       	rjmp	.-1150   	; 0xbbc <OS_Start+0x9a>
    103a:	80 91 23 02 	lds	r24, 0x0223
    103e:	90 91 24 02 	lds	r25, 0x0224
    1042:	08 97       	sbiw	r24, 0x08	; 8
    1044:	31 f1       	breq	.+76     	; 0x1092 <OS_Start+0x570>
    1046:	d7 01       	movw	r26, r14
    1048:	12 96       	adiw	r26, 0x02	; 2
    104a:	8c 91       	ld	r24, X
    104c:	88 23       	and	r24, r24
    104e:	81 f0       	breq	.+32     	; 0x1070 <OS_Start+0x54e>
    1050:	e6 e3       	ldi	r30, 0x36	; 54
    1052:	f2 e0       	ldi	r31, 0x02	; 2
    1054:	c4 01       	movw	r24, r8
    1056:	4b 81       	ldd	r20, Y+3	; 0x03
    1058:	5c 81       	ldd	r21, Y+4	; 0x04
    105a:	20 81       	ld	r18, Z
    105c:	22 23       	and	r18, r18
    105e:	59 f0       	breq	.+22     	; 0x1076 <OS_Start+0x554>
    1060:	01 96       	adiw	r24, 0x01	; 1
    1062:	35 96       	adiw	r30, 0x05	; 5
    1064:	88 30       	cpi	r24, 0x08	; 8
    1066:	91 05       	cpc	r25, r1
    1068:	c1 f7       	brne	.-16     	; 0x105a <OS_Start+0x538>
    106a:	5c 83       	std	Y+4, r21	; 0x04
    106c:	4b 83       	std	Y+3, r20	; 0x03
    106e:	05 c0       	rjmp	.+10     	; 0x107a <OS_Start+0x558>
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	02 c0       	rjmp	.+4      	; 0x107a <OS_Start+0x558>
    1076:	5c 83       	std	Y+4, r21	; 0x04
    1078:	4b 83       	std	Y+3, r20	; 0x03
    107a:	9c 01       	movw	r18, r24
    107c:	22 0f       	add	r18, r18
    107e:	33 1f       	adc	r19, r19
    1080:	22 0f       	add	r18, r18
    1082:	33 1f       	adc	r19, r19
    1084:	82 0f       	add	r24, r18
    1086:	93 1f       	adc	r25, r19
    1088:	81 5d       	subi	r24, 0xD1	; 209
    108a:	9d 4f       	sbci	r25, 0xFD	; 253
    108c:	86 db       	rcall	.-2292   	; 0x79a <Kernel_Init_Event_At>
    108e:	9a 83       	std	Y+2, r25	; 0x02
    1090:	89 83       	std	Y+1, r24	; 0x01
    1092:	ab 81       	ldd	r26, Y+3	; 0x03
    1094:	bc 81       	ldd	r27, Y+4	; 0x04
    1096:	a2 5f       	subi	r26, 0xF2	; 242
    1098:	be 4f       	sbci	r27, 0xFE	; 254
    109a:	e9 81       	ldd	r30, Y+1	; 0x01
    109c:	fa 81       	ldd	r31, Y+2	; 0x02
    109e:	11 96       	adiw	r26, 0x01	; 1
    10a0:	fc 93       	st	X, r31
    10a2:	ee 93       	st	-X, r30
    10a4:	8b cd       	rjmp	.-1258   	; 0xbbc <OS_Start+0x9a>
    10a6:	eb 81       	ldd	r30, Y+3	; 0x03
    10a8:	fc 81       	ldd	r31, Y+4	; 0x04
    10aa:	e8 5e       	subi	r30, 0xE8	; 232
    10ac:	fe 4f       	sbci	r31, 0xFE	; 254
    10ae:	40 81       	ld	r20, Z
    10b0:	51 81       	ldd	r21, Z+1	; 0x01
    10b2:	d7 01       	movw	r26, r14
    10b4:	8d 91       	ld	r24, X+
    10b6:	9c 91       	ld	r25, X
    10b8:	48 17       	cp	r20, r24
    10ba:	59 07       	cpc	r21, r25
    10bc:	09 f4       	brne	.+2      	; 0x10c0 <OS_Start+0x59e>
    10be:	fa c0       	rjmp	.+500    	; 0x12b4 <OS_Start+0x792>
    10c0:	f7 01       	movw	r30, r14
    10c2:	c4 01       	movw	r24, r8
    10c4:	6b 81       	ldd	r22, Y+3	; 0x03
    10c6:	7c 81       	ldd	r23, Y+4	; 0x04
    10c8:	25 81       	ldd	r18, Z+5	; 0x05
    10ca:	36 81       	ldd	r19, Z+6	; 0x06
    10cc:	42 17       	cp	r20, r18
    10ce:	53 07       	cpc	r21, r19
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <OS_Start+0x5b2>
    10d2:	f3 c0       	rjmp	.+486    	; 0x12ba <OS_Start+0x798>
    10d4:	01 96       	adiw	r24, 0x01	; 1
    10d6:	35 96       	adiw	r30, 0x05	; 5
    10d8:	88 30       	cpi	r24, 0x08	; 8
    10da:	91 05       	cpc	r25, r1
    10dc:	a9 f7       	brne	.-22     	; 0x10c8 <OS_Start+0x5a6>
    10de:	3d c0       	rjmp	.+122    	; 0x115a <OS_Start+0x638>
    10e0:	fc 01       	movw	r30, r24
    10e2:	ee 0f       	add	r30, r30
    10e4:	ff 1f       	adc	r31, r31
    10e6:	ee 0f       	add	r30, r30
    10e8:	ff 1f       	adc	r31, r31
    10ea:	e8 0f       	add	r30, r24
    10ec:	f9 1f       	adc	r31, r25
    10ee:	e1 5d       	subi	r30, 0xD1	; 209
    10f0:	fd 4f       	sbci	r31, 0xFD	; 253
    10f2:	22 81       	ldd	r18, Z+2	; 0x02
    10f4:	22 30       	cpi	r18, 0x02	; 2
    10f6:	69 f4       	brne	.+26     	; 0x1112 <OS_Start+0x5f0>
    10f8:	fc 01       	movw	r30, r24
    10fa:	ee 0f       	add	r30, r30
    10fc:	ff 1f       	adc	r31, r31
    10fe:	ee 0f       	add	r30, r30
    1100:	ff 1f       	adc	r31, r31
    1102:	8e 0f       	add	r24, r30
    1104:	9f 1f       	adc	r25, r31
    1106:	fc 01       	movw	r30, r24
    1108:	e1 5d       	subi	r30, 0xD1	; 209
    110a:	fd 4f       	sbci	r31, 0xFD	; 253
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	82 83       	std	Z+2, r24	; 0x02
    1110:	24 c0       	rjmp	.+72     	; 0x115a <OS_Start+0x638>
    1112:	eb 81       	ldd	r30, Y+3	; 0x03
    1114:	fc 81       	ldd	r31, Y+4	; 0x04
    1116:	ea 5e       	subi	r30, 0xEA	; 234
    1118:	fe 4f       	sbci	r31, 0xFE	; 254
    111a:	51 83       	std	Z+1, r21	; 0x01
    111c:	40 83       	st	Z, r20
    111e:	eb 81       	ldd	r30, Y+3	; 0x03
    1120:	fc 81       	ldd	r31, Y+4	; 0x04
    1122:	20 81       	ld	r18, Z
    1124:	31 81       	ldd	r19, Z+1	; 0x01
    1126:	fc 01       	movw	r30, r24
    1128:	ee 0f       	add	r30, r30
    112a:	ff 1f       	adc	r31, r31
    112c:	ee 0f       	add	r30, r30
    112e:	ff 1f       	adc	r31, r31
    1130:	8e 0f       	add	r24, r30
    1132:	9f 1f       	adc	r25, r31
    1134:	fc 01       	movw	r30, r24
    1136:	e1 5d       	subi	r30, 0xD1	; 209
    1138:	fd 4f       	sbci	r31, 0xFD	; 253
    113a:	34 83       	std	Z+4, r19	; 0x04
    113c:	23 83       	std	Z+3, r18	; 0x03
    113e:	eb 81       	ldd	r30, Y+3	; 0x03
    1140:	fc 81       	ldd	r31, Y+4	; 0x04
    1142:	ec 5f       	subi	r30, 0xFC	; 252
    1144:	fe 4f       	sbci	r31, 0xFE	; 254
    1146:	85 e0       	ldi	r24, 0x05	; 5
    1148:	80 83       	st	Z, r24
    114a:	4f e1       	ldi	r20, 0x1F	; 31
    114c:	52 e0       	ldi	r21, 0x02	; 2
    114e:	69 ef       	ldi	r22, 0xF9	; 249
    1150:	74 e1       	ldi	r23, 0x14	; 20
    1152:	8d e2       	ldi	r24, 0x2D	; 45
    1154:	92 e0       	ldi	r25, 0x02	; 2
    1156:	50 d3       	rcall	.+1696   	; 0x17f8 <enqueueRQ>
    1158:	94 db       	rcall	.-2264   	; 0x882 <Dispatch>
    115a:	e0 91 2d 02 	lds	r30, 0x022D
    115e:	f0 91 2e 02 	lds	r31, 0x022E
    1162:	80 81       	ld	r24, Z
    1164:	91 81       	ldd	r25, Z+1	; 0x01
    1166:	02 97       	sbiw	r24, 0x02	; 2
    1168:	20 f4       	brcc	.+8      	; 0x1172 <OS_Start+0x650>
    116a:	82 e0       	ldi	r24, 0x02	; 2
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	a1 d9       	rcall	.-3262   	; 0x4b2 <enable_LED>
    1170:	25 cd       	rjmp	.-1462   	; 0xbbc <OS_Start+0x9a>
    1172:	80 81       	ld	r24, Z
    1174:	91 81       	ldd	r25, Z+1	; 0x01
    1176:	02 97       	sbiw	r24, 0x02	; 2
    1178:	21 f4       	brne	.+8      	; 0x1182 <OS_Start+0x660>
    117a:	85 e0       	ldi	r24, 0x05	; 5
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	99 d9       	rcall	.-3278   	; 0x4b2 <enable_LED>
    1180:	1d cd       	rjmp	.-1478   	; 0xbbc <OS_Start+0x9a>
    1182:	80 81       	ld	r24, Z
    1184:	91 81       	ldd	r25, Z+1	; 0x01
    1186:	03 97       	sbiw	r24, 0x03	; 3
    1188:	09 f0       	breq	.+2      	; 0x118c <OS_Start+0x66a>
    118a:	18 cd       	rjmp	.-1488   	; 0xbbc <OS_Start+0x9a>
    118c:	86 e0       	ldi	r24, 0x06	; 6
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	90 d9       	rcall	.-3296   	; 0x4b2 <enable_LED>
    1192:	14 cd       	rjmp	.-1496   	; 0xbbc <OS_Start+0x9a>
    1194:	eb 81       	ldd	r30, Y+3	; 0x03
    1196:	fc 81       	ldd	r31, Y+4	; 0x04
    1198:	e8 5e       	subi	r30, 0xE8	; 232
    119a:	fe 4f       	sbci	r31, 0xFE	; 254
    119c:	40 81       	ld	r20, Z
    119e:	51 81       	ldd	r21, Z+1	; 0x01
    11a0:	d7 01       	movw	r26, r14
    11a2:	8d 91       	ld	r24, X+
    11a4:	9c 91       	ld	r25, X
    11a6:	48 17       	cp	r20, r24
    11a8:	59 07       	cpc	r21, r25
    11aa:	09 f4       	brne	.+2      	; 0x11ae <OS_Start+0x68c>
    11ac:	97 c0       	rjmp	.+302    	; 0x12dc <OS_Start+0x7ba>
    11ae:	f7 01       	movw	r30, r14
    11b0:	c4 01       	movw	r24, r8
    11b2:	6b 81       	ldd	r22, Y+3	; 0x03
    11b4:	7c 81       	ldd	r23, Y+4	; 0x04
    11b6:	25 81       	ldd	r18, Z+5	; 0x05
    11b8:	36 81       	ldd	r19, Z+6	; 0x06
    11ba:	42 17       	cp	r20, r18
    11bc:	53 07       	cpc	r21, r19
    11be:	09 f4       	brne	.+2      	; 0x11c2 <OS_Start+0x6a0>
    11c0:	90 c0       	rjmp	.+288    	; 0x12e2 <OS_Start+0x7c0>
    11c2:	01 96       	adiw	r24, 0x01	; 1
    11c4:	35 96       	adiw	r30, 0x05	; 5
    11c6:	88 30       	cpi	r24, 0x08	; 8
    11c8:	91 05       	cpc	r25, r1
    11ca:	a9 f7       	brne	.-22     	; 0x11b6 <OS_Start+0x694>
    11cc:	f7 cc       	rjmp	.-1554   	; 0xbbc <OS_Start+0x9a>
    11ce:	80 81       	ld	r24, Z
    11d0:	91 81       	ldd	r25, Z+1	; 0x01
    11d2:	48 17       	cp	r20, r24
    11d4:	59 07       	cpc	r21, r25
    11d6:	09 f4       	brne	.+2      	; 0x11da <OS_Start+0x6b8>
    11d8:	97 c0       	rjmp	.+302    	; 0x1308 <OS_Start+0x7e6>
    11da:	2f 5f       	subi	r18, 0xFF	; 255
    11dc:	3f 4f       	sbci	r19, 0xFF	; 255
    11de:	e2 5e       	subi	r30, 0xE2	; 226
    11e0:	fe 4f       	sbci	r31, 0xFE	; 254
    11e2:	20 31       	cpi	r18, 0x10	; 16
    11e4:	31 05       	cpc	r19, r1
    11e6:	99 f7       	brne	.-26     	; 0x11ce <OS_Start+0x6ac>
    11e8:	cb 01       	movw	r24, r22
    11ea:	fb 01       	movw	r30, r22
    11ec:	ee 0f       	add	r30, r30
    11ee:	ff 1f       	adc	r31, r31
    11f0:	ee 0f       	add	r30, r30
    11f2:	ff 1f       	adc	r31, r31
    11f4:	8e 0f       	add	r24, r30
    11f6:	9f 1f       	adc	r25, r31
    11f8:	fc 01       	movw	r30, r24
    11fa:	e1 5d       	subi	r30, 0xD1	; 209
    11fc:	fd 4f       	sbci	r31, 0xFD	; 253
    11fe:	82 e0       	ldi	r24, 0x02	; 2
    1200:	82 83       	std	Z+2, r24	; 0x02
    1202:	dc cc       	rjmp	.-1608   	; 0xbbc <OS_Start+0x9a>
    1204:	2a 9d       	mul	r18, r10
    1206:	f0 01       	movw	r30, r0
    1208:	2b 9d       	mul	r18, r11
    120a:	f0 0d       	add	r31, r0
    120c:	3a 9d       	mul	r19, r10
    120e:	f0 0d       	add	r31, r0
    1210:	11 24       	eor	r1, r1
    1212:	e7 55       	subi	r30, 0x57	; 87
    1214:	fc 4f       	sbci	r31, 0xFC	; 252
    1216:	80 81       	ld	r24, Z
    1218:	91 81       	ldd	r25, Z+1	; 0x01
    121a:	89 2b       	or	r24, r25
    121c:	09 f0       	breq	.+2      	; 0x1220 <OS_Start+0x6fe>
    121e:	ce cc       	rjmp	.-1636   	; 0xbbc <OS_Start+0x9a>
    1220:	eb 81       	ldd	r30, Y+3	; 0x03
    1222:	fc 81       	ldd	r31, Y+4	; 0x04
    1224:	ec 5f       	subi	r30, 0xFC	; 252
    1226:	fe 4f       	sbci	r31, 0xFE	; 254
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	80 83       	st	Z, r24
    122c:	4f e1       	ldi	r20, 0x1F	; 31
    122e:	52 e0       	ldi	r21, 0x02	; 2
    1230:	69 ef       	ldi	r22, 0xF9	; 249
    1232:	74 e1       	ldi	r23, 0x14	; 20
    1234:	8d e2       	ldi	r24, 0x2D	; 45
    1236:	92 e0       	ldi	r25, 0x02	; 2
    1238:	df d2       	rcall	.+1470   	; 0x17f8 <enqueueRQ>
    123a:	23 db       	rcall	.-2490   	; 0x882 <Dispatch>
    123c:	bf cc       	rjmp	.-1666   	; 0xbbc <OS_Start+0x9a>
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <OS_Start+0x726>
    1244:	7c 83       	std	Y+4, r23	; 0x04
    1246:	6b 83       	std	Y+3, r22	; 0x03
    1248:	8a 9d       	mul	r24, r10
    124a:	f0 01       	movw	r30, r0
    124c:	8b 9d       	mul	r24, r11
    124e:	f0 0d       	add	r31, r0
    1250:	9a 9d       	mul	r25, r10
    1252:	f0 0d       	add	r31, r0
    1254:	11 24       	eor	r1, r1
    1256:	e7 55       	subi	r30, 0x57	; 87
    1258:	fc 4f       	sbci	r31, 0xFC	; 252
    125a:	91 82       	std	Z+1, r9	; 0x01
    125c:	80 82       	st	Z, r8
    125e:	63 cd       	rjmp	.-1338   	; 0xd26 <OS_Start+0x204>
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	02 c0       	rjmp	.+4      	; 0x126a <OS_Start+0x748>
    1266:	7c 83       	std	Y+4, r23	; 0x04
    1268:	6b 83       	std	Y+3, r22	; 0x03
    126a:	8a 9d       	mul	r24, r10
    126c:	f0 01       	movw	r30, r0
    126e:	8b 9d       	mul	r24, r11
    1270:	f0 0d       	add	r31, r0
    1272:	9a 9d       	mul	r25, r10
    1274:	f0 0d       	add	r31, r0
    1276:	11 24       	eor	r1, r1
    1278:	e7 55       	subi	r30, 0x57	; 87
    127a:	fc 4f       	sbci	r31, 0xFC	; 252
    127c:	20 81       	ld	r18, Z
    127e:	31 81       	ldd	r19, Z+1	; 0x01
    1280:	21 30       	cpi	r18, 0x01	; 1
    1282:	31 05       	cpc	r19, r1
    1284:	09 f0       	breq	.+2      	; 0x1288 <OS_Start+0x766>
    1286:	9a cc       	rjmp	.-1740   	; 0xbbc <OS_Start+0x9a>
    1288:	7f cd       	rjmp	.-1282   	; 0xd88 <OS_Start+0x266>
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <OS_Start+0x772>
    1290:	7c 83       	std	Y+4, r23	; 0x04
    1292:	6b 83       	std	Y+3, r22	; 0x03
    1294:	fc 01       	movw	r30, r24
    1296:	ee 0f       	add	r30, r30
    1298:	ff 1f       	adc	r31, r31
    129a:	ee 0f       	add	r30, r30
    129c:	ff 1f       	adc	r31, r31
    129e:	ee 0f       	add	r30, r30
    12a0:	ff 1f       	adc	r31, r31
    12a2:	e8 1b       	sub	r30, r24
    12a4:	f9 0b       	sbc	r31, r25
    12a6:	e9 5a       	subi	r30, 0xA9	; 169
    12a8:	fd 4f       	sbci	r31, 0xFD	; 253
    12aa:	22 81       	ldd	r18, Z+2	; 0x02
    12ac:	21 30       	cpi	r18, 0x01	; 1
    12ae:	09 f0       	breq	.+2      	; 0x12b2 <OS_Start+0x790>
    12b0:	55 ce       	rjmp	.-854    	; 0xf5c <OS_Start+0x43a>
    12b2:	3b ce       	rjmp	.-906    	; 0xf2a <OS_Start+0x408>
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <OS_Start+0x79c>
    12ba:	7c 83       	std	Y+4, r23	; 0x04
    12bc:	6b 83       	std	Y+3, r22	; 0x03
    12be:	fc 01       	movw	r30, r24
    12c0:	ee 0f       	add	r30, r30
    12c2:	ff 1f       	adc	r31, r31
    12c4:	ee 0f       	add	r30, r30
    12c6:	ff 1f       	adc	r31, r31
    12c8:	e8 0f       	add	r30, r24
    12ca:	f9 1f       	adc	r31, r25
    12cc:	e1 5d       	subi	r30, 0xD1	; 209
    12ce:	fd 4f       	sbci	r31, 0xFD	; 253
    12d0:	23 81       	ldd	r18, Z+3	; 0x03
    12d2:	34 81       	ldd	r19, Z+4	; 0x04
    12d4:	23 2b       	or	r18, r19
    12d6:	09 f0       	breq	.+2      	; 0x12da <OS_Start+0x7b8>
    12d8:	40 cf       	rjmp	.-384    	; 0x115a <OS_Start+0x638>
    12da:	02 cf       	rjmp	.-508    	; 0x10e0 <OS_Start+0x5be>
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <OS_Start+0x7c4>
    12e2:	7c 83       	std	Y+4, r23	; 0x04
    12e4:	6b 83       	std	Y+3, r22	; 0x03
    12e6:	e5 ea       	ldi	r30, 0xA5	; 165
    12e8:	f3 e0       	ldi	r31, 0x03	; 3
    12ea:	20 81       	ld	r18, Z
    12ec:	31 81       	ldd	r19, Z+1	; 0x01
    12ee:	42 17       	cp	r20, r18
    12f0:	53 07       	cpc	r21, r19
    12f2:	39 f0       	breq	.+14     	; 0x1302 <OS_Start+0x7e0>
    12f4:	e3 ec       	ldi	r30, 0xC3	; 195
    12f6:	f4 e0       	ldi	r31, 0x04	; 4
    12f8:	94 01       	movw	r18, r8
    12fa:	ab 81       	ldd	r26, Y+3	; 0x03
    12fc:	bc 81       	ldd	r27, Y+4	; 0x04
    12fe:	bc 01       	movw	r22, r24
    1300:	66 cf       	rjmp	.-308    	; 0x11ce <OS_Start+0x6ac>
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	03 c0       	rjmp	.+6      	; 0x130e <OS_Start+0x7ec>
    1308:	bc 83       	std	Y+4, r27	; 0x04
    130a:	ab 83       	std	Y+3, r26	; 0x03
    130c:	cb 01       	movw	r24, r22
    130e:	2a 9d       	mul	r18, r10
    1310:	a0 01       	movw	r20, r0
    1312:	2b 9d       	mul	r18, r11
    1314:	50 0d       	add	r21, r0
    1316:	3a 9d       	mul	r19, r10
    1318:	50 0d       	add	r21, r0
    131a:	11 24       	eor	r1, r1
    131c:	41 57       	subi	r20, 0x71	; 113
    131e:	5d 4f       	sbci	r21, 0xFD	; 253
    1320:	fa 01       	movw	r30, r20
    1322:	ec 5f       	subi	r30, 0xFC	; 252
    1324:	fe 4f       	sbci	r31, 0xFE	; 254
    1326:	61 e0       	ldi	r22, 0x01	; 1
    1328:	60 83       	st	Z, r22
    132a:	72 96       	adiw	r30, 0x12	; 18
    132c:	31 82       	std	Z+1, r3	; 0x01
    132e:	20 82       	st	Z, r2
    1330:	fc 01       	movw	r30, r24
    1332:	ee 0f       	add	r30, r30
    1334:	ff 1f       	adc	r31, r31
    1336:	ee 0f       	add	r30, r30
    1338:	ff 1f       	adc	r31, r31
    133a:	8e 0f       	add	r24, r30
    133c:	9f 1f       	adc	r25, r31
    133e:	fc 01       	movw	r30, r24
    1340:	e1 5d       	subi	r30, 0xD1	; 209
    1342:	fd 4f       	sbci	r31, 0xFD	; 253
    1344:	14 82       	std	Z+4, r1	; 0x04
    1346:	13 82       	std	Z+3, r1	; 0x03
    1348:	eb 81       	ldd	r30, Y+3	; 0x03
    134a:	fc 81       	ldd	r31, Y+4	; 0x04
    134c:	e9 5f       	subi	r30, 0xF9	; 249
    134e:	fe 4f       	sbci	r31, 0xFE	; 254
    1350:	80 81       	ld	r24, Z
    1352:	91 81       	ldd	r25, Z+1	; 0x01
    1354:	fa 01       	movw	r30, r20
    1356:	e9 5f       	subi	r30, 0xF9	; 249
    1358:	fe 4f       	sbci	r31, 0xFE	; 254
    135a:	40 81       	ld	r20, Z
    135c:	51 81       	ldd	r21, Z+1	; 0x01
    135e:	48 17       	cp	r20, r24
    1360:	59 07       	cpc	r21, r25
    1362:	08 f4       	brcc	.+2      	; 0x1366 <OS_Start+0x844>
    1364:	4f cf       	rjmp	.-354    	; 0x1204 <OS_Start+0x6e2>
    1366:	2a cc       	rjmp	.-1964   	; 0xbbc <OS_Start+0x9a>
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	1f 91       	pop	r17
    1376:	0f 91       	pop	r16
    1378:	ff 90       	pop	r15
    137a:	ef 90       	pop	r14
    137c:	df 90       	pop	r13
    137e:	cf 90       	pop	r12
    1380:	bf 90       	pop	r11
    1382:	af 90       	pop	r10
    1384:	9f 90       	pop	r9
    1386:	8f 90       	pop	r8
    1388:	7f 90       	pop	r7
    138a:	6f 90       	pop	r6
    138c:	5f 90       	pop	r5
    138e:	4f 90       	pop	r4
    1390:	3f 90       	pop	r3
    1392:	2f 90       	pop	r2
    1394:	08 95       	ret

00001396 <Mutex_Init>:
    1396:	80 91 2b 02 	lds	r24, 0x022B
    139a:	90 91 2c 02 	lds	r25, 0x022C
    139e:	89 2b       	or	r24, r25
    13a0:	a1 f0       	breq	.+40     	; 0x13ca <Mutex_Init+0x34>
    13a2:	f8 94       	cli
    13a4:	e0 91 2d 02 	lds	r30, 0x022D
    13a8:	f0 91 2e 02 	lds	r31, 0x022E
    13ac:	e3 5f       	subi	r30, 0xF3	; 243
    13ae:	fe 4f       	sbci	r31, 0xFE	; 254
    13b0:	87 e0       	ldi	r24, 0x07	; 7
    13b2:	80 83       	st	Z, r24
    13b4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    13b8:	e0 91 2d 02 	lds	r30, 0x022D
    13bc:	f0 91 2e 02 	lds	r31, 0x022E
    13c0:	e2 5f       	subi	r30, 0xF2	; 242
    13c2:	fe 4f       	sbci	r31, 0xFE	; 254
    13c4:	80 81       	ld	r24, Z
    13c6:	91 81       	ldd	r25, Z+1	; 0x01
    13c8:	08 95       	ret
    13ca:	08 95       	ret

000013cc <Event_Init>:
    13cc:	80 91 2b 02 	lds	r24, 0x022B
    13d0:	90 91 2c 02 	lds	r25, 0x022C
    13d4:	89 2b       	or	r24, r25
    13d6:	a1 f0       	breq	.+40     	; 0x1400 <Event_Init+0x34>
    13d8:	f8 94       	cli
    13da:	e0 91 2d 02 	lds	r30, 0x022D
    13de:	f0 91 2e 02 	lds	r31, 0x022E
    13e2:	e3 5f       	subi	r30, 0xF3	; 243
    13e4:	fe 4f       	sbci	r31, 0xFE	; 254
    13e6:	8a e0       	ldi	r24, 0x0A	; 10
    13e8:	80 83       	st	Z, r24
    13ea:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    13ee:	e0 91 2d 02 	lds	r30, 0x022D
    13f2:	f0 91 2e 02 	lds	r31, 0x022E
    13f6:	e2 5f       	subi	r30, 0xF2	; 242
    13f8:	fe 4f       	sbci	r31, 0xFE	; 254
    13fa:	80 81       	ld	r24, Z
    13fc:	91 81       	ldd	r25, Z+1	; 0x01
    13fe:	08 95       	ret
    1400:	08 95       	ret

00001402 <Task_Create>:
    1402:	20 91 2b 02 	lds	r18, 0x022B
    1406:	30 91 2c 02 	lds	r19, 0x022C
    140a:	23 2b       	or	r18, r19
    140c:	f1 f0       	breq	.+60     	; 0x144a <Task_Create+0x48>
    140e:	f8 94       	cli
    1410:	20 91 2d 02 	lds	r18, 0x022D
    1414:	30 91 2e 02 	lds	r19, 0x022E
    1418:	f9 01       	movw	r30, r18
    141a:	e3 5f       	subi	r30, 0xF3	; 243
    141c:	fe 4f       	sbci	r31, 0xFE	; 254
    141e:	a1 e0       	ldi	r26, 0x01	; 1
    1420:	a0 83       	st	Z, r26
    1422:	32 97       	sbiw	r30, 0x02	; 2
    1424:	91 83       	std	Z+1, r25	; 0x01
    1426:	80 83       	st	Z, r24
    1428:	36 97       	sbiw	r30, 0x06	; 6
    142a:	71 83       	std	Z+1, r23	; 0x01
    142c:	60 83       	st	Z, r22
    142e:	34 96       	adiw	r30, 0x04	; 4
    1430:	51 83       	std	Z+1, r21	; 0x01
    1432:	40 83       	st	Z, r20
    1434:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    1438:	e0 91 2d 02 	lds	r30, 0x022D
    143c:	f0 91 2e 02 	lds	r31, 0x022E
    1440:	e2 5f       	subi	r30, 0xF2	; 242
    1442:	fe 4f       	sbci	r31, 0xFE	; 254
    1444:	80 81       	ld	r24, Z
    1446:	91 81       	ldd	r25, Z+1	; 0x01
    1448:	08 95       	ret
    144a:	62 c9       	rjmp	.-3388   	; 0x710 <Kernel_Create_Task>
    144c:	08 95       	ret

0000144e <Task_Next>:
    144e:	80 91 2b 02 	lds	r24, 0x022B
    1452:	90 91 2c 02 	lds	r25, 0x022C
    1456:	89 2b       	or	r24, r25
    1458:	59 f0       	breq	.+22     	; 0x1470 <Task_Next+0x22>
    145a:	f8 94       	cli
    145c:	e0 91 2d 02 	lds	r30, 0x022D
    1460:	f0 91 2e 02 	lds	r31, 0x022E
    1464:	e3 5f       	subi	r30, 0xF3	; 243
    1466:	fe 4f       	sbci	r31, 0xFE	; 254
    1468:	82 e0       	ldi	r24, 0x02	; 2
    146a:	80 83       	st	Z, r24
    146c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <Enter_Kernel>
    1470:	08 95       	ret

00001472 <setup>:
  * Setup pins and timers
  */
void setup() {
	/** For testing */
	/** pin 47 */
	init_LED_PORTL_pin2();
    1472:	0d d8       	rcall	.-4070   	; 0x48e <init_LED_PORTL_pin2>

	/** pin 43 */
	init_LED_PORTL_pin6();
    1474:	18 d8       	rcall	.-4048   	; 0x4a6 <init_LED_PORTL_pin6>

	/** pin 44 */
	init_LED_PORTL_pin5();
    1476:	11 d8       	rcall	.-4062   	; 0x49a <init_LED_PORTL_pin5>

	/** pin 49 */
	init_LED_PORTL_pin0();
    1478:	0e 94 3b 02 	call	0x476	; 0x476 <init_LED_PORTL_pin0>

	/** pin 48 */
	init_LED_PORTL_pin1();
    147c:	02 d8       	rcall	.-4092   	; 0x482 <init_LED_PORTL_pin1>

	/** initialize Timer1 16 bit timer */
	Disable_Interrupt();
    147e:	f8 94       	cli

	/** Timer 1 */
	TCCR1A = 0;                 /** Set TCCR1A register to 0 */
    1480:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;                 /** Set TCCR1B register to 0 */
    1484:	e1 e8       	ldi	r30, 0x81	; 129
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	10 82       	st	Z, r1

	TCNT1 = 0;                  /** Initialize counter to 0 */
    148a:	10 92 85 00 	sts	0x0085, r1
    148e:	10 92 84 00 	sts	0x0084, r1

	OCR1A = 624;                /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
    1492:	80 e7       	ldi	r24, 0x70	; 112
    1494:	92 e0       	ldi	r25, 0x02	; 2
    1496:	90 93 89 00 	sts	0x0089, r25
    149a:	80 93 88 00 	sts	0x0088, r24

	TCCR1B |= (1 << WGM12);     /** Turns on CTC mode (TOP is now OCR1A) */
    149e:	80 81       	ld	r24, Z
    14a0:	88 60       	ori	r24, 0x08	; 8
    14a2:	80 83       	st	Z, r24

	TCCR1B |= (1 << CS12);      /** Prescaler 256 */
    14a4:	80 81       	ld	r24, Z
    14a6:	84 60       	ori	r24, 0x04	; 4
    14a8:	80 83       	st	Z, r24

	TIMSK1 |= (1 << OCIE1A);    /** Enable timer compare interrupt */
    14aa:	ef e6       	ldi	r30, 0x6F	; 111
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	82 60       	ori	r24, 0x02	; 2
    14b2:	80 83       	st	Z, r24

	/** Timer 3 */
	TCCR3A = 0;                 /** Set TCCR0A register to 0 */
    14b4:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0;                 /** Set TCCR0B register to 0 */
    14b8:	e1 e9       	ldi	r30, 0x91	; 145
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	10 82       	st	Z, r1

	TCNT3 = 0;                  /** Initialize counter to 0 */
    14be:	10 92 95 00 	sts	0x0095, r1
    14c2:	10 92 94 00 	sts	0x0094, r1

	OCR3A = 62499;              /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
    14c6:	83 e2       	ldi	r24, 0x23	; 35
    14c8:	94 ef       	ldi	r25, 0xF4	; 244
    14ca:	90 93 99 00 	sts	0x0099, r25
    14ce:	80 93 98 00 	sts	0x0098, r24

	TCCR3B |= (1 << WGM32);     /** Turns on CTC mode (TOP is now OCR1A) */
    14d2:	80 81       	ld	r24, Z
    14d4:	88 60       	ori	r24, 0x08	; 8
    14d6:	80 83       	st	Z, r24

	TCCR3B |= (1 << CS32);      /** Prescaler 1024 */
    14d8:	80 81       	ld	r24, Z
    14da:	84 60       	ori	r24, 0x04	; 4
    14dc:	80 83       	st	Z, r24

	TIMSK3 = (1 << OCIE3A);
    14de:	82 e0       	ldi	r24, 0x02	; 2
    14e0:	80 93 71 00 	sts	0x0071, r24

	Enable_Interrupt();
    14e4:	78 94       	sei
    14e6:	08 95       	ret

000014e8 <__vector_17>:
}

/**
  * ISR for timer1
  */
ISR(TIMER1_COMPA_vect) {
    14e8:	1f 92       	push	r1
    14ea:	0f 92       	push	r0
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	0f 92       	push	r0
    14f0:	11 24       	eor	r1, r1
    14f2:	0b b6       	in	r0, 0x3b	; 59
    14f4:	0f 92       	push	r0
    14f6:	df 92       	push	r13
    14f8:	ef 92       	push	r14
    14fa:	ff 92       	push	r15
    14fc:	0f 93       	push	r16
    14fe:	1f 93       	push	r17
    1500:	2f 93       	push	r18
    1502:	3f 93       	push	r19
    1504:	4f 93       	push	r20
    1506:	5f 93       	push	r21
    1508:	6f 93       	push	r22
    150a:	7f 93       	push	r23
    150c:	8f 93       	push	r24
    150e:	9f 93       	push	r25
    1510:	af 93       	push	r26
    1512:	bf 93       	push	r27
    1514:	ef 93       	push	r30
    1516:	ff 93       	push	r31
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
    151c:	00 d0       	rcall	.+0      	; 0x151e <__vector_17+0x36>
    151e:	1f 92       	push	r1
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
    1524:	80 91 1d 02 	lds	r24, 0x021D
    1528:	90 91 1e 02 	lds	r25, 0x021E
    152c:	01 97       	sbiw	r24, 0x01	; 1
    152e:	9a 83       	std	Y+2, r25	; 0x02
    1530:	89 83       	std	Y+1, r24	; 0x01
    1532:	89 81       	ldd	r24, Y+1	; 0x01
    1534:	9a 81       	ldd	r25, Y+2	; 0x02
    1536:	99 23       	and	r25, r25
    1538:	0c f4       	brge	.+2      	; 0x153c <__vector_17+0x54>
    153a:	7c c0       	rjmp	.+248    	; 0x1634 <__vector_17+0x14c>
		if ((SleepQueue[i]->wakeTickOverflow <= tickOverflowCount) && (SleepQueue[i]->wakeTick <= (TCNT3/625))) {
    153c:	e9 81       	ldd	r30, Y+1	; 0x01
    153e:	fa 81       	ldd	r31, Y+2	; 0x02
    1540:	ee 0f       	add	r30, r30
    1542:	ff 1f       	adc	r31, r31
    1544:	e7 52       	subi	r30, 0x27	; 39
    1546:	fb 4e       	sbci	r31, 0xEB	; 235
    1548:	01 90       	ld	r0, Z+
    154a:	f0 81       	ld	r31, Z
    154c:	e0 2d       	mov	r30, r0
    154e:	e0 5f       	subi	r30, 0xF0	; 240
    1550:	fe 4f       	sbci	r31, 0xFE	; 254
    1552:	20 81       	ld	r18, Z
    1554:	31 81       	ldd	r19, Z+1	; 0x01
    1556:	80 91 21 02 	lds	r24, 0x0221
    155a:	90 91 22 02 	lds	r25, 0x0222
    155e:	82 17       	cp	r24, r18
    1560:	93 07       	cpc	r25, r19
    1562:	08 f4       	brcc	.+2      	; 0x1566 <__vector_17+0x7e>
    1564:	67 c0       	rjmp	.+206    	; 0x1634 <__vector_17+0x14c>
    1566:	e9 81       	ldd	r30, Y+1	; 0x01
    1568:	fa 81       	ldd	r31, Y+2	; 0x02
    156a:	ee 0f       	add	r30, r30
    156c:	ff 1f       	adc	r31, r31
    156e:	e7 52       	subi	r30, 0x27	; 39
    1570:	fb 4e       	sbci	r31, 0xEB	; 235
    1572:	01 90       	ld	r0, Z+
    1574:	f0 81       	ld	r31, Z
    1576:	e0 2d       	mov	r30, r0
    1578:	ee 5e       	subi	r30, 0xEE	; 238
    157a:	fe 4f       	sbci	r31, 0xFE	; 254
    157c:	20 81       	ld	r18, Z
    157e:	31 81       	ldd	r19, Z+1	; 0x01
    1580:	80 91 94 00 	lds	r24, 0x0094
    1584:	90 91 95 00 	lds	r25, 0x0095
    1588:	61 e7       	ldi	r22, 0x71	; 113
    158a:	72 e0       	ldi	r23, 0x02	; 2
    158c:	43 d4       	rcall	.+2182   	; 0x1e14 <__udivmodhi4>
    158e:	62 17       	cp	r22, r18
    1590:	73 07       	cpc	r23, r19
    1592:	58 f5       	brcc	.+86     	; 0x15ea <__vector_17+0x102>
    1594:	4f c0       	rjmp	.+158    	; 0x1634 <__vector_17+0x14c>
    1596:	e9 81       	ldd	r30, Y+1	; 0x01
    1598:	fa 81       	ldd	r31, Y+2	; 0x02
    159a:	ee 0f       	add	r30, r30
    159c:	ff 1f       	adc	r31, r31
    159e:	e7 52       	subi	r30, 0x27	; 39
    15a0:	fb 4e       	sbci	r31, 0xEB	; 235
    15a2:	01 90       	ld	r0, Z+
    15a4:	f0 81       	ld	r31, Z
    15a6:	e0 2d       	mov	r30, r0
    15a8:	e0 5f       	subi	r30, 0xF0	; 240
    15aa:	fe 4f       	sbci	r31, 0xFE	; 254
    15ac:	20 81       	ld	r18, Z
    15ae:	31 81       	ldd	r19, Z+1	; 0x01
    15b0:	80 91 21 02 	lds	r24, 0x0221
    15b4:	90 91 22 02 	lds	r25, 0x0222
    15b8:	82 17       	cp	r24, r18
    15ba:	93 07       	cpc	r25, r19
    15bc:	d8 f1       	brcs	.+118    	; 0x1634 <__vector_17+0x14c>
    15be:	e9 81       	ldd	r30, Y+1	; 0x01
    15c0:	fa 81       	ldd	r31, Y+2	; 0x02
    15c2:	ee 0f       	add	r30, r30
    15c4:	ff 1f       	adc	r31, r31
    15c6:	e7 52       	subi	r30, 0x27	; 39
    15c8:	fb 4e       	sbci	r31, 0xEB	; 235
    15ca:	01 90       	ld	r0, Z+
    15cc:	f0 81       	ld	r31, Z
    15ce:	e0 2d       	mov	r30, r0
    15d0:	ee 5e       	subi	r30, 0xEE	; 238
    15d2:	fe 4f       	sbci	r31, 0xFE	; 254
    15d4:	20 81       	ld	r18, Z
    15d6:	31 81       	ldd	r19, Z+1	; 0x01
    15d8:	f7 01       	movw	r30, r14
    15da:	80 81       	ld	r24, Z
    15dc:	91 81       	ldd	r25, Z+1	; 0x01
    15de:	b8 01       	movw	r22, r16
    15e0:	19 d4       	rcall	.+2098   	; 0x1e14 <__udivmodhi4>
    15e2:	62 17       	cp	r22, r18
    15e4:	73 07       	cpc	r23, r19
    15e6:	50 f4       	brcc	.+20     	; 0x15fc <__vector_17+0x114>
    15e8:	25 c0       	rjmp	.+74     	; 0x1634 <__vector_17+0x14c>
			volatile PD *p = dequeue(&SleepQueue, &SQCount);
			p->state = READY;
    15ea:	dd 24       	eor	r13, r13
    15ec:	d3 94       	inc	r13
ISR(TIMER1_COMPA_vect) {

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
		if ((SleepQueue[i]->wakeTickOverflow <= tickOverflowCount) && (SleepQueue[i]->wakeTick <= (TCNT3/625))) {
    15ee:	0f 2e       	mov	r0, r31
    15f0:	f4 e9       	ldi	r31, 0x94	; 148
    15f2:	ef 2e       	mov	r14, r31
    15f4:	f1 2c       	mov	r15, r1
    15f6:	f0 2d       	mov	r31, r0
    15f8:	01 e7       	ldi	r16, 0x71	; 113
    15fa:	12 e0       	ldi	r17, 0x02	; 2
			volatile PD *p = dequeue(&SleepQueue, &SQCount);
    15fc:	6d e1       	ldi	r22, 0x1D	; 29
    15fe:	72 e0       	ldi	r23, 0x02	; 2
    1600:	89 ed       	ldi	r24, 0xD9	; 217
    1602:	94 e1       	ldi	r25, 0x14	; 20
    1604:	1c d2       	rcall	.+1080   	; 0x1a3e <dequeue>
    1606:	9c 83       	std	Y+4, r25	; 0x04
    1608:	8b 83       	std	Y+3, r24	; 0x03
			p->state = READY;
    160a:	fc 01       	movw	r30, r24
    160c:	ec 5f       	subi	r30, 0xFC	; 252
    160e:	fe 4f       	sbci	r31, 0xFE	; 254
    1610:	d0 82       	st	Z, r13
			enqueueRQ(&p, &ReadyQueue, &RQCount);
    1612:	4f e1       	ldi	r20, 0x1F	; 31
    1614:	52 e0       	ldi	r21, 0x02	; 2
    1616:	69 ef       	ldi	r22, 0xF9	; 249
    1618:	74 e1       	ldi	r23, 0x14	; 20
    161a:	ce 01       	movw	r24, r28
    161c:	03 96       	adiw	r24, 0x03	; 3
    161e:	ec d0       	rcall	.+472    	; 0x17f8 <enqueueRQ>
  */
ISR(TIMER1_COMPA_vect) {

	volatile int i;

	for (i = SQCount-1; i >= 0; i--) {
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	9a 81       	ldd	r25, Y+2	; 0x02
    1624:	01 97       	sbiw	r24, 0x01	; 1
    1626:	9a 83       	std	Y+2, r25	; 0x02
    1628:	89 83       	std	Y+1, r24	; 0x01
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	9a 81       	ldd	r25, Y+2	; 0x02
    162e:	99 23       	and	r25, r25
    1630:	0c f0       	brlt	.+2      	; 0x1634 <__vector_17+0x14c>
    1632:	b1 cf       	rjmp	.-158    	; 0x1596 <__vector_17+0xae>
		else {
			break;
		}
	}

	Task_Next();
    1634:	0c df       	rcall	.-488    	; 0x144e <Task_Next>
}
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	ff 91       	pop	r31
    1644:	ef 91       	pop	r30
    1646:	bf 91       	pop	r27
    1648:	af 91       	pop	r26
    164a:	9f 91       	pop	r25
    164c:	8f 91       	pop	r24
    164e:	7f 91       	pop	r23
    1650:	6f 91       	pop	r22
    1652:	5f 91       	pop	r21
    1654:	4f 91       	pop	r20
    1656:	3f 91       	pop	r19
    1658:	2f 91       	pop	r18
    165a:	1f 91       	pop	r17
    165c:	0f 91       	pop	r16
    165e:	ff 90       	pop	r15
    1660:	ef 90       	pop	r14
    1662:	df 90       	pop	r13
    1664:	0f 90       	pop	r0
    1666:	0b be       	out	0x3b, r0	; 59
    1668:	0f 90       	pop	r0
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	0f 90       	pop	r0
    166e:	1f 90       	pop	r1
    1670:	18 95       	reti

00001672 <__vector_32>:

/**
  * ISR for timer3
  */
ISR(TIMER3_COMPA_vect) {
    1672:	1f 92       	push	r1
    1674:	0f 92       	push	r0
    1676:	0f b6       	in	r0, 0x3f	; 63
    1678:	0f 92       	push	r0
    167a:	11 24       	eor	r1, r1
    167c:	8f 93       	push	r24
    167e:	9f 93       	push	r25
	tickOverflowCount += 1;
    1680:	80 91 21 02 	lds	r24, 0x0221
    1684:	90 91 22 02 	lds	r25, 0x0222
    1688:	01 96       	adiw	r24, 0x01	; 1
    168a:	90 93 22 02 	sts	0x0222, r25
    168e:	80 93 21 02 	sts	0x0221, r24
}
    1692:	9f 91       	pop	r25
    1694:	8f 91       	pop	r24
    1696:	0f 90       	pop	r0
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	0f 90       	pop	r0
    169c:	1f 90       	pop	r1
    169e:	18 95       	reti

000016a0 <main>:

/**
  * This function boots the OS and creates the first task: a_main
  */
void main() {
	setup();
    16a0:	e8 de       	rcall	.-560    	; 0x1472 <setup>
	
	OS_Init();
    16a2:	92 d8       	rcall	.-3804   	; 0x7c8 <OS_Init>
	Task_Create(a_main, 1, 1);
    16a4:	41 e0       	ldi	r20, 0x01	; 1
    16a6:	50 e0       	ldi	r21, 0x00	; 0
    16a8:	61 e0       	ldi	r22, 0x01	; 1
    16aa:	70 e0       	ldi	r23, 0x00	; 0
    16ac:	8b ea       	ldi	r24, 0xAB	; 171
    16ae:	92 e0       	ldi	r25, 0x02	; 2
    16b0:	a8 de       	rcall	.-688    	; 0x1402 <Task_Create>
	OS_Start();
    16b2:	37 ca       	rjmp	.-2962   	; 0xb22 <OS_Start>
    16b4:	08 95       	ret

000016b6 <enqueueWQ>:
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
}

void enqueueWQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    16b6:	cf 93       	push	r28
    16b8:	df 93       	push	r29
    16ba:	ea 01       	movw	r28, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    16bc:	28 81       	ld	r18, Y
    16be:	39 81       	ldd	r19, Y+1	; 0x01
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
}

void enqueueWQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    16c0:	2f 30       	cpi	r18, 0x0F	; 15
    16c2:	31 05       	cpc	r19, r1
    16c4:	29 f1       	breq	.+74     	; 0x1710 <enqueueWQ+0x5a>
        return;
    }

    int i = (*QCount) - 1;
    16c6:	e8 81       	ld	r30, Y
    16c8:	f9 81       	ldd	r31, Y+1	; 0x01
    16ca:	9f 01       	movw	r18, r30
    16cc:	21 50       	subi	r18, 0x01	; 1
    16ce:	31 09       	sbc	r19, r1

    while(i >= 0) {
    16d0:	72 f0       	brmi	.+28     	; 0x16ee <enqueueWQ+0x38>
    16d2:	ee 0f       	add	r30, r30
    16d4:	ff 1f       	adc	r31, r31
    16d6:	e6 0f       	add	r30, r22
    16d8:	f7 1f       	adc	r31, r23
    16da:	db 01       	movw	r26, r22
        Queue[i+1] = Queue[i];
    16dc:	32 91       	ld	r19, -Z
    16de:	22 91       	ld	r18, -Z
    16e0:	33 83       	std	Z+3, r19	; 0x03
    16e2:	22 83       	std	Z+2, r18	; 0x02
        return;
    }

    int i = (*QCount) - 1;

    while(i >= 0) {
    16e4:	ea 17       	cp	r30, r26
    16e6:	fb 07       	cpc	r31, r27
    16e8:	c9 f7       	brne	.-14     	; 0x16dc <enqueueWQ+0x26>
        Queue[i+1] = Queue[i];
        i--;
    16ea:	2f ef       	ldi	r18, 0xFF	; 255
    16ec:	3f ef       	ldi	r19, 0xFF	; 255
    }

    Queue[i+1] = *p;
    16ee:	fc 01       	movw	r30, r24
    16f0:	80 81       	ld	r24, Z
    16f2:	91 81       	ldd	r25, Z+1	; 0x01
    16f4:	2f 5f       	subi	r18, 0xFF	; 255
    16f6:	3f 4f       	sbci	r19, 0xFF	; 255
    16f8:	22 0f       	add	r18, r18
    16fa:	33 1f       	adc	r19, r19
    16fc:	fb 01       	movw	r30, r22
    16fe:	e2 0f       	add	r30, r18
    1700:	f3 1f       	adc	r31, r19
    1702:	91 83       	std	Z+1, r25	; 0x01
    1704:	80 83       	st	Z, r24
    (*QCount)++;
    1706:	88 81       	ld	r24, Y
    1708:	99 81       	ldd	r25, Y+1	; 0x01
    170a:	01 96       	adiw	r24, 0x01	; 1
    170c:	99 83       	std	Y+1, r25	; 0x01
    170e:	88 83       	st	Y, r24
}
    1710:	df 91       	pop	r29
    1712:	cf 91       	pop	r28
    1714:	08 95       	ret

00001716 <enqueueSQ>:

void enqueueSQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    1716:	cf 92       	push	r12
    1718:	df 92       	push	r13
    171a:	ef 92       	push	r14
    171c:	ff 92       	push	r15
    171e:	0f 93       	push	r16
    1720:	1f 93       	push	r17
    1722:	cf 93       	push	r28
    1724:	df 93       	push	r29

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    1726:	ea 01       	movw	r28, r20
    1728:	28 81       	ld	r18, Y
    172a:	39 81       	ldd	r19, Y+1	; 0x01
    Queue[i+1] = *p;
    (*QCount)++;
}

void enqueueSQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    172c:	2f 30       	cpi	r18, 0x0F	; 15
    172e:	31 05       	cpc	r19, r1
    1730:	09 f4       	brne	.+2      	; 0x1734 <enqueueSQ+0x1e>
    1732:	59 c0       	rjmp	.+178    	; 0x17e6 <enqueueSQ+0xd0>
        return;
    }

    int i = (*QCount) - 1;
    1734:	a8 81       	ld	r26, Y
    1736:	b9 81       	ldd	r27, Y+1	; 0x01
    1738:	11 97       	sbiw	r26, 0x01	; 1

    volatile PD *new = *p;
    173a:	fc 01       	movw	r30, r24
    173c:	c0 80       	ld	r12, Z
    173e:	d1 80       	ldd	r13, Z+1	; 0x01

    volatile PD *temp = Queue[i];
    1740:	fd 01       	movw	r30, r26
    1742:	ee 0f       	add	r30, r30
    1744:	ff 1f       	adc	r31, r31
    1746:	eb 01       	movw	r28, r22
    1748:	ce 0f       	add	r28, r30
    174a:	df 1f       	adc	r29, r31
    174c:	28 81       	ld	r18, Y
    174e:	39 81       	ldd	r19, Y+1	; 0x01

    while(i >= 0 && ((new->wakeTickOverflow > temp->wakeTickOverflow) || ((new->wakeTickOverflow >= temp->wakeTickOverflow) && (new->wakeTick >= temp->wakeTick)))) {
    1750:	bb 23       	and	r27, r27
    1752:	cc f1       	brlt	.+114    	; 0x17c6 <enqueueSQ+0xb0>
    1754:	fe 01       	movw	r30, r28
    1756:	76 01       	movw	r14, r12
    1758:	c0 ef       	ldi	r28, 0xF0	; 240
    175a:	ec 1a       	sub	r14, r28
    175c:	ce ef       	ldi	r28, 0xFE	; 254
    175e:	fc 0a       	sbc	r15, r28
    1760:	de ee       	ldi	r29, 0xEE	; 238
    1762:	cd 1a       	sub	r12, r29
    1764:	de ef       	ldi	r29, 0xFE	; 254
    1766:	dd 0a       	sbc	r13, r29
    1768:	0b c0       	rjmp	.+22     	; 0x1780 <enqueueSQ+0x6a>
        Queue[i+1] = Queue[i];
    176a:	20 81       	ld	r18, Z
    176c:	31 81       	ldd	r19, Z+1	; 0x01
    176e:	33 83       	std	Z+3, r19	; 0x03
    1770:	22 83       	std	Z+2, r18	; 0x02
        i--;
    1772:	11 97       	sbiw	r26, 0x01	; 1
        temp = Queue[i];
    1774:	32 91       	ld	r19, -Z
    1776:	22 91       	ld	r18, -Z

    volatile PD *new = *p;

    volatile PD *temp = Queue[i];

    while(i >= 0 && ((new->wakeTickOverflow > temp->wakeTickOverflow) || ((new->wakeTickOverflow >= temp->wakeTickOverflow) && (new->wakeTick >= temp->wakeTick)))) {
    1778:	af 3f       	cpi	r26, 0xFF	; 255
    177a:	cf ef       	ldi	r28, 0xFF	; 255
    177c:	bc 07       	cpc	r27, r28
    177e:	19 f1       	breq	.+70     	; 0x17c6 <enqueueSQ+0xb0>
    1780:	e7 01       	movw	r28, r14
    1782:	08 81       	ld	r16, Y
    1784:	19 81       	ldd	r17, Y+1	; 0x01
    1786:	e9 01       	movw	r28, r18
    1788:	c0 5f       	subi	r28, 0xF0	; 240
    178a:	de 4f       	sbci	r29, 0xFE	; 254
    178c:	09 90       	ld	r0, Y+
    178e:	d8 81       	ld	r29, Y
    1790:	c0 2d       	mov	r28, r0
    1792:	c0 17       	cp	r28, r16
    1794:	d1 07       	cpc	r29, r17
    1796:	48 f3       	brcs	.-46     	; 0x176a <enqueueSQ+0x54>
    1798:	e7 01       	movw	r28, r14
    179a:	08 81       	ld	r16, Y
    179c:	19 81       	ldd	r17, Y+1	; 0x01
    179e:	e9 01       	movw	r28, r18
    17a0:	c0 5f       	subi	r28, 0xF0	; 240
    17a2:	de 4f       	sbci	r29, 0xFE	; 254
    17a4:	09 90       	ld	r0, Y+
    17a6:	d8 81       	ld	r29, Y
    17a8:	c0 2d       	mov	r28, r0
    17aa:	0c 17       	cp	r16, r28
    17ac:	1d 07       	cpc	r17, r29
    17ae:	58 f0       	brcs	.+22     	; 0x17c6 <enqueueSQ+0xb0>
    17b0:	e6 01       	movw	r28, r12
    17b2:	08 81       	ld	r16, Y
    17b4:	19 81       	ldd	r17, Y+1	; 0x01
    17b6:	2e 5e       	subi	r18, 0xEE	; 238
    17b8:	3e 4f       	sbci	r19, 0xFE	; 254
    17ba:	e9 01       	movw	r28, r18
    17bc:	28 81       	ld	r18, Y
    17be:	39 81       	ldd	r19, Y+1	; 0x01
    17c0:	02 17       	cp	r16, r18
    17c2:	13 07       	cpc	r17, r19
    17c4:	90 f6       	brcc	.-92     	; 0x176a <enqueueSQ+0x54>
        Queue[i+1] = Queue[i];
        i--;
        temp = Queue[i];
    }

    Queue[i+1] = *p;
    17c6:	fc 01       	movw	r30, r24
    17c8:	80 81       	ld	r24, Z
    17ca:	91 81       	ldd	r25, Z+1	; 0x01
    17cc:	11 96       	adiw	r26, 0x01	; 1
    17ce:	aa 0f       	add	r26, r26
    17d0:	bb 1f       	adc	r27, r27
    17d2:	a6 0f       	add	r26, r22
    17d4:	b7 1f       	adc	r27, r23
    17d6:	8d 93       	st	X+, r24
    17d8:	9c 93       	st	X, r25
    (*QCount)++;
    17da:	ea 01       	movw	r28, r20
    17dc:	88 81       	ld	r24, Y
    17de:	99 81       	ldd	r25, Y+1	; 0x01
    17e0:	01 96       	adiw	r24, 0x01	; 1
    17e2:	99 83       	std	Y+1, r25	; 0x01
    17e4:	88 83       	st	Y, r24
}
    17e6:	df 91       	pop	r29
    17e8:	cf 91       	pop	r28
    17ea:	1f 91       	pop	r17
    17ec:	0f 91       	pop	r16
    17ee:	ff 90       	pop	r15
    17f0:	ef 90       	pop	r14
    17f2:	df 90       	pop	r13
    17f4:	cf 90       	pop	r12
    17f6:	08 95       	ret

000017f8 <enqueueRQ>:

/*
 *  Insert into the queue sorted by priority
 */
void enqueueRQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    17f8:	cf 92       	push	r12
    17fa:	df 92       	push	r13
    17fc:	ef 92       	push	r14
    17fe:	ff 92       	push	r15
    1800:	0f 93       	push	r16
    1802:	1f 93       	push	r17
    1804:	cf 93       	push	r28
    1806:	df 93       	push	r29
    1808:	6a 01       	movw	r12, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    180a:	ea 01       	movw	r28, r20
    180c:	28 81       	ld	r18, Y
    180e:	39 81       	ldd	r19, Y+1	; 0x01

/*
 *  Insert into the queue sorted by priority
 */
void enqueueRQ(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    1810:	2f 30       	cpi	r18, 0x0F	; 15
    1812:	31 05       	cpc	r19, r1
    1814:	09 f4       	brne	.+2      	; 0x1818 <enqueueRQ+0x20>
    1816:	4a c0       	rjmp	.+148    	; 0x18ac <enqueueRQ+0xb4>
        return;
    }

    int i = (*QCount) - 1;
    1818:	28 81       	ld	r18, Y
    181a:	39 81       	ldd	r19, Y+1	; 0x01
    181c:	21 50       	subi	r18, 0x01	; 1
    181e:	31 09       	sbc	r19, r1

    volatile PD *new = *p;
    1820:	fc 01       	movw	r30, r24
    1822:	00 81       	ld	r16, Z
    1824:	11 81       	ldd	r17, Z+1	; 0x01

    volatile PD *temp = Queue[i];
    1826:	f9 01       	movw	r30, r18
    1828:	ee 0f       	add	r30, r30
    182a:	ff 1f       	adc	r31, r31
    182c:	db 01       	movw	r26, r22
    182e:	ae 0f       	add	r26, r30
    1830:	bf 1f       	adc	r27, r31
    1832:	4d 91       	ld	r20, X+
    1834:	5c 91       	ld	r21, X

    while(i >= 0 && (new->inheritedPy >= temp->inheritedPy)) {
    1836:	33 23       	and	r19, r19
    1838:	3c f1       	brlt	.+78     	; 0x1888 <enqueueRQ+0x90>
    183a:	d8 01       	movw	r26, r16
    183c:	a9 5f       	subi	r26, 0xF9	; 249
    183e:	be 4f       	sbci	r27, 0xFE	; 254
    1840:	ed 90       	ld	r14, X+
    1842:	fc 90       	ld	r15, X
    1844:	da 01       	movw	r26, r20
    1846:	a9 5f       	subi	r26, 0xF9	; 249
    1848:	be 4f       	sbci	r27, 0xFE	; 254
    184a:	4d 91       	ld	r20, X+
    184c:	5c 91       	ld	r21, X
    184e:	e4 16       	cp	r14, r20
    1850:	f5 06       	cpc	r15, r21
    1852:	d0 f0       	brcs	.+52     	; 0x1888 <enqueueRQ+0x90>
    1854:	e6 0f       	add	r30, r22
    1856:	f7 1f       	adc	r31, r23
    1858:	09 5f       	subi	r16, 0xF9	; 249
    185a:	1e 4f       	sbci	r17, 0xFE	; 254
        Queue[i+1] = Queue[i];
    185c:	a0 81       	ld	r26, Z
    185e:	b1 81       	ldd	r27, Z+1	; 0x01
    1860:	b3 83       	std	Z+3, r27	; 0x03
    1862:	a2 83       	std	Z+2, r26	; 0x02
        i--;
    1864:	21 50       	subi	r18, 0x01	; 1
    1866:	31 09       	sbc	r19, r1
        temp = Queue[i];
    1868:	b2 91       	ld	r27, -Z
    186a:	a2 91       	ld	r26, -Z

    volatile PD *new = *p;

    volatile PD *temp = Queue[i];

    while(i >= 0 && (new->inheritedPy >= temp->inheritedPy)) {
    186c:	2f 3f       	cpi	r18, 0xFF	; 255
    186e:	4f ef       	ldi	r20, 0xFF	; 255
    1870:	34 07       	cpc	r19, r20
    1872:	51 f0       	breq	.+20     	; 0x1888 <enqueueRQ+0x90>
    1874:	e8 01       	movw	r28, r16
    1876:	e8 80       	ld	r14, Y
    1878:	f9 80       	ldd	r15, Y+1	; 0x01
    187a:	a9 5f       	subi	r26, 0xF9	; 249
    187c:	be 4f       	sbci	r27, 0xFE	; 254
    187e:	4d 91       	ld	r20, X+
    1880:	5c 91       	ld	r21, X
    1882:	e4 16       	cp	r14, r20
    1884:	f5 06       	cpc	r15, r21
    1886:	50 f7       	brcc	.-44     	; 0x185c <enqueueRQ+0x64>
        Queue[i+1] = Queue[i];
        i--;
        temp = Queue[i];
    }

    Queue[i+1] = *p;
    1888:	fc 01       	movw	r30, r24
    188a:	80 81       	ld	r24, Z
    188c:	91 81       	ldd	r25, Z+1	; 0x01
    188e:	2f 5f       	subi	r18, 0xFF	; 255
    1890:	3f 4f       	sbci	r19, 0xFF	; 255
    1892:	22 0f       	add	r18, r18
    1894:	33 1f       	adc	r19, r19
    1896:	fb 01       	movw	r30, r22
    1898:	e2 0f       	add	r30, r18
    189a:	f3 1f       	adc	r31, r19
    189c:	91 83       	std	Z+1, r25	; 0x01
    189e:	80 83       	st	Z, r24
    (*QCount)++;
    18a0:	e6 01       	movw	r28, r12
    18a2:	88 81       	ld	r24, Y
    18a4:	99 81       	ldd	r25, Y+1	; 0x01
    18a6:	01 96       	adiw	r24, 0x01	; 1
    18a8:	99 83       	std	Y+1, r25	; 0x01
    18aa:	88 83       	st	Y, r24
}
    18ac:	df 91       	pop	r29
    18ae:	cf 91       	pop	r28
    18b0:	1f 91       	pop	r17
    18b2:	0f 91       	pop	r16
    18b4:	ff 90       	pop	r15
    18b6:	ef 90       	pop	r14
    18b8:	df 90       	pop	r13
    18ba:	cf 90       	pop	r12
    18bc:	08 95       	ret

000018be <dequeueWQ>:

/*
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {
    18be:	0f 93       	push	r16
    18c0:	1f 93       	push	r17
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    18c6:	eb 01       	movw	r28, r22
    18c8:	28 81       	ld	r18, Y
    18ca:	39 81       	ldd	r19, Y+1	; 0x01
/*
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {

    if(isEmpty(QCount)) {
    18cc:	23 2b       	or	r18, r19
    18ce:	09 f4       	brne	.+2      	; 0x18d2 <dequeueWQ+0x14>
    18d0:	54 c0       	rjmp	.+168    	; 0x197a <dequeueWQ+0xbc>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
    18d2:	28 81       	ld	r18, Y
    18d4:	39 81       	ldd	r19, Y+1	; 0x01
    18d6:	21 50       	subi	r18, 0x01	; 1
    18d8:	31 09       	sbc	r19, r1
    18da:	0a f4       	brpl	.+2      	; 0x18de <dequeueWQ+0x20>
    18dc:	51 c0       	rjmp	.+162    	; 0x1980 <dequeueWQ+0xc2>
        if(Queue[i]->m == m){
    18de:	e9 01       	movw	r28, r18
    18e0:	cc 0f       	add	r28, r28
    18e2:	dd 1f       	adc	r29, r29
    18e4:	fc 01       	movw	r30, r24
    18e6:	ec 0f       	add	r30, r28
    18e8:	fd 1f       	adc	r31, r29
    18ea:	a0 81       	ld	r26, Z
    18ec:	b1 81       	ldd	r27, Z+1	; 0x01
    18ee:	fd 01       	movw	r30, r26
    18f0:	ec 5e       	subi	r30, 0xEC	; 236
    18f2:	fe 4f       	sbci	r31, 0xFE	; 254
    18f4:	01 90       	ld	r0, Z+
    18f6:	f0 81       	ld	r31, Z
    18f8:	e0 2d       	mov	r30, r0
    18fa:	e4 17       	cp	r30, r20
    18fc:	f5 07       	cpc	r31, r21
    18fe:	81 f4       	brne	.+32     	; 0x1920 <dequeueWQ+0x62>
    1900:	0a c0       	rjmp	.+20     	; 0x1916 <dequeueWQ+0x58>
    1902:	ba 91       	ld	r27, -Y
    1904:	aa 91       	ld	r26, -Y
    1906:	fd 01       	movw	r30, r26
    1908:	ec 5e       	subi	r30, 0xEC	; 236
    190a:	fe 4f       	sbci	r31, 0xFE	; 254
    190c:	00 81       	ld	r16, Z
    190e:	11 81       	ldd	r17, Z+1	; 0x01
    1910:	04 17       	cp	r16, r20
    1912:	15 07       	cpc	r17, r21
    1914:	39 f4       	brne	.+14     	; 0x1924 <dequeueWQ+0x66>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
    1916:	10 97       	sbiw	r26, 0x00	; 0
    1918:	59 f4       	brne	.+22     	; 0x1930 <dequeueWQ+0x72>
            i++;
        }
        (*QCount)--;
    }

    return result;
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	32 c0       	rjmp	.+100    	; 0x1984 <dequeueWQ+0xc6>
    1920:	c8 0f       	add	r28, r24
    1922:	d9 1f       	adc	r29, r25
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
    1924:	21 50       	subi	r18, 0x01	; 1
    1926:	31 09       	sbc	r19, r1
    1928:	60 f7       	brcc	.-40     	; 0x1902 <dequeueWQ+0x44>
            i++;
        }
        (*QCount)--;
    }

    return result;
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	2a c0       	rjmp	.+84     	; 0x1984 <dequeueWQ+0xc6>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i<(*QCount)-1) {
    1930:	eb 01       	movw	r28, r22
    1932:	48 81       	ld	r20, Y
    1934:	59 81       	ldd	r21, Y+1	; 0x01
    1936:	41 50       	subi	r20, 0x01	; 1
    1938:	51 09       	sbc	r21, r1
    193a:	24 17       	cp	r18, r20
    193c:	35 07       	cpc	r19, r21
    193e:	a4 f4       	brge	.+40     	; 0x1968 <dequeueWQ+0xaa>
    1940:	a9 01       	movw	r20, r18
    1942:	44 0f       	add	r20, r20
    1944:	55 1f       	adc	r21, r21
    1946:	fc 01       	movw	r30, r24
    1948:	e4 0f       	add	r30, r20
    194a:	f5 1f       	adc	r31, r21
            Queue[i] = Queue[i+1];
    194c:	82 81       	ldd	r24, Z+2	; 0x02
    194e:	93 81       	ldd	r25, Z+3	; 0x03
    1950:	81 93       	st	Z+, r24
    1952:	91 93       	st	Z+, r25
            i++;
    1954:	2f 5f       	subi	r18, 0xFF	; 255
    1956:	3f 4f       	sbci	r19, 0xFF	; 255
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i<(*QCount)-1) {
    1958:	eb 01       	movw	r28, r22
    195a:	48 81       	ld	r20, Y
    195c:	59 81       	ldd	r21, Y+1	; 0x01
    195e:	41 50       	subi	r20, 0x01	; 1
    1960:	51 09       	sbc	r21, r1
    1962:	24 17       	cp	r18, r20
    1964:	35 07       	cpc	r19, r21
    1966:	94 f3       	brlt	.-28     	; 0x194c <dequeueWQ+0x8e>
            Queue[i] = Queue[i+1];
            i++;
        }
        (*QCount)--;
    1968:	fb 01       	movw	r30, r22
    196a:	80 81       	ld	r24, Z
    196c:	91 81       	ldd	r25, Z+1	; 0x01
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	91 83       	std	Z+1, r25	; 0x01
    1972:	80 83       	st	Z, r24

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i>=0; i--) {
        if(Queue[i]->m == m){
            result = Queue[i];
    1974:	8a 2f       	mov	r24, r26
    1976:	9b 2f       	mov	r25, r27
    1978:	05 c0       	rjmp	.+10     	; 0x1984 <dequeueWQ+0xc6>
 *  Return the first element of the queue with the correct MUTEX m
 */
volatile PD *dequeueWQ(volatile PD **Queue, volatile int *QCount, MUTEX m) {

    if(isEmpty(QCount)) {
        return NULL;
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <dequeueWQ+0xc6>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	90 e0       	ldi	r25, 0x00	; 0
}
    1984:	df 91       	pop	r29
    1986:	cf 91       	pop	r28
    1988:	1f 91       	pop	r17
    198a:	0f 91       	pop	r16
    198c:	08 95       	ret

0000198e <dequeueRQ>:

/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {
    198e:	cf 93       	push	r28
    1990:	df 93       	push	r29
    1992:	eb 01       	movw	r28, r22

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    1994:	28 81       	ld	r18, Y
    1996:	39 81       	ldd	r19, Y+1	; 0x01
/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
    1998:	23 2b       	or	r18, r19
    199a:	09 f4       	brne	.+2      	; 0x199e <dequeueRQ+0x10>
    199c:	48 c0       	rjmp	.+144    	; 0x1a2e <dequeueRQ+0xa0>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
    199e:	e8 81       	ld	r30, Y
    19a0:	f9 81       	ldd	r31, Y+1	; 0x01
    19a2:	9f 01       	movw	r18, r30
    19a4:	21 50       	subi	r18, 0x01	; 1
    19a6:	31 09       	sbc	r19, r1
    19a8:	0a f4       	brpl	.+2      	; 0x19ac <dequeueRQ+0x1e>
    19aa:	44 c0       	rjmp	.+136    	; 0x1a34 <dequeueRQ+0xa6>
    19ac:	ee 0f       	add	r30, r30
    19ae:	ff 1f       	adc	r31, r31
    19b0:	e8 0f       	add	r30, r24
    19b2:	f9 1f       	adc	r31, r25
        if((Queue[i]->suspended == 0) && (Queue[i]->state == READY)) {
    19b4:	52 91       	ld	r21, -Z
    19b6:	42 91       	ld	r20, -Z
    19b8:	da 01       	movw	r26, r20
    19ba:	a6 5e       	subi	r26, 0xE6	; 230
    19bc:	be 4f       	sbci	r27, 0xFE	; 254
    19be:	6d 91       	ld	r22, X+
    19c0:	7c 91       	ld	r23, X
    19c2:	11 97       	sbiw	r26, 0x01	; 1
    19c4:	67 2b       	or	r22, r23
    19c6:	59 f4       	brne	.+22     	; 0x19de <dequeueRQ+0x50>
    19c8:	56 97       	sbiw	r26, 0x16	; 22
    19ca:	6c 91       	ld	r22, X
    19cc:	61 30       	cpi	r22, 0x01	; 1
    19ce:	39 f4       	brne	.+14     	; 0x19de <dequeueRQ+0x50>
    19d0:	f9 01       	movw	r30, r18
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
    19d2:	41 15       	cp	r20, r1
    19d4:	51 05       	cpc	r21, r1
    19d6:	49 f4       	brne	.+18     	; 0x19ea <dequeueRQ+0x5c>
            i++;
        }
        (*QCount)--;
    }

    return result;
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	2d c0       	rjmp	.+90     	; 0x1a38 <dequeueRQ+0xaa>
        return NULL;
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
    19de:	21 50       	subi	r18, 0x01	; 1
    19e0:	31 09       	sbc	r19, r1
    19e2:	40 f7       	brcc	.-48     	; 0x19b4 <dequeueRQ+0x26>
            i++;
        }
        (*QCount)--;
    }

    return result;
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	27 c0       	rjmp	.+78     	; 0x1a38 <dequeueRQ+0xaa>
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i < (*QCount)-1) {
    19ea:	68 81       	ld	r22, Y
    19ec:	79 81       	ldd	r23, Y+1	; 0x01
    19ee:	61 50       	subi	r22, 0x01	; 1
    19f0:	71 09       	sbc	r23, r1
    19f2:	26 17       	cp	r18, r22
    19f4:	37 07       	cpc	r19, r23
    19f6:	9c f4       	brge	.+38     	; 0x1a1e <dequeueRQ+0x90>
    19f8:	ee 0f       	add	r30, r30
    19fa:	ff 1f       	adc	r31, r31
    19fc:	dc 01       	movw	r26, r24
    19fe:	ae 0f       	add	r26, r30
    1a00:	bf 1f       	adc	r27, r31
            Queue[i] = Queue[i+1];
    1a02:	12 96       	adiw	r26, 0x02	; 2
    1a04:	8d 91       	ld	r24, X+
    1a06:	9c 91       	ld	r25, X
    1a08:	13 97       	sbiw	r26, 0x03	; 3
    1a0a:	8d 93       	st	X+, r24
    1a0c:	9d 93       	st	X+, r25
            i++;
    1a0e:	2f 5f       	subi	r18, 0xFF	; 255
    1a10:	3f 4f       	sbci	r19, 0xFF	; 255
            result = Queue[i];
            break;
        }
    }
    if(result != NULL) {
        while(i < (*QCount)-1) {
    1a12:	e8 81       	ld	r30, Y
    1a14:	f9 81       	ldd	r31, Y+1	; 0x01
    1a16:	31 97       	sbiw	r30, 0x01	; 1
    1a18:	2e 17       	cp	r18, r30
    1a1a:	3f 07       	cpc	r19, r31
    1a1c:	94 f3       	brlt	.-28     	; 0x1a02 <dequeueRQ+0x74>
            Queue[i] = Queue[i+1];
            i++;
        }
        (*QCount)--;
    1a1e:	88 81       	ld	r24, Y
    1a20:	99 81       	ldd	r25, Y+1	; 0x01
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	99 83       	std	Y+1, r25	; 0x01
    1a26:	88 83       	st	Y, r24
    }

    int i,j;
    volatile PD* result = NULL;
    for (i = (*QCount)-1; i >= 0; i--) {
        if((Queue[i]->suspended == 0) && (Queue[i]->state == READY)) {
    1a28:	84 2f       	mov	r24, r20
    1a2a:	95 2f       	mov	r25, r21
    1a2c:	05 c0       	rjmp	.+10     	; 0x1a38 <dequeueRQ+0xaa>
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeueRQ(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
        return NULL;
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <dequeueRQ+0xaa>
            i++;
        }
        (*QCount)--;
    }

    return result;
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	90 e0       	ldi	r25, 0x00	; 0
}
    1a38:	df 91       	pop	r29
    1a3a:	cf 91       	pop	r28
    1a3c:	08 95       	ret

00001a3e <dequeue>:

/*
 *  Return the first element of the queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
    1a3e:	db 01       	movw	r26, r22

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    1a40:	2d 91       	ld	r18, X+
    1a42:	3c 91       	ld	r19, X
    1a44:	11 97       	sbiw	r26, 0x01	; 1
/*
 *  Return the first element of the queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {

    if(isEmpty(QCount)) {
    1a46:	23 2b       	or	r18, r19
    1a48:	a9 f0       	breq	.+42     	; 0x1a74 <dequeue+0x36>
        return;
    }

    volatile PD *result = (Queue[(*QCount)-1]);
    1a4a:	2d 91       	ld	r18, X+
    1a4c:	3c 91       	ld	r19, X
    1a4e:	11 97       	sbiw	r26, 0x01	; 1
    1a50:	f9 01       	movw	r30, r18
    1a52:	e1 50       	subi	r30, 0x01	; 1
    1a54:	f0 48       	sbci	r31, 0x80	; 128
    1a56:	ee 0f       	add	r30, r30
    1a58:	ff 1f       	adc	r31, r31
    1a5a:	e8 0f       	add	r30, r24
    1a5c:	f9 1f       	adc	r31, r25
    1a5e:	80 81       	ld	r24, Z
    1a60:	91 81       	ldd	r25, Z+1	; 0x01
    (*QCount)--;
    1a62:	2d 91       	ld	r18, X+
    1a64:	3c 91       	ld	r19, X
    1a66:	11 97       	sbiw	r26, 0x01	; 1
    1a68:	21 50       	subi	r18, 0x01	; 1
    1a6a:	31 09       	sbc	r19, r1
    1a6c:	11 96       	adiw	r26, 0x01	; 1
    1a6e:	3c 93       	st	X, r19
    1a70:	2e 93       	st	-X, r18
    1a72:	08 95       	ret

    return result;
}
    1a74:	08 95       	ret

00001a76 <_get_status>:
	}

	wh = (16 - weight) * 100;
	wh /= 16;
	return wh;
}
    1a76:	2d 98       	cbi	0x05, 5	; 5
    1a78:	8f ef       	ldi	r24, 0xFF	; 255
    1a7a:	04 d1       	rcall	.+520    	; 0x1c84 <SPI_Write_Byte>
    1a7c:	2d 9a       	sbi	0x05, 5	; 5
    1a7e:	08 95       	ret

00001a80 <_set_register>:
    1a80:	0f 93       	push	r16
    1a82:	1f 93       	push	r17
    1a84:	cf 93       	push	r28
    1a86:	df 93       	push	r29
    1a88:	8b 01       	movw	r16, r22
    1a8a:	d4 2f       	mov	r29, r20
    1a8c:	2d 98       	cbi	0x05, 5	; 5
    1a8e:	8f 71       	andi	r24, 0x1F	; 31
    1a90:	80 62       	ori	r24, 0x20	; 32
    1a92:	f8 d0       	rcall	.+496    	; 0x1c84 <SPI_Write_Byte>
    1a94:	c8 2f       	mov	r28, r24
    1a96:	6d 2f       	mov	r22, r29
    1a98:	c8 01       	movw	r24, r16
    1a9a:	e1 d0       	rcall	.+450    	; 0x1c5e <SPI_Write_Block>
    1a9c:	2d 9a       	sbi	0x05, 5	; 5
    1a9e:	8c 2f       	mov	r24, r28
    1aa0:	df 91       	pop	r29
    1aa2:	cf 91       	pop	r28
    1aa4:	1f 91       	pop	r17
    1aa6:	0f 91       	pop	r16
    1aa8:	08 95       	ret

00001aaa <_get_register>:
    1aaa:	0f 93       	push	r16
    1aac:	1f 93       	push	r17
    1aae:	cf 93       	push	r28
    1ab0:	df 93       	push	r29
    1ab2:	eb 01       	movw	r28, r22
    1ab4:	14 2f       	mov	r17, r20
    1ab6:	44 23       	and	r20, r20
    1ab8:	69 f0       	breq	.+26     	; 0x1ad4 <_get_register+0x2a>
    1aba:	fb 01       	movw	r30, r22
    1abc:	2f ef       	ldi	r18, 0xFF	; 255
    1abe:	24 0f       	add	r18, r20
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	2f 5f       	subi	r18, 0xFF	; 255
    1ac4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ac6:	26 0f       	add	r18, r22
    1ac8:	37 1f       	adc	r19, r23
    1aca:	9f ef       	ldi	r25, 0xFF	; 255
    1acc:	91 93       	st	Z+, r25
    1ace:	e2 17       	cp	r30, r18
    1ad0:	f3 07       	cpc	r31, r19
    1ad2:	e1 f7       	brne	.-8      	; 0x1acc <_get_register+0x22>
    1ad4:	2d 98       	cbi	0x05, 5	; 5
    1ad6:	8f 71       	andi	r24, 0x1F	; 31
    1ad8:	d5 d0       	rcall	.+426    	; 0x1c84 <SPI_Write_Byte>
    1ada:	08 2f       	mov	r16, r24
    1adc:	41 2f       	mov	r20, r17
    1ade:	be 01       	movw	r22, r28
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	a5 d0       	rcall	.+330    	; 0x1c30 <SPI_ReadWrite_Block>
    1ae6:	2d 9a       	sbi	0x05, 5	; 5
    1ae8:	80 2f       	mov	r24, r16
    1aea:	df 91       	pop	r29
    1aec:	cf 91       	pop	r28
    1aee:	1f 91       	pop	r17
    1af0:	0f 91       	pop	r16
    1af2:	08 95       	ret

00001af4 <_set_rx_mode>:
    1af4:	cf 93       	push	r28
    1af6:	df 93       	push	r29
    1af8:	1f 92       	push	r1
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    1afe:	41 e0       	ldi	r20, 0x01	; 1
    1b00:	be 01       	movw	r22, r28
    1b02:	6f 5f       	subi	r22, 0xFF	; 255
    1b04:	7f 4f       	sbci	r23, 0xFF	; 255
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	d0 df       	rcall	.-96     	; 0x1aaa <_get_register>
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	80 fd       	sbrc	r24, 0
    1b0e:	10 c0       	rjmp	.+32     	; 0x1b30 <_set_rx_mode+0x3c>
    1b10:	81 60       	ori	r24, 0x01	; 1
    1b12:	89 83       	std	Y+1, r24	; 0x01
    1b14:	41 e0       	ldi	r20, 0x01	; 1
    1b16:	be 01       	movw	r22, r28
    1b18:	6f 5f       	subi	r22, 0xFF	; 255
    1b1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	b0 df       	rcall	.-160    	; 0x1a80 <_set_register>
    1b20:	85 e1       	ldi	r24, 0x15	; 21
    1b22:	8a 95       	dec	r24
    1b24:	f1 f7       	brne	.-4      	; 0x1b22 <_set_rx_mode+0x2e>
    1b26:	00 c0       	rjmp	.+0      	; 0x1b28 <_set_rx_mode+0x34>
    1b28:	85 e1       	ldi	r24, 0x15	; 21
    1b2a:	8a 95       	dec	r24
    1b2c:	f1 f7       	brne	.-4      	; 0x1b2a <_set_rx_mode+0x36>
    1b2e:	00 c0       	rjmp	.+0      	; 0x1b30 <_set_rx_mode+0x3c>
    1b30:	0f 90       	pop	r0
    1b32:	df 91       	pop	r29
    1b34:	cf 91       	pop	r28
    1b36:	08 95       	ret

00001b38 <_reset_pipe0_address>:
    1b38:	80 91 09 02 	lds	r24, 0x0209
    1b3c:	88 23       	and	r24, r24
    1b3e:	29 f0       	breq	.+10     	; 0x1b4a <_reset_pipe0_address+0x12>
    1b40:	45 e0       	ldi	r20, 0x05	; 5
    1b42:	64 e0       	ldi	r22, 0x04	; 4
    1b44:	72 e0       	ldi	r23, 0x02	; 2
    1b46:	8a e0       	ldi	r24, 0x0A	; 10
    1b48:	9b cf       	rjmp	.-202    	; 0x1a80 <_set_register>
    1b4a:	08 95       	ret

00001b4c <__vector_1>:

// Interrupt handler
ISR(INT0_vect)
{
    1b4c:	1f 92       	push	r1
    1b4e:	0f 92       	push	r0
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	0f 92       	push	r0
    1b54:	11 24       	eor	r1, r1
    1b56:	0b b6       	in	r0, 0x3b	; 59
    1b58:	0f 92       	push	r0
    1b5a:	2f 93       	push	r18
    1b5c:	3f 93       	push	r19
    1b5e:	4f 93       	push	r20
    1b60:	5f 93       	push	r21
    1b62:	6f 93       	push	r22
    1b64:	7f 93       	push	r23
    1b66:	8f 93       	push	r24
    1b68:	9f 93       	push	r25
    1b6a:	af 93       	push	r26
    1b6c:	bf 93       	push	r27
    1b6e:	ef 93       	push	r30
    1b70:	ff 93       	push	r31
    1b72:	cf 93       	push	r28
    1b74:	df 93       	push	r29
    1b76:	1f 92       	push	r1
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;
    uint8_t pipe_number;

    RADIO_CE_LOW();
    1b7c:	2c 98       	cbi	0x05, 4	; 5

    status = _get_status();
    1b7e:	7b df       	rcall	.-266    	; 0x1a76 <_get_status>
    1b80:	89 83       	std	Y+1, r24	; 0x01

    if (status & _BV(RX_DR)) {
    1b82:	86 ff       	sbrs	r24, 6
    1b84:	04 c0       	rjmp	.+8      	; 0x1b8e <__vector_1+0x42>
        pipe_number =  (status & 0xE) >> 1;
    1b86:	8e 70       	andi	r24, 0x0E	; 14
        radio_rxhandler(pipe_number);
    1b88:	86 95       	lsr	r24
    1b8a:	0e 94 66 01 	call	0x2cc	; 0x2cc <radio_rxhandler>
    }

    // We can get the TX_DS or the MAX_RT interrupt, but not both.
    if (status & _BV(TX_DS)) {
    1b8e:	89 81       	ldd	r24, Y+1	; 0x01
    1b90:	85 ff       	sbrs	r24, 5
    1b92:	1b c0       	rjmp	.+54     	; 0x1bca <__vector_1+0x7e>
    	// if there's nothing left to transmit, switch back to receive mode.
        transmit_lock = 0;
    1b94:	10 92 3d 15 	sts	0x153D, r1
        _reset_pipe0_address();
    1b98:	cf df       	rcall	.-98     	; 0x1b38 <_reset_pipe0_address>
        _set_rx_mode();
    1b9a:	ac df       	rcall	.-168    	; 0x1af4 <_set_rx_mode>

        // indicate in the history that a packet was transmitted successfully by appending a 1.
        tx_history <<= 1;
    1b9c:	80 91 02 02 	lds	r24, 0x0202
    1ba0:	90 91 03 02 	lds	r25, 0x0203
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	90 93 03 02 	sts	0x0203, r25
    1bac:	80 93 02 02 	sts	0x0202, r24
        tx_history |= 1;
    1bb0:	80 91 02 02 	lds	r24, 0x0202
    1bb4:	90 91 03 02 	lds	r25, 0x0203
    1bb8:	81 60       	ori	r24, 0x01	; 1
    1bba:	90 93 03 02 	sts	0x0203, r25
    1bbe:	80 93 02 02 	sts	0x0202, r24
        tx_last_status = RADIO_TX_SUCCESS;
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	80 93 01 02 	sts	0x0201, r24
    1bc8:	14 c0       	rjmp	.+40     	; 0x1bf2 <__vector_1+0xa6>
    } else if (status & _BV(MAX_RT)) {
    1bca:	84 ff       	sbrs	r24, 4
    1bcc:	12 c0       	rjmp	.+36     	; 0x1bf2 <__vector_1+0xa6>
        // enable SPI
       // RADIO_CSN_LOW();


        // flush the failed packet (it stays in the Tx FIFO; we could try to resend it by setting CE high)
        SPI_Write_Byte( FLUSH_TX );
    1bce:	81 ee       	ldi	r24, 0xE1	; 225
    1bd0:	59 d0       	rcall	.+178    	; 0x1c84 <SPI_Write_Byte>

        // resynch SPI
        //RADIO_CSN_HIGH();

        transmit_lock = 0;
    1bd2:	10 92 3d 15 	sts	0x153D, r1
        _reset_pipe0_address();
    1bd6:	b0 df       	rcall	.-160    	; 0x1b38 <_reset_pipe0_address>
        _set_rx_mode();
    1bd8:	8d df       	rcall	.-230    	; 0x1af4 <_set_rx_mode>

        // indicate in the history that a packet was dropped by appending a 0.
        tx_history <<= 1;
    1bda:	80 91 02 02 	lds	r24, 0x0202
    1bde:	90 91 03 02 	lds	r25, 0x0203
    1be2:	88 0f       	add	r24, r24
    1be4:	99 1f       	adc	r25, r25
    1be6:	90 93 03 02 	sts	0x0203, r25
    1bea:	80 93 02 02 	sts	0x0202, r24
        tx_last_status = RADIO_TX_MAX_RT;
    1bee:	10 92 01 02 	sts	0x0201, r1
    }

    // clear the interrupt flags.
	status = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
    1bf2:	80 e7       	ldi	r24, 0x70	; 112
    1bf4:	89 83       	std	Y+1, r24	; 0x01
	_set_register(STATUS, &status, 1);
    1bf6:	41 e0       	ldi	r20, 0x01	; 1
    1bf8:	be 01       	movw	r22, r28
    1bfa:	6f 5f       	subi	r22, 0xFF	; 255
    1bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bfe:	87 e0       	ldi	r24, 0x07	; 7
    1c00:	3f df       	rcall	.-386    	; 0x1a80 <_set_register>

    RADIO_CE_HIGH();
    1c02:	2c 9a       	sbi	0x05, 4	; 5
}
    1c04:	0f 90       	pop	r0
    1c06:	df 91       	pop	r29
    1c08:	cf 91       	pop	r28
    1c0a:	ff 91       	pop	r31
    1c0c:	ef 91       	pop	r30
    1c0e:	bf 91       	pop	r27
    1c10:	af 91       	pop	r26
    1c12:	9f 91       	pop	r25
    1c14:	8f 91       	pop	r24
    1c16:	7f 91       	pop	r23
    1c18:	6f 91       	pop	r22
    1c1a:	5f 91       	pop	r21
    1c1c:	4f 91       	pop	r20
    1c1e:	3f 91       	pop	r19
    1c20:	2f 91       	pop	r18
    1c22:	0f 90       	pop	r0
    1c24:	0b be       	out	0x3b, r0	; 59
    1c26:	0f 90       	pop	r0
    1c28:	0f be       	out	0x3f, r0	; 63
    1c2a:	0f 90       	pop	r0
    1c2c:	1f 90       	pop	r1
    1c2e:	18 95       	reti

00001c30 <SPI_ReadWrite_Block>:
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1c30:	44 23       	and	r20, r20
    1c32:	a1 f0       	breq	.+40     	; 0x1c5c <SPI_ReadWrite_Block+0x2c>
    1c34:	fc 01       	movw	r30, r24
    1c36:	a6 2f       	mov	r26, r22
    1c38:	b7 2f       	mov	r27, r23
    1c3a:	41 50       	subi	r20, 0x01	; 1
    1c3c:	24 2f       	mov	r18, r20
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	2f 5f       	subi	r18, 0xFF	; 255
    1c42:	3f 4f       	sbci	r19, 0xFF	; 255
    1c44:	28 0f       	add	r18, r24
    1c46:	39 1f       	adc	r19, r25
          SPDR = data[i];
    1c48:	91 91       	ld	r25, Z+
    1c4a:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1c4c:	0d b4       	in	r0, 0x2d	; 45
    1c4e:	07 fe       	sbrs	r0, 7
    1c50:	fd cf       	rjmp	.-6      	; 0x1c4c <SPI_ReadWrite_Block+0x1c>
          buffer[i] = SPDR;
    1c52:	9e b5       	in	r25, 0x2e	; 46
    1c54:	9d 93       	st	X+, r25
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1c56:	e2 17       	cp	r30, r18
    1c58:	f3 07       	cpc	r31, r19
    1c5a:	b1 f7       	brne	.-20     	; 0x1c48 <SPI_ReadWrite_Block+0x18>
    1c5c:	08 95       	ret

00001c5e <SPI_Write_Block>:
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1c5e:	66 23       	and	r22, r22
    1c60:	81 f0       	breq	.+32     	; 0x1c82 <SPI_Write_Block+0x24>
    1c62:	fc 01       	movw	r30, r24
    1c64:	61 50       	subi	r22, 0x01	; 1
    1c66:	26 2f       	mov	r18, r22
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	2f 5f       	subi	r18, 0xFF	; 255
    1c6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c6e:	28 0f       	add	r18, r24
    1c70:	39 1f       	adc	r19, r25
          SPDR = data[i];
    1c72:	91 91       	ld	r25, Z+
    1c74:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    1c76:	0d b4       	in	r0, 0x2d	; 45
    1c78:	07 fe       	sbrs	r0, 7
    1c7a:	fd cf       	rjmp	.-6      	; 0x1c76 <SPI_Write_Block+0x18>
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1c7c:	e2 17       	cp	r30, r18
    1c7e:	f3 07       	cpc	r31, r19
    1c80:	c1 f7       	brne	.-16     	; 0x1c72 <SPI_Write_Block+0x14>
    1c82:	08 95       	ret

00001c84 <SPI_Write_Byte>:
    }
}

uint8_t SPI_Write_Byte(uint8_t byte)
{
    SPDR = byte;
    1c84:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
    1c86:	0d b4       	in	r0, 0x2d	; 45
    1c88:	07 fe       	sbrs	r0, 7
    1c8a:	fd cf       	rjmp	.-6      	; 0x1c86 <SPI_Write_Byte+0x2>
    return SPDR;
    1c8c:	8e b5       	in	r24, 0x2e	; 46
}
    1c8e:	08 95       	ret

00001c90 <uart_init>:
void uart_reset_receive(int uart)
{
	if (uart) {
		uart_buffer_1_index = 0;
	} else {
		uart_buffer_index = 0;
    1c90:	e4 e6       	ldi	r30, 0x64	; 100
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	90 81       	ld	r25, Z
    1c96:	9d 7f       	andi	r25, 0xFD	; 253
    1c98:	90 83       	st	Z, r25
    1c9a:	32 e0       	ldi	r19, 0x02	; 2
    1c9c:	30 93 c0 00 	sts	0x00C0, r19
    1ca0:	28 e9       	ldi	r18, 0x98	; 152
    1ca2:	20 93 c1 00 	sts	0x00C1, r18
    1ca6:	96 e0       	ldi	r25, 0x06	; 6
    1ca8:	90 93 c2 00 	sts	0x00C2, r25
    1cac:	30 93 c8 00 	sts	0x00C8, r19
    1cb0:	20 93 c9 00 	sts	0x00C9, r18
    1cb4:	90 93 ca 00 	sts	0x00CA, r25
    1cb8:	23 e3       	ldi	r18, 0x33	; 51
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	30 93 c5 00 	sts	0x00C5, r19
    1cc0:	20 93 c4 00 	sts	0x00C4, r18
    1cc4:	2f ec       	ldi	r18, 0xCF	; 207
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	30 93 cd 00 	sts	0x00CD, r19
    1ccc:	20 93 cc 00 	sts	0x00CC, r18
    1cd0:	81 30       	cpi	r24, 0x01	; 1
    1cd2:	41 f0       	breq	.+16     	; 0x1ce4 <uart_init+0x54>
    1cd4:	18 f0       	brcs	.+6      	; 0x1cdc <uart_init+0x4c>
    1cd6:	82 30       	cpi	r24, 0x02	; 2
    1cd8:	49 f0       	breq	.+18     	; 0x1cec <uart_init+0x5c>
    1cda:	0c c0       	rjmp	.+24     	; 0x1cf4 <uart_init+0x64>
    1cdc:	87 e6       	ldi	r24, 0x67	; 103
    1cde:	80 93 c4 00 	sts	0x00C4, r24
    1ce2:	0b c0       	rjmp	.+22     	; 0x1cfa <uart_init+0x6a>
    1ce4:	83 e3       	ldi	r24, 0x33	; 51
    1ce6:	80 93 c4 00 	sts	0x00C4, r24
    1cea:	07 c0       	rjmp	.+14     	; 0x1cfa <uart_init+0x6a>
    1cec:	82 e2       	ldi	r24, 0x22	; 34
    1cee:	80 93 c4 00 	sts	0x00C4, r24
    1cf2:	03 c0       	rjmp	.+6      	; 0x1cfa <uart_init+0x6a>
    1cf4:	87 e6       	ldi	r24, 0x67	; 103
    1cf6:	80 93 c4 00 	sts	0x00C4, r24
    1cfa:	10 92 70 14 	sts	0x1470, r1
    1cfe:	10 92 6f 14 	sts	0x146F, r1
    1d02:	08 95       	ret

00001d04 <uart_putchar>:
    1d04:	67 2b       	or	r22, r23
    1d06:	41 f0       	breq	.+16     	; 0x1d18 <uart_putchar+0x14>
    1d08:	e8 ec       	ldi	r30, 0xC8	; 200
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	90 81       	ld	r25, Z
    1d0e:	95 ff       	sbrs	r25, 5
    1d10:	fd cf       	rjmp	.-6      	; 0x1d0c <uart_putchar+0x8>
    1d12:	80 93 ce 00 	sts	0x00CE, r24
    1d16:	08 95       	ret
    1d18:	e0 ec       	ldi	r30, 0xC0	; 192
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	90 81       	ld	r25, Z
    1d1e:	95 ff       	sbrs	r25, 5
    1d20:	fd cf       	rjmp	.-6      	; 0x1d1c <uart_putchar+0x18>
    1d22:	80 93 c6 00 	sts	0x00C6, r24
    1d26:	08 95       	ret

00001d28 <uart_send_string>:
	}
}
void uart_send_string(char *string, int uart){
    1d28:	0f 93       	push	r16
    1d2a:	1f 93       	push	r17
    1d2c:	cf 93       	push	r28
    1d2e:	df 93       	push	r29
    1d30:	ec 01       	movw	r28, r24
	
	while (*string != '\0')
    1d32:	88 81       	ld	r24, Y
    1d34:	88 23       	and	r24, r24
    1d36:	39 f0       	breq	.+14     	; 0x1d46 <uart_send_string+0x1e>
    1d38:	8b 01       	movw	r16, r22
    1d3a:	21 96       	adiw	r28, 0x01	; 1
	{
		uart_putchar(*string, uart);
    1d3c:	b8 01       	movw	r22, r16
    1d3e:	e2 df       	rcall	.-60     	; 0x1d04 <uart_putchar>
		uart_buffer_index = 0;
	}
}
void uart_send_string(char *string, int uart){
	
	while (*string != '\0')
    1d40:	89 91       	ld	r24, Y+
    1d42:	81 11       	cpse	r24, r1
    1d44:	fb cf       	rjmp	.-10     	; 0x1d3c <uart_send_string+0x14>
		uart_putchar(*string, uart);
		string++;
	}
	
	
}
    1d46:	df 91       	pop	r29
    1d48:	cf 91       	pop	r28
    1d4a:	1f 91       	pop	r17
    1d4c:	0f 91       	pop	r16
    1d4e:	08 95       	ret

00001d50 <__vector_25>:
/**
 * UART receive byte ISR
 */
ISR(USART0_RX_vect)
{
    1d50:	1f 92       	push	r1
    1d52:	0f 92       	push	r0
    1d54:	0f b6       	in	r0, 0x3f	; 63
    1d56:	0f 92       	push	r0
    1d58:	11 24       	eor	r1, r1
    1d5a:	0b b6       	in	r0, 0x3b	; 59
    1d5c:	0f 92       	push	r0
    1d5e:	8f 93       	push	r24
    1d60:	9f 93       	push	r25
    1d62:	ef 93       	push	r30
    1d64:	ff 93       	push	r31
	while(!(UCSR0A & (1<<RXC0)));
    1d66:	e0 ec       	ldi	r30, 0xC0	; 192
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	88 23       	and	r24, r24
    1d6e:	ec f7       	brge	.-6      	; 0x1d6a <__vector_25+0x1a>
    uart_buffer[uart_buffer_index] = UDR0;
    1d70:	e0 91 70 14 	lds	r30, 0x1470
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 91 c6 00 	lds	r24, 0x00C6
    1d7a:	ef 56       	subi	r30, 0x6F	; 111
    1d7c:	fb 4e       	sbci	r31, 0xEB	; 235
    1d7e:	80 83       	st	Z, r24
    uart_buffer_index = (uart_buffer_index + 1) % UART_BUFFER_SIZE;
    1d80:	80 91 70 14 	lds	r24, 0x1470
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	01 96       	adiw	r24, 0x01	; 1
    1d88:	8f 71       	andi	r24, 0x1F	; 31
    1d8a:	90 78       	andi	r25, 0x80	; 128
    1d8c:	99 23       	and	r25, r25
    1d8e:	24 f4       	brge	.+8      	; 0x1d98 <__vector_25+0x48>
    1d90:	01 97       	sbiw	r24, 0x01	; 1
    1d92:	80 6e       	ori	r24, 0xE0	; 224
    1d94:	9f 6f       	ori	r25, 0xFF	; 255
    1d96:	01 96       	adiw	r24, 0x01	; 1
    1d98:	80 93 70 14 	sts	0x1470, r24
}
    1d9c:	ff 91       	pop	r31
    1d9e:	ef 91       	pop	r30
    1da0:	9f 91       	pop	r25
    1da2:	8f 91       	pop	r24
    1da4:	0f 90       	pop	r0
    1da6:	0b be       	out	0x3b, r0	; 59
    1da8:	0f 90       	pop	r0
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	0f 90       	pop	r0
    1dae:	1f 90       	pop	r1
    1db0:	18 95       	reti

00001db2 <__vector_36>:

/**
 * UART receive byte ISR
 */
ISR(USART1_RX_vect)
{
    1db2:	1f 92       	push	r1
    1db4:	0f 92       	push	r0
    1db6:	0f b6       	in	r0, 0x3f	; 63
    1db8:	0f 92       	push	r0
    1dba:	11 24       	eor	r1, r1
    1dbc:	0b b6       	in	r0, 0x3b	; 59
    1dbe:	0f 92       	push	r0
    1dc0:	8f 93       	push	r24
    1dc2:	9f 93       	push	r25
    1dc4:	ef 93       	push	r30
    1dc6:	ff 93       	push	r31
	while(!(UCSR1A & (1<<RXC1)));
    1dc8:	e8 ec       	ldi	r30, 0xC8	; 200
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	88 23       	and	r24, r24
    1dd0:	ec f7       	brge	.-6      	; 0x1dcc <__vector_36+0x1a>
    uart_buffer_1[uart_buffer_1_index] = UDR1;
    1dd2:	e0 91 6f 14 	lds	r30, 0x146F
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 91 ce 00 	lds	r24, 0x00CE
    1ddc:	ef 58       	subi	r30, 0x8F	; 143
    1dde:	fb 4e       	sbci	r31, 0xEB	; 235
    1de0:	80 83       	st	Z, r24
    uart_buffer_1_index = (uart_buffer_1_index + 1) % UART_BUFFER_SIZE;
    1de2:	80 91 6f 14 	lds	r24, 0x146F
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	01 96       	adiw	r24, 0x01	; 1
    1dea:	8f 71       	andi	r24, 0x1F	; 31
    1dec:	90 78       	andi	r25, 0x80	; 128
    1dee:	99 23       	and	r25, r25
    1df0:	24 f4       	brge	.+8      	; 0x1dfa <__vector_36+0x48>
    1df2:	01 97       	sbiw	r24, 0x01	; 1
    1df4:	80 6e       	ori	r24, 0xE0	; 224
    1df6:	9f 6f       	ori	r25, 0xFF	; 255
    1df8:	01 96       	adiw	r24, 0x01	; 1
    1dfa:	80 93 6f 14 	sts	0x146F, r24
}
    1dfe:	ff 91       	pop	r31
    1e00:	ef 91       	pop	r30
    1e02:	9f 91       	pop	r25
    1e04:	8f 91       	pop	r24
    1e06:	0f 90       	pop	r0
    1e08:	0b be       	out	0x3b, r0	; 59
    1e0a:	0f 90       	pop	r0
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	0f 90       	pop	r0
    1e10:	1f 90       	pop	r1
    1e12:	18 95       	reti

00001e14 <__udivmodhi4>:
    1e14:	aa 1b       	sub	r26, r26
    1e16:	bb 1b       	sub	r27, r27
    1e18:	51 e1       	ldi	r21, 0x11	; 17
    1e1a:	07 c0       	rjmp	.+14     	; 0x1e2a <__udivmodhi4_ep>

00001e1c <__udivmodhi4_loop>:
    1e1c:	aa 1f       	adc	r26, r26
    1e1e:	bb 1f       	adc	r27, r27
    1e20:	a6 17       	cp	r26, r22
    1e22:	b7 07       	cpc	r27, r23
    1e24:	10 f0       	brcs	.+4      	; 0x1e2a <__udivmodhi4_ep>
    1e26:	a6 1b       	sub	r26, r22
    1e28:	b7 0b       	sbc	r27, r23

00001e2a <__udivmodhi4_ep>:
    1e2a:	88 1f       	adc	r24, r24
    1e2c:	99 1f       	adc	r25, r25
    1e2e:	5a 95       	dec	r21
    1e30:	a9 f7       	brne	.-22     	; 0x1e1c <__udivmodhi4_loop>
    1e32:	80 95       	com	r24
    1e34:	90 95       	com	r25
    1e36:	bc 01       	movw	r22, r24
    1e38:	cd 01       	movw	r24, r26
    1e3a:	08 95       	ret

00001e3c <__tablejump2__>:
    1e3c:	ee 0f       	add	r30, r30
    1e3e:	ff 1f       	adc	r31, r31
    1e40:	88 1f       	adc	r24, r24
    1e42:	8b bf       	out	0x3b, r24	; 59
    1e44:	07 90       	elpm	r0, Z+
    1e46:	f6 91       	elpm	r31, Z
    1e48:	e0 2d       	mov	r30, r0
    1e4a:	19 94       	eijmp

00001e4c <itoa>:
    1e4c:	45 32       	cpi	r20, 0x25	; 37
    1e4e:	51 05       	cpc	r21, r1
    1e50:	18 f4       	brcc	.+6      	; 0x1e58 <itoa+0xc>
    1e52:	42 30       	cpi	r20, 0x02	; 2
    1e54:	08 f0       	brcs	.+2      	; 0x1e58 <itoa+0xc>
    1e56:	04 c0       	rjmp	.+8      	; 0x1e60 <__itoa_ncheck>
    1e58:	fb 01       	movw	r30, r22
    1e5a:	10 82       	st	Z, r1
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	08 95       	ret

00001e60 <__itoa_ncheck>:
    1e60:	bb 27       	eor	r27, r27
    1e62:	4a 30       	cpi	r20, 0x0A	; 10
    1e64:	31 f4       	brne	.+12     	; 0x1e72 <__itoa_ncheck+0x12>
    1e66:	99 23       	and	r25, r25
    1e68:	22 f4       	brpl	.+8      	; 0x1e72 <__itoa_ncheck+0x12>
    1e6a:	bd e2       	ldi	r27, 0x2D	; 45
    1e6c:	90 95       	com	r25
    1e6e:	81 95       	neg	r24
    1e70:	9f 4f       	sbci	r25, 0xFF	; 255
    1e72:	01 c0       	rjmp	.+2      	; 0x1e76 <__utoa_common>

00001e74 <__utoa_ncheck>:
    1e74:	bb 27       	eor	r27, r27

00001e76 <__utoa_common>:
    1e76:	fb 01       	movw	r30, r22
    1e78:	55 27       	eor	r21, r21
    1e7a:	aa 27       	eor	r26, r26
    1e7c:	88 0f       	add	r24, r24
    1e7e:	99 1f       	adc	r25, r25
    1e80:	aa 1f       	adc	r26, r26
    1e82:	a4 17       	cp	r26, r20
    1e84:	10 f0       	brcs	.+4      	; 0x1e8a <__utoa_common+0x14>
    1e86:	a4 1b       	sub	r26, r20
    1e88:	83 95       	inc	r24
    1e8a:	50 51       	subi	r21, 0x10	; 16
    1e8c:	b9 f7       	brne	.-18     	; 0x1e7c <__utoa_common+0x6>
    1e8e:	a0 5d       	subi	r26, 0xD0	; 208
    1e90:	aa 33       	cpi	r26, 0x3A	; 58
    1e92:	08 f0       	brcs	.+2      	; 0x1e96 <__utoa_common+0x20>
    1e94:	a9 5d       	subi	r26, 0xD9	; 217
    1e96:	a1 93       	st	Z+, r26
    1e98:	00 97       	sbiw	r24, 0x00	; 0
    1e9a:	79 f7       	brne	.-34     	; 0x1e7a <__utoa_common+0x4>
    1e9c:	b1 11       	cpse	r27, r1
    1e9e:	b1 93       	st	Z+, r27
    1ea0:	11 92       	st	Z+, r1
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	33 c2       	rjmp	.+1126   	; 0x230c <strrev>

00001ea6 <sprintf>:
    1ea6:	0f 93       	push	r16
    1ea8:	1f 93       	push	r17
    1eaa:	cf 93       	push	r28
    1eac:	df 93       	push	r29
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
    1eb2:	2e 97       	sbiw	r28, 0x0e	; 14
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	f8 94       	cli
    1eb8:	de bf       	out	0x3e, r29	; 62
    1eba:	0f be       	out	0x3f, r0	; 63
    1ebc:	cd bf       	out	0x3d, r28	; 61
    1ebe:	0e 89       	ldd	r16, Y+22	; 0x16
    1ec0:	1f 89       	ldd	r17, Y+23	; 0x17
    1ec2:	86 e0       	ldi	r24, 0x06	; 6
    1ec4:	8c 83       	std	Y+4, r24	; 0x04
    1ec6:	1a 83       	std	Y+2, r17	; 0x02
    1ec8:	09 83       	std	Y+1, r16	; 0x01
    1eca:	8f ef       	ldi	r24, 0xFF	; 255
    1ecc:	9f e7       	ldi	r25, 0x7F	; 127
    1ece:	9e 83       	std	Y+6, r25	; 0x06
    1ed0:	8d 83       	std	Y+5, r24	; 0x05
    1ed2:	ae 01       	movw	r20, r28
    1ed4:	46 5e       	subi	r20, 0xE6	; 230
    1ed6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ed8:	68 8d       	ldd	r22, Y+24	; 0x18
    1eda:	79 8d       	ldd	r23, Y+25	; 0x19
    1edc:	ce 01       	movw	r24, r28
    1ede:	01 96       	adiw	r24, 0x01	; 1
    1ee0:	11 d0       	rcall	.+34     	; 0x1f04 <vfprintf>
    1ee2:	2f 81       	ldd	r18, Y+7	; 0x07
    1ee4:	38 85       	ldd	r19, Y+8	; 0x08
    1ee6:	f8 01       	movw	r30, r16
    1ee8:	e2 0f       	add	r30, r18
    1eea:	f3 1f       	adc	r31, r19
    1eec:	10 82       	st	Z, r1
    1eee:	2e 96       	adiw	r28, 0x0e	; 14
    1ef0:	0f b6       	in	r0, 0x3f	; 63
    1ef2:	f8 94       	cli
    1ef4:	de bf       	out	0x3e, r29	; 62
    1ef6:	0f be       	out	0x3f, r0	; 63
    1ef8:	cd bf       	out	0x3d, r28	; 61
    1efa:	df 91       	pop	r29
    1efc:	cf 91       	pop	r28
    1efe:	1f 91       	pop	r17
    1f00:	0f 91       	pop	r16
    1f02:	08 95       	ret

00001f04 <vfprintf>:
    1f04:	2f 92       	push	r2
    1f06:	3f 92       	push	r3
    1f08:	4f 92       	push	r4
    1f0a:	5f 92       	push	r5
    1f0c:	6f 92       	push	r6
    1f0e:	7f 92       	push	r7
    1f10:	8f 92       	push	r8
    1f12:	9f 92       	push	r9
    1f14:	af 92       	push	r10
    1f16:	bf 92       	push	r11
    1f18:	cf 92       	push	r12
    1f1a:	df 92       	push	r13
    1f1c:	ef 92       	push	r14
    1f1e:	ff 92       	push	r15
    1f20:	0f 93       	push	r16
    1f22:	1f 93       	push	r17
    1f24:	cf 93       	push	r28
    1f26:	df 93       	push	r29
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	2c 97       	sbiw	r28, 0x0c	; 12
    1f2e:	0f b6       	in	r0, 0x3f	; 63
    1f30:	f8 94       	cli
    1f32:	de bf       	out	0x3e, r29	; 62
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	cd bf       	out	0x3d, r28	; 61
    1f38:	7c 01       	movw	r14, r24
    1f3a:	6b 01       	movw	r12, r22
    1f3c:	8a 01       	movw	r16, r20
    1f3e:	fc 01       	movw	r30, r24
    1f40:	17 82       	std	Z+7, r1	; 0x07
    1f42:	16 82       	std	Z+6, r1	; 0x06
    1f44:	83 81       	ldd	r24, Z+3	; 0x03
    1f46:	81 ff       	sbrs	r24, 1
    1f48:	b0 c1       	rjmp	.+864    	; 0x22aa <__stack+0xab>
    1f4a:	ce 01       	movw	r24, r28
    1f4c:	01 96       	adiw	r24, 0x01	; 1
    1f4e:	4c 01       	movw	r8, r24
    1f50:	f7 01       	movw	r30, r14
    1f52:	93 81       	ldd	r25, Z+3	; 0x03
    1f54:	f6 01       	movw	r30, r12
    1f56:	93 fd       	sbrc	r25, 3
    1f58:	85 91       	lpm	r24, Z+
    1f5a:	93 ff       	sbrs	r25, 3
    1f5c:	81 91       	ld	r24, Z+
    1f5e:	6f 01       	movw	r12, r30
    1f60:	88 23       	and	r24, r24
    1f62:	09 f4       	brne	.+2      	; 0x1f66 <vfprintf+0x62>
    1f64:	9e c1       	rjmp	.+828    	; 0x22a2 <__stack+0xa3>
    1f66:	85 32       	cpi	r24, 0x25	; 37
    1f68:	39 f4       	brne	.+14     	; 0x1f78 <vfprintf+0x74>
    1f6a:	93 fd       	sbrc	r25, 3
    1f6c:	85 91       	lpm	r24, Z+
    1f6e:	93 ff       	sbrs	r25, 3
    1f70:	81 91       	ld	r24, Z+
    1f72:	6f 01       	movw	r12, r30
    1f74:	85 32       	cpi	r24, 0x25	; 37
    1f76:	21 f4       	brne	.+8      	; 0x1f80 <vfprintf+0x7c>
    1f78:	b7 01       	movw	r22, r14
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	d7 d1       	rcall	.+942    	; 0x232c <fputc>
    1f7e:	e8 cf       	rjmp	.-48     	; 0x1f50 <vfprintf+0x4c>
    1f80:	51 2c       	mov	r5, r1
    1f82:	31 2c       	mov	r3, r1
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	20 32       	cpi	r18, 0x20	; 32
    1f88:	a0 f4       	brcc	.+40     	; 0x1fb2 <vfprintf+0xae>
    1f8a:	8b 32       	cpi	r24, 0x2B	; 43
    1f8c:	69 f0       	breq	.+26     	; 0x1fa8 <vfprintf+0xa4>
    1f8e:	30 f4       	brcc	.+12     	; 0x1f9c <vfprintf+0x98>
    1f90:	80 32       	cpi	r24, 0x20	; 32
    1f92:	59 f0       	breq	.+22     	; 0x1faa <vfprintf+0xa6>
    1f94:	83 32       	cpi	r24, 0x23	; 35
    1f96:	69 f4       	brne	.+26     	; 0x1fb2 <vfprintf+0xae>
    1f98:	20 61       	ori	r18, 0x10	; 16
    1f9a:	2c c0       	rjmp	.+88     	; 0x1ff4 <vfprintf+0xf0>
    1f9c:	8d 32       	cpi	r24, 0x2D	; 45
    1f9e:	39 f0       	breq	.+14     	; 0x1fae <vfprintf+0xaa>
    1fa0:	80 33       	cpi	r24, 0x30	; 48
    1fa2:	39 f4       	brne	.+14     	; 0x1fb2 <vfprintf+0xae>
    1fa4:	21 60       	ori	r18, 0x01	; 1
    1fa6:	26 c0       	rjmp	.+76     	; 0x1ff4 <vfprintf+0xf0>
    1fa8:	22 60       	ori	r18, 0x02	; 2
    1faa:	24 60       	ori	r18, 0x04	; 4
    1fac:	23 c0       	rjmp	.+70     	; 0x1ff4 <vfprintf+0xf0>
    1fae:	28 60       	ori	r18, 0x08	; 8
    1fb0:	21 c0       	rjmp	.+66     	; 0x1ff4 <vfprintf+0xf0>
    1fb2:	27 fd       	sbrc	r18, 7
    1fb4:	27 c0       	rjmp	.+78     	; 0x2004 <vfprintf+0x100>
    1fb6:	30 ed       	ldi	r19, 0xD0	; 208
    1fb8:	38 0f       	add	r19, r24
    1fba:	3a 30       	cpi	r19, 0x0A	; 10
    1fbc:	78 f4       	brcc	.+30     	; 0x1fdc <vfprintf+0xd8>
    1fbe:	26 ff       	sbrs	r18, 6
    1fc0:	06 c0       	rjmp	.+12     	; 0x1fce <vfprintf+0xca>
    1fc2:	fa e0       	ldi	r31, 0x0A	; 10
    1fc4:	5f 9e       	mul	r5, r31
    1fc6:	30 0d       	add	r19, r0
    1fc8:	11 24       	eor	r1, r1
    1fca:	53 2e       	mov	r5, r19
    1fcc:	13 c0       	rjmp	.+38     	; 0x1ff4 <vfprintf+0xf0>
    1fce:	8a e0       	ldi	r24, 0x0A	; 10
    1fd0:	38 9e       	mul	r3, r24
    1fd2:	30 0d       	add	r19, r0
    1fd4:	11 24       	eor	r1, r1
    1fd6:	33 2e       	mov	r3, r19
    1fd8:	20 62       	ori	r18, 0x20	; 32
    1fda:	0c c0       	rjmp	.+24     	; 0x1ff4 <vfprintf+0xf0>
    1fdc:	8e 32       	cpi	r24, 0x2E	; 46
    1fde:	21 f4       	brne	.+8      	; 0x1fe8 <vfprintf+0xe4>
    1fe0:	26 fd       	sbrc	r18, 6
    1fe2:	5f c1       	rjmp	.+702    	; 0x22a2 <__stack+0xa3>
    1fe4:	20 64       	ori	r18, 0x40	; 64
    1fe6:	06 c0       	rjmp	.+12     	; 0x1ff4 <vfprintf+0xf0>
    1fe8:	8c 36       	cpi	r24, 0x6C	; 108
    1fea:	11 f4       	brne	.+4      	; 0x1ff0 <vfprintf+0xec>
    1fec:	20 68       	ori	r18, 0x80	; 128
    1fee:	02 c0       	rjmp	.+4      	; 0x1ff4 <vfprintf+0xf0>
    1ff0:	88 36       	cpi	r24, 0x68	; 104
    1ff2:	41 f4       	brne	.+16     	; 0x2004 <vfprintf+0x100>
    1ff4:	f6 01       	movw	r30, r12
    1ff6:	93 fd       	sbrc	r25, 3
    1ff8:	85 91       	lpm	r24, Z+
    1ffa:	93 ff       	sbrs	r25, 3
    1ffc:	81 91       	ld	r24, Z+
    1ffe:	6f 01       	movw	r12, r30
    2000:	81 11       	cpse	r24, r1
    2002:	c1 cf       	rjmp	.-126    	; 0x1f86 <vfprintf+0x82>
    2004:	98 2f       	mov	r25, r24
    2006:	9f 7d       	andi	r25, 0xDF	; 223
    2008:	95 54       	subi	r25, 0x45	; 69
    200a:	93 30       	cpi	r25, 0x03	; 3
    200c:	28 f4       	brcc	.+10     	; 0x2018 <vfprintf+0x114>
    200e:	0c 5f       	subi	r16, 0xFC	; 252
    2010:	1f 4f       	sbci	r17, 0xFF	; 255
    2012:	ff e3       	ldi	r31, 0x3F	; 63
    2014:	f9 83       	std	Y+1, r31	; 0x01
    2016:	0d c0       	rjmp	.+26     	; 0x2032 <vfprintf+0x12e>
    2018:	83 36       	cpi	r24, 0x63	; 99
    201a:	31 f0       	breq	.+12     	; 0x2028 <vfprintf+0x124>
    201c:	83 37       	cpi	r24, 0x73	; 115
    201e:	71 f0       	breq	.+28     	; 0x203c <vfprintf+0x138>
    2020:	83 35       	cpi	r24, 0x53	; 83
    2022:	09 f0       	breq	.+2      	; 0x2026 <vfprintf+0x122>
    2024:	57 c0       	rjmp	.+174    	; 0x20d4 <vfprintf+0x1d0>
    2026:	21 c0       	rjmp	.+66     	; 0x206a <vfprintf+0x166>
    2028:	f8 01       	movw	r30, r16
    202a:	80 81       	ld	r24, Z
    202c:	89 83       	std	Y+1, r24	; 0x01
    202e:	0e 5f       	subi	r16, 0xFE	; 254
    2030:	1f 4f       	sbci	r17, 0xFF	; 255
    2032:	44 24       	eor	r4, r4
    2034:	43 94       	inc	r4
    2036:	51 2c       	mov	r5, r1
    2038:	54 01       	movw	r10, r8
    203a:	14 c0       	rjmp	.+40     	; 0x2064 <vfprintf+0x160>
    203c:	38 01       	movw	r6, r16
    203e:	f2 e0       	ldi	r31, 0x02	; 2
    2040:	6f 0e       	add	r6, r31
    2042:	71 1c       	adc	r7, r1
    2044:	f8 01       	movw	r30, r16
    2046:	a0 80       	ld	r10, Z
    2048:	b1 80       	ldd	r11, Z+1	; 0x01
    204a:	26 ff       	sbrs	r18, 6
    204c:	03 c0       	rjmp	.+6      	; 0x2054 <vfprintf+0x150>
    204e:	65 2d       	mov	r22, r5
    2050:	70 e0       	ldi	r23, 0x00	; 0
    2052:	02 c0       	rjmp	.+4      	; 0x2058 <vfprintf+0x154>
    2054:	6f ef       	ldi	r22, 0xFF	; 255
    2056:	7f ef       	ldi	r23, 0xFF	; 255
    2058:	c5 01       	movw	r24, r10
    205a:	2c 87       	std	Y+12, r18	; 0x0c
    205c:	4c d1       	rcall	.+664    	; 0x22f6 <strnlen>
    205e:	2c 01       	movw	r4, r24
    2060:	83 01       	movw	r16, r6
    2062:	2c 85       	ldd	r18, Y+12	; 0x0c
    2064:	2f 77       	andi	r18, 0x7F	; 127
    2066:	22 2e       	mov	r2, r18
    2068:	16 c0       	rjmp	.+44     	; 0x2096 <vfprintf+0x192>
    206a:	38 01       	movw	r6, r16
    206c:	f2 e0       	ldi	r31, 0x02	; 2
    206e:	6f 0e       	add	r6, r31
    2070:	71 1c       	adc	r7, r1
    2072:	f8 01       	movw	r30, r16
    2074:	a0 80       	ld	r10, Z
    2076:	b1 80       	ldd	r11, Z+1	; 0x01
    2078:	26 ff       	sbrs	r18, 6
    207a:	03 c0       	rjmp	.+6      	; 0x2082 <vfprintf+0x17e>
    207c:	65 2d       	mov	r22, r5
    207e:	70 e0       	ldi	r23, 0x00	; 0
    2080:	02 c0       	rjmp	.+4      	; 0x2086 <vfprintf+0x182>
    2082:	6f ef       	ldi	r22, 0xFF	; 255
    2084:	7f ef       	ldi	r23, 0xFF	; 255
    2086:	c5 01       	movw	r24, r10
    2088:	2c 87       	std	Y+12, r18	; 0x0c
    208a:	2a d1       	rcall	.+596    	; 0x22e0 <strnlen_P>
    208c:	2c 01       	movw	r4, r24
    208e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2090:	20 68       	ori	r18, 0x80	; 128
    2092:	22 2e       	mov	r2, r18
    2094:	83 01       	movw	r16, r6
    2096:	23 fc       	sbrc	r2, 3
    2098:	19 c0       	rjmp	.+50     	; 0x20cc <vfprintf+0x1c8>
    209a:	83 2d       	mov	r24, r3
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	48 16       	cp	r4, r24
    20a0:	59 06       	cpc	r5, r25
    20a2:	a0 f4       	brcc	.+40     	; 0x20cc <vfprintf+0x1c8>
    20a4:	b7 01       	movw	r22, r14
    20a6:	80 e2       	ldi	r24, 0x20	; 32
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	40 d1       	rcall	.+640    	; 0x232c <fputc>
    20ac:	3a 94       	dec	r3
    20ae:	f5 cf       	rjmp	.-22     	; 0x209a <vfprintf+0x196>
    20b0:	f5 01       	movw	r30, r10
    20b2:	27 fc       	sbrc	r2, 7
    20b4:	85 91       	lpm	r24, Z+
    20b6:	27 fe       	sbrs	r2, 7
    20b8:	81 91       	ld	r24, Z+
    20ba:	5f 01       	movw	r10, r30
    20bc:	b7 01       	movw	r22, r14
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	35 d1       	rcall	.+618    	; 0x232c <fputc>
    20c2:	31 10       	cpse	r3, r1
    20c4:	3a 94       	dec	r3
    20c6:	f1 e0       	ldi	r31, 0x01	; 1
    20c8:	4f 1a       	sub	r4, r31
    20ca:	51 08       	sbc	r5, r1
    20cc:	41 14       	cp	r4, r1
    20ce:	51 04       	cpc	r5, r1
    20d0:	79 f7       	brne	.-34     	; 0x20b0 <vfprintf+0x1ac>
    20d2:	de c0       	rjmp	.+444    	; 0x2290 <__stack+0x91>
    20d4:	84 36       	cpi	r24, 0x64	; 100
    20d6:	11 f0       	breq	.+4      	; 0x20dc <vfprintf+0x1d8>
    20d8:	89 36       	cpi	r24, 0x69	; 105
    20da:	31 f5       	brne	.+76     	; 0x2128 <vfprintf+0x224>
    20dc:	f8 01       	movw	r30, r16
    20de:	27 ff       	sbrs	r18, 7
    20e0:	07 c0       	rjmp	.+14     	; 0x20f0 <vfprintf+0x1ec>
    20e2:	60 81       	ld	r22, Z
    20e4:	71 81       	ldd	r23, Z+1	; 0x01
    20e6:	82 81       	ldd	r24, Z+2	; 0x02
    20e8:	93 81       	ldd	r25, Z+3	; 0x03
    20ea:	0c 5f       	subi	r16, 0xFC	; 252
    20ec:	1f 4f       	sbci	r17, 0xFF	; 255
    20ee:	08 c0       	rjmp	.+16     	; 0x2100 <vfprintf+0x1fc>
    20f0:	60 81       	ld	r22, Z
    20f2:	71 81       	ldd	r23, Z+1	; 0x01
    20f4:	07 2e       	mov	r0, r23
    20f6:	00 0c       	add	r0, r0
    20f8:	88 0b       	sbc	r24, r24
    20fa:	99 0b       	sbc	r25, r25
    20fc:	0e 5f       	subi	r16, 0xFE	; 254
    20fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2100:	2f 76       	andi	r18, 0x6F	; 111
    2102:	72 2e       	mov	r7, r18
    2104:	97 ff       	sbrs	r25, 7
    2106:	09 c0       	rjmp	.+18     	; 0x211a <vfprintf+0x216>
    2108:	90 95       	com	r25
    210a:	80 95       	com	r24
    210c:	70 95       	com	r23
    210e:	61 95       	neg	r22
    2110:	7f 4f       	sbci	r23, 0xFF	; 255
    2112:	8f 4f       	sbci	r24, 0xFF	; 255
    2114:	9f 4f       	sbci	r25, 0xFF	; 255
    2116:	20 68       	ori	r18, 0x80	; 128
    2118:	72 2e       	mov	r7, r18
    211a:	2a e0       	ldi	r18, 0x0A	; 10
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	a4 01       	movw	r20, r8
    2120:	3d d1       	rcall	.+634    	; 0x239c <__ultoa_invert>
    2122:	a8 2e       	mov	r10, r24
    2124:	a8 18       	sub	r10, r8
    2126:	43 c0       	rjmp	.+134    	; 0x21ae <vfprintf+0x2aa>
    2128:	85 37       	cpi	r24, 0x75	; 117
    212a:	29 f4       	brne	.+10     	; 0x2136 <vfprintf+0x232>
    212c:	2f 7e       	andi	r18, 0xEF	; 239
    212e:	b2 2e       	mov	r11, r18
    2130:	2a e0       	ldi	r18, 0x0A	; 10
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	25 c0       	rjmp	.+74     	; 0x2180 <vfprintf+0x27c>
    2136:	f2 2f       	mov	r31, r18
    2138:	f9 7f       	andi	r31, 0xF9	; 249
    213a:	bf 2e       	mov	r11, r31
    213c:	8f 36       	cpi	r24, 0x6F	; 111
    213e:	c1 f0       	breq	.+48     	; 0x2170 <vfprintf+0x26c>
    2140:	18 f4       	brcc	.+6      	; 0x2148 <vfprintf+0x244>
    2142:	88 35       	cpi	r24, 0x58	; 88
    2144:	79 f0       	breq	.+30     	; 0x2164 <vfprintf+0x260>
    2146:	ad c0       	rjmp	.+346    	; 0x22a2 <__stack+0xa3>
    2148:	80 37       	cpi	r24, 0x70	; 112
    214a:	19 f0       	breq	.+6      	; 0x2152 <vfprintf+0x24e>
    214c:	88 37       	cpi	r24, 0x78	; 120
    214e:	21 f0       	breq	.+8      	; 0x2158 <vfprintf+0x254>
    2150:	a8 c0       	rjmp	.+336    	; 0x22a2 <__stack+0xa3>
    2152:	2f 2f       	mov	r18, r31
    2154:	20 61       	ori	r18, 0x10	; 16
    2156:	b2 2e       	mov	r11, r18
    2158:	b4 fe       	sbrs	r11, 4
    215a:	0d c0       	rjmp	.+26     	; 0x2176 <vfprintf+0x272>
    215c:	8b 2d       	mov	r24, r11
    215e:	84 60       	ori	r24, 0x04	; 4
    2160:	b8 2e       	mov	r11, r24
    2162:	09 c0       	rjmp	.+18     	; 0x2176 <vfprintf+0x272>
    2164:	24 ff       	sbrs	r18, 4
    2166:	0a c0       	rjmp	.+20     	; 0x217c <vfprintf+0x278>
    2168:	9f 2f       	mov	r25, r31
    216a:	96 60       	ori	r25, 0x06	; 6
    216c:	b9 2e       	mov	r11, r25
    216e:	06 c0       	rjmp	.+12     	; 0x217c <vfprintf+0x278>
    2170:	28 e0       	ldi	r18, 0x08	; 8
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	05 c0       	rjmp	.+10     	; 0x2180 <vfprintf+0x27c>
    2176:	20 e1       	ldi	r18, 0x10	; 16
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	02 c0       	rjmp	.+4      	; 0x2180 <vfprintf+0x27c>
    217c:	20 e1       	ldi	r18, 0x10	; 16
    217e:	32 e0       	ldi	r19, 0x02	; 2
    2180:	f8 01       	movw	r30, r16
    2182:	b7 fe       	sbrs	r11, 7
    2184:	07 c0       	rjmp	.+14     	; 0x2194 <vfprintf+0x290>
    2186:	60 81       	ld	r22, Z
    2188:	71 81       	ldd	r23, Z+1	; 0x01
    218a:	82 81       	ldd	r24, Z+2	; 0x02
    218c:	93 81       	ldd	r25, Z+3	; 0x03
    218e:	0c 5f       	subi	r16, 0xFC	; 252
    2190:	1f 4f       	sbci	r17, 0xFF	; 255
    2192:	06 c0       	rjmp	.+12     	; 0x21a0 <vfprintf+0x29c>
    2194:	60 81       	ld	r22, Z
    2196:	71 81       	ldd	r23, Z+1	; 0x01
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	0e 5f       	subi	r16, 0xFE	; 254
    219e:	1f 4f       	sbci	r17, 0xFF	; 255
    21a0:	a4 01       	movw	r20, r8
    21a2:	fc d0       	rcall	.+504    	; 0x239c <__ultoa_invert>
    21a4:	a8 2e       	mov	r10, r24
    21a6:	a8 18       	sub	r10, r8
    21a8:	fb 2d       	mov	r31, r11
    21aa:	ff 77       	andi	r31, 0x7F	; 127
    21ac:	7f 2e       	mov	r7, r31
    21ae:	76 fe       	sbrs	r7, 6
    21b0:	0b c0       	rjmp	.+22     	; 0x21c8 <vfprintf+0x2c4>
    21b2:	37 2d       	mov	r19, r7
    21b4:	3e 7f       	andi	r19, 0xFE	; 254
    21b6:	a5 14       	cp	r10, r5
    21b8:	50 f4       	brcc	.+20     	; 0x21ce <vfprintf+0x2ca>
    21ba:	74 fe       	sbrs	r7, 4
    21bc:	0a c0       	rjmp	.+20     	; 0x21d2 <vfprintf+0x2ce>
    21be:	72 fc       	sbrc	r7, 2
    21c0:	08 c0       	rjmp	.+16     	; 0x21d2 <vfprintf+0x2ce>
    21c2:	37 2d       	mov	r19, r7
    21c4:	3e 7e       	andi	r19, 0xEE	; 238
    21c6:	05 c0       	rjmp	.+10     	; 0x21d2 <vfprintf+0x2ce>
    21c8:	ba 2c       	mov	r11, r10
    21ca:	37 2d       	mov	r19, r7
    21cc:	03 c0       	rjmp	.+6      	; 0x21d4 <vfprintf+0x2d0>
    21ce:	ba 2c       	mov	r11, r10
    21d0:	01 c0       	rjmp	.+2      	; 0x21d4 <vfprintf+0x2d0>
    21d2:	b5 2c       	mov	r11, r5
    21d4:	34 ff       	sbrs	r19, 4
    21d6:	0d c0       	rjmp	.+26     	; 0x21f2 <vfprintf+0x2ee>
    21d8:	fe 01       	movw	r30, r28
    21da:	ea 0d       	add	r30, r10
    21dc:	f1 1d       	adc	r31, r1
    21de:	80 81       	ld	r24, Z
    21e0:	80 33       	cpi	r24, 0x30	; 48
    21e2:	11 f4       	brne	.+4      	; 0x21e8 <vfprintf+0x2e4>
    21e4:	39 7e       	andi	r19, 0xE9	; 233
    21e6:	09 c0       	rjmp	.+18     	; 0x21fa <vfprintf+0x2f6>
    21e8:	32 ff       	sbrs	r19, 2
    21ea:	06 c0       	rjmp	.+12     	; 0x21f8 <vfprintf+0x2f4>
    21ec:	b3 94       	inc	r11
    21ee:	b3 94       	inc	r11
    21f0:	04 c0       	rjmp	.+8      	; 0x21fa <vfprintf+0x2f6>
    21f2:	83 2f       	mov	r24, r19
    21f4:	86 78       	andi	r24, 0x86	; 134
    21f6:	09 f0       	breq	.+2      	; 0x21fa <vfprintf+0x2f6>
    21f8:	b3 94       	inc	r11
    21fa:	33 fd       	sbrc	r19, 3
    21fc:	12 c0       	rjmp	.+36     	; 0x2222 <__stack+0x23>
    21fe:	30 ff       	sbrs	r19, 0
    2200:	06 c0       	rjmp	.+12     	; 0x220e <__stack+0xf>
    2202:	5a 2c       	mov	r5, r10
    2204:	b3 14       	cp	r11, r3
    2206:	18 f4       	brcc	.+6      	; 0x220e <__stack+0xf>
    2208:	53 0c       	add	r5, r3
    220a:	5b 18       	sub	r5, r11
    220c:	b3 2c       	mov	r11, r3
    220e:	b3 14       	cp	r11, r3
    2210:	60 f4       	brcc	.+24     	; 0x222a <__stack+0x2b>
    2212:	b7 01       	movw	r22, r14
    2214:	80 e2       	ldi	r24, 0x20	; 32
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	3c 87       	std	Y+12, r19	; 0x0c
    221a:	88 d0       	rcall	.+272    	; 0x232c <fputc>
    221c:	b3 94       	inc	r11
    221e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2220:	f6 cf       	rjmp	.-20     	; 0x220e <__stack+0xf>
    2222:	b3 14       	cp	r11, r3
    2224:	10 f4       	brcc	.+4      	; 0x222a <__stack+0x2b>
    2226:	3b 18       	sub	r3, r11
    2228:	01 c0       	rjmp	.+2      	; 0x222c <__stack+0x2d>
    222a:	31 2c       	mov	r3, r1
    222c:	34 ff       	sbrs	r19, 4
    222e:	11 c0       	rjmp	.+34     	; 0x2252 <__stack+0x53>
    2230:	b7 01       	movw	r22, r14
    2232:	80 e3       	ldi	r24, 0x30	; 48
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	3c 87       	std	Y+12, r19	; 0x0c
    2238:	79 d0       	rcall	.+242    	; 0x232c <fputc>
    223a:	3c 85       	ldd	r19, Y+12	; 0x0c
    223c:	32 ff       	sbrs	r19, 2
    223e:	16 c0       	rjmp	.+44     	; 0x226c <__stack+0x6d>
    2240:	31 fd       	sbrc	r19, 1
    2242:	03 c0       	rjmp	.+6      	; 0x224a <__stack+0x4b>
    2244:	88 e7       	ldi	r24, 0x78	; 120
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	02 c0       	rjmp	.+4      	; 0x224e <__stack+0x4f>
    224a:	88 e5       	ldi	r24, 0x58	; 88
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	b7 01       	movw	r22, r14
    2250:	0c c0       	rjmp	.+24     	; 0x226a <__stack+0x6b>
    2252:	83 2f       	mov	r24, r19
    2254:	86 78       	andi	r24, 0x86	; 134
    2256:	51 f0       	breq	.+20     	; 0x226c <__stack+0x6d>
    2258:	31 ff       	sbrs	r19, 1
    225a:	02 c0       	rjmp	.+4      	; 0x2260 <__stack+0x61>
    225c:	8b e2       	ldi	r24, 0x2B	; 43
    225e:	01 c0       	rjmp	.+2      	; 0x2262 <__stack+0x63>
    2260:	80 e2       	ldi	r24, 0x20	; 32
    2262:	37 fd       	sbrc	r19, 7
    2264:	8d e2       	ldi	r24, 0x2D	; 45
    2266:	b7 01       	movw	r22, r14
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	60 d0       	rcall	.+192    	; 0x232c <fputc>
    226c:	a5 14       	cp	r10, r5
    226e:	30 f4       	brcc	.+12     	; 0x227c <__stack+0x7d>
    2270:	b7 01       	movw	r22, r14
    2272:	80 e3       	ldi	r24, 0x30	; 48
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	5a d0       	rcall	.+180    	; 0x232c <fputc>
    2278:	5a 94       	dec	r5
    227a:	f8 cf       	rjmp	.-16     	; 0x226c <__stack+0x6d>
    227c:	aa 94       	dec	r10
    227e:	f4 01       	movw	r30, r8
    2280:	ea 0d       	add	r30, r10
    2282:	f1 1d       	adc	r31, r1
    2284:	80 81       	ld	r24, Z
    2286:	b7 01       	movw	r22, r14
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	50 d0       	rcall	.+160    	; 0x232c <fputc>
    228c:	a1 10       	cpse	r10, r1
    228e:	f6 cf       	rjmp	.-20     	; 0x227c <__stack+0x7d>
    2290:	33 20       	and	r3, r3
    2292:	09 f4       	brne	.+2      	; 0x2296 <__stack+0x97>
    2294:	5d ce       	rjmp	.-838    	; 0x1f50 <vfprintf+0x4c>
    2296:	b7 01       	movw	r22, r14
    2298:	80 e2       	ldi	r24, 0x20	; 32
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	47 d0       	rcall	.+142    	; 0x232c <fputc>
    229e:	3a 94       	dec	r3
    22a0:	f7 cf       	rjmp	.-18     	; 0x2290 <__stack+0x91>
    22a2:	f7 01       	movw	r30, r14
    22a4:	86 81       	ldd	r24, Z+6	; 0x06
    22a6:	97 81       	ldd	r25, Z+7	; 0x07
    22a8:	02 c0       	rjmp	.+4      	; 0x22ae <__stack+0xaf>
    22aa:	8f ef       	ldi	r24, 0xFF	; 255
    22ac:	9f ef       	ldi	r25, 0xFF	; 255
    22ae:	2c 96       	adiw	r28, 0x0c	; 12
    22b0:	0f b6       	in	r0, 0x3f	; 63
    22b2:	f8 94       	cli
    22b4:	de bf       	out	0x3e, r29	; 62
    22b6:	0f be       	out	0x3f, r0	; 63
    22b8:	cd bf       	out	0x3d, r28	; 61
    22ba:	df 91       	pop	r29
    22bc:	cf 91       	pop	r28
    22be:	1f 91       	pop	r17
    22c0:	0f 91       	pop	r16
    22c2:	ff 90       	pop	r15
    22c4:	ef 90       	pop	r14
    22c6:	df 90       	pop	r13
    22c8:	cf 90       	pop	r12
    22ca:	bf 90       	pop	r11
    22cc:	af 90       	pop	r10
    22ce:	9f 90       	pop	r9
    22d0:	8f 90       	pop	r8
    22d2:	7f 90       	pop	r7
    22d4:	6f 90       	pop	r6
    22d6:	5f 90       	pop	r5
    22d8:	4f 90       	pop	r4
    22da:	3f 90       	pop	r3
    22dc:	2f 90       	pop	r2
    22de:	08 95       	ret

000022e0 <strnlen_P>:
    22e0:	fc 01       	movw	r30, r24
    22e2:	05 90       	lpm	r0, Z+
    22e4:	61 50       	subi	r22, 0x01	; 1
    22e6:	70 40       	sbci	r23, 0x00	; 0
    22e8:	01 10       	cpse	r0, r1
    22ea:	d8 f7       	brcc	.-10     	; 0x22e2 <strnlen_P+0x2>
    22ec:	80 95       	com	r24
    22ee:	90 95       	com	r25
    22f0:	8e 0f       	add	r24, r30
    22f2:	9f 1f       	adc	r25, r31
    22f4:	08 95       	ret

000022f6 <strnlen>:
    22f6:	fc 01       	movw	r30, r24
    22f8:	61 50       	subi	r22, 0x01	; 1
    22fa:	70 40       	sbci	r23, 0x00	; 0
    22fc:	01 90       	ld	r0, Z+
    22fe:	01 10       	cpse	r0, r1
    2300:	d8 f7       	brcc	.-10     	; 0x22f8 <strnlen+0x2>
    2302:	80 95       	com	r24
    2304:	90 95       	com	r25
    2306:	8e 0f       	add	r24, r30
    2308:	9f 1f       	adc	r25, r31
    230a:	08 95       	ret

0000230c <strrev>:
    230c:	dc 01       	movw	r26, r24
    230e:	fc 01       	movw	r30, r24
    2310:	67 2f       	mov	r22, r23
    2312:	71 91       	ld	r23, Z+
    2314:	77 23       	and	r23, r23
    2316:	e1 f7       	brne	.-8      	; 0x2310 <strrev+0x4>
    2318:	32 97       	sbiw	r30, 0x02	; 2
    231a:	04 c0       	rjmp	.+8      	; 0x2324 <strrev+0x18>
    231c:	7c 91       	ld	r23, X
    231e:	6d 93       	st	X+, r22
    2320:	70 83       	st	Z, r23
    2322:	62 91       	ld	r22, -Z
    2324:	ae 17       	cp	r26, r30
    2326:	bf 07       	cpc	r27, r31
    2328:	c8 f3       	brcs	.-14     	; 0x231c <strrev+0x10>
    232a:	08 95       	ret

0000232c <fputc>:
    232c:	0f 93       	push	r16
    232e:	1f 93       	push	r17
    2330:	cf 93       	push	r28
    2332:	df 93       	push	r29
    2334:	fb 01       	movw	r30, r22
    2336:	23 81       	ldd	r18, Z+3	; 0x03
    2338:	21 fd       	sbrc	r18, 1
    233a:	03 c0       	rjmp	.+6      	; 0x2342 <fputc+0x16>
    233c:	8f ef       	ldi	r24, 0xFF	; 255
    233e:	9f ef       	ldi	r25, 0xFF	; 255
    2340:	28 c0       	rjmp	.+80     	; 0x2392 <fputc+0x66>
    2342:	22 ff       	sbrs	r18, 2
    2344:	16 c0       	rjmp	.+44     	; 0x2372 <fputc+0x46>
    2346:	46 81       	ldd	r20, Z+6	; 0x06
    2348:	57 81       	ldd	r21, Z+7	; 0x07
    234a:	24 81       	ldd	r18, Z+4	; 0x04
    234c:	35 81       	ldd	r19, Z+5	; 0x05
    234e:	42 17       	cp	r20, r18
    2350:	53 07       	cpc	r21, r19
    2352:	44 f4       	brge	.+16     	; 0x2364 <fputc+0x38>
    2354:	a0 81       	ld	r26, Z
    2356:	b1 81       	ldd	r27, Z+1	; 0x01
    2358:	9d 01       	movw	r18, r26
    235a:	2f 5f       	subi	r18, 0xFF	; 255
    235c:	3f 4f       	sbci	r19, 0xFF	; 255
    235e:	31 83       	std	Z+1, r19	; 0x01
    2360:	20 83       	st	Z, r18
    2362:	8c 93       	st	X, r24
    2364:	26 81       	ldd	r18, Z+6	; 0x06
    2366:	37 81       	ldd	r19, Z+7	; 0x07
    2368:	2f 5f       	subi	r18, 0xFF	; 255
    236a:	3f 4f       	sbci	r19, 0xFF	; 255
    236c:	37 83       	std	Z+7, r19	; 0x07
    236e:	26 83       	std	Z+6, r18	; 0x06
    2370:	10 c0       	rjmp	.+32     	; 0x2392 <fputc+0x66>
    2372:	eb 01       	movw	r28, r22
    2374:	09 2f       	mov	r16, r25
    2376:	18 2f       	mov	r17, r24
    2378:	00 84       	ldd	r0, Z+8	; 0x08
    237a:	f1 85       	ldd	r31, Z+9	; 0x09
    237c:	e0 2d       	mov	r30, r0
    237e:	19 95       	eicall
    2380:	89 2b       	or	r24, r25
    2382:	e1 f6       	brne	.-72     	; 0x233c <fputc+0x10>
    2384:	8e 81       	ldd	r24, Y+6	; 0x06
    2386:	9f 81       	ldd	r25, Y+7	; 0x07
    2388:	01 96       	adiw	r24, 0x01	; 1
    238a:	9f 83       	std	Y+7, r25	; 0x07
    238c:	8e 83       	std	Y+6, r24	; 0x06
    238e:	81 2f       	mov	r24, r17
    2390:	90 2f       	mov	r25, r16
    2392:	df 91       	pop	r29
    2394:	cf 91       	pop	r28
    2396:	1f 91       	pop	r17
    2398:	0f 91       	pop	r16
    239a:	08 95       	ret

0000239c <__ultoa_invert>:
    239c:	fa 01       	movw	r30, r20
    239e:	aa 27       	eor	r26, r26
    23a0:	28 30       	cpi	r18, 0x08	; 8
    23a2:	51 f1       	breq	.+84     	; 0x23f8 <__ultoa_invert+0x5c>
    23a4:	20 31       	cpi	r18, 0x10	; 16
    23a6:	81 f1       	breq	.+96     	; 0x2408 <__ultoa_invert+0x6c>
    23a8:	e8 94       	clt
    23aa:	6f 93       	push	r22
    23ac:	6e 7f       	andi	r22, 0xFE	; 254
    23ae:	6e 5f       	subi	r22, 0xFE	; 254
    23b0:	7f 4f       	sbci	r23, 0xFF	; 255
    23b2:	8f 4f       	sbci	r24, 0xFF	; 255
    23b4:	9f 4f       	sbci	r25, 0xFF	; 255
    23b6:	af 4f       	sbci	r26, 0xFF	; 255
    23b8:	b1 e0       	ldi	r27, 0x01	; 1
    23ba:	3e d0       	rcall	.+124    	; 0x2438 <__ultoa_invert+0x9c>
    23bc:	b4 e0       	ldi	r27, 0x04	; 4
    23be:	3c d0       	rcall	.+120    	; 0x2438 <__ultoa_invert+0x9c>
    23c0:	67 0f       	add	r22, r23
    23c2:	78 1f       	adc	r23, r24
    23c4:	89 1f       	adc	r24, r25
    23c6:	9a 1f       	adc	r25, r26
    23c8:	a1 1d       	adc	r26, r1
    23ca:	68 0f       	add	r22, r24
    23cc:	79 1f       	adc	r23, r25
    23ce:	8a 1f       	adc	r24, r26
    23d0:	91 1d       	adc	r25, r1
    23d2:	a1 1d       	adc	r26, r1
    23d4:	6a 0f       	add	r22, r26
    23d6:	71 1d       	adc	r23, r1
    23d8:	81 1d       	adc	r24, r1
    23da:	91 1d       	adc	r25, r1
    23dc:	a1 1d       	adc	r26, r1
    23de:	20 d0       	rcall	.+64     	; 0x2420 <__ultoa_invert+0x84>
    23e0:	09 f4       	brne	.+2      	; 0x23e4 <__ultoa_invert+0x48>
    23e2:	68 94       	set
    23e4:	3f 91       	pop	r19
    23e6:	2a e0       	ldi	r18, 0x0A	; 10
    23e8:	26 9f       	mul	r18, r22
    23ea:	11 24       	eor	r1, r1
    23ec:	30 19       	sub	r19, r0
    23ee:	30 5d       	subi	r19, 0xD0	; 208
    23f0:	31 93       	st	Z+, r19
    23f2:	de f6       	brtc	.-74     	; 0x23aa <__ultoa_invert+0xe>
    23f4:	cf 01       	movw	r24, r30
    23f6:	08 95       	ret
    23f8:	46 2f       	mov	r20, r22
    23fa:	47 70       	andi	r20, 0x07	; 7
    23fc:	40 5d       	subi	r20, 0xD0	; 208
    23fe:	41 93       	st	Z+, r20
    2400:	b3 e0       	ldi	r27, 0x03	; 3
    2402:	0f d0       	rcall	.+30     	; 0x2422 <__ultoa_invert+0x86>
    2404:	c9 f7       	brne	.-14     	; 0x23f8 <__ultoa_invert+0x5c>
    2406:	f6 cf       	rjmp	.-20     	; 0x23f4 <__ultoa_invert+0x58>
    2408:	46 2f       	mov	r20, r22
    240a:	4f 70       	andi	r20, 0x0F	; 15
    240c:	40 5d       	subi	r20, 0xD0	; 208
    240e:	4a 33       	cpi	r20, 0x3A	; 58
    2410:	18 f0       	brcs	.+6      	; 0x2418 <__ultoa_invert+0x7c>
    2412:	49 5d       	subi	r20, 0xD9	; 217
    2414:	31 fd       	sbrc	r19, 1
    2416:	40 52       	subi	r20, 0x20	; 32
    2418:	41 93       	st	Z+, r20
    241a:	02 d0       	rcall	.+4      	; 0x2420 <__ultoa_invert+0x84>
    241c:	a9 f7       	brne	.-22     	; 0x2408 <__ultoa_invert+0x6c>
    241e:	ea cf       	rjmp	.-44     	; 0x23f4 <__ultoa_invert+0x58>
    2420:	b4 e0       	ldi	r27, 0x04	; 4
    2422:	a6 95       	lsr	r26
    2424:	97 95       	ror	r25
    2426:	87 95       	ror	r24
    2428:	77 95       	ror	r23
    242a:	67 95       	ror	r22
    242c:	ba 95       	dec	r27
    242e:	c9 f7       	brne	.-14     	; 0x2422 <__ultoa_invert+0x86>
    2430:	00 97       	sbiw	r24, 0x00	; 0
    2432:	61 05       	cpc	r22, r1
    2434:	71 05       	cpc	r23, r1
    2436:	08 95       	ret
    2438:	9b 01       	movw	r18, r22
    243a:	ac 01       	movw	r20, r24
    243c:	0a 2e       	mov	r0, r26
    243e:	06 94       	lsr	r0
    2440:	57 95       	ror	r21
    2442:	47 95       	ror	r20
    2444:	37 95       	ror	r19
    2446:	27 95       	ror	r18
    2448:	ba 95       	dec	r27
    244a:	c9 f7       	brne	.-14     	; 0x243e <__ultoa_invert+0xa2>
    244c:	62 0f       	add	r22, r18
    244e:	73 1f       	adc	r23, r19
    2450:	84 1f       	adc	r24, r20
    2452:	95 1f       	adc	r25, r21
    2454:	a0 1d       	adc	r26, r0
    2456:	08 95       	ret

00002458 <_exit>:
    2458:	f8 94       	cli

0000245a <__stop_program>:
    245a:	ff cf       	rjmp	.-2      	; 0x245a <__stop_program>
